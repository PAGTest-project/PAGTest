[{"uris": "src/test/java/unit/MockData.java.MockData", "name": "MockData", "file_path": "src/test/java/unit/MockData.java", "superclasses": "", "methods": ["[]MockData()"], "method_uris": ["src/test/java/unit/MockData.java.MockData.[]MockData()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class MockData {\n    private static final int intValue2 = 2;\n    public static final int HTTP_STATUS_OK = 200;\n    public static final int HTTP_STATUS_CLIENT_ERROR = 400;\n    public static final int HTTP_STATUS_SERVER_ERROR = 502;\n    public static final String PREFIX = \"/\";\n    public static final String MOCK_RESPONSE = \"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\";\n    public static final String API_KEY = \"apiKey\";\n    public static final String SECRET_KEY = \"secretKey\";\n    public static final Map<String, Object> MOCK_PARAMETERS = new LinkedHashMap<String, Object>() {{\n            put(\"key1\", \"value1\");\n            put(\"key2\", intValue2);\n        }};\n    public static final HmacSignatureGenerator HMAC_SIGNATURE_GENERATOR = new HmacSignatureGenerator(SECRET_KEY);\n    public static final WebSocketOpenCallback noopOpenCallback = msg -> { };\n    public static final WebSocketMessageCallback noopMessageCallback = msg -> { };\n    public static final WebSocketClosingCallback noopClosingCallback = (code, reason) -> { };\n    public static final WebSocketClosedCallback noopClosedCallback = (code, reason) -> { };\n    public static final WebSocketFailureCallback noopFailureCallback = (throwable, response) -> { };\n    public static final String WS_BASE_URL = \"wss://base.url\";\n    public static final Request WS_REQUEST = RequestBuilder.buildWebSocketRequest(WS_BASE_URL);\n    public static final WebSocketConnection WS_CONNECTION = new WebSocketConnection(noopOpenCallback, noopMessageCallback, noopClosingCallback, noopClosedCallback, noopFailureCallback, WS_REQUEST, null);\n    public static final String WS_ID = \"websocketId\";\n    private MockData() {\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int intValue2 = 2;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "intValue2 = 2", "syntax_pass": true}, {"attribute_expression": "public static final int HTTP_STATUS_OK = 200;", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "int", "name": "HTTP_STATUS_OK = 200", "syntax_pass": true}, {"attribute_expression": "public static final int HTTP_STATUS_CLIENT_ERROR = 400;", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "int", "name": "HTTP_STATUS_CLIENT_ERROR = 400", "syntax_pass": true}, {"attribute_expression": "public static final int HTTP_STATUS_SERVER_ERROR = 502;", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "int", "name": "HTTP_STATUS_SERVER_ERROR = 502", "syntax_pass": true}, {"attribute_expression": "public static final String PREFIX = \"/\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "PREFIX = \"/\"", "syntax_pass": true}, {"attribute_expression": "public static final String MOCK_RESPONSE = \"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "MOCK_RESPONSE = \"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\"", "syntax_pass": true}, {"attribute_expression": "public static final String API_KEY = \"apiKey\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "API_KEY = \"apiKey\"", "syntax_pass": true}, {"attribute_expression": "public static final String SECRET_KEY = \"secretKey\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "SECRET_KEY = \"secretKey\"", "syntax_pass": true}, {"attribute_expression": "public static final Map<String, Object> MOCK_PARAMETERS = new LinkedHashMap<String, Object>() {{\n            put(\"key1\", \"value1\");\n            put(\"key2\", intValue2);\n        }};", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "Map<String, Object>", "name": "MOCK_PARAMETERS = new LinkedHashMap<String, Object>() {{\n            put(\"key1\", \"value1\");\n            put(\"key2\", intValue2);\n        }}", "syntax_pass": true}, {"attribute_expression": "public static final HmacSignatureGenerator HMAC_SIGNATURE_GENERATOR = new HmacSignatureGenerator(SECRET_KEY);", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "HmacSignatureGenerator", "name": "HMAC_SIGNATURE_GENERATOR = new HmacSignatureGenerator(SECRET_KEY)", "syntax_pass": true}, {"attribute_expression": "public static final WebSocketOpenCallback noopOpenCallback = msg -> { };", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "WebSocketOpenCallback", "name": "noopOpenCallback = msg -> { }", "syntax_pass": true}, {"attribute_expression": "public static final WebSocketMessageCallback noopMessageCallback = msg -> { };", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "WebSocketMessageCallback", "name": "noopMessageCallback = msg -> { }", "syntax_pass": true}, {"attribute_expression": "public static final WebSocketClosingCallback noopClosingCallback = (code, reason) -> { };", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "WebSocketClosingCallback", "name": "noopClosingCallback = (code, reason) -> { }", "syntax_pass": true}, {"attribute_expression": "public static final WebSocketClosedCallback noopClosedCallback = (code, reason) -> { };", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "WebSocketClosedCallback", "name": "noopClosedCallback = (code, reason) -> { }", "syntax_pass": true}, {"attribute_expression": "public static final WebSocketFailureCallback noopFailureCallback = (throwable, response) -> { };", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "WebSocketFailureCallback", "name": "noopFailureCallback = (throwable, response) -> { }", "syntax_pass": true}, {"attribute_expression": "public static final String WS_BASE_URL = \"wss://base.url\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "WS_BASE_URL = \"wss://base.url\"", "syntax_pass": true}, {"attribute_expression": "public static final Request WS_REQUEST = RequestBuilder.buildWebSocketRequest(WS_BASE_URL);", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "Request", "name": "WS_REQUEST = RequestBuilder.buildWebSocketRequest(WS_BASE_URL)", "syntax_pass": true}, {"attribute_expression": "public static final WebSocketConnection WS_CONNECTION = new WebSocketConnection(noopOpenCallback, noopMessageCallback, noopClosingCallback, noopClosedCallback, noopFailureCallback, WS_REQUEST, null);", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "WebSocketConnection", "name": "WS_CONNECTION = new WebSocketConnection(noopOpenCallback, noopMessageCallback, noopClosingCallback, noopClosedCallback, noopFailureCallback, WS_REQUEST, null)", "syntax_pass": true}, {"attribute_expression": "public static final String WS_ID = \"websocketId\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "WS_ID = \"websocketId\"", "syntax_pass": true}]}, {"uris": "src/test/java/unit/MockWebServerDispatcher.java.MockWebServerDispatcher", "name": "MockWebServerDispatcher", "file_path": "src/test/java/unit/MockWebServerDispatcher.java", "superclasses": "", "methods": ["[]MockWebServerDispatcher()", "[Dispatcher]getDispatcher(String,String,String,HttpMethod,int)"], "method_uris": ["src/test/java/unit/MockWebServerDispatcher.java.MockWebServerDispatcher.[]MockWebServerDispatcher()", "src/test/java/unit/MockWebServerDispatcher.java.MockWebServerDispatcher.[Dispatcher]getDispatcher(String,String,String,HttpMethod,int)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class MockWebServerDispatcher {\n    private MockWebServerDispatcher() {\n    }\n\n    public static Dispatcher getDispatcher(String prefix, String path, String response, HttpMethod method, int statusCode) {\n        final Dispatcher dispatcher = new Dispatcher() {\n            @Override\n            public MockResponse dispatch(RecordedRequest request) {\n                if ((request.getPath()).contains(prefix + path) && request.getMethod().equals(method.toString())) {\n                    return new MockResponse()\n                            .addHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n                            .setResponseCode(statusCode)\n                            .setBody(response);\n                }\n                return new MockResponse().setResponseCode(MockData.HTTP_STATUS_CLIENT_ERROR);\n            }\n        };\n        return dispatcher;\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/PrivateConfig.java.PrivateConfig", "name": "PrivateConfig", "file_path": "src/test/java/examples/PrivateConfig.java", "superclasses": "", "methods": ["[]PrivateConfig()"], "method_uris": ["src/test/java/examples/PrivateConfig.java.PrivateConfig.[]PrivateConfig()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class PrivateConfig {\n    private PrivateConfig() {\n    }\n    public static final String BASE_URL = \"https://testnet.binance.vision\";\n\n    public static final String API_KEY = \"\";\n    public static final String SECRET_KEY = \"\"; // Unnecessary if PRIVATE_KEY_PATH is used\n    public static final String PRIVATE_KEY_PATH = \"\"; // Key must be PKCS#8 standard\n\n    public static final String TESTNET_API_KEY = \"\";\n    public static final String TESTNET_SECRET_KEY = \"\"; // Unnecessary if TESTNET_PRIVATE_KEY_PATH is used\n    public static final String TESTNET_PRIVATE_KEY_PATH = \"\"; //Key must be PKCS#8 standard\n}", "super_interfaces": [], "fields": [{"attribute_expression": "public static final String BASE_URL = \"https://testnet.binance.vision\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "BASE_URL = \"https://testnet.binance.vision\"", "syntax_pass": true}, {"attribute_expression": "public static final String API_KEY = \"\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "API_KEY = \"\"", "syntax_pass": true}, {"attribute_expression": "public static final String SECRET_KEY = \"\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "SECRET_KEY = \"\"", "syntax_pass": true}, {"attribute_expression": "public static final String PRIVATE_KEY_PATH = \"\";", "docstring": " Unnecessary if PRIVATE_KEY_PATH is used", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "PRIVATE_KEY_PATH = \"\"", "syntax_pass": true}, {"attribute_expression": "public static final String TESTNET_API_KEY = \"\";", "docstring": " Key must be PKCS#8 standard", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "TESTNET_API_KEY = \"\"", "syntax_pass": true}, {"attribute_expression": "public static final String TESTNET_SECRET_KEY = \"\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "TESTNET_SECRET_KEY = \"\"", "syntax_pass": true}, {"attribute_expression": "public static final String TESTNET_PRIVATE_KEY_PATH = \"\";", "docstring": " Unnecessary if TESTNET_PRIVATE_KEY_PATH is used", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "TESTNET_PRIVATE_KEY_PATH = \"\"", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/WsStreamWithWsApiTrade.java.WsStreamWithWsApiTrade", "name": "WsStreamWithWsApiTrade", "file_path": "src/test/java/examples/websocketapi/WsStreamWithWsApiTrade.java", "superclasses": "", "methods": ["[]WsStreamWithWsApiTrade()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/WsStreamWithWsApiTrade.java.WsStreamWithWsApiTrade.[]WsStreamWithWsApiTrade()", "src/test/java/examples/websocketapi/WsStreamWithWsApiTrade.java.WsStreamWithWsApiTrade.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class WsStreamWithWsApiTrade {\n    \n    private WsStreamWithWsApiTrade() {\n    }\n\n    private static final double quantity = 0.01;\n    private static final int waitTime = 5000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        // ws stream call\n        WebSocketStreamClient streamClient = new WebSocketStreamClientImpl(DefaultUrls.TESTNET_WS_URL);\n\n        WebSocketMessageCallback streamOnMsgCallback = (event) -> {\n            System.out.println(event);\n        };\n        \n        streamClient.tradeStream(\"BTCUSDT\", streamOnMsgCallback);\n\n        Thread.sleep(waitTime);\n\n        // ws api call\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient apiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n        apiClient.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        JSONObject params = new JSONObject();\n        params.put(\"quantity\", quantity);\n\n        apiClient.trade().testNewOrder(\"BTCUSDT\", \"BUY\", \"MARKET\", params);\n\n        Thread.sleep(waitTime);\n        \n        // closing all connections\n        streamClient.closeAllConnections();\n        apiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final int waitTime = 5000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 5000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/WsApiwithAllCallbacks.java.WsApiwithAllCallbacks", "name": "WsApiwithAllCallbacks", "file_path": "src/test/java/examples/websocketapi/WsApiwithAllCallbacks.java", "superclasses": "", "methods": ["[]WsApiwithAllCallbacks()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/WsApiwithAllCallbacks.java.WsApiwithAllCallbacks.[]WsApiwithAllCallbacks()", "src/test/java/examples/websocketapi/WsApiwithAllCallbacks.java.WsApiwithAllCallbacks.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class WsApiwithAllCallbacks {\n    private WsApiwithAllCallbacks() {\n    }\n\n    private static WebSocketOpenCallback onOpenCallback;\n    private static WebSocketMessageCallback onMessageCallback;\n    private static WebSocketClosingCallback onClosingCallback;\n    private static WebSocketClosedCallback onClosedCallback;\n    private static WebSocketFailureCallback onFailureCallback;\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        onOpenCallback = openEvent -> {\n            System.out.println(\"Open Connection: \" + openEvent.toString());\n        };\n\n        onMessageCallback = (message) -> {\n            System.out.println(\"Connection Message:\" + message);\n        };\n\n        onClosingCallback = (code, reason) -> {\n            System.out.println(\"Closing Connection: code=\" + code + \", reason=\" + reason);\n        };\n\n        onClosedCallback = (code, reason) -> {\n            System.out.println(\"Closed Connection: code=\" + code + \", reason=\" + reason);\n        };\n\n        onFailureCallback = (throwable, response) -> {\n            System.out.println(\"Connection Failed: throwable=\" + throwable.getMessage());\n        };\n\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback);\n        \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        client.general().ping(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static WebSocketOpenCallback onOpenCallback;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketOpenCallback", "name": "onOpenCallback", "syntax_pass": true}, {"attribute_expression": "private static WebSocketMessageCallback onMessageCallback;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketMessageCallback", "name": "onMessageCallback", "syntax_pass": true}, {"attribute_expression": "private static WebSocketClosingCallback onClosingCallback;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketClosingCallback", "name": "onClosingCallback", "syntax_pass": true}, {"attribute_expression": "private static WebSocketClosedCallback onClosedCallback;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketClosedCallback", "name": "onClosedCallback", "syntax_pass": true}, {"attribute_expression": "private static WebSocketFailureCallback onFailureCallback;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketFailureCallback", "name": "onFailureCallback", "syntax_pass": true}, {"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/general/Ping.java.Ping", "name": "Ping", "file_path": "src/test/java/examples/websocketapi/general/Ping.java", "superclasses": "", "methods": ["[]Ping()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/general/Ping.java.Ping.[]Ping()", "src/test/java/examples/websocketapi/general/Ping.java.Ping.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Ping {\n    private Ping() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        client.general().ping(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/general/ServerTime.java.ServerTime", "name": "ServerTime", "file_path": "src/test/java/examples/websocketapi/general/ServerTime.java", "superclasses": "", "methods": ["[]ServerTime()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/general/ServerTime.java.ServerTime.[]ServerTime()", "src/test/java/examples/websocketapi/general/ServerTime.java.ServerTime.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ServerTime {\n    private ServerTime() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n\n        WebSocketMessageCallback onMessageCallback = (event) -> {\n            System.out.println(event);\n        };\n\n        client.connect(onMessageCallback);\n        \n        client.general().serverTime(null);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/general/ExchangeInfo.java.ExchangeInfo", "name": "ExchangeInfo", "file_path": "src/test/java/examples/websocketapi/general/ExchangeInfo.java", "superclasses": "", "methods": ["[]ExchangeInfo()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/general/ExchangeInfo.java.ExchangeInfo.[]ExchangeInfo()", "src/test/java/examples/websocketapi/general/ExchangeInfo.java.ExchangeInfo.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ExchangeInfo {\n\n    private ExchangeInfo() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event + \"\\n\");\n        }));\n\n        // empty params\n        JSONObject params = new JSONObject();\n        client.general().exchangeInfo(params);\n        Thread.sleep(waitTime);\n\n        // one symbol\n        params.put(\"symbol\", \"ETHRUB\");\n        client.general().exchangeInfo(params);\n        Thread.sleep(waitTime);\n\n        // multiple symbols\n        params.clear();\n        String[] symbols = new String[]{\"BTCUSDT\", \"BNBUSDT\"};\n        params.put(\"symbols\", symbols);\n        client.general().exchangeInfo(params);\n        Thread.sleep(waitTime);\n\n        // specific permissions\n        params.clear();\n        String[] permissions = new String[]{\"SPOT\", \"MARGIN\"};\n        params.put(\"permissions\", permissions);\n        client.general().exchangeInfo(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/authentication/Logout.java.Logout", "name": "Logout", "file_path": "src/test/java/examples/websocketapi/authentication/Logout.java", "superclasses": "", "methods": ["[]Logout()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/authentication/Logout.java.Logout.[]Logout()", "src/test/java/examples/websocketapi/authentication/Logout.java.Logout.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Logout {\n\n    private Logout() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n        \n        WebSocketApiAuth auth = wsApiClient.auth();\n\n        JSONObject params = new JSONObject();\n        auth.logon(params);\n\n        params.clear();\n        params.put(\"requestId\", \"randomId\");\n        auth.status(params);\n\n        params.clear();\n        params.put(\"requestId\", \"randomId\");\n        auth.logout(params);\n\n        params.clear();\n        wsApiClient.account().accountAllOrders(\"BTCUSDT\", params);\n\n        Thread.sleep(waitTime);\n\n        wsApiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/authentication/Status.java.Status", "name": "Status", "file_path": "src/test/java/examples/websocketapi/authentication/Status.java", "superclasses": "", "methods": ["[]Status()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/authentication/Status.java.Status.[]Status()", "src/test/java/examples/websocketapi/authentication/Status.java.Status.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Status {\n\n    private Status() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n\n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        wsApiClient.auth().status(params);\n\n        Thread.sleep(waitTime);\n\n        wsApiClient.close();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/authentication/Logon.java.Logon", "name": "Logon", "file_path": "src/test/java/examples/websocketapi/authentication/Logon.java", "superclasses": "", "methods": ["[]Logon()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/authentication/Logon.java.Logon.[]Logon()", "src/test/java/examples/websocketapi/authentication/Logon.java.Logon.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Logon {\n\n    private Logon() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n        \n        WebSocketApiAuth auth = wsApiClient.auth();\n\n        JSONObject params = new JSONObject();\n        auth.logon(params);\n\n        params.clear(); \n        wsApiClient.account().accountAllOrders(\"BTCUSDT\", params);\n\n        Thread.sleep(waitTime);\n\n        wsApiClient.close();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/account/AccountAllocations.java.AccountAllocations", "name": "AccountAllocations", "file_path": "src/test/java/examples/websocketapi/account/AccountAllocations.java", "superclasses": "", "methods": ["[]AccountAllocations()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/account/AccountAllocations.java.AccountAllocations.[]AccountAllocations()", "src/test/java/examples/websocketapi/account/AccountAllocations.java.AccountAllocations.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AccountAllocations {\n    \n    private AccountAllocations() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.account().accountAllocations(\"BTCUSDT\", null);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/account/AccountAllOrders.java.AccountAllOrders", "name": "AccountAllOrders", "file_path": "src/test/java/examples/websocketapi/account/AccountAllOrders.java", "superclasses": "", "methods": ["[]AccountAllOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/account/AccountAllOrders.java.AccountAllOrders.[]AccountAllOrders()", "src/test/java/examples/websocketapi/account/AccountAllOrders.java.AccountAllOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AccountAllOrders {\n    \n    private AccountAllOrders() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.account().accountAllOrders(\"BTCUSDT\", null);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/account/AccountTradeHistory.java.AccountTradeHistory", "name": "AccountTradeHistory", "file_path": "src/test/java/examples/websocketapi/account/AccountTradeHistory.java", "superclasses": "", "methods": ["[]AccountTradeHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/account/AccountTradeHistory.java.AccountTradeHistory.[]AccountTradeHistory()", "src/test/java/examples/websocketapi/account/AccountTradeHistory.java.AccountTradeHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AccountTradeHistory {\n    \n    private AccountTradeHistory() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.account().accountTradeHistory(\"BTCUSDT\", null);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/account/AccountRateLimitsOrders.java.AccountRateLimitsOrders", "name": "AccountRateLimitsOrders", "file_path": "src/test/java/examples/websocketapi/account/AccountRateLimitsOrders.java", "superclasses": "", "methods": ["[]AccountRateLimitsOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/account/AccountRateLimitsOrders.java.AccountRateLimitsOrders.[]AccountRateLimitsOrders()", "src/test/java/examples/websocketapi/account/AccountRateLimitsOrders.java.AccountRateLimitsOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AccountRateLimitsOrders {\n    \n    private AccountRateLimitsOrders() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.account().accountRateLimitsOrders(null);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/account/AccountAllOcoOrders.java.AccountAllOcoOrders", "name": "AccountAllOcoOrders", "file_path": "src/test/java/examples/websocketapi/account/AccountAllOcoOrders.java", "superclasses": "", "methods": ["[]AccountAllOcoOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/account/AccountAllOcoOrders.java.AccountAllOcoOrders.[]AccountAllOcoOrders()", "src/test/java/examples/websocketapi/account/AccountAllOcoOrders.java.AccountAllOcoOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AccountAllOcoOrders {\n    \n    private AccountAllOcoOrders() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.account().accountAllOcoOrders(null);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/account/AccountCommissionRates.java.AccountCommissionRates", "name": "AccountCommissionRates", "file_path": "src/test/java/examples/websocketapi/account/AccountCommissionRates.java", "superclasses": "", "methods": ["[]AccountCommissionRates()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/account/AccountCommissionRates.java.AccountCommissionRates.[]AccountCommissionRates()", "src/test/java/examples/websocketapi/account/AccountCommissionRates.java.AccountCommissionRates.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AccountCommissionRates {\n    \n    private AccountCommissionRates() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.account().accountCommissionRates(\"BTCUSDT\", null);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/account/AccountPreventedMatches.java.AccountPreventedMatches", "name": "AccountPreventedMatches", "file_path": "src/test/java/examples/websocketapi/account/AccountPreventedMatches.java", "superclasses": "", "methods": ["[]AccountPreventedMatches()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/account/AccountPreventedMatches.java.AccountPreventedMatches.[]AccountPreventedMatches()", "src/test/java/examples/websocketapi/account/AccountPreventedMatches.java.AccountPreventedMatches.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AccountPreventedMatches {\n    \n    private AccountPreventedMatches() {\n    }\n\n    private static final int waitTime = 60000;\n    private static final long preventedMatchId = 1234;\n\n    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        JSONObject parameters = new JSONObject();\n        parameters.put(\"preventedMatchId\", preventedMatchId);\n\n        client.account().accountPreventedMatches(\"BTCUSDT\", parameters);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}, {"attribute_expression": "private static final long preventedMatchId = 1234;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "preventedMatchId = 1234", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/account/AccountStatus.java.AccountStatus", "name": "AccountStatus", "file_path": "src/test/java/examples/websocketapi/account/AccountStatus.java", "superclasses": "", "methods": ["[]AccountStatus()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/account/AccountStatus.java.AccountStatus.[]AccountStatus()", "src/test/java/examples/websocketapi/account/AccountStatus.java.AccountStatus.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AccountStatus {\n    \n    private AccountStatus() {\n    }\n\n    private static final int recvWindow = 6000;\n    private static final int requestId = 1234;\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        \n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event + \"\\n\");\n        }));\n        \n        JSONObject params = new JSONObject();\n        params.put(\"recvWindow\", recvWindow);\n\n        // with empty requestId\n        params.put(\"requestId\", \"\");\n        client.account().accountStatus(params);\n        Thread.sleep(waitTime);\n\n        // without requestId\n        params.clear();\n        client.account().accountStatus(params);\n        Thread.sleep(waitTime);\n\n        // with string requestId\n        params.clear();\n        params.put(\"requestId\", \"requestId\");\n        client.account().accountStatus(params);\n        Thread.sleep(waitTime);\n        \n        // with int requestId\n        params.clear();\n        params.put(\"requestId\", requestId);\n        client.account().accountStatus(params);\n        Thread.sleep(waitTime);\n\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int recvWindow = 6000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "recvWindow = 6000", "syntax_pass": true}, {"attribute_expression": "private static final int requestId = 1234;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "requestId = 1234", "syntax_pass": true}, {"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/signature/Rsa.java.Rsa", "name": "Rsa", "file_path": "src/test/java/examples/websocketapi/signature/Rsa.java", "superclasses": "", "methods": ["[]Rsa()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/signature/Rsa.java.Rsa.[]Rsa()", "src/test/java/examples/websocketapi/signature/Rsa.java.Rsa.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Rsa {\n    private Rsa() {\n    }\n\n    private static final double quantity = 0.01;\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        RsaSignatureGenerator signatureGenerator =  new RsaSignatureGenerator(PrivateConfig.TESTNET_PRIVATE_KEY_PATH);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        params.put(\"quantity\", quantity);\n\n        client.trade().testNewOrder(\"BTCUSDT\", \"BUY\", \"MARKET\", params);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/signature/Ed25519.java.Ed25519", "name": "Ed25519", "file_path": "src/test/java/examples/websocketapi/signature/Ed25519.java", "superclasses": "", "methods": ["[]Ed25519()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/signature/Ed25519.java.Ed25519.[]Ed25519()", "src/test/java/examples/websocketapi/signature/Ed25519.java.Ed25519.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Ed25519 {\n    private Ed25519() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException, FileNotFoundException, IOException {\n        Ed25519SignatureGenerator signatureGenerator =  new Ed25519SignatureGenerator(PrivateConfig.TESTNET_PRIVATE_KEY_PATH);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.account().accountStatus(null);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/trade/NewSorOrder.java.NewSorOrder", "name": "NewSorOrder", "file_path": "src/test/java/examples/websocketapi/trade/NewSorOrder.java", "superclasses": "", "methods": ["[]NewSorOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/trade/NewSorOrder.java.NewSorOrder.[]NewSorOrder()", "src/test/java/examples/websocketapi/trade/NewSorOrder.java.NewSorOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class NewSorOrder {\n\n    private NewSorOrder() {\n    }\n\n    private static final double quantity = 0.01;\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n      \n        wsApiClient.trade().newSorOrder(\"BTCUSDT\", \"BUY\", \"MARKET\", quantity, params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/trade/GetOpenOrders.java.GetOpenOrders", "name": "GetOpenOrders", "file_path": "src/test/java/examples/websocketapi/trade/GetOpenOrders.java", "superclasses": "", "methods": ["[]GetOpenOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/trade/GetOpenOrders.java.GetOpenOrders.[]GetOpenOrders()", "src/test/java/examples/websocketapi/trade/GetOpenOrders.java.GetOpenOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetOpenOrders {\n\n    private GetOpenOrders() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        wsApiClient.trade().getOpenOrders(null);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/trade/CancelAllOpenOrders.java.CancelAllOpenOrders", "name": "CancelAllOpenOrders", "file_path": "src/test/java/examples/websocketapi/trade/CancelAllOpenOrders.java", "superclasses": "", "methods": ["[]CancelAllOpenOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/trade/CancelAllOpenOrders.java.CancelAllOpenOrders.[]CancelAllOpenOrders()", "src/test/java/examples/websocketapi/trade/CancelAllOpenOrders.java.CancelAllOpenOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CancelAllOpenOrders {\n\n    private CancelAllOpenOrders() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n      \n        wsApiClient.trade().cancelAllOpenOrders(\"BTCUSDT\", params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/trade/GetOrder.java.GetOrder", "name": "GetOrder", "file_path": "src/test/java/examples/websocketapi/trade/GetOrder.java", "superclasses": "", "methods": ["[]GetOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/trade/GetOrder.java.GetOrder.[]GetOrder()", "src/test/java/examples/websocketapi/trade/GetOrder.java.GetOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetOrder {\n\n    private GetOrder() {\n    }\n\n    private static final int orderId = 3083708;\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"orderId\", orderId);\n      \n        wsApiClient.trade().getOrder(\"BTCUSDT\", params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int orderId = 3083708;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "orderId = 3083708", "syntax_pass": true}, {"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/trade/CancelOcoOrder.java.CancelOcoOrder", "name": "CancelOcoOrder", "file_path": "src/test/java/examples/websocketapi/trade/CancelOcoOrder.java", "superclasses": "", "methods": ["[]CancelOcoOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/trade/CancelOcoOrder.java.CancelOcoOrder.[]CancelOcoOrder()", "src/test/java/examples/websocketapi/trade/CancelOcoOrder.java.CancelOcoOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CancelOcoOrder {\n\n    private CancelOcoOrder() {\n    }\n\n    private static final int orderListId = 3476;\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"orderListId\", orderListId);\n      \n        wsApiClient.trade().cancelOcoOrder(\"ETHBTC\", params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int orderListId = 3476;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "orderListId = 3476", "syntax_pass": true}, {"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/trade/NewOrder.java.NewOrder", "name": "NewOrder", "file_path": "src/test/java/examples/websocketapi/trade/NewOrder.java", "superclasses": "", "methods": ["[]NewOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/trade/NewOrder.java.NewOrder.[]NewOrder()", "src/test/java/examples/websocketapi/trade/NewOrder.java.NewOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class NewOrder {\n\n    private NewOrder() {\n    }\n\n    private static final double quantity = 0.01;\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        params.put(\"quantity\", quantity);\n      \n        wsApiClient.trade().newOrder(\"BTCUSDT\", \"BUY\", \"MARKET\", params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/trade/CancelReplaceOrder.java.CancelReplaceOrder", "name": "CancelReplaceOrder", "file_path": "src/test/java/examples/websocketapi/trade/CancelReplaceOrder.java", "superclasses": "", "methods": ["[]CancelReplaceOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/trade/CancelReplaceOrder.java.CancelReplaceOrder.[]CancelReplaceOrder()", "src/test/java/examples/websocketapi/trade/CancelReplaceOrder.java.CancelReplaceOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CancelReplaceOrder {\n\n    private CancelReplaceOrder() {\n    }\n\n    private static final double quantity = 0.01;\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        params.put(\"quantity\", quantity);\n        params.put(\"cancelOrigClientOrderId\", \"randomClientOrderId\");\n      \n        wsApiClient.trade().cancelReplaceOrder(\"BTCUSDT\", \"STOP_ON_FAILURE\", \"BUY\", \"MARKET\", params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/trade/GetOcoOrder.java.GetOcoOrder", "name": "GetOcoOrder", "file_path": "src/test/java/examples/websocketapi/trade/GetOcoOrder.java", "superclasses": "", "methods": ["[]GetOcoOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/trade/GetOcoOrder.java.GetOcoOrder.[]GetOcoOrder()", "src/test/java/examples/websocketapi/trade/GetOcoOrder.java.GetOcoOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetOcoOrder {\n\n    private GetOcoOrder() {\n    }\n\n    private static final int orderListId = 3475;\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"orderListId\", orderListId);\n      \n        wsApiClient.trade().getOcoOrder(params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int orderListId = 3475;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "orderListId = 3475", "syntax_pass": true}, {"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/trade/GetOpenOcoOrders.java.GetOpenOcoOrders", "name": "GetOpenOcoOrders", "file_path": "src/test/java/examples/websocketapi/trade/GetOpenOcoOrders.java", "superclasses": "", "methods": ["[]GetOpenOcoOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/trade/GetOpenOcoOrders.java.GetOpenOcoOrders.[]GetOpenOcoOrders()", "src/test/java/examples/websocketapi/trade/GetOpenOcoOrders.java.GetOpenOcoOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetOpenOcoOrders {\n\n    private GetOpenOcoOrders() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        wsApiClient.trade().getOpenOcoOrders(null);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/trade/CancelOrder.java.CancelOrder", "name": "CancelOrder", "file_path": "src/test/java/examples/websocketapi/trade/CancelOrder.java", "superclasses": "", "methods": ["[]CancelOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/trade/CancelOrder.java.CancelOrder.[]CancelOrder()", "src/test/java/examples/websocketapi/trade/CancelOrder.java.CancelOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CancelOrder {\n\n    private CancelOrder() {\n    }\n\n    private static final int orderId = 3083708;\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"orderId\", orderId);\n      \n        wsApiClient.trade().cancelOrder(\"BTCUSDT\", params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int orderId = 3083708;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "orderId = 3083708", "syntax_pass": true}, {"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/trade/NewOrderTest.java.NewOrderTest", "name": "NewOrderTest", "file_path": "src/test/java/examples/websocketapi/trade/NewOrderTest.java", "superclasses": "", "methods": ["[]NewOrderTest()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/trade/NewOrderTest.java.NewOrderTest.[]NewOrderTest()", "src/test/java/examples/websocketapi/trade/NewOrderTest.java.NewOrderTest.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class NewOrderTest {\n\n    private NewOrderTest() {\n    }\n\n    private static final double quantity = 0.01;\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        params.put(\"quantity\", quantity);\n      \n        wsApiClient.trade().testNewOrder(\"BTCUSDT\", \"BUY\", \"MARKET\", params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/trade/NewSorOrderTest.java.NewSorOrderTest", "name": "NewSorOrderTest", "file_path": "src/test/java/examples/websocketapi/trade/NewSorOrderTest.java", "superclasses": "", "methods": ["[]NewSorOrderTest()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/trade/NewSorOrderTest.java.NewSorOrderTest.[]NewSorOrderTest()", "src/test/java/examples/websocketapi/trade/NewSorOrderTest.java.NewSorOrderTest.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class NewSorOrderTest {\n\n    private NewSorOrderTest() {\n    }\n\n    private static final double quantity = 0.01;\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        params.put(\"computeCommissionRates\", true);\n      \n        wsApiClient.trade().testNewSorOrder(\"BTCUSDT\", \"BUY\", \"MARKET\", quantity, params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/trade/NewOcoOrder.java.NewOcoOrder", "name": "NewOcoOrder", "file_path": "src/test/java/examples/websocketapi/trade/NewOcoOrder.java", "superclasses": "", "methods": ["[]NewOcoOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/trade/NewOcoOrder.java.NewOcoOrder.[]NewOcoOrder()", "src/test/java/examples/websocketapi/trade/NewOcoOrder.java.NewOcoOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class NewOcoOrder {\n\n    private NewOcoOrder() {\n    }\n\n    private static final double limitPrice = 0.07160;\n    private static final double stopPrice = 0.07050;\n    private static final double stopLimitPrice = 0.07040;\n    private static final double quantity = 0.01;\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient wsApiClient = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        wsApiClient.connect(((message) -> {\n            System.out.println(message);\n        }));\n      \n        JSONObject params = new JSONObject();\n        params.put(\"requestId\", \"randomId\");\n        params.put(\"stopPrice\", stopPrice);\n        params.put(\"stopLimitPrice\", stopLimitPrice);\n        params.put(\"stopLimitTimeInForce\", \"GTC\");\n      \n        wsApiClient.trade().newOcoOrder(\"ETHBTC\", \"SELL\", limitPrice, quantity, params);\n      \n        Thread.sleep(waitTime);\n      \n        wsApiClient.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double limitPrice = 0.07160;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "limitPrice = 0.07160", "syntax_pass": true}, {"attribute_expression": "private static final double stopPrice = 0.07050;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "stopPrice = 0.07050", "syntax_pass": true}, {"attribute_expression": "private static final double stopLimitPrice = 0.07040;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "stopLimitPrice = 0.07040", "syntax_pass": true}, {"attribute_expression": "private static final double quantity = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/market/Ticker24H.java.Ticker24H", "name": "Ticker24H", "file_path": "src/test/java/examples/websocketapi/market/Ticker24H.java", "superclasses": "", "methods": ["[]Ticker24H()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/market/Ticker24H.java.Ticker24H.[]Ticker24H()", "src/test/java/examples/websocketapi/market/Ticker24H.java.Ticker24H.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Ticker24H {\n\n    private Ticker24H() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        JSONObject params = new JSONObject();\n        String[] symbols = new String[]{\"BTCUSDT\", \"BNBUSDT\"};\n\n        params.put(\"symbols\", symbols);\n        client.market().ticker24H(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/market/HistoricaTrades.java.HistoricaTrades", "name": "HistoricaTrades", "file_path": "src/test/java/examples/websocketapi/market/HistoricaTrades.java", "superclasses": "", "methods": ["[]HistoricaTrades()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/market/HistoricaTrades.java.HistoricaTrades.[]HistoricaTrades()", "src/test/java/examples/websocketapi/market/HistoricaTrades.java.HistoricaTrades.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class HistoricaTrades {\n\n    private HistoricaTrades() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.market().historicalTrades(\"BTCUSDT\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/market/RecentTrades.java.RecentTrades", "name": "RecentTrades", "file_path": "src/test/java/examples/websocketapi/market/RecentTrades.java", "superclasses": "", "methods": ["[]RecentTrades()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/market/RecentTrades.java.RecentTrades.[]RecentTrades()", "src/test/java/examples/websocketapi/market/RecentTrades.java.RecentTrades.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RecentTrades {\n\n    private RecentTrades() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.market().recentTrades(\"BTCUSDT\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/market/Depth.java.Depth", "name": "Depth", "file_path": "src/test/java/examples/websocketapi/market/Depth.java", "superclasses": "", "methods": ["[]Depth()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/market/Depth.java.Depth.[]Depth()", "src/test/java/examples/websocketapi/market/Depth.java.Depth.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Depth {\n\n    private Depth() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.market().depth(\"BTCUSDT\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/market/AvgPrice.java.AvgPrice", "name": "AvgPrice", "file_path": "src/test/java/examples/websocketapi/market/AvgPrice.java", "superclasses": "", "methods": ["[]AvgPrice()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/market/AvgPrice.java.AvgPrice.[]AvgPrice()", "src/test/java/examples/websocketapi/market/AvgPrice.java.AvgPrice.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AvgPrice {\n\n    private AvgPrice() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.market().avgPrice(\"BTCUSDT\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/market/TickerPrice.java.TickerPrice", "name": "TickerPrice", "file_path": "src/test/java/examples/websocketapi/market/TickerPrice.java", "superclasses": "", "methods": ["[]TickerPrice()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/market/TickerPrice.java.TickerPrice.[]TickerPrice()", "src/test/java/examples/websocketapi/market/TickerPrice.java.TickerPrice.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TickerPrice {\n\n    private TickerPrice() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        JSONObject params = new JSONObject();\n        String[] symbols = new String[]{\"BTCUSDT\", \"BNBUSDT\"};\n\n        params.put(\"symbols\", symbols);\n        client.market().tickerPrice(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/market/AggTrades.java.AggTrades", "name": "AggTrades", "file_path": "src/test/java/examples/websocketapi/market/AggTrades.java", "superclasses": "", "methods": ["[]AggTrades()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/market/AggTrades.java.AggTrades.[]AggTrades()", "src/test/java/examples/websocketapi/market/AggTrades.java.AggTrades.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AggTrades {\n\n    private AggTrades() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.market().aggTrades(\"BTCUSDT\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/market/TickerBook.java.TickerBook", "name": "TickerBook", "file_path": "src/test/java/examples/websocketapi/market/TickerBook.java", "superclasses": "", "methods": ["[]TickerBook()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/market/TickerBook.java.TickerBook.[]TickerBook()", "src/test/java/examples/websocketapi/market/TickerBook.java.TickerBook.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TickerBook {\n\n    private TickerBook() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        JSONObject params = new JSONObject();\n        String[] symbols = new String[]{\"BTCUSDT\", \"BNBUSDT\"};\n\n        params.put(\"symbols\", symbols);\n        client.market().tickerBook(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/market/UiKlines.java.UiKlines", "name": "UiKlines", "file_path": "src/test/java/examples/websocketapi/market/UiKlines.java", "superclasses": "", "methods": ["[]UiKlines()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/market/UiKlines.java.UiKlines.[]UiKlines()", "src/test/java/examples/websocketapi/market/UiKlines.java.UiKlines.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class UiKlines {\n\n    private UiKlines() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.market().uiKlines(\"BTCUSDT\", \"1d\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/market/Ticker.java.Ticker", "name": "Ticker", "file_path": "src/test/java/examples/websocketapi/market/Ticker.java", "superclasses": "", "methods": ["[]Ticker()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/market/Ticker.java.Ticker.[]Ticker()", "src/test/java/examples/websocketapi/market/Ticker.java.Ticker.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Ticker {\n\n    private Ticker() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        JSONObject params = new JSONObject();\n        String[] symbols = new String[]{\"BTCUSDT\", \"BNBUSDT\"};\n\n        params.put(\"symbols\", symbols);\n        client.market().ticker(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/market/Klines.java.Klines", "name": "Klines", "file_path": "src/test/java/examples/websocketapi/market/Klines.java", "superclasses": "", "methods": ["[]Klines()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/market/Klines.java.Klines.[]Klines()", "src/test/java/examples/websocketapi/market/Klines.java.Klines.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Klines {\n\n    private Klines() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        client.market().klines(\"BTCUSDT\", \"1d\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/market/TickerTradingDay.java.TickerTradingDay", "name": "TickerTradingDay", "file_path": "src/test/java/examples/websocketapi/market/TickerTradingDay.java", "superclasses": "", "methods": ["[]TickerTradingDay()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/market/TickerTradingDay.java.TickerTradingDay.[]TickerTradingDay()", "src/test/java/examples/websocketapi/market/TickerTradingDay.java.TickerTradingDay.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TickerTradingDay {\n\n    private TickerTradingDay() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n\n        JSONObject params = new JSONObject();\n        String[] symbols = new String[]{\"BTCUSDT\", \"BNBUSDT\"};\n\n        params.put(\"symbols\", symbols);\n        client.market().tickerTradingDay(params);\n\n        Thread.sleep(waitTime);\n        client.close();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamPing.java.UserDataStreamPing", "name": "UserDataStreamPing", "file_path": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamPing.java", "superclasses": "", "methods": ["[]UserDataStreamPing()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/userdatastream/UserDataStreamPing.java.UserDataStreamPing.[]UserDataStreamPing()", "src/test/java/examples/websocketapi/userdatastream/UserDataStreamPing.java.UserDataStreamPing.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class UserDataStreamPing {\n    \n    private UserDataStreamPing() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.userDataStream().userDataStreamPing(\"listenKey\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStart.java.UserDataStreamStart", "name": "UserDataStreamStart", "file_path": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStart.java", "superclasses": "", "methods": ["[]UserDataStreamStart()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/userdatastream/UserDataStreamStart.java.UserDataStreamStart.[]UserDataStreamStart()", "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStart.java.UserDataStreamStart.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class UserDataStreamStart {\n    \n    private UserDataStreamStart() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.userDataStream().userDataStreamStart(null);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStop.java.UserDataStreamStop", "name": "UserDataStreamStop", "file_path": "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStop.java", "superclasses": "", "methods": ["[]UserDataStreamStop()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketapi/userdatastream/UserDataStreamStop.java.UserDataStreamStop.[]UserDataStreamStop()", "src/test/java/examples/websocketapi/userdatastream/UserDataStreamStop.java.UserDataStreamStop.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class UserDataStreamStop {\n    \n    private UserDataStreamStop() {\n    }\n\n    private static final int waitTime = 60000;\n\n    public static void main(String[] args) throws InterruptedException {\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(PrivateConfig.TESTNET_API_KEY, signatureGenerator, DefaultUrls.TESTNET_WS_API_URL);\n\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        \n        client.userDataStream().userDataStreamStop(\"listenKey\", null);\n\n        Thread.sleep(waitTime);\n        client.close();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int waitTime = 60000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "waitTime = 60000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/subaccount/FuturesAccount.java.FuturesAccount", "name": "FuturesAccount", "file_path": "src/test/java/examples/spot/subaccount/FuturesAccount.java", "superclasses": "", "methods": ["[]FuturesAccount()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/FuturesAccount.java.FuturesAccount.[]FuturesAccount()", "src/test/java/examples/spot/subaccount/FuturesAccount.java.FuturesAccount.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FuturesAccount {\n    private FuturesAccount() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresAccount(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/ManagedSubWithdraw.java.ManagedSubWithdraw", "name": "ManagedSubWithdraw", "file_path": "src/test/java/examples/spot/subaccount/ManagedSubWithdraw.java", "superclasses": "", "methods": ["[]ManagedSubWithdraw()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/ManagedSubWithdraw.java.ManagedSubWithdraw.[]ManagedSubWithdraw()", "src/test/java/examples/spot/subaccount/ManagedSubWithdraw.java.ManagedSubWithdraw.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ManagedSubWithdraw {\n    private ManagedSubWithdraw() {\n    }\n    private static final double amount = 0.01;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"\");\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().managedSubWithdraw(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/subaccount/FuturesPositionRisk.java.FuturesPositionRisk", "name": "FuturesPositionRisk", "file_path": "src/test/java/examples/spot/subaccount/FuturesPositionRisk.java", "superclasses": "", "methods": ["[]FuturesPositionRisk()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/FuturesPositionRisk.java.FuturesPositionRisk.[]FuturesPositionRisk()", "src/test/java/examples/spot/subaccount/FuturesPositionRisk.java.FuturesPositionRisk.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FuturesPositionRisk {\n    private FuturesPositionRisk() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"another_virtual@q6c1dsmxnoemail.com\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresPositionRisk(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/EnableFutures.java.EnableFutures", "name": "EnableFutures", "file_path": "src/test/java/examples/spot/subaccount/EnableFutures.java", "superclasses": "", "methods": ["[]EnableFutures()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/EnableFutures.java.EnableFutures.[]EnableFutures()", "src/test/java/examples/spot/subaccount/EnableFutures.java.EnableFutures.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EnableFutures {\n    private EnableFutures() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"another_virtual@q6c1dsmxnoemail.com\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().enableFutures(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/EnableLeverageToken.java.EnableLeverageToken", "name": "EnableLeverageToken", "file_path": "src/test/java/examples/spot/subaccount/EnableLeverageToken.java", "superclasses": "", "methods": ["[]EnableLeverageToken()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/EnableLeverageToken.java.EnableLeverageToken.[]EnableLeverageToken()", "src/test/java/examples/spot/subaccount/EnableLeverageToken.java.EnableLeverageToken.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EnableLeverageToken {\n    private EnableLeverageToken() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"enableBlvt\", true);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().enableLeverageToken(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/UpdateIpRestriction.java.UpdateIpRestriction", "name": "UpdateIpRestriction", "file_path": "src/test/java/examples/spot/subaccount/UpdateIpRestriction.java", "superclasses": "", "methods": ["[]UpdateIpRestriction()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/UpdateIpRestriction.java.UpdateIpRestriction.[]UpdateIpRestriction()", "src/test/java/examples/spot/subaccount/UpdateIpRestriction.java.UpdateIpRestriction.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class UpdateIpRestriction {\n    private UpdateIpRestriction() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"subAccountApiKey\", \"apiKey\");\n        parameters.put(\"status\", \"2\");\n        parameters.put(\"ipAddress\", \"1.2.3.4\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().updateIpRestriction(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/SubAccountList.java.SubAccountList", "name": "SubAccountList", "file_path": "src/test/java/examples/spot/subaccount/SubAccountList.java", "superclasses": "", "methods": ["[]SubAccountList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/SubAccountList.java.SubAccountList.[]SubAccountList()", "src/test/java/examples/spot/subaccount/SubAccountList.java.SubAccountList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SubAccountList {\n    private SubAccountList() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().subAccountList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/FuturesAccountSummary.java.FuturesAccountSummary", "name": "FuturesAccountSummary", "file_path": "src/test/java/examples/spot/subaccount/FuturesAccountSummary.java", "superclasses": "", "methods": ["[]FuturesAccountSummary()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/FuturesAccountSummary.java.FuturesAccountSummary.[]FuturesAccountSummary()", "src/test/java/examples/spot/subaccount/FuturesAccountSummary.java.FuturesAccountSummary.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FuturesAccountSummary {\n    private FuturesAccountSummary() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresAccountSummary(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/MarginTransfer.java.MarginTransfer", "name": "MarginTransfer", "file_path": "src/test/java/examples/spot/subaccount/MarginTransfer.java", "superclasses": "", "methods": ["[]MarginTransfer()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/MarginTransfer.java.MarginTransfer.[]MarginTransfer()", "src/test/java/examples/spot/subaccount/MarginTransfer.java.MarginTransfer.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class MarginTransfer {\n    private MarginTransfer() {\n    }\n    private static final double amount = 0.01;\n    private static final int type = 2;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"type\", type);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().marginTransfer(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final int type = 2;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "type = 2", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/subaccount/MarginAccountSummary.java.MarginAccountSummary", "name": "MarginAccountSummary", "file_path": "src/test/java/examples/spot/subaccount/MarginAccountSummary.java", "superclasses": "", "methods": ["[]MarginAccountSummary()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/MarginAccountSummary.java.MarginAccountSummary.[]MarginAccountSummary()", "src/test/java/examples/spot/subaccount/MarginAccountSummary.java.MarginAccountSummary.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class MarginAccountSummary {\n    private MarginAccountSummary() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().marginAccountSummary(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/DepositHistory.java.DepositHistory", "name": "DepositHistory", "file_path": "src/test/java/examples/spot/subaccount/DepositHistory.java", "superclasses": "", "methods": ["[]DepositHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/DepositHistory.java.DepositHistory.[]DepositHistory()", "src/test/java/examples/spot/subaccount/DepositHistory.java.DepositHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DepositHistory {\n    private DepositHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().depositHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/Assets.java.Assets", "name": "Assets", "file_path": "src/test/java/examples/spot/subaccount/Assets.java", "superclasses": "", "methods": ["[]Assets()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/Assets.java.Assets.[]Assets()", "src/test/java/examples/spot/subaccount/Assets.java.Assets.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Assets {\n    private Assets() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().assets(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/SubAccountSummary.java.SubAccountSummary", "name": "SubAccountSummary", "file_path": "src/test/java/examples/spot/subaccount/SubAccountSummary.java", "superclasses": "", "methods": ["[]SubAccountSummary()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/SubAccountSummary.java.SubAccountSummary.[]SubAccountSummary()", "src/test/java/examples/spot/subaccount/SubAccountSummary.java.SubAccountSummary.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SubAccountSummary {\n    private SubAccountSummary() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().spotAccountSummary(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/SubAccountToSubAccount.java.SubAccountToSubAccount", "name": "SubAccountToSubAccount", "file_path": "src/test/java/examples/spot/subaccount/SubAccountToSubAccount.java", "superclasses": "", "methods": ["[]SubAccountToSubAccount()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/SubAccountToSubAccount.java.SubAccountToSubAccount.[]SubAccountToSubAccount()", "src/test/java/examples/spot/subaccount/SubAccountToSubAccount.java.SubAccountToSubAccount.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SubAccountToSubAccount {\n    private SubAccountToSubAccount() {\n    }\n    private static final double amount = 0.01;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"toEmail\", \"\");\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().subAccountToSubAccount(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/subaccount/EnableMargin.java.EnableMargin", "name": "EnableMargin", "file_path": "src/test/java/examples/spot/subaccount/EnableMargin.java", "superclasses": "", "methods": ["[]EnableMargin()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/EnableMargin.java.EnableMargin.[]EnableMargin()", "src/test/java/examples/spot/subaccount/EnableMargin.java.EnableMargin.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EnableMargin {\n    private EnableMargin() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"another_virtual@q6c1dsmxnoemail.com\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().enableMargin(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/SpotTransferHistory.java.SpotTransferHistory", "name": "SpotTransferHistory", "file_path": "src/test/java/examples/spot/subaccount/SpotTransferHistory.java", "superclasses": "", "methods": ["[]SpotTransferHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/SpotTransferHistory.java.SpotTransferHistory.[]SpotTransferHistory()", "src/test/java/examples/spot/subaccount/SpotTransferHistory.java.SpotTransferHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SpotTransferHistory {\n    private SpotTransferHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().spotTransferHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/ManagedSubDetails.java.ManagedSubDetails", "name": "ManagedSubDetails", "file_path": "src/test/java/examples/spot/subaccount/ManagedSubDetails.java", "superclasses": "", "methods": ["[]ManagedSubDetails()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/ManagedSubDetails.java.ManagedSubDetails.[]ManagedSubDetails()", "src/test/java/examples/spot/subaccount/ManagedSubDetails.java.ManagedSubDetails.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ManagedSubDetails {\n    private ManagedSubDetails() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().managedSubDetails(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/MarginAccount.java.MarginAccount", "name": "MarginAccount", "file_path": "src/test/java/examples/spot/subaccount/MarginAccount.java", "superclasses": "", "methods": ["[]MarginAccount()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/MarginAccount.java.MarginAccount.[]MarginAccount()", "src/test/java/examples/spot/subaccount/MarginAccount.java.MarginAccount.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class MarginAccount {\n    private MarginAccount() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"another_virtual@q6c1dsmxnoemail.com\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().marginAccount(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/MangedSubDeposit.java.MangedSubDeposit", "name": "MangedSubDeposit", "file_path": "src/test/java/examples/spot/subaccount/MangedSubDeposit.java", "superclasses": "", "methods": ["[]MangedSubDeposit()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/MangedSubDeposit.java.MangedSubDeposit.[]MangedSubDeposit()", "src/test/java/examples/spot/subaccount/MangedSubDeposit.java.MangedSubDeposit.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class MangedSubDeposit {\n    private MangedSubDeposit() {\n    }\n    private static final double amount = 0.01;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"toEmail\", \"\");\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().managedSubDeposit(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/subaccount/SubAccountToMaster.java.SubAccountToMaster", "name": "SubAccountToMaster", "file_path": "src/test/java/examples/spot/subaccount/SubAccountToMaster.java", "superclasses": "", "methods": ["[]SubAccountToMaster()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/SubAccountToMaster.java.SubAccountToMaster.[]SubAccountToMaster()", "src/test/java/examples/spot/subaccount/SubAccountToMaster.java.SubAccountToMaster.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SubAccountToMaster {\n    private SubAccountToMaster() {\n    }\n    private static final double amount = 0.01;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().subAccountToMaster(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/subaccount/CreateVirtualSubAccount.java.CreateVirtualSubAccount", "name": "CreateVirtualSubAccount", "file_path": "src/test/java/examples/spot/subaccount/CreateVirtualSubAccount.java", "superclasses": "", "methods": ["[]CreateVirtualSubAccount()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/CreateVirtualSubAccount.java.CreateVirtualSubAccount.[]CreateVirtualSubAccount()", "src/test/java/examples/spot/subaccount/CreateVirtualSubAccount.java.CreateVirtualSubAccount.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CreateVirtualSubAccount {\n    private CreateVirtualSubAccount() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"subAccountString\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().createVirtualSubAccount(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/GetIpRestriction.java.GetIpRestriction", "name": "GetIpRestriction", "file_path": "src/test/java/examples/spot/subaccount/GetIpRestriction.java", "superclasses": "", "methods": ["[]GetIpRestriction()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/GetIpRestriction.java.GetIpRestriction.[]GetIpRestriction()", "src/test/java/examples/spot/subaccount/GetIpRestriction.java.GetIpRestriction.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetIpRestriction {\n    private GetIpRestriction() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"subAccountApiKey\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().getIpRestriction(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/TransferHistory.java.TransferHistory", "name": "TransferHistory", "file_path": "src/test/java/examples/spot/subaccount/TransferHistory.java", "superclasses": "", "methods": ["[]TransferHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/TransferHistory.java.TransferHistory.[]TransferHistory()", "src/test/java/examples/spot/subaccount/TransferHistory.java.TransferHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TransferHistory {\n    private TransferHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().transferHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/AccountStatus.java.AccountStatus", "name": "AccountStatus", "file_path": "src/test/java/examples/spot/subaccount/AccountStatus.java", "superclasses": "", "methods": ["[]AccountStatus()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/AccountStatus.java.AccountStatus.[]AccountStatus()", "src/test/java/examples/spot/subaccount/AccountStatus.java.AccountStatus.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AccountStatus {\n    private AccountStatus() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().accountStatus(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/FuturesAccountV2.java.FuturesAccountV2", "name": "FuturesAccountV2", "file_path": "src/test/java/examples/spot/subaccount/FuturesAccountV2.java", "superclasses": "", "methods": ["[]FuturesAccountV2()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/FuturesAccountV2.java.FuturesAccountV2.[]FuturesAccountV2()", "src/test/java/examples/spot/subaccount/FuturesAccountV2.java.FuturesAccountV2.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FuturesAccountV2 {\n    private FuturesAccountV2() {\n    }\n    private static final int futuresType = 1;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"futuresType\", futuresType);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresAccountV2(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int futuresType = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "futuresType = 1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/subaccount/QueryUniversalTransfer.java.QueryUniversalTransfer", "name": "QueryUniversalTransfer", "file_path": "src/test/java/examples/spot/subaccount/QueryUniversalTransfer.java", "superclasses": "", "methods": ["[]QueryUniversalTransfer()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/QueryUniversalTransfer.java.QueryUniversalTransfer.[]QueryUniversalTransfer()", "src/test/java/examples/spot/subaccount/QueryUniversalTransfer.java.QueryUniversalTransfer.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class QueryUniversalTransfer {\n    private QueryUniversalTransfer() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().queryUniversalTransfer(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/FuturesAccountSummaryV2.java.FuturesAccountSummaryV2", "name": "FuturesAccountSummaryV2", "file_path": "src/test/java/examples/spot/subaccount/FuturesAccountSummaryV2.java", "superclasses": "", "methods": ["[]FuturesAccountSummaryV2()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/FuturesAccountSummaryV2.java.FuturesAccountSummaryV2.[]FuturesAccountSummaryV2()", "src/test/java/examples/spot/subaccount/FuturesAccountSummaryV2.java.FuturesAccountSummaryV2.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FuturesAccountSummaryV2 {\n    private FuturesAccountSummaryV2() {\n    }\n    private static final int futuresType = 1;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"futuresType\", futuresType);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresAccountSummaryV2(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int futuresType = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "futuresType = 1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/subaccount/GetFuturesInternalTransfer.java.GetFuturesInternalTransfer", "name": "GetFuturesInternalTransfer", "file_path": "src/test/java/examples/spot/subaccount/GetFuturesInternalTransfer.java", "superclasses": "", "methods": ["[]GetFuturesInternalTransfer()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/GetFuturesInternalTransfer.java.GetFuturesInternalTransfer.[]GetFuturesInternalTransfer()", "src/test/java/examples/spot/subaccount/GetFuturesInternalTransfer.java.GetFuturesInternalTransfer.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetFuturesInternalTransfer {\n    private GetFuturesInternalTransfer() {\n    }\n    private static final int futuresType = 1;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"futuresType\", futuresType);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().getFuturesInternalTransfer(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int futuresType = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "futuresType = 1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/subaccount/UniversalTransfer.java.UniversalTransfer", "name": "UniversalTransfer", "file_path": "src/test/java/examples/spot/subaccount/UniversalTransfer.java", "superclasses": "", "methods": ["[]UniversalTransfer()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/UniversalTransfer.java.UniversalTransfer.[]UniversalTransfer()", "src/test/java/examples/spot/subaccount/UniversalTransfer.java.UniversalTransfer.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class UniversalTransfer {\n    private UniversalTransfer() {\n    }\n    private static final double amount = 0.01;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromAccountType\", \"SPOT\");\n        parameters.put(\"toAccountType\", \"USDT_FUTURE\");\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().universalTransfer(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/subaccount/FuturesTransfer.java.FuturesTransfer", "name": "FuturesTransfer", "file_path": "src/test/java/examples/spot/subaccount/FuturesTransfer.java", "superclasses": "", "methods": ["[]FuturesTransfer()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/FuturesTransfer.java.FuturesTransfer.[]FuturesTransfer()", "src/test/java/examples/spot/subaccount/FuturesTransfer.java.FuturesTransfer.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FuturesTransfer {\n    private FuturesTransfer() {\n    }\n    private static final double amount = 100;\n    private static final int type = 2;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"type\", type);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresTransfer(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 100;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 100", "syntax_pass": true}, {"attribute_expression": "private static final int type = 2;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "type = 2", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/subaccount/FuturesPositionRiskV2.java.FuturesPositionRiskV2", "name": "FuturesPositionRiskV2", "file_path": "src/test/java/examples/spot/subaccount/FuturesPositionRiskV2.java", "superclasses": "", "methods": ["[]FuturesPositionRiskV2()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/FuturesPositionRiskV2.java.FuturesPositionRiskV2.[]FuturesPositionRiskV2()", "src/test/java/examples/spot/subaccount/FuturesPositionRiskV2.java.FuturesPositionRiskV2.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FuturesPositionRiskV2 {\n    private FuturesPositionRiskV2() {\n    }\n    private static final int futuresType = 1;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"futuresType\", futuresType);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresPositionRiskV2(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int futuresType = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "futuresType = 1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/subaccount/DepositAddress.java.DepositAddress", "name": "DepositAddress", "file_path": "src/test/java/examples/spot/subaccount/DepositAddress.java", "superclasses": "", "methods": ["[]DepositAddress()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/DepositAddress.java.DepositAddress.[]DepositAddress()", "src/test/java/examples/spot/subaccount/DepositAddress.java.DepositAddress.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DepositAddress {\n    private DepositAddress() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"coin\", \"USDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().depositAddress(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/DeleteIpList.java.DeleteIpList", "name": "DeleteIpList", "file_path": "src/test/java/examples/spot/subaccount/DeleteIpList.java", "superclasses": "", "methods": ["[]DeleteIpList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/DeleteIpList.java.DeleteIpList.[]DeleteIpList()", "src/test/java/examples/spot/subaccount/DeleteIpList.java.DeleteIpList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DeleteIpList {\n    private DeleteIpList() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"subAccountApiKey\", \"\");\n        parameters.put(\"ipAddress\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().deleteIpList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/ManagedSubAccountSnapshot.java.ManagedSubAccountSnapshot", "name": "ManagedSubAccountSnapshot", "file_path": "src/test/java/examples/spot/subaccount/ManagedSubAccountSnapshot.java", "superclasses": "", "methods": ["[]ManagedSubAccountSnapshot()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/ManagedSubAccountSnapshot.java.ManagedSubAccountSnapshot.[]ManagedSubAccountSnapshot()", "src/test/java/examples/spot/subaccount/ManagedSubAccountSnapshot.java.ManagedSubAccountSnapshot.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ManagedSubAccountSnapshot {\n    private ManagedSubAccountSnapshot() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"\");\n        parameters.put(\"type\", \"SPOT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().managedSubAccountSnapshot(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/subaccount/FuturesInternalTransfer.java.FuturesInternalTransfer", "name": "FuturesInternalTransfer", "file_path": "src/test/java/examples/spot/subaccount/FuturesInternalTransfer.java", "superclasses": "", "methods": ["[]FuturesInternalTransfer()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/subaccount/FuturesInternalTransfer.java.FuturesInternalTransfer.[]FuturesInternalTransfer()", "src/test/java/examples/spot/subaccount/FuturesInternalTransfer.java.FuturesInternalTransfer.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FuturesInternalTransfer {\n    private FuturesInternalTransfer() {\n    }\n    private static final double amount = 0.01;\n    private static final int futuresType = 1;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"\");\n        parameters.put(\"toEmail\", \"\");\n        parameters.put(\"futuresType\", futuresType);\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSubAccount().futuresInternalTransfer(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final int futuresType = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "futuresType = 1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/margin/InterestHistory.java.InterestHistory", "name": "InterestHistory", "file_path": "src/test/java/examples/spot/margin/InterestHistory.java", "superclasses": "", "methods": ["[]InterestHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/InterestHistory.java.InterestHistory.[]InterestHistory()", "src/test/java/examples/spot/margin/InterestHistory.java.InterestHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class InterestHistory {\n    private InterestHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().interestHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/CrossMarginData.java.CrossMarginData", "name": "CrossMarginData", "file_path": "src/test/java/examples/spot/margin/CrossMarginData.java", "superclasses": "", "methods": ["[]CrossMarginData()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/CrossMarginData.java.CrossMarginData.[]CrossMarginData()", "src/test/java/examples/spot/margin/CrossMarginData.java.CrossMarginData.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CrossMarginData {\n    private CrossMarginData() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNB\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().crossMarginData(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/CancelAllMarginOrders.java.CancelAllMarginOrders", "name": "CancelAllMarginOrders", "file_path": "src/test/java/examples/spot/margin/CancelAllMarginOrders.java", "superclasses": "", "methods": ["[]CancelAllMarginOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/CancelAllMarginOrders.java.CancelAllMarginOrders.[]CancelAllMarginOrders()", "src/test/java/examples/spot/margin/CancelAllMarginOrders.java.CancelAllMarginOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CancelAllMarginOrders {\n    private CancelAllMarginOrders() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().cancelOpenOrders(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/AllIsolatedSymbols.java.AllIsolatedSymbols", "name": "AllIsolatedSymbols", "file_path": "src/test/java/examples/spot/margin/AllIsolatedSymbols.java", "superclasses": "", "methods": ["[]AllIsolatedSymbols()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/AllIsolatedSymbols.java.AllIsolatedSymbols.[]AllIsolatedSymbols()", "src/test/java/examples/spot/margin/AllIsolatedSymbols.java.AllIsolatedSymbols.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AllIsolatedSymbols {\n    private AllIsolatedSymbols() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getAllIsolatedSymbols(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/CrossMarginCollateralRatio.java.CrossMarginCollateralRatio", "name": "CrossMarginCollateralRatio", "file_path": "src/test/java/examples/spot/margin/CrossMarginCollateralRatio.java", "superclasses": "", "methods": ["[]CrossMarginCollateralRatio()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/CrossMarginCollateralRatio.java.CrossMarginCollateralRatio.[]CrossMarginCollateralRatio()", "src/test/java/examples/spot/margin/CrossMarginCollateralRatio.java.CrossMarginCollateralRatio.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CrossMarginCollateralRatio {\n    private CrossMarginCollateralRatio() {\n    }\n\n    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().crossMarginCollateralRatio();\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/AdjustCrossMarginMaxLeverage.java.AdjustCrossMarginMaxLeverage", "name": "AdjustCrossMarginMaxLeverage", "file_path": "src/test/java/examples/spot/margin/AdjustCrossMarginMaxLeverage.java", "superclasses": "", "methods": ["[]AdjustCrossMarginMaxLeverage()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/AdjustCrossMarginMaxLeverage.java.AdjustCrossMarginMaxLeverage.[]AdjustCrossMarginMaxLeverage()", "src/test/java/examples/spot/margin/AdjustCrossMarginMaxLeverage.java.AdjustCrossMarginMaxLeverage.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AdjustCrossMarginMaxLeverage {\n\n    private AdjustCrossMarginMaxLeverage() {\n    }\n\n    private static final Integer leverage = 3;\n\n    public static void main(String[] args) {\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"maxLeverage\", leverage);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().adjustCrossMarginMaxLeverage(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Integer leverage = 3;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Integer", "name": "leverage = 3", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/margin/Trades.java.Trades", "name": "Trades", "file_path": "src/test/java/examples/spot/margin/Trades.java", "superclasses": "", "methods": ["[]Trades()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/Trades.java.Trades.[]Trades()", "src/test/java/examples/spot/margin/Trades.java.Trades.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Trades {\n    private Trades() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().trades(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/BnbBurn.java.BnbBurn", "name": "BnbBurn", "file_path": "src/test/java/examples/spot/margin/BnbBurn.java", "superclasses": "", "methods": ["[]BnbBurn()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/BnbBurn.java.BnbBurn.[]BnbBurn()", "src/test/java/examples/spot/margin/BnbBurn.java.BnbBurn.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class BnbBurn {\n    private BnbBurn() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"spotBNBBurn\", true);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().bnbBurn(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/DelistSchedule.java.DelistSchedule", "name": "DelistSchedule", "file_path": "src/test/java/examples/spot/margin/DelistSchedule.java", "superclasses": "", "methods": ["[]DelistSchedule()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/DelistSchedule.java.DelistSchedule.[]DelistSchedule()", "src/test/java/examples/spot/margin/DelistSchedule.java.DelistSchedule.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DelistSchedule {\n    private DelistSchedule() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().delistSchedule(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/AvailableInventory.java.AvailableInventory", "name": "AvailableInventory", "file_path": "src/test/java/examples/spot/margin/AvailableInventory.java", "superclasses": "", "methods": ["[]AvailableInventory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/AvailableInventory.java.AvailableInventory.[]AvailableInventory()", "src/test/java/examples/spot/margin/AvailableInventory.java.AvailableInventory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AvailableInventory {\n    private AvailableInventory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"MARGIN\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().availableInventory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/GetMarginOpenOrders.java.GetMarginOpenOrders", "name": "GetMarginOpenOrders", "file_path": "src/test/java/examples/spot/margin/GetMarginOpenOrders.java", "superclasses": "", "methods": ["[]GetMarginOpenOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/GetMarginOpenOrders.java.GetMarginOpenOrders.[]GetMarginOpenOrders()", "src/test/java/examples/spot/margin/GetMarginOpenOrders.java.GetMarginOpenOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetMarginOpenOrders {\n    private GetMarginOpenOrders() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getOpenOrders(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/GetBnbBurn.java.GetBnbBurn", "name": "GetBnbBurn", "file_path": "src/test/java/examples/spot/margin/GetBnbBurn.java", "superclasses": "", "methods": ["[]GetBnbBurn()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/GetBnbBurn.java.GetBnbBurn.[]GetBnbBurn()", "src/test/java/examples/spot/margin/GetBnbBurn.java.GetBnbBurn.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetBnbBurn {\n    private GetBnbBurn() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getBnbBurn(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/DisableIsolatedAccount.java.DisableIsolatedAccount", "name": "DisableIsolatedAccount", "file_path": "src/test/java/examples/spot/margin/DisableIsolatedAccount.java", "superclasses": "", "methods": ["[]DisableIsolatedAccount()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/DisableIsolatedAccount.java.DisableIsolatedAccount.[]DisableIsolatedAccount()", "src/test/java/examples/spot/margin/DisableIsolatedAccount.java.DisableIsolatedAccount.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DisableIsolatedAccount {\n    private DisableIsolatedAccount() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        String result = client.createMargin().disableIsolatedAccount(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/IsolatedMarginData.java.IsolatedMarginData", "name": "IsolatedMarginData", "file_path": "src/test/java/examples/spot/margin/IsolatedMarginData.java", "superclasses": "", "methods": ["[]IsolatedMarginData()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/IsolatedMarginData.java.IsolatedMarginData.[]IsolatedMarginData()", "src/test/java/examples/spot/margin/IsolatedMarginData.java.IsolatedMarginData.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class IsolatedMarginData {\n    private IsolatedMarginData() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().isolatedMarginTier(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/AllAssets.java.AllAssets", "name": "AllAssets", "file_path": "src/test/java/examples/spot/margin/AllAssets.java", "superclasses": "", "methods": ["[]AllAssets()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/AllAssets.java.AllAssets.[]AllAssets()", "src/test/java/examples/spot/margin/AllAssets.java.AllAssets.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AllAssets {\n    private AllAssets() {\n    }\n\n    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().allAssets();\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/MarginAccount.java.MarginAccount", "name": "MarginAccount", "file_path": "src/test/java/examples/spot/margin/MarginAccount.java", "superclasses": "", "methods": ["[]MarginAccount()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/MarginAccount.java.MarginAccount.[]MarginAccount()", "src/test/java/examples/spot/margin/MarginAccount.java.MarginAccount.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class MarginAccount {\n    private MarginAccount() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().account(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/GetAllMarginOrders.java.GetAllMarginOrders", "name": "GetAllMarginOrders", "file_path": "src/test/java/examples/spot/margin/GetAllMarginOrders.java", "superclasses": "", "methods": ["[]GetAllMarginOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/GetAllMarginOrders.java.GetAllMarginOrders.[]GetAllMarginOrders()", "src/test/java/examples/spot/margin/GetAllMarginOrders.java.GetAllMarginOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetAllMarginOrders {\n    private GetAllMarginOrders() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getAllOrders(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/SmallLiabilityAssets.java.SmallLiabilityAssets", "name": "SmallLiabilityAssets", "file_path": "src/test/java/examples/spot/margin/SmallLiabilityAssets.java", "superclasses": "", "methods": ["[]SmallLiabilityAssets()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/SmallLiabilityAssets.java.SmallLiabilityAssets.[]SmallLiabilityAssets()", "src/test/java/examples/spot/margin/SmallLiabilityAssets.java.SmallLiabilityAssets.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SmallLiabilityAssets {\n    private SmallLiabilityAssets() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().smallLiabilityAssets(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/ForceLiquidationRec.java.ForceLiquidationRec", "name": "ForceLiquidationRec", "file_path": "src/test/java/examples/spot/margin/ForceLiquidationRec.java", "superclasses": "", "methods": ["[]ForceLiquidationRec()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/ForceLiquidationRec.java.ForceLiquidationRec.[]ForceLiquidationRec()", "src/test/java/examples/spot/margin/ForceLiquidationRec.java.ForceLiquidationRec.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ForceLiquidationRec {\n    private ForceLiquidationRec() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().forceLiquidationRec(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/EnableIsolatedAccount.java.EnableIsolatedAccount", "name": "EnableIsolatedAccount", "file_path": "src/test/java/examples/spot/margin/EnableIsolatedAccount.java", "superclasses": "", "methods": ["[]EnableIsolatedAccount()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/EnableIsolatedAccount.java.EnableIsolatedAccount.[]EnableIsolatedAccount()", "src/test/java/examples/spot/margin/EnableIsolatedAccount.java.EnableIsolatedAccount.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EnableIsolatedAccount {\n    private EnableIsolatedAccount() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        String result = client.createMargin().enableIsolatedAccount(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/GetAllMarginOcoOrders.java.GetAllMarginOcoOrders", "name": "GetAllMarginOcoOrders", "file_path": "src/test/java/examples/spot/margin/GetAllMarginOcoOrders.java", "superclasses": "", "methods": ["[]GetAllMarginOcoOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/GetAllMarginOcoOrders.java.GetAllMarginOcoOrders.[]GetAllMarginOcoOrders()", "src/test/java/examples/spot/margin/GetAllMarginOcoOrders.java.GetAllMarginOcoOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetAllMarginOcoOrders {\n    private GetAllMarginOcoOrders() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getAllOcoOrders(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/TransferHistory.java.TransferHistory", "name": "TransferHistory", "file_path": "src/test/java/examples/spot/margin/TransferHistory.java", "superclasses": "", "methods": ["[]TransferHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/TransferHistory.java.TransferHistory.[]TransferHistory()", "src/test/java/examples/spot/margin/TransferHistory.java.TransferHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TransferHistory {\n    private TransferHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().transferHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/OrderRateLimit.java.OrderRateLimit", "name": "OrderRateLimit", "file_path": "src/test/java/examples/spot/margin/OrderRateLimit.java", "superclasses": "", "methods": ["[]OrderRateLimit()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/OrderRateLimit.java.OrderRateLimit.[]OrderRateLimit()", "src/test/java/examples/spot/margin/OrderRateLimit.java.OrderRateLimit.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class OrderRateLimit {\n    private OrderRateLimit() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().orderRateLimit(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/PriceIndex.java.PriceIndex", "name": "PriceIndex", "file_path": "src/test/java/examples/spot/margin/PriceIndex.java", "superclasses": "", "methods": ["[]PriceIndex()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/PriceIndex.java.PriceIndex.[]PriceIndex()", "src/test/java/examples/spot/margin/PriceIndex.java.PriceIndex.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class PriceIndex {\n    private PriceIndex() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().priceIndex(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/TradeCoeff.java.TradeCoeff", "name": "TradeCoeff", "file_path": "src/test/java/examples/spot/margin/TradeCoeff.java", "superclasses": "", "methods": ["[]TradeCoeff()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/TradeCoeff.java.TradeCoeff.[]TradeCoeff()", "src/test/java/examples/spot/margin/TradeCoeff.java.TradeCoeff.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TradeCoeff {\n    private TradeCoeff() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().tradeCoeff(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/NextHourlyInterestRate.java.NextHourlyInterestRate", "name": "NextHourlyInterestRate", "file_path": "src/test/java/examples/spot/margin/NextHourlyInterestRate.java", "superclasses": "", "methods": ["[]NextHourlyInterestRate()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/NextHourlyInterestRate.java.NextHourlyInterestRate.[]NextHourlyInterestRate()", "src/test/java/examples/spot/margin/NextHourlyInterestRate.java.NextHourlyInterestRate.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class NextHourlyInterestRate {\n    private NextHourlyInterestRate() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"assets\", \"BTC,ETH\");\n        parameters.put(\"isIsolated\", true);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().nextHourlyInterestRate(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/SmallLiabilityExchangeHistory.java.SmallLiabilityExchangeHistory", "name": "SmallLiabilityExchangeHistory", "file_path": "src/test/java/examples/spot/margin/SmallLiabilityExchangeHistory.java", "superclasses": "", "methods": ["[]SmallLiabilityExchangeHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/SmallLiabilityExchangeHistory.java.SmallLiabilityExchangeHistory.[]SmallLiabilityExchangeHistory()", "src/test/java/examples/spot/margin/SmallLiabilityExchangeHistory.java.SmallLiabilityExchangeHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SmallLiabilityExchangeHistory {\n    private SmallLiabilityExchangeHistory() {\n    }\n\n    private static final int current = 3;\n    private static final int size = 3;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"current\", current);\n        parameters.put(\"size\", size);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().smallLiabilityExchangeHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int current = 3;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "current = 3", "syntax_pass": true}, {"attribute_expression": "private static final int size = 3;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "size = 3", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/margin/NewMarginOrder.java.NewMarginOrder", "name": "NewMarginOrder", "file_path": "src/test/java/examples/spot/margin/NewMarginOrder.java", "superclasses": "", "methods": ["[]NewMarginOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/NewMarginOrder.java.NewMarginOrder.[]NewMarginOrder()", "src/test/java/examples/spot/margin/NewMarginOrder.java.NewMarginOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class NewMarginOrder {\n    private NewMarginOrder() {\n    }\n    private static final double quantity = 0.1;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"MARKET\");\n        parameters.put(\"quantity\", quantity);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().newOrder(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 0.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 0.1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/margin/CancelMarginOrder.java.CancelMarginOrder", "name": "CancelMarginOrder", "file_path": "src/test/java/examples/spot/margin/CancelMarginOrder.java", "superclasses": "", "methods": ["[]CancelMarginOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/CancelMarginOrder.java.CancelMarginOrder.[]CancelMarginOrder()", "src/test/java/examples/spot/margin/CancelMarginOrder.java.CancelMarginOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CancelMarginOrder {\n    private CancelMarginOrder() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderId\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().cancelOrder(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/NewMarginOcoOrder.java.NewMarginOcoOrder", "name": "NewMarginOcoOrder", "file_path": "src/test/java/examples/spot/margin/NewMarginOcoOrder.java", "superclasses": "", "methods": ["[]NewMarginOcoOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/NewMarginOcoOrder.java.NewMarginOcoOrder.[]NewMarginOcoOrder()", "src/test/java/examples/spot/margin/NewMarginOcoOrder.java.NewMarginOcoOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class NewMarginOcoOrder {\n    private NewMarginOcoOrder() {\n    }\n    private static final double quantity = 0.01;\n    private static final double price = 95000;\n    private static final double stopPrice = 98000;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"stopPrice\", stopPrice);\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"price\", price);\n\n        String result = client.createMargin().ocoOrder(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final double price = 95000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "price = 95000", "syntax_pass": true}, {"attribute_expression": "private static final double stopPrice = 98000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "stopPrice = 98000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/margin/GetMarginOcoOpenOrders.java.GetMarginOcoOpenOrders", "name": "GetMarginOcoOpenOrders", "file_path": "src/test/java/examples/spot/margin/GetMarginOcoOpenOrders.java", "superclasses": "", "methods": ["[]GetMarginOcoOpenOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/GetMarginOcoOpenOrders.java.GetMarginOcoOpenOrders.[]GetMarginOcoOpenOrders()", "src/test/java/examples/spot/margin/GetMarginOcoOpenOrders.java.GetMarginOcoOpenOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetMarginOcoOpenOrders {\n    private GetMarginOcoOpenOrders() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getOcoOpenOrders(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/CancelMarginOcoOrder.java.CancelMarginOcoOrder", "name": "CancelMarginOcoOrder", "file_path": "src/test/java/examples/spot/margin/CancelMarginOcoOrder.java", "superclasses": "", "methods": ["[]CancelMarginOcoOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/CancelMarginOcoOrder.java.CancelMarginOcoOrder.[]CancelMarginOcoOrder()", "src/test/java/examples/spot/margin/CancelMarginOcoOrder.java.CancelMarginOcoOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CancelMarginOcoOrder {\n    private CancelMarginOcoOrder() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"orderListId\", \"\");\n\n        String result = client.createMargin().cancelOcoOrder(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/IsolatedMarginTier.java.IsolatedMarginTier", "name": "IsolatedMarginTier", "file_path": "src/test/java/examples/spot/margin/IsolatedMarginTier.java", "superclasses": "", "methods": ["[]IsolatedMarginTier()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/IsolatedMarginTier.java.IsolatedMarginTier.[]IsolatedMarginTier()", "src/test/java/examples/spot/margin/IsolatedMarginTier.java.IsolatedMarginTier.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class IsolatedMarginTier {\n    private IsolatedMarginTier() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().isolatedMarginData(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/IsolatedAccountLimit.java.IsolatedAccountLimit", "name": "IsolatedAccountLimit", "file_path": "src/test/java/examples/spot/margin/IsolatedAccountLimit.java", "superclasses": "", "methods": ["[]IsolatedAccountLimit()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/IsolatedAccountLimit.java.IsolatedAccountLimit.[]IsolatedAccountLimit()", "src/test/java/examples/spot/margin/IsolatedAccountLimit.java.IsolatedAccountLimit.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class IsolatedAccountLimit {\n    private IsolatedAccountLimit() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getIsolatedAccountLimit(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/InterestRateHistory.java.InterestRateHistory", "name": "InterestRateHistory", "file_path": "src/test/java/examples/spot/margin/InterestRateHistory.java", "superclasses": "", "methods": ["[]InterestRateHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/InterestRateHistory.java.InterestRateHistory.[]InterestRateHistory()", "src/test/java/examples/spot/margin/InterestRateHistory.java.InterestRateHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class InterestRateHistory {\n    private InterestRateHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().interestRateHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/MaxTransferable.java.MaxTransferable", "name": "MaxTransferable", "file_path": "src/test/java/examples/spot/margin/MaxTransferable.java", "superclasses": "", "methods": ["[]MaxTransferable()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/MaxTransferable.java.MaxTransferable.[]MaxTransferable()", "src/test/java/examples/spot/margin/MaxTransferable.java.MaxTransferable.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class MaxTransferable {\n    private MaxTransferable() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().maxTransferable(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/GetOcoOrder.java.GetOcoOrder", "name": "GetOcoOrder", "file_path": "src/test/java/examples/spot/margin/GetOcoOrder.java", "superclasses": "", "methods": ["[]GetOcoOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/GetOcoOrder.java.GetOcoOrder.[]GetOcoOrder()", "src/test/java/examples/spot/margin/GetOcoOrder.java.GetOcoOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetOcoOrder {\n    private GetOcoOrder() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getOcoOrder(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/GetMarginOrder.java.GetMarginOrder", "name": "GetMarginOrder", "file_path": "src/test/java/examples/spot/margin/GetMarginOrder.java", "superclasses": "", "methods": ["[]GetMarginOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/GetMarginOrder.java.GetMarginOrder.[]GetMarginOrder()", "src/test/java/examples/spot/margin/GetMarginOrder.java.GetMarginOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetMarginOrder {\n    private GetMarginOrder() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().getOrder(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/AllPairs.java.AllPairs", "name": "AllPairs", "file_path": "src/test/java/examples/spot/margin/AllPairs.java", "superclasses": "", "methods": ["[]AllPairs()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/AllPairs.java.AllPairs.[]AllPairs()", "src/test/java/examples/spot/margin/AllPairs.java.AllPairs.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AllPairs {\n    private AllPairs() {\n    }\n\n    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().allPairs();\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/CapitalFlow.java.CapitalFlow", "name": "CapitalFlow", "file_path": "src/test/java/examples/spot/margin/CapitalFlow.java", "superclasses": "", "methods": ["[]CapitalFlow()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/CapitalFlow.java.CapitalFlow.[]CapitalFlow()", "src/test/java/examples/spot/margin/CapitalFlow.java.CapitalFlow.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CapitalFlow {\n    private CapitalFlow() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().capitalFlow(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/IsolatedAccount.java.IsolatedAccount", "name": "IsolatedAccount", "file_path": "src/test/java/examples/spot/margin/IsolatedAccount.java", "superclasses": "", "methods": ["[]IsolatedAccount()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/IsolatedAccount.java.IsolatedAccount.[]IsolatedAccount()", "src/test/java/examples/spot/margin/IsolatedAccount.java.IsolatedAccount.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class IsolatedAccount {\n    private IsolatedAccount() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbols\", \"BNBUSDT,BTCUSDT\");\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().isolatedAccount(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/ExchangeSmallLiability.java.ExchangeSmallLiability", "name": "ExchangeSmallLiability", "file_path": "src/test/java/examples/spot/margin/ExchangeSmallLiability.java", "superclasses": "", "methods": ["[]ExchangeSmallLiability()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/ExchangeSmallLiability.java.ExchangeSmallLiability.[]ExchangeSmallLiability()", "src/test/java/examples/spot/margin/ExchangeSmallLiability.java.ExchangeSmallLiability.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ExchangeSmallLiability {\n\n    private ExchangeSmallLiability() {\n    }\n\n    public static void main(String[] args) {\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"assetNames\", \"BTC,ETH\");\n\n        String result = client.createMargin().exchangeSmallLiability(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/LeverageBracket.java.LeverageBracket", "name": "LeverageBracket", "file_path": "src/test/java/examples/spot/margin/LeverageBracket.java", "superclasses": "", "methods": ["[]LeverageBracket()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/LeverageBracket.java.LeverageBracket.[]LeverageBracket()", "src/test/java/examples/spot/margin/LeverageBracket.java.LeverageBracket.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LeverageBracket {\n    private LeverageBracket() {\n    }\n\n    public static void main(String[] args) {\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().leverageBracket();\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/margin/MaxBorrow.java.MaxBorrow", "name": "MaxBorrow", "file_path": "src/test/java/examples/spot/margin/MaxBorrow.java", "superclasses": "", "methods": ["[]MaxBorrow()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/margin/MaxBorrow.java.MaxBorrow.[]MaxBorrow()", "src/test/java/examples/spot/margin/MaxBorrow.java.MaxBorrow.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class MaxBorrow {\n    private MaxBorrow() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMargin().maxBorrow(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/portfoliomargin/BnbTransfer.java.BnbTransfer", "name": "BnbTransfer", "file_path": "src/test/java/examples/spot/portfoliomargin/BnbTransfer.java", "superclasses": "", "methods": ["[]BnbTransfer()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/portfoliomargin/BnbTransfer.java.BnbTransfer.[]BnbTransfer()", "src/test/java/examples/spot/portfoliomargin/BnbTransfer.java.BnbTransfer.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class BnbTransfer {\n    private BnbTransfer() {\n    }\n    private static final double amount = 1.01;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transferSide\", \"TO_UM\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().bnbTransfer(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 1.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 1.01", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/portfoliomargin/InterestHistory.java.InterestHistory", "name": "InterestHistory", "file_path": "src/test/java/examples/spot/portfoliomargin/InterestHistory.java", "superclasses": "", "methods": ["[]InterestHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/portfoliomargin/InterestHistory.java.InterestHistory.[]InterestHistory()", "src/test/java/examples/spot/portfoliomargin/InterestHistory.java.InterestHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class InterestHistory {\n    private InterestHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BTC\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().interestHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/portfoliomargin/GetAccount.java.GetAccount", "name": "GetAccount", "file_path": "src/test/java/examples/spot/portfoliomargin/GetAccount.java", "superclasses": "", "methods": ["[]GetAccount()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/portfoliomargin/GetAccount.java.GetAccount.[]GetAccount()", "src/test/java/examples/spot/portfoliomargin/GetAccount.java.GetAccount.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetAccount {\n    private GetAccount() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().getAccount(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/portfoliomargin/SwitchAutoRepayFutures.java.SwitchAutoRepayFutures", "name": "SwitchAutoRepayFutures", "file_path": "src/test/java/examples/spot/portfoliomargin/SwitchAutoRepayFutures.java", "superclasses": "", "methods": ["[]SwitchAutoRepayFutures()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/portfoliomargin/SwitchAutoRepayFutures.java.SwitchAutoRepayFutures.[]SwitchAutoRepayFutures()", "src/test/java/examples/spot/portfoliomargin/SwitchAutoRepayFutures.java.SwitchAutoRepayFutures.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SwitchAutoRepayFutures {\n    private SwitchAutoRepayFutures() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"autoRepay\", true);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().switchAutoRepayFutures(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/portfoliomargin/CollateralRate.java.CollateralRate", "name": "CollateralRate", "file_path": "src/test/java/examples/spot/portfoliomargin/CollateralRate.java", "superclasses": "", "methods": ["[]CollateralRate()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/portfoliomargin/CollateralRate.java.CollateralRate.[]CollateralRate()", "src/test/java/examples/spot/portfoliomargin/CollateralRate.java.CollateralRate.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CollateralRate {\n    private CollateralRate() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().collateralRate(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/portfoliomargin/RepayFutures.java.RepayFutures", "name": "RepayFutures", "file_path": "src/test/java/examples/spot/portfoliomargin/RepayFutures.java", "superclasses": "", "methods": ["[]RepayFutures()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/portfoliomargin/RepayFutures.java.RepayFutures.[]RepayFutures()", "src/test/java/examples/spot/portfoliomargin/RepayFutures.java.RepayFutures.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RepayFutures {\n    private RepayFutures() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().repayFutures(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/portfoliomargin/AutoRepayFuturesStatus.java.AutoRepayFuturesStatus", "name": "AutoRepayFuturesStatus", "file_path": "src/test/java/examples/spot/portfoliomargin/AutoRepayFuturesStatus.java", "superclasses": "", "methods": ["[]AutoRepayFuturesStatus()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/portfoliomargin/AutoRepayFuturesStatus.java.AutoRepayFuturesStatus.[]AutoRepayFuturesStatus()", "src/test/java/examples/spot/portfoliomargin/AutoRepayFuturesStatus.java.AutoRepayFuturesStatus.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AutoRepayFuturesStatus {\n    private AutoRepayFuturesStatus() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().autoRepayFuturesStatus(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/portfoliomargin/AssetLeverage.java.AssetLeverage", "name": "AssetLeverage", "file_path": "src/test/java/examples/spot/portfoliomargin/AssetLeverage.java", "superclasses": "", "methods": ["[]AssetLeverage()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/portfoliomargin/AssetLeverage.java.AssetLeverage.[]AssetLeverage()", "src/test/java/examples/spot/portfoliomargin/AssetLeverage.java.AssetLeverage.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AssetLeverage {\n    private AssetLeverage() {\n    }\n\n    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().assetLeverage();\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/portfoliomargin/BankruptcyLoanRecord.java.BankruptcyLoanRecord", "name": "BankruptcyLoanRecord", "file_path": "src/test/java/examples/spot/portfoliomargin/BankruptcyLoanRecord.java", "superclasses": "", "methods": ["[]BankruptcyLoanRecord()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/portfoliomargin/BankruptcyLoanRecord.java.BankruptcyLoanRecord.[]BankruptcyLoanRecord()", "src/test/java/examples/spot/portfoliomargin/BankruptcyLoanRecord.java.BankruptcyLoanRecord.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class BankruptcyLoanRecord {\n    private BankruptcyLoanRecord() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().bankruptcyLoanRecord(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/portfoliomargin/AutoCollection.java.AutoCollection", "name": "AutoCollection", "file_path": "src/test/java/examples/spot/portfoliomargin/AutoCollection.java", "superclasses": "", "methods": ["[]AutoCollection()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/portfoliomargin/AutoCollection.java.AutoCollection.[]AutoCollection()", "src/test/java/examples/spot/portfoliomargin/AutoCollection.java.AutoCollection.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AutoCollection {\n    private AutoCollection() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().autoCollection(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/portfoliomargin/Repay.java.Repay", "name": "Repay", "file_path": "src/test/java/examples/spot/portfoliomargin/Repay.java", "superclasses": "", "methods": ["[]Repay()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/portfoliomargin/Repay.java.Repay.[]Repay()", "src/test/java/examples/spot/portfoliomargin/Repay.java.Repay.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Repay {\n    private Repay() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().repay(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/portfoliomargin/AssetIndexPrice.java.AssetIndexPrice", "name": "AssetIndexPrice", "file_path": "src/test/java/examples/spot/portfoliomargin/AssetIndexPrice.java", "superclasses": "", "methods": ["[]AssetIndexPrice()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/portfoliomargin/AssetIndexPrice.java.AssetIndexPrice.[]AssetIndexPrice()", "src/test/java/examples/spot/portfoliomargin/AssetIndexPrice.java.AssetIndexPrice.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AssetIndexPrice {\n    private AssetIndexPrice() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().assetIndexPrice(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/portfoliomargin/AssetCollection.java.AssetCollection", "name": "AssetCollection", "file_path": "src/test/java/examples/spot/portfoliomargin/AssetCollection.java", "superclasses": "", "methods": ["[]AssetCollection()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/portfoliomargin/AssetCollection.java.AssetCollection.[]AssetCollection()", "src/test/java/examples/spot/portfoliomargin/AssetCollection.java.AssetCollection.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AssetCollection {\n    private AssetCollection() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BTC\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPortfolioMargin().assetCollection(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/spotalgo/TwapOrder.java.TwapOrder", "name": "TwapOrder", "file_path": "src/test/java/examples/spot/spotalgo/TwapOrder.java", "superclasses": "", "methods": ["[]TwapOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/spotalgo/TwapOrder.java.TwapOrder.[]TwapOrder()", "src/test/java/examples/spot/spotalgo/TwapOrder.java.TwapOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TwapOrder {\n    private TwapOrder() {\n    }\n    \n    private static final double quantity = 1.1;\n    private static final long duration = 300;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"duration\", duration);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSpotAlgo().twapOrder(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 1.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 1.1", "syntax_pass": true}, {"attribute_expression": "private static final long duration = 300;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "duration = 300", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/spotalgo/GetOpenOrders.java.GetOpenOrders", "name": "GetOpenOrders", "file_path": "src/test/java/examples/spot/spotalgo/GetOpenOrders.java", "superclasses": "", "methods": ["[]GetOpenOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/spotalgo/GetOpenOrders.java.GetOpenOrders.[]GetOpenOrders()", "src/test/java/examples/spot/spotalgo/GetOpenOrders.java.GetOpenOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetOpenOrders {\n    private GetOpenOrders() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSpotAlgo().getOpenOrders(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/spotalgo/GetSubOrders.java.GetSubOrders", "name": "GetSubOrders", "file_path": "src/test/java/examples/spot/spotalgo/GetSubOrders.java", "superclasses": "", "methods": ["[]GetSubOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/spotalgo/GetSubOrders.java.GetSubOrders.[]GetSubOrders()", "src/test/java/examples/spot/spotalgo/GetSubOrders.java.GetSubOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetSubOrders {\n    private GetSubOrders() {\n    }\n    \n    private static final long algoId = 14511;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algoId\", algoId);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSpotAlgo().getSubOrders(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long algoId = 14511;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "algoId = 14511", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/spotalgo/GetHistoricalOrders.java.GetHistoricalOrders", "name": "GetHistoricalOrders", "file_path": "src/test/java/examples/spot/spotalgo/GetHistoricalOrders.java", "superclasses": "", "methods": ["[]GetHistoricalOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/spotalgo/GetHistoricalOrders.java.GetHistoricalOrders.[]GetHistoricalOrders()", "src/test/java/examples/spot/spotalgo/GetHistoricalOrders.java.GetHistoricalOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetHistoricalOrders {\n    private GetHistoricalOrders() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSpotAlgo().getHistoricalOrders(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/spotalgo/CancelOrder.java.CancelOrder", "name": "CancelOrder", "file_path": "src/test/java/examples/spot/spotalgo/CancelOrder.java", "superclasses": "", "methods": ["[]CancelOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/spotalgo/CancelOrder.java.CancelOrder.[]CancelOrder()", "src/test/java/examples/spot/spotalgo/CancelOrder.java.CancelOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CancelOrder {\n    private CancelOrder() {\n    }\n    \n    private static final long algoId = 1;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algoId\", algoId);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSpotAlgo().cancelOrder(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long algoId = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "algoId = 1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/pay/Transactions.java.Transactions", "name": "Transactions", "file_path": "src/test/java/examples/spot/pay/Transactions.java", "superclasses": "", "methods": ["[]Transactions()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/pay/Transactions.java.Transactions.[]Transactions()", "src/test/java/examples/spot/pay/Transactions.java.Transactions.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Transactions {\n    private Transactions() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createPay().transactions(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/mining/DetailMinerList.java.DetailMinerList", "name": "DetailMinerList", "file_path": "src/test/java/examples/spot/mining/DetailMinerList.java", "superclasses": "", "methods": ["[]DetailMinerList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/mining/DetailMinerList.java.DetailMinerList.[]DetailMinerList()", "src/test/java/examples/spot/mining/DetailMinerList.java.DetailMinerList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DetailMinerList {\n    private DetailMinerList() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"\");\n        parameters.put(\"workerName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().detailMinerList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/mining/CancelHashrateResaleConfig.java.CancelHashrateResaleConfig", "name": "CancelHashrateResaleConfig", "file_path": "src/test/java/examples/spot/mining/CancelHashrateResaleConfig.java", "superclasses": "", "methods": ["[]CancelHashrateResaleConfig()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/mining/CancelHashrateResaleConfig.java.CancelHashrateResaleConfig.[]CancelHashrateResaleConfig()", "src/test/java/examples/spot/mining/CancelHashrateResaleConfig.java.CancelHashrateResaleConfig.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CancelHashrateResaleConfig {\n    private CancelHashrateResaleConfig() {\n    }\n    private static final int configId = 123;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"configId\", configId);\n        parameters.put(\"userName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().cancelHashrateResaleConfig(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int configId = 123;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "configId = 123", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/mining/Alogrithm.java.Alogrithm", "name": "Alogrithm", "file_path": "src/test/java/examples/spot/mining/Alogrithm.java", "superclasses": "", "methods": ["[]Alogrithm()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/mining/Alogrithm.java.Alogrithm.[]Alogrithm()", "src/test/java/examples/spot/mining/Alogrithm.java.Alogrithm.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Alogrithm {\n    private Alogrithm() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().algorithm(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/mining/CoinName.java.CoinName", "name": "CoinName", "file_path": "src/test/java/examples/spot/mining/CoinName.java", "superclasses": "", "methods": ["[]CoinName()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/mining/CoinName.java.CoinName.[]CoinName()", "src/test/java/examples/spot/mining/CoinName.java.CoinName.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CoinName {\n    private CoinName() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().coinName(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/mining/AccountList.java.AccountList", "name": "AccountList", "file_path": "src/test/java/examples/spot/mining/AccountList.java", "superclasses": "", "methods": ["[]AccountList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/mining/AccountList.java.AccountList.[]AccountList()", "src/test/java/examples/spot/mining/AccountList.java.AccountList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AccountList {\n    private AccountList() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().accountList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/mining/MinerList.java.MinerList", "name": "MinerList", "file_path": "src/test/java/examples/spot/mining/MinerList.java", "superclasses": "", "methods": ["[]MinerList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/mining/MinerList.java.MinerList.[]MinerList()", "src/test/java/examples/spot/mining/MinerList.java.MinerList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class MinerList {\n    private MinerList() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().minerList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/mining/HashrateResaleList.java.HashrateResaleList", "name": "HashrateResaleList", "file_path": "src/test/java/examples/spot/mining/HashrateResaleList.java", "superclasses": "", "methods": ["[]HashrateResaleList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/mining/HashrateResaleList.java.HashrateResaleList.[]HashrateResaleList()", "src/test/java/examples/spot/mining/HashrateResaleList.java.HashrateResaleList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class HashrateResaleList {\n    private HashrateResaleList() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().hashrateResaleList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/mining/HashrateResaleDetail.java.HashrateResaleDetail", "name": "HashrateResaleDetail", "file_path": "src/test/java/examples/spot/mining/HashrateResaleDetail.java", "superclasses": "", "methods": ["[]HashrateResaleDetail()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/mining/HashrateResaleDetail.java.HashrateResaleDetail.[]HashrateResaleDetail()", "src/test/java/examples/spot/mining/HashrateResaleDetail.java.HashrateResaleDetail.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class HashrateResaleDetail {\n    private HashrateResaleDetail() {\n    }\n    private static final int configId = 123;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"configId\", configId);\n        parameters.put(\"userName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().hashrateResaleDetail(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int configId = 123;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "configId = 123", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/mining/AccountEarning.java.AccountEarning", "name": "AccountEarning", "file_path": "src/test/java/examples/spot/mining/AccountEarning.java", "superclasses": "", "methods": ["[]AccountEarning()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/mining/AccountEarning.java.AccountEarning.[]AccountEarning()", "src/test/java/examples/spot/mining/AccountEarning.java.AccountEarning.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AccountEarning {\n    private AccountEarning() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().accountEarning(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/mining/BonusList.java.BonusList", "name": "BonusList", "file_path": "src/test/java/examples/spot/mining/BonusList.java", "superclasses": "", "methods": ["[]BonusList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/mining/BonusList.java.BonusList.[]BonusList()", "src/test/java/examples/spot/mining/BonusList.java.BonusList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class BonusList {\n    private BonusList() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().bonusList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/mining/StatisticsList.java.StatisticsList", "name": "StatisticsList", "file_path": "src/test/java/examples/spot/mining/StatisticsList.java", "superclasses": "", "methods": ["[]StatisticsList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/mining/StatisticsList.java.StatisticsList.[]StatisticsList()", "src/test/java/examples/spot/mining/StatisticsList.java.StatisticsList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class StatisticsList {\n    private StatisticsList() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().statsticsList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/mining/HashrateResaleRequest.java.HashrateResaleRequest", "name": "HashrateResaleRequest", "file_path": "src/test/java/examples/spot/mining/HashrateResaleRequest.java", "superclasses": "", "methods": ["[]HashrateResaleRequest()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/mining/HashrateResaleRequest.java.HashrateResaleRequest.[]HashrateResaleRequest()", "src/test/java/examples/spot/mining/HashrateResaleRequest.java.HashrateResaleRequest.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class HashrateResaleRequest {\n    private HashrateResaleRequest() {\n    }\n    private static final long startDate = 1607659086000L;\n    private static final long endDate = 1617659086000L;\n    private static final long hashRate = 100000000L;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"userName\", \"test\");\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"endDate\", endDate);\n        parameters.put(\"startDate\", startDate);\n        parameters.put(\"toPoolUser\", \"S19pro\");\n        parameters.put(\"hashRate\", hashRate);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().hashrateResaleRequest(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long startDate = 1607659086000L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "startDate = 1607659086000L", "syntax_pass": true}, {"attribute_expression": "private static final long endDate = 1617659086000L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "endDate = 1617659086000L", "syntax_pass": true}, {"attribute_expression": "private static final long hashRate = 100000000L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "hashRate = 100000000L", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/mining/EarningList.java.EarningList", "name": "EarningList", "file_path": "src/test/java/examples/spot/mining/EarningList.java", "superclasses": "", "methods": ["[]EarningList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/mining/EarningList.java.EarningList.[]EarningList()", "src/test/java/examples/spot/mining/EarningList.java.EarningList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EarningList {\n    private EarningList() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMining().earningList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/fiat/Orders.java.Orders", "name": "Orders", "file_path": "src/test/java/examples/spot/fiat/Orders.java", "superclasses": "", "methods": ["[]Orders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/fiat/Orders.java.Orders.[]Orders()", "src/test/java/examples/spot/fiat/Orders.java.Orders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Orders {\n    private Orders() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transactionType\", \"0\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createFiat().orders(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/fiat/Payments.java.Payments", "name": "Payments", "file_path": "src/test/java/examples/spot/fiat/Payments.java", "superclasses": "", "methods": ["[]Payments()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/fiat/Payments.java.Payments.[]Payments()", "src/test/java/examples/spot/fiat/Payments.java.Payments.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Payments {\n    private Payments() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transactionType\", \"0\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createFiat().payments(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/staking/EthStakingRateHistory.java.EthStakingRateHistory", "name": "EthStakingRateHistory", "file_path": "src/test/java/examples/spot/staking/EthStakingRateHistory.java", "superclasses": "", "methods": ["[]EthStakingRateHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/staking/EthStakingRateHistory.java.EthStakingRateHistory.[]EthStakingRateHistory()", "src/test/java/examples/spot/staking/EthStakingRateHistory.java.EthStakingRateHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EthStakingRateHistory {\n\n    private EthStakingRateHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingRateHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/staking/EthStakingWbethUnwrapHistory.java.EthStakingWbethUnwrapHistory", "name": "EthStakingWbethUnwrapHistory", "file_path": "src/test/java/examples/spot/staking/EthStakingWbethUnwrapHistory.java", "superclasses": "", "methods": ["[]EthStakingWbethUnwrapHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/staking/EthStakingWbethUnwrapHistory.java.EthStakingWbethUnwrapHistory.[]EthStakingWbethUnwrapHistory()", "src/test/java/examples/spot/staking/EthStakingWbethUnwrapHistory.java.EthStakingWbethUnwrapHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EthStakingWbethUnwrapHistory {\n\n    private EthStakingWbethUnwrapHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingWbethUnwrapHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/staking/EthStakingWbethWrapHistory.java.EthStakingWbethWrapHistory", "name": "EthStakingWbethWrapHistory", "file_path": "src/test/java/examples/spot/staking/EthStakingWbethWrapHistory.java", "superclasses": "", "methods": ["[]EthStakingWbethWrapHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/staking/EthStakingWbethWrapHistory.java.EthStakingWbethWrapHistory.[]EthStakingWbethWrapHistory()", "src/test/java/examples/spot/staking/EthStakingWbethWrapHistory.java.EthStakingWbethWrapHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EthStakingWbethWrapHistory {\n\n    private EthStakingWbethWrapHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingWbethWrapHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/staking/EthStakingAccount.java.EthStakingAccount", "name": "EthStakingAccount", "file_path": "src/test/java/examples/spot/staking/EthStakingAccount.java", "superclasses": "", "methods": ["[]EthStakingAccount()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/staking/EthStakingAccount.java.EthStakingAccount.[]EthStakingAccount()", "src/test/java/examples/spot/staking/EthStakingAccount.java.EthStakingAccount.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EthStakingAccount {\n\n    private EthStakingAccount() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingAccount(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/staking/EthStakingQuota.java.EthStakingQuota", "name": "EthStakingQuota", "file_path": "src/test/java/examples/spot/staking/EthStakingQuota.java", "superclasses": "", "methods": ["[]EthStakingQuota()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/staking/EthStakingQuota.java.EthStakingQuota.[]EthStakingQuota()", "src/test/java/examples/spot/staking/EthStakingQuota.java.EthStakingQuota.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EthStakingQuota {\n\n    private EthStakingQuota() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingQuota(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/staking/SubEthStaking.java.SubEthStaking", "name": "SubEthStaking", "file_path": "src/test/java/examples/spot/staking/SubEthStaking.java", "superclasses": "", "methods": ["[]SubEthStaking()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/staking/SubEthStaking.java.SubEthStaking.[]SubEthStaking()", "src/test/java/examples/spot/staking/SubEthStaking.java.SubEthStaking.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SubEthStaking {\n\n    private SubEthStaking() {\n    }\n\n    private static final double amount = 0.01;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().subEthStaking(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/staking/RedeemEthStaking.java.RedeemEthStaking", "name": "RedeemEthStaking", "file_path": "src/test/java/examples/spot/staking/RedeemEthStaking.java", "superclasses": "", "methods": ["[]RedeemEthStaking()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/staking/RedeemEthStaking.java.RedeemEthStaking.[]RedeemEthStaking()", "src/test/java/examples/spot/staking/RedeemEthStaking.java.RedeemEthStaking.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RedeemEthStaking {\n\n    private RedeemEthStaking() {\n    }\n\n    private static final double amount = 0.01;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().redeemEthStaking(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/staking/EthStakingRedeemHistory.java.EthStakingRedeemHistory", "name": "EthStakingRedeemHistory", "file_path": "src/test/java/examples/spot/staking/EthStakingRedeemHistory.java", "superclasses": "", "methods": ["[]EthStakingRedeemHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/staking/EthStakingRedeemHistory.java.EthStakingRedeemHistory.[]EthStakingRedeemHistory()", "src/test/java/examples/spot/staking/EthStakingRedeemHistory.java.EthStakingRedeemHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EthStakingRedeemHistory {\n\n    private EthStakingRedeemHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingRedeemHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/staking/WrapEthStakingWbeth.java.WrapEthStakingWbeth", "name": "WrapEthStakingWbeth", "file_path": "src/test/java/examples/spot/staking/WrapEthStakingWbeth.java", "superclasses": "", "methods": ["[]WrapEthStakingWbeth()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/staking/WrapEthStakingWbeth.java.WrapEthStakingWbeth.[]WrapEthStakingWbeth()", "src/test/java/examples/spot/staking/WrapEthStakingWbeth.java.WrapEthStakingWbeth.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class WrapEthStakingWbeth {\n\n    private WrapEthStakingWbeth() {\n    }\n\n    private static final double amount = 0.1;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().wrapEthStakingWbeth(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/staking/EthStakingWbethRewardHistory.java.EthStakingWbethRewardHistory", "name": "EthStakingWbethRewardHistory", "file_path": "src/test/java/examples/spot/staking/EthStakingWbethRewardHistory.java", "superclasses": "", "methods": ["[]EthStakingWbethRewardHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/staking/EthStakingWbethRewardHistory.java.EthStakingWbethRewardHistory.[]EthStakingWbethRewardHistory()", "src/test/java/examples/spot/staking/EthStakingWbethRewardHistory.java.EthStakingWbethRewardHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EthStakingWbethRewardHistory {\n\n    private EthStakingWbethRewardHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingWbethRewardHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/staking/EthStakingSubHistory.java.EthStakingSubHistory", "name": "EthStakingSubHistory", "file_path": "src/test/java/examples/spot/staking/EthStakingSubHistory.java", "superclasses": "", "methods": ["[]EthStakingSubHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/staking/EthStakingSubHistory.java.EthStakingSubHistory.[]EthStakingSubHistory()", "src/test/java/examples/spot/staking/EthStakingSubHistory.java.EthStakingSubHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EthStakingSubHistory {\n\n    private EthStakingSubHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingSubHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/staking/EthStakingRewardsHistory.java.EthStakingRewardsHistory", "name": "EthStakingRewardsHistory", "file_path": "src/test/java/examples/spot/staking/EthStakingRewardsHistory.java", "superclasses": "", "methods": ["[]EthStakingRewardsHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/staking/EthStakingRewardsHistory.java.EthStakingRewardsHistory.[]EthStakingRewardsHistory()", "src/test/java/examples/spot/staking/EthStakingRewardsHistory.java.EthStakingRewardsHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EthStakingRewardsHistory {\n\n    private EthStakingRewardsHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createStaking().ethStakingRewardsHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/userdata/CreateIsolatedMarginListenKey.java.CreateIsolatedMarginListenKey", "name": "CreateIsolatedMarginListenKey", "file_path": "src/test/java/examples/spot/userdata/CreateIsolatedMarginListenKey.java", "superclasses": "", "methods": ["[]CreateIsolatedMarginListenKey()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/userdata/CreateIsolatedMarginListenKey.java.CreateIsolatedMarginListenKey.[]CreateIsolatedMarginListenKey()", "src/test/java/examples/spot/userdata/CreateIsolatedMarginListenKey.java.CreateIsolatedMarginListenKey.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CreateIsolatedMarginListenKey {\n    private CreateIsolatedMarginListenKey() {\n    }\n\n    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n\n        String result = client.createUserData().createIsolatedMarginListenKey(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/userdata/CloseIsolatedMarginListenKey.java.CloseIsolatedMarginListenKey", "name": "CloseIsolatedMarginListenKey", "file_path": "src/test/java/examples/spot/userdata/CloseIsolatedMarginListenKey.java", "superclasses": "", "methods": ["[]CloseIsolatedMarginListenKey()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/userdata/CloseIsolatedMarginListenKey.java.CloseIsolatedMarginListenKey.[]CloseIsolatedMarginListenKey()", "src/test/java/examples/spot/userdata/CloseIsolatedMarginListenKey.java.CloseIsolatedMarginListenKey.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CloseIsolatedMarginListenKey {\n    private CloseIsolatedMarginListenKey() {\n    }\n\n    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"listenKey\", \"\");\n\n        String result = client.createUserData().closeIsolatedMarginListenKey(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/userdata/CloseListenKey.java.CloseListenKey", "name": "CloseListenKey", "file_path": "src/test/java/examples/spot/userdata/CloseListenKey.java", "superclasses": "", "methods": ["[]CloseListenKey()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/userdata/CloseListenKey.java.CloseListenKey.[]CloseListenKey()", "src/test/java/examples/spot/userdata/CloseListenKey.java.CloseListenKey.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CloseListenKey {\n    private CloseListenKey() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        String result = client.createUserData().closeListenKey(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/userdata/ExtendIsolatedMarginListenKey.java.ExtendIsolatedMarginListenKey", "name": "ExtendIsolatedMarginListenKey", "file_path": "src/test/java/examples/spot/userdata/ExtendIsolatedMarginListenKey.java", "superclasses": "", "methods": ["[]ExtendIsolatedMarginListenKey()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/userdata/ExtendIsolatedMarginListenKey.java.ExtendIsolatedMarginListenKey.[]ExtendIsolatedMarginListenKey()", "src/test/java/examples/spot/userdata/ExtendIsolatedMarginListenKey.java.ExtendIsolatedMarginListenKey.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ExtendIsolatedMarginListenKey {\n    private ExtendIsolatedMarginListenKey() {\n    }\n\n    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"listenKey\", \"\");\n\n        String result = client.createUserData().extendIsolatedMarginListenKey(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/userdata/CreateMarginListenKey.java.CreateMarginListenKey", "name": "CreateMarginListenKey", "file_path": "src/test/java/examples/spot/userdata/CreateMarginListenKey.java", "superclasses": "", "methods": ["[]CreateMarginListenKey()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/userdata/CreateMarginListenKey.java.CreateMarginListenKey.[]CreateMarginListenKey()", "src/test/java/examples/spot/userdata/CreateMarginListenKey.java.CreateMarginListenKey.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CreateMarginListenKey {\n    private CreateMarginListenKey() {\n    }\n\n    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        String result = client.createUserData().createMarginListenKey();\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/userdata/ExtendListenKey.java.ExtendListenKey", "name": "ExtendListenKey", "file_path": "src/test/java/examples/spot/userdata/ExtendListenKey.java", "superclasses": "", "methods": ["[]ExtendListenKey()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/userdata/ExtendListenKey.java.ExtendListenKey.[]ExtendListenKey()", "src/test/java/examples/spot/userdata/ExtendListenKey.java.ExtendListenKey.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ExtendListenKey {\n    private ExtendListenKey() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        String result = client.createUserData().extendListenKey(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/userdata/CreateListenKey.java.CreateListenKey", "name": "CreateListenKey", "file_path": "src/test/java/examples/spot/userdata/CreateListenKey.java", "superclasses": "", "methods": ["[]CreateListenKey()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/userdata/CreateListenKey.java.CreateListenKey.[]CreateListenKey()", "src/test/java/examples/spot/userdata/CreateListenKey.java.CreateListenKey.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CreateListenKey {\n    private CreateListenKey() {\n    }\n\n    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        String result = client.createUserData().createListenKey();\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/userdata/CloseMarginListenKey.java.CloseMarginListenKey", "name": "CloseMarginListenKey", "file_path": "src/test/java/examples/spot/userdata/CloseMarginListenKey.java", "superclasses": "", "methods": ["[]CloseMarginListenKey()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/userdata/CloseMarginListenKey.java.CloseMarginListenKey.[]CloseMarginListenKey()", "src/test/java/examples/spot/userdata/CloseMarginListenKey.java.CloseMarginListenKey.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CloseMarginListenKey {\n    private CloseMarginListenKey() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        String result = client.createUserData().closeMarginListenKey(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/userdata/ExtendMarginListenKey.java.ExtendMarginListenKey", "name": "ExtendMarginListenKey", "file_path": "src/test/java/examples/spot/userdata/ExtendMarginListenKey.java", "superclasses": "", "methods": ["[]ExtendMarginListenKey()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/userdata/ExtendMarginListenKey.java.ExtendMarginListenKey.[]ExtendMarginListenKey()", "src/test/java/examples/spot/userdata/ExtendMarginListenKey.java.ExtendMarginListenKey.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ExtendMarginListenKey {\n    private ExtendMarginListenKey() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        String result = client.createUserData().extendMarginListenKey(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/autoinvest/IndexInfo.java.IndexInfo", "name": "IndexInfo", "file_path": "src/test/java/examples/spot/autoinvest/IndexInfo.java", "superclasses": "", "methods": ["[]IndexInfo()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/IndexInfo.java.IndexInfo.[]IndexInfo()", "src/test/java/examples/spot/autoinvest/IndexInfo.java.IndexInfo.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class IndexInfo {\n    private IndexInfo() {\n    }\n    \n    private static final long indexId = 1234;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"indexId\", indexId);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().indexInfo(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long indexId = 1234;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "indexId = 1234", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/autoinvest/SourceAssetList.java.SourceAssetList", "name": "SourceAssetList", "file_path": "src/test/java/examples/spot/autoinvest/SourceAssetList.java", "superclasses": "", "methods": ["[]SourceAssetList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/SourceAssetList.java.SourceAssetList.[]SourceAssetList()", "src/test/java/examples/spot/autoinvest/SourceAssetList.java.SourceAssetList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SourceAssetList {\n    private SourceAssetList() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"usageType\", \"RECURRING\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().sourceAssetList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/autoinvest/OneTimeTransactionStatus.java.OneTimeTransactionStatus", "name": "OneTimeTransactionStatus", "file_path": "src/test/java/examples/spot/autoinvest/OneTimeTransactionStatus.java", "superclasses": "", "methods": ["[]OneTimeTransactionStatus()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/OneTimeTransactionStatus.java.OneTimeTransactionStatus.[]OneTimeTransactionStatus()", "src/test/java/examples/spot/autoinvest/OneTimeTransactionStatus.java.OneTimeTransactionStatus.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class OneTimeTransactionStatus {\n    private OneTimeTransactionStatus() {\n    }\n    \n    private static final long transactionId = 12345;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transactionId\", transactionId);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().oneTimeTransactionStatus(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long transactionId = 12345;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "transactionId = 12345", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/autoinvest/SubmitOneTimeTransaction.java.SubmitOneTimeTransaction", "name": "SubmitOneTimeTransaction", "file_path": "src/test/java/examples/spot/autoinvest/SubmitOneTimeTransaction.java", "superclasses": "", "methods": ["[]SubmitOneTimeTransaction()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/SubmitOneTimeTransaction.java.SubmitOneTimeTransaction.[]SubmitOneTimeTransaction()", "src/test/java/examples/spot/autoinvest/SubmitOneTimeTransaction.java.SubmitOneTimeTransaction.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SubmitOneTimeTransaction {\n    private SubmitOneTimeTransaction() {\n    }\n    \n    private static final double subscriptionAmount = 10.1;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"sourceType\", \"MAIN_SITE\");\n        parameters.put(\"subscriptionAmount\", subscriptionAmount);\n        parameters.put(\"sourceAsset\", \"USDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().submitOneTimeTransaction(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double subscriptionAmount = 10.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "subscriptionAmount = 10.1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/autoinvest/IndexPlanRebalanceInfo.java.IndexPlanRebalanceInfo", "name": "IndexPlanRebalanceInfo", "file_path": "src/test/java/examples/spot/autoinvest/IndexPlanRebalanceInfo.java", "superclasses": "", "methods": ["[]IndexPlanRebalanceInfo()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/IndexPlanRebalanceInfo.java.IndexPlanRebalanceInfo.[]IndexPlanRebalanceInfo()", "src/test/java/examples/spot/autoinvest/IndexPlanRebalanceInfo.java.IndexPlanRebalanceInfo.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class IndexPlanRebalanceInfo {\n    private IndexPlanRebalanceInfo() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().indexPlanRebalanceInfo(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/autoinvest/PlansList.java.PlansList", "name": "PlansList", "file_path": "src/test/java/examples/spot/autoinvest/PlansList.java", "superclasses": "", "methods": ["[]PlansList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/PlansList.java.PlansList.[]PlansList()", "src/test/java/examples/spot/autoinvest/PlansList.java.PlansList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class PlansList {\n    private PlansList() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"planType\", \"SINGLE\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().plansList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/autoinvest/UserIndexPlans.java.UserIndexPlans", "name": "UserIndexPlans", "file_path": "src/test/java/examples/spot/autoinvest/UserIndexPlans.java", "superclasses": "", "methods": ["[]UserIndexPlans()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/UserIndexPlans.java.UserIndexPlans.[]UserIndexPlans()", "src/test/java/examples/spot/autoinvest/UserIndexPlans.java.UserIndexPlans.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class UserIndexPlans {\n    private UserIndexPlans() {\n    }\n    \n    private static final long indexId = 1234;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"indexId\", indexId);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().userIndexPlans(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long indexId = 1234;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "indexId = 1234", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/autoinvest/TargetAssetRoiList.java.TargetAssetRoiList", "name": "TargetAssetRoiList", "file_path": "src/test/java/examples/spot/autoinvest/TargetAssetRoiList.java", "superclasses": "", "methods": ["[]TargetAssetRoiList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/TargetAssetRoiList.java.TargetAssetRoiList.[]TargetAssetRoiList()", "src/test/java/examples/spot/autoinvest/TargetAssetRoiList.java.TargetAssetRoiList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TargetAssetRoiList {\n    private TargetAssetRoiList() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"targetAsset\", \"BTC\");\n        parameters.put(\"hisRoiType\", \"FIVE_YEAR\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().targetAssetRoiList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/autoinvest/RedeemIndexPlan.java.RedeemIndexPlan", "name": "RedeemIndexPlan", "file_path": "src/test/java/examples/spot/autoinvest/RedeemIndexPlan.java", "superclasses": "", "methods": ["[]RedeemIndexPlan()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/RedeemIndexPlan.java.RedeemIndexPlan.[]RedeemIndexPlan()", "src/test/java/examples/spot/autoinvest/RedeemIndexPlan.java.RedeemIndexPlan.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RedeemIndexPlan {\n    private RedeemIndexPlan() {\n    }\n    \n    private static final long indexId = 123456;\n    private static final Integer redemptionPercentage = 10;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"indexId\", indexId);\n        parameters.put(\"redemptionPercentage\", redemptionPercentage);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().redeemIndexPlan(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long indexId = 123456;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "indexId = 123456", "syntax_pass": true}, {"attribute_expression": "private static final Integer redemptionPercentage = 10;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Integer", "name": "redemptionPercentage = 10", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/autoinvest/HoldingPlan.java.HoldingPlan", "name": "HoldingPlan", "file_path": "src/test/java/examples/spot/autoinvest/HoldingPlan.java", "superclasses": "", "methods": ["[]HoldingPlan()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/HoldingPlan.java.HoldingPlan.[]HoldingPlan()", "src/test/java/examples/spot/autoinvest/HoldingPlan.java.HoldingPlan.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class HoldingPlan {\n    private HoldingPlan() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().holdingPlan(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/autoinvest/AllSourceAndTargetAssets.java.AllSourceAndTargetAssets", "name": "AllSourceAndTargetAssets", "file_path": "src/test/java/examples/spot/autoinvest/AllSourceAndTargetAssets.java", "superclasses": "", "methods": ["[]AllSourceAndTargetAssets()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/AllSourceAndTargetAssets.java.AllSourceAndTargetAssets.[]AllSourceAndTargetAssets()", "src/test/java/examples/spot/autoinvest/AllSourceAndTargetAssets.java.AllSourceAndTargetAssets.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AllSourceAndTargetAssets {\n    private AllSourceAndTargetAssets() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().allSourceAndTargetAssets(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/autoinvest/ChangePlanStatus.java.ChangePlanStatus", "name": "ChangePlanStatus", "file_path": "src/test/java/examples/spot/autoinvest/ChangePlanStatus.java", "superclasses": "", "methods": ["[]ChangePlanStatus()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/ChangePlanStatus.java.ChangePlanStatus.[]ChangePlanStatus()", "src/test/java/examples/spot/autoinvest/ChangePlanStatus.java.ChangePlanStatus.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ChangePlanStatus {\n    private ChangePlanStatus() {\n    }\n    \n    private static final long planId = 1234;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"planId\", planId);\n        parameters.put(\"status\", \"PAUSED\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().changePlanStatus(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long planId = 1234;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "planId = 1234", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/autoinvest/PlanSubsHistory.java.PlanSubsHistory", "name": "PlanSubsHistory", "file_path": "src/test/java/examples/spot/autoinvest/PlanSubsHistory.java", "superclasses": "", "methods": ["[]PlanSubsHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/PlanSubsHistory.java.PlanSubsHistory.[]PlanSubsHistory()", "src/test/java/examples/spot/autoinvest/PlanSubsHistory.java.PlanSubsHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class PlanSubsHistory {\n    private PlanSubsHistory() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().planSubsHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/autoinvest/TargetAssetList.java.TargetAssetList", "name": "TargetAssetList", "file_path": "src/test/java/examples/spot/autoinvest/TargetAssetList.java", "superclasses": "", "methods": ["[]TargetAssetList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/TargetAssetList.java.TargetAssetList.[]TargetAssetList()", "src/test/java/examples/spot/autoinvest/TargetAssetList.java.TargetAssetList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TargetAssetList {\n    private TargetAssetList() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().targetAssetList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/autoinvest/IndexPlanRedeemHistory.java.IndexPlanRedeemHistory", "name": "IndexPlanRedeemHistory", "file_path": "src/test/java/examples/spot/autoinvest/IndexPlanRedeemHistory.java", "superclasses": "", "methods": ["[]IndexPlanRedeemHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/autoinvest/IndexPlanRedeemHistory.java.IndexPlanRedeemHistory.[]IndexPlanRedeemHistory()", "src/test/java/examples/spot/autoinvest/IndexPlanRedeemHistory.java.IndexPlanRedeemHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class IndexPlanRedeemHistory {\n    private IndexPlanRedeemHistory() {\n    }\n    \n    private static final long requestId = 12345;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"requestId\", requestId);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createAutoInvest().indexPlanRedeemHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long requestId = 12345;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "requestId = 12345", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/wallet/WalletBalance.java.WalletBalance", "name": "WalletBalance", "file_path": "src/test/java/examples/spot/wallet/WalletBalance.java", "superclasses": "", "methods": ["[]WalletBalance()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/WalletBalance.java.WalletBalance.[]WalletBalance()", "src/test/java/examples/spot/wallet/WalletBalance.java.WalletBalance.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class WalletBalance {\n    private WalletBalance() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().walletBalance(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/ApplyOneClickArrivalDeposit.java.ApplyOneClickArrivalDeposit", "name": "ApplyOneClickArrivalDeposit", "file_path": "src/test/java/examples/spot/wallet/ApplyOneClickArrivalDeposit.java", "superclasses": "", "methods": ["[]ApplyOneClickArrivalDeposit()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/ApplyOneClickArrivalDeposit.java.ApplyOneClickArrivalDeposit.[]ApplyOneClickArrivalDeposit()", "src/test/java/examples/spot/wallet/ApplyOneClickArrivalDeposit.java.ApplyOneClickArrivalDeposit.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ApplyOneClickArrivalDeposit {\n    private ApplyOneClickArrivalDeposit() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().applyOneClickArrivalDeposit(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/DustLog.java.DustLog", "name": "DustLog", "file_path": "src/test/java/examples/spot/wallet/DustLog.java", "superclasses": "", "methods": ["[]DustLog()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/DustLog.java.DustLog.[]DustLog()", "src/test/java/examples/spot/wallet/DustLog.java.DustLog.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DustLog {\n    private DustLog() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().dustLog(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/GetBusdAutoConvertions.java.GetBusdAutoConvertions", "name": "GetBusdAutoConvertions", "file_path": "src/test/java/examples/spot/wallet/GetBusdAutoConvertions.java", "superclasses": "", "methods": ["[]GetBusdAutoConvertions()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/GetBusdAutoConvertions.java.GetBusdAutoConvertions.[]GetBusdAutoConvertions()", "src/test/java/examples/spot/wallet/GetBusdAutoConvertions.java.GetBusdAutoConvertions.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetBusdAutoConvertions {\n    private GetBusdAutoConvertions() {\n    }\n\n    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().getBusdAutoConvertions();\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/AssetDividend.java.AssetDividend", "name": "AssetDividend", "file_path": "src/test/java/examples/spot/wallet/AssetDividend.java", "superclasses": "", "methods": ["[]AssetDividend()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/AssetDividend.java.AssetDividend.[]AssetDividend()", "src/test/java/examples/spot/wallet/AssetDividend.java.AssetDividend.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AssetDividend {\n    private AssetDividend() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().assetDividend(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/FundingWallet.java.FundingWallet", "name": "FundingWallet", "file_path": "src/test/java/examples/spot/wallet/FundingWallet.java", "superclasses": "", "methods": ["[]FundingWallet()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/FundingWallet.java.FundingWallet.[]FundingWallet()", "src/test/java/examples/spot/wallet/FundingWallet.java.FundingWallet.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FundingWallet {\n    private FundingWallet() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().fundingWallet(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/EnableFastWithdraw.java.EnableFastWithdraw", "name": "EnableFastWithdraw", "file_path": "src/test/java/examples/spot/wallet/EnableFastWithdraw.java", "superclasses": "", "methods": ["[]EnableFastWithdraw()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/EnableFastWithdraw.java.EnableFastWithdraw.[]EnableFastWithdraw()", "src/test/java/examples/spot/wallet/EnableFastWithdraw.java.EnableFastWithdraw.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EnableFastWithdraw {\n    private EnableFastWithdraw() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().enableFastWithdraw(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/DisableFastWithdraw.java.DisableFastWithdraw", "name": "DisableFastWithdraw", "file_path": "src/test/java/examples/spot/wallet/DisableFastWithdraw.java", "superclasses": "", "methods": ["[]DisableFastWithdraw()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/DisableFastWithdraw.java.DisableFastWithdraw.[]DisableFastWithdraw()", "src/test/java/examples/spot/wallet/DisableFastWithdraw.java.DisableFastWithdraw.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DisableFastWithdraw {\n    private DisableFastWithdraw() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().disableFastWithdraw(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/DepositAddresses.java.DepositAddresses", "name": "DepositAddresses", "file_path": "src/test/java/examples/spot/wallet/DepositAddresses.java", "superclasses": "", "methods": ["[]DepositAddresses()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/DepositAddresses.java.DepositAddresses.[]DepositAddresses()", "src/test/java/examples/spot/wallet/DepositAddresses.java.DepositAddresses.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DepositAddresses {\n    private DepositAddresses() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BTC\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().depositAddresses(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/DepositHistory.java.DepositHistory", "name": "DepositHistory", "file_path": "src/test/java/examples/spot/wallet/DepositHistory.java", "superclasses": "", "methods": ["[]DepositHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/DepositHistory.java.DepositHistory.[]DepositHistory()", "src/test/java/examples/spot/wallet/DepositHistory.java.DepositHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DepositHistory {\n    private DepositHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().depositHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/BusdConvert.java.BusdConvert", "name": "BusdConvert", "file_path": "src/test/java/examples/spot/wallet/BusdConvert.java", "superclasses": "", "methods": ["[]BusdConvert()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/BusdConvert.java.BusdConvert.[]BusdConvert()", "src/test/java/examples/spot/wallet/BusdConvert.java.BusdConvert.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class BusdConvert {\n    private BusdConvert() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        final BigDecimal amount = new BigDecimal(1);\n        parameters.put(\"clientTranId\", \"118263407119\");\n        parameters.put(\"asset\", \"BUSD\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"targetAsset\", \"USDC\");\n        parameters.put(\"accountType\", \"MAIN\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().busdConvert(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/SystemStatus.java.SystemStatus", "name": "SystemStatus", "file_path": "src/test/java/examples/spot/wallet/SystemStatus.java", "superclasses": "", "methods": ["[]SystemStatus()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/SystemStatus.java.SystemStatus.[]SystemStatus()", "src/test/java/examples/spot/wallet/SystemStatus.java.SystemStatus.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SystemStatus {\n    private SystemStatus() {\n    }\n\n    public static void main(String[] args) {\n\n        SpotClient client = new SpotClientImpl();\n        String result = client.createWallet().systemStatus();\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/WithdrawHistory.java.WithdrawHistory", "name": "WithdrawHistory", "file_path": "src/test/java/examples/spot/wallet/WithdrawHistory.java", "superclasses": "", "methods": ["[]WithdrawHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/WithdrawHistory.java.WithdrawHistory.[]WithdrawHistory()", "src/test/java/examples/spot/wallet/WithdrawHistory.java.WithdrawHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class WithdrawHistory {\n    private WithdrawHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().withdrawHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/ApiPermission.java.ApiPermission", "name": "ApiPermission", "file_path": "src/test/java/examples/spot/wallet/ApiPermission.java", "superclasses": "", "methods": ["[]ApiPermission()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/ApiPermission.java.ApiPermission.[]ApiPermission()", "src/test/java/examples/spot/wallet/ApiPermission.java.ApiPermission.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ApiPermission {\n    private ApiPermission() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().apiPermission(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/CoinInfo.java.CoinInfo", "name": "CoinInfo", "file_path": "src/test/java/examples/spot/wallet/CoinInfo.java", "superclasses": "", "methods": ["[]CoinInfo()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/CoinInfo.java.CoinInfo.[]CoinInfo()", "src/test/java/examples/spot/wallet/CoinInfo.java.CoinInfo.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CoinInfo {\n    private CoinInfo() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().coinInfo(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/DustTransfer.java.DustTransfer", "name": "DustTransfer", "file_path": "src/test/java/examples/spot/wallet/DustTransfer.java", "superclasses": "", "methods": ["[]DustTransfer()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/DustTransfer.java.DustTransfer.[]DustTransfer()", "src/test/java/examples/spot/wallet/DustTransfer.java.DustTransfer.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DustTransfer {\n    private DustTransfer() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> assets = new ArrayList<>();\n        assets.add(\"CHR\");\n        assets.add(\"CTSI\");\n        parameters.put(\"asset\", assets);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().dustTransfer(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/ApiTradingStatus.java.ApiTradingStatus", "name": "ApiTradingStatus", "file_path": "src/test/java/examples/spot/wallet/ApiTradingStatus.java", "superclasses": "", "methods": ["[]ApiTradingStatus()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/ApiTradingStatus.java.ApiTradingStatus.[]ApiTradingStatus()", "src/test/java/examples/spot/wallet/ApiTradingStatus.java.ApiTradingStatus.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ApiTradingStatus {\n    private ApiTradingStatus() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().accountStatus(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/SwitchBusdAutoConversion.java.SwitchBusdAutoConversion", "name": "SwitchBusdAutoConversion", "file_path": "src/test/java/examples/spot/wallet/SwitchBusdAutoConversion.java", "superclasses": "", "methods": ["[]SwitchBusdAutoConversion()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/SwitchBusdAutoConversion.java.SwitchBusdAutoConversion.[]SwitchBusdAutoConversion()", "src/test/java/examples/spot/wallet/SwitchBusdAutoConversion.java.SwitchBusdAutoConversion.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SwitchBusdAutoConversion {\n    private SwitchBusdAutoConversion() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"USDC\");\n        parameters.put(\"enable\", false);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().switchBusdAutoConversion(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/CloudMiningHistory.java.CloudMiningHistory", "name": "CloudMiningHistory", "file_path": "src/test/java/examples/spot/wallet/CloudMiningHistory.java", "superclasses": "", "methods": ["[]CloudMiningHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/CloudMiningHistory.java.CloudMiningHistory.[]CloudMiningHistory()", "src/test/java/examples/spot/wallet/CloudMiningHistory.java.CloudMiningHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CloudMiningHistory {\n    private CloudMiningHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        final Long startTime = 118263400000L;\n        final Long endTime = 118263407119L;\n        final Integer size = 20;\n\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().cloudMiningHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/GetUserAsset.java.GetUserAsset", "name": "GetUserAsset", "file_path": "src/test/java/examples/spot/wallet/GetUserAsset.java", "superclasses": "", "methods": ["[]GetUserAsset()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/GetUserAsset.java.GetUserAsset.[]GetUserAsset()", "src/test/java/examples/spot/wallet/GetUserAsset.java.GetUserAsset.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetUserAsset {\n    private GetUserAsset() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().getUserAsset(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/AccountStatus.java.AccountStatus", "name": "AccountStatus", "file_path": "src/test/java/examples/spot/wallet/AccountStatus.java", "superclasses": "", "methods": ["[]AccountStatus()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/AccountStatus.java.AccountStatus.[]AccountStatus()", "src/test/java/examples/spot/wallet/AccountStatus.java.AccountStatus.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AccountStatus {\n    private AccountStatus() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().apiTradingStatus(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/QueryUniversalTransfer.java.QueryUniversalTransfer", "name": "QueryUniversalTransfer", "file_path": "src/test/java/examples/spot/wallet/QueryUniversalTransfer.java", "superclasses": "", "methods": ["[]QueryUniversalTransfer()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/QueryUniversalTransfer.java.QueryUniversalTransfer.[]QueryUniversalTransfer()", "src/test/java/examples/spot/wallet/QueryUniversalTransfer.java.QueryUniversalTransfer.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class QueryUniversalTransfer {\n    private QueryUniversalTransfer() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"MAIN_MARGIN\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().queryUniversalTransfer(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/AssetDetail.java.AssetDetail", "name": "AssetDetail", "file_path": "src/test/java/examples/spot/wallet/AssetDetail.java", "superclasses": "", "methods": ["[]AssetDetail()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/AssetDetail.java.AssetDetail.[]AssetDetail()", "src/test/java/examples/spot/wallet/AssetDetail.java.AssetDetail.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AssetDetail {\n    private AssetDetail() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().assetDetail(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/AccountSnapshot.java.AccountSnapshot", "name": "AccountSnapshot", "file_path": "src/test/java/examples/spot/wallet/AccountSnapshot.java", "superclasses": "", "methods": ["[]AccountSnapshot()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/AccountSnapshot.java.AccountSnapshot.[]AccountSnapshot()", "src/test/java/examples/spot/wallet/AccountSnapshot.java.AccountSnapshot.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AccountSnapshot {\n    private AccountSnapshot() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"SPOT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().accountSnapshot(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/BnbConvertibleAssets.java.BnbConvertibleAssets", "name": "BnbConvertibleAssets", "file_path": "src/test/java/examples/spot/wallet/BnbConvertibleAssets.java", "superclasses": "", "methods": ["[]BnbConvertibleAssets()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/BnbConvertibleAssets.java.BnbConvertibleAssets.[]BnbConvertibleAssets()", "src/test/java/examples/spot/wallet/BnbConvertibleAssets.java.BnbConvertibleAssets.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class BnbConvertibleAssets {\n    private BnbConvertibleAssets() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().bnbConvertableAssets(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/TradeFee.java.TradeFee", "name": "TradeFee", "file_path": "src/test/java/examples/spot/wallet/TradeFee.java", "superclasses": "", "methods": ["[]TradeFee()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/TradeFee.java.TradeFee.[]TradeFee()", "src/test/java/examples/spot/wallet/TradeFee.java.TradeFee.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TradeFee {\n    private TradeFee() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().tradeFee(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/UniversalTransfer.java.UniversalTransfer", "name": "UniversalTransfer", "file_path": "src/test/java/examples/spot/wallet/UniversalTransfer.java", "superclasses": "", "methods": ["[]UniversalTransfer()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/UniversalTransfer.java.UniversalTransfer.[]UniversalTransfer()", "src/test/java/examples/spot/wallet/UniversalTransfer.java.UniversalTransfer.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class UniversalTransfer {\n    private UniversalTransfer() {\n    }\n    private static final double amount = 0.001;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"MAIN_MARGIN\");\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().universalTransfer(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.001", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/wallet/BusdConvertHistory.java.BusdConvertHistory", "name": "BusdConvertHistory", "file_path": "src/test/java/examples/spot/wallet/BusdConvertHistory.java", "superclasses": "", "methods": ["[]BusdConvertHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/BusdConvertHistory.java.BusdConvertHistory.[]BusdConvertHistory()", "src/test/java/examples/spot/wallet/BusdConvertHistory.java.BusdConvertHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class BusdConvertHistory {\n    private BusdConvertHistory() {\n    }\n\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        final Long startTime = 118263400000L;\n        final Long endTime = 118263407119L;\n        final Integer size = 20;\n\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().busdConvertHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/DelegationHistory.java.DelegationHistory", "name": "DelegationHistory", "file_path": "src/test/java/examples/spot/wallet/DelegationHistory.java", "superclasses": "", "methods": ["[]DelegationHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/DelegationHistory.java.DelegationHistory.[]DelegationHistory()", "src/test/java/examples/spot/wallet/DelegationHistory.java.DelegationHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DelegationHistory {\n    private DelegationHistory() {\n    }\n\n    private static final long startTime = 1695205406000L;\n    private static final long endTime = 1695205396000L;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().delegationHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long startTime = 1695205406000L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "startTime = 1695205406000L", "syntax_pass": true}, {"attribute_expression": "private static final long endTime = 1695205396000L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "endTime = 1695205396000L", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/wallet/DepositAddress.java.DepositAddress", "name": "DepositAddress", "file_path": "src/test/java/examples/spot/wallet/DepositAddress.java", "superclasses": "", "methods": ["[]DepositAddress()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/DepositAddress.java.DepositAddress.[]DepositAddress()", "src/test/java/examples/spot/wallet/DepositAddress.java.DepositAddress.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DepositAddress {\n    private DepositAddress() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().depositAddress(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/wallet/Withdraw.java.Withdraw", "name": "Withdraw", "file_path": "src/test/java/examples/spot/wallet/Withdraw.java", "superclasses": "", "methods": ["[]Withdraw()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/wallet/Withdraw.java.Withdraw.[]Withdraw()", "src/test/java/examples/spot/wallet/Withdraw.java.Withdraw.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Withdraw {\n    private Withdraw() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNBUSDT\");\n        parameters.put(\"address\", \"\");\n        parameters.put(\"amount\", \"0.001\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createWallet().withdraw(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/nft/GetAsset.java.GetAsset", "name": "GetAsset", "file_path": "src/test/java/examples/spot/nft/GetAsset.java", "superclasses": "", "methods": ["[]GetAsset()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/nft/GetAsset.java.GetAsset.[]GetAsset()", "src/test/java/examples/spot/nft/GetAsset.java.GetAsset.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetAsset {\n    private GetAsset() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createNFT().getAsset(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/nft/DepositHistory.java.DepositHistory", "name": "DepositHistory", "file_path": "src/test/java/examples/spot/nft/DepositHistory.java", "superclasses": "", "methods": ["[]DepositHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/nft/DepositHistory.java.DepositHistory.[]DepositHistory()", "src/test/java/examples/spot/nft/DepositHistory.java.DepositHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DepositHistory {\n    private DepositHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createNFT().depositHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/nft/WithdrawHistory.java.WithdrawHistory", "name": "WithdrawHistory", "file_path": "src/test/java/examples/spot/nft/WithdrawHistory.java", "superclasses": "", "methods": ["[]WithdrawHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/nft/WithdrawHistory.java.WithdrawHistory.[]WithdrawHistory()", "src/test/java/examples/spot/nft/WithdrawHistory.java.WithdrawHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class WithdrawHistory {\n    private WithdrawHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createNFT().withdrawHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/nft/TransactionsHistory.java.TransactionsHistory", "name": "TransactionsHistory", "file_path": "src/test/java/examples/spot/nft/TransactionsHistory.java", "superclasses": "", "methods": ["[]TransactionsHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/nft/TransactionsHistory.java.TransactionsHistory.[]TransactionsHistory()", "src/test/java/examples/spot/nft/TransactionsHistory.java.TransactionsHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TransactionsHistory {\n    private TransactionsHistory() {\n    }\n    private static final int orderType = 0;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderType\", orderType);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createNFT().transactionsHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int orderType = 0;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "orderType = 0", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/signature/Rsa.java.Rsa", "name": "Rsa", "file_path": "src/test/java/examples/spot/signature/Rsa.java", "superclasses": "", "methods": ["[]Rsa()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/signature/Rsa.java.Rsa.[]Rsa()", "src/test/java/examples/spot/signature/Rsa.java.Rsa.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Rsa {\n    private Rsa() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        RsaSignatureGenerator signGenerator =  new RsaSignatureGenerator(PrivateConfig.TESTNET_PRIVATE_KEY_PATH); // Private Key file path as input\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, signGenerator, PrivateConfig.BASE_URL);\n\n        try {\n            String result = client.createTrade().account(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/signature/Hmac.java.Hmac", "name": "Hmac", "file_path": "src/test/java/examples/spot/signature/Hmac.java", "superclasses": "", "methods": ["[]Hmac()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/signature/Hmac.java.Hmac.[]Hmac()", "src/test/java/examples/spot/signature/Hmac.java.Hmac.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Hmac {\n    private Hmac() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, new HmacSignatureGenerator(PrivateConfig.TESTNET_SECRET_KEY), PrivateConfig.BASE_URL);\n\n        try {\n            String result = client.createTrade().account(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/signature/EncryptedRsa.java.EncryptedRsa", "name": "EncryptedRsa", "file_path": "src/test/java/examples/spot/signature/EncryptedRsa.java", "superclasses": "", "methods": ["[]EncryptedRsa()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/signature/EncryptedRsa.java.EncryptedRsa.[]EncryptedRsa()", "src/test/java/examples/spot/signature/EncryptedRsa.java.EncryptedRsa.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class EncryptedRsa {\n    private EncryptedRsa() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        RsaSignatureGenerator signGenerator =  new RsaSignatureGenerator(PrivateConfig.TESTNET_PRIVATE_KEY_PATH, \"password\");\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, signGenerator, PrivateConfig.BASE_URL);\n\n        try {\n            String result = client.createTrade().account(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/signature/Ed25519.java.Ed25519", "name": "Ed25519", "file_path": "src/test/java/examples/spot/signature/Ed25519.java", "superclasses": "", "methods": ["[]Ed25519()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/signature/Ed25519.java.Ed25519.[]Ed25519()", "src/test/java/examples/spot/signature/Ed25519.java.Ed25519.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Ed25519 {\n    private Ed25519() {\n    }\n\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Ed25519SignatureGenerator signGenerator =  new Ed25519SignatureGenerator(PrivateConfig.TESTNET_PRIVATE_KEY_PATH); // Private Key file path as input\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, signGenerator, PrivateConfig.BASE_URL);\n\n        try {\n            String result = client.createTrade().account(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/trade/OcoOrder.java.OcoOrder", "name": "OcoOrder", "file_path": "src/test/java/examples/spot/trade/OcoOrder.java", "superclasses": "", "methods": ["[]OcoOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/OcoOrder.java.OcoOrder.[]OcoOrder()", "src/test/java/examples/spot/trade/OcoOrder.java.OcoOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class OcoOrder {\n    private OcoOrder() {\n    }\n    private static final double quantity = 0.01;\n    private static final double price = 95000;\n    private static final double stopPrice = 98000;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"stopPrice\", stopPrice);\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"price\", price);\n\n        try {\n            String result = client.createTrade().ocoOrder(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final double price = 95000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "price = 95000", "syntax_pass": true}, {"attribute_expression": "private static final double stopPrice = 98000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "stopPrice = 98000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/trade/CancelOpenOrders.java.CancelOpenOrders", "name": "CancelOpenOrders", "file_path": "src/test/java/examples/spot/trade/CancelOpenOrders.java", "superclasses": "", "methods": ["[]CancelOpenOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/CancelOpenOrders.java.CancelOpenOrders.[]CancelOpenOrders()", "src/test/java/examples/spot/trade/CancelOpenOrders.java.CancelOpenOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CancelOpenOrders {\n    private CancelOpenOrders() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n\n        try {\n            String result = client.createTrade().cancelOpenOrders(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/trade/MyTrades.java.MyTrades", "name": "MyTrades", "file_path": "src/test/java/examples/spot/trade/MyTrades.java", "superclasses": "", "methods": ["[]MyTrades()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/MyTrades.java.MyTrades.[]MyTrades()", "src/test/java/examples/spot/trade/MyTrades.java.MyTrades.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class MyTrades {\n    private MyTrades() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        try {\n            String result = client.createTrade().myTrades(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/trade/Account.java.Account", "name": "Account", "file_path": "src/test/java/examples/spot/trade/Account.java", "superclasses": "", "methods": ["[]Account()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/Account.java.Account.[]Account()", "src/test/java/examples/spot/trade/Account.java.Account.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Account {\n    private Account() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        try {\n            String result = client.createTrade().account(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format((String) String.format(\"fullErrMessage: %s\", e.getMessage(), e)));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/trade/GetOpenOrders.java.GetOpenOrders", "name": "GetOpenOrders", "file_path": "src/test/java/examples/spot/trade/GetOpenOrders.java", "superclasses": "", "methods": ["[]GetOpenOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/GetOpenOrders.java.GetOpenOrders.[]GetOpenOrders()", "src/test/java/examples/spot/trade/GetOpenOrders.java.GetOpenOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetOpenOrders {\n    private GetOpenOrders() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n\n        try {\n            String result = client.createTrade().getOpenOrders(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/trade/RateLimitOrder.java.RateLimitOrder", "name": "RateLimitOrder", "file_path": "src/test/java/examples/spot/trade/RateLimitOrder.java", "superclasses": "", "methods": ["[]RateLimitOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/RateLimitOrder.java.RateLimitOrder.[]RateLimitOrder()", "src/test/java/examples/spot/trade/RateLimitOrder.java.RateLimitOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RateLimitOrder {\n    private RateLimitOrder() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        try {\n            String result = client.createTrade().rateLimitOrder(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/trade/GetOrders.java.GetOrders", "name": "GetOrders", "file_path": "src/test/java/examples/spot/trade/GetOrders.java", "superclasses": "", "methods": ["[]GetOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/GetOrders.java.GetOrders.[]GetOrders()", "src/test/java/examples/spot/trade/GetOrders.java.GetOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetOrders {\n    private GetOrders() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n        parameters.put(\"symbol\", \"BTCUSDT\");\n\n        try {\n            String result = client.createTrade().getOrders(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/trade/GetOcoOrders.java.GetOcoOrders", "name": "GetOcoOrders", "file_path": "src/test/java/examples/spot/trade/GetOcoOrders.java", "superclasses": "", "methods": ["[]GetOcoOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/GetOcoOrders.java.GetOcoOrders.[]GetOcoOrders()", "src/test/java/examples/spot/trade/GetOcoOrders.java.GetOcoOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetOcoOrders {\n    private GetOcoOrders() {\n    }\n    private static final int fromId = 1;\n    private static final int limit = 10;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"fromId\", fromId);\n        parameters.put(\"limit\", limit);\n\n        try {\n            String result = client.createTrade().getOCOOrders(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int fromId = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "fromId = 1", "syntax_pass": true}, {"attribute_expression": "private static final int limit = 10;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "limit = 10", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/trade/Commission.java.Commission", "name": "Commission", "file_path": "src/test/java/examples/spot/trade/Commission.java", "superclasses": "", "methods": ["[]Commission()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/Commission.java.Commission.[]Commission()", "src/test/java/examples/spot/trade/Commission.java.Commission.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Commission {\n    private Commission() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createTrade().commission(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/trade/GetOrder.java.GetOrder", "name": "GetOrder", "file_path": "src/test/java/examples/spot/trade/GetOrder.java", "superclasses": "", "methods": ["[]GetOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/GetOrder.java.GetOrder.[]GetOrder()", "src/test/java/examples/spot/trade/GetOrder.java.GetOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetOrder {\n    private GetOrder() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"orderId\", \"6687791\");\n\n        try {\n            String result = client.createTrade().getOrder(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/trade/CancelOcoOrder.java.CancelOcoOrder", "name": "CancelOcoOrder", "file_path": "src/test/java/examples/spot/trade/CancelOcoOrder.java", "superclasses": "", "methods": ["[]CancelOcoOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/CancelOcoOrder.java.CancelOcoOrder.[]CancelOcoOrder()", "src/test/java/examples/spot/trade/CancelOcoOrder.java.CancelOcoOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CancelOcoOrder {\n    private CancelOcoOrder() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"orderListId\", \"\");\n\n        try {\n            String result = client.createTrade().cancelOCO(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/trade/CancelReplace.java.CancelReplace", "name": "CancelReplace", "file_path": "src/test/java/examples/spot/trade/CancelReplace.java", "superclasses": "", "methods": ["[]CancelReplace()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/CancelReplace.java.CancelReplace.[]CancelReplace()", "src/test/java/examples/spot/trade/CancelReplace.java.CancelReplace.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CancelReplace {\n    private CancelReplace() {\n    }\n    private static final double quantity = 0.01;\n    private static final double price = 30000;\n    private static final long cancelOrderId = 1234567;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"cancelReplaceMode\", \"STOP_ON_FAILURE\");\n        parameters.put(\"timeInForce\", \"GTC\");\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"price\", price);\n        parameters.put(\"cancelOrderId\", cancelOrderId);\n\n        try {\n            String result = client.createTrade().cancelReplace(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final double price = 30000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "price = 30000", "syntax_pass": true}, {"attribute_expression": "private static final long cancelOrderId = 1234567;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "cancelOrderId = 1234567", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/trade/NewOrder.java.NewOrder", "name": "NewOrder", "file_path": "src/test/java/examples/spot/trade/NewOrder.java", "superclasses": "", "methods": ["[]NewOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/NewOrder.java.NewOrder.[]NewOrder()", "src/test/java/examples/spot/trade/NewOrder.java.NewOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class NewOrder {\n    private NewOrder() {\n    }\n    private static final double quantity = 0.01;\n    private static final double price = 50000;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"timeInForce\", \"GTC\");\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"price\", price);\n\n        try {\n            String result = client.createTrade().newOrder(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final double price = 50000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "price = 50000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/trade/PreventedMatches.java.PreventedMatches", "name": "PreventedMatches", "file_path": "src/test/java/examples/spot/trade/PreventedMatches.java", "superclasses": "", "methods": ["[]PreventedMatches()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/PreventedMatches.java.PreventedMatches.[]PreventedMatches()", "src/test/java/examples/spot/trade/PreventedMatches.java.PreventedMatches.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class PreventedMatches {\n    private PreventedMatches() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createTrade().preventedMatches(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/trade/TestSorOrder.java.TestSorOrder", "name": "TestSorOrder", "file_path": "src/test/java/examples/spot/trade/TestSorOrder.java", "superclasses": "", "methods": ["[]TestSorOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/TestSorOrder.java.TestSorOrder.[]TestSorOrder()", "src/test/java/examples/spot/trade/TestSorOrder.java.TestSorOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TestSorOrder {\n    private TestSorOrder() {\n    }\n\n    private static final double quantity = 1;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"quantity\", quantity);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createTrade().testSorOrder(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/trade/SorOrder.java.SorOrder", "name": "SorOrder", "file_path": "src/test/java/examples/spot/trade/SorOrder.java", "superclasses": "", "methods": ["[]SorOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/SorOrder.java.SorOrder.[]SorOrder()", "src/test/java/examples/spot/trade/SorOrder.java.SorOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SorOrder {\n    private SorOrder() {\n    }\n\n    private static final double quantity = 1;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"quantity\", quantity);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createTrade().sorOrder(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/trade/GetOcoOrder.java.GetOcoOrder", "name": "GetOcoOrder", "file_path": "src/test/java/examples/spot/trade/GetOcoOrder.java", "superclasses": "", "methods": ["[]GetOcoOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/GetOcoOrder.java.GetOcoOrder.[]GetOcoOrder()", "src/test/java/examples/spot/trade/GetOcoOrder.java.GetOcoOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetOcoOrder {\n    private GetOcoOrder() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"orderListId\", \"\");\n\n        try {\n            String result = client.createTrade().getOCOOrder(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/trade/TestNewOrder.java.TestNewOrder", "name": "TestNewOrder", "file_path": "src/test/java/examples/spot/trade/TestNewOrder.java", "superclasses": "", "methods": ["[]TestNewOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/TestNewOrder.java.TestNewOrder.[]TestNewOrder()", "src/test/java/examples/spot/trade/TestNewOrder.java.TestNewOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TestNewOrder {\n    private TestNewOrder() {\n    }\n    private static final double quantity = 0.01;\n    private static final int price = 95000;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"timeInForce\", \"GTC\");\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"price\", price);\n\n        try {\n            String result = client.createTrade().testNewOrder(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double quantity = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "quantity = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final int price = 95000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "price = 95000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/trade/GetOpenOcoOrders.java.GetOpenOcoOrders", "name": "GetOpenOcoOrders", "file_path": "src/test/java/examples/spot/trade/GetOpenOcoOrders.java", "superclasses": "", "methods": ["[]GetOpenOcoOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/GetOpenOcoOrders.java.GetOpenOcoOrders.[]GetOpenOcoOrders()", "src/test/java/examples/spot/trade/GetOpenOcoOrders.java.GetOpenOcoOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class GetOpenOcoOrders {\n    private GetOpenOcoOrders() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        try {\n            String result = client.createTrade().getOpenOCOOrders(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/trade/CancelOrder.java.CancelOrder", "name": "CancelOrder", "file_path": "src/test/java/examples/spot/trade/CancelOrder.java", "superclasses": "", "methods": ["[]CancelOrder()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/CancelOrder.java.CancelOrder.[]CancelOrder()", "src/test/java/examples/spot/trade/CancelOrder.java.CancelOrder.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CancelOrder {\n    private CancelOrder() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, PrivateConfig.BASE_URL);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"orderId\", \"\");\n\n        try {\n            String result = client.createTrade().cancelOrder(parameters);\n            System.out.println(result);\n        } catch (BinanceConnectorException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s\", e.getMessage()));\n        } catch (BinanceClientException e) {\n            System.err.println((String) String.format(\"fullErrMessage: %s \\nerrMessage: %s \\nerrCode: %d \\nHTTPStatusCode: %d\",\n                    e.getMessage(), e.getErrMsg(), e.getErrorCode(), e.getHttpStatusCode()));\n        }\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/trade/SorAllocations.java.SorAllocations", "name": "SorAllocations", "file_path": "src/test/java/examples/spot/trade/SorAllocations.java", "superclasses": "", "methods": ["[]SorAllocations()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/trade/SorAllocations.java.SorAllocations.[]SorAllocations()", "src/test/java/examples/spot/trade/SorAllocations.java.SorAllocations.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SorAllocations {\n    private SorAllocations() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createTrade().sorAllocations(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAdjustLtv.java.FlexibleLoanAdjustLtv", "name": "FlexibleLoanAdjustLtv", "file_path": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAdjustLtv.java", "superclasses": "", "methods": ["[]FlexibleLoanAdjustLtv()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/FlexibleLoanAdjustLtv.java.FlexibleLoanAdjustLtv.[]FlexibleLoanAdjustLtv()", "src/test/java/examples/spot/cryptoloans/FlexibleLoanAdjustLtv.java.FlexibleLoanAdjustLtv.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleLoanAdjustLtv {\n    private FlexibleLoanAdjustLtv() {\n    }\n    private static final double adjustmentAmount = 5.235;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"adjustmentAmount\", adjustmentAmount);\n        parameters.put(\"direction\", \"ADDITIONAL\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanAdjustLtv(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double adjustmentAmount = 5.235;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "adjustmentAmount = 5.235", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepay.java.FlexibleLoanRepay", "name": "FlexibleLoanRepay", "file_path": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepay.java", "superclasses": "", "methods": ["[]FlexibleLoanRepay()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/FlexibleLoanRepay.java.FlexibleLoanRepay.[]FlexibleLoanRepay()", "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepay.java.FlexibleLoanRepay.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleLoanRepay {\n    private FlexibleLoanRepay() {\n    }\n    private static final double repayAmount = 0.1;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"repayAmount\", repayAmount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanRepay(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double repayAmount = 0.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "repayAmount = 0.1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanOngoingOrders.java.FlexibleLoanOngoingOrders", "name": "FlexibleLoanOngoingOrders", "file_path": "src/test/java/examples/spot/cryptoloans/FlexibleLoanOngoingOrders.java", "superclasses": "", "methods": ["[]FlexibleLoanOngoingOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/FlexibleLoanOngoingOrders.java.FlexibleLoanOngoingOrders.[]FlexibleLoanOngoingOrders()", "src/test/java/examples/spot/cryptoloans/FlexibleLoanOngoingOrders.java.FlexibleLoanOngoingOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleLoanOngoingOrders {\n    private FlexibleLoanOngoingOrders() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanOngoingOrders(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanRepay.java.LoanRepay", "name": "LoanRepay", "file_path": "src/test/java/examples/spot/cryptoloans/LoanRepay.java", "superclasses": "", "methods": ["[]LoanRepay()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/LoanRepay.java.LoanRepay.[]LoanRepay()", "src/test/java/examples/spot/cryptoloans/LoanRepay.java.LoanRepay.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LoanRepay {\n\n    private LoanRepay() {\n    }\n\n    private static final long orderId = 100000001;\n    private static final double amount = 0.01;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"amount\", amount);\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanRepay(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long orderId = 100000001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 100000001", "syntax_pass": true}, {"attribute_expression": "private static final double amount = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/cryptoloans/CustomizeMarginCall.java.CustomizeMarginCall", "name": "CustomizeMarginCall", "file_path": "src/test/java/examples/spot/cryptoloans/CustomizeMarginCall.java", "superclasses": "", "methods": ["[]CustomizeMarginCall()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/CustomizeMarginCall.java.CustomizeMarginCall.[]CustomizeMarginCall()", "src/test/java/examples/spot/cryptoloans/CustomizeMarginCall.java.CustomizeMarginCall.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CustomizeMarginCall {\n\n    private CustomizeMarginCall() {\n    }\n\n    private static final double marginCall = 0.7;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"marginCall\", marginCall);\n        parameters.put(\"collateralCoin\", \"BNB\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().customizeMarginCall(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double marginCall = 0.7;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "marginCall = 0.7", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanOngoingOrders.java.LoanOngoingOrders", "name": "LoanOngoingOrders", "file_path": "src/test/java/examples/spot/cryptoloans/LoanOngoingOrders.java", "superclasses": "", "methods": ["[]LoanOngoingOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/LoanOngoingOrders.java.LoanOngoingOrders.[]LoanOngoingOrders()", "src/test/java/examples/spot/cryptoloans/LoanOngoingOrders.java.LoanOngoingOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LoanOngoingOrders {\n\n    private LoanOngoingOrders() {\n    }\n\n    private static final long orderId = 100000001;\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanOngoingOrders(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long orderId = 100000001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 100000001", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTV.java.LoanAdjustLTV", "name": "LoanAdjustLTV", "file_path": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTV.java", "superclasses": "", "methods": ["[]LoanAdjustLTV()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/LoanAdjustLTV.java.LoanAdjustLTV.[]LoanAdjustLTV()", "src/test/java/examples/spot/cryptoloans/LoanAdjustLTV.java.LoanAdjustLTV.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LoanAdjustLTV {\n\n    private LoanAdjustLTV() {\n    }\n\n    private static final long orderId = 100000001;\n    private static final double amount = 0.01;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"amount\", amount);\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanAdjustLTV(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long orderId = 100000001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 100000001", "syntax_pass": true}, {"attribute_expression": "private static final double amount = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanBorrowHistory.java.LoanBorrowHistory", "name": "LoanBorrowHistory", "file_path": "src/test/java/examples/spot/cryptoloans/LoanBorrowHistory.java", "superclasses": "", "methods": ["[]LoanBorrowHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/LoanBorrowHistory.java.LoanBorrowHistory.[]LoanBorrowHistory()", "src/test/java/examples/spot/cryptoloans/LoanBorrowHistory.java.LoanBorrowHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LoanBorrowHistory {\n\n    private LoanBorrowHistory() {\n    }\n\n    private static final long orderId = 100000001;\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanBorrowHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long orderId = 100000001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 100000001", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanAssetsData.java.LoanAssetsData", "name": "LoanAssetsData", "file_path": "src/test/java/examples/spot/cryptoloans/LoanAssetsData.java", "superclasses": "", "methods": ["[]LoanAssetsData()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/LoanAssetsData.java.LoanAssetsData.[]LoanAssetsData()", "src/test/java/examples/spot/cryptoloans/LoanAssetsData.java.LoanAssetsData.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LoanAssetsData {\n\n    private LoanAssetsData() {\n    }\n\n    private static final long vipLevel = 1;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"vipLevel\", vipLevel); \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanAssetsData(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long vipLevel = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "vipLevel = 1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanLtvAdjustHistory.java.FlexibleLoanLtvAdjustHistory", "name": "FlexibleLoanLtvAdjustHistory", "file_path": "src/test/java/examples/spot/cryptoloans/FlexibleLoanLtvAdjustHistory.java", "superclasses": "", "methods": ["[]FlexibleLoanLtvAdjustHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/FlexibleLoanLtvAdjustHistory.java.FlexibleLoanLtvAdjustHistory.[]FlexibleLoanLtvAdjustHistory()", "src/test/java/examples/spot/cryptoloans/FlexibleLoanLtvAdjustHistory.java.FlexibleLoanLtvAdjustHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleLoanLtvAdjustHistory {\n    private FlexibleLoanLtvAdjustHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanLtvAdjustHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanRepayHistory.java.LoanRepayHistory", "name": "LoanRepayHistory", "file_path": "src/test/java/examples/spot/cryptoloans/LoanRepayHistory.java", "superclasses": "", "methods": ["[]LoanRepayHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/LoanRepayHistory.java.LoanRepayHistory.[]LoanRepayHistory()", "src/test/java/examples/spot/cryptoloans/LoanRepayHistory.java.LoanRepayHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LoanRepayHistory {\n\n    private LoanRepayHistory() {\n    }\n\n    private static final long orderId = 100000001;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanRepayHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long orderId = 100000001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 100000001", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAssets.java.FlexibleLoanAssets", "name": "FlexibleLoanAssets", "file_path": "src/test/java/examples/spot/cryptoloans/FlexibleLoanAssets.java", "superclasses": "", "methods": ["[]FlexibleLoanAssets()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/FlexibleLoanAssets.java.FlexibleLoanAssets.[]FlexibleLoanAssets()", "src/test/java/examples/spot/cryptoloans/FlexibleLoanAssets.java.FlexibleLoanAssets.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleLoanAssets {\n    private FlexibleLoanAssets() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanAssets(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanBorrow.java.LoanBorrow", "name": "LoanBorrow", "file_path": "src/test/java/examples/spot/cryptoloans/LoanBorrow.java", "superclasses": "", "methods": ["[]LoanBorrow()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/LoanBorrow.java.LoanBorrow.[]LoanBorrow()", "src/test/java/examples/spot/cryptoloans/LoanBorrow.java.LoanBorrow.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LoanBorrow {\n    private LoanBorrow() {\n    }\n\n    private static final int loanTerm = 7;\n    private static final double loanAmount = 100.5;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"loanAmount\", loanAmount);\n        parameters.put(\"loanTerm\", loanTerm);\n        \n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanBorrow(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int loanTerm = 7;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "loanTerm = 7", "syntax_pass": true}, {"attribute_expression": "private static final double loanAmount = 100.5;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "loanAmount = 100.5", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepayHistory.java.FlexibleLoanRepayHistory", "name": "FlexibleLoanRepayHistory", "file_path": "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepayHistory.java", "superclasses": "", "methods": ["[]FlexibleLoanRepayHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/FlexibleLoanRepayHistory.java.FlexibleLoanRepayHistory.[]FlexibleLoanRepayHistory()", "src/test/java/examples/spot/cryptoloans/FlexibleLoanRepayHistory.java.FlexibleLoanRepayHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleLoanRepayHistory {\n    private FlexibleLoanRepayHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanRepayHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanCollateralAssets.java.FlexibleLoanCollateralAssets", "name": "FlexibleLoanCollateralAssets", "file_path": "src/test/java/examples/spot/cryptoloans/FlexibleLoanCollateralAssets.java", "superclasses": "", "methods": ["[]FlexibleLoanCollateralAssets()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/FlexibleLoanCollateralAssets.java.FlexibleLoanCollateralAssets.[]FlexibleLoanCollateralAssets()", "src/test/java/examples/spot/cryptoloans/FlexibleLoanCollateralAssets.java.FlexibleLoanCollateralAssets.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleLoanCollateralAssets {\n    private FlexibleLoanCollateralAssets() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanCollateralAssets(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanIncome.java.LoanIncome", "name": "LoanIncome", "file_path": "src/test/java/examples/spot/cryptoloans/LoanIncome.java", "superclasses": "", "methods": ["[]LoanIncome()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/LoanIncome.java.LoanIncome.[]LoanIncome()", "src/test/java/examples/spot/cryptoloans/LoanIncome.java.LoanIncome.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LoanIncome {\n    private LoanIncome() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanIncome(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTVHistory.java.LoanAdjustLTVHistory", "name": "LoanAdjustLTVHistory", "file_path": "src/test/java/examples/spot/cryptoloans/LoanAdjustLTVHistory.java", "superclasses": "", "methods": ["[]LoanAdjustLTVHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/LoanAdjustLTVHistory.java.LoanAdjustLTVHistory.[]LoanAdjustLTVHistory()", "src/test/java/examples/spot/cryptoloans/LoanAdjustLTVHistory.java.LoanAdjustLTVHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LoanAdjustLTVHistory {\n\n    private LoanAdjustLTVHistory() {\n    }\n\n    private static final long orderId = 100000001;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().loanAdjustLTVHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long orderId = 100000001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 100000001", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/cryptoloans/CollateralAssetsData.java.CollateralAssetsData", "name": "CollateralAssetsData", "file_path": "src/test/java/examples/spot/cryptoloans/CollateralAssetsData.java", "superclasses": "", "methods": ["[]CollateralAssetsData()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/CollateralAssetsData.java.CollateralAssetsData.[]CollateralAssetsData()", "src/test/java/examples/spot/cryptoloans/CollateralAssetsData.java.CollateralAssetsData.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CollateralAssetsData {\n\n    private CollateralAssetsData() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"collateralCoin\", \"BNB\");\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().collateralAssetsData(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrow.java.FlexibleLoanBorrow", "name": "FlexibleLoanBorrow", "file_path": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrow.java", "superclasses": "", "methods": ["[]FlexibleLoanBorrow()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrow.java.FlexibleLoanBorrow.[]FlexibleLoanBorrow()", "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrow.java.FlexibleLoanBorrow.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleLoanBorrow {\n    private FlexibleLoanBorrow() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"USDT\");\n        parameters.put(\"collateralCoin\", \"BTC\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanBorrow(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/cryptoloans/CollateralRepayRate.java.CollateralRepayRate", "name": "CollateralRepayRate", "file_path": "src/test/java/examples/spot/cryptoloans/CollateralRepayRate.java", "superclasses": "", "methods": ["[]CollateralRepayRate()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/CollateralRepayRate.java.CollateralRepayRate.[]CollateralRepayRate()", "src/test/java/examples/spot/cryptoloans/CollateralRepayRate.java.CollateralRepayRate.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CollateralRepayRate {\n\n    private CollateralRepayRate() {\n    }\n\n    private static final double repayAmount = 1000;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"repayAmount\", repayAmount);\n        \n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().collateralRepayRate(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double repayAmount = 1000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "repayAmount = 1000", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrowHistory.java.FlexibleLoanBorrowHistory", "name": "FlexibleLoanBorrowHistory", "file_path": "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrowHistory.java", "superclasses": "", "methods": ["[]FlexibleLoanBorrowHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrowHistory.java.FlexibleLoanBorrowHistory.[]FlexibleLoanBorrowHistory()", "src/test/java/examples/spot/cryptoloans/FlexibleLoanBorrowHistory.java.FlexibleLoanBorrowHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleLoanBorrowHistory {\n    private FlexibleLoanBorrowHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"USDT\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createCryptoLoans().flexibleLoanBorrowHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/viploans/CollateralAsset.java.CollateralAsset", "name": "CollateralAsset", "file_path": "src/test/java/examples/spot/viploans/CollateralAsset.java", "superclasses": "", "methods": ["[]CollateralAsset()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/viploans/CollateralAsset.java.CollateralAsset.[]CollateralAsset()", "src/test/java/examples/spot/viploans/CollateralAsset.java.CollateralAsset.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CollateralAsset {\n    private CollateralAsset() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().collateralAccount(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/viploans/Borrow.java.Borrow", "name": "Borrow", "file_path": "src/test/java/examples/spot/viploans/Borrow.java", "superclasses": "", "methods": ["[]Borrow()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/viploans/Borrow.java.Borrow.[]Borrow()", "src/test/java/examples/spot/viploans/Borrow.java.Borrow.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Borrow {\n    private Borrow() {\n    }\n\n    private static final long loanAccountId = 12345678;\n    private static final double loanAmount = 100.55;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanAccountId\", loanAccountId);\n        parameters.put(\"loanAmount\", loanAmount);\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralAccountId\", \"87654321\");\n        parameters.put(\"collateralCoin\", \"BUSD\");\n        parameters.put(\"isFlexibleRate\", true);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().borrow(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long loanAccountId = 12345678;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "loanAccountId = 12345678", "syntax_pass": true}, {"attribute_expression": "private static final double loanAmount = 100.55;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "loanAmount = 100.55", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/viploans/BorrowInterestRate.java.BorrowInterestRate", "name": "BorrowInterestRate", "file_path": "src/test/java/examples/spot/viploans/BorrowInterestRate.java", "superclasses": "", "methods": ["[]BorrowInterestRate()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/viploans/BorrowInterestRate.java.BorrowInterestRate.[]BorrowInterestRate()", "src/test/java/examples/spot/viploans/BorrowInterestRate.java.BorrowInterestRate.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class BorrowInterestRate {\n    private BorrowInterestRate() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().borrowInterestRate(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/viploans/RepaymentHistory.java.RepaymentHistory", "name": "RepaymentHistory", "file_path": "src/test/java/examples/spot/viploans/RepaymentHistory.java", "superclasses": "", "methods": ["[]RepaymentHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/viploans/RepaymentHistory.java.RepaymentHistory.[]RepaymentHistory()", "src/test/java/examples/spot/viploans/RepaymentHistory.java.RepaymentHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RepaymentHistory {\n    private RepaymentHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().repaymentHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/viploans/CollateralAccount.java.CollateralAccount", "name": "CollateralAccount", "file_path": "src/test/java/examples/spot/viploans/CollateralAccount.java", "superclasses": "", "methods": ["[]CollateralAccount()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/viploans/CollateralAccount.java.CollateralAccount.[]CollateralAccount()", "src/test/java/examples/spot/viploans/CollateralAccount.java.CollateralAccount.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CollateralAccount {\n    private CollateralAccount() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().collateralAsset(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/viploans/Repay.java.Repay", "name": "Repay", "file_path": "src/test/java/examples/spot/viploans/Repay.java", "superclasses": "", "methods": ["[]Repay()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/viploans/Repay.java.Repay.[]Repay()", "src/test/java/examples/spot/viploans/Repay.java.Repay.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Repay {\n    private Repay() {\n    }\n\n    private static final long orderId = 124;\n    private static final double amount = 100.55;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().repay(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long orderId = 124;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 124", "syntax_pass": true}, {"attribute_expression": "private static final double amount = 100.55;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 100.55", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/viploans/Renew.java.Renew", "name": "Renew", "file_path": "src/test/java/examples/spot/viploans/Renew.java", "superclasses": "", "methods": ["[]Renew()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/viploans/Renew.java.Renew.[]Renew()", "src/test/java/examples/spot/viploans/Renew.java.Renew.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Renew {\n    private Renew() {\n    }\n\n    private static final long orderId = 124;\n    private static final int loanTerm = 7;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanTerm\", loanTerm);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().renew(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long orderId = 124;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "orderId = 124", "syntax_pass": true}, {"attribute_expression": "private static final int loanTerm = 7;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "loanTerm = 7", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/viploans/OrderStatus.java.OrderStatus", "name": "OrderStatus", "file_path": "src/test/java/examples/spot/viploans/OrderStatus.java", "superclasses": "", "methods": ["[]OrderStatus()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/viploans/OrderStatus.java.OrderStatus.[]OrderStatus()", "src/test/java/examples/spot/viploans/OrderStatus.java.OrderStatus.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class OrderStatus {\n    private OrderStatus() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().orderStatus(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/viploans/LoanableAssets.java.LoanableAssets", "name": "LoanableAssets", "file_path": "src/test/java/examples/spot/viploans/LoanableAssets.java", "superclasses": "", "methods": ["[]LoanableAssets()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/viploans/LoanableAssets.java.LoanableAssets.[]LoanableAssets()", "src/test/java/examples/spot/viploans/LoanableAssets.java.LoanableAssets.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LoanableAssets {\n    private LoanableAssets() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().loanableAssets(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/viploans/OngoingOrders.java.OngoingOrders", "name": "OngoingOrders", "file_path": "src/test/java/examples/spot/viploans/OngoingOrders.java", "superclasses": "", "methods": ["[]OngoingOrders()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/viploans/OngoingOrders.java.OngoingOrders.[]OngoingOrders()", "src/test/java/examples/spot/viploans/OngoingOrders.java.OngoingOrders.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class OngoingOrders {\n    private OngoingOrders() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", \"BUSD\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createVIPLoans().ongoingOrders(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/rebate/TaxQuery.java.TaxQuery", "name": "TaxQuery", "file_path": "src/test/java/examples/spot/rebate/TaxQuery.java", "superclasses": "", "methods": ["[]TaxQuery()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/rebate/TaxQuery.java.TaxQuery.[]TaxQuery()", "src/test/java/examples/spot/rebate/TaxQuery.java.TaxQuery.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TaxQuery {\n    private TaxQuery() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createRebate().taxQuery(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/proxy/UnauthProxy.java.UnauthProxy", "name": "UnauthProxy", "file_path": "src/test/java/examples/spot/proxy/UnauthProxy.java", "superclasses": "", "methods": ["[]UnauthProxy()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/proxy/UnauthProxy.java.UnauthProxy.[]UnauthProxy()", "src/test/java/examples/spot/proxy/UnauthProxy.java.UnauthProxy.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class UnauthProxy {\n    private UnauthProxy() {\n    }\n\n    private static final Integer proxyPort = 80;\n\n    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl();\n        \n        Proxy proxyConn = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", proxyPort));\n        ProxyAuth proxy = new ProxyAuth(proxyConn, null);\n        client.setProxy(proxy);\n        System.out.println(client.createMarket().time());\n\n        client.unsetProxy();\n        System.out.println(client.createMarket().time());\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Integer proxyPort = 80;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Integer", "name": "proxyPort = 80", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/proxy/AuthProxy.java.AuthProxy", "name": "AuthProxy", "file_path": "src/test/java/examples/spot/proxy/AuthProxy.java", "superclasses": "", "methods": ["[]AuthProxy()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/proxy/AuthProxy.java.AuthProxy.[]AuthProxy()", "src/test/java/examples/spot/proxy/AuthProxy.java.AuthProxy.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AuthProxy {\n    \n    private AuthProxy() {\n\n    }\n    \n    private static final Integer proxyPort = 3128;\n\n    public static void main(String[] args) throws IOException { \n        SpotClient client = new SpotClientImpl();\n\n        Proxy proxyConn = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\",  proxyPort));\n        Authenticator auth = new Authenticator() {\n            public Request authenticate(Route route, Response response) throws IOException {\n                // Reactive Authentication\n                if (response.request().header(\"Proxy-Authorization\") != null) {\n                    return null; // Give up, we've already failed to authenticate.\n                }\n              \n                String credential = Credentials.basic(\"username\", \"password\");\n                return response.request().newBuilder().header(\"Proxy-Authorization\", credential).build();\n               \n            }\n        };\n\n        ProxyAuth proxy = new ProxyAuth(proxyConn, auth);\n\n        client.setProxy(proxy);\n        System.out.println(client.createMarket().time());\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Integer proxyPort = 3128;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Integer", "name": "proxyPort = 3128", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/market/BookTicker.java.BookTicker", "name": "BookTicker", "file_path": "src/test/java/examples/spot/market/BookTicker.java", "superclasses": "", "methods": ["[]BookTicker()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/BookTicker.java.BookTicker.[]BookTicker()", "src/test/java/examples/spot/market/BookTicker.java.BookTicker.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class BookTicker {\n    private BookTicker() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        String result = client.createMarket().bookTicker(parameters);\n        System.out.println(result);\n        parameters.clear();\n\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BTCUSDT\");\n        symbols.add(\"BNBUSDT\");\n        parameters.put(\"symbols\", symbols);\n        result = client.createMarket().bookTicker(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/market/UIKlines.java.UIKlines", "name": "UIKlines", "file_path": "src/test/java/examples/spot/market/UIKlines.java", "superclasses": "", "methods": ["[]UIKlines()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/UIKlines.java.UIKlines.[]UIKlines()", "src/test/java/examples/spot/market/UIKlines.java.UIKlines.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class UIKlines {\n    private UIKlines() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"interval\", \"1m\");\n\n        String result = client.createMarket().uiKlines(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/market/Trades.java.Trades", "name": "Trades", "file_path": "src/test/java/examples/spot/market/Trades.java", "superclasses": "", "methods": ["[]Trades()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/Trades.java.Trades.[]Trades()", "src/test/java/examples/spot/market/Trades.java.Trades.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Trades {\n    private Trades() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl();\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        String result = client.createMarket().trades(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/market/Ticker24H.java.Ticker24H", "name": "Ticker24H", "file_path": "src/test/java/examples/spot/market/Ticker24H.java", "superclasses": "", "methods": ["[]Ticker24H()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/Ticker24H.java.Ticker24H.[]Ticker24H()", "src/test/java/examples/spot/market/Ticker24H.java.Ticker24H.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Ticker24H {\n    private Ticker24H() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"type\", \"MINI\");\n        String result = client.createMarket().ticker24H(parameters);\n        System.out.println(result);\n        parameters.clear();\n\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BTCUSDT\");\n        symbols.add(\"BNBUSDT\");\n        parameters.put(\"symbols\", symbols);\n        result = client.createMarket().ticker24H(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/market/HistoricalTrades.java.HistoricalTrades", "name": "HistoricalTrades", "file_path": "src/test/java/examples/spot/market/HistoricalTrades.java", "superclasses": "", "methods": ["[]HistoricalTrades()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/HistoricalTrades.java.HistoricalTrades.[]HistoricalTrades()", "src/test/java/examples/spot/market/HistoricalTrades.java.HistoricalTrades.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class HistoricalTrades {\n    private HistoricalTrades() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"limit\", \"10\");\n        String result = client.createMarket().historicalTrades(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/market/AveragePrice.java.AveragePrice", "name": "AveragePrice", "file_path": "src/test/java/examples/spot/market/AveragePrice.java", "superclasses": "", "methods": ["[]AveragePrice()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/AveragePrice.java.AveragePrice.[]AveragePrice()", "src/test/java/examples/spot/market/AveragePrice.java.AveragePrice.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AveragePrice {\n    private AveragePrice() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl();\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        String result = client.createMarket().averagePrice(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/market/Depth.java.Depth", "name": "Depth", "file_path": "src/test/java/examples/spot/market/Depth.java", "superclasses": "", "methods": ["[]Depth()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/Depth.java.Depth.[]Depth()", "src/test/java/examples/spot/market/Depth.java.Depth.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Depth {\n    private Depth() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        String result = client.createMarket().depth(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/market/Ping.java.Ping", "name": "Ping", "file_path": "src/test/java/examples/spot/market/Ping.java", "superclasses": "", "methods": ["[]Ping()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/Ping.java.Ping.[]Ping()", "src/test/java/examples/spot/market/Ping.java.Ping.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Ping {\n    private Ping() {\n    }\n\n    public static void main(String[] args) {\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createMarket().ping();\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/market/AggTrades.java.AggTrades", "name": "AggTrades", "file_path": "src/test/java/examples/spot/market/AggTrades.java", "superclasses": "", "methods": ["[]AggTrades()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/AggTrades.java.AggTrades.[]AggTrades()", "src/test/java/examples/spot/market/AggTrades.java.AggTrades.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AggTrades {\n    private AggTrades() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        String result = client.createMarket().aggTrades(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/market/TradingDayTicker.java.TradingDayTicker", "name": "TradingDayTicker", "file_path": "src/test/java/examples/spot/market/TradingDayTicker.java", "superclasses": "", "methods": ["[]TradingDayTicker()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/TradingDayTicker.java.TradingDayTicker.[]TradingDayTicker()", "src/test/java/examples/spot/market/TradingDayTicker.java.TradingDayTicker.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TradingDayTicker {\n    private TradingDayTicker() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        Market market = client.createMarket();\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"type\", \"MINI\");\n        String result = market.tradingDayTicker(parameters);\n        System.out.println(result);\n        parameters.clear();\n\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BTCUSDT\");\n        symbols.add(\"BNBUSDT\");\n        parameters.put(\"symbols\", symbols);\n        result = market.tradingDayTicker(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/market/TickerSymbol.java.TickerSymbol", "name": "TickerSymbol", "file_path": "src/test/java/examples/spot/market/TickerSymbol.java", "superclasses": "", "methods": ["[]TickerSymbol()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/TickerSymbol.java.TickerSymbol.[]TickerSymbol()", "src/test/java/examples/spot/market/TickerSymbol.java.TickerSymbol.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TickerSymbol {\n    private TickerSymbol() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        String result = client.createMarket().tickerSymbol(parameters);\n        System.out.println(result);\n        parameters.clear();\n\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BTCUSDT\");\n        symbols.add(\"BNBUSDT\");\n        parameters.put(\"symbols\", symbols);\n        result = client.createMarket().tickerSymbol(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/market/Ticker.java.Ticker", "name": "Ticker", "file_path": "src/test/java/examples/spot/market/Ticker.java", "superclasses": "", "methods": ["[]Ticker()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/Ticker.java.Ticker.[]Ticker()", "src/test/java/examples/spot/market/Ticker.java.Ticker.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Ticker {\n    private Ticker() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        Market market = client.createMarket();\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"type\", \"MINI\");\n        String result = market.ticker(parameters);\n        System.out.println(result);\n        parameters.clear();\n\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BTCUSDT\");\n        symbols.add(\"BNBUSDT\");\n        parameters.put(\"symbols\", symbols);\n        result = market.ticker(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/market/ServerTime.java.ServerTime", "name": "ServerTime", "file_path": "src/test/java/examples/spot/market/ServerTime.java", "superclasses": "", "methods": ["[]ServerTime()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/ServerTime.java.ServerTime.[]ServerTime()", "src/test/java/examples/spot/market/ServerTime.java.ServerTime.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ServerTime {\n    private ServerTime() {\n    }\n\n    public static void main(String[] args) {\n\n        SpotClient client = new SpotClientImpl();\n        String result = client.createMarket().time();\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/market/Klines.java.Klines", "name": "Klines", "file_path": "src/test/java/examples/spot/market/Klines.java", "superclasses": "", "methods": ["[]Klines()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/Klines.java.Klines.[]Klines()", "src/test/java/examples/spot/market/Klines.java.Klines.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Klines {\n    private Klines() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"interval\", \"1m\");\n\n        String result = client.createMarket().klines(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/market/ExchangeInfo.java.ExchangeInfo", "name": "ExchangeInfo", "file_path": "src/test/java/examples/spot/market/ExchangeInfo.java", "superclasses": "", "methods": ["[]ExchangeInfo()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/market/ExchangeInfo.java.ExchangeInfo.[]ExchangeInfo()", "src/test/java/examples/spot/market/ExchangeInfo.java.ExchangeInfo.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ExchangeInfo {\n    private ExchangeInfo() {\n    }\n\n    public static void main(String[] args) {\n        SpotClient client = new SpotClientImpl();\n        Market market = client.createMarket();\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        String result = market.exchangeInfo(parameters);\n        System.out.println(result);\n\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        result = market.exchangeInfo(parameters);\n        System.out.println(result);\n        parameters.clear();\n\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BTCUSDT\");\n        symbols.add(\"BNBUSDT\");\n        parameters.put(\"symbols\", symbols);\n        result = market.exchangeInfo(parameters);\n        System.out.println(result);\n        parameters.clear();\n\n        ArrayList<String> permissions = new ArrayList<>();\n        permissions.add(\"SPOT\");\n        permissions.add(\"MARGIN\");\n        parameters.put(\"permissions\", permissions);\n        result = market.exchangeInfo(parameters);\n        System.out.println(result);\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/convert/AssetQuantityPrecision.java.AssetQuantityPrecision", "name": "AssetQuantityPrecision", "file_path": "src/test/java/examples/spot/convert/AssetQuantityPrecision.java", "superclasses": "", "methods": ["[]AssetQuantityPrecision()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/convert/AssetQuantityPrecision.java.AssetQuantityPrecision.[]AssetQuantityPrecision()", "src/test/java/examples/spot/convert/AssetQuantityPrecision.java.AssetQuantityPrecision.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AssetQuantityPrecision {\n    private AssetQuantityPrecision() {\n    }\n\n    public static void main(String[] args) {\n        \n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createConvert().assetQuantityPrecision(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/convert/QuoteInquiry.java.QuoteInquiry", "name": "QuoteInquiry", "file_path": "src/test/java/examples/spot/convert/QuoteInquiry.java", "superclasses": "", "methods": ["[]QuoteInquiry()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/convert/QuoteInquiry.java.QuoteInquiry.[]QuoteInquiry()", "src/test/java/examples/spot/convert/QuoteInquiry.java.QuoteInquiry.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class QuoteInquiry {\n    private QuoteInquiry() {\n    }\n    private static final double amount = 0.001;\n\n    public static void main(String[] args) {\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        parameters.put(\"fromAsset\", \"BTC\");\n        parameters.put(\"toAsset\", \"USDT\");\n        parameters.put(\"fromAmount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createConvert().quoteInquiry(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.001;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.001", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/convert/TradeFlow.java.TradeFlow", "name": "TradeFlow", "file_path": "src/test/java/examples/spot/convert/TradeFlow.java", "superclasses": "", "methods": ["[]TradeFlow()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/convert/TradeFlow.java.TradeFlow.[]TradeFlow()", "src/test/java/examples/spot/convert/TradeFlow.java.TradeFlow.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TradeFlow {\n    private TradeFlow() {\n    }\n    private static final long startTime = 1234567L;\n    private static final long endTime = 12345678L;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createConvert().tradeFlow(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long startTime = 1234567L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "startTime = 1234567L", "syntax_pass": true}, {"attribute_expression": "private static final long endTime = 12345678L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "endTime = 12345678L", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/convert/AcceptQuote.java.AcceptQuote", "name": "AcceptQuote", "file_path": "src/test/java/examples/spot/convert/AcceptQuote.java", "superclasses": "", "methods": ["[]AcceptQuote()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/convert/AcceptQuote.java.AcceptQuote.[]AcceptQuote()", "src/test/java/examples/spot/convert/AcceptQuote.java.AcceptQuote.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AcceptQuote {\n    \n    private AcceptQuote() {\n    }\n\n    public static void main(String[] args) {\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        parameters.put(\"quoteId\", \"12415572564\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createConvert().acceptQuote(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/convert/OrderStatus.java.OrderStatus", "name": "OrderStatus", "file_path": "src/test/java/examples/spot/convert/OrderStatus.java", "superclasses": "", "methods": ["[]OrderStatus()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/convert/OrderStatus.java.OrderStatus.[]OrderStatus()", "src/test/java/examples/spot/convert/OrderStatus.java.OrderStatus.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class OrderStatus {\n    private OrderStatus() {\n    }\n\n    public static void main(String[] args) {\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        parameters.put(\"quoteId\", \"12415572564\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createConvert().orderStatus(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/convert/ExchangeInfo.java.ExchangeInfo", "name": "ExchangeInfo", "file_path": "src/test/java/examples/spot/convert/ExchangeInfo.java", "superclasses": "", "methods": ["[]ExchangeInfo()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/convert/ExchangeInfo.java.ExchangeInfo.[]ExchangeInfo()", "src/test/java/examples/spot/convert/ExchangeInfo.java.ExchangeInfo.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ExchangeInfo {\n    private ExchangeInfo() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        parameters.put(\"fromAsset\", \"BTC\");\n        parameters.put(\"toAsset\", \"USDT\");\n\n        SpotClient client = new SpotClientImpl();\n        String result = client.createConvert().exchangeInfo(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/futures/FuturesTransferHistory.java.FuturesTransferHistory", "name": "FuturesTransferHistory", "file_path": "src/test/java/examples/spot/futures/FuturesTransferHistory.java", "superclasses": "", "methods": ["[]FuturesTransferHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/futures/FuturesTransferHistory.java.FuturesTransferHistory.[]FuturesTransferHistory()", "src/test/java/examples/spot/futures/FuturesTransferHistory.java.FuturesTransferHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FuturesTransferHistory {\n    private FuturesTransferHistory() {\n    }\n    private static final long startTime = 0L;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"startTime\", startTime);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createFutures().futuresTransferHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long startTime = 0L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "startTime = 0L", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/futures/FuturesOrderBookHistory.java.FuturesOrderBookHistory", "name": "FuturesOrderBookHistory", "file_path": "src/test/java/examples/spot/futures/FuturesOrderBookHistory.java", "superclasses": "", "methods": ["[]FuturesOrderBookHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/futures/FuturesOrderBookHistory.java.FuturesOrderBookHistory.[]FuturesOrderBookHistory()", "src/test/java/examples/spot/futures/FuturesOrderBookHistory.java.FuturesOrderBookHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FuturesOrderBookHistory {\n    private FuturesOrderBookHistory() {\n    }\n    private static final Long startTime = 17024585109000L;\n    private static final Long endTime = 1702458517000L;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"dataType\", \"T_DEPTH\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createFutures().futuresOrderBookHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final Long startTime = 17024585109000L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Long", "name": "startTime = 17024585109000L", "syntax_pass": true}, {"attribute_expression": "private static final Long endTime = 1702458517000L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Long", "name": "endTime = 1702458517000L", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/futures/FuturesTransfer.java.FuturesTransfer", "name": "FuturesTransfer", "file_path": "src/test/java/examples/spot/futures/FuturesTransfer.java", "superclasses": "", "methods": ["[]FuturesTransfer()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/futures/FuturesTransfer.java.FuturesTransfer.[]FuturesTransfer()", "src/test/java/examples/spot/futures/FuturesTransfer.java.FuturesTransfer.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FuturesTransfer {\n    private FuturesTransfer() {\n    }\n    private static final double amount = 0.01;\n    private static final int type = 2;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"type\", type);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createFutures().futuresTransfer(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}, {"attribute_expression": "private static final int type = 2;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "type = 2", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/giftcard/RedeemCode.java.RedeemCode", "name": "RedeemCode", "file_path": "src/test/java/examples/spot/giftcard/RedeemCode.java", "superclasses": "", "methods": ["[]RedeemCode()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/giftcard/RedeemCode.java.RedeemCode.[]RedeemCode()", "src/test/java/examples/spot/giftcard/RedeemCode.java.RedeemCode.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RedeemCode {\n    private RedeemCode() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"code\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createGiftCard().redeemCode(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/giftcard/TokensLimit.java.TokensLimit", "name": "TokensLimit", "file_path": "src/test/java/examples/spot/giftcard/TokensLimit.java", "superclasses": "", "methods": ["[]TokensLimit()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/giftcard/TokensLimit.java.TokensLimit.[]TokensLimit()", "src/test/java/examples/spot/giftcard/TokensLimit.java.TokensLimit.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TokensLimit {\n    private TokensLimit() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"baseToken\", \"BUSD\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createGiftCard().tokensLimit(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/giftcard/Verify.java.Verify", "name": "Verify", "file_path": "src/test/java/examples/spot/giftcard/Verify.java", "superclasses": "", "methods": ["[]Verify()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/giftcard/Verify.java.Verify.[]Verify()", "src/test/java/examples/spot/giftcard/Verify.java.Verify.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Verify {\n    private Verify() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"referenceNo\", \"\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createGiftCard().verify(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/giftcard/CreateDualTokensCode.java.CreateDualTokensCode", "name": "CreateDualTokensCode", "file_path": "src/test/java/examples/spot/giftcard/CreateDualTokensCode.java", "superclasses": "", "methods": ["[]CreateDualTokensCode()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/giftcard/CreateDualTokensCode.java.CreateDualTokensCode.[]CreateDualTokensCode()", "src/test/java/examples/spot/giftcard/CreateDualTokensCode.java.CreateDualTokensCode.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CreateDualTokensCode {\n    private CreateDualTokensCode() {\n    }\n    private static final double baseTokenAmount = 1.002;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"baseToken\", \"BUSD\");\n        parameters.put(\"faceToken\", \"BNB\");\n        parameters.put(\"baseTokenAmount\", baseTokenAmount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createGiftCard().createDualTokensCode(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double baseTokenAmount = 1.002;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "baseTokenAmount = 1.002", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/giftcard/RsaPublicKey.java.RsaPublicKey", "name": "RsaPublicKey", "file_path": "src/test/java/examples/spot/giftcard/RsaPublicKey.java", "superclasses": "", "methods": ["[]RsaPublicKey()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/giftcard/RsaPublicKey.java.RsaPublicKey.[]RsaPublicKey()", "src/test/java/examples/spot/giftcard/RsaPublicKey.java.RsaPublicKey.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RsaPublicKey {\n    private RsaPublicKey() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createGiftCard().rsaPublicKey(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/giftcard/CreateCode.java.CreateCode", "name": "CreateCode", "file_path": "src/test/java/examples/spot/giftcard/CreateCode.java", "superclasses": "", "methods": ["[]CreateCode()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/giftcard/CreateCode.java.CreateCode.[]CreateCode()", "src/test/java/examples/spot/giftcard/CreateCode.java.CreateCode.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CreateCode {\n    private CreateCode() {\n    }\n    private static final double amount = 0.01;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"token\", \"\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createGiftCard().createCode(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleRedemptionRecord.java.FlexibleRedemptionRecord", "name": "FlexibleRedemptionRecord", "file_path": "src/test/java/examples/spot/simpleearn/FlexibleRedemptionRecord.java", "superclasses": "", "methods": ["[]FlexibleRedemptionRecord()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/FlexibleRedemptionRecord.java.FlexibleRedemptionRecord.[]FlexibleRedemptionRecord()", "src/test/java/examples/spot/simpleearn/FlexibleRedemptionRecord.java.FlexibleRedemptionRecord.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleRedemptionRecord {\n    private FlexibleRedemptionRecord() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().flexibleRedemptionRecord(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleProductPosition.java.FlexibleProductPosition", "name": "FlexibleProductPosition", "file_path": "src/test/java/examples/spot/simpleearn/FlexibleProductPosition.java", "superclasses": "", "methods": ["[]FlexibleProductPosition()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/FlexibleProductPosition.java.FlexibleProductPosition.[]FlexibleProductPosition()", "src/test/java/examples/spot/simpleearn/FlexibleProductPosition.java.FlexibleProductPosition.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleProductPosition {\n    private FlexibleProductPosition() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().flexibleProductPosition(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/LockedSubscriptionPreview.java.LockedSubscriptionPreview", "name": "LockedSubscriptionPreview", "file_path": "src/test/java/examples/spot/simpleearn/LockedSubscriptionPreview.java", "superclasses": "", "methods": ["[]LockedSubscriptionPreview()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/LockedSubscriptionPreview.java.LockedSubscriptionPreview.[]LockedSubscriptionPreview()", "src/test/java/examples/spot/simpleearn/LockedSubscriptionPreview.java.LockedSubscriptionPreview.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LockedSubscriptionPreview {\n    private LockedSubscriptionPreview() {\n    }\n    \n    private static final double amount = 1.1;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"USDT001\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().lockedSubscriptionPreview(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 1.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 1.1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/simpleearn/RateHistory.java.RateHistory", "name": "RateHistory", "file_path": "src/test/java/examples/spot/simpleearn/RateHistory.java", "superclasses": "", "methods": ["[]RateHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/RateHistory.java.RateHistory.[]RateHistory()", "src/test/java/examples/spot/simpleearn/RateHistory.java.RateHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RateHistory {\n    private RateHistory() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().rateHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/RedeemFlexibleProduct.java.RedeemFlexibleProduct", "name": "RedeemFlexibleProduct", "file_path": "src/test/java/examples/spot/simpleearn/RedeemFlexibleProduct.java", "superclasses": "", "methods": ["[]RedeemFlexibleProduct()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/RedeemFlexibleProduct.java.RedeemFlexibleProduct.[]RedeemFlexibleProduct()", "src/test/java/examples/spot/simpleearn/RedeemFlexibleProduct.java.RedeemFlexibleProduct.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RedeemFlexibleProduct {\n    private RedeemFlexibleProduct() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40604\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().redeemFlexibleProduct(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/LockedSubscriptionRecord.java.LockedSubscriptionRecord", "name": "LockedSubscriptionRecord", "file_path": "src/test/java/examples/spot/simpleearn/LockedSubscriptionRecord.java", "superclasses": "", "methods": ["[]LockedSubscriptionRecord()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/LockedSubscriptionRecord.java.LockedSubscriptionRecord.[]LockedSubscriptionRecord()", "src/test/java/examples/spot/simpleearn/LockedSubscriptionRecord.java.LockedSubscriptionRecord.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LockedSubscriptionRecord {\n    private LockedSubscriptionRecord() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().lockedSubscriptionRecord(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/CollateralRecord.java.CollateralRecord", "name": "CollateralRecord", "file_path": "src/test/java/examples/spot/simpleearn/CollateralRecord.java", "superclasses": "", "methods": ["[]CollateralRecord()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/CollateralRecord.java.CollateralRecord.[]CollateralRecord()", "src/test/java/examples/spot/simpleearn/CollateralRecord.java.CollateralRecord.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CollateralRecord {\n    private CollateralRecord() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().collateralRecord(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionRecord.java.FlexibleSubscriptionRecord", "name": "FlexibleSubscriptionRecord", "file_path": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionRecord.java", "superclasses": "", "methods": ["[]FlexibleSubscriptionRecord()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/FlexibleSubscriptionRecord.java.FlexibleSubscriptionRecord.[]FlexibleSubscriptionRecord()", "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionRecord.java.FlexibleSubscriptionRecord.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleSubscriptionRecord {\n    private FlexibleSubscriptionRecord() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().flexibleSubscriptionRecord(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionPreview.java.FlexibleSubscriptionPreview", "name": "FlexibleSubscriptionPreview", "file_path": "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionPreview.java", "superclasses": "", "methods": ["[]FlexibleSubscriptionPreview()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/FlexibleSubscriptionPreview.java.FlexibleSubscriptionPreview.[]FlexibleSubscriptionPreview()", "src/test/java/examples/spot/simpleearn/FlexibleSubscriptionPreview.java.FlexibleSubscriptionPreview.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleSubscriptionPreview {\n    private FlexibleSubscriptionPreview() {\n    }\n    \n    private static final double amount = 1.1;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().flexibleSubscriptionPreview(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 1.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 1.1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/simpleearn/LockedRewardsHistory.java.LockedRewardsHistory", "name": "LockedRewardsHistory", "file_path": "src/test/java/examples/spot/simpleearn/LockedRewardsHistory.java", "superclasses": "", "methods": ["[]LockedRewardsHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/LockedRewardsHistory.java.LockedRewardsHistory.[]LockedRewardsHistory()", "src/test/java/examples/spot/simpleearn/LockedRewardsHistory.java.LockedRewardsHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LockedRewardsHistory {\n    private LockedRewardsHistory() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().lockedRewardsHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/LockedRedemptionRecord.java.LockedRedemptionRecord", "name": "LockedRedemptionRecord", "file_path": "src/test/java/examples/spot/simpleearn/LockedRedemptionRecord.java", "superclasses": "", "methods": ["[]LockedRedemptionRecord()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/LockedRedemptionRecord.java.LockedRedemptionRecord.[]LockedRedemptionRecord()", "src/test/java/examples/spot/simpleearn/LockedRedemptionRecord.java.LockedRedemptionRecord.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LockedRedemptionRecord {\n    private LockedRedemptionRecord() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().lockedRedemptionRecord(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/LockedProductPosition.java.LockedProductPosition", "name": "LockedProductPosition", "file_path": "src/test/java/examples/spot/simpleearn/LockedProductPosition.java", "superclasses": "", "methods": ["[]LockedProductPosition()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/LockedProductPosition.java.LockedProductPosition.[]LockedProductPosition()", "src/test/java/examples/spot/simpleearn/LockedProductPosition.java.LockedProductPosition.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LockedProductPosition {\n    private LockedProductPosition() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().lockedProductPosition(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/SimpleAccount.java.SimpleAccount", "name": "SimpleAccount", "file_path": "src/test/java/examples/spot/simpleearn/SimpleAccount.java", "superclasses": "", "methods": ["[]SimpleAccount()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/SimpleAccount.java.SimpleAccount.[]SimpleAccount()", "src/test/java/examples/spot/simpleearn/SimpleAccount.java.SimpleAccount.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SimpleAccount {\n    private SimpleAccount() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().simpleAccount(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/SubscribeLockedProduct.java.SubscribeLockedProduct", "name": "SubscribeLockedProduct", "file_path": "src/test/java/examples/spot/simpleearn/SubscribeLockedProduct.java", "superclasses": "", "methods": ["[]SubscribeLockedProduct()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/SubscribeLockedProduct.java.SubscribeLockedProduct.[]SubscribeLockedProduct()", "src/test/java/examples/spot/simpleearn/SubscribeLockedProduct.java.SubscribeLockedProduct.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SubscribeLockedProduct {\n    private SubscribeLockedProduct() {\n    }\n    \n    private static final double amount = 1.1;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"40607\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().subscribeLockedProduct(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 1.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 1.1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/simpleearn/SetFlexibleAutoSubscribe.java.SetFlexibleAutoSubscribe", "name": "SetFlexibleAutoSubscribe", "file_path": "src/test/java/examples/spot/simpleearn/SetFlexibleAutoSubscribe.java", "superclasses": "", "methods": ["[]SetFlexibleAutoSubscribe()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/SetFlexibleAutoSubscribe.java.SetFlexibleAutoSubscribe.[]SetFlexibleAutoSubscribe()", "src/test/java/examples/spot/simpleearn/SetFlexibleAutoSubscribe.java.SetFlexibleAutoSubscribe.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SetFlexibleAutoSubscribe {\n    private SetFlexibleAutoSubscribe() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"autoSubscribe\", true);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().setFlexibleAutoSubscribe(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/LockedPersonalLeftQuota.java.LockedPersonalLeftQuota", "name": "LockedPersonalLeftQuota", "file_path": "src/test/java/examples/spot/simpleearn/LockedPersonalLeftQuota.java", "superclasses": "", "methods": ["[]LockedPersonalLeftQuota()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/LockedPersonalLeftQuota.java.LockedPersonalLeftQuota.[]LockedPersonalLeftQuota()", "src/test/java/examples/spot/simpleearn/LockedPersonalLeftQuota.java.LockedPersonalLeftQuota.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LockedPersonalLeftQuota {\n    private LockedPersonalLeftQuota() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"USDT001\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().lockedPersonalLeftQuota(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleProductList.java.FlexibleProductList", "name": "FlexibleProductList", "file_path": "src/test/java/examples/spot/simpleearn/FlexibleProductList.java", "superclasses": "", "methods": ["[]FlexibleProductList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/FlexibleProductList.java.FlexibleProductList.[]FlexibleProductList()", "src/test/java/examples/spot/simpleearn/FlexibleProductList.java.FlexibleProductList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleProductList {\n    private FlexibleProductList() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().flexibleProductList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/FlexibleRewardsHistory.java.FlexibleRewardsHistory", "name": "FlexibleRewardsHistory", "file_path": "src/test/java/examples/spot/simpleearn/FlexibleRewardsHistory.java", "superclasses": "", "methods": ["[]FlexibleRewardsHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/FlexibleRewardsHistory.java.FlexibleRewardsHistory.[]FlexibleRewardsHistory()", "src/test/java/examples/spot/simpleearn/FlexibleRewardsHistory.java.FlexibleRewardsHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexibleRewardsHistory {\n    private FlexibleRewardsHistory() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"BONUS\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().flexibleRewardsHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/FlexiblePersonalLeftQuota.java.FlexiblePersonalLeftQuota", "name": "FlexiblePersonalLeftQuota", "file_path": "src/test/java/examples/spot/simpleearn/FlexiblePersonalLeftQuota.java", "superclasses": "", "methods": ["[]FlexiblePersonalLeftQuota()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/FlexiblePersonalLeftQuota.java.FlexiblePersonalLeftQuota.[]FlexiblePersonalLeftQuota()", "src/test/java/examples/spot/simpleearn/FlexiblePersonalLeftQuota.java.FlexiblePersonalLeftQuota.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class FlexiblePersonalLeftQuota {\n    private FlexiblePersonalLeftQuota() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().flexiblePersonalLeftQuota(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/SubscribeFlexibleProduct.java.SubscribeFlexibleProduct", "name": "SubscribeFlexibleProduct", "file_path": "src/test/java/examples/spot/simpleearn/SubscribeFlexibleProduct.java", "superclasses": "", "methods": ["[]SubscribeFlexibleProduct()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/SubscribeFlexibleProduct.java.SubscribeFlexibleProduct.[]SubscribeFlexibleProduct()", "src/test/java/examples/spot/simpleearn/SubscribeFlexibleProduct.java.SubscribeFlexibleProduct.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SubscribeFlexibleProduct {\n    private SubscribeFlexibleProduct() {\n    }\n    \n    private static final double amount = 1.1;\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().subscribeFlexibleProduct(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 1.1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 1.1", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/simpleearn/LockedProductList.java.LockedProductList", "name": "LockedProductList", "file_path": "src/test/java/examples/spot/simpleearn/LockedProductList.java", "superclasses": "", "methods": ["[]LockedProductList()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/LockedProductList.java.LockedProductList.[]LockedProductList()", "src/test/java/examples/spot/simpleearn/LockedProductList.java.LockedProductList.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class LockedProductList {\n    private LockedProductList() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().lockedProductList(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/RedeemLockedProduct.java.RedeemLockedProduct", "name": "RedeemLockedProduct", "file_path": "src/test/java/examples/spot/simpleearn/RedeemLockedProduct.java", "superclasses": "", "methods": ["[]RedeemLockedProduct()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/RedeemLockedProduct.java.RedeemLockedProduct.[]RedeemLockedProduct()", "src/test/java/examples/spot/simpleearn/RedeemLockedProduct.java.RedeemLockedProduct.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RedeemLockedProduct {\n    private RedeemLockedProduct() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"positionId\", \"40604\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().redeemLockedProduct(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/simpleearn/SetLockedAutoSubscribe.java.SetLockedAutoSubscribe", "name": "SetLockedAutoSubscribe", "file_path": "src/test/java/examples/spot/simpleearn/SetLockedAutoSubscribe.java", "superclasses": "", "methods": ["[]SetLockedAutoSubscribe()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/simpleearn/SetLockedAutoSubscribe.java.SetLockedAutoSubscribe.[]SetLockedAutoSubscribe()", "src/test/java/examples/spot/simpleearn/SetLockedAutoSubscribe.java.SetLockedAutoSubscribe.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SetLockedAutoSubscribe {\n    private SetLockedAutoSubscribe() {\n    }\n    \n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"positionId\", \"BUSD001\");\n        parameters.put(\"autoSubscribe\", true);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createSimpleEarn().setLockedAutoSubscribe(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/c2c/ListUserOrderHistory.java.ListUserOrderHistory", "name": "ListUserOrderHistory", "file_path": "src/test/java/examples/spot/c2c/ListUserOrderHistory.java", "superclasses": "", "methods": ["[]ListUserOrderHistory()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/c2c/ListUserOrderHistory.java.ListUserOrderHistory.[]ListUserOrderHistory()", "src/test/java/examples/spot/c2c/ListUserOrderHistory.java.ListUserOrderHistory.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ListUserOrderHistory {\n    private ListUserOrderHistory() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tradeType\", \"BUY\");\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createC2C().listUserOrderHistory(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/blvt/BlvtInfo.java.BlvtInfo", "name": "BlvtInfo", "file_path": "src/test/java/examples/spot/blvt/BlvtInfo.java", "superclasses": "", "methods": ["[]BlvtInfo()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/blvt/BlvtInfo.java.BlvtInfo.[]BlvtInfo()", "src/test/java/examples/spot/blvt/BlvtInfo.java.BlvtInfo.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class BlvtInfo {\n    private BlvtInfo() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createBlvt().blvtInfo(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/blvt/Subscribe.java.Subscribe", "name": "Subscribe", "file_path": "src/test/java/examples/spot/blvt/Subscribe.java", "superclasses": "", "methods": ["[]Subscribe()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/blvt/Subscribe.java.Subscribe.[]Subscribe()", "src/test/java/examples/spot/blvt/Subscribe.java.Subscribe.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Subscribe {\n    private Subscribe() {\n    }\n    private static final double cost = 0.01;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tokenName\", \"BTCDOWN\");\n        parameters.put(\"cost\", cost);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createBlvt().subscribe(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double cost = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "cost = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/blvt/UserLimit.java.UserLimit", "name": "UserLimit", "file_path": "src/test/java/examples/spot/blvt/UserLimit.java", "superclasses": "", "methods": ["[]UserLimit()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/blvt/UserLimit.java.UserLimit.[]UserLimit()", "src/test/java/examples/spot/blvt/UserLimit.java.UserLimit.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class UserLimit {\n    private UserLimit() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createBlvt().userLimit(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/blvt/SubscriptionRecord.java.SubscriptionRecord", "name": "SubscriptionRecord", "file_path": "src/test/java/examples/spot/blvt/SubscriptionRecord.java", "superclasses": "", "methods": ["[]SubscriptionRecord()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/blvt/SubscriptionRecord.java.SubscriptionRecord.[]SubscriptionRecord()", "src/test/java/examples/spot/blvt/SubscriptionRecord.java.SubscriptionRecord.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SubscriptionRecord {\n    private SubscriptionRecord() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createBlvt().subscriptionRecord(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/spot/blvt/Redeem.java.Redeem", "name": "Redeem", "file_path": "src/test/java/examples/spot/blvt/Redeem.java", "superclasses": "", "methods": ["[]Redeem()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/blvt/Redeem.java.Redeem.[]Redeem()", "src/test/java/examples/spot/blvt/Redeem.java.Redeem.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Redeem {\n    private Redeem() {\n    }\n    private static final double amount = 0.01;\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tokenName\", \"BTCDOWN\");\n        parameters.put(\"amount\", amount);\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createBlvt().redeem(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final double amount = 0.01;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "double", "name": "amount = 0.01", "syntax_pass": true}]}, {"uris": "src/test/java/examples/spot/blvt/RedeemRecord.java.RedeemRecord", "name": "RedeemRecord", "file_path": "src/test/java/examples/spot/blvt/RedeemRecord.java", "superclasses": "", "methods": ["[]RedeemRecord()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/spot/blvt/RedeemRecord.java.RedeemRecord.[]RedeemRecord()", "src/test/java/examples/spot/blvt/RedeemRecord.java.RedeemRecord.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RedeemRecord {\n    private RedeemRecord() {\n    }\n\n    public static void main(String[] args) {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        SpotClient client = new SpotClientImpl(PrivateConfig.API_KEY, PrivateConfig.SECRET_KEY);\n        String result = client.createBlvt().redeemRecord(parameters);\n        System.out.println(result);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/websocketstream/BookTicker.java.BookTicker", "name": "BookTicker", "file_path": "src/test/java/examples/websocketstream/BookTicker.java", "superclasses": "", "methods": ["[]BookTicker()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/BookTicker.java.BookTicker.[]BookTicker()", "src/test/java/examples/websocketstream/BookTicker.java.BookTicker.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class BookTicker {\n    private BookTicker() {\n    }\n\n    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.bookTicker(\"btcusdt\", ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/websocketstream/AllRollingWindowTicker.java.AllRollingWindowTicker", "name": "AllRollingWindowTicker", "file_path": "src/test/java/examples/websocketstream/AllRollingWindowTicker.java", "superclasses": "", "methods": ["[]AllRollingWindowTicker()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/AllRollingWindowTicker.java.AllRollingWindowTicker.[]AllRollingWindowTicker()", "src/test/java/examples/websocketstream/AllRollingWindowTicker.java.AllRollingWindowTicker.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AllRollingWindowTicker {\n    private AllRollingWindowTicker() {\n    }\n\n    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.allRollingWindowTicker(\"1h\", ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/websocketstream/SymbolTicker.java.SymbolTicker", "name": "SymbolTicker", "file_path": "src/test/java/examples/websocketstream/SymbolTicker.java", "superclasses": "", "methods": ["[]SymbolTicker()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/SymbolTicker.java.SymbolTicker.[]SymbolTicker()", "src/test/java/examples/websocketstream/SymbolTicker.java.SymbolTicker.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class SymbolTicker {\n    private SymbolTicker() {\n    }\n\n    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.symbolTicker(\"btcusdt\", ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/websocketstream/MiniTickerStream.java.MiniTickerStream", "name": "MiniTickerStream", "file_path": "src/test/java/examples/websocketstream/MiniTickerStream.java", "superclasses": "", "methods": ["[]MiniTickerStream()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/MiniTickerStream.java.MiniTickerStream.[]MiniTickerStream()", "src/test/java/examples/websocketstream/MiniTickerStream.java.MiniTickerStream.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class MiniTickerStream {\n    private MiniTickerStream() {\n    }\n\n    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.miniTickerStream(\"btcusdt\", ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/websocketstream/UserStream.java.UserStream", "name": "UserStream", "file_path": "src/test/java/examples/websocketstream/UserStream.java", "superclasses": "", "methods": ["[]UserStream()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/UserStream.java.UserStream.[]UserStream()", "src/test/java/examples/websocketstream/UserStream.java.UserStream.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class UserStream {\n    private UserStream() {\n    }\n\n    public static void main(String[] args) {\n        WebSocketStreamClient wsClient = new WebSocketStreamClientImpl(DefaultUrls.TESTNET_WS_URL);\n        SpotClientImpl spotClient = new SpotClientImpl(PrivateConfig.TESTNET_API_KEY, PrivateConfig.TESTNET_SECRET_KEY, DefaultUrls.TESTNET_URL);\n        JSONObject obj = new JSONObject(spotClient.createUserData().createListenKey());\n        String listenKey = obj.getString(\"listenKey\");\n        System.out.println(\"listenKey:\" + listenKey);\n        wsClient.listenUserStream(listenKey, ((event) -> {\n            System.out.println(event);\n            wsClient.closeAllConnections();\n        }));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/websocketstream/PartialDepthStream.java.PartialDepthStream", "name": "PartialDepthStream", "file_path": "src/test/java/examples/websocketstream/PartialDepthStream.java", "superclasses": "", "methods": ["[]PartialDepthStream()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/PartialDepthStream.java.PartialDepthStream.[]PartialDepthStream()", "src/test/java/examples/websocketstream/PartialDepthStream.java.PartialDepthStream.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class PartialDepthStream {\n    private PartialDepthStream() {\n    }\n    private static final int speed = 100;\n    private static final int levels = 5;\n\n    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.partialDepthStream(\"btcusdt\", levels, speed, ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int speed = 100;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "speed = 100", "syntax_pass": true}, {"attribute_expression": "private static final int levels = 5;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "levels = 5", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketstream/TradeStream.java.TradeStream", "name": "TradeStream", "file_path": "src/test/java/examples/websocketstream/TradeStream.java", "superclasses": "", "methods": ["[]TradeStream()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/TradeStream.java.TradeStream.[]TradeStream()", "src/test/java/examples/websocketstream/TradeStream.java.TradeStream.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TradeStream {\n    private TradeStream() {\n    }\n\n    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.tradeStream(\"btcusdt\", ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/websocketstream/KlineStream.java.KlineStream", "name": "KlineStream", "file_path": "src/test/java/examples/websocketstream/KlineStream.java", "superclasses": "", "methods": ["[]KlineStream()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/KlineStream.java.KlineStream.[]KlineStream()", "src/test/java/examples/websocketstream/KlineStream.java.KlineStream.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class KlineStream {\n    private KlineStream() {\n    }\n\n    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.klineStream(\"btcusdt\", \"1h\", ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/websocketstream/AggTradeStream.java.AggTradeStream", "name": "AggTradeStream", "file_path": "src/test/java/examples/websocketstream/AggTradeStream.java", "superclasses": "", "methods": ["[]AggTradeStream()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/AggTradeStream.java.AggTradeStream.[]AggTradeStream()", "src/test/java/examples/websocketstream/AggTradeStream.java.AggTradeStream.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AggTradeStream {\n    private AggTradeStream() {\n    }\n\n    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        int streamId1 = client.aggTradeStream(\"btcusdt\", ((event) -> {\n            System.out.println(event);\n        }));\n        int streamId2 = client.aggTradeStream(\"ethusdt\", ((event) -> {\n            System.out.println(event);\n        }));\n        client.closeConnection(streamId1);\n        client.closeConnection(streamId2);\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/websocketstream/AllTickerStream.java.AllTickerStream", "name": "AllTickerStream", "file_path": "src/test/java/examples/websocketstream/AllTickerStream.java", "superclasses": "", "methods": ["[]AllTickerStream()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/AllTickerStream.java.AllTickerStream.[]AllTickerStream()", "src/test/java/examples/websocketstream/AllTickerStream.java.AllTickerStream.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AllTickerStream {\n    private AllTickerStream() {\n    }\n\n    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.allTickerStream(((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/websocketstream/TradeStreamWithAllCallbacks.java.TradeStreamWithAllCallbacks", "name": "TradeStreamWithAllCallbacks", "file_path": "src/test/java/examples/websocketstream/TradeStreamWithAllCallbacks.java", "superclasses": "", "methods": ["[]TradeStreamWithAllCallbacks()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/TradeStreamWithAllCallbacks.java.TradeStreamWithAllCallbacks.[]TradeStreamWithAllCallbacks()", "src/test/java/examples/websocketstream/TradeStreamWithAllCallbacks.java.TradeStreamWithAllCallbacks.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class TradeStreamWithAllCallbacks {\n    private TradeStreamWithAllCallbacks() {\n    }\n\n    private static WebSocketOpenCallback onOpenCallback;\n    private static WebSocketMessageCallback onMessageCallback;\n    private static WebSocketClosingCallback onClosingCallback;\n    private static WebSocketClosedCallback onClosedCallback;\n    private static WebSocketFailureCallback onFailureCallback;\n\n    public static void main(String[] args) throws InterruptedException {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        final long sleepTime = 1000;\n        \n        onOpenCallback = openEvent -> {\n            System.out.println(\"Open Connection: \" + openEvent.toString());\n        };\n\n        onMessageCallback = (message) -> {\n            System.out.println(\"Connection Message: \" +  message);\n        };\n\n        onClosingCallback = (code, reason) -> {\n            System.out.println(\"Closing Connection: code=\" + code + \", reason=\" + reason);\n        };\n\n        onClosedCallback = (code, reason) -> {\n            System.out.println(\"Closed Connection: code=\" + code + \", reason=\" + reason);\n        };\n\n        onFailureCallback = (throwable, response) -> {\n            System.out.println(\"Connection Failed: throwable=\" + throwable.getMessage());\n        };\n\n        client.tradeStream(\"btcusdt\", onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback);\n\n        Thread.sleep(sleepTime);\n\n        // Close connection for onClosingCallback and onClosedCallback examples purpose\n        client.closeAllConnections();\n\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static WebSocketOpenCallback onOpenCallback;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketOpenCallback", "name": "onOpenCallback", "syntax_pass": true}, {"attribute_expression": "private static WebSocketMessageCallback onMessageCallback;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketMessageCallback", "name": "onMessageCallback", "syntax_pass": true}, {"attribute_expression": "private static WebSocketClosingCallback onClosingCallback;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketClosingCallback", "name": "onClosingCallback", "syntax_pass": true}, {"attribute_expression": "private static WebSocketClosedCallback onClosedCallback;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketClosedCallback", "name": "onClosedCallback", "syntax_pass": true}, {"attribute_expression": "private static WebSocketFailureCallback onFailureCallback;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketFailureCallback", "name": "onFailureCallback", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketstream/CombineStreams.java.CombineStreams", "name": "CombineStreams", "file_path": "src/test/java/examples/websocketstream/CombineStreams.java", "superclasses": "", "methods": ["[]CombineStreams()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/CombineStreams.java.CombineStreams.[]CombineStreams()", "src/test/java/examples/websocketstream/CombineStreams.java.CombineStreams.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class CombineStreams {\n    private CombineStreams() {\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        final long sleepTime = 3000;\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n\n        ArrayList<String> streams = new ArrayList<>();\n        streams.add(\"btcusdt@trade\");\n        streams.add(\"bnbusdt@trade\");\n\n        client.combineStreams(streams, ((event) -> {\n            System.out.println(event);\n        }));\n\n        Thread.sleep(sleepTime);\n        client.closeAllConnections();\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/websocketstream/DiffDepthStream.java.DiffDepthStream", "name": "DiffDepthStream", "file_path": "src/test/java/examples/websocketstream/DiffDepthStream.java", "superclasses": "", "methods": ["[]DiffDepthStream()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/DiffDepthStream.java.DiffDepthStream.[]DiffDepthStream()", "src/test/java/examples/websocketstream/DiffDepthStream.java.DiffDepthStream.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DiffDepthStream {\n    private DiffDepthStream() {\n    }\n    private static final int speed = 100;\n\n    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.diffDepthStream(\"btcusdt\", speed, ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int speed = 100;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "speed = 100", "syntax_pass": true}]}, {"uris": "src/test/java/examples/websocketstream/RollingWindowTicker.java.RollingWindowTicker", "name": "RollingWindowTicker", "file_path": "src/test/java/examples/websocketstream/RollingWindowTicker.java", "superclasses": "", "methods": ["[]RollingWindowTicker()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/RollingWindowTicker.java.RollingWindowTicker.[]RollingWindowTicker()", "src/test/java/examples/websocketstream/RollingWindowTicker.java.RollingWindowTicker.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RollingWindowTicker {\n    private RollingWindowTicker() {\n    }\n\n    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.rollingWindowTicker(\"btcusdt\", \"1h\", ((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/test/java/examples/websocketstream/AllMiniTickerStream.java.AllMiniTickerStream", "name": "AllMiniTickerStream", "file_path": "src/test/java/examples/websocketstream/AllMiniTickerStream.java", "superclasses": "", "methods": ["[]AllMiniTickerStream()", "[void]main(String[])"], "method_uris": ["src/test/java/examples/websocketstream/AllMiniTickerStream.java.AllMiniTickerStream.[]AllMiniTickerStream()", "src/test/java/examples/websocketstream/AllMiniTickerStream.java.AllMiniTickerStream.[void]main(String[])"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class AllMiniTickerStream {\n    private AllMiniTickerStream() {\n    }\n\n    public static void main(String[] args) {\n        WebSocketStreamClient client = new WebSocketStreamClientImpl();\n        client.allMiniTickerStream(((event) -> {\n            System.out.println(event);\n            client.closeAllConnections();\n        }));\n    }\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder", "name": "UrlBuilder", "file_path": "src/main/java/com/binance/connector/client/utils/UrlBuilder.java", "superclasses": "", "methods": ["[]UrlBuilder()", "[String]buildFullUrl(String,String,Map<String, Object>)", "[String]buildStreamUrl(String,ArrayList<String>)", "[String]joinQueryParameters(Map<String, Object>)", "[StringBuilder]joinQueryParameters(StringBuilder,Map<String, Object>)", "[String]joinStreamUrls(ArrayList<String>)", "[StringBuilder]joinStreamUrls(StringBuilder,ArrayList<String>)", "[String]urlEncode(String)", "[String]buildTimestamp()", "[DecimalFormat]getFormatter()"], "method_uris": ["src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[]UrlBuilder()", "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[String]buildFullUrl(String,String,Map<String, Object>)", "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[String]buildStreamUrl(String,ArrayList<String>)", "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[String]joinQueryParameters(Map<String, Object>)", "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[StringBuilder]joinQueryParameters(StringBuilder,Map<String, Object>)", "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[String]joinStreamUrls(ArrayList<String>)", "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[StringBuilder]joinStreamUrls(StringBuilder,ArrayList<String>)", "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[String]urlEncode(String)", "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[String]buildTimestamp()", "src/main/java/com/binance/connector/client/utils/UrlBuilder.java.UrlBuilder.[DecimalFormat]getFormatter()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class UrlBuilder {\n    private static final int DIFF_TILL_POSITION_INDEX = 1;\n    private static final int MAX_DECIMAL_DIGITS = 30;\n    private static DecimalFormat df;\n\n    private UrlBuilder() {\n    }\n\n    public static String buildFullUrl(String baseUrl, String urlPath, Map<String, Object> parameters) {\n        StringBuilder sb = new StringBuilder(baseUrl).append(urlPath);\n        if (parameters != null && !parameters.isEmpty()) {\n            sb.append(\"?\");\n            sb.append(joinQueryParameters(parameters));\n        }\n        return sb.toString();\n    }\n\n    public static String buildStreamUrl(String baseUrl, ArrayList<String> streams) {\n        StringBuilder sb = new StringBuilder(baseUrl).append(\"/stream\");\n        if (streams != null && !streams.isEmpty()) {\n            sb.append(\"?streams=\");\n            sb.append(joinStreamUrls(streams));\n        }\n        return sb.toString();\n    }\n\n    /**\n     * Joins query parameters from a Map into a String representation.\n     * @param params The Map containing the query parameters.\n     * @return The String representation of the joined query parameters.\n    */\n    public static String joinQueryParameters(Map<String, Object> params) {\n        return joinQueryParameters(new StringBuilder(), params).toString();\n    }\n\n    /**\n     * Joins query parameters from a Map into a StringBuilder representation.\n     * @param sb The StringBuilder to append the query parameters to.\n     * @param params The Map containing the query parameters.\n     * @return The StringBuilder representation of the joined query parameters.\n    */\n    public static StringBuilder joinQueryParameters(StringBuilder sb, Map<String, Object> params) {\n        if (params != null && !params.isEmpty()) {\n            Iterator<String> keys = params.keySet().iterator();\n            while (keys.hasNext()) {\n                String key = keys.next();\n                sb.append(key);\n                sb.append(\"=\");\n\n                String value;\n                if (params.get(key) instanceof Double) {\n                    value = getFormatter().format(params.get(key));\n                } else {\n                    value = params.get(key).toString();\n                }\n                sb.append(urlEncode(value));\n\n                sb.append(\"&\");\n            }\n            sb.deleteCharAt(sb.length() - DIFF_TILL_POSITION_INDEX);\n        }\n        return sb;\n    }\n\n    /**\n     * Joins streams from an ArrayList into a String representation.\n     * @param params The ArrayList containing the streams.\n     * @return The String representation of the joined streams.\n    */\n    public static String joinStreamUrls(ArrayList<String> streams) {\n        return joinStreamUrls(new StringBuilder(), streams).toString();\n    }\n\n    /**\n     * Joins streams from an ArrayList into a StringBuilder representation.\n     * @param sb The StringBuilder to append the streams to.\n     * @param params The ArrayList containing the streams.\n     * @return The StringBuilder representation of the joined streams.\n    */\n    public static StringBuilder joinStreamUrls(StringBuilder sb, ArrayList<String> streams) {\n\n        if (streams != null && !streams.isEmpty()) {\n            for (String stream: streams) {\n                sb.append(stream);\n                sb.append(\"/\");\n            }\n            sb.deleteCharAt(sb.length() - DIFF_TILL_POSITION_INDEX);\n        }\n        return sb;\n    }\n\n    public static String urlEncode(String s) {\n        try {\n            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(StandardCharsets.UTF_8.name() + \" is unsupported\", e);\n        }\n    }\n\n    public static String buildTimestamp() {\n        return String.valueOf(System.currentTimeMillis());\n    }\n\n    private static DecimalFormat getFormatter() {\n        if (null == df) {\n            // Overrides the default Locale\n            DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.ENGLISH);\n            df = new DecimalFormat(\"#,##0.###\", symbols);\n            df.setMaximumFractionDigits(MAX_DECIMAL_DIGITS);\n            df.setGroupingUsed(false);\n        }\n        return df;\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int DIFF_TILL_POSITION_INDEX = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "DIFF_TILL_POSITION_INDEX = 1", "syntax_pass": true}, {"attribute_expression": "private static final int MAX_DECIMAL_DIGITS = 30;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "MAX_DECIMAL_DIGITS = 30", "syntax_pass": true}, {"attribute_expression": "private static DecimalFormat df;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "DecimalFormat", "name": "df", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler", "name": "RequestHandler", "file_path": "src/main/java/com/binance/connector/client/utils/RequestHandler.java", "superclasses": "", "methods": ["[]RequestHandler(String,ProxyAuth)", "[]RequestHandler(String,SignatureGenerator,ProxyAuth)", "[String]sendPublicRequest(String,String,Map<String, Object>,HttpMethod,boolean)", "[String]sendApiRequest(String,String,Map<String, Object>,HttpMethod,boolean)", "[String]sendSignedRequest(String,String,Map<String, Object>,HttpMethod,boolean)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler.[]RequestHandler(String,ProxyAuth)", "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler.[]RequestHandler(String,SignatureGenerator,ProxyAuth)", "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler.[String]sendPublicRequest(String,String,Map<String, Object>,HttpMethod,boolean)", "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler.[String]sendApiRequest(String,String,Map<String, Object>,HttpMethod,boolean)", "src/main/java/com/binance/connector/client/utils/RequestHandler.java.RequestHandler.[String]sendSignedRequest(String,String,Map<String, Object>,HttpMethod,boolean)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class RequestHandler {\n    private final String apiKey;\n    private final SignatureGenerator signatureGenerator;\n    private static final Logger logger = LoggerFactory.getLogger(RequestHandler.class);\n    private final ProxyAuth proxy;\n\n    public RequestHandler(String apiKey, ProxyAuth proxy) {\n        this(apiKey, null, proxy);\n    }\n\n    public RequestHandler(String apiKey, SignatureGenerator signatureGenerator, ProxyAuth proxy) {\n        this.apiKey = apiKey;\n        this.signatureGenerator = signatureGenerator;\n        this.proxy = proxy;\n    }\n\n    public String sendPublicRequest(String baseUrl, String urlPath, Map<String, Object> parameters, HttpMethod httpMethod, boolean showLimitUsage) {\n        String fullUrl = UrlBuilder.buildFullUrl(baseUrl, urlPath, parameters);\n        logger.info(\"{} {}\", httpMethod, fullUrl);\n\n        return ResponseHandler.handleResponse(RequestBuilder.buildPublicRequest(fullUrl, httpMethod), showLimitUsage, proxy);\n    }\n\n    public String sendApiRequest(String baseUrl, String urlPath, Map<String, Object> parameters, HttpMethod httpMethod, boolean showLimitUsage) {\n        if (null == apiKey || apiKey.isEmpty()) {\n            throw new BinanceConnectorException(\"[RequestHandler] API key cannot be null or empty!\");\n        }\n\n        String fullUrl = UrlBuilder.buildFullUrl(baseUrl, urlPath, parameters);\n        logger.info(\"{} {}\", httpMethod, fullUrl);\n\n        return ResponseHandler.handleResponse(RequestBuilder.buildApiKeyRequest(fullUrl, httpMethod, apiKey), showLimitUsage, proxy);\n    }\n\n    public String sendSignedRequest(String baseUrl, String urlPath, Map<String, Object> parameters, HttpMethod httpMethod, boolean showLimitUsage) {                          \n        if (signatureGenerator.getClass() == HmacSignatureGenerator.class && (null == apiKey || apiKey.isEmpty())) {\n            throw new BinanceConnectorException(\"[RequestHandler] Secret key/API key cannot be null or empty!\");\n        }\n        if ((signatureGenerator.getClass() == RsaSignatureGenerator.class || signatureGenerator.getClass() == Ed25519SignatureGenerator.class) && (null == apiKey || apiKey.isEmpty())) {\n            throw new BinanceConnectorException(\"[RequestHandler] Private key/API key cannot be null or empty!\");\n        }\n\n        parameters = (parameters == null) ? new HashMap<String, Object>() : parameters;\n        parameters.putIfAbsent(\"timestamp\", UrlBuilder.buildTimestamp());\n        parameters.put(\"signature\", this.signatureGenerator.getSignature(UrlBuilder.joinQueryParameters(parameters)));\n\n        String fullUrl = UrlBuilder.buildFullUrl(baseUrl, urlPath, parameters);\n        logger.info(\"{} {}\", httpMethod, fullUrl);\n\n        return ResponseHandler.handleResponse(RequestBuilder.buildApiKeyRequest(fullUrl, httpMethod, apiKey), showLimitUsage, proxy);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String apiKey;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private final SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private static final Logger logger = LoggerFactory.getLogger(RequestHandler.class);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Logger", "name": "logger = LoggerFactory.getLogger(RequestHandler.class)", "syntax_pass": true}, {"attribute_expression": "private final ProxyAuth proxy;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "ProxyAuth", "name": "proxy", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser", "name": "JSONParser", "file_path": "src/main/java/com/binance/connector/client/utils/JSONParser.java", "superclasses": "", "methods": ["[]JSONParser()", "[String]getJSONStringValue(String,String)", "[int]getJSONIntValue(String,String)", "[String]getJSONArray(ArrayList<?>,String)", "[String]buildJSONString(Object,String,JSONObject)", "[Map<String, Object>]sortJSONObject(JSONObject)", "[JSONObject]addKeyValue(JSONObject,String,Object)", "[Object]pullValue(JSONObject,String)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[]JSONParser()", "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[String]getJSONStringValue(String,String)", "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[int]getJSONIntValue(String,String)", "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[String]getJSONArray(ArrayList<?>,String)", "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[String]buildJSONString(Object,String,JSONObject)", "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[Map<String, Object>]sortJSONObject(JSONObject)", "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[JSONObject]addKeyValue(JSONObject,String,Object)", "src/main/java/com/binance/connector/client/utils/JSONParser.java.JSONParser.[Object]pullValue(JSONObject,String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class JSONParser {\n\n    private JSONParser() {\n    }\n\n    public static String getJSONStringValue(String json, String key) {\n        try {\n            JSONObject obj = new JSONObject(json);\n            return obj.getString(key);\n        } catch (JSONException e) {\n            throw new JSONException(String.format(\"[JSONParser] Failed to get \\\"%s\\\"  from JSON object\", key));\n        }\n    }\n\n    public static int getJSONIntValue(String json, String key) {\n        try {\n            JSONObject obj = new JSONObject(json);\n            return obj.getInt(key);\n        } catch (JSONException e) {\n            throw new JSONException(String.format(\"[JSONParser] Failed to get \\\"%s\\\" from JSON object\", key));\n        }\n    }\n\n    public static String getJSONArray(ArrayList<?> symbols, String key) {\n        try {\n            JSONArray arr = new JSONArray(symbols);\n            return arr.toString();\n        } catch (JSONException e) {\n            throw new JSONException(String.format(\"[JSONParser] Failed to convert \\\"%s\\\" to JSON array\", key));\n        }\n    }\n\n    public static String buildJSONString(Object id, String method, JSONObject parameters) {\n        try {\n            JSONObject json = new JSONObject();\n            json.put(\"id\", id);\n            json.put(\"method\", method);\n            json.put(\"params\", parameters);\n            return json.toString();\n        } catch (JSONException e) {\n            throw new JSONException(String.format(\"[JSONParser] Failed to convert to JSON string\"));\n        }\n    }\n\n    public static Map<String, Object> sortJSONObject(JSONObject parameters) {\n        LinkedList<String> keys = new LinkedList<>(parameters.keySet());\n        Map<String, Object> sortedParams = new LinkedHashMap<>();\n        keys.stream().sorted().forEach(key -> sortedParams.put(key, parameters.get(key)));\n\n        return sortedParams;\n    }\n\n    public static JSONObject addKeyValue(JSONObject parameters, String key, Object value) {\n        if (parameters == null) {\n            parameters = new JSONObject();\n        }\n\n        return parameters.put(key, value);\n    }\n\n    public static Object pullValue(JSONObject parameters, String key) {\n        if (parameters == null) {\n            return null;\n        }\n        Object value = parameters.opt(key);\n        parameters.remove(key);\n        return value;\n    }\n\n}", "super_interfaces": [], "fields": []}, {"uris": "src/main/java/com/binance/connector/client/utils/RequestBuilder.java.RequestBuilder", "name": "RequestBuilder", "file_path": "src/main/java/com/binance/connector/client/utils/RequestBuilder.java", "superclasses": "", "methods": ["[]RequestBuilder()", "[Request]buildPublicRequest(String,HttpMethod)", "[Request]buildApiKeyRequest(String,HttpMethod,String)", "[Request]buildWebSocketRequest(String)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/RequestBuilder.java.RequestBuilder.[]RequestBuilder()", "src/main/java/com/binance/connector/client/utils/RequestBuilder.java.RequestBuilder.[Request]buildPublicRequest(String,HttpMethod)", "src/main/java/com/binance/connector/client/utils/RequestBuilder.java.RequestBuilder.[Request]buildApiKeyRequest(String,HttpMethod,String)", "src/main/java/com/binance/connector/client/utils/RequestBuilder.java.RequestBuilder.[Request]buildWebSocketRequest(String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RequestBuilder {\n    private static final MediaType JSON_TYPE = MediaType.parse(\"application/json; charset=utf-8\");\n    private static final String USER_AGENT = \"binance-connector-java/3.3.0\";\n    private static final String CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n\n    private RequestBuilder() {\n    }\n    public static Request buildPublicRequest(String fullUrl, HttpMethod httpMethod) {\n        try {\n            final Request.Builder requestBuilder = new Request.Builder().addHeader(\"User-Agent\", USER_AGENT).addHeader(\"Content-Type\", CONTENT_TYPE).url(fullUrl);\n            switch (httpMethod) {\n                case POST:\n                    return requestBuilder.post(RequestBody.create(\"\", JSON_TYPE)).build();\n                case GET:\n                    return requestBuilder.get().build();\n                case PUT:\n                    return requestBuilder.put(RequestBody.create(\"\", JSON_TYPE)).build();\n                case DELETE:\n                    return requestBuilder.delete().build();\n                default:\n                    throw new BinanceConnectorException(\"Invalid HTTP method: \" + httpMethod);\n            }\n        } catch (IllegalArgumentException e) {\n            throw new BinanceConnectorException(\"Invalid URL: \" + e.getMessage());\n        }\n    }\n\n    public static Request buildApiKeyRequest(String fullUrl, HttpMethod httpMethod, String apiKey) {\n        try {\n            final Request.Builder requestBuilder = new Request.Builder().addHeader(\"User-Agent\", USER_AGENT).addHeader(\"Content-Type\", CONTENT_TYPE).addHeader(\"X-MBX-APIKEY\", apiKey).url(fullUrl);\n            switch (httpMethod) {\n                case POST:\n                    return requestBuilder.post(RequestBody.create(\"\", JSON_TYPE)).build();\n                case GET:\n                    return requestBuilder.get().build();\n                case PUT:\n                    return requestBuilder.put(RequestBody.create(\"\", JSON_TYPE)).build();\n                case DELETE:\n                    return requestBuilder.delete().build();\n                default:\n                    throw new BinanceConnectorException(\"Invalid HTTP method: \" + httpMethod);\n            }\n        } catch (IllegalArgumentException e) {\n            throw new BinanceConnectorException(\"Invalid URL: \" + e.getMessage());\n        }\n    }\n\n    public static Request buildWebSocketRequest(String fullUrl) {\n        return new Request.Builder().url(fullUrl).build();\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final MediaType JSON_TYPE = MediaType.parse(\"application/json; charset=utf-8\");", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "MediaType", "name": "JSON_TYPE = MediaType.parse(\"application/json; charset=utf-8\")", "syntax_pass": true}, {"attribute_expression": "private static final String USER_AGENT = \"binance-connector-java/3.3.0\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "USER_AGENT = \"binance-connector-java/3.3.0\"", "syntax_pass": true}, {"attribute_expression": "private static final String CONTENT_TYPE = \"application/x-www-form-urlencoded\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "CONTENT_TYPE = \"application/x-www-form-urlencoded\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection", "name": "WebSocketConnection", "file_path": "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java", "superclasses": "WebSocketListener", "methods": ["[]WebSocketConnection(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback,Request,OkHttpClient)", "[void]connect()", "[int]getConnectionId()", "[boolean]getSessionStatus()", "[void]send(String)", "[void]close()", "[void]onOpen(WebSocket,Response)", "[void]onClosing(WebSocket,int,String)", "[void]onClosed(WebSocket,int,String)", "[void]onMessage(WebSocket,String)", "[void]onFailure(WebSocket,Throwable,Response)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[]WebSocketConnection(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback,Request,OkHttpClient)", "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]connect()", "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[int]getConnectionId()", "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[boolean]getSessionStatus()", "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]send(String)", "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]close()", "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]onOpen(WebSocket,Response)", "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]onClosing(WebSocket,int,String)", "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]onClosed(WebSocket,int,String)", "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]onMessage(WebSocket,String)", "src/main/java/com/binance/connector/client/utils/WebSocketConnection.java.WebSocketConnection.[void]onFailure(WebSocket,Throwable,Response)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class WebSocketConnection extends WebSocketListener {\n    private static final AtomicInteger connectionCounter = new AtomicInteger(0);\n    private static final int NORMAL_CLOSURE_STATUS = 1000;\n    private static final Logger logger = LoggerFactory.getLogger(WebSocketConnection.class);\n    private static OkHttpClient client;\n    private static boolean sessionStatus;\n\n    private final int connectionId;\n    private final Object mutex;\n    private final Request request;\n    private final String streamName;\n\n    private final WebSocketOpenCallback onOpenCallback;\n    private final WebSocketMessageCallback onMessageCallback;\n    private final WebSocketClosingCallback onClosingCallback;\n    private final WebSocketClosedCallback onClosedCallback;\n    private final WebSocketFailureCallback onFailureCallback;\n\n    private WebSocket webSocket;\n\n    public WebSocketConnection(\n\t\t\tWebSocketOpenCallback onOpenCallback,\n\t\t\tWebSocketMessageCallback onMessageCallback,\n\t\t\tWebSocketClosingCallback onClosingCallback,\n            WebSocketClosedCallback onClosedCallback,\n\t\t\tWebSocketFailureCallback onFailureCallback,\n            Request request,\n            OkHttpClient client\n    ) {\n        this.onOpenCallback = onOpenCallback;\n        this.onMessageCallback = onMessageCallback;\n        this.onClosingCallback = onClosingCallback;\n        this.onClosedCallback = onClosedCallback;\n        this.onFailureCallback = onFailureCallback;\n        this.connectionId = WebSocketConnection.connectionCounter.incrementAndGet();\n        this.request = request;\n        this.streamName = request.url().host() + request.url().encodedPath();\n        this.webSocket = null;\n        this.mutex = new Object();\n        WebSocketConnection.client = client;\n    }\n\n    public void connect() {\n        synchronized (mutex) {\n            if (null == webSocket) {\n                logger.info(\"[Connection {}] Connecting to {}\", connectionId, streamName);\n                webSocket = client.newWebSocket(request, this);\n            } else {\n                logger.info(\"[Connection {}] is already connected to {}\", connectionId, streamName);\n            }\n        }\n    }\n\n    public int getConnectionId() {\n        return connectionId;\n    }\n\n    public boolean getSessionStatus() {\n        return sessionStatus;\n    }\n\n    public void send(String message) {\n        if (null == webSocket) {\n            throw new BinanceConnectorException(\"No WebSocket connection. Please connect first!\");\n        } \n        webSocket.send(message);\n    }\n\n    public void close() {\n        if (null != webSocket) {\n            logger.info(\"[Connection {}] Closing connection to {}\", connectionId, streamName);\n            webSocket.close(NORMAL_CLOSURE_STATUS, null);\n        }\n    }\n\n    @Override\n    public void onOpen(WebSocket ws, Response response) {\n        logger.info(\"[Connection {}] Connected to Server\", connectionId);\n        onOpenCallback.onOpen(response);\n    }\n\n    @Override\n    public void onClosing(WebSocket ws, int code, String reason) {\n        super.onClosing(ws, code, reason);\n        onClosingCallback.onClosing(code, reason);\n    }\n\n    @Override\n    public void onClosed(WebSocket ws, int code, String reason) {\n        super.onClosed(ws, code, reason);\n        onClosedCallback.onClosed(code, reason);\n    }\n\n    @Override\n    public void onMessage(WebSocket ws, String text) {\n\n        // session status\n        if (text.contains(\"authorizedSince\")) {\n            JSONObject result =  new JSONObject(text).getJSONObject(\"result\");\n            WebSocketConnection.sessionStatus = !result.isNull(\"authorizedSince\");\n        }\n        onMessageCallback.onMessage(text);\n    }\n\n    @Override\n    public void onFailure(WebSocket ws, Throwable t, Response response) {\n        logger.error(\"[Connection {}] Failure\", connectionId, t);\n        onFailureCallback.onFailure(t, response);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final AtomicInteger connectionCounter = new AtomicInteger(0);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "AtomicInteger", "name": "connectionCounter = new AtomicInteger(0)", "syntax_pass": true}, {"attribute_expression": "private static final int NORMAL_CLOSURE_STATUS = 1000;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "NORMAL_CLOSURE_STATUS = 1000", "syntax_pass": true}, {"attribute_expression": "private static final Logger logger = LoggerFactory.getLogger(WebSocketConnection.class);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Logger", "name": "logger = LoggerFactory.getLogger(WebSocketConnection.class)", "syntax_pass": true}, {"attribute_expression": "private static OkHttpClient client;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "OkHttpClient", "name": "client", "syntax_pass": true}, {"attribute_expression": "private static boolean sessionStatus;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "boolean", "name": "sessionStatus", "syntax_pass": true}, {"attribute_expression": "private final int connectionId;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "connectionId", "syntax_pass": true}, {"attribute_expression": "private final Object mutex;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Object", "name": "mutex", "syntax_pass": true}, {"attribute_expression": "private final Request request;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Request", "name": "request", "syntax_pass": true}, {"attribute_expression": "private final String streamName;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "streamName", "syntax_pass": true}, {"attribute_expression": "private final WebSocketOpenCallback onOpenCallback;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WebSocketOpenCallback", "name": "onOpenCallback", "syntax_pass": true}, {"attribute_expression": "private final WebSocketMessageCallback onMessageCallback;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WebSocketMessageCallback", "name": "onMessageCallback", "syntax_pass": true}, {"attribute_expression": "private final WebSocketClosingCallback onClosingCallback;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WebSocketClosingCallback", "name": "onClosingCallback", "syntax_pass": true}, {"attribute_expression": "private final WebSocketClosedCallback onClosedCallback;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WebSocketClosedCallback", "name": "onClosedCallback", "syntax_pass": true}, {"attribute_expression": "private final WebSocketFailureCallback onFailureCallback;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WebSocketFailureCallback", "name": "onFailureCallback", "syntax_pass": true}, {"attribute_expression": "private WebSocket webSocket;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "WebSocket", "name": "webSocket", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler", "name": "ResponseHandler", "file_path": "src/main/java/com/binance/connector/client/utils/ResponseHandler.java", "superclasses": "", "methods": ["[]ResponseHandler()", "[String]handleResponse(Request,boolean,ProxyAuth)", "[String]getLimitUsage(Response,String)", "[BinanceClientException]handleErrorResponse(String,int)", "[String]getResponseBodyAsString(ResponseBody)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler.[]ResponseHandler()", "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler.[String]handleResponse(Request,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler.[String]getLimitUsage(Response,String)", "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler.[BinanceClientException]handleErrorResponse(String,int)", "src/main/java/com/binance/connector/client/utils/ResponseHandler.java.ResponseHandler.[String]getResponseBodyAsString(ResponseBody)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ResponseHandler {\n    private static OkHttpClient client;\n    private static final int HTTP_STATUS_CODE_400 = 400;\n    private static final int HTTP_STATUS_CODE_499 = 499;\n    private static final int HTTP_STATUS_CODE_500 = 500;\n\n    private ResponseHandler() {\n    }\n\n    public static String handleResponse(Request request, boolean showLimitUsage, ProxyAuth proxy) {\n        client = HttpClientSingleton.getHttpClient(proxy);\n        try (Response response = client.newCall(request).execute()) {\n            if (null == response) {\n                throw new BinanceServerException(\"[ResponseHandler] No response from server\");\n            }\n\n            String responseAsString = getResponseBodyAsString(response.body());\n\n            if (response.code() >= HTTP_STATUS_CODE_400 && response.code() <= HTTP_STATUS_CODE_499) {\n                throw handleErrorResponse(responseAsString, response.code());\n            } else if (response.code() >= HTTP_STATUS_CODE_500) {\n                throw new BinanceServerException(responseAsString, response.code());\n            }\n\n            if (showLimitUsage) {\n                return getLimitUsage(response, responseAsString);\n            } else {\n                return responseAsString;\n            }\n        } catch (IOException | IllegalStateException e) {\n            String exceptionMsg = \"OKHTTP Error: \";\n            if (proxy != null) {\n                if ((e.getClass().equals(ConnectException.class))) {\n                    exceptionMsg = \"Proxy Connection Error: \";\n                } else if ((e.getClass().equals(UnknownHostException.class))) {\n                    exceptionMsg = \"Proxy Unknown Host Error: \";\n                }\n            }\n            throw new BinanceConnectorException(\"[ResponseHandler] \" + exceptionMsg + e.getMessage());\n        }\n    }\n\n    private static String getLimitUsage(Response response, String resposeBodyAsString) {\n        JSONObject json = new JSONObject();\n        json.put(\"x-sapi-used-ip-weight-1m\", response.header(\"X-SAPI-USED-IP-WEIGHT-1M\"));\n        json.put(\"x-sapi-used-uid-weight-1m\", response.header(\"X-SAPI-USED-UID-WEIGHT-1M\"));\n        json.put(\"x-mbx-used-weight\", response.header(\"x-mbx-used-weight\"));\n        json.put(\"x-mbx-used-weight-1m\", response.header(\"x-mbx-used-weight-1m\"));\n        json.put(\"data\", resposeBodyAsString);\n\n        return json.toString();\n    }\n\n    private static BinanceClientException handleErrorResponse(String responseBody, int responseCode) {\n        try {\n            String errorMsg = JSONParser.getJSONStringValue(responseBody, \"msg\");\n            int errorCode = JSONParser.getJSONIntValue(responseBody, \"code\");\n            return new BinanceClientException(responseBody, errorMsg, responseCode, errorCode);\n        } catch (JSONException e) {\n            throw new BinanceClientException(responseBody, responseCode);\n        }\n    }\n\n    private static String getResponseBodyAsString(ResponseBody body) throws IOException {\n        if (null != body) {\n            return body.string();\n        } else {\n            return \"\";\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static OkHttpClient client;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "OkHttpClient", "name": "client", "syntax_pass": true}, {"attribute_expression": "private static final int HTTP_STATUS_CODE_400 = 400;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "HTTP_STATUS_CODE_400 = 400", "syntax_pass": true}, {"attribute_expression": "private static final int HTTP_STATUS_CODE_499 = 499;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "HTTP_STATUS_CODE_499 = 499", "syntax_pass": true}, {"attribute_expression": "private static final int HTTP_STATUS_CODE_500 = 500;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "HTTP_STATUS_CODE_500 = 500", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/utils/ProxyAuth.java.ProxyAuth", "name": "ProxyAuth", "file_path": "src/main/java/com/binance/connector/client/utils/ProxyAuth.java", "superclasses": "", "methods": ["[]ProxyAuth(Proxy,Authenticator)", "[Proxy]getProxy()", "[Authenticator]getAuth()"], "method_uris": ["src/main/java/com/binance/connector/client/utils/ProxyAuth.java.ProxyAuth.[]ProxyAuth(Proxy,Authenticator)", "src/main/java/com/binance/connector/client/utils/ProxyAuth.java.ProxyAuth.[Proxy]getProxy()", "src/main/java/com/binance/connector/client/utils/ProxyAuth.java.ProxyAuth.[Authenticator]getAuth()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ProxyAuth {\n    private Proxy proxy;\n    private Authenticator auth;\n\n    \n    public ProxyAuth(Proxy proxy, Authenticator auth) {\n        this.proxy = proxy;\n        this.auth = auth;\n    }\n\n    public Proxy getProxy() {\n        return proxy;\n    }\n\n    public Authenticator getAuth() {\n        return auth;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private Proxy proxy;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Proxy", "name": "proxy", "syntax_pass": true}, {"attribute_expression": "private Authenticator auth;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Authenticator", "name": "auth", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker", "name": "ParameterChecker", "file_path": "src/main/java/com/binance/connector/client/utils/ParameterChecker.java", "superclasses": "", "methods": ["[]ParameterChecker()", "[void]checkParameter(Map<String, Object>,String,Class<?>)", "[void]checkRequiredParameter(Map<String, Object>,String)", "[void]checkParameterType(Object,Class<?>,String)", "[Object]processId(Object,String)", "[void]checkOnlyOneOfParameters(JSONObject)", "[void]checkOneOfParametersRequired(JSONObject)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker.[]ParameterChecker()", "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker.[void]checkParameter(Map<String, Object>,String,Class<?>)", "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker.[void]checkRequiredParameter(Map<String, Object>,String)", "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker.[void]checkParameterType(Object,Class<?>,String)", "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker.[Object]processId(Object,String)", "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker.[void]checkOnlyOneOfParameters(JSONObject)", "src/main/java/com/binance/connector/client/utils/ParameterChecker.java.ParameterChecker.[void]checkOneOfParametersRequired(JSONObject)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class ParameterChecker {\n\n    private ParameterChecker() {\n    }\n\n    private static final int countStart = 0;\n    private static final int countFinal = 1;\n\n    public static void checkParameter(Map<String, Object> parameters, String parameter, Class<?> t) {\n        checkRequiredParameter(parameters, parameter);\n        checkParameterType(parameters.get(parameter), t, parameter);\n    }\n\n    public static void checkRequiredParameter(Map<String, Object> parameters, String parameter) {\n        if (!parameters.containsKey(parameter)) {\n            throw new BinanceConnectorException(String.format(\"\\\"%s\\\" is a mandatory parameter!\", parameter));\n        }\n    }\n\n    public static void checkParameterType(Object parameter, Class<?> t, String name) {\n        if (!t.isInstance(parameter)) {\n            throw new BinanceConnectorException(String.format(\"\\\"%s\\\" must be of %s type.\", name, t));\n        } else if (parameter instanceof String && ((String) parameter).isEmpty()) {\n            throw new BinanceConnectorException(String.format(\"\\\"%s\\\" must not be empty.\", name));\n        }\n    }\n\n    public static Object processId(Object id, String name) {\n        if (!(id instanceof Integer || id instanceof String || id == null)) {\n            throw new BinanceConnectorException(name + \" must be of Int or String type.\");\n        } else if (id == null || (id instanceof String && ((String) id).isEmpty())) {\n            return UUID.randomUUID().toString();\n        }\n        return id;\n    }\n\n    public static void checkOnlyOneOfParameters(JSONObject params, String... parameters) {\n        // checks if only one of the \"parameters\" is present at \"params\"\n        if (params != null) {\n            int count = countStart;\n            for (String parameter : parameters) {\n                if (params.has(parameter)) {\n                    count++;\n                }\n            }\n            if (count > countFinal) { // more than one parameter is present\n                throw new BinanceConnectorException(\"Only one of the following parameters is allowed: \" + Arrays.toString(parameters));\n            }\n        }\n    }\n\n    public static void checkOneOfParametersRequired(JSONObject params, String... parameters) {\n        // checks if at least one of the \"parameters\" is present at \"params\"\n        String exceptMsg = \"One of the following parameters is required: \" + Arrays.toString(parameters);\n        if (params != null) {\n            int count = countStart;\n            for (String parameter : parameters) {\n                if (!params.has(parameter)) {\n                    count++;\n                }\n            }\n            if (count == parameters.length) { // none of the parameters is present\n                throw new BinanceConnectorException(exceptMsg);\n            }\n        } else {\n            throw new BinanceConnectorException(exceptMsg);\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final int countStart = 0;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "countStart = 0", "syntax_pass": true}, {"attribute_expression": "private static final int countFinal = 1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "countFinal = 1", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler", "name": "WebSocketApiRequestHandler", "file_path": "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java", "superclasses": "", "methods": ["[]WebSocketApiRequestHandler(WebSocketConnection,String,SignatureGenerator)", "[void]publicRequest(String)", "[void]publicRequest(String,JSONObject)", "[void]apiRequest(String,JSONObject)", "[void]signedRequest(String,JSONObject)", "[void]request(RequestType,String,JSONObject)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler.[]WebSocketApiRequestHandler(WebSocketConnection,String,SignatureGenerator)", "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler.[void]publicRequest(String)", "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler.[void]publicRequest(String,JSONObject)", "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler.[void]apiRequest(String,JSONObject)", "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler.[void]signedRequest(String,JSONObject)", "src/main/java/com/binance/connector/client/utils/websocketapi/WebSocketApiRequestHandler.java.WebSocketApiRequestHandler.[void]request(RequestType,String,JSONObject)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class WebSocketApiRequestHandler {\n    private final SignatureGenerator signatureGenerator;\n    private final String apiKey;\n    private WebSocketConnection connection;\n\n    public WebSocketApiRequestHandler(WebSocketConnection connection, String apiKey, SignatureGenerator signatureGenerator) {\n        if (connection == null) {\n            throw new BinanceConnectorException(\"[WebSocketApiRequestHandler] WebSocketConnection cannot be null\");\n        }\n        this.connection = connection;\n        this.apiKey = apiKey;\n        this.signatureGenerator = signatureGenerator;\n    }\n\n    public void publicRequest(String method) {\n        this.request(RequestType.PUBLIC, method, null);\n    }\n\n    public void publicRequest(String method, JSONObject parameters) {\n        this.request(RequestType.PUBLIC, method, parameters);\n    }\n\n    public void apiRequest(String method, JSONObject parameters) {\n        RequestType requestType = this.connection.getSessionStatus() ? RequestType.PUBLIC : RequestType.WITH_API_KEY;\n        this.request(requestType, method, parameters);\n    }\n\n    public void signedRequest(String method, JSONObject parameters) {\n        RequestType requestType = this.connection.getSessionStatus() ? RequestType.PUBLIC : RequestType.SIGNED;\n        this.request(requestType, method, parameters);\n    }\n\n    public void request(RequestType requestType, String method, JSONObject parameters) {\n        Object requestId = ParameterChecker.processId(JSONParser.pullValue(parameters, \"requestId\"), \"requestId\"); \n        ParameterChecker.checkParameterType(method, String.class, \"method\");\n\n        switch (requestType) {\n            case PUBLIC:\n                this.connection.send(JSONParser.buildJSONString(requestId, method, parameters));\n                break;\n            case WITH_API_KEY:\n                ParameterChecker.checkParameterType(this.apiKey, String.class, \"apiKey\");\n                parameters = JSONParser.addKeyValue(parameters, \"apiKey\", this.apiKey);\n\n                this.connection.send(JSONParser.buildJSONString(requestId, method, parameters));\n                break;\n            case SIGNED:\n                ParameterChecker.checkParameterType(this.apiKey, String.class, \"apiKey\");\n                parameters = JSONParser.addKeyValue(parameters, \"apiKey\", this.apiKey);\n                if (!parameters.has(\"timestamp\")) {\n                    parameters.put(\"timestamp\", UrlBuilder.buildTimestamp());\n                }\n\n                // signature\n                ParameterChecker.checkParameterType(this.signatureGenerator, SignatureGenerator.class, \"signatureGenerator\");\n                String payload = UrlBuilder.joinQueryParameters(JSONParser.sortJSONObject(parameters));\n                String signature = this.signatureGenerator.getSignature(payload);\n                parameters.put(\"signature\", signature);\n\n                this.connection.send(JSONParser.buildJSONString(requestId, method, parameters));\n                break;\n            default:\n                throw new BinanceConnectorException(\"[WebSocketApiRequestHandler] Invalid request type: \" + requestType);\n        }\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private final String apiKey;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private WebSocketConnection connection;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "WebSocketConnection", "name": "connection", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/utils/signaturegenerator/Ed25519SignatureGenerator.java.Ed25519SignatureGenerator", "name": "Ed25519SignatureGenerator", "file_path": "src/main/java/com/binance/connector/client/utils/signaturegenerator/Ed25519SignatureGenerator.java", "superclasses": "", "methods": ["[]Ed25519SignatureGenerator(String)", "[String]getSignature(String)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/signaturegenerator/Ed25519SignatureGenerator.java.Ed25519SignatureGenerator.[]Ed25519SignatureGenerator(String)", "src/main/java/com/binance/connector/client/utils/signaturegenerator/Ed25519SignatureGenerator.java.Ed25519SignatureGenerator.[String]getSignature(String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class Ed25519SignatureGenerator implements SignatureGenerator {\n\n    private Ed25519PrivateKeyParameters privateKey;\n    private final int offset = 0;\n\n    public Ed25519SignatureGenerator(String privateKey) throws FileNotFoundException, IOException {\n\n        ParameterChecker.checkParameterType(privateKey, String.class, \"privateKey\");\n\n        Security.addProvider(new BouncyCastleProvider());\n        PemReader pemReader = new PemReader(new FileReader(privateKey));\n        PemObject pemObject = pemReader.readPemObject();\n        byte[] privateKeyBytes = pemObject.getContent();\n        this.privateKey = (Ed25519PrivateKeyParameters) PrivateKeyFactory.createKey(privateKeyBytes);\n        pemReader.close();\n    }\n\n    public String getSignature(String data) {\n\n        byte[] dataBytes = data.getBytes(StandardCharsets.UTF_8);\n\n        Ed25519Signer signer = new Ed25519Signer();\n        signer.init(true, this.privateKey);\n        signer.update(dataBytes, offset, dataBytes.length);\n        byte[] signatureBytes = signer.generateSignature();\n        return Base64.getEncoder().encodeToString(signatureBytes);\n\n    }\n}", "super_interfaces": ["SignatureGenerator"], "fields": [{"attribute_expression": "private Ed25519PrivateKeyParameters privateKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "Ed25519PrivateKeyParameters", "name": "privateKey", "syntax_pass": true}, {"attribute_expression": "private final int offset = 0;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "offset = 0", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/utils/signaturegenerator/HmacSignatureGenerator.java.HmacSignatureGenerator", "name": "HmacSignatureGenerator", "file_path": "src/main/java/com/binance/connector/client/utils/signaturegenerator/HmacSignatureGenerator.java", "superclasses": "", "methods": ["[]HmacSignatureGenerator(String)", "[String]getSignature(String)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/signaturegenerator/HmacSignatureGenerator.java.HmacSignatureGenerator.[]HmacSignatureGenerator(String)", "src/main/java/com/binance/connector/client/utils/signaturegenerator/HmacSignatureGenerator.java.HmacSignatureGenerator.[String]getSignature(String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class HmacSignatureGenerator implements SignatureGenerator {\n    private static final String HMAC_SHA256 = \"HmacSHA256\";\n    private String apiSecret;\n\n    public HmacSignatureGenerator(String apiSecret) {\n        ParameterChecker.checkParameterType(apiSecret, String.class, \"apiSecret\");\n        this.apiSecret = apiSecret;\n    }\n\n    public String getSignature(String data) {\n        byte[] hmacSha256;\n        try {\n            SecretKeySpec secretKeySpec = new SecretKeySpec(apiSecret.getBytes(), HMAC_SHA256);\n            Mac mac = Mac.getInstance(HMAC_SHA256);\n            mac.init(secretKeySpec);\n            hmacSha256 = mac.doFinal(data.getBytes());\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to calculate hmac-sha256\", e);\n        }\n        return Hex.encodeHexString(hmacSha256);\n    }\n}", "super_interfaces": ["SignatureGenerator"], "fields": [{"attribute_expression": "private static final String HMAC_SHA256 = \"HmacSHA256\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "HMAC_SHA256 = \"HmacSHA256\"", "syntax_pass": true}, {"attribute_expression": "private String apiSecret;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "apiSecret", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java.RsaSignatureGenerator", "name": "RsaSignatureGenerator", "file_path": "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java", "superclasses": "", "methods": ["[]RsaSignatureGenerator(String)", "[]RsaSignatureGenerator(String,String)", "[String]getSignature(String)", "[RSAPrivateKey]parsePrivateKey(String,String)"], "method_uris": ["src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java.RsaSignatureGenerator.[]RsaSignatureGenerator(String)", "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java.RsaSignatureGenerator.[]RsaSignatureGenerator(String,String)", "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java.RsaSignatureGenerator.[String]getSignature(String)", "src/main/java/com/binance/connector/client/utils/signaturegenerator/RsaSignatureGenerator.java.RsaSignatureGenerator.[RSAPrivateKey]parsePrivateKey(String,String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class RsaSignatureGenerator implements SignatureGenerator {\n\n    private static final String RSA_SHA256 = \"SHA256withRSA\";\n    private static final String RSA = \"RSA\";\n    private RSAPrivateKey privateKey;\n\n    public RsaSignatureGenerator(String privateKey) {\n        this(privateKey, null);\n    }\n\n    public RsaSignatureGenerator(String privateKey, String password) {\n        ParameterChecker.checkParameterType(privateKey, String.class, \"privateKey\");\n        \n        try {\n            String privateKeyPem = privateKey;\n            if (new File(privateKey).exists()) {\n                privateKeyPem = new String(Files.readAllBytes(Paths.get(privateKey)));\n            }\n            this.privateKey = this.parsePrivateKey(privateKeyPem, password);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Unable to find/read private key at given file path\", e);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to parse RSA private key\", e);\n        }\n    }\n\n    public String getSignature(String data) {\n        try {\n            Signature privateSignature = Signature.getInstance(RSA_SHA256);\n            privateSignature.initSign(this.privateKey);\n            privateSignature.update(data.getBytes());\n        \n            byte[] signature = privateSignature.sign();\n        \n            return Base64.getEncoder().encodeToString(signature);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to calculate rsa-sha256\", e);\n        }\n    }\n\n    private RSAPrivateKey parsePrivateKey(String privateKeyPem, String password) throws Exception {\n        // Private Key in PKCS#8 standard\n        String parsedPem = privateKeyPem.replace(\"\\n\", \"\").trim();\n        if (password != null) {\n            parsedPem = parsedPem\n            .replace(\"-----BEGIN ENCRYPTED PRIVATE KEY-----\", \"\")\n            .replace(\"-----END ENCRYPTED PRIVATE KEY-----\", \"\");\n        } else {\n            parsedPem = parsedPem\n            .replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n            .replace(\"-----END PRIVATE KEY-----\", \"\");\n        }\n        byte[] encoded = Base64.getDecoder().decode(parsedPem); //illegal character\n        PKCS8EncodedKeySpec encodedKeySpec;\n        if (password != null) {\n            EncryptedPrivateKeyInfo pkInfo = new EncryptedPrivateKeyInfo(encoded);\n            PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray());\n            SecretKeyFactory pbeKeyFactory = SecretKeyFactory.getInstance(pkInfo.getAlgName());\n            encodedKeySpec = pkInfo.getKeySpec(pbeKeyFactory.generateSecret(keySpec));\n        } else {\n            encodedKeySpec = new PKCS8EncodedKeySpec(encoded);\n        }\n\n        KeyFactory kf = KeyFactory.getInstance(RSA);\n        return (RSAPrivateKey) kf.generatePrivate(encodedKeySpec);\n    }\n}", "super_interfaces": ["SignatureGenerator"], "fields": [{"attribute_expression": "private static final String RSA_SHA256 = \"SHA256withRSA\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "RSA_SHA256 = \"SHA256withRSA\"", "syntax_pass": true}, {"attribute_expression": "private static final String RSA = \"RSA\";", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "String", "name": "RSA = \"RSA\"", "syntax_pass": true}, {"attribute_expression": "private RSAPrivateKey privateKey;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "RSAPrivateKey", "name": "privateKey", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketStreamHttpClientSingleton.java.WebSocketStreamHttpClientSingleton", "name": "WebSocketStreamHttpClientSingleton", "file_path": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketStreamHttpClientSingleton.java", "superclasses": "", "methods": ["[]WebSocketStreamHttpClientSingleton()", "[OkHttpClient]getHttpClient()"], "method_uris": ["src/main/java/com/binance/connector/client/utils/httpclient/WebSocketStreamHttpClientSingleton.java.WebSocketStreamHttpClientSingleton.[]WebSocketStreamHttpClientSingleton()", "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketStreamHttpClientSingleton.java.WebSocketStreamHttpClientSingleton.[OkHttpClient]getHttpClient()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class WebSocketStreamHttpClientSingleton {\n    private static final OkHttpClient httpClient = new OkHttpClient();\n\n    private WebSocketStreamHttpClientSingleton() {\n    }\n\n    public static OkHttpClient getHttpClient() {\n        return httpClient;\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final OkHttpClient httpClient = new OkHttpClient();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "OkHttpClient", "name": "httpClient = new OkHttpClient()", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton", "name": "HttpClientSingleton", "file_path": "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java", "superclasses": "", "methods": ["[]HttpClientSingleton()", "[void]createHttpClient(ProxyAuth)", "[void]verifyHttpClient(ProxyAuth)", "[OkHttpClient]getHttpClient(ProxyAuth)", "[OkHttpClient]getHttpClient()"], "method_uris": ["src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton.[]HttpClientSingleton()", "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton.[void]createHttpClient(ProxyAuth)", "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton.[void]verifyHttpClient(ProxyAuth)", "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton.[OkHttpClient]getHttpClient(ProxyAuth)", "src/main/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton.java.HttpClientSingleton.[OkHttpClient]getHttpClient()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class HttpClientSingleton {\n    private static OkHttpClient httpClient = null;\n\n    private HttpClientSingleton() {\n    }\n\n    private static void createHttpClient(ProxyAuth proxy) {\n        if (proxy == null) {\n            httpClient = new OkHttpClient();\n        } else {\n            if (proxy.getAuth() == null) {\n                httpClient = new OkHttpClient.Builder().proxy(proxy.getProxy()).build();\n            } else {\n                httpClient = new OkHttpClient.Builder().proxy(proxy.getProxy()).proxyAuthenticator(proxy.getAuth()).build();\n            }\n        }\n    }\n\n    private static void verifyHttpClient(ProxyAuth proxy) {\n        Proxy prevProxy = httpClient.proxy();\n\n        if ((proxy != null && !proxy.getProxy().equals(prevProxy)) || (proxy == null && prevProxy != null)) {\n            createHttpClient(proxy);\n        }\n    }\n\n    public static OkHttpClient getHttpClient(ProxyAuth proxy) {\n        if (httpClient == null) {\n            createHttpClient(proxy);\n        } else {\n            verifyHttpClient(proxy);\n        }\n        return httpClient;\n    }\n\n    public static OkHttpClient getHttpClient() {\n        if (httpClient == null) {\n            createHttpClient(null);\n        } \n        return httpClient;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static OkHttpClient httpClient = null;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "OkHttpClient", "name": "httpClient = null", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketApiHttpClientSingleton.java.WebSocketApiHttpClientSingleton", "name": "WebSocketApiHttpClientSingleton", "file_path": "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketApiHttpClientSingleton.java", "superclasses": "", "methods": ["[]WebSocketApiHttpClientSingleton()", "[OkHttpClient]getHttpClient()"], "method_uris": ["src/main/java/com/binance/connector/client/utils/httpclient/WebSocketApiHttpClientSingleton.java.WebSocketApiHttpClientSingleton.[]WebSocketApiHttpClientSingleton()", "src/main/java/com/binance/connector/client/utils/httpclient/WebSocketApiHttpClientSingleton.java.WebSocketApiHttpClientSingleton.[OkHttpClient]getHttpClient()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class WebSocketApiHttpClientSingleton {\n    private static final OkHttpClient httpClient = new OkHttpClient();\n\n    private WebSocketApiHttpClientSingleton() {\n    }\n\n    public static OkHttpClient getHttpClient() {\n        return httpClient;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final OkHttpClient httpClient = new OkHttpClient();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "OkHttpClient", "name": "httpClient = new OkHttpClient()", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/exceptions/BinanceServerException.java.BinanceServerException", "name": "BinanceServerException", "file_path": "src/main/java/com/binance/connector/client/exceptions/BinanceServerException.java", "superclasses": "RuntimeException", "methods": ["[]BinanceServerException(String)", "[]BinanceServerException(String,int)", "[int]getHttpStatusCode()"], "method_uris": ["src/main/java/com/binance/connector/client/exceptions/BinanceServerException.java.BinanceServerException.[]BinanceServerException(String)", "src/main/java/com/binance/connector/client/exceptions/BinanceServerException.java.BinanceServerException.[]BinanceServerException(String,int)", "src/main/java/com/binance/connector/client/exceptions/BinanceServerException.java.BinanceServerException.[int]getHttpStatusCode()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class BinanceServerException extends RuntimeException {\n\n    private static final long serialVersionUID = 1L;\n    private static final int invalidStatusCode = -1;\n    private final int httpStatusCode;\n\n    public BinanceServerException(String fullErrMsg) {\n        super(fullErrMsg);\n        this.httpStatusCode = invalidStatusCode;\n    }\n\n    public BinanceServerException(String fullErrMsg, int httpStatusCode) {\n        super(fullErrMsg);\n        this.httpStatusCode = httpStatusCode;\n    }\n\n    public int getHttpStatusCode() {\n        return httpStatusCode;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 1L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 1L", "syntax_pass": true}, {"attribute_expression": "private static final int invalidStatusCode = -1;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "int", "name": "invalidStatusCode = -1", "syntax_pass": true}, {"attribute_expression": "private final int httpStatusCode;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "httpStatusCode", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException", "name": "BinanceClientException", "file_path": "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java", "superclasses": "RuntimeException", "methods": ["[]BinanceClientException(String,int)", "[]BinanceClientException(String,String,int,int)", "[int]getErrorCode()", "[int]getHttpStatusCode()", "[String]getErrMsg()"], "method_uris": ["src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException.[]BinanceClientException(String,int)", "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException.[]BinanceClientException(String,String,int,int)", "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException.[int]getErrorCode()", "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException.[int]getHttpStatusCode()", "src/main/java/com/binance/connector/client/exceptions/BinanceClientException.java.BinanceClientException.[String]getErrMsg()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class BinanceClientException extends RuntimeException {\n    private static final long serialVersionUID = 1L;\n    private final int ERROR_CODE_0 = 0;\n    private final int httpStatusCode;\n    private final int errorCode;\n    private String errMsg;\n\n    public BinanceClientException(String fullErrMsg, int httpStatusCode) {\n        super(fullErrMsg);\n        this.httpStatusCode = httpStatusCode;\n        this.errorCode = ERROR_CODE_0;\n    }\n\n    public BinanceClientException(String fullErrMsg, String errMsg, int httpStatusCode, int errorCode) {\n        super(fullErrMsg);\n        this.httpStatusCode = httpStatusCode;\n        this.errorCode = errorCode;\n        this.errMsg =  errMsg;\n    }\n\n    public int getErrorCode() {\n        return errorCode;\n    }\n\n    public int getHttpStatusCode() {\n        return httpStatusCode;\n    }\n\n    public String getErrMsg() {\n        return errMsg;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 1L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 1L", "syntax_pass": true}, {"attribute_expression": "private final int ERROR_CODE_0 = 0;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "ERROR_CODE_0 = 0", "syntax_pass": true}, {"attribute_expression": "private final int httpStatusCode;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "httpStatusCode", "syntax_pass": true}, {"attribute_expression": "private final int errorCode;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "int", "name": "errorCode", "syntax_pass": true}, {"attribute_expression": "private String errMsg;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "String", "name": "errMsg", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/exceptions/BinanceConnectorException.java.BinanceConnectorException", "name": "BinanceConnectorException", "file_path": "src/main/java/com/binance/connector/client/exceptions/BinanceConnectorException.java", "superclasses": "RuntimeException", "methods": ["[]BinanceConnectorException(String)"], "method_uris": ["src/main/java/com/binance/connector/client/exceptions/BinanceConnectorException.java.BinanceConnectorException.[]BinanceConnectorException(String)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class BinanceConnectorException extends RuntimeException {\n\n    private static final long serialVersionUID = 1L;\n\n    public BinanceConnectorException(String fullErrMsg) {\n        super(fullErrMsg);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static final long serialVersionUID = 1L;", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "long", "name": "serialVersionUID = 1L", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/enums/DefaultUrls.java.DefaultUrls", "name": "DefaultUrls", "file_path": "src/main/java/com/binance/connector/client/enums/DefaultUrls.java", "superclasses": "", "methods": ["[]DefaultUrls()"], "method_uris": ["src/main/java/com/binance/connector/client/enums/DefaultUrls.java.DefaultUrls.[]DefaultUrls()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class DefaultUrls {\n    public static final String PROD_URL = \"https://api.binance.com\";\n    public static final String WS_URL = \"wss://stream.binance.com:9443\";\n    public static final String WS_API_URL = \"wss://ws-api.binance.com:443/ws-api/v3\";\n    public static final String TESTNET_URL = \"https://testnet.binance.vision\";\n    public static final String TESTNET_WS_URL = \"wss://stream.testnet.binance.vision\";\n    public static final String TESTNET_WS_API_URL = \"wss://ws-api.testnet.binance.vision/ws-api/v3\";\n    public static final String MARKET_URL = \"https://data-api.binance.vision\";\n    public static final String MARKET_WS_URL = \"wss://data-stream.binance.vision\";\n    private DefaultUrls() {\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "public static final String PROD_URL = \"https://api.binance.com\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "PROD_URL = \"https://api.binance.com\"", "syntax_pass": true}, {"attribute_expression": "public static final String WS_URL = \"wss://stream.binance.com:9443\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "WS_URL = \"wss://stream.binance.com:9443\"", "syntax_pass": true}, {"attribute_expression": "public static final String WS_API_URL = \"wss://ws-api.binance.com:443/ws-api/v3\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "WS_API_URL = \"wss://ws-api.binance.com:443/ws-api/v3\"", "syntax_pass": true}, {"attribute_expression": "public static final String TESTNET_URL = \"https://testnet.binance.vision\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "TESTNET_URL = \"https://testnet.binance.vision\"", "syntax_pass": true}, {"attribute_expression": "public static final String TESTNET_WS_URL = \"wss://stream.testnet.binance.vision\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "TESTNET_WS_URL = \"wss://stream.testnet.binance.vision\"", "syntax_pass": true}, {"attribute_expression": "public static final String TESTNET_WS_API_URL = \"wss://ws-api.testnet.binance.vision/ws-api/v3\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "TESTNET_WS_API_URL = \"wss://ws-api.testnet.binance.vision/ws-api/v3\"", "syntax_pass": true}, {"attribute_expression": "public static final String MARKET_URL = \"https://data-api.binance.vision\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "MARKET_URL = \"https://data-api.binance.vision\"", "syntax_pass": true}, {"attribute_expression": "public static final String MARKET_WS_URL = \"wss://data-stream.binance.vision\";", "docstring": "", "modifiers": "public static final", "marker_annotations": [], "non_marker_annotations": ["public", "static", "final"], "comments": [], "type": "String", "name": "MARKET_WS_URL = \"wss://data-stream.binance.vision\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl", "name": "SpotClientImpl", "file_path": "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java", "superclasses": "", "methods": ["[]SpotClientImpl()", "[]SpotClientImpl(String)", "[]SpotClientImpl(String,boolean)", "[]SpotClientImpl(String,String)", "[]SpotClientImpl(String,String,String)", "[]SpotClientImpl(String,SignatureGenerator,String)", "[void]setShowLimitUsage(boolean)", "[void]setProxy(ProxyAuth)", "[void]unsetProxy()", "[AutoInvest]createAutoInvest()", "[Blvt]createBlvt()", "[C2C]createC2C()", "[Convert]createConvert()", "[CryptoLoans]createCryptoLoans()", "[Fiat]createFiat()", "[Futures]createFutures()", "[GiftCard]createGiftCard()", "[Margin]createMargin()", "[Market]createMarket()", "[Mining]createMining()", "[NFT]createNFT()", "[Pay]createPay()", "[PortfolioMargin]createPortfolioMargin()", "[Rebate]createRebate()", "[SimpleEarn]createSimpleEarn()", "[SpotAlgo]createSpotAlgo()", "[Staking]createStaking()", "[SubAccount]createSubAccount()", "[Trade]createTrade()", "[UserData]createUserData()", "[VIPLoans]createVIPLoans()", "[Wallet]createWallet()"], "method_uris": ["src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[]SpotClientImpl()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[]SpotClientImpl(String)", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[]SpotClientImpl(String,boolean)", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[]SpotClientImpl(String,String)", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[]SpotClientImpl(String,String,String)", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[]SpotClientImpl(String,SignatureGenerator,String)", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[void]setShowLimitUsage(boolean)", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[void]setProxy(ProxyAuth)", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[void]unsetProxy()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[AutoInvest]createAutoInvest()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Blvt]createBlvt()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[C2C]createC2C()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Convert]createConvert()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[CryptoLoans]createCryptoLoans()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Fiat]createFiat()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Futures]createFutures()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[GiftCard]createGiftCard()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Margin]createMargin()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Market]createMarket()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Mining]createMining()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[NFT]createNFT()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Pay]createPay()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[PortfolioMargin]createPortfolioMargin()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Rebate]createRebate()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[SimpleEarn]createSimpleEarn()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[SpotAlgo]createSpotAlgo()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Staking]createStaking()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[SubAccount]createSubAccount()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Trade]createTrade()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[UserData]createUserData()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[VIPLoans]createVIPLoans()", "src/main/java/com/binance/connector/client/impl/SpotClientImpl.java.SpotClientImpl.[Wallet]createWallet()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class SpotClientImpl implements SpotClient {\n    private final String apiKey;\n    private final SignatureGenerator signatureGenerator;\n    private final String baseUrl;\n    private boolean showLimitUsage = false;\n    private ProxyAuth proxy = null;\n\n    public SpotClientImpl() {\n        this(DefaultUrls.PROD_URL);\n    }\n\n    public SpotClientImpl(String baseUrl) {\n        this(\"\", (SignatureGenerator) null, baseUrl);\n    }\n\n    public SpotClientImpl(String baseUrl, boolean showLimitUsage) {\n        this(baseUrl);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public SpotClientImpl(String apiKey, String secretKey) {\n        this(apiKey, secretKey, DefaultUrls.PROD_URL);\n    }\n\n    public SpotClientImpl(String apiKey, String secretKey, String baseUrl) {\n        this(apiKey, new HmacSignatureGenerator(secretKey), baseUrl);\n    }\n\n    public SpotClientImpl(String apiKey, SignatureGenerator signatureGenerator, String baseUrl) {\n        this.apiKey = apiKey;\n        this.signatureGenerator = signatureGenerator;\n        this.baseUrl = baseUrl;\n    }\n\n    @Override\n    public void setShowLimitUsage(boolean showLimitUsage) {\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    @Override\n    public void setProxy(ProxyAuth proxy) {\n        this.proxy = proxy;\n    }\n    \n    @Override\n    public void unsetProxy() {\n        this.proxy = null;\n    }\n\n    @Override\n    public AutoInvest createAutoInvest() {\n        return new AutoInvest(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public Blvt createBlvt() {\n        return new Blvt(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public C2C createC2C() {\n        return new C2C(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public Convert createConvert() {\n        return new Convert(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public CryptoLoans createCryptoLoans() {\n        return new CryptoLoans(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public Fiat createFiat() {\n        return new Fiat(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public Futures createFutures() {\n        return new Futures(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public GiftCard createGiftCard() {\n        return new GiftCard(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy); }\n\n    @Override\n    public Margin createMargin() {\n        return new Margin(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public Market createMarket() {\n        return new Market(baseUrl, apiKey, showLimitUsage, proxy);\n    }\n\n    @Override\n    public Mining createMining() {\n        return new Mining(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public NFT createNFT() {\n        return new NFT(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public Pay createPay() {\n        return new Pay(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public PortfolioMargin createPortfolioMargin() {\n        return new PortfolioMargin(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public Rebate createRebate() {\n        return new Rebate(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public SimpleEarn createSimpleEarn() {\n        return new SimpleEarn(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public SpotAlgo createSpotAlgo() {\n        return new SpotAlgo(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public Staking createStaking() {\n        return new Staking(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public SubAccount createSubAccount() {\n        return new SubAccount(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public Trade createTrade() {\n        return new Trade(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public UserData createUserData() {\n        return new UserData(baseUrl, apiKey, showLimitUsage, proxy);\n    }\n\n    @Override\n    public VIPLoans createVIPLoans() {\n        return new VIPLoans(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n\n    @Override\n    public Wallet createWallet() {\n        return new Wallet(baseUrl, apiKey, signatureGenerator, showLimitUsage, proxy);\n    }\n}", "super_interfaces": ["SpotClient"], "fields": [{"attribute_expression": "private final String apiKey;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private final SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private boolean showLimitUsage = false;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "boolean", "name": "showLimitUsage = false", "syntax_pass": true}, {"attribute_expression": "private ProxyAuth proxy = null;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ProxyAuth", "name": "proxy = null", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl", "name": "WebSocketApiClientImpl", "file_path": "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java", "superclasses": "", "methods": ["[]WebSocketApiClientImpl()", "[]WebSocketApiClientImpl(String)", "[]WebSocketApiClientImpl(String,SignatureGenerator)", "[]WebSocketApiClientImpl(String,SignatureGenerator,String)", "[void]checkRequestHandler()", "[void]connect(WebSocketMessageCallback)", "[void]connect(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[void]close()", "[WebSocketApiAccount]account()", "[WebSocketApiAuth]auth()", "[WebSocketApiGeneral]general()", "[WebSocketApiMarket]market()", "[WebSocketApiTrade]trade()", "[WebSocketApiUserDataStream]userDataStream()"], "method_uris": ["src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[]WebSocketApiClientImpl()", "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[]WebSocketApiClientImpl(String)", "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[]WebSocketApiClientImpl(String,SignatureGenerator)", "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[]WebSocketApiClientImpl(String,SignatureGenerator,String)", "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[void]checkRequestHandler()", "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[void]connect(WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[void]connect(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[void]close()", "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[WebSocketApiAccount]account()", "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[WebSocketApiAuth]auth()", "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[WebSocketApiGeneral]general()", "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[WebSocketApiMarket]market()", "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[WebSocketApiTrade]trade()", "src/main/java/com/binance/connector/client/impl/WebSocketApiClientImpl.java.WebSocketApiClientImpl.[WebSocketApiUserDataStream]userDataStream()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public class WebSocketApiClientImpl implements WebSocketApiClient {\n    private static final OkHttpClient client = WebSocketApiHttpClientSingleton.getHttpClient();\n    private final SignatureGenerator signatureGenerator;\n    private final String apiKey;\n    private final String baseUrl;\n    private final WebSocketOpenCallback noopOpenCallback = response -> { };\n    private final WebSocketClosingCallback noopClosingCallback = (code, reason) -> { };\n    private final WebSocketClosedCallback noopClosedCallback = (code, reason) -> { };\n    private final WebSocketFailureCallback noopFailureCallback = (throwable, response) -> { };\n    private WebSocketConnection connection; \n    private WebSocketApiRequestHandler requestHandler;\n\n    public WebSocketApiClientImpl() {\n        this(\"\", null);\n    }\n\n    public WebSocketApiClientImpl(String baseUrl) {\n        this(\"\", null, baseUrl);\n    }\n\n    public WebSocketApiClientImpl(String apiKey, SignatureGenerator signatureGenerator) {\n        this(apiKey, signatureGenerator, DefaultUrls.WS_API_URL);\n    }\n\n    public WebSocketApiClientImpl(String apiKey, SignatureGenerator signatureGenerator, String baseUrl) {\n        this.apiKey = apiKey;\n        this.signatureGenerator = signatureGenerator;\n        this.baseUrl = baseUrl;\n    }\n    \n    private void checkRequestHandler() {\n        if (this.requestHandler == null) {\n            throw new BinanceConnectorException(\"No WebSocket API connection to submit request. Please connect first.\");\n        }\n    }\n\n    @Override\n    public void connect(WebSocketMessageCallback onMessageCallback) {\n        connect(noopOpenCallback, onMessageCallback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    @Override\n    public void connect(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        Request request = RequestBuilder.buildWebSocketRequest(baseUrl);\n\n        this.connection = new WebSocketConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request, client);\n        this.requestHandler = new WebSocketApiRequestHandler(this.connection, this.apiKey, this.signatureGenerator);\n        this.connection.connect();\n    }\n\n    @Override\n    public void close() {\n        this.connection.close();\n        client.dispatcher().executorService().shutdown();\n    }\n\n    @Override\n    public WebSocketApiAccount account() {\n        checkRequestHandler();\n        return (WebSocketApiAccount) WebSocketApiModuleFactory.build(Category.ACCOUNT, this.requestHandler);\n    }\n\n    @Override\n    public WebSocketApiAuth auth() {\n        checkRequestHandler();\n        return (WebSocketApiAuth) WebSocketApiModuleFactory.build(Category.AUTH, this.requestHandler);\n    }\n\n    @Override\n    public WebSocketApiGeneral general() {\n        checkRequestHandler();\n        return (WebSocketApiGeneral) WebSocketApiModuleFactory.build(Category.GENERAL, this.requestHandler);\n    }\n\n    @Override\n    public WebSocketApiMarket market() {\n        checkRequestHandler();\n        return (WebSocketApiMarket) WebSocketApiModuleFactory.build(Category.MARKET, this.requestHandler);\n    }\n\n    @Override\n    public WebSocketApiTrade trade() {\n        checkRequestHandler();\n        return (WebSocketApiTrade) WebSocketApiModuleFactory.build(Category.TRADE, this.requestHandler);\n    }\n\n    @Override\n    public WebSocketApiUserDataStream userDataStream() {\n        checkRequestHandler();\n        return (WebSocketApiUserDataStream) WebSocketApiModuleFactory.build(Category.USER_DATA_STREAM, this.requestHandler);\n    }\n\n}", "super_interfaces": ["WebSocketApiClient"], "fields": [{"attribute_expression": "private static final OkHttpClient client = WebSocketApiHttpClientSingleton.getHttpClient();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "OkHttpClient", "name": "client = WebSocketApiHttpClientSingleton.getHttpClient()", "syntax_pass": true}, {"attribute_expression": "private final SignatureGenerator signatureGenerator;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "SignatureGenerator", "name": "signatureGenerator", "syntax_pass": true}, {"attribute_expression": "private final String apiKey;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "apiKey", "syntax_pass": true}, {"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final WebSocketOpenCallback noopOpenCallback = response -> { };", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WebSocketOpenCallback", "name": "noopOpenCallback = response -> { }", "syntax_pass": true}, {"attribute_expression": "private final WebSocketClosingCallback noopClosingCallback = (code, reason) -> { };", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WebSocketClosingCallback", "name": "noopClosingCallback = (code, reason) -> { }", "syntax_pass": true}, {"attribute_expression": "private final WebSocketClosedCallback noopClosedCallback = (code, reason) -> { };", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WebSocketClosedCallback", "name": "noopClosedCallback = (code, reason) -> { }", "syntax_pass": true}, {"attribute_expression": "private final WebSocketFailureCallback noopFailureCallback = (throwable, response) -> { };", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WebSocketFailureCallback", "name": "noopFailureCallback = (throwable, response) -> { }", "syntax_pass": true}, {"attribute_expression": "private WebSocketConnection connection;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "WebSocketConnection", "name": "connection", "syntax_pass": true}, {"attribute_expression": "private WebSocketApiRequestHandler requestHandler;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "WebSocketApiRequestHandler", "name": "requestHandler", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl", "name": "WebSocketStreamClientImpl", "file_path": "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java", "superclasses": "", "methods": ["[]WebSocketStreamClientImpl()", "[]WebSocketStreamClientImpl(String)", "[int]aggTradeStream(String,WebSocketMessageCallback)", "[int]aggTradeStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]tradeStream(String,WebSocketMessageCallback)", "[int]tradeStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]klineStream(String,String,WebSocketMessageCallback)", "[int]klineStream(String,String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]miniTickerStream(String,WebSocketMessageCallback)", "[int]miniTickerStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]allMiniTickerStream(WebSocketMessageCallback)", "[int]allMiniTickerStream(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]symbolTicker(String,WebSocketMessageCallback)", "[int]symbolTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]allTickerStream(WebSocketMessageCallback)", "[int]allTickerStream(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]rollingWindowTicker(String,String,WebSocketMessageCallback)", "[int]rollingWindowTicker(String,String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]allRollingWindowTicker(String,WebSocketMessageCallback)", "[int]allRollingWindowTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]bookTicker(String,WebSocketMessageCallback)", "[int]bookTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]partialDepthStream(String,int,int,WebSocketMessageCallback)", "[int]partialDepthStream(String,int,int,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]diffDepthStream(String,int,WebSocketMessageCallback)", "[int]diffDepthStream(String,int,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]listenUserStream(String,WebSocketMessageCallback)", "[int]listenUserStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[int]combineStreams(ArrayList<String>,WebSocketMessageCallback)", "[int]combineStreams(ArrayList<String>,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "[void]closeConnection(int)", "[void]closeAllConnections()", "[int]createConnection(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback,Request)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[]WebSocketStreamClientImpl()", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[]WebSocketStreamClientImpl(String)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]aggTradeStream(String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]aggTradeStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]tradeStream(String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]tradeStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]klineStream(String,String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]klineStream(String,String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]miniTickerStream(String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]miniTickerStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]allMiniTickerStream(WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]allMiniTickerStream(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]symbolTicker(String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]symbolTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]allTickerStream(WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]allTickerStream(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]rollingWindowTicker(String,String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]rollingWindowTicker(String,String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]allRollingWindowTicker(String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]allRollingWindowTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]bookTicker(String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]bookTicker(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]partialDepthStream(String,int,int,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]partialDepthStream(String,int,int,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]diffDepthStream(String,int,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]diffDepthStream(String,int,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]listenUserStream(String,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]listenUserStream(String,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]combineStreams(ArrayList<String>,WebSocketMessageCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]combineStreams(ArrayList<String>,WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[void]closeConnection(int)", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[void]closeAllConnections()", "src/main/java/com/binance/connector/client/impl/WebSocketStreamClientImpl.java.WebSocketStreamClientImpl.[int]createConnection(WebSocketOpenCallback,WebSocketMessageCallback,WebSocketClosingCallback,WebSocketClosedCallback,WebSocketFailureCallback,Request)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>WebSocket Streams</h2>\nAll stream endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#websocket-market-streams\">WebSocket Market Streams</a> and\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#user-data-streams\">User Data Streams</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned as callback.\n", "original_string": "public class WebSocketStreamClientImpl implements WebSocketStreamClient {\n    private static final Logger logger = LoggerFactory.getLogger(WebSocketStreamClientImpl.class);\n    private static final OkHttpClient client = WebSocketStreamHttpClientSingleton.getHttpClient();\n    private final String baseUrl;\n    private final Map<Integer, WebSocketConnection> connections = new HashMap<>();\n    private final WebSocketOpenCallback noopOpenCallback = response -> { };\n    private final WebSocketClosingCallback noopClosingCallback = (code, reason) -> { };\n    private final WebSocketClosedCallback noopClosedCallback = (code, reason) -> { };\n    private final WebSocketFailureCallback noopFailureCallback = (throwable, response) -> { };\n\n    public WebSocketStreamClientImpl() {\n        this.baseUrl = DefaultUrls.WS_URL;\n    }\n\n    public WebSocketStreamClientImpl(String baseUrl) {\n        this.baseUrl = baseUrl;\n    }\n\n    /**\n     * The Aggregate Trade Streams push trade information that is aggregated for a single taker order.\n     * <br><br>\n     * &lt;symbol&gt;@aggTrade\n     * <br><br>\n     * Update Speed: Real-time\n     *\n     * @param symbol Name of the trading pair\n     * @return int - Connection ID\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#aggregate-trade-streams\">\n     * https://binance-docs.github.io/apidocs/spot/en/#aggregate-trade-streams</a>\n     */\n    @Override\n    public int aggTradeStream(String symbol, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return aggTradeStream(symbol.toLowerCase(), noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    /**\n     * Same as {@link #aggTradeStream(String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n     *\n     * @param symbol Name of the trading pair\n     * @param onOpenCallback Callback for when the websocket connection is opened\n     * @param onMessageCallback Callback for when a message is received\n     * @param onClosingCallback Callback for when the websocket connection is closing\n     * @param onFailureCallback Callback for when an error occurs\n     * @return int - Connection ID\n     */\n    @Override\n    public int aggTradeStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@aggTrade\", baseUrl, symbol.toLowerCase()));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }\n\n    /**\n     * The Trade Streams push raw trade information; each trade has a unique buyer and seller.\n     * <br><br>\n     * &lt;symbol&gt;@trade\n     * <br><br>\n     * Update Speed: Real-time\n     *\n     * @param symbol Name of the trading pair\n     * @return int - Connection ID\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#trade-streams\">\n     * https://binance-docs.github.io/apidocs/spot/en/#trade-streams</a>\n     */\n    @Override\n    public int tradeStream(String symbol, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return tradeStream(symbol.toLowerCase(), noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    /**\n     * Same as {@link #tradeStream(String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n     *\n     * @param symbol Name of the trading pair\n     * @param onOpenCallback Callback for when the websocket connection is opened\n     * @param onMessageCallback Callback for when a message is received\n     * @param onClosingCallback Callback for when the websocket connection is closing\n     * @param onFailureCallback Callback for when an error occurs\n     * @return int - Connection ID\n     */\n    @Override\n    public int tradeStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@trade\", baseUrl, symbol.toLowerCase()));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }\n\n    /**\n     * The Kline/Candlestick Stream push updates to the current klines/candlestick every second.\n     * <br><br>\n     * &lt;symbol&gt;@kline_&lt;interval&gt;\n     * <br><br>\n     * Update Speed: Real-time\n     *\n     * @param symbol Name of the trading pair\n     * @param interval Time interval for kline/candlestick\n     * @return int - Connection ID\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#kline-candlestick-streams\">\n     * https://binance-docs.github.io/apidocs/spot/en/#kline-candlestick-streams</a>\n     */\n    @Override\n    public int klineStream(String symbol, String interval, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return klineStream(symbol.toLowerCase(), interval, noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    /**\n     * Same as {@link #klineStream(String, String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n     *\n     * @param symbol Name of the trading pair\n     * @param interval Time interval for kline/candlestick\n     * @param onOpenCallback Callback for when the websocket connection is opened\n     * @param onMessageCallback Callback for when a message is received\n     * @param onClosingCallback Callback for when the websocket connection is closing\n     * @param onFailureCallback Callback for when an error occurs\n     * @return int - Connection ID\n     */\n    @Override\n    public int klineStream(String symbol, String interval, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@kline_%s\", baseUrl, symbol.toLowerCase(), interval));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }\n\n    /**\n     * 24hr rolling window mini-ticker statistics.\n     * These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.\n     * <br><br>\n     * &lt;symbol&gt;@miniTicker\n     * <br><br>\n     * Update Speed: Real-time\n     *\n     * @param symbol Name of the trading pair\n     * @return int - Connection ID\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-mini-ticker-stream\">\n     * https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-mini-ticker-stream</a>\n     */\n    @Override\n    public int miniTickerStream(String symbol, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return miniTickerStream(symbol.toLowerCase(), noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    /**\n     * Same as {@link #miniTickerStream(String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n     *\n     * @param symbol Name of the trading pair\n     * @param onOpenCallback Callback for when the websocket connection is opened\n     * @param onMessageCallback Callback for when a message is received\n     * @param onClosingCallback Callback for when the websocket connection is closing\n     * @param onFailureCallback Callback for when an error occurs\n     * @return int - Connection ID\n     */\n    @Override\n    public int miniTickerStream(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@miniTicker\", baseUrl, symbol.toLowerCase()));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }\n\n    /**\n     * 24hr rolling window mini-ticker statistics for all symbols that changed in an array.\n     * These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.\n     * Note that only tickers that have changed will be present in the array.\n     * <br><br>\n     * !miniTicker@arr\n     * <br><br>\n     * Update Speed: Real-time\n     *\n     * @return int - Connection ID\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#all-market-mini-tickers-stream\">\n     * https://binance-docs.github.io/apidocs/spot/en/#all-market-mini-tickers-stream</a>\n     */\n    @Override\n    public int allMiniTickerStream(WebSocketMessageCallback callback) {\n        return allMiniTickerStream(noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    /**\n     * Same as {@link #allMiniTickerStream(WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n     *\n     * @param onOpenCallback Callback for when the websocket connection is opened\n     * @param onMessageCallback Callback for when a message is received\n     * @param onClosingCallback Callback for when the websocket connection is closing\n     * @param onFailureCallback Callback for when an error occurs\n     * @return int - Connection ID\n     */\n    @Override\n    public int allMiniTickerStream(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/!miniTicker@arr\", baseUrl));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }\n\n    /**\n     * 24hr rolling window ticker statistics for a single symbol.\n     * These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.\n     * <br><br>\n     * &lt;symbol&gt;@ticker\n     * <br><br>\n     * Update Speed: Real-time\n     *\n     * @param symbol Name of the trading pair\n     * @return int - Connection ID\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-ticker-streams\">\n     * https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-ticker-streams</a>\n     */\n    @Override\n    public int symbolTicker(String symbol, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return symbolTicker(symbol.toLowerCase(), noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    /**\n     * Same as {@link #symbolTicker(String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n     *\n     * @param symbol Name of the trading pair\n     * @param onOpenCallback Callback for when the websocket connection is opened\n     * @param onMessageCallback Callback for when a message is received\n     * @param onClosingCallback Callback for when the websocket connection is closing\n     * @param onFailureCallback Callback for when an error occurs\n     * @return int - Connection ID\n     */\n    @Override\n    public int symbolTicker(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@ticker\", baseUrl, symbol.toLowerCase()));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }\n\n    /**\n     * 24hr rolling window ticker statistics for all symbols that changed in an array.\n     * These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs.\n     * Note that only tickers that have changed will be present in the array.\n     * <br><br>\n     * !ticker@arr\n     * <br><br>\n     * Update Speed: Real-time\n     *\n     * @return int - Connection ID\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#all-market-tickers-stream\">\n     * https://binance-docs.github.io/apidocs/spot/en/#all-market-tickers-stream</a>\n     */\n    @Override\n    public int allTickerStream(WebSocketMessageCallback callback) {\n        return allTickerStream(noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    /**\n     * Same as {@link #allTickerStream(WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n     *\n     * @param onOpenCallback Callback for when the websocket connection is opened\n     * @param onMessageCallback Callback for when a message is received\n     * @param onClosingCallback Callback for when the websocket connection is closing\n     * @param onFailureCallback Callback for when an error occurs\n     * @return int - Connection ID\n     */\n    @Override\n    public int allTickerStream(WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/!ticker@arr\", baseUrl));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }\n\n    /**\n     * Rolling window ticker statistics for a single symbol, computed over multiple windows.\n     * <br><br>\n     * &lt;symbol&gt;@ticker_&lt;window_size&gt;\n     * <br><br>\n     * Update Speed: Real-time\n     *\n     * @param symbol Name of the trading pair\n     * @param windowSize Window Sizes: 1h,4h\n     * @return int - Connection ID\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-rolling-window-statistics-streams\">\n     * https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-rolling-window-statistics-streams</a>\n     */\n    public int rollingWindowTicker(String symbol, String windowSize, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(symbol, String.class, \"windowSize\");\n        ArrayList<String> allowedWindowSize = new ArrayList<String>() {{\n                add(\"1h\");\n                add(\"4h\");\n            }};\n        if (!allowedWindowSize.contains(windowSize)) {\n            throw new BinanceConnectorException(String.format(\"\\\"%s\\\" is not a valid window size.\", windowSize));\n        }\n        return rollingWindowTicker(symbol.toLowerCase(), windowSize, noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    /**\n     * Same as {@link #rollingWindowTicker(String, String, WebSocketMessageCallback)} (String, WebSocketCallback)} plus accepts callbacks for all major websocket connection events.\n     *\n     * @param symbol Name of the trading pair\n     * @param onOpenCallback Callback for when the websocket connection is opened\n     * @param onMessageCallback Callback for when a message is received\n     * @param onClosingCallback Callback for when the websocket connection is closing\n     * @param onFailureCallback Callback for when an error occurs\n     * @return int - Connection ID\n     */\n    @Override\n    public int rollingWindowTicker(String symbol, String windowSize, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(symbol, String.class, \"windowSize\");\n        ArrayList<String> allowedWindowSize = new ArrayList<String>() {{\n                add(\"1h\");\n                add(\"4h\");\n            }};\n        if (!allowedWindowSize.contains(windowSize)) {\n            throw new BinanceConnectorException(String.format(\"\\\"%s\\\" is not a valid window size.\", windowSize));\n        }\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@ticker_%s\", baseUrl, symbol.toLowerCase(), windowSize));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }\n\n    /**\n     * Rolling window ticker statistics for all market symbols, computed over multiple windows.\n     * Note that only tickers that have changed will be present in the array.\n     * <br><br>\n     * !ticker_&lt;window-size&gt;@arr\n     * <br><br>\n     * Update Speed: Real-time\n     *\n     * @param windowSize Window Sizes: 1h,4h\n     * @return int - Connection ID\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#all-market-rolling-window-statistics-streams\">\n     * https://binance-docs.github.io/apidocs/spot/en/#all-market-rolling-window-statistics-streams</a>\n     */\n    @Override\n    public int allRollingWindowTicker(String windowSize, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(windowSize, String.class, \"windowSize\");\n        ArrayList<String> allowedWindowSize = new ArrayList<String>() {{\n                add(\"1h\");\n                add(\"4h\");\n            }};\n        if (!allowedWindowSize.contains(windowSize.toLowerCase())) {\n            throw new BinanceConnectorException(String.format(\"\\\"%s\\\" is not a valid window size.\", windowSize.toLowerCase()));\n        }\n        return allRollingWindowTicker(windowSize.toLowerCase(), noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    /**\n     * Same as {@link #allRollingWindowTicker(String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n     *\n     * @param windowSize Window Sizes: 1h,4h\n     * @param onOpenCallback Callback for when the websocket connection is opened\n     * @param onMessageCallback Callback for when a message is received\n     * @param onClosingCallback Callback for when the websocket connection is closing\n     * @param onFailureCallback Callback for when an error occurs\n     * @return int - Connection ID\n     */\n    @Override\n    public int allRollingWindowTicker(String windowSize, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(windowSize, String.class, \"windowSize\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/!ticker_%s@arr\", baseUrl, windowSize.toLowerCase()));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }\n\n    /**\n     * Pushes any update to the best bid or ask's price or quantity in real-time for a specified symbol.\n     * <br><br>\n     * &lt;symbol&gt;@bookTicker\n     * <br><br>\n     * Update Speed: Real-time\n     *\n     * @param symbol Name of the trading pair\n     * @return int - Connection ID\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-book-ticker-streams\">\n     * https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-book-ticker-streams</a>\n     */\n    @Override\n    public int bookTicker(String symbol, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return bookTicker(symbol.toLowerCase(), noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    /**\n     * Same as {@link #bookTicker(String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n     *\n     * @param symbol Name of the trading pair\n     * @param onOpenCallback Callback for when the websocket connection is opened\n     * @param onMessageCallback Callback for when a message is received\n     * @param onClosingCallback Callback for when the websocket connection is closing\n     * @param onFailureCallback Callback for when an error occurs\n     * @return int - Connection ID\n     */\n    @Override\n    public int bookTicker(String symbol, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@bookTicker\", baseUrl, symbol.toLowerCase()));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }\n\n    /**\n     * Top bids and asks, Valid are 5, 10, or 20.\n     * <br><br>\n     * &lt;symbol&gt;@depth&lt;levels&gt;@&lt;speed&gt;ms\n     * <br><br>\n     * Update Speed: 1000ms or 100ms\n     *\n     * @param symbol Name of the trading pair\n     * @param levels Valid are 5, 10, or 20\n     * @param speed  1000ms or 100ms\n     * @return int - Connection ID\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#partial-book-depth-streams\">\n     * https://binance-docs.github.io/apidocs/spot/en/#partial-book-depth-streams</a>\n     */\n    @Override\n    public int partialDepthStream(String symbol, int levels, int speed, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return partialDepthStream(symbol.toLowerCase(), levels, speed, noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    /**\n     * Same as {@link #partialDepthStream(String, int, int, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n     *\n     * @param symbol Name of the trading pair\n     * @param levels Valid are 5, 10, or 20\n     * @param speed  1000ms or 100ms\n     * @param onOpenCallback Callback for when the websocket connection is opened\n     * @param onMessageCallback Callback for when a message is received\n     * @param onClosingCallback Callback for when the websocket connection is closing\n     * @param onFailureCallback Callback for when an error occurs\n     * @return int - Connection ID\n     */\n    @Override\n    public int partialDepthStream(String symbol, int levels, int speed, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@depth%s@%sms\", baseUrl, symbol.toLowerCase(), levels, speed));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }\n\n    /**\n     * Order book price and quantity depth updates used to locally manage an order book.\n     * <br><br>\n     * &lt;symbol&gt;@depth@&lt;speed&gt;ms\n     * <br><br>\n     * Update Speed: 1000ms or 100ms\n     *\n     * @param symbol Name of the trading pair\n     * @param speed  1000ms or 100ms\n     * @return int - Connection ID\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#diff-depth-stream\">\n     * https://binance-docs.github.io/apidocs/spot/en/#diff-depth-stream</a>\n     */\n    @Override\n    public int diffDepthStream(String symbol, int speed, WebSocketMessageCallback callback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        return diffDepthStream(symbol.toLowerCase(), speed, noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    /**\n     * Same as {@link #diffDepthStream(String, int, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n     *\n     * @param symbol Name of the trading pair\n     * @param speed  1000ms or 100ms\n     * @param onOpenCallback Callback for when the websocket connection is opened\n     * @param onMessageCallback Callback for when a message is received\n     * @param onClosingCallback Callback for when the websocket connection is closing\n     * @param onFailureCallback Callback for when an error occurs\n     * @return int - Connection ID\n     */\n    @Override\n    public int diffDepthStream(String symbol, int speed, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s@depth@%sms\", baseUrl, symbol.toLowerCase(), speed));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }\n\n    /**\n     * User Data Streams are accessed at /ws/&lt;listenKey&gt;\n     *\n     * @param listenKey listen key obtained from this\n     *                  <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot\">endpoint</a>\n     * @return int - Connection ID\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#user-data-streams\">\n     * https://binance-docs.github.io/apidocs/spot/en/#user-data-streams</a>\n     */\n    @Override\n    public int listenUserStream(String listenKey, WebSocketMessageCallback callback) {\n        return listenUserStream(listenKey, noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    /**\n     * Same as {@link #listenUserStream(String, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n     *\n     * @param listenKey listen key obtained from this\n     *                  <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot\">endpoint</a>\n     * @param onOpenCallback Callback for when the websocket connection is opened\n     * @param onMessageCallback Callback for when a message is received\n     * @param onClosingCallback Callback for when the websocket connection is closing\n     * @param onFailureCallback Callback for when an error occurs\n     * @return int - Connection ID\n     */\n    @Override\n    public int listenUserStream(String listenKey, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        Request request = RequestBuilder.buildWebSocketRequest(String.format(\"%s/ws/%s\", baseUrl, listenKey));\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }\n\n    /**\n     * Combined streams are accessed at /stream?streams=&lt;streamName1&gt;/&lt;streamName2&gt;/&lt;streamName3&gt;\n     *\n     * @param streams ArrayList of stream names to be combined <br>\n     * @return int - Connection ID\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#websocket-market-streams\">\n     * https://binance-docs.github.io/apidocs/spot/en/#websocket-market-streams</a>\n     */\n    @Override\n    public int combineStreams(ArrayList<String> streams, WebSocketMessageCallback callback) {\n        return combineStreams(streams, noopOpenCallback, callback, noopClosingCallback, noopClosedCallback, noopFailureCallback);\n    }\n\n    /**\n     * Same as {@link #combineStreams(ArrayList, WebSocketMessageCallback)} plus accepts callbacks for all major websocket connection events.\n     *\n     * @param streams ArrayList of stream names to be combined <br>\n     * @param onOpenCallback Callback for when the websocket connection is opened\n     * @param onMessageCallback Callback for when a message is received\n     * @param onClosingCallback Callback for when the websocket connection is closing\n     * @param onFailureCallback Callback for when an error occurs\n     * @return int - Connection ID\n     */\n    @Override\n    public int combineStreams(ArrayList<String> streams, WebSocketOpenCallback onOpenCallback, WebSocketMessageCallback onMessageCallback, WebSocketClosingCallback onClosingCallback, WebSocketClosedCallback onClosedCallback, WebSocketFailureCallback onFailureCallback) {\n        String url = UrlBuilder.buildStreamUrl(baseUrl, streams);\n        Request request = RequestBuilder.buildWebSocketRequest(url);\n        return createConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request);\n    }\n\n    /**\n     * Closes a specific stream based on stream ID.\n     *\n     * @param connectionId The connection ID to close.\n     */\n    @Override\n    public void closeConnection(int connectionId) {\n        if (connections.containsKey(connectionId)) {\n            connections.get(connectionId).close();\n            logger.info(\"Closing Connection ID {}\", connectionId);\n            connections.remove(connectionId);\n        } else {\n            logger.info(\"Connection ID {} does not exist!\", connectionId);\n        }\n    }\n\n    /**\n     * Closes all streams\n     */\n    @Override\n    public void closeAllConnections() {\n        if (!connections.isEmpty()) {\n            logger.info(\"Closing {} connections(s)\", connections.size());\n            Iterator<Map.Entry<Integer, WebSocketConnection>> iter = connections.entrySet().iterator();\n            while (iter.hasNext()) {\n                WebSocketConnection connection = iter.next().getValue();\n                connection.close();\n                iter.remove();\n            }\n        }\n\n        if (connections.isEmpty()) {\n            client.dispatcher().executorService().shutdown();\n            logger.info(\"All connections are closed!\");\n        }\n    }\n\n    private int createConnection(\n            WebSocketOpenCallback onOpenCallback,\n            WebSocketMessageCallback onMessageCallback,\n            WebSocketClosingCallback onClosingCallback,\n            WebSocketClosedCallback onClosedCallback,\n            WebSocketFailureCallback onFailureCallback,\n            Request request\n    ) {\n        WebSocketConnection connection = new WebSocketConnection(onOpenCallback, onMessageCallback, onClosingCallback, onClosedCallback, onFailureCallback, request, client);\n        connection.connect();\n        int connectionId = connection.getConnectionId();\n        connections.put(connectionId, connection);\n        return connectionId;\n    }\n}", "super_interfaces": ["WebSocketStreamClient"], "fields": [{"attribute_expression": "private static final Logger logger = LoggerFactory.getLogger(WebSocketStreamClientImpl.class);", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "Logger", "name": "logger = LoggerFactory.getLogger(WebSocketStreamClientImpl.class)", "syntax_pass": true}, {"attribute_expression": "private static final OkHttpClient client = WebSocketStreamHttpClientSingleton.getHttpClient();", "docstring": "", "modifiers": "private static final", "marker_annotations": [], "non_marker_annotations": ["private", "static", "final"], "comments": [], "type": "OkHttpClient", "name": "client = WebSocketStreamHttpClientSingleton.getHttpClient()", "syntax_pass": true}, {"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final Map<Integer, WebSocketConnection> connections = new HashMap<>();", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Map<Integer, WebSocketConnection>", "name": "connections = new HashMap<>()", "syntax_pass": true}, {"attribute_expression": "private final WebSocketOpenCallback noopOpenCallback = response -> { };", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WebSocketOpenCallback", "name": "noopOpenCallback = response -> { }", "syntax_pass": true}, {"attribute_expression": "private final WebSocketClosingCallback noopClosingCallback = (code, reason) -> { };", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WebSocketClosingCallback", "name": "noopClosingCallback = (code, reason) -> { }", "syntax_pass": true}, {"attribute_expression": "private final WebSocketClosedCallback noopClosedCallback = (code, reason) -> { };", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WebSocketClosedCallback", "name": "noopClosedCallback = (code, reason) -> { }", "syntax_pass": true}, {"attribute_expression": "private final WebSocketFailureCallback noopFailureCallback = (throwable, response) -> { };", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "WebSocketFailureCallback", "name": "noopFailureCallback = (throwable, response) -> { }", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/WebSocketApiModuleFactory.java.WebSocketApiModuleFactory", "name": "WebSocketApiModuleFactory", "file_path": "src/main/java/com/binance/connector/client/impl/WebSocketApiModuleFactory.java", "superclasses": "", "methods": ["[]WebSocketApiModuleFactory()", "[WebSocketApiModule]obtainModule(WebSocketApiModule,ModuleCreator)", "[WebSocketApiModule]build(Category,WebSocketApiRequestHandler)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/WebSocketApiModuleFactory.java.WebSocketApiModuleFactory.[]WebSocketApiModuleFactory()", "src/main/java/com/binance/connector/client/impl/WebSocketApiModuleFactory.java.WebSocketApiModuleFactory.[WebSocketApiModule]obtainModule(WebSocketApiModule,ModuleCreator)", "src/main/java/com/binance/connector/client/impl/WebSocketApiModuleFactory.java.WebSocketApiModuleFactory.[WebSocketApiModule]build(Category,WebSocketApiRequestHandler)"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public final class WebSocketApiModuleFactory {\n    \n    private static WebSocketApiAccount wsApiAccount;\n    private static WebSocketApiAuth wsApiAuth;\n    private static WebSocketApiGeneral wsApiGeneral;\n    private static WebSocketApiMarket wsApiMarket;\n    private static WebSocketApiTrade wsApiTrade;\n    private static WebSocketApiUserDataStream wsApiUserDataStream;\n\n    private WebSocketApiModuleFactory() {\n        // Private constructor to prevent instantiation\n    }\n\n    private interface ModuleCreator {\n        WebSocketApiModule create();\n    }\n\n    private static WebSocketApiModule obtainModule(WebSocketApiModule module, ModuleCreator creator) {\n        if (module == null) {\n            module = creator.create();\n        }\n        return module;\n    }\n\n    /**\n     * Build WebSocketApiModule for the given WebSocket API category if it does not exist yet.\n     * Otherwise, return the existing one.\n     * \n     * @param category WebSocket API Category\n     * @param requestHandler WebSocketApiRequestHandler\n     * @return WebSocketApiModule\n     */\n    public static WebSocketApiModule build(Category category, WebSocketApiRequestHandler requestHandler) {\n        switch (category) {\n            case ACCOUNT:\n                return obtainModule(wsApiAccount, () -> new WebSocketApiAccount(requestHandler));\n            case AUTH:\n                return obtainModule(wsApiAuth, () -> new WebSocketApiAuth(requestHandler));\n            case GENERAL:\n                return obtainModule(wsApiGeneral, () -> new WebSocketApiGeneral(requestHandler));\n            case MARKET:\n                return obtainModule(wsApiMarket, () -> new WebSocketApiMarket(requestHandler));\n            case TRADE:\n                return obtainModule(wsApiTrade, () -> new WebSocketApiTrade(requestHandler));\n            case USER_DATA_STREAM:\n                return obtainModule(wsApiUserDataStream, () -> new WebSocketApiUserDataStream(requestHandler));\n            default:\n                throw new BinanceConnectorException(\"Unknown WebSocket API Category: \" + category);\n        }\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private static WebSocketApiAccount wsApiAccount;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketApiAccount", "name": "wsApiAccount", "syntax_pass": true}, {"attribute_expression": "private static WebSocketApiAuth wsApiAuth;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketApiAuth", "name": "wsApiAuth", "syntax_pass": true}, {"attribute_expression": "private static WebSocketApiGeneral wsApiGeneral;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketApiGeneral", "name": "wsApiGeneral", "syntax_pass": true}, {"attribute_expression": "private static WebSocketApiMarket wsApiMarket;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketApiMarket", "name": "wsApiMarket", "syntax_pass": true}, {"attribute_expression": "private static WebSocketApiTrade wsApiTrade;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketApiTrade", "name": "wsApiTrade", "syntax_pass": true}, {"attribute_expression": "private static WebSocketApiUserDataStream wsApiUserDataStream;", "docstring": "", "modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "type": "WebSocketApiUserDataStream", "name": "wsApiUserDataStream", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket", "name": "WebSocketApiMarket", "file_path": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java", "superclasses": "", "methods": ["[]WebSocketApiMarket(WebSocketApiRequestHandler)", "[void]depth(String,JSONObject)", "[void]recentTrades(String,JSONObject)", "[void]historicalTrades(String,JSONObject)", "[void]aggTrades(String,JSONObject)", "[void]klines(String,String,JSONObject)", "[void]uiKlines(String,String,JSONObject)", "[void]avgPrice(String,JSONObject)", "[void]ticker24H(JSONObject)", "[void]ticker(JSONObject)", "[void]tickerPrice(JSONObject)", "[void]tickerBook(JSONObject)", "[void]tickerTradingDay(JSONObject)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[]WebSocketApiMarket(WebSocketApiRequestHandler)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]depth(String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]recentTrades(String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]historicalTrades(String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]aggTrades(String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]klines(String,String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]uiKlines(String,String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]avgPrice(String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]ticker24H(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]ticker(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]tickerPrice(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]tickerBook(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiMarket.java.WebSocketApiMarket.[void]tickerTradingDay(JSONObject)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Market Requests</h2>\nAll requests under the\n<a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#market-data-requests\">Market requests</a>\nsection of the WebSocket API documentation will be implemented in this class.\n<br>\nResponse will be returned as callback.\n", "original_string": "public class WebSocketApiMarket implements WebSocketApiModule {\n    private WebSocketApiRequestHandler handler;\n\n    public WebSocketApiMarket(WebSocketApiRequestHandler handler) {\n        this.handler = handler;\n    }\n\n    /**\n     * Get current order book.<br>\n     * \n     * Note that this request returns limited market depth.<br>\n     * \n     * If you need to continuously monitor order book updates, please consider using WebSocket Streams:<br>\n     * &lt;symbol&gt;@depth&lt;levels&gt;<br>\n     * &lt;symbol&gt;@depth<br>\n     * \n     * @param symbol String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * limit -- optional/int -- Default 100; max 5000. <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#order-book\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#order-book</a>\n     */\n    public void depth(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.publicRequest(\"depth\", parameters);\n    }\n\n    /**\n     * Get recent trades.\n     * \n     * @param symbol String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * limit -- optional/int -- Default 100; max 1000. <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#recent-trades\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#recent-trades</a>\n     */\n    public void recentTrades(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.publicRequest(\"trades.recent\", parameters);\n    }\n\n\n    /**\n     * Get historical trades.<br>\n     * \n     * If fromId is not specified, the most recent trades are returned.<br>\n     * \n     * @param symbol String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * fromId -- optional/int -- Trade ID to begin at. <br>\n     * limit -- optional/int -- Default 500; max 1000. <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#historical-trades\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#historical-trades</a>\n     */\n    public void historicalTrades(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.publicRequest(\"trades.historical\", parameters);\n    }\n\n    /**\n     * Get aggregate trades.<br>\n     * \n     * An aggregate trade (aggtrade) represents one or more individual trades.<br>\n     * Trades that fill at the same time, from the same taker order, with the same price \u2013 those trades are collected into an aggregate trade with total quantity of the individual trades.<br>\n     * \n     * @param symbol String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * fromId -- optional/int -- Trade ID to begin at. <br>\n     * limit -- optional/int -- Default 500; max 1000. <br>\n     * startTime -- optional/int <br>\n     * endTime -- optional/int <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#aggregate-trades\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#aggregate-trades</a>\n     */\n    public void aggTrades(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.publicRequest(\"trades.aggregate\", parameters);\n    }\n\n\n    /**\n     * Get klines (candlestick bars).<br>\n     * \n     * Klines are uniquely identified by their open and close time.<br>\n     * \n     * @param symbol String\n     * @param interval String -- Kline interval.\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * startTime -- optional/int <br>\n     * endTime -- optional/int <br>\n     * limit -- optional/int -- Default 500; max 1000. <br>\n     * timeZone -- optional/String --  Default: 0 (UTC) <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#klines\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#klines</a>\n     */\n    public void klines(String symbol, String interval, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(interval, String.class, \"interval\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"interval\", interval);\n\n        this.handler.publicRequest(\"klines\", parameters);\n    }\n\n    /**\n     * Get klines (candlestick bars) optimized for presentation.<br>\n     * \n     * This request is similar to klines, having the same parameters and response. uiKlines return modified kline data, optimized for presentation of candlestick charts.<br>\n     * \n     * @param symbol String\n     * @param interval String -- Kline interval.\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * startTime -- optional/int <br>\n     * endTime -- optional/int <br>\n     * limit -- optional/int -- Default 500; max 1000. <br>\n     * timeZone -- optional/String --  Default: 0 (UTC) <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#ui-klines\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#ui-klines</a>\n     */\n    public void uiKlines(String symbol, String interval, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(interval, String.class, \"interval\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"interval\", interval);\n\n        this.handler.publicRequest(\"uiKlines\", parameters);\n    }\n\n    /**\n     * Get current average price for a symbol.<br>\n     * \n     * @param symbol String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#current-average-price\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#current-average-price</a>\n     */\n    public void avgPrice(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.publicRequest(\"avgPrice\", parameters);\n    }\n\n    /**\n     * Get 24-hour rolling window price change statistics.<br>\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * symbol -- optional/String -- Query ticker for a single symbol<br>\n     * symbols -- optional/Array of String -- Query ticker for multiple symbols<br>\n     * type -- optional/String -- Ticker type: FULL (default) or MINI<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#24hr-ticker-price-change-statistics\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#24hr-ticker-price-change-statistics</a>\n     */\n    public void ticker24H(JSONObject parameters) {\n        ParameterChecker.checkOnlyOneOfParameters(parameters, \"symbol\", \"symbols\");\n        this.handler.publicRequest(\"ticker.24hr\", parameters);\n    }\n\n    /**\n     * Get rolling window price change statistics with a custom window.<br>\n     * \n     * Note: <br>\n     * Window size precision is limited to 1 minute.<br>\n     * While the closeTime is the current time of the request, openTime always start on a minute boundary.<br>\n     * As such, the effective window might be up to 59999 ms wider than the requested windowSize.<br>\n     * \n     * Either symbol or symbols must be specified.<br>\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * symbol -- optional/String -- Query ticker for a single symbol<br>\n     * symbols -- optional/Array of String -- Query ticker for multiple symbols<br>\n     * type -- optional/String -- Ticker type: FULL (default) or MINI<br>\n     * windowSize -- optional/int -- Default \"1d\"<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#rolling-window-price-change-statistics\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#rolling-window-price-change-statistics</a>\n     */\n    public void ticker(JSONObject parameters) {\n        ParameterChecker.checkOnlyOneOfParameters(parameters, \"symbol\", \"symbols\");\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"symbol\", \"symbols\");\n        this.handler.publicRequest(\"ticker\", parameters);\n    }\n\n    /**\n     * Get the latest market price for a symbol.\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * symbol -- optional/String -- Query ticker for a single symbol<br>\n     * symbols -- optional/Array of String -- Query ticker for multiple symbols<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#symbol-price-ticker\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#symbol-price-ticker</a>\n     */\n    public void tickerPrice(JSONObject parameters) {\n        ParameterChecker.checkOnlyOneOfParameters(parameters, \"symbol\", \"symbols\");\n        this.handler.publicRequest(\"ticker.price\", parameters);\n    }\n\n    /**\n     * Get the current best price and quantity on the order book.\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * symbol -- optional/String -- Query ticker for a single symbol<br>\n     * symbols -- optional/Array of String -- Query ticker for multiple symbols<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#symbol-order-book-ticker\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#symbol-order-book-ticker</a>\n     */\n    public void tickerBook(JSONObject parameters) {\n        ParameterChecker.checkOnlyOneOfParameters(parameters, \"symbol\", \"symbols\");\n        this.handler.publicRequest(\"ticker.book\", parameters);\n    }\n\n    /**\n     * Get the current best price and quantity on the order book.<br>\n     * \n     * Note: Either symbol or symbols must be specified.<br>\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * symbol -- optional/String -- Query ticker for a single symbol<br>\n     * symbols -- optional/Array of String -- Query ticker for multiple symbols<br>\n     * timeZone -- optional/String -- Default: 0 (UTC) <br>\n     * type -- optional/String -- Ticker type: FULL (default) or MINI<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#trading-day-ticker\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#trading-day-ticker</a>\n     */\n    public void tickerTradingDay(JSONObject parameters) {\n        ParameterChecker.checkOnlyOneOfParameters(parameters, \"symbol\", \"symbols\");\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"symbol\", \"symbols\");\n        this.handler.publicRequest(\"ticker.tradingDay\", parameters);\n    }\n\n}", "super_interfaces": ["WebSocketApiModule"], "fields": [{"attribute_expression": "private WebSocketApiRequestHandler handler;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "WebSocketApiRequestHandler", "name": "handler", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java.WebSocketApiUserDataStream", "name": "WebSocketApiUserDataStream", "file_path": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java", "superclasses": "", "methods": ["[]WebSocketApiUserDataStream(WebSocketApiRequestHandler)", "[void]userDataStreamStart(JSONObject)", "[void]userDataStreamPing(String,JSONObject)", "[void]userDataStreamStop(String,JSONObject)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java.WebSocketApiUserDataStream.[]WebSocketApiUserDataStream(WebSocketApiRequestHandler)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java.WebSocketApiUserDataStream.[void]userDataStreamStart(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java.WebSocketApiUserDataStream.[void]userDataStreamPing(String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiUserDataStream.java.WebSocketApiUserDataStream.[void]userDataStreamStop(String,JSONObject)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>User Data Stream Requests</h2>\nAll requests under the\n<a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#user-data-stream-requests\">User Data Stream requests</a>\nsection of the WebSocket API documentation will be implemented in this class.\n<br>\nResponse will be returned as callback.\n", "original_string": "public class WebSocketApiUserDataStream implements WebSocketApiModule {\n    \n    private WebSocketApiRequestHandler handler;\n\n    public WebSocketApiUserDataStream(WebSocketApiRequestHandler handler) {\n        this.handler = handler;\n    }\n\n    /**\n     * Start a new user data stream.<br>\n     * \n     * The response will output a listen key that can be subscribed through on the WebSocket stream afterwards.<br>\n     * \n     * Note: the stream will close in 60 minutes unless userDataStream.ping requests are sent regularly.<br>\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#start-user-data-stream-user_stream\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#start-user-data-stream-user_stream</a>\n     */\n    public void userDataStreamStart(JSONObject parameters) {\n        this.handler.apiRequest(\"userDataStream.start\", parameters);\n    }\n\n    /**\n     * Ping a user data stream to keep it alive.<br>\n     * \n     * User data streams close automatically after 60 minutes, even if you're listening to them on WebSocket Streams.<br>\n     * In order to keep the stream open, you have to regularly send pings using the userDataStream.ping request.<br>\n     * It is recommended to send a ping once every 30 minutes.<br>\n     * \n     * Note: the stream will close in 60 minutes unless userDataStream.ping requests are sent regularly.<br>\n     * \n     * @param listenKey -- required/String <br>\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#ping-user-data-stream-user_stream\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#ping-user-data-stream-user_stream</a>\n     */\n    public void userDataStreamPing(String listenKey, JSONObject parameters) {\n        ParameterChecker.checkParameterType(listenKey, String.class, \"listenKey\");\n        parameters = JSONParser.addKeyValue(parameters, \"listenKey\", listenKey);\n        this.handler.apiRequest(\"userDataStream.ping\", parameters);\n    }\n\n    /**\n     * Explicitly stop and close the user data stream.<br>\n     * \n     * @param listenKey -- required/String <br>\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#stop-user-data-stream-user_stream\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#stop-user-data-stream-user_stream</a>\n     */\n    public void userDataStreamStop(String listenKey, JSONObject parameters) {\n        ParameterChecker.checkParameterType(listenKey, String.class, \"listenKey\");\n        parameters = JSONParser.addKeyValue(parameters, \"listenKey\", listenKey);\n        this.handler.apiRequest(\"userDataStream.stop\", parameters);\n    }\n}", "super_interfaces": ["WebSocketApiModule"], "fields": [{"attribute_expression": "private WebSocketApiRequestHandler handler;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "WebSocketApiRequestHandler", "name": "handler", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java.WebSocketApiGeneral", "name": "WebSocketApiGeneral", "file_path": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java", "superclasses": "", "methods": ["[]WebSocketApiGeneral(WebSocketApiRequestHandler)", "[void]ping(JSONObject)", "[void]serverTime(JSONObject)", "[void]exchangeInfo(JSONObject)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java.WebSocketApiGeneral.[]WebSocketApiGeneral(WebSocketApiRequestHandler)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java.WebSocketApiGeneral.[void]ping(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java.WebSocketApiGeneral.[void]serverTime(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiGeneral.java.WebSocketApiGeneral.[void]exchangeInfo(JSONObject)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>General Requests</h2>\nAll requests under the\n<a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#general-info\">General requests</a>\nsection of the WebSocket API documentation will be implemented in this class.\n<br>\nResponse will be returned as callback.\n", "original_string": "public class WebSocketApiGeneral implements WebSocketApiModule {\n    private WebSocketApiRequestHandler handler;\n\n    public WebSocketApiGeneral(WebSocketApiRequestHandler handler) {\n        this.handler = handler;\n    }\n\n    /**\n     * Test connectivity to the WebSocket API.<br>\n     * Note:<br>\n     * You can use regular WebSocket ping frames to test connectivity as well, WebSocket API will respond with pong frames as soon as possible.<br>\n     * ping request along with time is a safe way to test request-response handling in your application.<br>\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#test-connectivity\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#test-connectivity</a>\n     */\n    public void ping(JSONObject parameters) {\n        this.handler.publicRequest(\"ping\", parameters);\n    }\n\n    /**\n     * Test connectivity to the WebSocket API and get the current server time.\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#check-server-time\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#check-server-time</a>\n     */\n    public void serverTime(JSONObject parameters) {\n        this.handler.publicRequest(\"time\", parameters);\n    }\n\n    /**\n     * Query current exchange trading rules, rate limits, and symbol information.<br>\n     * \n     * Notes:<br>\n     * Without parameters, exchangeInfo displays all symbols with [\"SPOT, \"MARGIN\", \"LEVERAGED\"] permissions.<br>\n     * In order to list all active symbols on the exchange, you need to explicitly request all permissions.<br>\n     * <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#enum-definitions\">Available Permissions</a>\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * symbol -- optional/String <br>\n     * symbols -- optional/Array of String <br>\n     * permissions -- optional/Array of String  <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#exchange-information\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#exchange-information</a>\n     */\n    public void exchangeInfo(JSONObject parameters) {\n        ParameterChecker.checkOnlyOneOfParameters(parameters, \"symbol\", \"symbols\", \"permissions\");\n        this.handler.publicRequest(\"exchangeInfo\", parameters);\n    }\n\n}", "super_interfaces": ["WebSocketApiModule"], "fields": [{"attribute_expression": "private WebSocketApiRequestHandler handler;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "WebSocketApiRequestHandler", "name": "handler", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount", "name": "WebSocketApiAccount", "file_path": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java", "superclasses": "", "methods": ["[]WebSocketApiAccount(WebSocketApiRequestHandler)", "[void]accountStatus(JSONObject)", "[void]accountRateLimitsOrders(JSONObject)", "[void]accountAllOrders(String,JSONObject)", "[void]accountAllOcoOrders(JSONObject)", "[void]accountTradeHistory(String,JSONObject)", "[void]accountPreventedMatches(String,JSONObject)", "[void]accountAllocations(String,JSONObject)", "[void]accountCommissionRates(String,JSONObject)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[]WebSocketApiAccount(WebSocketApiRequestHandler)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountStatus(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountRateLimitsOrders(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountAllOrders(String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountAllOcoOrders(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountTradeHistory(String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountPreventedMatches(String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountAllocations(String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAccount.java.WebSocketApiAccount.[void]accountCommissionRates(String,JSONObject)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Account Requests</h2>\nAll requests under the\n<a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-requests\">Account requests</a>\nsection of the WebSocket API documentation will be implemented in this class.\n<br>\nResponse will be returned as callback.\n", "original_string": "public class WebSocketApiAccount implements WebSocketApiModule {\n    \n    private WebSocketApiRequestHandler handler;\n\n    public WebSocketApiAccount(WebSocketApiRequestHandler handler) {\n        this.handler = handler;\n    }\n\n    /**\n     * Query account information.\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000 <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-information-user_data\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#account-information-user_data</a>\n     */\n    public void accountStatus(JSONObject parameters) {\n        this.handler.signedRequest(\"account.status\", parameters);\n    }\n\n    /**\n     * Query your current order rate limit.\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000 <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-order-rate-limits-user_data\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#account-order-rate-limits-user_data</a>\n     */\n    public void accountRateLimitsOrders(JSONObject parameters) {\n        this.handler.signedRequest(\"account.rateLimits.orders\", parameters);\n    }\n\n    /**\n     * Query information about all your orders \u2013 active, canceled, filled \u2013 filtered by time range.<br>\n     * \n     * If startTime and/or endTime are specified, orderId is ignored.<br>\n     * \n     * @param symbol String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * orderId -- optional/int -- Order ID to begin at<br>\n     * startTime -- optional/int -- Timestamp in ms <br>\n     * endTime -- optional/int -- Timestamp in ms <br>\n     * limit -- optional/int -- Default 500; max 1000. <br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000 <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-order-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#account-order-history-user_data</a>\n     */\n    public void accountAllOrders(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n\n        this.handler.signedRequest(\"allOrders\", parameters);\n    }\n\n    /**\n     * Query information about all your OCOs, filtered by time range.<br>\n     * \n     * If startTime and/or endTime are specified, fromId is ignored.<br>\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * fromId -- optional/int -- Order list ID to begin at<br>\n     * startTime -- optional/int -- Timestamp in ms <br>\n     * endTime -- optional/int -- Timestamp in ms <br>\n     * limit -- optional/int -- Default 500; max 1000. <br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000 <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-oco-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#account-oco-history-user_data</a>\n     */\n    public void accountAllOcoOrders(JSONObject parameters) {\n        this.handler.signedRequest(\"allOrderLists\", parameters);\n    }\n\n    /**\n     * Query information about all your trades, filtered by time range.<br>\n     * \n     * @param symbol String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * orderId -- optional/int -- Order list ID to begin at<br>\n     * startTime -- optional/int -- Timestamp in ms <br>\n     * endTime -- optional/int -- Timestamp in ms <br>\n     * fromId -- optional/int -- Trade ID to begin at<br>\n     * limit -- optional/int -- Default 500; max 1000. <br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000 <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-trade-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#account-trade-history-user_data</a>\n     */\n    public void accountTradeHistory(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n\n        this.handler.signedRequest(\"myTrades\", parameters);\n    }\n\n    /**\n     * Displays the list of orders that were expired because of STP trigger.<br>\n     * \n     * @param symbol String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * preventedMatchId -- optional/long <br>\n     * orderId -- optional/long <br>\n     * fromPreventedMatchId -- optional/long <br>\n     * limit -- optional/int -- Default 500; max 1000. <br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000 <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-prevented-matches-user_data\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#account-prevented-matches-user_data</a>\n     */\n    public void accountPreventedMatches(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"preventedMatchId\", \"orderId\");\n        ParameterChecker.checkOnlyOneOfParameters(parameters, \"preventedMatchId\", \"orderId\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n\n        this.handler.signedRequest(\"myPreventedMatches\", parameters);\n    }\n\n    /**\n     * Retrieves allocations resulting from SOR order placement.<br>\n     * \n     * @param symbol String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * startTime -- optional/long -- Timestamp in ms <br>\n     * endTime -- optional/long -- Timestamp in ms <br>\n     * fromAllocationId -- optional/int <br>\n     * limit -- optional/int -- Default 500; max 1000. <br>\n     * orderId -- optional/long <br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000 <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-allocations-user_data\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#account-allocations-user_data</a>\n     */\n    public void accountAllocations(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n\n        this.handler.signedRequest(\"myAllocations\", parameters);\n    }\n\n    /**\n     * Get current account commission rates. <br>\n     * \n     * @param symbol String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#account-commission-rates-user_data\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#account-commission-rates-user_data</a>\n     */\n    public void accountCommissionRates(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n\n        this.handler.signedRequest(\"account.commission\", parameters);\n    }\n}", "super_interfaces": ["WebSocketApiModule"], "fields": [{"attribute_expression": "private WebSocketApiRequestHandler handler;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "WebSocketApiRequestHandler", "name": "handler", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade", "name": "WebSocketApiTrade", "file_path": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java", "superclasses": "", "methods": ["[]WebSocketApiTrade(WebSocketApiRequestHandler)", "[void]newOrder(String,String,String,JSONObject)", "[void]testNewOrder(String,String,String,JSONObject)", "[void]getOrder(String,JSONObject)", "[void]cancelOrder(String,JSONObject)", "[void]cancelReplaceOrder(String,String,String,String,JSONObject)", "[void]getOpenOrders(JSONObject)", "[void]cancelAllOpenOrders(String,JSONObject)", "[void]newOcoOrder(String,String,double,double,JSONObject)", "[void]getOcoOrder(JSONObject)", "[void]cancelOcoOrder(String,JSONObject)", "[void]getOpenOcoOrders(JSONObject)", "[void]newSorOrder(String,String,String,double,JSONObject)", "[void]testNewSorOrder(String,String,String,double,JSONObject)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[]WebSocketApiTrade(WebSocketApiRequestHandler)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]newOrder(String,String,String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]testNewOrder(String,String,String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]getOrder(String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]cancelOrder(String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]cancelReplaceOrder(String,String,String,String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]getOpenOrders(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]cancelAllOpenOrders(String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]newOcoOrder(String,String,double,double,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]getOcoOrder(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]cancelOcoOrder(String,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]getOpenOcoOrders(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]newSorOrder(String,String,String,double,JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiTrade.java.WebSocketApiTrade.[void]testNewSorOrder(String,String,String,double,JSONObject)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Trading Requests</h2>\nAll requests under the\n<a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#trading-requests\">Trading requests</a>\nsection of the WebSocket API documentation will be implemented in this class.\n<br>\nResponse will be returned as callback.\n", "original_string": "public class WebSocketApiTrade implements WebSocketApiModule {\n    private WebSocketApiRequestHandler handler;\n\n    public WebSocketApiTrade(WebSocketApiRequestHandler handler) {  \n        this.handler = handler;\n    }\n\n    /**\n     * Send in a new order.<br>\n     * \n     * Additional mandatory parameters (*) are determined by the new order type.<br>\n     * \n     * @param symbol String\n     * @param side String -- BUY or SELL\n     * @param type String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * timeInForce -- optional/String <br>\n     * price -- optional/double <br>\n     * quantity -- optional/double <br>\n     * quoteOrderQty -- optional/double <br>\n     * newClientOrderId -- optional/String -- Arbitrary unique ID among open orders. Automatically generated if not sent<br>\n     * newOrderRespType -- optional/String -- Select response format: ACK, RESULT, FULL. MARKET and LIMIT orders use FULL by default, other order types default to ACK.<br>\n     * stopPrice -- optional/double <br>\n     * trailingDelta -- optional/int -- see https://github.com/binance/binance-spot-api-docs/blob/master/faqs/trailing-stop-faq.md<br>\n     * icebergQty -- optional/double <br>\n     * strategyId -- optional/int -- Arbitrary numeric value identifying the order within an order strategy.<br>\n     * strategyType -- optional/int -- Arbitrary numeric value identifying the order strategy. Values smaller than 1000000 are reserved and cannot be used.<br>\n     * selfTradePreventionMode -- optional/String -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#place-new-order-trade\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#place-new-order-trade</a>\n     */\n    public void newOrder(String symbol, String side, String type, JSONObject parameters) {\n\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(side, String.class, \"side\");\n        ParameterChecker.checkParameterType(type, String.class, \"type\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"side\", side);\n        parameters = JSONParser.addKeyValue(parameters, \"type\", type);\n        \n        this.handler.signedRequest(\"order.place\", parameters);\n    }\n\n    /**\n     * Test order placement.<br>\n     * \n     * Validates new order parameters and verifies your signature but does not send the order into the matching engine.<br>\n     * Additional mandatory parameters (*) are determined by the new order type.<br>\n     * \n     * @param symbol String\n     * @param side String -- BUY or SELL\n     * @param type String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * timeInForce -- optional/String <br>\n     * price -- optional/double <br>\n     * quantity -- optional/double <br>\n     * quoteOrderQty -- optional/double <br>\n     * newClientOrderId -- optional/String -- Arbitrary unique ID among open orders. Automatically generated if not sent<br>\n     * newOrderRespType -- optional/String -- Select response format: ACK, RESULT, FULL. MARKET and LIMIT orders use FULL by default, other order types default to ACK.<br>\n     * stopPrice -- optional/double <br>\n     * trailingDelta -- optional/int -- see https://github.com/binance/binance-spot-api-docs/blob/master/faqs/trailing-stop-faq.md<br>\n     * icebergQty -- optional/double <br>\n     * strategyId -- optional/int -- Arbitrary numeric value identifying the order within an order strategy.<br>\n     * strategyType -- optional/int -- Arbitrary numeric value identifying the order strategy. Values smaller than 1000000 are reserved and cannot be used.<br>\n     * selfTradePreventionMode -- optional/String -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\n     * computeCommissionRates -- optional/boolean -- Default: false.<br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#test-new-order-trade\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#test-new-order-trade</a>\n     */\n    public void testNewOrder(String symbol, String side, String type, JSONObject parameters) {\n\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(side, String.class, \"side\");\n        ParameterChecker.checkParameterType(type, String.class, \"type\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"side\", side);\n        parameters = JSONParser.addKeyValue(parameters, \"type\", type);\n        \n        this.handler.signedRequest(\"order.test\", parameters);\n    }\n\n    /**\n     * Check execution status of an order.<br>\n     * \n     * If both orderId and origClientOrderId parameters are specified, only orderId is used and origClientOrderId is ignored.<br>\n     * \n     * @param symbol String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * orderId -- optional/int -- Lookup order by orderId<br>\n     * origClientOrderId -- optional/String -- Lookup order by clientOrderId<br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#query-order-user_data\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#query-order-user_data</a>\n     */\n    public void getOrder(String symbol, JSONObject parameters) {\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"orderId\", \"origClientOrderId\");\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.signedRequest(\"order.status\", parameters);\n    }\n\n    /**\n     * Cancel an active order.<br>\n     * \n     * If both orderId and origClientOrderId parameters are specified, only orderId is used and origClientOrderId is ignored.<br>\n     * \n     * @param symbol String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * orderId -- optional/int -- Cancel order by orderId<br>\n     * origClientOrderId -- optional/String -- Cancel order by clientOrderId<br>\n     * newClientOrderId -- optional/String -- New ID for the canceled order. Automatically generated if not sent<br>\n     * cancelRestrictions -- optional/enum -- Supported values: ONLY_NEW - Cancel will succeed if the order status is NEW. ONLY_PARTIALLY_FILLED - Cancel will succeed if order status is PARTIALLY_FILLED.<br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-order-trade\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-order-trade</a>\n     */\n    public void cancelOrder(String symbol, JSONObject parameters) {\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"orderId\", \"origClientOrderId\");\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.signedRequest(\"order.cancel\", parameters);\n    }\n\n    /**\n     * Cancel an existing order and immediately place a new order instead of the canceled one.<br>\n     * \n     * Similar to the order.place request, additional mandatory parameters (*) are determined by the new order type.<br>\n     * If both cancelOrderId and cancelOrigClientOrderId parameters are specified, only cancelOrderId is used and cancelOrigClientOrderId is ignored.<br>\n     * \n     * @param symbol String\n     * @param cancelReplaceMode String -- STOP_ON_FAILURE or ALLOW_FAILURE\n     * @param side String -- BUY or SELL\n     * @param type String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * cancelOrderId -- optional/int -- Cancel order by orderId<br>\n     * cancelOrigClientOrderId -- optional/String -- Cancel order by clientOrderId<br>\n     * cancelNewClientOrderId -- optional/String -- New ID for the canceled order. Automatically generated if not sent<br>\n     * timeInForce -- optional/String <br>\n     * price -- optional/double <br>\n     * quantity -- optional/double <br>\n     * quoteOrderQty -- optional/double <br>\n     * newClientOrderId -- optional/String -- Arbitrary unique ID among open orders. Automatically generated if not sent<br>\n     * newOrderRespType -- optional/String -- Select response format: ACK, RESULT, FULL. MARKET and LIMIT orders use FULL by default, other order types default to ACK.<br>\n     * stopPrice -- optional/double <br>\n     * trailingDelta -- optional/int -- see https://github.com/binance/binance-spot-api-docs/blob/master/faqs/trailing-stop-faq.md<br>\n     * icebergQty -- optional/double <br>\n     * strategyId -- optional/int -- Arbitrary numeric value identifying the order within an order strategy.<br>\n     * strategyType -- optional/int -- Arbitrary numeric value identifying the order strategy. Values smaller than 1000000 are reserved and cannot be used.<br>\n     * selfTradePreventionMode -- optional/String -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\n     * cancelRestrictions -- optional/enum -- Supported values: ONLY_NEW - Cancel will succeed if the order status is NEW. ONLY_PARTIALLY_FILLED - Cancel will succeed if order status is PARTIALLY_FILLED.<br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-and-replace-order-trade\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-and-replace-order-trade</a>\n     */\n    public void cancelReplaceOrder(String symbol, String cancelReplaceMode, String side, String type, JSONObject parameters) {\n\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(cancelReplaceMode, String.class, \"cancelReplaceMode\");\n        ParameterChecker.checkParameterType(side, String.class, \"side\");\n        ParameterChecker.checkParameterType(type, String.class, \"type\");\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"cancelOrderId\", \"cancelOrigClientOrderId\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"cancelReplaceMode\", cancelReplaceMode);\n        parameters = JSONParser.addKeyValue(parameters, \"side\", side);\n        parameters = JSONParser.addKeyValue(parameters, \"type\", type);\n\n        this.handler.signedRequest(\"order.cancelReplace\", parameters);\n    }\n\n     /**\n     * Query execution status of all open orders.<br>\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * symbol -- optional/String -- If omitted, open orders for all symbols are returned<br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#current-open-orders-user_data\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#current-open-orders-user_data</a>\n     */\n    public void getOpenOrders(JSONObject parameters) {\n        this.handler.signedRequest(\"openOrders.status\", parameters);\n    }\n\n    /**\n     * Cancel all open orders on a symbol, including OCO orders. <br>\n     * Cancellation reports for orders and OCOs have the same format as in order.cancel.<br>\n     * \n     * @param symbol String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-open-orders-trade\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-open-orders-trade</a>\n     */\n    public void cancelAllOpenOrders(String symbol, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.signedRequest(\"openOrders.cancelAll\", parameters);\n    }\n\n    /**\n     * Send in a new one-cancels-the-other (OCO) pair: LIMIT_MAKER + STOP_LOSS/STOP_LOSS_LIMIT orders (called legs), where activation of one order immediately cancels the other.\n     * \n     * @param symbol String\n     * @param side String -- BUY or SELL\n     * @param price double -- Price for the limit order\n     * @param quantity double\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * listClientOrderId -- optional/String -- Arbitrary unique ID among open OCOs. Automatically generated if not sent.<br>\n     * limitClientOrderId -- optional/String -- Arbitrary unique ID among open orders for the limit order. Automatically generated if not sent.<br>\n     * limitIcebergQty -- optional/double <br>\n     * limitStrategyId -- optional/int -- Arbitrary numeric value identifying the limit order within an order strategy.<br>\n     * limitStrategyType -- optional/int -- Arbitrary numeric value identifying the limit order strategy. Values smaller than 1000000 are reserved and cannot be used.<br>\n     * stopPrice -- optional/double -- Either stopPrice or trailingDelta, or both must be specified <br>\n     * trailingDelta -- optional/int -- see https://github.com/binance/binance-spot-api-docs/blob/master/faqs/trailing-stop-faq.md<br>\n     * stopClientOrderId -- optional/String -- Arbitrary unique ID among open orders for the stop order. Automatically generated if not sent.<br>\n     * stopLimitPrice -- optional/double <br>\n     * stopLimitTimeInForce -- optional/String -- See order.place for available options<br>\n     * stopIcebergQty -- optional/double <br>\n     * stopStrategyId -- optional/int -- Arbitrary numeric value identifying the stop order within an order strategy.<br>\n     * stopStrategyType -- optional/int -- Arbitrary numeric value identifying the stop order strategy. Values smaller than 1000000 are reserved and cannot be used.<br>\n     * newOrderRespType -- optional/String -- Select response format: ACK, RESULT, FULL (default). <br>\n     * selfTradePreventionMode -- optional/String -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#place-new-oco-trade\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#place-new-oco-trade</a>\n     */\n    public void newOcoOrder(String symbol, String side, double price, double quantity, JSONObject parameters) {\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"stopPrice\", \"trailingDelta\");\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(side, String.class, \"side\");\n        ParameterChecker.checkParameterType(price, Double.class, \"price\");\n        ParameterChecker.checkParameterType(quantity, Double.class, \"quantity\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"side\", side);\n        parameters = JSONParser.addKeyValue(parameters, \"price\", price);\n        parameters = JSONParser.addKeyValue(parameters, \"quantity\", quantity);\n        \n        this.handler.signedRequest(\"orderList.place\", parameters);\n    }\n\n    /**\n     * Check execution status of an OCO. <br>\n     * \n     * If both origClientOrderId and orderListId parameters are specified, only origClientOrderId is used and orderListId is ignored. <br>\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * origClientOrderId -- optional/String -- Query OCO by listClientOrderId <br>\n     * orderListId -- required/int -- Query OCO by orderListId <br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000 <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#query-oco-user_data\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#query-oco-user_data</a>\n     */\n    public void getOcoOrder(JSONObject parameters) {\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"origClientOrderId\", \"orderListId\");\n        this.handler.signedRequest(\"orderList.status\", parameters);\n    }\n\n    /**\n     * Cancel an active OCO.<br>\n     * \n     * If both orderListId and listClientOrderId parameters are specified, only orderListId is used and listClientOrderId is ignored.<br>\n     * Canceling an individual leg with order.cancel will cancel the entire OCO as well.<br>\n     * \n     * @param symbol String\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * listClientOrderId -- optional/String -- Cancel OCO by listClientOrderId <br>\n     * orderListId -- required/int -- Cancel OCO by orderListId <br>\n     * newClientOrderId -- optional/String -- New ID for the canceled OCO. Automatically generated if not sent.<br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000 <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-oco-trade\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#cancel-oco-trade</a>\n     */\n    public void cancelOcoOrder(String symbol, JSONObject parameters) {\n        ParameterChecker.checkOneOfParametersRequired(parameters, \"listClientOrderId\", \"orderListId\");\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        \n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        this.handler.signedRequest(\"orderList.cancel\", parameters);\n    }\n\n    /**\n     * Query execution status of all open OCOs.<br>\n     * \n     * If both orderListId and listClientOrderId parameters are specified, only orderListId is used and listClientOrderId is ignored.<br>\n     * Canceling an individual leg with order.cancel will cancel the entire OCO as well.<br>\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000 <br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#current-open-ocos-user_data\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#current-open-ocos-user_data</a>\n     */\n    public void getOpenOcoOrders(JSONObject parameters) {\n        this.handler.signedRequest(\"openOrderLists.status\", parameters);\n    }\n\n    /**\n     * Places an order using smart order routing (SOR).\n     * \n     * @param symbol String\n     * @param side String -- BUY or SELL\n     * @param type String\n     * @param quantity double\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * timeInForce -- optional/String -- Applicable only to LIMIT order type.<br>\n     * price -- optional/double -- Applicable only to LIMIT order type.<br>\n     * newClientOrderId -- optional/String -- Arbitrary unique ID among open orders. Automatically generated if not sent<br>\n     * newOrderRespType -- optional/String -- Select response format: ACK, RESULT, FULL. MARKET and LIMIT orders use FULL by default, other order types default to ACK.<br>\n     * stopPrice -- optional/double <br>\n     * icebergQty -- optional/double <br>\n     * strategyId -- optional/int -- Arbitrary numeric value identifying the order within an order strategy.<br>\n     * strategyType -- optional/int -- Arbitrary numeric value identifying the order strategy. Values smaller than 1000000 are reserved and cannot be used.<br>\n     * selfTradePreventionMode -- optional/String -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#place-new-order-using-sor-trade\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#place-new-order-using-sor-trade</a>\n     */\n    public void newSorOrder(String symbol, String side, String type, double quantity, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(side, String.class, \"side\");\n        ParameterChecker.checkParameterType(type, String.class, \"type\");\n        ParameterChecker.checkParameterType(quantity, Double.class, \"quantity\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"side\", side);\n        parameters = JSONParser.addKeyValue(parameters, \"type\", type);\n        parameters = JSONParser.addKeyValue(parameters, \"quantity\", quantity);\n        \n        this.handler.signedRequest(\"sor.order.place\", parameters);\n    }\n\n    /**\n     * Test new order creation and signature/recvWindow using smart order routing (SOR). Creates and validates a new order but does not send it into the matching engine.\n     * \n     * @param symbol String\n     * @param side String -- BUY or SELL\n     * @param type String\n     * @param quantity double\n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * timeInForce -- optional/String -- Applicable only to LIMIT order type.<br>\n     * price -- optional/double -- Applicable only to LIMIT order type.<br>\n     * newClientOrderId -- optional/String -- Arbitrary unique ID among open orders. Automatically generated if not sent<br>\n     * newOrderRespType -- optional/String -- Select response format: ACK, RESULT, FULL. MARKET and LIMIT orders use FULL by default, other order types default to ACK.<br>\n     * stopPrice -- optional/double <br>\n     * icebergQty -- optional/double <br>\n     * strategyId -- optional/int -- Arbitrary numeric value identifying the order within an order strategy.<br>\n     * strategyType -- optional/int -- Arbitrary numeric value identifying the order strategy. Values smaller than 1000000 are reserved and cannot be used.<br>\n     * selfTradePreventionMode -- optional/String -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\n     * computeCommissionRates -- optional/boolean -- Default: false.<br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#test-new-order-using-sor-trade\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#test-new-order-using-sor-trade</a>\n     */\n    public void testNewSorOrder(String symbol, String side, String type, double quantity, JSONObject parameters) {\n        ParameterChecker.checkParameterType(symbol, String.class, \"symbol\");\n        ParameterChecker.checkParameterType(side, String.class, \"side\");\n        ParameterChecker.checkParameterType(type, String.class, \"type\");\n        ParameterChecker.checkParameterType(quantity, Double.class, \"quantity\");\n\n        parameters = JSONParser.addKeyValue(parameters, \"symbol\", symbol);\n        parameters = JSONParser.addKeyValue(parameters, \"side\", side);\n        parameters = JSONParser.addKeyValue(parameters, \"type\", type);\n        parameters = JSONParser.addKeyValue(parameters, \"quantity\", quantity);\n        \n        this.handler.signedRequest(\"sor.order.test\", parameters);\n    }\n\n}", "super_interfaces": ["WebSocketApiModule"], "fields": [{"attribute_expression": "private WebSocketApiRequestHandler handler;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "WebSocketApiRequestHandler", "name": "handler", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java.WebSocketApiAuth", "name": "WebSocketApiAuth", "file_path": "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java", "superclasses": "", "methods": ["[]WebSocketApiAuth(WebSocketApiRequestHandler)", "[void]logon(JSONObject)", "[void]status(JSONObject)", "[void]logout(JSONObject)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java.WebSocketApiAuth.[]WebSocketApiAuth(WebSocketApiRequestHandler)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java.WebSocketApiAuth.[void]logon(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java.WebSocketApiAuth.[void]status(JSONObject)", "src/main/java/com/binance/connector/client/impl/websocketapi/WebSocketApiAuth.java.WebSocketApiAuth.[void]logout(JSONObject)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Authentication requests</h2>\nAll requests under the\n<a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#authentication-request\">Authentication requests</a>\nsection of the WebSocket API documentation will be implemented in this class.\n<br>\nResponse will be returned as callback.\n", "original_string": "public class WebSocketApiAuth implements WebSocketApiModule {\n    private WebSocketApiRequestHandler handler;\n\n    public WebSocketApiAuth(WebSocketApiRequestHandler handler) {\n        this.handler = handler;\n    }\n\n    /**\n     * Authenticate WebSocket connection using the provided API key.<br>\n     * \n     * After calling session.logon, future requests under same connection won't send apiKey and signature parameters. <br>\n     * Calling session.logon multiple times changes the current authenticated API key.<br>\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * recvWindow -- optional/int -- The value cannot be greater than 60000<br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#log-in-with-api-key-signed\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#log-in-with-api-key-signed</a>\n     */\n    public void logon(JSONObject parameters) {\n        this.handler.signedRequest(\"session.logon\", parameters);\n        \n    }\n\n    /**\n     * Query the status of the WebSocket connection, inspecting which API key (if any) is used to authorize requests.<br>\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#query-session-status\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#query-session-status</a>\n     */\n    public void status(JSONObject parameters) {\n        this.handler.publicRequest(\"session.status\", parameters);\n        \n    }\n\n    /**\n     * Forget the API key previously authenticated. If the connection is not authenticated, this request does nothing.<br>\n     * \n     * Note that the WebSocket connection stays open after session.logout request.<br>\n     * You can continue using the connection, but now the requests will send the apiKey and signature parameters where is needed.<br>\n     * \n     * @param parameters JSONObject composed by key-value pairs:\n     * <br><br>\n     * requestId -- optional/String or int <br>\n     * \n     * @see <a href=\"https://binance-docs.github.io/apidocs/websocket_api/en/#log-out-of-the-session\">\n     *     https://binance-docs.github.io/apidocs/websocket_api/en/#log-out-of-the-session</a>\n     */\n    public void logout(JSONObject parameters) {\n        this.handler.publicRequest(\"session.logout\", parameters);\n        \n    }\n\n}", "super_interfaces": ["WebSocketApiModule"], "fields": [{"attribute_expression": "private WebSocketApiRequestHandler handler;", "docstring": "", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "WebSocketApiRequestHandler", "name": "handler", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount", "name": "SubAccount", "file_path": "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java", "superclasses": "", "methods": ["[]SubAccount(String,String,String,boolean,ProxyAuth)", "[]SubAccount(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]createVirtualSubAccount(Map<String, Object>)", "[String]subAccountList(Map<String, Object>)", "[String]spotTransferHistory(Map<String, Object>)", "[String]getFuturesInternalTransfer(Map<String, Object>)", "[String]futuresInternalTransfer(Map<String, Object>)", "[String]assets(Map<String, Object>)", "[String]spotAccountSummary(Map<String, Object>)", "[String]depositAddress(Map<String, Object>)", "[String]depositHistory(Map<String, Object>)", "[String]accountStatus(Map<String, Object>)", "[String]enableMargin(Map<String, Object>)", "[String]marginAccount(Map<String, Object>)", "[String]marginAccountSummary(Map<String, Object>)", "[String]enableFutures(Map<String, Object>)", "[String]futuresAccount(Map<String, Object>)", "[String]futuresAccountSummary(Map<String, Object>)", "[String]futuresPositionRisk(Map<String, Object>)", "[String]futuresTransfer(Map<String, Object>)", "[String]marginTransfer(Map<String, Object>)", "[String]subAccountToSubAccount(Map<String, Object>)", "[String]subAccountToMaster(Map<String, Object>)", "[String]transferHistory(Map<String, Object>)", "[String]universalTransfer(Map<String, Object>)", "[String]queryUniversalTransfer(Map<String, Object>)", "[String]futuresAccountV2(Map<String, Object>)", "[String]futuresAccountSummaryV2(Map<String, Object>)", "[String]futuresPositionRiskV2(Map<String, Object>)", "[String]enableLeverageToken(Map<String, Object>)", "[String]getIpRestriction(Map<String, Object>)", "[String]deleteIpList(Map<String, Object>)", "[String]managedSubDeposit(Map<String, Object>)", "[String]managedSubDetails(Map<String, Object>)", "[String]managedSubWithdraw(Map<String, Object>)", "[String]managedSubAccountSnapshot(Map<String, Object>)", "[String]updateIpRestriction(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[]SubAccount(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[]SubAccount(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]createVirtualSubAccount(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]subAccountList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]spotTransferHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]getFuturesInternalTransfer(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresInternalTransfer(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]assets(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]spotAccountSummary(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]depositAddress(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]depositHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]accountStatus(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]enableMargin(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]marginAccount(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]marginAccountSummary(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]enableFutures(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresAccount(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresAccountSummary(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresPositionRisk(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresTransfer(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]marginTransfer(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]subAccountToSubAccount(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]subAccountToMaster(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]transferHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]universalTransfer(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]queryUniversalTransfer(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresAccountV2(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresAccountSummaryV2(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]futuresPositionRiskV2(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]enableLeverageToken(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]getIpRestriction(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]deleteIpList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]managedSubDeposit(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]managedSubDetails(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]managedSubWithdraw(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]managedSubAccountSnapshot(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SubAccount.java.SubAccount.[String]updateIpRestriction(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Sub-Account Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#sub-account-endpoints\">Sub-Account Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class SubAccount {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public SubAccount(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n    \n    public SubAccount(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String CREATE_SUB = \"/sapi/v1/sub-account/virtualSubAccount\";\n    /**\n     * POST /sapi/v1/sub-account/virtualSubAccount\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * subAccountString -- mandatory/string -- Please input a string. We will create a virtual email using that string for you to register <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#create-a-virtual-sub-account-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#create-a-virtual-sub-account-for-master-account</a>\n     */\n    public String createVirtualSubAccount(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"subAccountString\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, CREATE_SUB, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String QUERY_SUB_LIST = \"/sapi/v1/sub-account/list\";\n    /**\n     * GET /sapi/v1/sub-account/list\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- optional/string <br>\n     * isFreeze -- optional/string -- true or false <br>\n     * page -- optional/int -- Default value: 1 <br>\n     * limit -- optional/int -- Default value: 1, Max value: 200 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-list-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-list-for-master-account</a>\n     */\n    public String subAccountList(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, QUERY_SUB_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String QUERY_SPOT_TRANSFER_HIST = \"/sapi/v1/sub-account/sub/transfer/history\";\n    /**\n     * GET /sapi/v1/sub-account/sub/transfer/history\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * fromEmail -- optional/string <br>\n     * toEmail -- optional/string -- true or false <br>\n     * startTime -- optional/long <br>\n     * endTime\t -- optional/long <br>\n     * page -- optional/int -- Default value: 1 <br>\n     * limit -- optional/int -- Default value: 1, Max value: 200 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-spot-asset-transfer-history-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-spot-asset-transfer-history-for-master-account</a>\n     */\n    public String spotTransferHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, QUERY_SPOT_TRANSFER_HIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String FUTURES_TRANSFER = \"/sapi/v1/sub-account/futures/internalTransfer\";\n    /**\n     * GET /sapi/v1/sub-account/futures/internalTransfer\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string <br>\n     * futuresType -- mandatory/long -- 1:USDT-margined Futures,2: Coin-margined Futures <br>\n     * startTime -- optional/long <br>\n     * endTime\t -- optional/long <br>\n     * page -- optional/int -- Default value: 1 <br>\n     * limit -- optional/int -- Default value: 1, Max value: 200 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-futures-asset-transfer-history-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-futures-asset-transfer-history-for-master-account</a>\n     */\n    public String getFuturesInternalTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"futuresType\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, FUTURES_TRANSFER, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    /**\n     * POST /sapi/v1/sub-account/futures/internalTransfer\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * fromEmail -- mandatory/string -- Sender email <br>\n     * toEmail -- mandatory/string -- Recipient email <br>\n     * futuresType -- mandatory/long -- 1:USDT-margined Futures,2: Coin-margined Futures <br>\n     * asset -- mandatory/string <br>\n     * amount -- mandatory/decimal <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#sub-account-futures-asset-transfer-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#sub-account-futures-asset-transfer-for-master-account</a>\n     */\n    public String futuresInternalTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"fromEmail\", String.class);\n        ParameterChecker.checkParameter(parameters, \"toEmail\", String.class);\n        ParameterChecker.checkParameter(parameters, \"futuresType\", Integer.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, FUTURES_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String SUB_ACC_ASSETS = \"/sapi/v3/sub-account/assets\";\n    /**\n     * Fetch sub-account assets.\n     * <br><br>\n     * GET /sapi/v3/sub-account/assets\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub account email <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-assets-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-assets-for-master-account</a>\n     */\n    public String assets(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_ASSETS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SPOT_ASSET_SUMMARY = \"/sapi/v1/sub-account/spotSummary\";\n    /**\n     * Get BTC valued asset summary of subaccounts.\n     * <br><br>\n     * GET /sapi/v1/sub-account/spotSummary\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- optional/string -- Sub account email <br>\n     * page -- optional/long -- default 1 <br>\n     * size -- optional/long -- default 10, max 20 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-spot-assets-summary-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-spot-assets-summary-for-master-account</a>\n     */\n    public String spotAccountSummary(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SPOT_ASSET_SUMMARY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SUB_DEPOSIT_ADDRESS = \"/sapi/v1/capital/deposit/subAddress\";\n    /**\n     * Fetch sub-account deposit address.\n     * <br><br>\n     * GET /sapi/v1/capital/deposit/subAddress\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub account email <br>\n     * coin -- mandatory/string <br>\n     * network -- optional/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-deposit-address-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-deposit-address-for-master-account</a>\n     */\n    public String depositAddress(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"coin\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_DEPOSIT_ADDRESS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SUB_DEPOSIT_HISTORY = \"/sapi/v1/capital/deposit/subHisrec\";\n    /**\n     * Fetch sub-account deposit history.\n     * <br><br>\n     * GET /sapi/v1/capital/deposit/subHisrec\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub account email <br>\n     * coin -- optional/string <br>\n     * status -- optional/int -- 0(0:pending,6: credited but cannot withdraw, 1:success) <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int <br>\n     * offset -- optional/int -- default:0 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-deposit-history-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-deposit-history-for-master-account</a>\n     */\n    public String depositHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_DEPOSIT_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SUB_ACC_STATUS = \"/sapi/v1/sub-account/status\";\n    /**\n     * GET /sapi/v1/sub-account/status\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- optional/string -- Sub account email <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-39-s-status-on-margin-futures-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-39-s-status-on-margin-futures-for-master-account</a>\n     */\n    public String accountStatus(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_STATUS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ENABLE_MARGIN = \"/sapi/v1/sub-account/margin/enable\";\n    /**\n     * POST /sapi/v1/sub-account/margin/enable\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub account email <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#enable-margin-for-sub-account-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#enable-margin-for-sub-account-for-master-account</a>\n     */\n    public String enableMargin(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ENABLE_MARGIN, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String SUB_ACC_MARGIN = \"/sapi/v1/sub-account/margin/account\";\n    /**\n     * GET /sapi/v1/sub-account/margin/account\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub account email <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-detail-on-sub-account-39-s-margin-account-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-detail-on-sub-account-39-s-margin-account-for-master-account</a>\n     */\n    public String marginAccount(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_MARGIN, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SUB_ACC_MARGIN_SUMMARY = \"/sapi/v1/sub-account/margin/accountSummary\";\n    /**\n     * GET /sapi/v1/sub-account/margin/accountSummary\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-sub-account-39-s-margin-account-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-sub-account-39-s-margin-account-for-master-account</a>\n     */\n    public String marginAccountSummary(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_MARGIN_SUMMARY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ENABLE_FUTURES = \"/sapi/v1/sub-account/futures/enable\";\n    /**\n     * POST /sapi/v1/sub-account/futures/enable\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub-account email <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#enable-futures-for-sub-account-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#enable-futures-for-sub-account-for-master-account</a>\n     */\n    public String enableFutures(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ENABLE_FUTURES, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String SUB_ACC_FUTURES = \"/sapi/v1/sub-account/futures/account\";\n    /**\n     * GET /sapi/v1/sub-account/futures/account\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub-account email <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-detail-on-sub-account-39-s-futures-account-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-detail-on-sub-account-39-s-futures-account-for-master-account</a>\n     */\n    public String futuresAccount(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_FUTURES, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SUB_ACC_FUTURES_SUMMARY = \"/sapi/v1/sub-account/futures/accountSummary\";\n    /**\n     * GET /sapi/v1/sub-account/futures/accountSummary\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-sub-account-39-s-futures-account-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-sub-account-39-s-futures-account-for-master-account</a>\n     */\n    public String futuresAccountSummary(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_FUTURES_SUMMARY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SUB_ACC_POSITION_RISK = \"/sapi/v1/sub-account/futures/positionRisk\";\n    /**\n     * GET /sapi/v1/sub-account/futures/positionRisk\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub-Account email <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-futures-position-risk-of-sub-account-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-futures-position-risk-of-sub-account-for-master-account</a>\n     */\n    public String futuresPositionRisk(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_POSITION_RISK, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SUB_ACC_FUTURES_TRANSFER = \"/sapi/v1/sub-account/futures/transfer\";\n    /**\n     * POST /sapi/v1/sub-account/futures/transfer\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub-Account email <br>\n     * asset -- mandatory/string -- The asset being transferred, e.g., USDT <br>\n     * amount -- mandatory/decimal -- The amount to be transferred <br>\n     * type -- mandatory/int -- 1: transfer from subaccount's spot account to its USDT-margined futures account\n     *            2: transfer from subaccount's USDT-margined futures account to its spot account\n     *            3: transfer from subaccount's spot account to its COIN-margined futures account\n     *            4:transfer from subaccount's COIN-margined futures account to its spot account <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#futures-transfer-for-sub-account-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#futures-transfer-for-sub-account-for-master-account</a>\n     */\n    public String futuresTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        ParameterChecker.checkParameter(parameters, \"type\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_FUTURES_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String SUB_ACC_MARGIN_TRANSFER = \"/sapi/v1/sub-account/margin/transfer\";\n    /**\n     * POST /sapi/v1/sub-account/margin/transfer\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub-Account email <br>\n     * asset -- mandatory/string -- The asset being transferred, e.g., USDT <br>\n     * amount -- mandatory/decimal -- The amount to be transferred <br>\n     * type -- mandatory/int -- 1: transfer from subaccount's spot account to margin account\n     *                          2: transfer from subaccount's margin account to its spot account <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#margin-transfer-for-sub-account-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#margin-transfer-for-sub-account-for-master-account</a>\n     */\n    public String marginTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        ParameterChecker.checkParameter(parameters, \"type\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ACC_MARGIN_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String SUB_TO_SUB = \"/sapi/v1/sub-account/transfer/subToSub\";\n    /**\n     * POST /sapi/v1/sub-account/transfer/subToSub\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * toEmail -- mandatory/string -- Sub-Account email <br>\n     * asset -- mandatory/string -- The asset being transferred, e.g., USDT <br>\n     * amount -- mandatory/decimal -- The amount to be transferred <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#transfer-to-sub-account-of-same-master-for-sub-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#transfer-to-sub-account-of-same-master-for-sub-account</a>\n     */\n    public String subAccountToSubAccount(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"toEmail\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, SUB_TO_SUB, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String SUB_TO_MASTER = \"/sapi/v1/sub-account/transfer/subToMaster\";\n    /**\n     * POST /sapi/v1/sub-account/transfer/subToMaster\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- mandatory/string -- The asset being transferred, e.g., USDT <br>\n     * amount -- mandatory/decimal -- The amount to be transferred <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#transfer-to-master-for-sub-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#transfer-to-master-for-sub-account</a>\n     */\n    public String subAccountToMaster(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, SUB_TO_MASTER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String SUB_TRANSFER_HIST = \"/sapi/v1/sub-account/transfer/subUserHistory\";\n    /**\n     * GET /sapi/v1/sub-account/transfer/subUserHistory\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string -- If not sent, result of all assets will be returned <br>\n     * type -- optional/int -- \t1: transfer in, 2: transfer out <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int -- Default 500 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#sub-account-transfer-history-for-sub-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#sub-account-transfer-history-for-sub-account</a>\n     */\n    public String transferHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SUB_TRANSFER_HIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SUB_UNIVERSAL_TRANSFER = \"/sapi/v1/sub-account/universalTransfer\";\n    /**\n     * POST /sapi/v1/sub-account/universalTransfer\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * fromEmail -- optional/string <br>\n     * toEmail -- optional/string <br>\n     * fromAccountType -- mandatory/string -- \"SPOT\",\"USDT_FUTURE\",\"COIN_FUTURE\" <br>\n     * toAccountType -- mandatory/string -- \"SPOT\",\"USDT_FUTURE\",\"COIN_FUTURE\" <br>\n     * clientTranId -- optional/string -- Must be unique <br>\n     * asset -- mandatory/string <br>\n     * amount -- mandatory/decimal <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#universal-transfer-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#universal-transfer-for-master-account</a>\n     */\n    public String universalTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"fromAccountType\", String.class);\n        ParameterChecker.checkParameter(parameters, \"toAccountType\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, SUB_UNIVERSAL_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    /**\n     * GET /sapi/v1/sub-account/universalTransfer\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * fromEmail -- optional/string <br>\n     * toEmail -- optional/string <br>\n     * clientTranId -- optional/string -- Must be unique <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * page -- optional/int -- Default 1 <br>\n     * limit -- optional/int -- Default 500, Max 500 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-universal-transfer-history-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-universal-transfer-history-for-master-account</a>\n     */\n    public String queryUniversalTransfer(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SUB_UNIVERSAL_TRANSFER, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SUB_FUTURES_ACCOUNT_V2 = \"/sapi/v2/sub-account/futures/account\";\n    /**\n     * GET /sapi/v2/sub-account/futures/account\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub-account email <br>\n     * futuresType -- mandatory/int -- 1:USDT Margined Futures, 2:COIN Margined Futures <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-detail-on-sub-account-39-s-futures-account-v2-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-detail-on-sub-account-39-s-futures-account-v2-for-master-account</a>\n     */\n    public String futuresAccountV2(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"futuresType\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_FUTURES_ACCOUNT_V2, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SUB_FUTURES_ACCOUNT_SUMMARY_V2 = \"/sapi/v2/sub-account/futures/accountSummary\";\n    /**\n     * GET /sapi/v2/sub-account/futures/accountSummary\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * futuresType -- mandatory/int -- 1:USDT Margined Futures, 2:COIN Margined Futures <br>\n     * page -- optional/int -- \tdefault:1 <br>\n     * limit -- optional/int -- default:10, max:20 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-sub-account-39-s-futures-account-v2-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-sub-account-39-s-futures-account-v2-for-master-account</a>\n     */\n    public String futuresAccountSummaryV2(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"futuresType\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_FUTURES_ACCOUNT_SUMMARY_V2, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SUB_FUTURES_POSITION_RISK_V2 = \"/sapi/v2/sub-account/futures/positionRisk\";\n    /**\n     * GET /sapi/v2/sub-account/futures/positionRisk\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub-account email <br>\n     * futuresType -- mandatory/int -- 1:USDT Margined Futures, 2:COIN Margined Futures <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-futures-position-risk-of-sub-account-v2-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-futures-position-risk-of-sub-account-v2-for-master-account</a>\n     */\n    public String futuresPositionRiskV2(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"futuresType\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, SUB_FUTURES_POSITION_RISK_V2, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ENABLE_LEVERAGE = \"/sapi/v1/sub-account/blvt/enable\";\n    /**\n     * GET /sapi/v2/sub-account/futures/positionRisk\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub-account email <br>\n     * enableBlvt -- mandatory/boolean -- Only true for now <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#enable-leverage-token-for-sub-account-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#enable-leverage-token-for-sub-account-for-master-account</a>\n     */\n    public String enableLeverageToken(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"enableBlvt\", Boolean.class);\n        return requestHandler.sendSignedRequest(baseUrl, ENABLE_LEVERAGE, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String IP_RESTRICTION = \"/sapi/v1/sub-account/subAccountApi/ipRestriction\";\n    /**\n     * GET /sapi/v1/sub-account/subAccountApi/ipRestriction\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub-account email <br>\n     * subAccountApiKey -- mandatory/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-ip-restriction-for-a-sub-account-api-key-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-ip-restriction-for-a-sub-account-api-key-for-master-account</a>\n     */\n    public String getIpRestriction(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"subAccountApiKey\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, IP_RESTRICTION, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String IP_LIST = \"/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList\";\n    /**\n     * DELETE /sapi/v1/sub-account/subAccountApi/ipRestriction/ipList\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub-account email <br>\n     * subAccountApiKey -- mandatory/string <br>\n     * ipAddress -- optional/string -- Can be added in batches, separated by commas <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#delete-ip-list-for-a-sub-account-api-key-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#delete-ip-list-for-a-sub-account-api-key-for-master-account</a>\n     */\n    public String deleteIpList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"subAccountApiKey\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, IP_LIST, parameters, HttpMethod.DELETE, showLimitUsage);\n    }\n\n    private final String MANAGED_SUB_DEPOSIT = \"/sapi/v1/managed-subaccount/deposit\";\n    /**\n     * POST /sapi/v1/managed-subaccount/deposit\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * toEmail -- mandatory/string <br>\n     * asset -- mandatory/string <br>\n     * amount -- mandatory/decimal <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#deposit-assets-into-the-managed-sub-account-for-investor-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#deposit-assets-into-the-managed-sub-account-for-investor-master-account</a>\n     */\n    public String managedSubDeposit(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"toEmail\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, MANAGED_SUB_DEPOSIT, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String MANAGED_SUB_DETAILS = \"/sapi/v1/managed-subaccount/asset\";\n    /**\n     * GET /sapi/v1/managed-subaccount/asset\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-managed-sub-account-asset-details-for-investor-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-managed-sub-account-asset-details-for-investor-master-account</a>\n     */\n    public String managedSubDetails(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, MANAGED_SUB_DETAILS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String MANAGED_SUB_WITHDRAW = \"/sapi/v1/managed-subaccount/withdraw\";\n    /**\n     * POST /sapi/v1/managed-subaccount/withdraw\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * fromEmail -- mandatory/string <br>\n     * asset -- mandatory/string <br>\n     * amount -- mandatory/decimal <br>\n     * transferDate -- optional/decimal -- Withdrawals is automatically occur on the transfer date(UTC0).\n     *                                     If a date is not selected, the withdrawal occurs right now <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#withdrawl-assets-from-the-managed-sub-account-for-investor-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#withdrawl-assets-from-the-managed-sub-account-for-investor-master-account</a>\n     */\n    public String managedSubWithdraw(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"fromEmail\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, MANAGED_SUB_WITHDRAW, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String MANAGED_SUB_SNAPSHOT = \"/sapi/v1/managed-subaccount/accountSnapshot\";\n    /**\n     * GET /sapi/v1/managed-subaccount/accountSnapshot\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string <br>\n     * type -- mandatory/string -- \"SPOT\", \"MARGIN\"(Cross), \"FUTURES\"(UM) <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- int/long <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-managed-sub-account-snapshot-for-investor-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-managed-sub-account-snapshot-for-investor-master-account</a>\n     */\n    public String managedSubAccountSnapshot(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, MANAGED_SUB_SNAPSHOT, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String IP_RESTRICTION_V2 = \"/sapi/v2/sub-account/subAccountApi/ipRestriction\";\n    /**\n     * POST /sapi/v2/sub-account/subAccountApi/ipRestriction\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string -- Sub-account email <br>\n     * subAccountApiKey -- mandatory/string <br>\n     * status -- mandatory/string -- IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only.<br>\n     * ipAddress -- optional/string -- Insert static IP in batch, separated by commas. <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#add-ip-restriction-for-sub-account-api-key-for-master-account\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#add-ip-restriction-for-sub-account-api-key-for-master-account</a>\n     */\n    public String updateIpRestriction(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"subAccountApiKey\", String.class);\n        ParameterChecker.checkParameter(parameters, \"status\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, IP_RESTRICTION_V2, parameters, HttpMethod.POST, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String CREATE_SUB = \"/sapi/v1/sub-account/virtualSubAccount\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "CREATE_SUB = \"/sapi/v1/sub-account/virtualSubAccount\"", "syntax_pass": true}, {"attribute_expression": "private final String QUERY_SUB_LIST = \"/sapi/v1/sub-account/list\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "QUERY_SUB_LIST = \"/sapi/v1/sub-account/list\"", "syntax_pass": true}, {"attribute_expression": "private final String QUERY_SPOT_TRANSFER_HIST = \"/sapi/v1/sub-account/sub/transfer/history\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "QUERY_SPOT_TRANSFER_HIST = \"/sapi/v1/sub-account/sub/transfer/history\"", "syntax_pass": true}, {"attribute_expression": "private final String FUTURES_TRANSFER = \"/sapi/v1/sub-account/futures/internalTransfer\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FUTURES_TRANSFER = \"/sapi/v1/sub-account/futures/internalTransfer\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_ACC_ASSETS = \"/sapi/v3/sub-account/assets\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_ACC_ASSETS = \"/sapi/v3/sub-account/assets\"", "syntax_pass": true}, {"attribute_expression": "private final String SPOT_ASSET_SUMMARY = \"/sapi/v1/sub-account/spotSummary\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SPOT_ASSET_SUMMARY = \"/sapi/v1/sub-account/spotSummary\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_DEPOSIT_ADDRESS = \"/sapi/v1/capital/deposit/subAddress\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_DEPOSIT_ADDRESS = \"/sapi/v1/capital/deposit/subAddress\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_DEPOSIT_HISTORY = \"/sapi/v1/capital/deposit/subHisrec\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_DEPOSIT_HISTORY = \"/sapi/v1/capital/deposit/subHisrec\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_ACC_STATUS = \"/sapi/v1/sub-account/status\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_ACC_STATUS = \"/sapi/v1/sub-account/status\"", "syntax_pass": true}, {"attribute_expression": "private final String ENABLE_MARGIN = \"/sapi/v1/sub-account/margin/enable\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ENABLE_MARGIN = \"/sapi/v1/sub-account/margin/enable\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_ACC_MARGIN = \"/sapi/v1/sub-account/margin/account\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_ACC_MARGIN = \"/sapi/v1/sub-account/margin/account\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_ACC_MARGIN_SUMMARY = \"/sapi/v1/sub-account/margin/accountSummary\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_ACC_MARGIN_SUMMARY = \"/sapi/v1/sub-account/margin/accountSummary\"", "syntax_pass": true}, {"attribute_expression": "private final String ENABLE_FUTURES = \"/sapi/v1/sub-account/futures/enable\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ENABLE_FUTURES = \"/sapi/v1/sub-account/futures/enable\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_ACC_FUTURES = \"/sapi/v1/sub-account/futures/account\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_ACC_FUTURES = \"/sapi/v1/sub-account/futures/account\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_ACC_FUTURES_SUMMARY = \"/sapi/v1/sub-account/futures/accountSummary\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_ACC_FUTURES_SUMMARY = \"/sapi/v1/sub-account/futures/accountSummary\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_ACC_POSITION_RISK = \"/sapi/v1/sub-account/futures/positionRisk\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_ACC_POSITION_RISK = \"/sapi/v1/sub-account/futures/positionRisk\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_ACC_FUTURES_TRANSFER = \"/sapi/v1/sub-account/futures/transfer\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_ACC_FUTURES_TRANSFER = \"/sapi/v1/sub-account/futures/transfer\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_ACC_MARGIN_TRANSFER = \"/sapi/v1/sub-account/margin/transfer\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_ACC_MARGIN_TRANSFER = \"/sapi/v1/sub-account/margin/transfer\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_TO_SUB = \"/sapi/v1/sub-account/transfer/subToSub\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_TO_SUB = \"/sapi/v1/sub-account/transfer/subToSub\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_TO_MASTER = \"/sapi/v1/sub-account/transfer/subToMaster\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_TO_MASTER = \"/sapi/v1/sub-account/transfer/subToMaster\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_TRANSFER_HIST = \"/sapi/v1/sub-account/transfer/subUserHistory\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_TRANSFER_HIST = \"/sapi/v1/sub-account/transfer/subUserHistory\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_UNIVERSAL_TRANSFER = \"/sapi/v1/sub-account/universalTransfer\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_UNIVERSAL_TRANSFER = \"/sapi/v1/sub-account/universalTransfer\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_FUTURES_ACCOUNT_V2 = \"/sapi/v2/sub-account/futures/account\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_FUTURES_ACCOUNT_V2 = \"/sapi/v2/sub-account/futures/account\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_FUTURES_ACCOUNT_SUMMARY_V2 = \"/sapi/v2/sub-account/futures/accountSummary\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_FUTURES_ACCOUNT_SUMMARY_V2 = \"/sapi/v2/sub-account/futures/accountSummary\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_FUTURES_POSITION_RISK_V2 = \"/sapi/v2/sub-account/futures/positionRisk\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_FUTURES_POSITION_RISK_V2 = \"/sapi/v2/sub-account/futures/positionRisk\"", "syntax_pass": true}, {"attribute_expression": "private final String ENABLE_LEVERAGE = \"/sapi/v1/sub-account/blvt/enable\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ENABLE_LEVERAGE = \"/sapi/v1/sub-account/blvt/enable\"", "syntax_pass": true}, {"attribute_expression": "private final String IP_RESTRICTION = \"/sapi/v1/sub-account/subAccountApi/ipRestriction\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "IP_RESTRICTION = \"/sapi/v1/sub-account/subAccountApi/ipRestriction\"", "syntax_pass": true}, {"attribute_expression": "private final String IP_LIST = \"/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "IP_LIST = \"/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList\"", "syntax_pass": true}, {"attribute_expression": "private final String MANAGED_SUB_DEPOSIT = \"/sapi/v1/managed-subaccount/deposit\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "MANAGED_SUB_DEPOSIT = \"/sapi/v1/managed-subaccount/deposit\"", "syntax_pass": true}, {"attribute_expression": "private final String MANAGED_SUB_DETAILS = \"/sapi/v1/managed-subaccount/asset\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "MANAGED_SUB_DETAILS = \"/sapi/v1/managed-subaccount/asset\"", "syntax_pass": true}, {"attribute_expression": "private final String MANAGED_SUB_WITHDRAW = \"/sapi/v1/managed-subaccount/withdraw\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "MANAGED_SUB_WITHDRAW = \"/sapi/v1/managed-subaccount/withdraw\"", "syntax_pass": true}, {"attribute_expression": "private final String MANAGED_SUB_SNAPSHOT = \"/sapi/v1/managed-subaccount/accountSnapshot\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "MANAGED_SUB_SNAPSHOT = \"/sapi/v1/managed-subaccount/accountSnapshot\"", "syntax_pass": true}, {"attribute_expression": "private final String IP_RESTRICTION_V2 = \"/sapi/v2/sub-account/subAccountApi/ipRestriction\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "IP_RESTRICTION_V2 = \"/sapi/v2/sub-account/subAccountApi/ipRestriction\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT", "name": "NFT", "file_path": "src/main/java/com/binance/connector/client/impl/spot/NFT.java", "superclasses": "", "methods": ["[]NFT(String,String,String,boolean,ProxyAuth)", "[]NFT(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]transactionsHistory(Map<String, Object>)", "[String]depositHistory(Map<String, Object>)", "[String]withdrawHistory(Map<String, Object>)", "[String]getAsset(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT.[]NFT(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT.[]NFT(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT.[String]transactionsHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT.[String]depositHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT.[String]withdrawHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/NFT.java.NFT.[String]getAsset(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>NFT Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#nft-endpoints\">NFT Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class NFT {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public NFT(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public NFT(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String TRANSACTIONS = \"/sapi/v1/nft/history/transactions\";\n    /**\n     * GET /sapi/v1/pay/transactions\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * orderType -- mandatory/int -- 0: purchase order, 1: sell order, 2: royalty income,\n     *            3: primary market order, 4: mint fee <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int -- Default 50, Max 50 <br>\n     * page -- optional/int -- Default 1 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-nft-transaction-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-nft-transaction-history-user_data</a>\n     */\n    public String transactionsHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"orderType\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, TRANSACTIONS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String DEPOSIT = \"/sapi/v1/nft/history/deposit\";\n    /**\n     * GET /sapi/v1/nft/history/deposit\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int -- Default 50, Max 50 <br>\n     * page -- optional/int -- Default 1 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-nft-deposit-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-nft-deposit-history-user_data</a>\n     */\n    public String depositHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, DEPOSIT, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String WITHDRAW = \"/sapi/v1/nft/history/withdraw\";\n    /**\n     * GET /sapi/v1/nft/history/withdraw\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int -- Default 50, Max 50 <br>\n     * page -- optional/int -- Default 1 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-nft-withdraw-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-nft-withdraw-history-user_data</a>\n     */\n    public String withdrawHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, WITHDRAW, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String GET_ASSET = \"/sapi/v1/nft/user/getAsset\";\n    /**\n     * GET /sapi/v1/nft/user/getAsset\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * limit -- optional/int -- Default 50, Max 50 <br>\n     * page -- optional/int -- Default 1 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-nft-asset-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-nft-asset-user_data</a>\n     */\n    public String getAsset(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, GET_ASSET, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String TRANSACTIONS = \"/sapi/v1/nft/history/transactions\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TRANSACTIONS = \"/sapi/v1/nft/history/transactions\"", "syntax_pass": true}, {"attribute_expression": "private final String DEPOSIT = \"/sapi/v1/nft/history/deposit\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "DEPOSIT = \"/sapi/v1/nft/history/deposit\"", "syntax_pass": true}, {"attribute_expression": "private final String WITHDRAW = \"/sapi/v1/nft/history/withdraw\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "WITHDRAW = \"/sapi/v1/nft/history/withdraw\"", "syntax_pass": true}, {"attribute_expression": "private final String GET_ASSET = \"/sapi/v1/nft/user/getAsset\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "GET_ASSET = \"/sapi/v1/nft/user/getAsset\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Pay.java.Pay", "name": "Pay", "file_path": "src/main/java/com/binance/connector/client/impl/spot/Pay.java", "superclasses": "", "methods": ["[]Pay(String,String,String,boolean,ProxyAuth)", "[]Pay(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]transactions(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/Pay.java.Pay.[]Pay(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Pay.java.Pay.[]Pay(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Pay.java.Pay.[String]transactions(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Pay Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#pay-endpoints\">Pay Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class Pay {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public Pay(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public Pay(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String TRANSACTIONS = \"/sapi/v1/pay/transactions\";\n    /**\n     * GET /sapi/v1/pay/transactions\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int -- default 100, max 100 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-pay-trade-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-pay-trade-history-user_data</a>\n     */\n    public String transactions(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, TRANSACTIONS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String TRANSACTIONS = \"/sapi/v1/pay/transactions\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TRANSACTIONS = \"/sapi/v1/pay/transactions\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade", "name": "Trade", "file_path": "src/main/java/com/binance/connector/client/impl/spot/Trade.java", "superclasses": "", "methods": ["[]Trade(String,String,String,boolean,ProxyAuth)", "[]Trade(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]testNewOrder(Map<String, Object>)", "[String]newOrder(Map<String, Object>)", "[String]cancelOrder(Map<String, Object>)", "[String]cancelOpenOrders(Map<String, Object>)", "[String]getOrder(Map<String, Object>)", "[String]cancelReplace(Map<String, Object>)", "[String]getOpenOrders(Map<String, Object>)", "[String]getOrders(Map<String, Object>)", "[String]ocoOrder(Map<String, Object>)", "[String]cancelOCO(Map<String, Object>)", "[String]getOCOOrder(Map<String, Object>)", "[String]getOCOOrders(Map<String, Object>)", "[String]getOpenOCOOrders(Map<String, Object>)", "[String]account(Map<String, Object>)", "[String]myTrades(Map<String, Object>)", "[String]rateLimitOrder(Map<String, Object>)", "[String]preventedMatches(Map<String, Object>)", "[String]sorAllocations(Map<String, Object>)", "[String]commission(Map<String, Object>)", "[String]sorOrder(Map<String, Object>)", "[String]testSorOrder(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[]Trade(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[]Trade(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]testNewOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]newOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]cancelOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]cancelOpenOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]getOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]cancelReplace(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]getOpenOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]getOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]ocoOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]cancelOCO(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]getOCOOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]getOCOOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]getOpenOCOOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]account(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]myTrades(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]rateLimitOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]preventedMatches(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]sorAllocations(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]commission(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]sorOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Trade.java.Trade.[String]testSorOrder(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Trade Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#spot-account-trade\">Spot Account/Trade Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class Trade {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public Trade(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n    \n    public Trade(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String TEST_NEW_ORDER = \"/api/v3/order/test\";\n    /**\n     * Test new order creation and signature/recvWindow long.\n     * Creates and validates a new order but does not send it into the matching engine.\n     * <br><br>\n     * POST /api/v3/order/test\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * In addition to all parameters accepted by POST /api/v3/order, the following optional parameters are also accepted: <br>\n     * computeCommissionRates -- optional/boolean -- Default: false <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#test-new-order-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#test-new-order-trade</a>\n     */\n    public String testNewOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, TEST_NEW_ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String ORDER = \"/api/v3/order\";\n    /**\n     * Send in a new order.\n     * <br><br>\n     * POST /api/v3/order\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * side -- mandatory/enum <br>\n     * type -- mandatory/enum <br>\n     * timeInForce -- optional/enum <br>\n     * quantity -- optional/decimal <br>\n     * quoteOrderQty -- optional/decimal <br>\n     * price -- optional/decimal <br>\n     * newClientOrderId -- optional/string -- A unique id among open orders. Automatically generated if not sent.<br>\n     * strategyId -- optional/int <br>\n     * strategyType -- optional/int -- The value cannot be less than 1000000.<br>\n     * stopPrice -- optional/decimal -- Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.<br>\n     * trailingDelta -- optional/long -- Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.<br>\n     * icebergQty -- optional/decimal -- Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.<br>\n     * newOrderRespType -- optional/enum -- Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK.<br>\n     * selfTradePrevention -- optional/enum -- \tThe allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>s\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#new-order-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#new-order-trade</a>\n     */\n    public String newOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    /**\n     * Cancel an active order.\n     * <br><br>\n     * DELETE /api/v3/order\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * orderId -- optional/long <br>\n     * origClientOrderId -- optional/string <br>\n     * newClientOrderId -- optional/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#cancel-order-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#cancel-order-trade</a>\n     */\n    public String cancelOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDER, parameters, HttpMethod.DELETE, showLimitUsage);\n    }\n\n    private final String ALL_OPEN_ORDERS = \"/api/v3/openOrders\";\n    /**\n     * Cancels all active orders on a symbol.\n     * This includes OCO orders.\n     * <br><br>\n     * DELETE /api/v3/openOrders\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#cancel-order-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#cancel-order-trade</a>\n     */\n    public String cancelOpenOrders(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ALL_OPEN_ORDERS, parameters, HttpMethod.DELETE, showLimitUsage);\n    }\n\n    /**\n     * Check an order's status.\n     * <br><br>\n     * GET /api/v3/order\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * orderId -- optional/long <br>\n     * origClientOrderId -- optional/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-order-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-order-user_data</a>\n     */\n    public String getOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDER, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String CANCEL_REPLACE = \"/api/v3/order/cancelReplace\";\n    /**\n     * Cancels an existing order and places a new order on the same symbol.<br>\n     * Filters are evaluated before the cancel order is placed.<br>\n     * If the new order placement is successfully sent to the engine, the order count will increase by 1.\n     * <br><br>\n     * POST /api/v3/order/cancelReplace\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * side -- mandatory/enum <br>\n     * type -- mandatory/enum <br>\n     * cancelReplaceMode -- mandatory/enum -- The allowed values are: STOP_ON_FAILURE - If the cancel request fails, the new order placement will not be attempted. ALLOW_FAILURES - new order placement will be attempted even if cancel request fails. <br>\n     * timeInForce -- optional/enum <br>\n     * quantity -- optional/decimal <br>\n     * quoteOrderQty -- optional/decimal <br>\n     * price -- optional/decimal <br>\n     * cancelNewClientOrderId -- optional/string <br>\n     * cancelOrigClientOrderId -- optional/string -- Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence. <br>\n     * cancelOrderId -- optional/long -- Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence. <br>\n     * newClientOrderId -- optional/string -- Used to identify the new order. <br>\n     * stopStrategyId -- optional/int <br>\n     * stopStrategyType -- optional/int -- The value cannot be less than 1000000.<br>\n     * stopPrice -- optional/decimal <br>\n     * icebergQty -- optional/decimal <br>\n     * trailingDelta -- optional/long <br>\n     * newOrderRespType -- optional/enum -- Allowed values: ACK, RESULT, FULL. MARKET and LIMIT orders types default to FULL; all other orders default to ACK<br>\n     * selfTradePreventionMode -- optional/enum -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\n     * cancelRestrictions -- optional/enum -- Supported values: ONLY_NEW - Cancel will succeed if the order status is NEW. ONLY_PARTIALLY_FILLED - Cancel will succeed if order status is PARTIALLY_FILLED.<br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#cancel-an-existing-order-and-send-a-new-order-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#cancel-an-existing-order-and-send-a-new-order-trade</a>\n     */\n    public String cancelReplace(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        ParameterChecker.checkParameter(parameters, \"cancelReplaceMode\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, CANCEL_REPLACE, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    /**\n     * Get all open orders on a symbol. Careful when accessing this with no symbol.\n     * <br><br>\n     * GET /api/v3/openOrders\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- optional/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#current-open-orders-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#current-open-orders-user_data</a>\n     */\n    public String getOpenOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ALL_OPEN_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ALL_ORDERS = \"/api/v3/allOrders\";\n    /**\n     * Get all account orders; active, canceled, or filled.\n     * <br><br>\n     * GET /api/v3/allOrders\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * orderId -- optional/long <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#all-orders-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#all-orders-user_data</a>\n     */\n    public String getOrders(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ALL_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String OCO_ORDER = \"/api/v3/order/oco\";\n    /**\n     * Send in a new OCO.\n     * <br><br>\n     * POST /api/v3/order/oco\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * listClientOrderId -- optional/string <br>\n     * side -- mandatory/enum <br>\n     * quantity -- mandatory/decimal <br>\n     * limitClientOrderId -- optional/string <br>\n     * limitStrategyId -- optional/int <br>\n     * limitStrategyType -- optional/int <br>\n     * price -- mandatory/decimal <br>\n     * limitIcebergQty -- optional/decimal <br>\n     * trailingDelta -- optional/long <br>\n     * stopClientOrderId -- optional/string <br>\n     * stopPrice -- mandatory/decimal <br>\n     * stopStrategyId -- optional/int <br>\n     * stopStrategyType -- optional/int -- The value cannot be less than 1000000.<br>\n     * stopLimitPrice -- optional/decimal -- If provided, stopLimitTimeInForce is required.<br>\n     * stopIcebergQty -- optional/decimal <br>\n     * stopLimitTimeInForce -- optional/enum <br>\n     * newOrderRespType -- optional/enum <br>\n     * selfTradePreventionMode -- optional/enum -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE.<br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#new-oco-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#new-oco-trade</a>\n     */\n    public String ocoOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"quantity\");\n        ParameterChecker.checkRequiredParameter(parameters, \"price\");\n        ParameterChecker.checkRequiredParameter(parameters, \"stopPrice\");\n        return requestHandler.sendSignedRequest(baseUrl, OCO_ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String OCO_LIST = \"/api/v3/orderList\";\n    /**\n     * Cancel an entire Order List.\n     * <br><br>\n     * DELETE /api/v3/orderList\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * orderListId -- optional/string <br>\n     * listClientOrderId -- optional/string <br>\n     * newClientOrderId -- optional/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#cancel-oco-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#cancel-oco-trade</a>\n     */\n    public String cancelOCO(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, OCO_LIST, parameters, HttpMethod.DELETE, showLimitUsage);\n    }\n\n    /**\n     * Retrieves a specific OCO based on provided optional parameters\n     * <br><br>\n     * GET /api/v3/orderList\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * orderListId -- optional/string <br>\n     * origClientOrderId -- optional/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-oco-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-oco-user_data</a>\n     */\n    public String getOCOOrder(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, OCO_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ALL_OCO_LIST = \"/api/v3/allOrderList\";\n    /**\n     * Retrieves all OCO based on provided optional parameters\n     * <br><br>\n     * GET /api/v3/allOrderList\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * fromId -- optional/long <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-oco-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-oco-user_data</a>\n     */\n    public String getOCOOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ALL_OCO_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ALL_OPEN_OCO_LIST = \"/api/v3/openOrderList\";\n    /**\n     * GET /api/v3/openOrderList\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-open-oco-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-open-oco-user_data</a>\n     */\n    public String getOpenOCOOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ALL_OPEN_OCO_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ACCOUNT_INFO = \"/api/v3/account\";\n    /**\n     * Get current account information.\n     * <br><br>\n     * GET /api/v3/account\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#account-information-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#account-information-user_data</a>\n     */\n    public String account(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT_INFO, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ACCOUNT_TRADES = \"/api/v3/myTrades\";\n    /**\n     * Get trades for a specific account and symbol.\n     * <br><br>\n     * GET /api/v3/myTrades\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * orderId -- optional/long <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * fromId -- optional/long <br>\n     * limit -- optional/int <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#account-trade-list-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#account-trade-list-user_data</a>\n     */\n    public String myTrades(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT_TRADES, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String RATE_LIMIT = \"/api/v3/rateLimit/order\";\n    /**\n     * Displays the user's current order count usage for all intervals.\n     * <br><br>\n     * GET /api/v3/rateLimit/order\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-current-order-count-usage-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-current-order-count-usage-trade</a>\n     */\n    public String rateLimitOrder(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, RATE_LIMIT, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String PREVENTED_MATCHES = \"/api/v3/myPreventedMatches\";\n    /**\n     * Displays the list of orders that were expired because of STP.\n     * \n     * These are the combinations supported:\n     * \n     * * symbol + preventedMatchId\n     * * symbol + orderId\n     * * symbol + orderId + fromPreventedMatchId (limit will default to 500)\n     * * symbol + orderId + fromPreventedMatchId + limit\n     * \n     * <br><br>\n     * GET /api/v3/myPreventedMatches\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * preventedMatchId -- optional/long <br>\n     * orderId -- optional/long -- Order id <br>\n     * fromPreventedMatchId -- optional/long <br>\n     * limit -- optional/int -- Default 500; max 1000. <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-prevented-matches-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-prevented-matches-user_data</a>\n     */\n    public String preventedMatches(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, PREVENTED_MATCHES, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SOR_ALLOCATIONS = \"/api/v3/myAllocations\";\n    /**\n     * Retrieves allocations resulting from SOR order placement.\n     * \n     * \n     * Supported parameter combinations:\n     * Parameters \t                          Response\n     * symbol \t                              allocations from oldest to newest\n     * symbol + startTime \t                  oldest allocations since startTime\n     * symbol + endTime \t                    newest allocations until endTime\n     * symbol + startTime + endTime \t        allocations within the time range\n     * symbol + fromAllocationId \t          allocations by allocation ID\n     * symbol + orderId \t                    allocations related to an order starting with oldest\n     * symbol + orderId + fromAllocationId \tallocations related to an order by allocation ID\n     * \n     * Note: The time between startTime and endTime can't be longer than 24 hours.\n     * <br><br>\n     * GET /api/v3/myAllocations\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string -- Trading symbol, e.g. BNBUSDT <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * fromAllocationId -- optional/int <br>\n     * limit -- optional/int -- Default 500; max 1000. <br>\n     * orderId -- optional/long -- Order id <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-allocations-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-allocations-user_data</a>\n     */\n    public String sorAllocations(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SOR_ALLOCATIONS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String COMMISSION = \"/api/v3/account/commission\";\n    /**\n     * Get current account commission rates.\n     * <br><br>\n     * GET /api/v3/account/commission\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-commission-rates-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-commission-rates-user_data</a>\n     */\n    public String commission(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, COMMISSION, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SOR_ORDER = \"/api/v3/sor/order\";\n    /**\n     * Places an order using smart order routing (SOR).\n     * \n     * <br><br>\n     * POST /api/v3/sor/order\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string -- Trading symbol, e.g. BNBUSDT <br>\n     * side -- mandatory/enum <br>\n     * type -- mandatory/enum -- only supports LIMIT and MARKET orders <br>\n     * timeInForce -- optional/enum -- Order time in force <br>\n     * quantity -- mandatory/decimal <br>\n     * price -- optional/decimal <br>\n     * newClientOrderId -- optional/string -- Used to uniquely identify this cancel. Automatically generated by default <br>\n     * strategyId -- optional/int <br>\n     * strategyType -- optional/int -- The value cannot be less than 1000000. <br>\n     * icebergQty -- optional/decimal -- Used with LIMIT to create an iceberg order. <br>\n     * newOrderRespType -- optional/enum -- Set the response JSON. MARKET and LIMIT order types default to FULL, all other orders default to ACK. <br>\n     * selfTradePreventionMode -- optional/enum -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE. <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#new-order-using-sor-trade\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#new-order-using-sor-trade</a>\n     */\n    public String sorOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"quantity\");\n        return requestHandler.sendSignedRequest(baseUrl, SOR_ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String TEST_SOR_ORDER = \"/api/v3/sor/order/test\";\n    /**\n     * Test new order creation and signature/recvWindow using smart order routing (SOR).\n     * Creates and validates a new order but does not send it into the matching engine.\n     * <br><br>\n     * POST /api/v3/sor/order/test\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * In addition to all parameters accepted by POST /api/v3/sor/order, the following optional parameters are also accepted: <br>\n     * computeCommissionRates -- optional/boolean -- Default: false <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#test-new-order-using-sor-trade\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#test-new-order-using-sor-trade</a>\n     */\n    public String testSorOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"quantity\");\n        return requestHandler.sendSignedRequest(baseUrl, TEST_SOR_ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String TEST_NEW_ORDER = \"/api/v3/order/test\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TEST_NEW_ORDER = \"/api/v3/order/test\"", "syntax_pass": true}, {"attribute_expression": "private final String ORDER = \"/api/v3/order\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ORDER = \"/api/v3/order\"", "syntax_pass": true}, {"attribute_expression": "private final String ALL_OPEN_ORDERS = \"/api/v3/openOrders\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ALL_OPEN_ORDERS = \"/api/v3/openOrders\"", "syntax_pass": true}, {"attribute_expression": "private final String CANCEL_REPLACE = \"/api/v3/order/cancelReplace\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "CANCEL_REPLACE = \"/api/v3/order/cancelReplace\"", "syntax_pass": true}, {"attribute_expression": "private final String ALL_ORDERS = \"/api/v3/allOrders\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ALL_ORDERS = \"/api/v3/allOrders\"", "syntax_pass": true}, {"attribute_expression": "private final String OCO_ORDER = \"/api/v3/order/oco\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OCO_ORDER = \"/api/v3/order/oco\"", "syntax_pass": true}, {"attribute_expression": "private final String OCO_LIST = \"/api/v3/orderList\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OCO_LIST = \"/api/v3/orderList\"", "syntax_pass": true}, {"attribute_expression": "private final String ALL_OCO_LIST = \"/api/v3/allOrderList\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ALL_OCO_LIST = \"/api/v3/allOrderList\"", "syntax_pass": true}, {"attribute_expression": "private final String ALL_OPEN_OCO_LIST = \"/api/v3/openOrderList\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ALL_OPEN_OCO_LIST = \"/api/v3/openOrderList\"", "syntax_pass": true}, {"attribute_expression": "private final String ACCOUNT_INFO = \"/api/v3/account\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ACCOUNT_INFO = \"/api/v3/account\"", "syntax_pass": true}, {"attribute_expression": "private final String ACCOUNT_TRADES = \"/api/v3/myTrades\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ACCOUNT_TRADES = \"/api/v3/myTrades\"", "syntax_pass": true}, {"attribute_expression": "private final String RATE_LIMIT = \"/api/v3/rateLimit/order\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "RATE_LIMIT = \"/api/v3/rateLimit/order\"", "syntax_pass": true}, {"attribute_expression": "private final String PREVENTED_MATCHES = \"/api/v3/myPreventedMatches\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "PREVENTED_MATCHES = \"/api/v3/myPreventedMatches\"", "syntax_pass": true}, {"attribute_expression": "private final String SOR_ALLOCATIONS = \"/api/v3/myAllocations\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SOR_ALLOCATIONS = \"/api/v3/myAllocations\"", "syntax_pass": true}, {"attribute_expression": "private final String COMMISSION = \"/api/v3/account/commission\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "COMMISSION = \"/api/v3/account/commission\"", "syntax_pass": true}, {"attribute_expression": "private final String SOR_ORDER = \"/api/v3/sor/order\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SOR_ORDER = \"/api/v3/sor/order\"", "syntax_pass": true}, {"attribute_expression": "private final String TEST_SOR_ORDER = \"/api/v3/sor/order/test\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TEST_SOR_ORDER = \"/api/v3/sor/order/test\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo", "name": "SpotAlgo", "file_path": "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java", "superclasses": "", "methods": ["[]SpotAlgo(String,String,String,boolean,ProxyAuth)", "[]SpotAlgo(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]twapOrder(Map<String, Object>)", "[String]cancelOrder(Map<String, Object>)", "[String]getOpenOrders(Map<String, Object>)", "[String]getHistoricalOrders(Map<String, Object>)", "[String]getSubOrders(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo.[]SpotAlgo(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo.[]SpotAlgo(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo.[String]twapOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo.[String]cancelOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo.[String]getOpenOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo.[String]getHistoricalOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SpotAlgo.java.SpotAlgo.[String]getSubOrders(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Spot Algo Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#spot-algo-endpoints\">Spot Algo Endpoints</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class SpotAlgo {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public SpotAlgo(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public SpotAlgo(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String TWAP_ORDER = \"/sapi/v1/algo/spot/newOrderTwap\";\n    /**\n     * Place a new spot TWAP order with Algo service.\n     * \n     * <br><br>\n     * POST /sapi/v1/algo/spot/newOrderTwap\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string -- Trading symbol, e.g. BNBUSDT <br>\n     * side -- mandatory/enum <br>\n     * quantity -- mandatory/decimal -- Quantity of base asset; The notional (quantity * last price(base asset)) must be more than the equivalent of 1,000 USDT and less than the equivalent of 100,000 USDT. <br>\n     * duration -- mandatory/long -- Duration for TWAP orders in seconds. [300, 86400]<br>\n     * clientAlgoId -- optional/string -- A unique id among Algo orders (length should be 32 characters)\uff0c If it is not sent, we will give default value. <br>\n     * limitPrice -- optional/decimal -- Limit price of the order; If it is not sent, will place order by market price by default. <br>\n     * stpMode -- optional/enum -- The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#time-weighted-average-price-twap-new-order-trade-2\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#time-weighted-average-price-twap-new-order-trade-2</a>\n     */\n    public String twapOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"quantity\");\n        ParameterChecker.checkParameter(parameters, \"duration\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, TWAP_ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String CANCEL_ORDER = \"/sapi/v1/algo/spot/order\";\n    /**\n     * Cancel an open TWAP order\n     * \n     * <br><br>\n     * DELETE /sapi/v1/algo/spot/order\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * algoId -- mandatory/long <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#cancel-algo-order-trade-2\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#cancel-algo-order-trade-2</a>\n     */\n    public String cancelOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algoId\", Long.class);\n        return requestHandler.sendPublicRequest(baseUrl, CANCEL_ORDER, parameters, HttpMethod.DELETE, showLimitUsage);\n    }\n\n    private final String OPEN_ORDERS = \"/sapi/v1/algo/spot/openOrders\";\n    /**\n     * Get all open SPOT TWAP orders\n     * \n     * <br><br>\n     * GET /sapi/v1/algo/spot/openOrders\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-current-algo-open-orders-user_data-2\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-current-algo-open-orders-user_data-2</a>\n     */\n    public String getOpenOrders(Map<String, Object> parameters) {\n        return requestHandler.sendPublicRequest(baseUrl, OPEN_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String HISTORICAL_ORDERS = \"/sapi/v1/algo/spot/historicalOrders\";\n    /**\n     * Get all historical SPOT TWAP orders\n     * \n     * <br><br>\n     * GET /sapi/v1/algo/spot/historicalOrders\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- optional/string -- Trading symbol, e.g. BNBUSDT <br>\n     * side -- optional/enum <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * page -- optional/int -- Default 1 <br>\n     * pageSize -- optional/int -- MIN 1, MAX 100; Default 100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-historical-algo-orders-user_data-2\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-historical-algo-orders-user_data-2</a>\n     */\n    public String getHistoricalOrders(Map<String, Object> parameters) {\n        return requestHandler.sendPublicRequest(baseUrl, HISTORICAL_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SUB_ORDERS = \"/sapi/v1/algo/spot/subOrders\";\n    /**\n     * Get respective sub orders for a specified algoId\n     * \n     * <br><br>\n     * GET /sapi/v1/algo/spot/subOrders\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * algoId -- mandatory/long <br>\n     * page -- optional/int -- Default 1 <br>\n     * pageSize -- optional/int -- MIN 1, MAX 100; Default 100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-sub-orders-user_data-2\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-sub-orders-user_data-2</a>\n     */\n    public String getSubOrders(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algoId\", Long.class);\n        return requestHandler.sendPublicRequest(baseUrl, SUB_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String TWAP_ORDER = \"/sapi/v1/algo/spot/newOrderTwap\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TWAP_ORDER = \"/sapi/v1/algo/spot/newOrderTwap\"", "syntax_pass": true}, {"attribute_expression": "private final String CANCEL_ORDER = \"/sapi/v1/algo/spot/order\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "CANCEL_ORDER = \"/sapi/v1/algo/spot/order\"", "syntax_pass": true}, {"attribute_expression": "private final String OPEN_ORDERS = \"/sapi/v1/algo/spot/openOrders\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPEN_ORDERS = \"/sapi/v1/algo/spot/openOrders\"", "syntax_pass": true}, {"attribute_expression": "private final String HISTORICAL_ORDERS = \"/sapi/v1/algo/spot/historicalOrders\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "HISTORICAL_ORDERS = \"/sapi/v1/algo/spot/historicalOrders\"", "syntax_pass": true}, {"attribute_expression": "private final String SUB_ORDERS = \"/sapi/v1/algo/spot/subOrders\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_ORDERS = \"/sapi/v1/algo/spot/subOrders\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining", "name": "Mining", "file_path": "src/main/java/com/binance/connector/client/impl/spot/Mining.java", "superclasses": "", "methods": ["[]Mining(String,String,String,boolean,ProxyAuth)", "[]Mining(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]algorithm(Map<String, Object>)", "[String]coinName(Map<String, Object>)", "[String]detailMinerList(Map<String, Object>)", "[String]minerList(Map<String, Object>)", "[String]earningList(Map<String, Object>)", "[String]bonusList(Map<String, Object>)", "[String]hashrateResaleList(Map<String, Object>)", "[String]hashrateResaleDetail(Map<String, Object>)", "[String]hashrateResaleRequest(Map<String, Object>)", "[String]cancelHashrateResaleConfig(Map<String, Object>)", "[String]statsticsList(Map<String, Object>)", "[String]accountList(Map<String, Object>)", "[String]accountEarning(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[]Mining(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[]Mining(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]algorithm(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]coinName(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]detailMinerList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]minerList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]earningList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]bonusList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]hashrateResaleList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]hashrateResaleDetail(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]hashrateResaleRequest(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]cancelHashrateResaleConfig(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]statsticsList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]accountList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Mining.java.Mining.[String]accountEarning(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Mining Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#mining-endpoints\">Mining Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class Mining {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public Mining(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public Mining(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String ALGO = \"/sapi/v1/mining/pub/algoList\";\n    /**\n     * GET /sapi/v1/mining/pub/algoList\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#acquiring-algorithm-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#acquiring-algorithm-user_data</a>\n     */\n    public String algorithm(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ALGO, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String COIN_NAME = \"/sapi/v1/mining/pub/coinList\";\n    /**\n     * GET /sapi/v1/mining/pub/coinList\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#acquiring-coinname-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#acquiring-coinname-user_data</a>\n     */\n    public String coinName(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, COIN_NAME, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String DETAIL_MINER_LIST = \"/sapi/v1/mining/worker/detail\";\n    /**\n     * GET /sapi/v1/mining/worker/detail\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * algo -- mandatory/string -- sha256 <br>\n     * userName -- mandatory/string -- Mining account <br>\n     * workerName -- mandatory/string -- Miner's name(required) <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#request-for-detail-miner-list-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#request-for-detail-miner-list-user_data</a>\n     */\n    public String detailMinerList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        ParameterChecker.checkParameter(parameters, \"workerName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, DETAIL_MINER_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String MINER_LIST = \"/sapi/v1/mining/worker/list\";\n    /**\n     * GET /sapi/v1/mining/worker/list\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * algo -- mandatory/string -- sha256 <br>\n     * userName -- mandatory/string -- Mining account <br>\n     * pageIndex -- optional/int -- Page number,default is first page,start form 1 <br>\n     * sort -- optional/int -- sort sequence(default=0)0 positive sequence, 1 negative sequence <br>\n     * sortColumn -- optional/int -- Sort by( default 1):\n     * 1: miner name,\n     * 2: real-time computing power,\n     * 3: daily average computing power,\n     * 4: real-time rejection rate,\n     * 5: last submission time <br>\n     * workerStatus -- optional/int -- miners status(default=0)0 all,1 valid,2 invalid,3 failure <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#request-for-miner-list-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#request-for-miner-list-user_data</a>\n     */\n    public String minerList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, MINER_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String EARNING_LIST = \"/sapi/v1/mining/payment/list\";\n    /**\n     * GET /sapi/v1/mining/payment/list\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * algo -- mandatory/string -- sha256 <br>\n     * userName -- mandatory/string -- Mining account <br>\n     * coin -- optional/string <br>\n     * startDate -- optional/long -- Search date, millisecond timestamp, while empty query all\t <br>\n     * endDate -- optional/long -- Search date, millisecond timestamp, while empty query all <br>\n     * pageIndex -- optional/int -- Page number, empty default first page, starting from 1 <br>\n     * pageSize -- optional/int -- \tNumber of pages, minimum 10, maximum 200 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#earnings-list-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#earnings-list-user_data</a>\n     */\n    public String earningList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, EARNING_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String BONUS_LIST = \"/sapi/v1/mining/payment/other\";\n    /**\n     * GET /sapi/v1/mining/payment/other\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * algo -- mandatory/string -- sha256 <br>\n     * userName -- mandatory/string -- Mining account <br>\n     * coin -- optional/string <br>\n     * startDate -- optional/long -- Search date, millisecond timestamp, while empty query all\t <br>\n     * endDate -- optional/long -- Search date, millisecond timestamp, while empty query all <br>\n     * pageIndex -- optional/int -- Page number, empty default first page, starting from 1 <br>\n     * pageSize -- optional/int -- \tNumber of pages, minimum 10, maximum 200 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#extra-bonus-list-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#extra-bonus-list-user_data</a>\n     */\n    public String bonusList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, BONUS_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String HASHRATE_RESALE_LIST = \"/sapi/v1/mining/hash-transfer/config/details/list\";\n    /**\n     * GET /sapi/v1/mining/hash-transfer/config/details/list\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * pageIndex -- optional/int -- Page number, empty default first page, starting from 1 <br>\n     * pageSize -- optional/int -- \tNumber of pages, minimum 10, maximum 200 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#hashrate-resale-list-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#hashrate-resale-list-user_data</a>\n     */\n    public String hashrateResaleList(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, HASHRATE_RESALE_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String HASHRATE_RESALE_DETAIL = \"/sapi/v1/mining/hash-transfer/profit/details\";\n    /**\n     * GET /sapi/v1/mining/hash-transfer/profit/details\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * configId -- mandatory/int -- Mining ID <br>\n     * userName -- mandatory/string -- Mining Account <br>\n     * pageIndex -- optional/int -- Page number, empty default first page, starting from 1 <br>\n     * pageSize -- optional/int -- \tNumber of pages, minimum 10, maximum 200 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#hashrate-resale-detail-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#hashrate-resale-detail-user_data</a>\n     */\n    public String hashrateResaleDetail(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"configId\", Integer.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, HASHRATE_RESALE_DETAIL, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String HASHRATE_RESALE_REQUEST = \"/sapi/v1/mining/hash-transfer/config\";\n    /**\n     * GET /sapi/v1/mining/hash-transfer/config\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * userName -- mandatory/string -- Mining Account <br>\n     * algo -- mandatory/string -- Transfer algorithm(sha256) <br>\n     * endDate -- mandatory/long -- Resale End Time (Millisecond timestamp) <br>\n     * startDate -- mandatory/long -- Resale Start Time(Millisecond timestamp) <br>\n     * toPoolUser -- mandatory/string -- Mining Account <br>\n     * hashRate -- mandatory/long -- Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000) <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#hashrate-resale-request-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#hashrate-resale-request-user_data</a>\n     */\n    public String hashrateResaleRequest(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        ParameterChecker.checkParameter(parameters, \"endDate\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"startDate\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"toPoolUser\", String.class);\n        ParameterChecker.checkParameter(parameters, \"hashRate\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, HASHRATE_RESALE_REQUEST, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String CANCEL_HASHRATE_RESALE_CONFIG = \"/sapi/v1/mining/hash-transfer/config/cancel\";\n    /**\n     * GET /sapi/v1/mining/hash-transfer/config/cancel\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * configId -- mandatory/int -- Mining ID <br>\n     * userName -- mandatory/string -- Mining Account <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#cancel-hashrate-resale-configuration-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#cancel-hashrate-resale-configuration-user_data</a>\n     */\n    public String cancelHashrateResaleConfig(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"configId\", Integer.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, CANCEL_HASHRATE_RESALE_CONFIG, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String STATSTICS_LIST = \"/sapi/v1/mining/statistics/user/status\";\n    /**\n     * GET /sapi/v1/mining/statistics/user/status\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * algo -- mandatory/string -- Algorithm(sha256) <br>\n     * userName -- mandatory/string -- Mining Account <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#statistic-list-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#statistic-list-user_data</a>\n     */\n    public String statsticsList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, STATSTICS_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ACCOUNT_LIST = \"/sapi/v1/mining/statistics/user/list\";\n    /**\n     * GET /sapi/v1/mining/statistics/user/list\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * algo -- mandatory/string -- Algorithm(sha256) <br>\n     * userName -- mandatory/string -- Mining Account <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#account-list-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#account-list-user_data</a>\n     */\n    public String accountList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        ParameterChecker.checkParameter(parameters, \"userName\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ACCOUNT_EARNING = \"/sapi/v1/mining/payment/uid\";\n    /**\n     * GET /sapi/v1/mining/payment/uid\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * algo -- mandatory/string -- Algorithm(sha256) <br>\n     * startDate -- optional/long -- Millisecond timestamp <br>\n     * endDate -- optional/long -- Millisecond timestamp <br>\n     * pageIndex -- optional/int -- Default 1 <br>\n     * pageSize -- optional/int -- \tMin 10,Max 200 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#mining-account-earning-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#mining-account-earning-user_data</a>\n     */\n    public String accountEarning(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"algo\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT_EARNING, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String ALGO = \"/sapi/v1/mining/pub/algoList\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ALGO = \"/sapi/v1/mining/pub/algoList\"", "syntax_pass": true}, {"attribute_expression": "private final String COIN_NAME = \"/sapi/v1/mining/pub/coinList\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "COIN_NAME = \"/sapi/v1/mining/pub/coinList\"", "syntax_pass": true}, {"attribute_expression": "private final String DETAIL_MINER_LIST = \"/sapi/v1/mining/worker/detail\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "DETAIL_MINER_LIST = \"/sapi/v1/mining/worker/detail\"", "syntax_pass": true}, {"attribute_expression": "private final String MINER_LIST = \"/sapi/v1/mining/worker/list\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "MINER_LIST = \"/sapi/v1/mining/worker/list\"", "syntax_pass": true}, {"attribute_expression": "private final String EARNING_LIST = \"/sapi/v1/mining/payment/list\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "EARNING_LIST = \"/sapi/v1/mining/payment/list\"", "syntax_pass": true}, {"attribute_expression": "private final String BONUS_LIST = \"/sapi/v1/mining/payment/other\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BONUS_LIST = \"/sapi/v1/mining/payment/other\"", "syntax_pass": true}, {"attribute_expression": "private final String HASHRATE_RESALE_LIST = \"/sapi/v1/mining/hash-transfer/config/details/list\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "HASHRATE_RESALE_LIST = \"/sapi/v1/mining/hash-transfer/config/details/list\"", "syntax_pass": true}, {"attribute_expression": "private final String HASHRATE_RESALE_DETAIL = \"/sapi/v1/mining/hash-transfer/profit/details\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "HASHRATE_RESALE_DETAIL = \"/sapi/v1/mining/hash-transfer/profit/details\"", "syntax_pass": true}, {"attribute_expression": "private final String HASHRATE_RESALE_REQUEST = \"/sapi/v1/mining/hash-transfer/config\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "HASHRATE_RESALE_REQUEST = \"/sapi/v1/mining/hash-transfer/config\"", "syntax_pass": true}, {"attribute_expression": "private final String CANCEL_HASHRATE_RESALE_CONFIG = \"/sapi/v1/mining/hash-transfer/config/cancel\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "CANCEL_HASHRATE_RESALE_CONFIG = \"/sapi/v1/mining/hash-transfer/config/cancel\"", "syntax_pass": true}, {"attribute_expression": "private final String STATSTICS_LIST = \"/sapi/v1/mining/statistics/user/status\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "STATSTICS_LIST = \"/sapi/v1/mining/statistics/user/status\"", "syntax_pass": true}, {"attribute_expression": "private final String ACCOUNT_LIST = \"/sapi/v1/mining/statistics/user/list\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ACCOUNT_LIST = \"/sapi/v1/mining/statistics/user/list\"", "syntax_pass": true}, {"attribute_expression": "private final String ACCOUNT_EARNING = \"/sapi/v1/mining/payment/uid\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ACCOUNT_EARNING = \"/sapi/v1/mining/payment/uid\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin", "name": "PortfolioMargin", "file_path": "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java", "superclasses": "", "methods": ["[]PortfolioMargin(String,String,String,boolean,ProxyAuth)", "[]PortfolioMargin(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]getAccount(Map<String, Object>)", "[String]collateralRate(Map<String, Object>)", "[String]bankruptcyLoanRecord(Map<String, Object>)", "[String]repay(Map<String, Object>)", "[String]interestHistory(Map<String, Object>)", "[String]assetIndexPrice(Map<String, Object>)", "[String]autoCollection(Map<String, Object>)", "[String]assetCollection(Map<String, Object>)", "[String]bnbTransfer(Map<String, Object>)", "[String]switchAutoRepayFutures(Map<String, Object>)", "[String]autoRepayFuturesStatus(Map<String, Object>)", "[String]repayFutures(Map<String, Object>)", "[String]assetLeverage()"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[]PortfolioMargin(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[]PortfolioMargin(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]getAccount(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]collateralRate(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]bankruptcyLoanRecord(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]repay(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]interestHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]assetIndexPrice(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]autoCollection(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]assetCollection(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]bnbTransfer(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]switchAutoRepayFutures(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]autoRepayFuturesStatus(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]repayFutures(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/PortfolioMargin.java.PortfolioMargin.[String]assetLeverage()"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Portfolio Margin Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#portfolio-margin-endpoints\">Portfolio Margin Endpoints</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class PortfolioMargin {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public PortfolioMargin(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public PortfolioMargin(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String ACCOUNT = \"/sapi/v1/portfolio/account\";\n    /**\n     * GET /sapi/v1/portfolio/account\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-classic-portfolio-margin-account-info-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-classic-portfolio-margin-account-info-user_data</a>\n     */\n    public String getAccount(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String COLLATERAL_RATE = \"/sapi/v1/portfolio/collateralRate\";\n    /**\n     * Portfolio Margin Collateral Rate\n     * <br><br>\n     * GET /sapi/v1/portfolio/collateralRate\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#classic-portfolio-margin-collateral-rate-market_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#classic-portfolio-margin-collateral-rate-market_data</a>\n     */\n    public String collateralRate(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, COLLATERAL_RATE, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String PM_LOAN = \"/sapi/v1/portfolio/pmLoan\";\n    /**\n     * Query Portfolio Margin Bankruptcy Loan Record\n     * <br><br>\n     * GET /sapi/v1/portfolio/pmLoan\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-classic-portfolio-margin-bankruptcy-loan-amount-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-classic-portfolio-margin-bankruptcy-loan-amount-user_data</a>\n     */\n    public String bankruptcyLoanRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, PM_LOAN, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String REPAY = \"/sapi/v1/portfolio/repay\";\n    /**\n     * Repay Portfolio Margin Bankruptcy Loan\n     * <br><br>\n     * POST /sapi/v1/portfolio/repay\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * from -- optional/string -- SPOT or MARGIN\uff0cdefault SPOT<br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#classic-portfolio-margin-bankruptcy-loan-repay\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#classic-portfolio-margin-bankruptcy-loan-repay</a>\n     */\n    public String repay(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, REPAY, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String INTEREST_HISTORY = \"/sapi/v1/portfolio/interest-history\";\n    /**\n     * Query interest history of negative balance for portfolio margin.\n     * \n     * <br><br>\n     * GET /sapi/v1/portfolio/interest-history\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * size -- optional/integer -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-classic-portfolio-margin-negative-balance-interest-history-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-classic-portfolio-margin-negative-balance-interest-history-user_data</a>\n     */\n    public String interestHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, INTEREST_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ASSET_INDEX_PRICE = \"/sapi/v1/portfolio/asset-index-price\";\n    /**\n     * Query Portfolio Margin Asset Index Price\n     * \n     * <br><br>\n     * GET /sapi/v1/portfolio/asset-index-price\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-portfolio-margin-asset-index-price-market_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-portfolio-margin-asset-index-price-market_data</a>\n     */\n    public String assetIndexPrice(Map<String, Object> parameters) {\n        return requestHandler.sendApiRequest(baseUrl, ASSET_INDEX_PRICE, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String AUTO_COLLECTION = \"/sapi/v1/portfolio/auto-collection\";\n    /**\n     * Transfers all assets from Futures Account to Margin account\n     * \n     * - The BNB would not be collected from UM-PM account to the Portfolio Margin account.\n     * - You can only use this function 500 times per hour in a rolling manner.\n     * <br><br>\n     * POST /sapi/v1/portfolio/auto-collection\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#fund-auto-collection-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#fund-auto-collection-user_data</a>\n     */\n    public String autoCollection(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, AUTO_COLLECTION, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n\n    private final String ASSET_COLLECTION = \"/sapi/v1/portfolio/asset-collection\";\n    /**\n     * Transfers specific asset from Futures Account to Margin account\n     * \n     * <br><br>\n     * POST /sapi/v1/portfolio/asset-collection\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- mandatory/string <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#fund-collection-by-asset-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#fund-collection-by-asset-user_data</a>\n     */\n    public String assetCollection(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ASSET_COLLECTION, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String BNB_TRANSFER = \"/sapi/v1/portfolio/bnb-transfer\";\n    /**\n     * BNB transfer can be between Margin Account and USDM Account\n     * \n     * <br><br>\n     * POST /sapi/v1/portfolio/bnb-transfer\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * transferSide -- mandatory/string -- \"TO_UM\",\"FROM_UM\" <br>\n     * amount -- mandatory/decimal <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#bnb-transfer-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#bnb-transfer-user_data</a>\n     */\n    public String bnbTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"transferSide\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, BNB_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String SWITCH_AUTO_REPAY_FUTURES = \"/sapi/v1/portfolio/repay-futures-switch\";\n    /**\n     * Change Auto-repay-futures Status\n     * \n     * <br><br>\n     * POST /sapi/v1/portfolio/repay-futures-switch\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * autoRepay -- mandatory/boolean <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#change-auto-repay-futures-status-trade\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#change-auto-repay-futures-status-trade</a>\n     */\n    public String switchAutoRepayFutures(Map<String, Object> parameters) {\n        ParameterChecker.checkRequiredParameter(parameters, \"autoRepay\");\n        return requestHandler.sendSignedRequest(baseUrl, SWITCH_AUTO_REPAY_FUTURES, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String AUTO_REPAY_FUTURES_STATUS = \"/sapi/v1/portfolio/repay-futures-switch\";\n    /**\n     * Query Auto-repay-futures Status\n     * \n     * <br><br>\n     * GET /sapi/v1/portfolio/repay-futures-switch\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-auto-repay-futures-status-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-auto-repay-futures-status-user_data</a>\n     */\n    public String autoRepayFuturesStatus(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, AUTO_REPAY_FUTURES_STATUS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String REPAY_FUTURES = \"/sapi/v1/portfolio/repay-futures-negative-balance\";\n    /**\n     * Repay futures Negative Balance\n     * \n     * <br><br>\n     * POST /sapi/v1/portfolio/repay-futures-negative-balance\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#repay-futures-negative-balance-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#repay-futures-negative-balance-user_data</a>\n     */\n    public String repayFutures(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, REPAY_FUTURES, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String ASSET_LEVERAGE = \"/sapi/v1/portfolio/margin-asset-leverage\";\n    /**\n     * GET /sapi/v1/portfolio/margin-asset-leverage\n     * <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-portfolio-margin-asset-leverage-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-portfolio-margin-asset-leverage-user_data</a>\n     */\n    public String assetLeverage() {\n        return requestHandler.sendSignedRequest(baseUrl, ASSET_LEVERAGE, null, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String ACCOUNT = \"/sapi/v1/portfolio/account\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ACCOUNT = \"/sapi/v1/portfolio/account\"", "syntax_pass": true}, {"attribute_expression": "private final String COLLATERAL_RATE = \"/sapi/v1/portfolio/collateralRate\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "COLLATERAL_RATE = \"/sapi/v1/portfolio/collateralRate\"", "syntax_pass": true}, {"attribute_expression": "private final String PM_LOAN = \"/sapi/v1/portfolio/pmLoan\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "PM_LOAN = \"/sapi/v1/portfolio/pmLoan\"", "syntax_pass": true}, {"attribute_expression": "private final String REPAY = \"/sapi/v1/portfolio/repay\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "REPAY = \"/sapi/v1/portfolio/repay\"", "syntax_pass": true}, {"attribute_expression": "private final String INTEREST_HISTORY = \"/sapi/v1/portfolio/interest-history\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "INTEREST_HISTORY = \"/sapi/v1/portfolio/interest-history\"", "syntax_pass": true}, {"attribute_expression": "private final String ASSET_INDEX_PRICE = \"/sapi/v1/portfolio/asset-index-price\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ASSET_INDEX_PRICE = \"/sapi/v1/portfolio/asset-index-price\"", "syntax_pass": true}, {"attribute_expression": "private final String AUTO_COLLECTION = \"/sapi/v1/portfolio/auto-collection\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "AUTO_COLLECTION = \"/sapi/v1/portfolio/auto-collection\"", "syntax_pass": true}, {"attribute_expression": "private final String ASSET_COLLECTION = \"/sapi/v1/portfolio/asset-collection\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ASSET_COLLECTION = \"/sapi/v1/portfolio/asset-collection\"", "syntax_pass": true}, {"attribute_expression": "private final String BNB_TRANSFER = \"/sapi/v1/portfolio/bnb-transfer\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BNB_TRANSFER = \"/sapi/v1/portfolio/bnb-transfer\"", "syntax_pass": true}, {"attribute_expression": "private final String SWITCH_AUTO_REPAY_FUTURES = \"/sapi/v1/portfolio/repay-futures-switch\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SWITCH_AUTO_REPAY_FUTURES = \"/sapi/v1/portfolio/repay-futures-switch\"", "syntax_pass": true}, {"attribute_expression": "private final String AUTO_REPAY_FUTURES_STATUS = \"/sapi/v1/portfolio/repay-futures-switch\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "AUTO_REPAY_FUTURES_STATUS = \"/sapi/v1/portfolio/repay-futures-switch\"", "syntax_pass": true}, {"attribute_expression": "private final String REPAY_FUTURES = \"/sapi/v1/portfolio/repay-futures-negative-balance\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "REPAY_FUTURES = \"/sapi/v1/portfolio/repay-futures-negative-balance\"", "syntax_pass": true}, {"attribute_expression": "private final String ASSET_LEVERAGE = \"/sapi/v1/portfolio/margin-asset-leverage\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ASSET_LEVERAGE = \"/sapi/v1/portfolio/margin-asset-leverage\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market", "name": "Market", "file_path": "src/main/java/com/binance/connector/client/impl/spot/Market.java", "superclasses": "", "methods": ["[]Market(String,String,boolean,ProxyAuth)", "[String]ping()", "[String]time()", "[String]exchangeInfo(Map<String, Object>)", "[String]depth(Map<String, Object>)", "[String]trades(Map<String, Object>)", "[String]historicalTrades(Map<String, Object>)", "[String]aggTrades(Map<String, Object>)", "[String]klines(Map<String, Object>)", "[String]uiKlines(Map<String, Object>)", "[String]averagePrice(Map<String, Object>)", "[String]ticker24H(Map<String, Object>)", "[String]tickerSymbol(Map<String, Object>)", "[String]bookTicker(Map<String, Object>)", "[String]ticker(Map<String, Object>)", "[String]tradingDayTicker(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[]Market(String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]ping()", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]time()", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]exchangeInfo(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]depth(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]trades(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]historicalTrades(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]aggTrades(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]klines(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]uiKlines(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]averagePrice(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]ticker24H(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]tickerSymbol(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]bookTicker(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]ticker(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Market.java.Market.[String]tradingDayTicker(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Market Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#market-data-endpoints\">Market Data Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class Market {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public Market(String baseUrl, String apiKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n    private final String PING = \"/api/v3/ping\";\n    /**\n     * Test connectivity to the Rest API.\n     * <br><br>\n     * GET /api/v3/ping\n     * <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#test-connectivity\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#test-connectivity</a>\n     */\n    public String ping() {\n        return requestHandler.sendPublicRequest(baseUrl, PING, null, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String TIME = \"/api/v3/time\";\n    /**\n     * Test connectivity to the Rest API and get the current server time.\n     * <br><br>\n     * GET /api/v3/time\n     * <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#test-connectivity\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#check-server-time</a>\n     */\n    public String time() {\n        return requestHandler.sendPublicRequest(baseUrl, TIME, null, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String EXCHANGE_INFO = \"/api/v3/exchangeInfo\";\n    /**\n     * Current exchange trading rules and symbol information.\n     * <br><br>\n     * GET /api/v3/exchangeinfo\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- optional/string <br>\n     * symbols -- optional/ArrayList <br>\n     * permissions -- optional/ArrayList -- support single or multiple values (e.g. \"SPOT\", [\"MARGIN\",\"LEVERAGED\"]) <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#exchange-information\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#exchange-information</a>\n     */\n    public String exchangeInfo(Map<String, Object> parameters) {\n        if (parameters.containsKey(\"symbol\") && parameters.containsKey(\"symbols\")) {\n            throw new BinanceConnectorException(\"symbol and symbols cannot be sent together.\");\n        }\n        if ((parameters.containsKey(\"symbol\") && parameters.containsKey(\"permissions\"))\n             || parameters.containsKey(\"symbols\") && parameters.containsKey(\"permissions\")) {\n            throw new BinanceConnectorException(\"permissions cannot be sent together with symbol or symbols.\");\n        }\n        if (parameters.containsKey(\"symbols\")) {\n            ParameterChecker.checkParameterType(parameters.get(\"symbols\"), ArrayList.class, \"symbols\");\n            parameters.put(\"symbols\", JSONParser.getJSONArray(\n                                    (ArrayList<?>) parameters.get(\"symbols\"), \"symbols\"));\n        }\n        if (parameters.containsKey(\"permissions\")) {\n            ParameterChecker.checkParameterType(parameters.get(\"permissions\"), ArrayList.class, \"permissions\");\n            parameters.put(\"permissions\", JSONParser.getJSONArray(\n                                    (ArrayList<?>) parameters.get(\"permissions\"), \"permissions\"));\n        }\n        return requestHandler.sendPublicRequest(baseUrl, EXCHANGE_INFO, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String DEPTH = \"/api/v3/depth\";\n    /**\n     * GET /api/v3/depth\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * limit -- optional/integer -- limit the results\n     *            Default 100; max 5000. Valid limits:[5, 10, 20, 50, 100, 500, 1000, 5000] <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#order-book\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#order-book</a>\n     */\n    public String depth(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, DEPTH, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String TRADES = \"/api/v3/trades\";\n    /**\n     * Get recent trades.\n     * <br><br>\n     * GET /api/v3/trades\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * limit -- optional/integer -- limit the results Default 500; max 1000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#recent-trades-list\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#recent-trades-list</a>\n     */\n    public String trades(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, TRADES, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String HISTORICAL_TRADES = \"/api/v3/historicalTrades\";\n    /**\n     * Get older market trades.\n     * <br><br>\n     * GET /api/v3/historicalTrades\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * limit -- optional/integer -- limit the result Default 500; max 1000 <br>\n     * fromId -- optional/long -- trade id to fetch from. Default gets most recent trades <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#old-trade-lookup\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#old-trade-lookup</a>\n     *\n     */\n    public String historicalTrades(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, HISTORICAL_TRADES, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String AGG_TRADES = \"/api/v3/aggTrades\";\n    /**\n     * Get compressed, aggregate trades. Trades that fill at the time, from the same order,\n     * with the same price will have the quantity aggregated.\n     * <br><br>\n     * GET /api/v3/aggTrades\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * fromId -- optional/long -- id to get aggregate trades from INCLUSIVE <br>\n     * startTime -- optional/long -- Timestamp in ms to get aggregate trades from INCLUSIVE <br>\n     * endTime -- optional/long -- Timestamp in ms to get aggregate trades until INCLUSIVE <br>\n     * limit -- optional/integer -- limit the results Default 500; max 1000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#compressed-aggregate-trades-list\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#compressed-aggregate-trades-list</a>\n     */\n    public String aggTrades(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, AGG_TRADES, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String KLINES = \"/api/v3/klines\";\n    /**\n     * Kline/candlestick bars for a symbol.\n     * Klines are uniquely identified by their open time.\n     * <br><br>\n     * GET /api/v3/klines\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * interval -- mandatory/string <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * timeZone -- optional/string -- Default:0 (UTC) <br>\n     * limit -- optional/integer -- limit the results Default 500; max 1000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#kline-candlestick-data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#kline-candlestick-data</a>\n     */\n    public String klines(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"interval\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, KLINES, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String UIKLINES = \"/api/v3/uiKlines\";\n    /**\n     * The request is similar to klines having the same parameters and response.\n     * uiKlines return modified kline data, optimized for presentation of candlestick charts.\n     * <br><br>\n     * GET /api/v3/uiKlines\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * interval -- mandatory/string <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * timeZone -- optional/string -- Default:0 (UTC) <br>\n     * limit -- optional/integer -- limit the results Default 500; max 1000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#uiklines\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#uiklines</a>\n     */\n    public String uiKlines(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"interval\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, UIKLINES, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String AVG_PRICE = \"/api/v3/avgPrice\";\n    /**\n     * Current average price for a symbol.\n     * <br><br>\n     * GET /api/v3/avgPrice\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string -- the trading pair <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#current-average-price\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#current-average-price</a>\n     */\n    public String averagePrice(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, AVG_PRICE, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String TICKER_24H = \"/api/v3/ticker/24hr\";\n    /**\n     * 24 hour rolling window price change statistics. Careful when accessing this with no symbol.\n     * <br><br>\n     * GET /api/v3/ticker/24hr\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- optional/string -- the trading pair <br>\n     * symbols -- optional/string <br>\n     * type -- optional/enum -- Supported values: FULL or MINI. If none provided, the default is FULL <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#24hr-ticker-price-change-statistics\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#24hr-ticker-price-change-statistics</a>\n     */\n    public String ticker24H(Map<String, Object> parameters) {\n        if (parameters.containsKey(\"symbol\") && parameters.containsKey(\"symbols\")) {\n            throw new BinanceConnectorException(\"symbol and symbols cannot be sent together.\");\n        }\n        if (parameters.containsKey(\"symbols\")) {\n            ParameterChecker.checkParameterType(parameters.get(\"symbols\"), ArrayList.class, \"symbols\");\n            parameters.put(\"symbols\", JSONParser.getJSONArray(\n                    (ArrayList<?>) parameters.get(\"symbols\"), \"symbols\"));\n        }\n        return requestHandler.sendPublicRequest(baseUrl, TICKER_24H, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String TICKER_SYMBOL = \"/api/v3/ticker/price\";\n    /**\n     * Latest price for a symbol or symbols.\n     * <br><br>\n     * GET /api/v3/ticker/price\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- optional/string -- the trading pair <br>\n     * symbols -- optional/string <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#symbol-price-ticker\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#symbol-price-ticker</a>\n     */\n    public String tickerSymbol(Map<String, Object> parameters) {\n        if (parameters.containsKey(\"symbol\") && parameters.containsKey(\"symbols\")) {\n            throw new BinanceConnectorException(\"symbol and symbols cannot be sent together.\");\n        }\n        if (parameters.containsKey(\"symbols\")) {\n            ParameterChecker.checkParameterType(parameters.get(\"symbols\"), ArrayList.class, \"symbols\");\n            parameters.put(\"symbols\", JSONParser.getJSONArray(\n                    (ArrayList<?>) parameters.get(\"symbols\"), \"symbols\"));\n        }\n        return requestHandler.sendPublicRequest(baseUrl, TICKER_SYMBOL, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String BOOK_TICKER = \"/api/v3/ticker/bookTicker\";\n    /**\n     * Best price/qty on the order book for a symbol or symbols.\n     * <br><br>\n     * GET /api/v3/ticker/bookTicker\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- optional/string -- the trading pair <br>\n     * symbols -- optional/string <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#symbol-order-book-ticker\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#symbol-order-book-ticker</a>\n     */\n    public String bookTicker(Map<String, Object> parameters) {\n        if (parameters.containsKey(\"symbol\") && parameters.containsKey(\"symbols\")) {\n            throw new BinanceConnectorException(\"symbol and symbols cannot be sent together.\");\n        }\n        if (parameters.containsKey(\"symbols\")) {\n            ParameterChecker.checkParameterType(parameters.get(\"symbols\"), ArrayList.class, \"symbols\");\n            parameters.put(\"symbols\", JSONParser.getJSONArray(\n                    (ArrayList<?>) parameters.get(\"symbols\"), \"symbols\"));\n        }\n        return requestHandler.sendPublicRequest(baseUrl, BOOK_TICKER, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String TICKER = \"/api/v3/ticker\";\n    /**\n     * The window used to compute statistics will be no more than 59999ms from the requested windowSize.\n     * openTime for /api/v3/ticker always starts on a minute, while the closeTime is the current time of the request.\n     * As such, the effective window will be up to 59999ms wider than windowSize.\n     * <br><br>\n     * GET /api/v3/ticker\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string -- Either symbol or symbols must be provided.\n     * symbols -- optional/string -- Example: [\"BTCUSDT\",\"BNBUSDT\"] or %5B%22BTCUSDT%22,%22BNBUSDT%22%5D. The maximum number of symbols allowed in a request is 100. <br>\n     * windowSize -- optional/enum -- Defaults to 1d if no parameter provided <br>\n     * type -- optional/enum -- Supported values: FULL or MINI. If none provided, the default is FULL <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#rolling-window-price-change-statistics\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#rolling-window-price-change-statistics</a>\n     */\n    public String ticker(Map<String, Object> parameters) {\n        if (parameters.containsKey(\"symbol\") && parameters.containsKey(\"symbols\")) {\n            throw new BinanceConnectorException(\"symbol and symbols cannot be sent together.\");\n        }\n        if (parameters.containsKey(\"symbols\")) {\n            ParameterChecker.checkParameterType(parameters.get(\"symbols\"), ArrayList.class, \"symbols\");\n            parameters.put(\"symbols\", JSONParser.getJSONArray(\n                    (ArrayList<?>) parameters.get(\"symbols\"), \"symbols\"));\n        } else {\n            ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        }\n        return requestHandler.sendPublicRequest(baseUrl, TICKER, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String TRADING_DAY = \"/api/v3/ticker/tradingDay\";\n    /**\n     * Price change statistics for a trading day.\n     * <br><br>\n     * GET /api/v3/ticker/tradingDay\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string -- Either symbol or symbols must be provided.\n     * symbols -- optional/string -- Example: [\"BTCUSDT\",\"BNBUSDT\"] or %5B%22BTCUSDT%22,%22BNBUSDT%22%5D. The maximum number of symbols allowed in a request is 100. <br>\n     * windowSize -- optional/string -- Defaults to 1d if no parameter provided <br>\n     * timeZone -- optional/enum -- Default: 0 (UTC) <br>\n     * type -- optional/enum -- Supported values: FULL or MINI. If none provided, the default is FULL <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#trading-day-ticker\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#trading-day-ticker</a>\n     */\n    public String tradingDayTicker(Map<String, Object> parameters) {\n        if (parameters.containsKey(\"symbol\") && parameters.containsKey(\"symbols\")) {\n            throw new BinanceConnectorException(\"symbol and symbols cannot be sent together.\");\n        }\n        if (parameters.containsKey(\"symbols\")) {\n            ParameterChecker.checkParameterType(parameters.get(\"symbols\"), ArrayList.class, \"symbols\");\n            parameters.put(\"symbols\", JSONParser.getJSONArray(\n                    (ArrayList<?>) parameters.get(\"symbols\"), \"symbols\"));\n        } else {\n            ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        }\n        return requestHandler.sendPublicRequest(baseUrl, TRADING_DAY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String PING = \"/api/v3/ping\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "PING = \"/api/v3/ping\"", "syntax_pass": true}, {"attribute_expression": "private final String TIME = \"/api/v3/time\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TIME = \"/api/v3/time\"", "syntax_pass": true}, {"attribute_expression": "private final String EXCHANGE_INFO = \"/api/v3/exchangeInfo\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "EXCHANGE_INFO = \"/api/v3/exchangeInfo\"", "syntax_pass": true}, {"attribute_expression": "private final String DEPTH = \"/api/v3/depth\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "DEPTH = \"/api/v3/depth\"", "syntax_pass": true}, {"attribute_expression": "private final String TRADES = \"/api/v3/trades\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TRADES = \"/api/v3/trades\"", "syntax_pass": true}, {"attribute_expression": "private final String HISTORICAL_TRADES = \"/api/v3/historicalTrades\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "HISTORICAL_TRADES = \"/api/v3/historicalTrades\"", "syntax_pass": true}, {"attribute_expression": "private final String AGG_TRADES = \"/api/v3/aggTrades\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "AGG_TRADES = \"/api/v3/aggTrades\"", "syntax_pass": true}, {"attribute_expression": "private final String KLINES = \"/api/v3/klines\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "KLINES = \"/api/v3/klines\"", "syntax_pass": true}, {"attribute_expression": "private final String UIKLINES = \"/api/v3/uiKlines\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "UIKLINES = \"/api/v3/uiKlines\"", "syntax_pass": true}, {"attribute_expression": "private final String AVG_PRICE = \"/api/v3/avgPrice\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "AVG_PRICE = \"/api/v3/avgPrice\"", "syntax_pass": true}, {"attribute_expression": "private final String TICKER_24H = \"/api/v3/ticker/24hr\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TICKER_24H = \"/api/v3/ticker/24hr\"", "syntax_pass": true}, {"attribute_expression": "private final String TICKER_SYMBOL = \"/api/v3/ticker/price\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TICKER_SYMBOL = \"/api/v3/ticker/price\"", "syntax_pass": true}, {"attribute_expression": "private final String BOOK_TICKER = \"/api/v3/ticker/bookTicker\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BOOK_TICKER = \"/api/v3/ticker/bookTicker\"", "syntax_pass": true}, {"attribute_expression": "private final String TICKER = \"/api/v3/ticker\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TICKER = \"/api/v3/ticker\"", "syntax_pass": true}, {"attribute_expression": "private final String TRADING_DAY = \"/api/v3/ticker/tradingDay\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TRADING_DAY = \"/api/v3/ticker/tradingDay\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans", "name": "CryptoLoans", "file_path": "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java", "superclasses": "", "methods": ["[]CryptoLoans(String,String,String,boolean,ProxyAuth)", "[]CryptoLoans(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]loanIncome(Map<String, Object>)", "[String]loanBorrow(Map<String, Object>)", "[String]loanBorrowHistory(Map<String, Object>)", "[String]loanOngoingOrders(Map<String, Object>)", "[String]loanRepay(Map<String, Object>)", "[String]loanRepayHistory(Map<String, Object>)", "[String]loanAdjustLTV(Map<String, Object>)", "[String]loanAdjustLTVHistory(Map<String, Object>)", "[String]loanAssetsData(Map<String, Object>)", "[String]collateralAssetsData(Map<String, Object>)", "[String]collateralRepayRate(Map<String, Object>)", "[String]customizeMarginCall(Map<String, Object>)", "[String]flexibleLoanBorrow(Map<String, Object>)", "[String]flexibleLoanOngoingOrders(Map<String, Object>)", "[String]flexibleLoanBorrowHistory(Map<String, Object>)", "[String]flexibleLoanRepay(Map<String, Object>)", "[String]flexibleLoanRepayHistory(Map<String, Object>)", "[String]flexibleLoanAdjustLtv(Map<String, Object>)", "[String]flexibleLoanLtvAdjustHistory(Map<String, Object>)", "[String]flexibleLoanAssets(Map<String, Object>)", "[String]flexibleLoanCollateralAssets(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[]CryptoLoans(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[]CryptoLoans(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanIncome(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanBorrow(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanBorrowHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanOngoingOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanRepay(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanRepayHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanAdjustLTV(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanAdjustLTVHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]loanAssetsData(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]collateralAssetsData(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]collateralRepayRate(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]customizeMarginCall(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanBorrow(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanOngoingOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanBorrowHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanRepay(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanRepayHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanAdjustLtv(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanLtvAdjustHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanAssets(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/CryptoLoans.java.CryptoLoans.[String]flexibleLoanCollateralAssets(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Crypto Loans Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#crypto-loans-endpoints\">Crypto Loans Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class CryptoLoans {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public CryptoLoans(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public CryptoLoans(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String LOAN_INCOME = \"/sapi/v1/loan/income\";\n    /**\n     * GET /sapi/v1/loan/income\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- mandatory/string <br>\n     * type -- optional/string -- All types will be returned by default. Enum: borrowIn, collateralSpent, repayAmount, collateralReturn(Collateral return after repayment), addCollateral, removeCollateral, collateralReturnAfterLiquidation <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int -- default 20, max 100 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-crypto-loans-income-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-crypto-loans-income-history-user_data</a>\n     */\n    public String loanIncome(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_INCOME, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String LOAN_BORROW = \"/sapi/v1/loan/borrow\";\n    /**\n     * POST /sapi/v1/loan/borrow\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * loanCoin -- mandatory/string <br>\n     * collateralCoin -- mandatory/string <br>\n     * loanTerm -- mandatory/int -- 7/14/30/90/180 days <br>\n     * loanAmount -- optional/decimal -- Mandatory when collateralAmount is empty <br>\n     * collateralAmount\t-- optional/decimal -- Mandatory when loanAmount is empty <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#borrow-crypto-loan-borrow-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#borrow-crypto-loan-borrow-trade</a>\n     */\n    public String loanBorrow(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"loanCoin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"collateralCoin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"loanTerm\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_BORROW, parameters, HttpMethod.POST, showLimitUsage);\n    }\n    \n    private final String LOAN_BORROW_HISTORY = \"/sapi/v1/loan/borrow/history\";\n    /**\n     * GET /sapi/v1/loan/borrow/history\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * orderId -- optional/long -- orderId in POST /sapi/v1/loan/borrow <br>\n     * loanCoin -- optional/string <br>\n     * collateralCoin -- optional/string <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * current\t-- optional/long -- Current querying page. Start from 1; default: 1; max: 1000 <br>\n     * limit -- optional/long -- Default: 10; max: 100; <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#borrow-get-loan-borrow-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#borrow-get-loan-borrow-history-user_data</a>\n     */\n    public String loanBorrowHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_BORROW_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String LOAN_ONGOING_ORDERS = \"/sapi/v1/loan/ongoing/orders\";\n    /**\n     * GET /sapi/v1/loan/ongoing/orders\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * orderId -- optional/long -- orderId in POST /sapi/v1/loan/borrow <br>\n     * loanCoin -- optional/string <br>\n     * collateralCoin -- optional/string <br>\n     * current\t-- optional/long -- Current querying page. Start from 1; default: 1; max: 1000 <br>\n     * limit -- optional/long -- Default: 10; max: 100; <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#borrow-get-loan-ongoing-orders-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#borrow-get-loan-ongoing-orders-user_data</a>\n     */\n    public String loanOngoingOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_ONGOING_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String LOAN_REPAY = \"/sapi/v1/loan/repay\";\n    /**\n     * POST /sapi/v1/loan/repay\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * orderId -- mandatory/long <br>\n     * amount -- mandatory/decimal <br>\n     * type -- optional/int -- Default: 1. 1 for \"repay with borrowed coin\"; 2 for \"repay with collateral\" <br>\n     * collateralReturn\t-- optional/boolean -- \tDefault: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#repay-crypto-loan-repay-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#repay-crypto-loan-repay-trade</a>\n     */\n    public String loanRepay(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"orderId\", Long.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_REPAY, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String LOAN_REPAY_HISTORY = \"/sapi/v1/loan/repay/history\";\n    /**\n     * GET /sapi/v1/loan/repay/history\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * orderId -- optional/long <br>\n     * loanCoin -- optional/string <br>\n     * collateralCoin -- optional/string <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * current\t-- optional/long -- Current querying page. Start from 1; default: 1; max: 1000 <br>\n     * limit -- optional/long -- Default: 10; max: 100; <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#repay-get-loan-repayment-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#repay-get-loan-repayment-history-user_data</a>\n     */\n    public String loanRepayHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_REPAY_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String LOAN_ADJUST_LTV = \"/sapi/v1/loan/adjust/ltv\";\n    /**\n     * POST /sapi/v1/loan/adjust/ltv\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * orderId -- mandatory/long <br>\n     * amount -- mandatory/decimal <br>\n     * direction -- optional/enum -- \"ADDITIONAL\", \"REDUCED\" <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-crypto-loan-adjust-ltv-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-crypto-loan-adjust-ltv-trade</a>\n     */\n    public String loanAdjustLTV(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"orderId\", Long.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_ADJUST_LTV, parameters, HttpMethod.POST, showLimitUsage);\n    }\n    \n    private final String LOAN_ADJUST_LTV_HISTORY = \"/sapi/v1/loan/ltv/adjustment/history\";\n    /**\n     * GET /sapi/v1/loan/ltv/adjustment/history\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * orderId -- optional/long <br>\n     * loanCoin -- optional/string <br>\n     * collateralCoin -- optional/string <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * current\t-- optional/long -- Current querying page. Start from 1; default: 1; max: 1000 <br>\n     * limit -- optional/long -- Default: 10; max: 100; <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-get-loan-ltv-adjustment-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-crypto-loan-adjust-ltv-trade</a>\n     */\n    public String loanAdjustLTVHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOAN_ADJUST_LTV_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String LOANABLE_ASSETS_DATA = \"/sapi/v1/loan/loanable/data\";\n    /**\n     * GET /sapi/v1/loan/loanable/data\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * loanCoin -- optional/string <br>\n     * vipLevel -- optional/int -- Default: user's VIP level. In case there's specific configuration, send \"-1\"<br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-loanable-assets-data-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-loanable-assets-data-user_data</a>\n     */\n    public String loanAssetsData(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOANABLE_ASSETS_DATA, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String COLLATERAL_ASSETS_DATA = \"/sapi/v1/loan/collateral/data\";\n    /**\n     * GET /sapi/v1/loan/collateral/data\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * collateralCoin -- optional/string <br>\n     * vipLevel -- optional/int -- Default: user's VIP level. In case there's specific configuration, send \"-1\"<br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-collateral-assets-data-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-collateral-assets-data-user_data</a>\n     */\n    public String collateralAssetsData(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, COLLATERAL_ASSETS_DATA, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String COLLATERAL_REPAY_RATE = \"/sapi/v1/loan/repay/collateral/rate\";\n    /**\n     * GET /sapi/v1/loan/repay/collateral/rate\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * loanCoin -- mandatory/string <br>\n     * collateralCoin -- mandatory/string <br>\n     * repayAmount -- mandatory/decimal -- repay amount of loanCoin<br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#check-collateral-repay-rate-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#check-collateral-repay-rate-user_data</a>\n     */\n    public String collateralRepayRate(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"loanCoin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"collateralCoin\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"repayAmount\");\n        return requestHandler.sendSignedRequest(baseUrl, COLLATERAL_REPAY_RATE, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String CUSTOMIZE_MARGIN_CALL = \"/sapi/v1/loan/customize/margin_call\";\n    /**\n     * GET /sapi/v1/loan/customize/margin_call\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * orderId -- optional/long -- Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only. <br>\n     * collateralCoin -- optional/string -- Mandatory when orderId is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.<br>\n     * marginCall -- mandatory/decimal<br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#crypto-loan-customize-margin-call-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#crypto-loan-customize-margin-call-trade</a>\n     */\n    public String customizeMarginCall(Map<String, Object> parameters) {\n        ParameterChecker.checkRequiredParameter(parameters, \"marginCall\");\n        return requestHandler.sendSignedRequest(baseUrl, CUSTOMIZE_MARGIN_CALL, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_LOAN_BORROW = \"/sapi/v1/loan/flexible/borrow\";\n    /**\n     * POST /sapi/v1/loan/flexible/borrow\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * loanCoin -- mandatory/string -- Coin loaned. <br>\n     * loanAmount -- optional/decimal -- Loan amount. Mandatory when collateralAmount is empty. <br>\n     * collateralCoin -- mandatory/string -- Coin used as collateral. <br>\n     * collateralAmount -- optional/decimal -- Mandatory when loanAmount is empty. <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#borrow-flexible-loan-borrow-trade\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#borrow-flexible-loan-borrow-trade</a>\n     */\n    public String flexibleLoanBorrow(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"loanCoin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"collateralCoin\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_BORROW, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_LOAN_ONGOING_ORDERS = \"/sapi/v1/loan/flexible/ongoing/orders\";\n    /**\n     * GET /sapi/v1/loan/flexible/ongoing/orders\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * loanCoin -- optional/string -- Coin loaned. <br>\n     * collateralCoin -- optional/string -- Coin used as collateral <br>\n     * current -- optional/long -- Current querying page. Start from 1; default: 1; max: 1000; <br>\n     * limit -- optional/long -- Default: 10; max: 100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#borrow-get-flexible-loan-ongoing-orders-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#borrow-get-flexible-loan-ongoing-orders-user_data</a>\n     */\n    public String flexibleLoanOngoingOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_ONGOING_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_LOAN_BORROW_HISTORY = \"/sapi/v1/loan/flexible/borrow/history\";\n    /**\n     * GET /sapi/v1/loan/flexible/borrow/history\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * loanCoin -- optional/string -- Coin loaned <br>\n     * collateralCoin -- optional/string -- Coin used as collateral <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * current -- optional/long -- Current querying page. Start from 1; default: 1; max: 1000; <br>\n     * limit -- optional/long -- Default: 10; max: 100; <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#borrow-get-flexible-loan-borrow-history-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#borrow-get-flexible-loan-borrow-history-user_data</a>\n     */\n    public String flexibleLoanBorrowHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_BORROW_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_LOAN_REPAY = \"/sapi/v1/loan/flexible/repay\";\n    /**\n     * POST /sapi/v1/loan/flexible/repay\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * loanCoin -- mandatory/string -- Coin loaned <br>\n     * collateralCoin -- mandatory/string -- Coin used as collateral <br>\n     * repayAmount -- mandatory/decimal -- repay amount of loanCoin <br>\n     * collateralReturn -- optional/boolean -- Default: TRUE. TRUE: Return extra collateral to earn account; FALSE: Keep extra collateral in the order, and lower LTV.<br>\n     * fullRepayment -- optional/boolean -- Default: FALSE. TRUE: Full repayment; FALSE: Partial repayment, based on loanAmount. <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#repay-flexible-loan-repay-trade\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#repay-flexible-loan-repay-trade</a>\n     */\n    public String flexibleLoanRepay(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"loanCoin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"collateralCoin\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"repayAmount\");\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_REPAY, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_LOAN_REPAY_HISTORY = \"/sapi/v1/loan/flexible/repay/history\";\n    /**\n     * GET /sapi/v1/loan/flexible/repay/history\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * loanCoin -- optional/string -- Coin loaned <br>\n     * collateralCoin -- optional/string -- Coin used as collateral <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * current -- optional/long -- Current querying page. Start from 1; default: 1; max: 1000; <br>\n     * limit -- optional/long -- Default: 10; max: 100; <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#repay-get-flexible-loan-repayment-history-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#repay-get-flexible-loan-repayment-history-user_data</a>\n     */\n    public String flexibleLoanRepayHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_REPAY_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_LOAN_ADJUST_LTV = \"/sapi/v1/loan/flexible/adjust/ltv\";\n    /**\n     * POST /sapi/v1/loan/flexible/adjust/ltv\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * loanCoin -- mandatory/string -- Coin loaned <br>\n     * collateralCoin -- mandatory/string -- Coin used as collateral <br>\n     * adjustmentAmount -- mandatory/decimal <br>\n     * direction -- mandatory/enum -- \"ADDITIONAL\", \"REDUCED\"<br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-flexible-loan-adjust-ltv-trade\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-flexible-loan-adjust-ltv-trade</a>\n     */\n    public String flexibleLoanAdjustLtv(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"loanCoin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"collateralCoin\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"adjustmentAmount\");\n        ParameterChecker.checkParameter(parameters, \"direction\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_ADJUST_LTV, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_LOAN_LTV_ADJUST_HISTORY = \"/sapi/v1/loan/flexible/ltv/adjustment/history\";\n    /**\n     * GET /sapi/v1/loan/flexible/ltv/adjustment/history\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * loanCoin -- optional/string -- Coin loaned <br>\n     * collateralCoin -- optional/string -- Coin used as collateral <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 Max:1000 <br>\n     * limit -- optional/long -- Default: 10; max: 100; <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-get-flexible-loan-ltv-adjustment-history-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#adjust-ltv-get-flexible-loan-ltv-adjustment-history-user_data</a>\n     */\n    public String flexibleLoanLtvAdjustHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_LTV_ADJUST_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_LOAN_ASSETS = \"/sapi/v1/loan/flexible/loanable/data\";\n    /**\n     * Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.\n     * \n     * <br><br>\n     * GET /sapi/v1/loan/flexible/loanable/data\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * loanCoin -- optional/string -- Coin loaned <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-loan-assets-data-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-flexible-loan-assets-data-user_data</a>\n     */\n    public String flexibleLoanAssets(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_ASSETS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_LOAN_COLLATERAL_ASSETS = \"/sapi/v1/loan/flexible/collateral/data\";\n    /**\n     * Get LTV information and collateral limit of flexible loan's collateral assets. The collateral limit is shown in USD value.\n     * \n     * <br><br>\n     * GET /sapi/v1/loan/flexible/collateral/data\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * collateralCoin -- optional/string -- Coin used as collateral <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-loan-collateral-assets-data-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-flexible-loan-collateral-assets-data-user_data</a>\n     */\n    public String flexibleLoanCollateralAssets(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_LOAN_COLLATERAL_ASSETS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String LOAN_INCOME = \"/sapi/v1/loan/income\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOAN_INCOME = \"/sapi/v1/loan/income\"", "syntax_pass": true}, {"attribute_expression": "private final String LOAN_BORROW = \"/sapi/v1/loan/borrow\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOAN_BORROW = \"/sapi/v1/loan/borrow\"", "syntax_pass": true}, {"attribute_expression": "private final String LOAN_BORROW_HISTORY = \"/sapi/v1/loan/borrow/history\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOAN_BORROW_HISTORY = \"/sapi/v1/loan/borrow/history\"", "syntax_pass": true}, {"attribute_expression": "private final String LOAN_ONGOING_ORDERS = \"/sapi/v1/loan/ongoing/orders\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOAN_ONGOING_ORDERS = \"/sapi/v1/loan/ongoing/orders\"", "syntax_pass": true}, {"attribute_expression": "private final String LOAN_REPAY = \"/sapi/v1/loan/repay\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOAN_REPAY = \"/sapi/v1/loan/repay\"", "syntax_pass": true}, {"attribute_expression": "private final String LOAN_REPAY_HISTORY = \"/sapi/v1/loan/repay/history\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOAN_REPAY_HISTORY = \"/sapi/v1/loan/repay/history\"", "syntax_pass": true}, {"attribute_expression": "private final String LOAN_ADJUST_LTV = \"/sapi/v1/loan/adjust/ltv\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOAN_ADJUST_LTV = \"/sapi/v1/loan/adjust/ltv\"", "syntax_pass": true}, {"attribute_expression": "private final String LOAN_ADJUST_LTV_HISTORY = \"/sapi/v1/loan/ltv/adjustment/history\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOAN_ADJUST_LTV_HISTORY = \"/sapi/v1/loan/ltv/adjustment/history\"", "syntax_pass": true}, {"attribute_expression": "private final String LOANABLE_ASSETS_DATA = \"/sapi/v1/loan/loanable/data\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOANABLE_ASSETS_DATA = \"/sapi/v1/loan/loanable/data\"", "syntax_pass": true}, {"attribute_expression": "private final String COLLATERAL_ASSETS_DATA = \"/sapi/v1/loan/collateral/data\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "COLLATERAL_ASSETS_DATA = \"/sapi/v1/loan/collateral/data\"", "syntax_pass": true}, {"attribute_expression": "private final String COLLATERAL_REPAY_RATE = \"/sapi/v1/loan/repay/collateral/rate\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "COLLATERAL_REPAY_RATE = \"/sapi/v1/loan/repay/collateral/rate\"", "syntax_pass": true}, {"attribute_expression": "private final String CUSTOMIZE_MARGIN_CALL = \"/sapi/v1/loan/customize/margin_call\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "CUSTOMIZE_MARGIN_CALL = \"/sapi/v1/loan/customize/margin_call\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_LOAN_BORROW = \"/sapi/v1/loan/flexible/borrow\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_LOAN_BORROW = \"/sapi/v1/loan/flexible/borrow\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_LOAN_ONGOING_ORDERS = \"/sapi/v1/loan/flexible/ongoing/orders\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_LOAN_ONGOING_ORDERS = \"/sapi/v1/loan/flexible/ongoing/orders\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_LOAN_BORROW_HISTORY = \"/sapi/v1/loan/flexible/borrow/history\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_LOAN_BORROW_HISTORY = \"/sapi/v1/loan/flexible/borrow/history\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_LOAN_REPAY = \"/sapi/v1/loan/flexible/repay\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_LOAN_REPAY = \"/sapi/v1/loan/flexible/repay\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_LOAN_REPAY_HISTORY = \"/sapi/v1/loan/flexible/repay/history\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_LOAN_REPAY_HISTORY = \"/sapi/v1/loan/flexible/repay/history\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_LOAN_ADJUST_LTV = \"/sapi/v1/loan/flexible/adjust/ltv\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_LOAN_ADJUST_LTV = \"/sapi/v1/loan/flexible/adjust/ltv\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_LOAN_LTV_ADJUST_HISTORY = \"/sapi/v1/loan/flexible/ltv/adjustment/history\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_LOAN_LTV_ADJUST_HISTORY = \"/sapi/v1/loan/flexible/ltv/adjustment/history\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_LOAN_ASSETS = \"/sapi/v1/loan/flexible/loanable/data\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_LOAN_ASSETS = \"/sapi/v1/loan/flexible/loanable/data\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_LOAN_COLLATERAL_ASSETS = \"/sapi/v1/loan/flexible/collateral/data\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_LOAN_COLLATERAL_ASSETS = \"/sapi/v1/loan/flexible/collateral/data\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin", "name": "Margin", "file_path": "src/main/java/com/binance/connector/client/impl/spot/Margin.java", "superclasses": "", "methods": ["[]Margin(String,String,String,boolean,ProxyAuth)", "[]Margin(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]allAssets()", "[String]allPairs()", "[String]priceIndex(Map<String, Object>)", "[String]newOrder(Map<String, Object>)", "[String]cancelOrder(Map<String, Object>)", "[String]cancelOpenOrders(Map<String, Object>)", "[String]transferHistory(Map<String, Object>)", "[String]repayRecord(Map<String, Object>)", "[String]interestHistory(Map<String, Object>)", "[String]forceLiquidationRec(Map<String, Object>)", "[String]account(Map<String, Object>)", "[String]getOrder(Map<String, Object>)", "[String]getOpenOrders(Map<String, Object>)", "[String]getAllOrders(Map<String, Object>)", "[String]ocoOrder(Map<String, Object>)", "[String]cancelOcoOrder(Map<String, Object>)", "[String]getOcoOrder(Map<String, Object>)", "[String]getAllOcoOrders(Map<String, Object>)", "[String]getOcoOpenOrders(Map<String, Object>)", "[String]trades(Map<String, Object>)", "[String]maxBorrow(Map<String, Object>)", "[String]maxTransferable(Map<String, Object>)", "[String]isolatedAccount(Map<String, Object>)", "[String]disableIsolatedAccount(Map<String, Object>)", "[String]enableIsolatedAccount(Map<String, Object>)", "[String]getIsolatedAccountLimit(Map<String, Object>)", "[String]getAllIsolatedSymbols(Map<String, Object>)", "[String]bnbBurn(Map<String, Object>)", "[String]getBnbBurn(Map<String, Object>)", "[String]interestRateHistory(Map<String, Object>)", "[String]crossMarginData(Map<String, Object>)", "[String]crossMarginCollateralRatio()", "[String]adjustCrossMarginMaxLeverage(Map<String, Object>)", "[String]isolatedMarginData(Map<String, Object>)", "[String]isolatedMarginTier(Map<String, Object>)", "[String]orderRateLimit(Map<String, Object>)", "[String]availableInventory(Map<String, Object>)", "[String]capitalFlow(Map<String, Object>)", "[String]delistSchedule(Map<String, Object>)", "[String]nextHourlyInterestRate(Map<String, Object>)", "[String]smallLiabilityAssets(Map<String, Object>)", "[String]exchangeSmallLiability(Map<String, Object>)", "[String]smallLiabilityExchangeHistory(Map<String, Object>)", "[String]leverageBracket()", "[String]tradeCoeff(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[]Margin(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[]Margin(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]allAssets()", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]allPairs()", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]priceIndex(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]newOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]cancelOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]cancelOpenOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]transferHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]repayRecord(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]interestHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]forceLiquidationRec(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]account(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getOpenOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getAllOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]ocoOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]cancelOcoOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getOcoOrder(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getAllOcoOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getOcoOpenOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]trades(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]maxBorrow(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]maxTransferable(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]isolatedAccount(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]disableIsolatedAccount(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]enableIsolatedAccount(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getIsolatedAccountLimit(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getAllIsolatedSymbols(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]bnbBurn(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]getBnbBurn(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]interestRateHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]crossMarginData(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]crossMarginCollateralRatio()", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]adjustCrossMarginMaxLeverage(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]isolatedMarginData(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]isolatedMarginTier(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]orderRateLimit(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]availableInventory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]capitalFlow(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]delistSchedule(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]nextHourlyInterestRate(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]smallLiabilityAssets(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]exchangeSmallLiability(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]smallLiabilityExchangeHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]leverageBracket()", "src/main/java/com/binance/connector/client/impl/spot/Margin.java.Margin.[String]tradeCoeff(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Margin Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#margin-account-trade\">Margin Account/Trade Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class Margin {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public Margin(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public Margin(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String ALL_ASSETS = \"/sapi/v1/margin/allAssets\";\n    /**\n     * GET /sapi/v1/margin/allAssets\n     * <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-all-margin-assets-market_data\">\n     *    https://binance-docs.github.io/apidocs/spot/en/#get-all-margin-assets-market_data</a>\n     */\n    public String allAssets() {\n        return requestHandler.sendApiRequest(baseUrl, ALL_ASSETS, null, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ALL_PAIRS = \"/sapi/v1/margin/allPairs\";\n    /**\n     * GET /sapi/v1/margin/allPairs\n     * <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-all-cross-margin-pairs-market_data\">\n     *    https://binance-docs.github.io/apidocs/spot/en/#get-all-cross-margin-pairs-market_data</a>\n     */\n    public String allPairs() {\n        return requestHandler.sendApiRequest(baseUrl, ALL_PAIRS, null, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String PRICE_INDEX = \"/sapi/v1/margin/priceIndex\";\n    /**\n     * GET /sapi/v1/margin/priceIndex\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-priceindex-market_data\">\n     *    https://binance-docs.github.io/apidocs/spot/en/#query-margin-priceindex-market_data</a>\n     */\n    public String priceIndex(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, PRICE_INDEX, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ORDER = \"/sapi/v1/margin/order\";\n    /**\n     * Post a new order for margin account.\n     * <br><br>\n     * POST /sapi/v1/margin/order\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\n     * side -- mandatory/enum <br>\n     * type -- mandatory/enum <br>\n     * quantity -- optional/decimal <br>\n     * quoteOrderQty -- optional/decimal <br>\n     * price -- optional/decimal <br>\n     * stopPrice -- optional/decimal -- Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. <br>\n     * newClientOrderId -- optional/string -- A unique id among open orders. Automatically generated if not sent. <br>\n     * icebergQty -- optional/decimal -- Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order. <br>\n     * newOrderRespType -- optional/enum -- Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK. <br>\n     * sideEffectType -- optional/enum -- NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY, AUTO_BORROW_REPAY; default NO_SIDE_EFFECT. <br>\n     * timeInForce -- optional/enum -- GTC,IOC,FOK <br>\n     * selfTradePreventionMode -- optional/enum -- The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE <br>\n     * autoRepayAtCancel -- optional/boolean -- Only for when it's a MARGIN_BUY or AUTO_BORROW_REPAY. Default: true (debt generated by the order needs to be repaid after cancellation.) <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#margin-account-new-order-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#margin-account-new-order-trade</a>\n     */\n    public String newOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    /**\n     * Cancel an active order for margin account.\n     * <br><br>\n     * DELETE /sapi/v1/margin/order\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\n     * orderId -- optional/long <br>\n     * origClientOrderId -- optional/string <br>\n     * newClientOrderId -- optional/string -- Used to uniquely identify this cancel. Automatically generated by default. <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#margin-account-cancel-order-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#margin-account-cancel-order-trade</a>\n     */\n    public String cancelOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDER, parameters, HttpMethod.DELETE, showLimitUsage);\n    }\n\n    private final String OPEN_ORDERS = \"/sapi/v1/margin/openOrders\";\n    /**\n     * Cancels all active orders on a symbol for margin account.\n     * This includes OCO orders.\n     * <br><br>\n     * DELETE /sapi/v1/margin/openOrders\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE, default \"FALSE\" <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#margin-account-cancel-all-open-orders-on-a-symbol-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#margin-account-cancel-all-open-orders-on-a-symbol-trade</a>\n     */\n    public String cancelOpenOrders(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, OPEN_ORDERS, parameters, HttpMethod.DELETE, showLimitUsage);\n    }\n\n    private final String TRANSFER_HISTORY = \"/sapi/v1/margin/transfer\";\n    /**\n     * GET /sapi/v1/margin/transfer\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string <br>\n     * type -- optional/string -- Transfer Type: ROLL_IN, ROLL_OUT <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * current -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * archived -- optional/string -- Default: false. Set to true for archived data from 6 months ago <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-cross-margin-transfer-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-cross-margin-transfer-history-user_data</a>\n     */\n    public String transferHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, TRANSFER_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String REPAY_RECORD = \"/sapi/v1/margin/repay\";\n    /**\n     * GET /sapi/v1/margin/repay\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- mandatory/string <br>\n     * isolatedSymbol -- optional/string <br>\n     * txId -- optional/long -- the tranId in POST /sapi/v1/margin/loan <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * current -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * archived -- optional/string -- Default: false. Set to true for archived data from 6 months ago <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-repay-record-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-repay-record-user_data</a>\n     */\n    public String repayRecord(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, REPAY_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String INTEREST_HISTORY = \"/sapi/v1/margin/interestHistory\";\n    /**\n     * GET /sapi/v1/margin/interestHistory\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string <br>\n     * isolatedSymbol -- optional/string <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * current -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * archived -- optional/string -- Default: false. Set to true for archived data from 6 months ago <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-interest-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-interest-history-user_data</a>\n     */\n    public String interestHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, INTEREST_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String FORCE_LIQUIDATION_RECORD = \"/sapi/v1/margin/forceLiquidationRec\";\n    /**\n     * GET /sapi/v1/margin/forceLiquidationRec\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * isolatedSymbol -- optional/string <br>\n     * current -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-force-liquidation-record-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-force-liquidation-record-user_data</a>\n     */\n    public String forceLiquidationRec(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FORCE_LIQUIDATION_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ACCOUNT = \"/sapi/v1/margin/account\";\n    /**\n     * GET /sapi/v1/margin/account\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-cross-margin-account-details-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-cross-margin-account-details-user_data</a>\n     */\n    public String account(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    /**\n     * GET /sapi/v1/margin/order\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\n     * orderId -- optional/long <br>\n     * origClientOrderId -- optional/string <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-order-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-order-user_data</a>\n     */\n    public String getOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDER, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    /**\n     * GET /sapi/v1/margin/openOrders\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- optional/string <br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-open-orders-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-open-orders-user_data</a>\n     */\n    public String getOpenOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, OPEN_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ALL_ORDERS = \"/sapi/v1/margin/allOrders\";\n    /**\n     * GET /sapi/v1/margin/allOrders\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\n     * orderId -- optional/long <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int -- Default 500; max 500. <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-all-orders-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-all-orders-user_data</a>\n     */\n    public String getAllOrders(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ALL_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String OCO_ORDER = \"/sapi/v1/margin/order/oco\";\n    /**\n     * Send in a new OCO for a margin account.\n     * <br><br>\n     * POST /sapi/v1/margin/order/oco\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\n     * listClientOrderId -- optional/string -- A unique Id for the entire orderList <br>\n     * side -- mandatory/enum <br>\n     * quantity -- mandatory/decimal <br>\n     * limitClientOrderId -- optional/string -- A unique Id for the limit order <br>\n     * price -- mandatory/decimal <br>\n     * limitIcebergQty -- optional/decimal <br>\n     * stopClientOrderId -- optional/string -- A unique Id for the stop loss/stop loss limit leg <br>\n     * stopPrice -- optional/decimal -- Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders. <br>\n     * stopLimitPrice -- optional/decimal -- If provided, stopLimitTimeInForce is required. <br>\n     * stopIcebergQty -- optional/enum -- NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY; default NO_SIDE_EFFECT. <br>\n     * stopLimitTimeInForce -- optional/enum -- GTC,IOC,FOK <br>\n     * newOrderRespType -- optional/enum -- Set the response JSON. <br>\n     * sideEffectType -- optional/enum -- NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY, AUTO_BORROW_REPAY; default NO_SIDE_EFFECT. <br>\n     * selfTradePreventionMode -- optional/enum -- The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE <br>\n     * autoRepayAtCancel -- optional/boolean -- Only for when it's a MARGIN_BUY or AUTO_BORROW_REPAY. Default: true (debt generated by the order needs to be repaid after cancellation.) <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#margin-account-new-oco-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#margin-account-new-oco-trade</a>\n     */\n    public String ocoOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"side\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"quantity\");\n        ParameterChecker.checkRequiredParameter(parameters, \"price\");\n        ParameterChecker.checkRequiredParameter(parameters, \"stopPrice\");\n        return requestHandler.sendSignedRequest(baseUrl, OCO_ORDER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String ORDER_LIST = \"/sapi/v1/margin/orderList\";\n    /**\n     * Cancel an entire Order List for a margin account.\n     * <br><br>\n     * DELETE /sapi/v1/margin/orderList\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\", default \"FALSE\" <br>\n     * orderListId -- optional/long -- Either orderListId or listClientOrderId must be provided <br>\n     * listClientOrderId -- optional/string -- Either orderListId or listClientOrderId must be provided<br>\n     * newClientOrderId -- optional/string -- Used to uniquely identify this cancel. Automatically generated by default <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#margin-account-cancel-oco-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#margin-account-cancel-oco-trade</a>\n     */\n    public String cancelOcoOrder(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDER_LIST, parameters, HttpMethod.DELETE, showLimitUsage);\n    }\n\n    /**\n     * Retrieves a specific OCO based on provided optional parameters.\n     * <br><br>\n     * GET /sapi/v1/margin/orderList\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- optional/string -- mandatory for isolated margin, not supported for cross margin <br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\n     * orderListId -- optional/long -- Either orderListId or listClientOrderId must be provided <br>\n     * listClientOrderId -- optional/string -- Either orderListId or listClientOrderId must be provided<br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-oco-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-oco-user_data</a>\n     */\n    public String getOcoOrder(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ORDER_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String GET_ALL_OCO = \"/sapi/v1/margin/allOrderList\";\n    /**\n     * Retrieves all OCO for a specific margin account based on provided optional parameters.\n     * <br><br>\n     * GET /sapi/v1/margin/allOrderList\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- optional/string -- mandatory for isolated margin, not supported for cross margin <br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\",default \"FALSE\" <br>\n     * fromId -- optional/long -- If supplied, neither startTime or endTime can be provided <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int -- Default Value: 500; Max Value: 1000 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-all-oco-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-all-oco-user_data</a>\n     */\n    public String getAllOcoOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, GET_ALL_OCO, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String GET_OPEN_OCO = \"/sapi/v1/margin/openOrderList\";\n    /**\n     * GET /sapi/v1/margin/openOrderList\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- optional/string -- mandatory for isolated margin, not supported for cross margin <br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\", default \"FALSE\" <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-open-oco-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-open-oco-user_data</a>\n     */\n    public String getOcoOpenOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, GET_OPEN_OCO, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String MY_TRADES = \"/sapi/v1/margin/myTrades\";\n    /**\n     * GET /sapi/v1/margin/myTrades\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string -- mandatory for isolated margin, not supported for cross margin <br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE,default \"FALSE\" <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * fromId -- optional/long -- TradeId to fetch from. Default gets most recent trades. <br>\n     * limit -- optional/int -- Default Value: 500; Max Value: 1000 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-trade-list-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-trade-list-user_data</a>\n     */\n    public String trades(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, MY_TRADES, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String MAX_BORROW = \"/sapi/v1/margin/maxBorrowable\";\n    /**\n     * GET /sapi/v1/margin/maxBorrowable\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- mandatory/string <br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE,default \"FALSE\" <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-max-borrow-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-max-borrow-user_data</a>\n     */\n    public String maxBorrow(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, MAX_BORROW, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String MAX_TRANSFERABLE = \"/sapi/v1/margin/maxTransferable\";\n    /**\n     * GET /sapi/v1/margin/maxTransferable\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- mandatory/string <br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE,default \"FALSE\" <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-max-transfer-out-amount-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-max-transfer-out-amount-user_data</a>\n     */\n    public String maxTransferable(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, MAX_TRANSFERABLE, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ISOLATED_ACCOUNT = \"/sapi/v1/margin/isolated/account\";\n    /**\n     * GET /sapi/v1/margin/isolated/account\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbols -- optional/string -- Max 5 symbols can be sent; separated by \",\". e.g. \"BTCUSDT,BNBUSDT,ADAUSDT\" <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-account-info-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-account-info-user_data</a>\n     */\n    public String isolatedAccount(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ISOLATED_ACCOUNT, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    /**\n     * DELETE /sapi/v1/margin/isolated/account\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#disable-isolated-margin-account-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#disable-isolated-margin-account-trade</a>\n     */\n    public String disableIsolatedAccount(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ISOLATED_ACCOUNT, parameters, HttpMethod.DELETE, showLimitUsage);\n    }\n\n    /**\n     * Enable isolated margin account for a specific symbol.\n     * <br><br>\n     * POST /sapi/v1/margin/isolated/account\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#enable-isolated-margin-account-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#enable-isolated-margin-account-trade</a>\n     */\n    public String enableIsolatedAccount(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ISOLATED_ACCOUNT, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String ISOLATED_ACCOUNT_LIMIT = \"/sapi/v1/margin/isolated/accountLimit\";\n    /**\n     * Query enabled isolated margin account limit.\n     * <br><br>\n     * GET /sapi/v1/margin/isolated/accountLimit\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-enabled-isolated-margin-account-limit-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-enabled-isolated-margin-account-limit-user_data</a>\n     */\n    public String getIsolatedAccountLimit(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ISOLATED_ACCOUNT_LIMIT, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ALL_ISOLATED_SYMBOL = \"/sapi/v1/margin/isolated/allPairs\";\n    /**\n     * GET /sapi/v1/margin/isolated/allPairs\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-all-isolated-margin-symbol-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-all-isolated-margin-symbol-user_data</a>\n     */\n    public String getAllIsolatedSymbols(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ALL_ISOLATED_SYMBOL, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String BNB_BURN = \"/sapi/v1/bnbBurn\";\n    /**\n     * POST /sapi/v1/bnbBurn\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * spotBNBBurn -- optional/string -- \"true\" or \"false\"; Determines whether to use BNB to pay for trading fees on SPOT <br>\n     * interestBNBBurn -- optional/string -- \"true\" or \"false\"; Determines whether to use BNB to pay for margin loan's interest  <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#toggle-bnb-burn-on-spot-trade-and-margin-interest-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#toggle-bnb-burn-on-spot-trade-and-margin-interest-user_data</a>\n     */\n    public String bnbBurn(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, BNB_BURN, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    /**\n     * GET /sapi/v1/bnbBurn\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-bnb-burn-status-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-bnb-burn-status-user_data</a>\n     */\n    public String getBnbBurn(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, BNB_BURN, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String INTEREST_RATE_HIST = \"/sapi/v1/margin/interestRateHistory\";\n    /**\n     * GET /sapi/v1/margin/interestRateHistory\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- mandatory/string -- asset,such as BTC <br>\n     * vipLevel -- optional/int -- Default: user's vip level <br>\n     * startTime -- optional/long -- Default: 7 days ago <br>\n     * endTime -- optional/long -- Default: present. Maximum range: 3 months. <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-interest-rate-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-margin-interest-rate-history-user_data</a>\n     */\n    public String interestRateHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, INTEREST_RATE_HIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String CROSS_MARGIN_DATA = \"/sapi/v1/margin/crossMarginData\";\n    /**\n     * Get cross margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee.\n     * <br><br>\n     * GET /sapi/v1/margin/crossMarginData\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * vipLevel -- optional/int -- \tUser's current specific margin data will be returned if vipLevel is omitted <br>\n     * coin -- optional/string <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-cross-margin-fee-data-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-cross-margin-fee-data-user_data</a>\n     */\n    public String crossMarginData(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, CROSS_MARGIN_DATA, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String CROSS_MARGIN_COLLATERAL_RATIO = \"/sapi/v1/margin/crossMarginCollateralRatio\";\n    /**\n     * Get cross margin collateral ratio\n     * \n     * <br><br>\n     * GET /sapi/v1/margin/crossMarginCollateralRatio\n     * <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#cross-margin-collateral-ratio-market_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#cross-margin-collateral-ratio-market_data</a>\n     */\n    public String crossMarginCollateralRatio() {\n        return requestHandler.sendApiRequest(baseUrl, CROSS_MARGIN_COLLATERAL_RATIO, null, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ADJUST_CROSS_MARGIN_MAX_LEVERAGE = \"/sapi/v1/margin/max-leverage\";\n    /**\n     * Adjust cross margin max leverage\n     *\n     * <br><br>\n     * POST /sapi/v1/margin/max-leverage\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * maxLeverage -- mandatory/integer -- Can only adjust to 3, 5 or 10. Example: maxLeverage=10 for Cross Margin Pro, maxLeverage = 5 or 3 for Cross Margin Classic <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#adjust-cross-margin-max-leverage-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#adjust-cross-margin-max-leverage-user_data</a>\n     */\n    public String adjustCrossMarginMaxLeverage(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"maxLeverage\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, ADJUST_CROSS_MARGIN_MAX_LEVERAGE, parameters, HttpMethod.POST, showLimitUsage);\n    }\n    \n    private final String ISOLATED_MARGIN_DATA = \"/sapi/v1/margin/isolatedMarginData\";\n    /**\n     * Get isolated margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee.\n     * <br><br>\n     * GET /sapi/v1/margin/isolatedMarginData\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * vipLevel -- optional/int -- \tUser's current specific margin data will be returned if vipLevel is omitted <br>\n     * symbol -- optional/string <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-fee-data-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-fee-data-user_data</a>\n     */\n    public String isolatedMarginData(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ISOLATED_MARGIN_DATA, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ISOLATED_MARGIN_TIER = \"/sapi/v1/margin/isolatedMarginTier\";\n    /**\n     * Get isolated margin tier data collection with any tier as https://www.binance.com/en/margin-data.\n     * <br><br>\n     * GET /sapi/v1/margin/isolatedMarginTier\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * tier -- optional/string -- All margin tier data will be returned if tier is omitted <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-tier-data-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-tier-data-user_data</a>\n     */\n    public String isolatedMarginTier(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ISOLATED_MARGIN_TIER, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ORDER_RATE_LIMIT = \"/sapi/v1/margin/rateLimit/order\";\n    /**\n     * Displays the user's current margin order count usage for all intervals.\n     * <br><br>\n     * GET /sapi/v1/margin/rateLimit/order\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * isIsolated -- optional/string -- for isolated margin or not, \"TRUE\", \"FALSE\", default \"FALSE\" <br>\n     * symbol -- optional/string -- isolated symbol, mandatory for isolated margin <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-current-margin-order-count-usage-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-current-margin-order-count-usage-trade</a>\n     */\n    public String orderRateLimit(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ORDER_RATE_LIMIT, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String AVAILABLE_INVENTORY = \"/sapi/v1/margin/available-inventory\";\n    /**\n     * Get the available margin inventory\n     * <br><br>\n     * GET /sapi/v1/margin/available-inventory\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * type -- mandatory/string -- MARGIN, ISOLATED<br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-margin-available-inventory-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-margin-available-inventory-user_data</a>\n     */\n    public String availableInventory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, AVAILABLE_INVENTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String CAPITAL_FLOW = \"/sapi/v1/margin/capital-flow\";\n    /**\n     * Get cross or isolated margin capital flow\n     * \n     * <br><br>\n     * GET /sapi/v1/margin/capital-flow\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string <br>\n     * symbol -- optional/string -- Required when querying isolated margin data <br>\n     * type -- optional/string -- MARGIN, ISOLATED <br>\n     * startTime -- optional/long -- Only supports querying the data of the last 90 days <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * fromId -- optional/long -- If fromId is set, the data with \"id\" above \"fromId\" will be returned. Otherwise the latest data will be returned <br>\n     * limit -- optional/long -- The number of data items returned each time is limited. Default 500; Max 1000. <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-cross-or-isolated-margin-capital-flow-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-cross-or-isolated-margin-capital-flow-user_data</a>\n     */\n    public String capitalFlow(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, CAPITAL_FLOW, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String DELIST_SCHEDULE = \"/sapi/v1/margin/delist-schedule\";\n    /**\n     * Get tokens or symbols delist schedule for cross margin and isolated margin\n     * \n     * <br><br>\n     * GET /sapi/v1/margin/delist-schedule\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-tokens-or-symbols-delist-schedule-for-cross-margin-and-isolated-margin-market_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-tokens-or-symbols-delist-schedule-for-cross-margin-and-isolated-margin-market_data</a>\n     */\n    public String delistSchedule(Map<String, Object> parameters) {\n        return requestHandler.sendApiRequest(baseUrl, DELIST_SCHEDULE, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String NEXT_HOURLY_INTEREST_RATE = \"/sapi/v1/margin/next-hourly-interest-rate\";\n    /**\n     * Get the next hourly interest estimation\n     * \n     * <br><br>\n     * GET /sapi/v1/margin/next-hourly-interest-rate\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * assets -- mandatory/string -- List of assets, separated by commas, up to 20 <br>\n     * isIsolated -- mandatory/boolean -- Whether it's for isolated margin or not: \"TRUE\", \"FALSE\" <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-a-future-hourly-interest-rate-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-a-future-hourly-interest-rate-user_data</a>\n     */\n    public String nextHourlyInterestRate(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"assets\", String.class);\n        ParameterChecker.checkParameter(parameters, \"isIsolated\", Boolean.class);\n        return requestHandler.sendSignedRequest(baseUrl, NEXT_HOURLY_INTEREST_RATE, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SMALL_LIABILITY_ASSETS = \"/sapi/v1/margin/exchange-small-liability\";\n    /**\n     * Query the assets suitable for small liability exchanges.\n     * \n     * <br><br>\n     * GET /sapi/v1/margin/exchange-small-liability\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-small-liability-exchange-coin-list-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-small-liability-exchange-coin-list-user_data</a>\n     */\n    public String smallLiabilityAssets(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SMALL_LIABILITY_ASSETS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String EXCHANGE_SMALL_LIABILITY = \"/sapi/v1/margin/exchange-small-liability\";\n    /**\n     * Convert cross margin assets with low liability value\n     * \n     * <br><br>\n     * POST /sapi/v1/margin/exchange-small-liability\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * assetNames - mandatory/array -- List of asset names. Example: assetNames = BTC,ETH <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#small-liability-exchange-margin\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#small-liability-exchange-margin</a>\n     */\n    public String exchangeSmallLiability(Map<String, Object> parameters) {\n        ParameterChecker.checkRequiredParameter(parameters, \"assetNames\");\n        return requestHandler.sendSignedRequest(baseUrl, EXCHANGE_SMALL_LIABILITY, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String SMALL_LIABILITY_EXCHANGE_HISTORY = \"/sapi/v1/margin/exchange-small-liability-history\";\n    /**\n     * Get the conversion history of low liabilities\n     * \n     * <br><br>\n     * GET /sapi/v1/margin/exchange-small-liability-history\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * current -- mandatory/int -- Current querying page. Start from 1. Default:1 <br>\n     * size --mandatory/int -- Default:10 Max:100 <br>\n     * startTime -- optional/long -- Default: 30 days from current timestamp <br>\n     * endTime -- optional/long -- Default: present timestamp <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-small-liability-exchange-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-small-liability-exchange-history-user_data</a>\n     */\n    public String smallLiabilityExchangeHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkRequiredParameter(parameters, \"current\");\n        ParameterChecker.checkRequiredParameter(parameters, \"size\");\n        return requestHandler.sendSignedRequest(baseUrl, SMALL_LIABILITY_EXCHANGE_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String LEVERAGE_BRACKET = \"/sapi/v1/margin/leverageBracket\";\n    /**\n     * Get the liability assets leverage bracket in Cross Margin Pro Mode\n     * \n     * <br><br>\n     * GET /sapi/v1/margin/leverageBracket\n     * <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-liability-coin-leverage-bracket-in-cross-margin-pro-mode-market_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-liability-coin-leverage-bracket-in-cross-margin-pro-mode-market_data</a>\n     */\n    public String leverageBracket() {\n        return requestHandler.sendApiRequest(baseUrl, LEVERAGE_BRACKET, null, HttpMethod.GET, showLimitUsage);\n    }\n\n  \n    private final String TRADE_COEFF = \"/sapi/v1/margin/tradeCoeff\";\n    /**\n     * Get personal margin level information\n     * \n     * <br><br>\n     * GET /sapi/v1/margin/tradeCoeff\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-margin-account-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-margin-account-user_data</a>\n     */\n    public String tradeCoeff(Map<String, Object> parameters) {\n        return requestHandler.sendApiRequest(baseUrl, TRADE_COEFF, parameters, HttpMethod.GET, showLimitUsage);\n    }  \n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String ALL_ASSETS = \"/sapi/v1/margin/allAssets\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ALL_ASSETS = \"/sapi/v1/margin/allAssets\"", "syntax_pass": true}, {"attribute_expression": "private final String ALL_PAIRS = \"/sapi/v1/margin/allPairs\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ALL_PAIRS = \"/sapi/v1/margin/allPairs\"", "syntax_pass": true}, {"attribute_expression": "private final String PRICE_INDEX = \"/sapi/v1/margin/priceIndex\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "PRICE_INDEX = \"/sapi/v1/margin/priceIndex\"", "syntax_pass": true}, {"attribute_expression": "private final String ORDER = \"/sapi/v1/margin/order\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ORDER = \"/sapi/v1/margin/order\"", "syntax_pass": true}, {"attribute_expression": "private final String OPEN_ORDERS = \"/sapi/v1/margin/openOrders\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OPEN_ORDERS = \"/sapi/v1/margin/openOrders\"", "syntax_pass": true}, {"attribute_expression": "private final String TRANSFER_HISTORY = \"/sapi/v1/margin/transfer\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TRANSFER_HISTORY = \"/sapi/v1/margin/transfer\"", "syntax_pass": true}, {"attribute_expression": "private final String REPAY_RECORD = \"/sapi/v1/margin/repay\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "REPAY_RECORD = \"/sapi/v1/margin/repay\"", "syntax_pass": true}, {"attribute_expression": "private final String INTEREST_HISTORY = \"/sapi/v1/margin/interestHistory\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "INTEREST_HISTORY = \"/sapi/v1/margin/interestHistory\"", "syntax_pass": true}, {"attribute_expression": "private final String FORCE_LIQUIDATION_RECORD = \"/sapi/v1/margin/forceLiquidationRec\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FORCE_LIQUIDATION_RECORD = \"/sapi/v1/margin/forceLiquidationRec\"", "syntax_pass": true}, {"attribute_expression": "private final String ACCOUNT = \"/sapi/v1/margin/account\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ACCOUNT = \"/sapi/v1/margin/account\"", "syntax_pass": true}, {"attribute_expression": "private final String ALL_ORDERS = \"/sapi/v1/margin/allOrders\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ALL_ORDERS = \"/sapi/v1/margin/allOrders\"", "syntax_pass": true}, {"attribute_expression": "private final String OCO_ORDER = \"/sapi/v1/margin/order/oco\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "OCO_ORDER = \"/sapi/v1/margin/order/oco\"", "syntax_pass": true}, {"attribute_expression": "private final String ORDER_LIST = \"/sapi/v1/margin/orderList\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ORDER_LIST = \"/sapi/v1/margin/orderList\"", "syntax_pass": true}, {"attribute_expression": "private final String GET_ALL_OCO = \"/sapi/v1/margin/allOrderList\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "GET_ALL_OCO = \"/sapi/v1/margin/allOrderList\"", "syntax_pass": true}, {"attribute_expression": "private final String GET_OPEN_OCO = \"/sapi/v1/margin/openOrderList\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "GET_OPEN_OCO = \"/sapi/v1/margin/openOrderList\"", "syntax_pass": true}, {"attribute_expression": "private final String MY_TRADES = \"/sapi/v1/margin/myTrades\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "MY_TRADES = \"/sapi/v1/margin/myTrades\"", "syntax_pass": true}, {"attribute_expression": "private final String MAX_BORROW = \"/sapi/v1/margin/maxBorrowable\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "MAX_BORROW = \"/sapi/v1/margin/maxBorrowable\"", "syntax_pass": true}, {"attribute_expression": "private final String MAX_TRANSFERABLE = \"/sapi/v1/margin/maxTransferable\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "MAX_TRANSFERABLE = \"/sapi/v1/margin/maxTransferable\"", "syntax_pass": true}, {"attribute_expression": "private final String ISOLATED_ACCOUNT = \"/sapi/v1/margin/isolated/account\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ISOLATED_ACCOUNT = \"/sapi/v1/margin/isolated/account\"", "syntax_pass": true}, {"attribute_expression": "private final String ISOLATED_ACCOUNT_LIMIT = \"/sapi/v1/margin/isolated/accountLimit\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ISOLATED_ACCOUNT_LIMIT = \"/sapi/v1/margin/isolated/accountLimit\"", "syntax_pass": true}, {"attribute_expression": "private final String ALL_ISOLATED_SYMBOL = \"/sapi/v1/margin/isolated/allPairs\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ALL_ISOLATED_SYMBOL = \"/sapi/v1/margin/isolated/allPairs\"", "syntax_pass": true}, {"attribute_expression": "private final String BNB_BURN = \"/sapi/v1/bnbBurn\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BNB_BURN = \"/sapi/v1/bnbBurn\"", "syntax_pass": true}, {"attribute_expression": "private final String INTEREST_RATE_HIST = \"/sapi/v1/margin/interestRateHistory\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "INTEREST_RATE_HIST = \"/sapi/v1/margin/interestRateHistory\"", "syntax_pass": true}, {"attribute_expression": "private final String CROSS_MARGIN_DATA = \"/sapi/v1/margin/crossMarginData\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "CROSS_MARGIN_DATA = \"/sapi/v1/margin/crossMarginData\"", "syntax_pass": true}, {"attribute_expression": "private final String CROSS_MARGIN_COLLATERAL_RATIO = \"/sapi/v1/margin/crossMarginCollateralRatio\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "CROSS_MARGIN_COLLATERAL_RATIO = \"/sapi/v1/margin/crossMarginCollateralRatio\"", "syntax_pass": true}, {"attribute_expression": "private final String ADJUST_CROSS_MARGIN_MAX_LEVERAGE = \"/sapi/v1/margin/max-leverage\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ADJUST_CROSS_MARGIN_MAX_LEVERAGE = \"/sapi/v1/margin/max-leverage\"", "syntax_pass": true}, {"attribute_expression": "private final String ISOLATED_MARGIN_DATA = \"/sapi/v1/margin/isolatedMarginData\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ISOLATED_MARGIN_DATA = \"/sapi/v1/margin/isolatedMarginData\"", "syntax_pass": true}, {"attribute_expression": "private final String ISOLATED_MARGIN_TIER = \"/sapi/v1/margin/isolatedMarginTier\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ISOLATED_MARGIN_TIER = \"/sapi/v1/margin/isolatedMarginTier\"", "syntax_pass": true}, {"attribute_expression": "private final String ORDER_RATE_LIMIT = \"/sapi/v1/margin/rateLimit/order\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ORDER_RATE_LIMIT = \"/sapi/v1/margin/rateLimit/order\"", "syntax_pass": true}, {"attribute_expression": "private final String AVAILABLE_INVENTORY = \"/sapi/v1/margin/available-inventory\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "AVAILABLE_INVENTORY = \"/sapi/v1/margin/available-inventory\"", "syntax_pass": true}, {"attribute_expression": "private final String CAPITAL_FLOW = \"/sapi/v1/margin/capital-flow\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "CAPITAL_FLOW = \"/sapi/v1/margin/capital-flow\"", "syntax_pass": true}, {"attribute_expression": "private final String DELIST_SCHEDULE = \"/sapi/v1/margin/delist-schedule\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "DELIST_SCHEDULE = \"/sapi/v1/margin/delist-schedule\"", "syntax_pass": true}, {"attribute_expression": "private final String NEXT_HOURLY_INTEREST_RATE = \"/sapi/v1/margin/next-hourly-interest-rate\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "NEXT_HOURLY_INTEREST_RATE = \"/sapi/v1/margin/next-hourly-interest-rate\"", "syntax_pass": true}, {"attribute_expression": "private final String SMALL_LIABILITY_ASSETS = \"/sapi/v1/margin/exchange-small-liability\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SMALL_LIABILITY_ASSETS = \"/sapi/v1/margin/exchange-small-liability\"", "syntax_pass": true}, {"attribute_expression": "private final String EXCHANGE_SMALL_LIABILITY = \"/sapi/v1/margin/exchange-small-liability\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "EXCHANGE_SMALL_LIABILITY = \"/sapi/v1/margin/exchange-small-liability\"", "syntax_pass": true}, {"attribute_expression": "private final String SMALL_LIABILITY_EXCHANGE_HISTORY = \"/sapi/v1/margin/exchange-small-liability-history\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SMALL_LIABILITY_EXCHANGE_HISTORY = \"/sapi/v1/margin/exchange-small-liability-history\"", "syntax_pass": true}, {"attribute_expression": "private final String LEVERAGE_BRACKET = \"/sapi/v1/margin/leverageBracket\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LEVERAGE_BRACKET = \"/sapi/v1/margin/leverageBracket\"", "syntax_pass": true}, {"attribute_expression": "private final String TRADE_COEFF = \"/sapi/v1/margin/tradeCoeff\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TRADE_COEFF = \"/sapi/v1/margin/tradeCoeff\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard", "name": "GiftCard", "file_path": "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java", "superclasses": "", "methods": ["[]GiftCard(String,String,String,boolean,ProxyAuth)", "[]GiftCard(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]createCode(Map<String, Object>)", "[String]redeemCode(Map<String, Object>)", "[String]verify(Map<String, Object>)", "[String]rsaPublicKey(Map<String, Object>)", "[String]createDualTokensCode(Map<String, Object>)", "[String]tokensLimit(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[]GiftCard(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[]GiftCard(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[String]createCode(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[String]redeemCode(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[String]verify(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[String]rsaPublicKey(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[String]createDualTokensCode(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/GiftCard.java.GiftCard.[String]tokensLimit(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Gift Card Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#binance-gift-card-endpoints\">Gift Card Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class GiftCard {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public GiftCard(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public GiftCard(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String CREATE_CODE = \"/sapi/v1/giftcard/createCode\";\n    /**\n     * This API is for creating a Binance Code. To get started with, please make sure:\n     *\n     * You have a Binance account <br>\n     * You have passed kyc <br>\n     * You have a sufficient balance in your Binance funding wallet <br>\n     * You need Enable Withdrawals for the API Key which requests this endpoint. <br>\n     * <br><br>\n     * POST /sapi/v1/giftcard/createCode\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * token -- mandatory/string -- The coin type contained in the Binance Code <br>\n     * amount -- mandatory/double -- The amount of the coin <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#create-a-single-token-gift-card-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#create-a-single-token-gift-card-user_data</a>\n     */\n    public String createCode(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"token\", String.class);\n        ParameterChecker.checkParameter(parameters, \"amount\", Double.class);\n        return requestHandler.sendSignedRequest(baseUrl, CREATE_CODE, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String REDEEM_CODE = \"/sapi/v1/giftcard/redeemCode\";\n    /**\n     * This API is for redeeming the Binance Code. Once redeemed, the coins will be deposited in your funding wallet. <br>\n     * Please note that if you enter the wrong code 5 times within 24 hours,\n     * you will no longer be able to redeem any Binance Code that day. <br>\n     * <br><br>\n     * POST /sapi/v1/giftcard/redeemCode\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * code -- mandatory/string -- Binance code <br>\n     * externalUid -- optional/string -- Each external unique ID represents a unique user on the partner platform.\n     *                                  The function helps you to identify the redemption behavior of different users,\n     *                                  such as redemption frequency and amount. It also helps risk and limit control of a single account,\n     *                                  such as daily limit on redemption volume, frequency, and incorrect number of entries. This will also prevent a single user account reach the partner's daily redemption limits. We strongly recommend you to use this feature and transfer us the User ID of your users if you have different users redeeming Binance codes on your platform.\n     *                                  To protect user data privacy, you may choose to transfer the user id in any desired format (max. 400 characters). <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#redeem-a-binance-gift-card-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#redeem-a-binance-gift-card-user_data</a>\n     */\n    public String redeemCode(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"code\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, REDEEM_CODE, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String VERIFY = \"/sapi/v1/giftcard/verify\";\n    /**\n     * This API is for verifying whether the Binance Code is valid or not by entering Binance Code or reference number. <br>\n     * Please note that if you enter the wrong binance code 5 times within an hour,\n     * you will no longer be able to verify any binance code for that hour. <br>\n     * <br><br>\n     * GET /sapi/v1/giftcard/verify\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * referenceNo -- mandatory/string -- reference number <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#verify-binance-gift-card-by-gift-card-number-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#verify-binance-gift-card-by-gift-card-number-user_data</a>\n     */\n    public String verify(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"referenceNo\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, VERIFY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String RSA_PUB = \"/sapi/v1/giftcard/cryptography/rsa-public-key\";\n    /**\n     * This API is for fetching the RSA Public Key. This RSA Public key will be used to encrypt the card code.\n     * <br><br>\n     * GET /sapi/v1/giftcard/cryptography/rsa-public-key\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#fetch-rsa-public-key-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#fetch-rsa-public-key-user_data</a>\n     */\n    public String rsaPublicKey(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, RSA_PUB, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String CREATE_DUAL_TOKEN_CODE = \"/sapi/v1/giftcard/buyCode\";\n    /**\n     * This API is for buying a fixed-value Binance Code, which means your Binance Code will be redeemable to a token that is different to the token that you are paying in. If the token you\u2019re paying and the redeemable token are the same, please use the Create Binance Code endpoint.\n     * You can use supported crypto currency or fiat token as baseToken to buy Binance Code that is redeemable to your chosen faceToken.\n     * Once successfully purchased, the amount of baseToken would be deducted from your funding wallet.\n     * \n     * To get started with, please make sure:\n     * - You have a Binance account\n     * - You have passed kyc\n     * - You have a sufficient balance in your Binance funding wallet\n     * - You need Enable Withdrawals for the API Key which requests this endpoint.\n     * \n     * <br><br>\n     * POST /sapi/v1/giftcard/buyCode\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * baseToken -- mandatory/string -- The token you want to pay, example BUSD <br>\n     * faceToken -- mandatory/string -- The token you want to buy, example BNB. If faceToken = baseToken, it's the same as createCode endpoint. <br>\n     * baseTokenAmount -- mandatory/double -- The base token asset quantity, example 1.002 <br>\n     * discount -- optional/double -- The discount rate, example 0.1 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#create-a-dual-token-gift-card-fixed-value-discount-feature-trade\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#create-a-dual-token-gift-card-fixed-value-discount-feature-trade</a>\n     */\n    public String createDualTokensCode(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"baseToken\", String.class);\n        ParameterChecker.checkParameter(parameters, \"faceToken\", String.class);\n        ParameterChecker.checkParameter(parameters, \"baseTokenAmount\", Double.class);\n        return requestHandler.sendSignedRequest(baseUrl, CREATE_DUAL_TOKEN_CODE, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String TOKEN_LIMIT = \"/sapi/v1/giftcard/buyCode/token-limit\";\n    /**\n     * This API is to help you verify which tokens are available for you to purchase fixed-value gift cards.\n     * \n     * <br><br>\n     * GET /sapi/v1/giftcard/buyCode/token-limit\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * baseToken -- mandatory/string -- The token you want to pay, example BUSD <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#fetch-token-limit-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#fetch-token-limit-user_data</a>\n     */\n    public String tokensLimit(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"baseToken\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, TOKEN_LIMIT, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String CREATE_CODE = \"/sapi/v1/giftcard/createCode\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "CREATE_CODE = \"/sapi/v1/giftcard/createCode\"", "syntax_pass": true}, {"attribute_expression": "private final String REDEEM_CODE = \"/sapi/v1/giftcard/redeemCode\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "REDEEM_CODE = \"/sapi/v1/giftcard/redeemCode\"", "syntax_pass": true}, {"attribute_expression": "private final String VERIFY = \"/sapi/v1/giftcard/verify\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "VERIFY = \"/sapi/v1/giftcard/verify\"", "syntax_pass": true}, {"attribute_expression": "private final String RSA_PUB = \"/sapi/v1/giftcard/cryptography/rsa-public-key\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "RSA_PUB = \"/sapi/v1/giftcard/cryptography/rsa-public-key\"", "syntax_pass": true}, {"attribute_expression": "private final String CREATE_DUAL_TOKEN_CODE = \"/sapi/v1/giftcard/buyCode\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "CREATE_DUAL_TOKEN_CODE = \"/sapi/v1/giftcard/buyCode\"", "syntax_pass": true}, {"attribute_expression": "private final String TOKEN_LIMIT = \"/sapi/v1/giftcard/buyCode/token-limit\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TOKEN_LIMIT = \"/sapi/v1/giftcard/buyCode/token-limit\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Rebate.java.Rebate", "name": "Rebate", "file_path": "src/main/java/com/binance/connector/client/impl/spot/Rebate.java", "superclasses": "", "methods": ["[]Rebate(String,String,String,boolean,ProxyAuth)", "[]Rebate(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]taxQuery(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/Rebate.java.Rebate.[]Rebate(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Rebate.java.Rebate.[]Rebate(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Rebate.java.Rebate.[String]taxQuery(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Rebate Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#rebate-endpoints\">Rebate Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class Rebate {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public Rebate(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public Rebate(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String TAX_QUERY = \"/sapi/v1/rebate/taxQuery\";\n    /**\n     * GET /sapi/v1/rebate/taxQuery\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * page -- optional/int -- \tDefault 1 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-spot-rebate-history-records-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-spot-rebate-history-records-user_data</a>\n     */\n    public String taxQuery(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, TAX_QUERY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String TAX_QUERY = \"/sapi/v1/rebate/taxQuery\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TAX_QUERY = \"/sapi/v1/rebate/taxQuery\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/C2C.java.C2C", "name": "C2C", "file_path": "src/main/java/com/binance/connector/client/impl/spot/C2C.java", "superclasses": "", "methods": ["[]C2C(String,String,String,boolean,ProxyAuth)", "[]C2C(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]listUserOrderHistory(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/C2C.java.C2C.[]C2C(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/C2C.java.C2C.[]C2C(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/C2C.java.C2C.[String]listUserOrderHistory(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>C2C Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#c2c-endpoints\">C2C Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class C2C {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public C2C(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public C2C(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String LIST_ORDER_HISTORY = \"/sapi/v1/c2c/orderMatch/listUserOrderHistory\";\n    /**\n     * GET /sapi/v1/c2c/orderMatch/listUserOrderHistory\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * tradeType -- mandatory/string -- BUY, SELL <br>\n     * startTimestamp -- optional/long <br>\n     * endTimestamp -- optional/long <br>\n     * page -- optional/int -- default 1 <br>\n     * rows -- optional/int -- default 100, max 500 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-c2c-trade-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-c2c-trade-history-user_data</a>\n     */\n    public String listUserOrderHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"tradeType\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, LIST_ORDER_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String LIST_ORDER_HISTORY = \"/sapi/v1/c2c/orderMatch/listUserOrderHistory\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LIST_ORDER_HISTORY = \"/sapi/v1/c2c/orderMatch/listUserOrderHistory\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData", "name": "UserData", "file_path": "src/main/java/com/binance/connector/client/impl/spot/UserData.java", "superclasses": "", "methods": ["[]UserData(String,String,boolean,ProxyAuth)", "[String]createListenKey()", "[String]extendListenKey(Map<String, Object>)", "[String]closeListenKey(Map<String, Object>)", "[String]createMarginListenKey()", "[String]extendMarginListenKey(Map<String, Object>)", "[String]closeMarginListenKey(Map<String, Object>)", "[String]createIsolatedMarginListenKey(Map<String, Object>)", "[String]extendIsolatedMarginListenKey(Map<String, Object>)", "[String]closeIsolatedMarginListenKey(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[]UserData(String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]createListenKey()", "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]extendListenKey(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]closeListenKey(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]createMarginListenKey()", "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]extendMarginListenKey(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]closeMarginListenKey(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]createIsolatedMarginListenKey(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]extendIsolatedMarginListenKey(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/UserData.java.UserData.[String]closeIsolatedMarginListenKey(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>User Data Streams Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#user-data-streams\">User Data Streams</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class UserData {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public UserData(String baseUrl, String apiKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String SPOT_LISTEN_KEY = \"/api/v3/userDataStream\";\n    /**\n     * Start a new user data stream. The stream will close after 60 minutes unless a keepalive is sent.\n     * If the account has an active listenKey, that listenKey will be returned and its validity will be extended for 60 minutes.\n     * <br><br>\n     * POST /api/v3/userDataStream\n     * <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot</a>\n     */\n    public String createListenKey() {\n        return requestHandler.sendApiRequest(baseUrl, SPOT_LISTEN_KEY, null, HttpMethod.POST, showLimitUsage);\n    }\n\n    /**\n     * Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes.\n     * It's recommended to send a ping about every 30 minutes.\n     * <br><br>\n     * PUT /api/v3/userDataStream\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * listenKey -- mandatory/string <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot</a>\n     */\n    public String extendListenKey(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"listenKey\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, SPOT_LISTEN_KEY, parameters, HttpMethod.PUT, showLimitUsage);\n    }\n\n    /**\n     * Close out a user data stream.\n     * <br><br>\n     * DELETE /api/v3/userDataStream\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * listenKey -- mandatory/string <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot</a>\n     */\n    public String closeListenKey(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"listenKey\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, SPOT_LISTEN_KEY, parameters, HttpMethod.DELETE, showLimitUsage);\n    }\n\n    private final String MARGIN_LISTEN_KEY = \"/sapi/v1/userDataStream\";\n    /**\n     * POST /sapi/v1/userDataStream\n     * <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin</a>\n     */\n    public String createMarginListenKey() {\n        return requestHandler.sendApiRequest(baseUrl, MARGIN_LISTEN_KEY, null, HttpMethod.POST, showLimitUsage);\n    }\n\n    /**\n     * PUT /sapi/v1/userDataStream\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * listenKey -- mandatory/string <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin</a>\n     */\n    public String extendMarginListenKey(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"listenKey\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, MARGIN_LISTEN_KEY, parameters, HttpMethod.PUT, showLimitUsage);\n    }\n\n    /**\n     * DELETE /sapi/v1/userDataStream\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * listenKey -- mandatory/string <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin</a>\n     */\n    public String closeMarginListenKey(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"listenKey\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, MARGIN_LISTEN_KEY, parameters, HttpMethod.DELETE, showLimitUsage);\n    }\n\n    private final String ISOLATED_LISTEN_KEY = \"/sapi/v1/userDataStream/isolated\";\n    /**\n     * POST /sapi/v1/userDataStream/isolated\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin</a>\n     */\n    public String createIsolatedMarginListenKey(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, ISOLATED_LISTEN_KEY, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    /**\n     * PUT /sapi/v1/userDataStream/isolated\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * listenKey -- mandatory/string <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin</a>\n     */\n    public String extendIsolatedMarginListenKey(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"listenKey\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, ISOLATED_LISTEN_KEY, parameters, HttpMethod.PUT, showLimitUsage);\n    }\n\n    /**\n     * DELETE /sapi/v1/userDataStream/isolated\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string <br>\n     * listenKey -- mandatory/string <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin</a>\n     */\n    public String closeIsolatedMarginListenKey(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"listenKey\", String.class);\n        return requestHandler.sendApiRequest(baseUrl, ISOLATED_LISTEN_KEY, parameters, HttpMethod.DELETE, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String SPOT_LISTEN_KEY = \"/api/v3/userDataStream\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SPOT_LISTEN_KEY = \"/api/v3/userDataStream\"", "syntax_pass": true}, {"attribute_expression": "private final String MARGIN_LISTEN_KEY = \"/sapi/v1/userDataStream\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "MARGIN_LISTEN_KEY = \"/sapi/v1/userDataStream\"", "syntax_pass": true}, {"attribute_expression": "private final String ISOLATED_LISTEN_KEY = \"/sapi/v1/userDataStream/isolated\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ISOLATED_LISTEN_KEY = \"/sapi/v1/userDataStream/isolated\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking", "name": "Staking", "file_path": "src/main/java/com/binance/connector/client/impl/spot/Staking.java", "superclasses": "", "methods": ["[]Staking(String,String,String,boolean,ProxyAuth)", "[]Staking(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]subEthStaking(Map<String, Object>)", "[String]redeemEthStaking(Map<String, Object>)", "[String]ethStakingSubHistory(Map<String, Object>)", "[String]ethStakingRedeemHistory(Map<String, Object>)", "[String]ethStakingRewardsHistory(Map<String, Object>)", "[String]ethStakingQuota(Map<String, Object>)", "[String]ethStakingRateHistory(Map<String, Object>)", "[String]ethStakingAccount(Map<String, Object>)", "[String]wrapEthStakingWbeth(Map<String, Object>)", "[String]ethStakingWbethWrapHistory(Map<String, Object>)", "[String]ethStakingWbethUnwrapHistory(Map<String, Object>)", "[String]ethStakingWbethRewardHistory(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[]Staking(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[]Staking(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]subEthStaking(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]redeemEthStaking(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingSubHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingRedeemHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingRewardsHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingQuota(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingRateHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingAccount(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]wrapEthStakingWbeth(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingWbethWrapHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingWbethUnwrapHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Staking.java.Staking.[String]ethStakingWbethRewardHistory(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Staking Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#staking-endpoints\">Staking Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class Staking {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public Staking(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public Staking(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String SUB_ETH_STAKING = \"/sapi/v2/eth-staking/eth/stake\";\n    /**\n     * Stake ETH to get WBETH\n     * \n     * <br><br>\n     * POST /sapi/v2/eth-staking/eth/stake\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * amount -- mandatory/decimal -- Amount in ETH, limit 4 decimals <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#subscribe-eth-staking-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#subscribe-eth-staking-trade</a>\n     */\n    public String subEthStaking(Map<String, Object> parameters) {\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, SUB_ETH_STAKING, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String REDEEM_ETH = \"/sapi/v1/eth-staking/eth/redeem\";\n    /**\n     * Redeem WBETH or BETH and get ETH\n     * \n     * <br><br>\n     * POST /sapi/v1/eth-staking/eth/redeem\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * amount -- mandatory/decimal -- Amount in ETH, limit 4 decimals <br>\n     * asset -- optional/string -- \"BETH\" or \"WBETH\", default \"BETH\" <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#redeem-eth-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#redeem-eth-trade</a>\n     */\n    public String redeemEthStaking(Map<String, Object> parameters) {\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, REDEEM_ETH, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String ETH_STAKING_HISTORY = \"/sapi/v1/eth-staking/eth/history/stakingHistory\";\n    /**\n     * GET /sapi/v1/eth-staking/eth/history/stakingHistory\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * current -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default: 10, Max: 100 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-eth-staking-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-eth-staking-history-user_data</a>\n     */\n    public String ethStakingSubHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ETH_STAKING_REDEEM_HISTORY = \"/sapi/v1/eth-staking/eth/history/redemptionHistory\";\n    /**\n     * GET /sapi/v1/eth-staking/eth/history/redemptionHistory\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * current -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default: 10, Max: 100 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-eth-redemption-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-eth-redemption-history-user_data</a>\n     */\n    public String ethStakingRedeemHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_REDEEM_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ETH_STAKING_REWARDS_HISTORY = \"/sapi/v1/eth-staking/eth/history/rewardsHistory\";\n    /**\n     * GET /sapi/v1/eth-staking/eth/history/rewardsHistory\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * current -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default: 10, Max: 100 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-beth-rewards-distribution-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-beth-rewards-distribution-history-user_data</a>\n     */\n    public String ethStakingRewardsHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_REWARDS_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ETH_STAKING_QUOTA = \"/sapi/v1/eth-staking/eth/quota\";\n    /**\n     * GET /sapi/v1/eth-staking/eth/quota\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-current-eth-staking-quota-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-current-eth-staking-quota-user_data</a>\n     */\n    public String ethStakingQuota(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_QUOTA, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ETH_STAKING_RATE_HISTORY = \"/sapi/v1/eth-staking/eth/history/rateHistory\";\n    /**\n     * GET /sapi/v1/eth-staking/eth/history/rateHistory\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * current -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default: 10, Max: 100 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-rate-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-rate-history-user_data</a>\n     */\n    public String ethStakingRateHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_RATE_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ETH_STAKING_ACCOUNT = \"/sapi/v2/eth-staking/account\";\n    /**\n     * GET /sapi/v2/eth-staking/account\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#eth-staking-account-v2-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#eth-staking-account-v2-user_data</a>\n     */\n    public String ethStakingAccount(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_ACCOUNT, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String WRAP_WBETH = \"/sapi/v1/eth-staking/wbeth/wrap\";\n    /**\n     * POST /sapi/v1/eth-staking/wbeth/wrap\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * amount -- mandatory/decimal -- Amount in BETH, limit 4 decimals <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#wrap-beth-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#wrap-beth-trade</a>\n     */\n    public String wrapEthStakingWbeth(Map<String, Object> parameters) {\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, WRAP_WBETH, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String ETH_STAKING_WBETH_WRAP_HISTORY = \"/sapi/v1/eth-staking/wbeth/history/wrapHistory\";\n    /**\n     * GET /sapi/v1/eth-staking/wbeth/history/wrapHistory\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * current -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default: 10, Max: 100 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-wrap-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-wrap-history-user_data</a>\n     */\n    public String ethStakingWbethWrapHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_WBETH_WRAP_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ETH_STAKING_WBETH_UNWRAP_HISTORY = \"/sapi/v1/eth-staking/wbeth/history/unwrapHistory\";\n    /**\n     * GET /sapi/v1/eth-staking/wbeth/history/unwrapHistory\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * current -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default: 10, Max: 100 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-unwrap-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-unwrap-history-user_data</a>\n     */\n    public String ethStakingWbethUnwrapHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_WBETH_UNWRAP_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ETH_STAKING_WBETH_REWARD_HISTORY = \"/sapi/v1/eth-staking/eth/history/wbethRewardsHistory\";\n    /**\n     * GET /sapi/v1/eth-staking/eth/history/wbethRewardsHistory\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * current -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default: 10, Max: 100 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-rewards-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-wbeth-rewards-history-user_data</a>\n     */\n    public String ethStakingWbethRewardHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ETH_STAKING_WBETH_REWARD_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String SUB_ETH_STAKING = \"/sapi/v2/eth-staking/eth/stake\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUB_ETH_STAKING = \"/sapi/v2/eth-staking/eth/stake\"", "syntax_pass": true}, {"attribute_expression": "private final String REDEEM_ETH = \"/sapi/v1/eth-staking/eth/redeem\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "REDEEM_ETH = \"/sapi/v1/eth-staking/eth/redeem\"", "syntax_pass": true}, {"attribute_expression": "private final String ETH_STAKING_HISTORY = \"/sapi/v1/eth-staking/eth/history/stakingHistory\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ETH_STAKING_HISTORY = \"/sapi/v1/eth-staking/eth/history/stakingHistory\"", "syntax_pass": true}, {"attribute_expression": "private final String ETH_STAKING_REDEEM_HISTORY = \"/sapi/v1/eth-staking/eth/history/redemptionHistory\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ETH_STAKING_REDEEM_HISTORY = \"/sapi/v1/eth-staking/eth/history/redemptionHistory\"", "syntax_pass": true}, {"attribute_expression": "private final String ETH_STAKING_REWARDS_HISTORY = \"/sapi/v1/eth-staking/eth/history/rewardsHistory\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ETH_STAKING_REWARDS_HISTORY = \"/sapi/v1/eth-staking/eth/history/rewardsHistory\"", "syntax_pass": true}, {"attribute_expression": "private final String ETH_STAKING_QUOTA = \"/sapi/v1/eth-staking/eth/quota\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ETH_STAKING_QUOTA = \"/sapi/v1/eth-staking/eth/quota\"", "syntax_pass": true}, {"attribute_expression": "private final String ETH_STAKING_RATE_HISTORY = \"/sapi/v1/eth-staking/eth/history/rateHistory\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ETH_STAKING_RATE_HISTORY = \"/sapi/v1/eth-staking/eth/history/rateHistory\"", "syntax_pass": true}, {"attribute_expression": "private final String ETH_STAKING_ACCOUNT = \"/sapi/v2/eth-staking/account\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ETH_STAKING_ACCOUNT = \"/sapi/v2/eth-staking/account\"", "syntax_pass": true}, {"attribute_expression": "private final String WRAP_WBETH = \"/sapi/v1/eth-staking/wbeth/wrap\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "WRAP_WBETH = \"/sapi/v1/eth-staking/wbeth/wrap\"", "syntax_pass": true}, {"attribute_expression": "private final String ETH_STAKING_WBETH_WRAP_HISTORY = \"/sapi/v1/eth-staking/wbeth/history/wrapHistory\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ETH_STAKING_WBETH_WRAP_HISTORY = \"/sapi/v1/eth-staking/wbeth/history/wrapHistory\"", "syntax_pass": true}, {"attribute_expression": "private final String ETH_STAKING_WBETH_UNWRAP_HISTORY = \"/sapi/v1/eth-staking/wbeth/history/unwrapHistory\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ETH_STAKING_WBETH_UNWRAP_HISTORY = \"/sapi/v1/eth-staking/wbeth/history/unwrapHistory\"", "syntax_pass": true}, {"attribute_expression": "private final String ETH_STAKING_WBETH_REWARD_HISTORY = \"/sapi/v1/eth-staking/eth/history/wbethRewardsHistory\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ETH_STAKING_WBETH_REWARD_HISTORY = \"/sapi/v1/eth-staking/eth/history/wbethRewardsHistory\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet", "name": "Wallet", "file_path": "src/main/java/com/binance/connector/client/impl/spot/Wallet.java", "superclasses": "", "methods": ["[]Wallet(String,String,String,boolean,ProxyAuth)", "[]Wallet(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]systemStatus()", "[String]coinInfo(Map<String, Object>)", "[String]accountSnapshot(Map<String, Object>)", "[String]disableFastWithdraw(Map<String, Object>)", "[String]enableFastWithdraw(Map<String, Object>)", "[String]withdraw(Map<String, Object>)", "[String]depositHistory(Map<String, Object>)", "[String]withdrawHistory(Map<String, Object>)", "[String]depositAddress(Map<String, Object>)", "[String]depositAddresses(Map<String, Object>)", "[String]accountStatus(Map<String, Object>)", "[String]apiTradingStatus(Map<String, Object>)", "[String]dustLog(Map<String, Object>)", "[String]bnbConvertableAssets(Map<String, Object>)", "[String]dustTransfer(Map<String, Object>)", "[String]assetDividend(Map<String, Object>)", "[String]assetDetail(Map<String, Object>)", "[String]tradeFee(Map<String, Object>)", "[String]universalTransfer(Map<String, Object>)", "[String]queryUniversalTransfer(Map<String, Object>)", "[String]fundingWallet(Map<String, Object>)", "[String]apiPermission(Map<String, Object>)", "[String]getUserAsset(Map<String, Object>)", "[String]busdConvert(Map<String, Object>)", "[String]busdConvertHistory(Map<String, Object>)", "[String]cloudMiningHistory(Map<String, Object>)", "[String]getBusdAutoConvertions()", "[String]switchBusdAutoConversion(Map<String, Object>)", "[String]applyOneClickArrivalDeposit(Map<String, Object>)", "[String]walletBalance(Map<String, Object>)", "[String]delegationHistory(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[]Wallet(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[]Wallet(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]systemStatus()", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]coinInfo(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]accountSnapshot(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]disableFastWithdraw(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]enableFastWithdraw(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]withdraw(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]depositHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]withdrawHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]depositAddress(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]depositAddresses(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]accountStatus(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]apiTradingStatus(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]dustLog(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]bnbConvertableAssets(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]dustTransfer(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]assetDividend(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]assetDetail(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]tradeFee(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]universalTransfer(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]queryUniversalTransfer(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]fundingWallet(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]apiPermission(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]getUserAsset(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]busdConvert(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]busdConvertHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]cloudMiningHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]getBusdAutoConvertions()", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]switchBusdAutoConversion(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]applyOneClickArrivalDeposit(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]walletBalance(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Wallet.java.Wallet.[String]delegationHistory(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Wallet Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#wallet-endpoints\">Wallet Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class Wallet {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public Wallet(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public Wallet(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String SYSTEM_STATUS = \"/sapi/v1/system/status\";\n    /**\n     * Fetch system status.\n     * <br><br>\n     * GET /sapi/v1/system/status\n     * <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#system-status-system\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#system-status-system</a>\n     */\n    public String systemStatus() {\n        return requestHandler.sendPublicRequest(baseUrl, SYSTEM_STATUS, null, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String COIN_INFO = \"/sapi/v1/capital/config/getall\";\n    /**\n     * Get information of coins (available for deposit and withdraw) for user.\n     * <br><br>\n     * GET /sapi/v1/capital/config/getall\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#all-coins-39-information-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#all-coins-39-information-user_data</a>\n     */\n    public String coinInfo(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, COIN_INFO, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ACCOUNT_SNAPSHOT = \"/sapi/v1/accountSnapshot\";\n    /**\n     * - The query time period must be less than 30 days\n     * - Support query within the last one month only\n     * - If startTime and endTime are both not sent, records from the last 7 days are returned by default\n     * <br><br>\n     * GET /sapi/v1/accountSnapshot\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * type -- mandatory/string -- \"SPOT\", \"MARGIN\", \"FUTURES\" <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int -- min 5, max 30, default 5 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#daily-account-snapshot-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#daily-account-snapshot-user_data</a>\n     */\n    public String accountSnapshot(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT_SNAPSHOT, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String DISABLE_FAST_WITHDRAW = \"/sapi/v1/account/disableFastWithdrawSwitch\";\n    /**\n     * - This request will disable fastwithdraw switch under your account.\n     * - You need to enable \"trade\" option for the api key which requests this endpoint.\n     * <br><br>\n     * POST /sapi/v1/account/disableFastWithdrawSwitch\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#disable-fast-withdraw-switch-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#disable-fast-withdraw-switch-user_data</a>\n     */\n    public String disableFastWithdraw(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, DISABLE_FAST_WITHDRAW, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String ENABLE_FAST_WITHDRAW = \"/sapi/v1/account/enableFastWithdrawSwitch\";\n    /**\n     * - This request will enable fastwithdraw switch under your account. You need to enable \"trade\" option for the api key which requests this endpoint.\n     * - When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee.\n     * <br><br>\n     * POST /sapi/v1/account/enableFastWithdrawSwitch\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#enable-fast-withdraw-switch-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#enable-fast-withdraw-switch-user_data</a>\n     */\n    public String enableFastWithdraw(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ENABLE_FAST_WITHDRAW, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String WITHDRAW = \"/sapi/v1/capital/withdraw/apply\";\n    /**\n     * Submit a withdraw request.\n     * \n     * - If `network` not send, return with default network of the coin.\n     * - You can get `network` and `isDefault` in `networkList` of a coin in the response of `Get /sapi/v1/capital/config/getall (HMAC SHA256)`.\n     * <br><br>\n     * POST /sapi/v1/capital/withdraw/apply\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * coin -- mandatory/string <br>\n     * withdrawOrderId -- optional/string -- Client ID for withdraw <br>\n     * network -- optional/string <br>\n     * address -- mandatory/string <br>\n     * addressTag -- optional/string -- Secondary address identifier for coins like XRP,XMR etc. <br>\n     * amount -- mandatory/decimal <br>\n     * transactionFeeFlag -- optional/boolean -- When making internal transfer, true for returning the fee to the destination account;\n     *            false for returning the fee back to the departure account. Default false. <br>\n     * name -- optional/string -- Description of the address. Space in name should be encoded into %20. <br>\n     * walletType -- optional/int -- The wallet type for withdraw, 0-spot wallet , 1-funding wallet.Default spot wallet <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#withdraw-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#withdraw-user_data</a>\n     */\n    public String withdraw(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"coin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"address\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, WITHDRAW, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String DEPOSIT_HISTORY = \"/sapi/v1/capital/deposit/hisrec\";\n    /**\n     * Fetch deposit history.\n     * \n     * - Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.\n     * - If both `startTime` and `endTime` are sent, time between `startTime` and `endTime` must be less than 90 days.\n     * <br><br>\n     * GET /sapi/v1/capital/deposit/hisrec\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * coin -- optional/string <br>\n     * status -- optional/int -- 0(0:pending,6: credited but cannot withdraw, 1:success) <br>\n     * startTime -- optional/long -- Default: 90 days from current timestamp <br>\n     * endTime -- optional/long -- Default: present timestamp <br>\n     * offset -- optional/int -- Default:0 <br>\n     * limit -- optional/int -- Default:1000, Max:1000 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#deposit-history-supporting-network-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#deposit-history-supporting-network-user_data</a>\n     */\n    public String depositHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, DEPOSIT_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String WITHDRAW_HISTORY = \"/sapi/v1/capital/withdraw/history\";\n    /**\n     * Fetch withdraw history.\n     * \n     * This endpoint specifically uses per second UID rate limit, user's total second level IP rate limit is 180000/second. Response from the endpoint contains header key X-SAPI-USED-UID-WEIGHT-1S, which defines weight used by the current IP.\n     * \n     * - `network` may not be in the response for old withdraw.\n     * - Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days.\n     * - If both `startTime` and `endTime` are sent, time between `startTime` and `endTime` must be less than 90 days\n     * - If withdrawOrderId is sent, time between startTime and endTime must be less than 7 days.\n     * - If withdrawOrderId is sent, startTime and endTime are not sent, will return last 7 days records by default.\n     * <br><br>\n     * GET /sapi/v1/capital/withdraw/history\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * coin -- optional/string <br>\n     * withdrawOrderId -- optional/string <br>\n     * status -- optional/int -- 0(0:Email Sent,1:Cancelled 2:Awaiting Approval 3:Rejected 4:Processing 5:Failure 6:Completed) <br>\n     * startTime -- optional/long -- Default: 90 days from current timestamp <br>\n     * endTime -- optional/long -- Default: present timestamp <br>\n     * offset -- optional/int <br>\n     * limit -- optional/int -- Default:1000, Max:1000 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#withdraw-history-supporting-network-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#withdraw-history-supporting-network-user_data</a>\n     */\n    public String withdrawHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, WITHDRAW_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String DEPOSIT_ADDRESS = \"/sapi/v1/capital/deposit/address\";\n    /**\n     * Fetch deposit address with network.\n     * \n     * - If network is not send, return with default network of the coin.\n     * - You can get network and isDefault in networkList in the response of Get /sapi/v1/capital/config/getall.\n     * <br><br>\n     * GET /sapi/v1/capital/deposit/address\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * coin -- mandatory/string <br>\n     * network -- optional/string <br>\n     * amount -- optional/decimal -- mandatory if using LIGHTNING network <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#deposit-address-supporting-network-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#deposit-address-supporting-network-user_data</a>\n     */\n    public String depositAddress(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"coin\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, DEPOSIT_ADDRESS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String DEPOSIT_ADDRESSES = \"/sapi/v1/capital/deposit/address/list\";\n    /**\n     * Fetch deposit address list with network.\n     * \n     * - If network is not send, return with default network of the coin.\n     * - You can get network and isDefault in networkList in the response of Get /sapi/v1/capital/config/getall.\n     * <br><br>\n     * GET /sapi/v1/capital/deposit/address/list\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * coin -- mandatory/string <br>\n     * network -- optional/string <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#fetch-deposit-address-list-with-network-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#fetch-deposit-address-list-with-network-user_data</a>\n     */\n    public String depositAddresses(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"coin\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, DEPOSIT_ADDRESSES, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ACCOUNT_STATUS = \"/sapi/v1/account/status\";\n    /**\n     * Fetch account status detail.\n     * <br><br>\n     * GET /sapi/v1/account/status\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#account-status-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#account-status-user_data</a>\n     */\n    public String accountStatus(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ACCOUNT_STATUS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String API_TRADE_STATUS = \"/sapi/v1/account/apiTradingStatus\";\n    /**\n     * Fetch account API trading status with details.\n     * <br><br>\n     * GET /sapi/v1/account/apiTradingStatus\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#account-api-trading-status-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#account-api-trading-status-user_data</a>\n     */\n    public String apiTradingStatus(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, API_TRADE_STATUS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String DUST_LOG = \"/sapi/v1/asset/dribblet\";\n    /**\n     * GET /sapi/v1/asset/dribblet\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#dustlog-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#dustlog-user_data</a>\n     */\n    public String dustLog(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, DUST_LOG, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String BNB_CONVERTIBLE_ASSETS = \"/sapi/v1/asset/dust-btc\";\n    /**\n     * POST /sapi/v1/asset/dust-btc\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-assets-that-can-be-converted-into-bnb-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-assets-that-can-be-converted-into-bnb-user_data</a>\n     */\n    public String bnbConvertableAssets(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, BNB_CONVERTIBLE_ASSETS, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String DUST_TRANSFER = \"/sapi/v1/asset/dust\";\n    /**\n     * Convert dust assets to BNB.\n     * <br><br>\n     * POST /sapi/v1/asset/dust\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- mandatory/array -- The asset being converted. For example: asset=BTC&amp;asset=USDT <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#dust-transfer-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#dust-transfer-user_data</a>\n     */\n    public String dustTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", ArrayList.class);\n        return requestHandler.sendSignedRequest(baseUrl, DUST_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String ASSET_DIVIDEND = \"/sapi/v1/asset/assetDividend\";\n    /**\n     * Query asset dividend record.\n     * <br><br>\n     * GET /sapi/v1/asset/assetDividend\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int -- Default 20, max 500 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#asset-dividend-record-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#asset-dividend-record-user_data</a>\n     */\n    public String assetDividend(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ASSET_DIVIDEND, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ASSET_DETAIL = \"/sapi/v1/asset/assetDetail\";\n    /**\n     * Fetch details of assets supported on Binance.\n     * \n     * - Please get network and other deposit or withdraw details from `GET /sapi/v1/capital/config/getall`.\n     * <br><br>\n     * GET /sapi/v1/asset/assetDetail\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#asset-detail-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#asset-detail-user_data</a>\n     */\n    public String assetDetail(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ASSET_DETAIL, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String TRADE_FEE = \"/sapi/v1/asset/tradeFee\";\n    /**\n     * Fetch trade fee.\n     * <br><br>\n     * GET /sapi/v1/asset/tradeFee\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- optional/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#trade-fee-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#trade-fee-user_data</a>\n     */\n    public String tradeFee(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, TRADE_FEE, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String UNIVERSAL_TRANSFER = \"/sapi/v1/asset/transfer\";\n    /**\n     * You need to enable Permits Universal Transfer option for the api key which requests this endpoint.\n     * <br><br>\n     * POST /sapi/v1/asset/transfer\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * type -- mandatory/enum -- Universal transfer type <br>\n     * asset -- mandatory/string <br>\n     * amount -- mandatory/decimal <br>\n     * fromSymbol -- optional/string <br>\n     * toSymbol -- optional/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#user-universal-transfer-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#user-universal-transfer-user_data</a>\n     */\n    public String universalTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, UNIVERSAL_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    /**\n     * GET /sapi/v1/asset/transfer\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * type -- mandatory/enum <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * current -- optional/int -- Default 1 <br>\n     * size -- optional/int -- \tDefault 10, Max 100 <br>\n     * fromSymbol -- optional/string <br>\n     * toSymbol -- optional/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-user-universal-transfer-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-user-universal-transfer-history-user_data</a>\n     */\n    public String queryUniversalTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, UNIVERSAL_TRANSFER, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String FUNDING_WALLET = \"/sapi/v1/asset/get-funding-asset\";\n    /**\n     * POST /sapi/v1/asset/get-funding-asset\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string <br>\n     * needBtcValuation -- optional/string -- true or false <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#funding-wallet-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#funding-wallet-user_data</a>\n     */\n    public String fundingWallet(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FUNDING_WALLET, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String API_PERMISSION = \"/sapi/v1/account/apiRestrictions\";\n    /**\n     * GET /sapi/v1/account/apiRestrictions\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-api-key-permission-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-api-key-permission-user_data</a>\n     */\n    public String apiPermission(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, API_PERMISSION, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String USER_ASSET = \"/sapi/v3/asset/getUserAsset\";\n    /**\n     * Get user assets, just for positive data.\n     * <br><br>\n     * POST /sapi/v3/asset/getUserAsset\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string -- If asset is blank, then query all positive assets user have. <br>\n     * needBtcValuation -- optional/boolean -- \tWhether need btc valuation or not. <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#user-asset-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#user-asset-user_data</a>\n     */\n    public String getUserAsset(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, USER_ASSET, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String BUSD_CONVERT = \"/sapi/v1/asset/convert-transfer\";\n    /**\n     * Convert transfer, convert between BUSD and stablecoins.\n     * \n     * - If the clientId has been used before, will not do the convert transfer, the original transfer will be returned.\n     * <br><br>\n     * POST /sapi/v1/asset/convert-transfer\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * clientTranId -- mandatory/string -- The unique user-defined transaction id, min length 20 <br>\n     * asset -- mandatory/string -- The current asset <br>\n     * amount -- mandatory/BigDecimal -- The amount must be positive number <br>\n     * targetAsset -- mandatory/string -- Target asset you want to convert <br>\n     * accountType -- optional/string -- Only MAIN and CARD, default MAIN <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#busd-convert-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#busd-convert-trade</a>\n     */\n    public String busdConvert(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"clientTranId\", String.class);\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        ParameterChecker.checkParameter(parameters, \"targetAsset\", String.class);\n\n        return requestHandler.sendSignedRequest(baseUrl, BUSD_CONVERT, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String BUSD_CONVERT_HISTORY = \"/sapi/v1/asset/convert-transfer/queryByPage\";\n    /**\n     * <br><br>\n     * GET /sapi/v1/asset/convert-transfer/queryByPage\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * \n     * startTime -- mandatory/long -- inclusive, unit: ms <br>\n     * endTime -- mandatory/long -- exclusive, unit: ms <br>\n     * tranId -- optional/long -- The transaction id <br>\n     * clientTranId -- optional/string -- The unique user-defined transaction id <br>\n     * asset -- optional/string -- If not sent or null, deducted asset and target asset are returned. <br>\n     * accountType -- optional/string -- MAIN: main account. CARD: funding account. If not sent or null, spot and card wallet will be queried. <br>\n     * current -- optional/integer -- current page, default 1, the min value is 1 <br>\n     * size -- optional/integer -- page size, default 10, the max value is 100 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#busd-convert-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#busd-convert-history-user_data</a>\n     */\n    public String busdConvertHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"startTime\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"endTime\", Long.class);\n\n        return requestHandler.sendSignedRequest(baseUrl, BUSD_CONVERT_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n\n    private final String CLOUD_MINING_HISTORY = \"/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\";\n    /**\n     * The query of Cloud-Mining payment and refund history\n     * <br><br>\n     * GET /sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * \n     * startTime -- mandatory/long -- inclusive, unit: ms <br>\n     * endTime -- mandatory/long -- exclusive, unit: ms <br>\n     * tranId -- optional/long -- The transaction id <br>\n     * clientTranId -- optional/string -- The unique flag <br>\n     * asset -- optional/string -- If not sent, we will query all assets. <br>\n     * current -- optional/integer -- current page, default 1, the min value is 1 <br>\n     * size -- optional/integer -- page size, default 10, the max value is 100 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-cloud-mining-payment-and-refund-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-cloud-mining-payment-and-refund-history-user_data</a>\n     */\n    public String cloudMiningHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"startTime\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"endTime\", Long.class);\n\n        return requestHandler.sendSignedRequest(baseUrl, CLOUD_MINING_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String BUSD_AUTO_CONVERT = \"/sapi/v1/capital/contract/convertible-coins\";\n    /**\n     * Get the stable coins set for auto-conversion to BUSD at deposit/withdrawal moments.\n     * \n     * <br><br>\n     * GET /sapi/v1/capital/contract/convertible-coins\n     * <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-auto-converting-stable-coins-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-auto-converting-stable-coins-user_data</a>\n     */\n    public String getBusdAutoConvertions() {\n        return requestHandler.sendSignedRequest(baseUrl, BUSD_AUTO_CONVERT, null, HttpMethod.GET, showLimitUsage);\n    }\n\n    /**\n     * Switch on/off the BUSD auto-conversion from/to a specific stable coin.\n     * \n     * <br><br>\n     * POST /sapi/v1/capital/contract/convertible-coins\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * coin -- mandatory/string -- Must be USDC, USDP or TUSD <br>\n     * enable -- mandatory/boolean -- true: turn on the auto-conversion. false: turn off the auto-conversion <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#switch-on-off-busd-and-stable-coins-conversion-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#switch-on-off-busd-and-stable-coins-conversion-user_data</a>\n     */\n    public String switchBusdAutoConversion(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"coin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"enable\", Boolean.class);\n        return requestHandler.sendSignedRequest(baseUrl, BUSD_AUTO_CONVERT, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String APPLY_ONE_CLICK_ARRIVAL_DEPOSIT = \"/sapi/v1/capital/deposit/credit-apply\";\n    /**\n     * Apply deposit credit for expired address (One click arrival)\n     * \n     * <br><br>\n     * POST /sapi/v1/capital/deposit/credit-apply\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * depositId -- optional/long -- Deposit record ID, priority use <br>\n     * txId -- optional/string -- Deposit txId, used when depositId is not specified <br>\n     * subAccountId -- optional/long <br>\n     * subUserId -- optional/long <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#one-click-arrival-deposit-apply-for-expired-address-deposit-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#one-click-arrival-deposit-apply-for-expired-address-deposit-user_data</a>\n     */\n    public String applyOneClickArrivalDeposit(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, APPLY_ONE_CLICK_ARRIVAL_DEPOSIT, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String WALLET_BALANCE = \"/sapi/v1/asset/wallet/balance\";\n    /**\n     * Query User Wallet Balance\n     * \n     * <br><br>\n     * GET /sapi/v1/asset/wallet/balance\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-user-wallet-balance-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-user-wallet-balance-user_data</a>\n     */\n    public String walletBalance(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, WALLET_BALANCE, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String QUERY_USER_DELEGATION_HISTORY = \"/sapi/v1/asset/custody/transfer-history\";\n    /**\n     * Query User Delegation History\n     * \n     * You need to open Enable Spot and Margin Trading permission for the API Key which requests this endpoint\n     * \n     * <br><br>\n     * GET /sapi/v1/asset/custody/transfer-history\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * email -- mandatory/string <br>\n     * startTime -- mandatory/long <br>\n     * endTime -- mandatory/long <br>\n     * type -- optional/enum -- \"Delegate\" or \"Undelegate\"<br>\n     * asset -- optional/string <br>\n     * current -- optional/integer -- Current querying page. Start from 1. Default:1 <br>\n     * size -- optional/integer -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-user-delegation-history-for-master-account-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-user-delegation-history-for-master-account-user_data</a>\n     */\n    public String delegationHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"email\", String.class);\n        ParameterChecker.checkParameter(parameters, \"startTime\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"endTime\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, QUERY_USER_DELEGATION_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String SYSTEM_STATUS = \"/sapi/v1/system/status\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SYSTEM_STATUS = \"/sapi/v1/system/status\"", "syntax_pass": true}, {"attribute_expression": "private final String COIN_INFO = \"/sapi/v1/capital/config/getall\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "COIN_INFO = \"/sapi/v1/capital/config/getall\"", "syntax_pass": true}, {"attribute_expression": "private final String ACCOUNT_SNAPSHOT = \"/sapi/v1/accountSnapshot\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ACCOUNT_SNAPSHOT = \"/sapi/v1/accountSnapshot\"", "syntax_pass": true}, {"attribute_expression": "private final String DISABLE_FAST_WITHDRAW = \"/sapi/v1/account/disableFastWithdrawSwitch\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "DISABLE_FAST_WITHDRAW = \"/sapi/v1/account/disableFastWithdrawSwitch\"", "syntax_pass": true}, {"attribute_expression": "private final String ENABLE_FAST_WITHDRAW = \"/sapi/v1/account/enableFastWithdrawSwitch\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ENABLE_FAST_WITHDRAW = \"/sapi/v1/account/enableFastWithdrawSwitch\"", "syntax_pass": true}, {"attribute_expression": "private final String WITHDRAW = \"/sapi/v1/capital/withdraw/apply\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "WITHDRAW = \"/sapi/v1/capital/withdraw/apply\"", "syntax_pass": true}, {"attribute_expression": "private final String DEPOSIT_HISTORY = \"/sapi/v1/capital/deposit/hisrec\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "DEPOSIT_HISTORY = \"/sapi/v1/capital/deposit/hisrec\"", "syntax_pass": true}, {"attribute_expression": "private final String WITHDRAW_HISTORY = \"/sapi/v1/capital/withdraw/history\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "WITHDRAW_HISTORY = \"/sapi/v1/capital/withdraw/history\"", "syntax_pass": true}, {"attribute_expression": "private final String DEPOSIT_ADDRESS = \"/sapi/v1/capital/deposit/address\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "DEPOSIT_ADDRESS = \"/sapi/v1/capital/deposit/address\"", "syntax_pass": true}, {"attribute_expression": "private final String DEPOSIT_ADDRESSES = \"/sapi/v1/capital/deposit/address/list\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "DEPOSIT_ADDRESSES = \"/sapi/v1/capital/deposit/address/list\"", "syntax_pass": true}, {"attribute_expression": "private final String ACCOUNT_STATUS = \"/sapi/v1/account/status\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ACCOUNT_STATUS = \"/sapi/v1/account/status\"", "syntax_pass": true}, {"attribute_expression": "private final String API_TRADE_STATUS = \"/sapi/v1/account/apiTradingStatus\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "API_TRADE_STATUS = \"/sapi/v1/account/apiTradingStatus\"", "syntax_pass": true}, {"attribute_expression": "private final String DUST_LOG = \"/sapi/v1/asset/dribblet\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "DUST_LOG = \"/sapi/v1/asset/dribblet\"", "syntax_pass": true}, {"attribute_expression": "private final String BNB_CONVERTIBLE_ASSETS = \"/sapi/v1/asset/dust-btc\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BNB_CONVERTIBLE_ASSETS = \"/sapi/v1/asset/dust-btc\"", "syntax_pass": true}, {"attribute_expression": "private final String DUST_TRANSFER = \"/sapi/v1/asset/dust\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "DUST_TRANSFER = \"/sapi/v1/asset/dust\"", "syntax_pass": true}, {"attribute_expression": "private final String ASSET_DIVIDEND = \"/sapi/v1/asset/assetDividend\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ASSET_DIVIDEND = \"/sapi/v1/asset/assetDividend\"", "syntax_pass": true}, {"attribute_expression": "private final String ASSET_DETAIL = \"/sapi/v1/asset/assetDetail\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ASSET_DETAIL = \"/sapi/v1/asset/assetDetail\"", "syntax_pass": true}, {"attribute_expression": "private final String TRADE_FEE = \"/sapi/v1/asset/tradeFee\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TRADE_FEE = \"/sapi/v1/asset/tradeFee\"", "syntax_pass": true}, {"attribute_expression": "private final String UNIVERSAL_TRANSFER = \"/sapi/v1/asset/transfer\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "UNIVERSAL_TRANSFER = \"/sapi/v1/asset/transfer\"", "syntax_pass": true}, {"attribute_expression": "private final String FUNDING_WALLET = \"/sapi/v1/asset/get-funding-asset\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FUNDING_WALLET = \"/sapi/v1/asset/get-funding-asset\"", "syntax_pass": true}, {"attribute_expression": "private final String API_PERMISSION = \"/sapi/v1/account/apiRestrictions\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "API_PERMISSION = \"/sapi/v1/account/apiRestrictions\"", "syntax_pass": true}, {"attribute_expression": "private final String USER_ASSET = \"/sapi/v3/asset/getUserAsset\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "USER_ASSET = \"/sapi/v3/asset/getUserAsset\"", "syntax_pass": true}, {"attribute_expression": "private final String BUSD_CONVERT = \"/sapi/v1/asset/convert-transfer\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BUSD_CONVERT = \"/sapi/v1/asset/convert-transfer\"", "syntax_pass": true}, {"attribute_expression": "private final String BUSD_CONVERT_HISTORY = \"/sapi/v1/asset/convert-transfer/queryByPage\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BUSD_CONVERT_HISTORY = \"/sapi/v1/asset/convert-transfer/queryByPage\"", "syntax_pass": true}, {"attribute_expression": "private final String CLOUD_MINING_HISTORY = \"/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "CLOUD_MINING_HISTORY = \"/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\"", "syntax_pass": true}, {"attribute_expression": "private final String BUSD_AUTO_CONVERT = \"/sapi/v1/capital/contract/convertible-coins\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BUSD_AUTO_CONVERT = \"/sapi/v1/capital/contract/convertible-coins\"", "syntax_pass": true}, {"attribute_expression": "private final String APPLY_ONE_CLICK_ARRIVAL_DEPOSIT = \"/sapi/v1/capital/deposit/credit-apply\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "APPLY_ONE_CLICK_ARRIVAL_DEPOSIT = \"/sapi/v1/capital/deposit/credit-apply\"", "syntax_pass": true}, {"attribute_expression": "private final String WALLET_BALANCE = \"/sapi/v1/asset/wallet/balance\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "WALLET_BALANCE = \"/sapi/v1/asset/wallet/balance\"", "syntax_pass": true}, {"attribute_expression": "private final String QUERY_USER_DELEGATION_HISTORY = \"/sapi/v1/asset/custody/transfer-history\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "QUERY_USER_DELEGATION_HISTORY = \"/sapi/v1/asset/custody/transfer-history\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert", "name": "Convert", "file_path": "src/main/java/com/binance/connector/client/impl/spot/Convert.java", "superclasses": "", "methods": ["[]Convert(String,String,String,boolean,ProxyAuth)", "[]Convert(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]tradeFlow(Map<String, Object>)", "[String]exchangeInfo(Map<String, Object>)", "[String]assetQuantityPrecision(Map<String, Object>)", "[String]quoteInquiry(Map<String, Object>)", "[String]acceptQuote(Map<String, Object>)", "[String]orderStatus(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[]Convert(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[]Convert(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[String]tradeFlow(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[String]exchangeInfo(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[String]assetQuantityPrecision(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[String]quoteInquiry(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[String]acceptQuote(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Convert.java.Convert.[String]orderStatus(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Convert Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#convert-endpoints\">Convert Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class Convert {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public Convert(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public Convert(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String TRADE_FLOW = \"/sapi/v1/convert/tradeFlow\";\n    /**\n     * GET /sapi/v1/convert/tradeFlow\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- mandatory/long <br>\n     * endTime -- mandatory/long <br>\n     * limit -- optional/int -- Default 100, Max 1000 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-convert-trade-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-convert-trade-history-user_data</a>\n     */\n    public String tradeFlow(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"startTime\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"endTime\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, TRADE_FLOW, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String EXCHANGE_INFO = \"/sapi/v1/convert/exchangeInfo\";\n    /**\n     * GET /sapi/v1/convert/exchangeInfo\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * fromAsset -- optional/string <br>\n     * toAsset -- optional/string <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#list-all-convert-pairs\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#list-all-convert-pairs</a>\n     */\n    public String exchangeInfo(Map<String, Object> parameters) {\n        return requestHandler.sendPublicRequest(baseUrl, EXCHANGE_INFO, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ASSET_QUANTITY_PRECISION = \"/sapi/v1/convert/assetInfo\";\n    /**\n     * GET /sapi/v1/convert/assetInfo\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-order-quantity-precision-per-asset-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-order-quantity-precision-per-asset-user_data</a>\n     */\n    public String assetQuantityPrecision(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ASSET_QUANTITY_PRECISION, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String QUOTE_INQUIRY = \"/sapi/v1/convert/getQuote\";\n    /**\n     * POST /sapi/v1/convert/getQuote\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * fromAsset -- mandatory/string <br>\n     * toAsset -- mandatory/string <br>\n     * fromAmount -- optional/double -- Send either fromAmount or toAmount<br>\n     * toAmount -- optional/double -- Send either fromAmount or toAmount<br>\n     * walletType -- optional/string -- SPOT or FUNDING. Default is SPOT <br>\n     * validTime -- optional/string -- 10s, 30s, 1m, 2m, default 10s <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#send-quote-request-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#send-quote-request-user_data</a>\n     */\n    public String quoteInquiry(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"fromAsset\", String.class);\n        ParameterChecker.checkParameter(parameters, \"toAsset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, QUOTE_INQUIRY, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String ACCEPT_QUOTE = \"/sapi/v1/convert/acceptQuote\";\n    /**\n     * POST /sapi/v1/convert/acceptQuote\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * quoteId -- mandatory/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#accept-quote-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#accept-quote-trade</a>\n     */\n    public String acceptQuote(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"quoteId\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ACCEPT_QUOTE, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String ORDER_STATUS = \"/sapi/v1/convert/orderStatus\";\n    /**\n     * GET /sapi/v1/convert/orderStatus\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * quoteId -- optional/string <br>\n     * quoteId -- optional/string <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#order-status-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#order-status-user_data</a>\n     */\n    public String orderStatus(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ORDER_STATUS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String TRADE_FLOW = \"/sapi/v1/convert/tradeFlow\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TRADE_FLOW = \"/sapi/v1/convert/tradeFlow\"", "syntax_pass": true}, {"attribute_expression": "private final String EXCHANGE_INFO = \"/sapi/v1/convert/exchangeInfo\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "EXCHANGE_INFO = \"/sapi/v1/convert/exchangeInfo\"", "syntax_pass": true}, {"attribute_expression": "private final String ASSET_QUANTITY_PRECISION = \"/sapi/v1/convert/assetInfo\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ASSET_QUANTITY_PRECISION = \"/sapi/v1/convert/assetInfo\"", "syntax_pass": true}, {"attribute_expression": "private final String QUOTE_INQUIRY = \"/sapi/v1/convert/getQuote\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "QUOTE_INQUIRY = \"/sapi/v1/convert/getQuote\"", "syntax_pass": true}, {"attribute_expression": "private final String ACCEPT_QUOTE = \"/sapi/v1/convert/acceptQuote\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ACCEPT_QUOTE = \"/sapi/v1/convert/acceptQuote\"", "syntax_pass": true}, {"attribute_expression": "private final String ORDER_STATUS = \"/sapi/v1/convert/orderStatus\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ORDER_STATUS = \"/sapi/v1/convert/orderStatus\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest", "name": "AutoInvest", "file_path": "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java", "superclasses": "", "methods": ["[]AutoInvest(String,String,String,boolean,ProxyAuth)", "[]AutoInvest(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]targetAssetList(Map<String, Object>)", "[String]targetAssetRoiList(Map<String, Object>)", "[String]allSourceAndTargetAssets(Map<String, Object>)", "[String]sourceAssetList(Map<String, Object>)", "[String]changePlanStatus(Map<String, Object>)", "[String]plansList(Map<String, Object>)", "[String]holdingPlan(Map<String, Object>)", "[String]planSubsHistory(Map<String, Object>)", "[String]indexInfo(Map<String, Object>)", "[String]userIndexPlans(Map<String, Object>)", "[String]submitOneTimeTransaction(Map<String, Object>)", "[String]oneTimeTransactionStatus(Map<String, Object>)", "[String]redeemIndexPlan(Map<String, Object>)", "[String]indexPlanRedeemHistory(Map<String, Object>)", "[String]indexPlanRebalanceInfo(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[]AutoInvest(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[]AutoInvest(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]targetAssetList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]targetAssetRoiList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]allSourceAndTargetAssets(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]sourceAssetList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]changePlanStatus(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]plansList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]holdingPlan(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]planSubsHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]indexInfo(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]userIndexPlans(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]submitOneTimeTransaction(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]oneTimeTransactionStatus(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]redeemIndexPlan(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]indexPlanRedeemHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/AutoInvest.java.AutoInvest.[String]indexPlanRebalanceInfo(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Auto-Invest Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#auto-invest-endpoints\">Auto-Invest Endpoints</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class AutoInvest {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public AutoInvest(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public AutoInvest(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String TARGET_ASSET_LIST = \"/sapi/v1/lending/auto-invest/target-asset/list\";\n    /**\n     * GET /sapi/v1/lending/auto-invest/target-asset/list\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * targetAsset -- optional/string <br>\n     * size -- optional/long -- Default:8 Max:100 <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-target-asset-list-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-target-asset-list-user_data</a>\n     */\n    public String targetAssetList(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, TARGET_ASSET_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String TARGET_ASSET_ROI_LIST = \"/sapi/v1/lending/auto-invest/target-asset/roi/list\";\n    /**\n     * ROI return list for target asset\n     * \n     * <br><br>\n     * GET /sapi/v1/lending/auto-invest/target-asset/roi/list\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * targetAsset -- mandatory/string <br>\n     * hisRoiType -- mandatory/enum -- FIVE_YEAR,THREE_YEAR,ONE_YEAR,SIX_MONTH,THREE_MONTH,SEVEN_DAY <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-target-asset-roi-data-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-target-asset-roi-data-user_data</a>\n     */\n    public String targetAssetRoiList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"targetAsset\", String.class);\n        ParameterChecker.checkParameter(parameters, \"hisRoiType\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, TARGET_ASSET_ROI_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ALL_SOURCE_AND_TARGET_ASSETS = \"/sapi/v1/lending/auto-invest/all/asset\";\n    /**\n     * Query all source assets and target assets\n     * \n     * <br><br>\n     * GET /sapi/v1/lending/auto-invest/all/asset\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-all-source-asset-and-target-asset-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-all-source-asset-and-target-asset-user_data</a>\n     */\n    public String allSourceAndTargetAssets(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ALL_SOURCE_AND_TARGET_ASSETS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SOURCE_ASSET_LIST = \"/sapi/v1/lending/auto-invest/source-asset/list\";\n    /**\n     * Query Source Asset to be used for investment\n     * \n     * <br><br>\n     * GET /sapi/v1/lending/auto-invest/source-asset/list\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * targetAsset -- optional/string -- Example: BTC,ETH,BNB <br>\n     * indexId -- optional/long <br>\n     * usageType -- mandatory/string -- \"RECURRING\", \"ONE_TIME\" <br>\n     * flexibleAllowedToUse -- optional/boolean <br>\n     * sourceType -- optional/enum -- MAIN_SITE for Binance user,TR for Binance Turkey user <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-source-asset-list-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-source-asset-list-user_data</a>\n     */\n    public String sourceAssetList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"usageType\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, SOURCE_ASSET_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String CHANGE_PLAN_STATUS = \"/sapi/v1/lending/auto-invest/plan/edit-status\";\n    /**\n     * Change Plan Status\n     * <br><br>\n     * POST /sapi/v1/lending/auto-invest/plan/edit-status\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * planId -- mandatory/long <br>\n     * status -- mandatory/enum -- \"ONGOING\",\"PAUSED\",\"REMOVED\"<br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#change-plan-status-trade\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#change-plan-status-trade</a>\n     */\n    public String changePlanStatus(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"planId\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"status\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, CHANGE_PLAN_STATUS, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String PLANS = \"/sapi/v1/lending/auto-invest/plan/list\";\n    /**\n     * Query plan lists\n     * <br><br>\n     * GET /sapi/v1/lending/auto-invest/plan/list\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * planType -- mandatory/string <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-list-of-plans-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-list-of-plans-user_data</a>\n     */\n    public String plansList(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"planType\", String.class);\n        return requestHandler.sendPublicRequest(baseUrl, PLANS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String HOLDING_PLAN = \"/sapi/v1/lending/auto-invest/plan/id\";\n    /**\n     * Query holding details of the plan\n     * \n     * <br><br>\n     * GET /sapi/v1/lending/auto-invest/plan/id\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * planId -- optional/long <br>\n     * requestId -- optional/string <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-holding-details-of-the-plan-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-holding-details-of-the-plan-user_data</a>\n     */\n    public String holdingPlan(Map<String, Object> parameters) {\n        return requestHandler.sendPublicRequest(baseUrl, HOLDING_PLAN, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String PLAN_SUBSCRIPTIONS_HISTORY = \"/sapi/v1/lending/auto-invest/history/list\";\n    /**\n     * Query the transaction history of plan subscriptions\n     * \n     * <br><br>\n     * GET /sapi/v1/lending/auto-invest/history/list\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * planId -- optional/long <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * targetAsset -- optional/string <br>\n     * planType -- optional/enum <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-subscription-transaction-history-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-subscription-transaction-history-user_data</a>\n     */\n    public String planSubsHistory(Map<String, Object> parameters) {\n        return requestHandler.sendPublicRequest(baseUrl, PLAN_SUBSCRIPTIONS_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String INDEX_INFO = \"/sapi/v1/lending/auto-invest/index/info\";\n    /**\n     * Query index details\n     * \n     * <br><br>\n     * GET /sapi/v1/lending/auto-invest/index/info\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * indexId -- mandatory/long <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-index-details-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-index-details-user_data</a>\n     */\n    public String indexInfo(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"indexId\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, INDEX_INFO, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String INDEX_USER_SUMMARY = \"/sapi/v1/lending/auto-invest/index/user-summary\";\n    /**\n     * Details on users Index-Linked plan position details\n     * \n     * <br><br>\n     * GET /sapi/v1/lending/auto-invest/index/user-summary\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * indexId -- mandatory/long <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-index-linked-plan-position-details-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-index-linked-plan-position-details-user_data</a>\n     */\n    public String userIndexPlans(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"indexId\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, INDEX_USER_SUMMARY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ONE_TIME_TRANSACTION = \"/sapi/v1/lending/auto-invest/one-off\";\n    /**\n     * One time transaction\n     * \n     * <br><br>\n     * POST /sapi/v1/lending/auto-invest/one-off\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * sourceType -- mandatory/string -- \"MAIN_SITE\" for Binance,\"TR\" for Binance Turkey<br>\n     * requestId -- optional/string -- If not null, must follow sourceType + unique string, e.g: TR12354859<br>\n     * subscriptionAmount -- mandatory/decimal <br>\n     * sourceAsset -- mandatory/string <br>\n     * flexibleAllowedToUse -- optional/boolean -- true/false\uff1btrue: using flexible wallet<br>\n     * planId -- optional/long -- portfolio plan's Id<br>\n     * indexId -- optional/long <br>\n     * details -- optional/arraylist --  The \"PortfolioDetail\" class contains 2 fields: \"targetAsset\" and \"percentage\". <br>\n     *                                   The sum of all the \"PortfolioDetail\" percentages in the Array should be 100. <br>\n     *                                   \"details\" example:<br>\n     *                                      details[0].targetAsset=BTC, details[0].percentage=60 <br>\n     *                                      details[1].targetAsset=ETH, details[1].percentage=40 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#one-time-transaction-trade\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#one-time-transaction-trade</a>\n     */\n    public String submitOneTimeTransaction(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"sourceType\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"subscriptionAmount\");\n        ParameterChecker.checkParameter(parameters, \"sourceAsset\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ONE_TIME_TRANSACTION, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String ONE_TIME_TRANSACTION_STATUS = \"/sapi/v1/lending/auto-invest/one-off/status\";\n    /**\n     * Transaction status for one-time transaction\n     * \n     * <br><br>\n     * GET /sapi/v1/lending/auto-invest/one-off/status\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * transactionId -- mandatory/long -- portfolio plan's Id<br>\n     * requestId -- optional/string -- transactionId and requestId cannot be empty at the same time <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-one-time-transaction-status-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#query-one-time-transaction-status-user_data</a>\n     */\n    public String oneTimeTransactionStatus(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"transactionId\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, ONE_TIME_TRANSACTION_STATUS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String REDEEM_INDEX_PLAN = \"/sapi/v1/lending/auto-invest/redeem\";\n    /**\n     * To redeem index-Linked plan holdings\n     * \n     * <br><br>\n     * POST /sapi/v1/lending/auto-invest/redeem\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * indexId -- mandatory/long -- portfolio plan's Id <br>\n     * requestId -- optional/string -- transactionId and requestId cannot be empty at the same time <br>\n     * redemptionPercentage -- mandatory/long -- user redeem percentage,10/20/100. <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#index-linked-plan-redemption-trade\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#index-linked-plan-redemption-trade</a>\n     */\n    public String redeemIndexPlan(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"indexId\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"redemptionPercentage\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, REDEEM_INDEX_PLAN, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String INDEX_LINKED_PLAN_REDEMPTION_HISTORY = \"/sapi/v1/lending/auto-invest/redeem/history\";\n    /**\n     * Get the history of Index Linked Plan Redemption transactions\n     * \n     * Max 30 day difference between startTime and endTime\n     * If no startTime and endTime, default to show past 30 day records\n     * \n     * <br><br>\n     * GET /sapi/v1/lending/auto-invest/redeem/history\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * requestId -- mandatory/long <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * asset -- optional/string <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#index-linked-plan-redemption-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#index-linked-plan-redemption-user_data</a>\n     */\n    public String indexPlanRedeemHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"requestId\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, INDEX_LINKED_PLAN_REDEMPTION_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String INDEX_LINKED_PLAN_REBALANCE_DETAILS = \"/sapi/v1/lending/auto-invest/rebalance/history\";\n    /**\n     * GET /sapi/v1/lending/auto-invest/rebalance/history\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#index-linked-plan-rebalance-details-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#index-linked-plan-rebalance-details-user_data</a>\n     */\n    public String indexPlanRebalanceInfo(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, INDEX_LINKED_PLAN_REBALANCE_DETAILS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String TARGET_ASSET_LIST = \"/sapi/v1/lending/auto-invest/target-asset/list\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TARGET_ASSET_LIST = \"/sapi/v1/lending/auto-invest/target-asset/list\"", "syntax_pass": true}, {"attribute_expression": "private final String TARGET_ASSET_ROI_LIST = \"/sapi/v1/lending/auto-invest/target-asset/roi/list\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "TARGET_ASSET_ROI_LIST = \"/sapi/v1/lending/auto-invest/target-asset/roi/list\"", "syntax_pass": true}, {"attribute_expression": "private final String ALL_SOURCE_AND_TARGET_ASSETS = \"/sapi/v1/lending/auto-invest/all/asset\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ALL_SOURCE_AND_TARGET_ASSETS = \"/sapi/v1/lending/auto-invest/all/asset\"", "syntax_pass": true}, {"attribute_expression": "private final String SOURCE_ASSET_LIST = \"/sapi/v1/lending/auto-invest/source-asset/list\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SOURCE_ASSET_LIST = \"/sapi/v1/lending/auto-invest/source-asset/list\"", "syntax_pass": true}, {"attribute_expression": "private final String CHANGE_PLAN_STATUS = \"/sapi/v1/lending/auto-invest/plan/edit-status\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "CHANGE_PLAN_STATUS = \"/sapi/v1/lending/auto-invest/plan/edit-status\"", "syntax_pass": true}, {"attribute_expression": "private final String PLANS = \"/sapi/v1/lending/auto-invest/plan/list\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "PLANS = \"/sapi/v1/lending/auto-invest/plan/list\"", "syntax_pass": true}, {"attribute_expression": "private final String HOLDING_PLAN = \"/sapi/v1/lending/auto-invest/plan/id\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "HOLDING_PLAN = \"/sapi/v1/lending/auto-invest/plan/id\"", "syntax_pass": true}, {"attribute_expression": "private final String PLAN_SUBSCRIPTIONS_HISTORY = \"/sapi/v1/lending/auto-invest/history/list\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "PLAN_SUBSCRIPTIONS_HISTORY = \"/sapi/v1/lending/auto-invest/history/list\"", "syntax_pass": true}, {"attribute_expression": "private final String INDEX_INFO = \"/sapi/v1/lending/auto-invest/index/info\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "INDEX_INFO = \"/sapi/v1/lending/auto-invest/index/info\"", "syntax_pass": true}, {"attribute_expression": "private final String INDEX_USER_SUMMARY = \"/sapi/v1/lending/auto-invest/index/user-summary\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "INDEX_USER_SUMMARY = \"/sapi/v1/lending/auto-invest/index/user-summary\"", "syntax_pass": true}, {"attribute_expression": "private final String ONE_TIME_TRANSACTION = \"/sapi/v1/lending/auto-invest/one-off\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ONE_TIME_TRANSACTION = \"/sapi/v1/lending/auto-invest/one-off\"", "syntax_pass": true}, {"attribute_expression": "private final String ONE_TIME_TRANSACTION_STATUS = \"/sapi/v1/lending/auto-invest/one-off/status\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ONE_TIME_TRANSACTION_STATUS = \"/sapi/v1/lending/auto-invest/one-off/status\"", "syntax_pass": true}, {"attribute_expression": "private final String REDEEM_INDEX_PLAN = \"/sapi/v1/lending/auto-invest/redeem\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "REDEEM_INDEX_PLAN = \"/sapi/v1/lending/auto-invest/redeem\"", "syntax_pass": true}, {"attribute_expression": "private final String INDEX_LINKED_PLAN_REDEMPTION_HISTORY = \"/sapi/v1/lending/auto-invest/redeem/history\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "INDEX_LINKED_PLAN_REDEMPTION_HISTORY = \"/sapi/v1/lending/auto-invest/redeem/history\"", "syntax_pass": true}, {"attribute_expression": "private final String INDEX_LINKED_PLAN_REBALANCE_DETAILS = \"/sapi/v1/lending/auto-invest/rebalance/history\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "INDEX_LINKED_PLAN_REBALANCE_DETAILS = \"/sapi/v1/lending/auto-invest/rebalance/history\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Fiat.java.Fiat", "name": "Fiat", "file_path": "src/main/java/com/binance/connector/client/impl/spot/Fiat.java", "superclasses": "", "methods": ["[]Fiat(String,String,String,boolean,ProxyAuth)", "[]Fiat(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]orders(Map<String, Object>)", "[String]payments(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/Fiat.java.Fiat.[]Fiat(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Fiat.java.Fiat.[]Fiat(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Fiat.java.Fiat.[String]orders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Fiat.java.Fiat.[String]payments(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Fiat Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#fiat-endpoints\">Fiat Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class Fiat {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public Fiat(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public Fiat(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String ORDERS = \"/sapi/v1/fiat/orders\";\n    /**\n     * GET /sapi/v1/fiat/orders\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * transactionType -- mandatory/string -- 0-deposit,1-withdraw <br>\n     * beginTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * page -- optional/int -- default 1 <br>\n     * rows -- optional/int -- default 100, max 500 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-fiat-deposit-withdraw-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-fiat-deposit-withdraw-history-user_data</a>\n     */\n    public String orders(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"transactionType\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String PAYMENTS = \"/sapi/v1/fiat/payments\";\n    /**\n     * GET /sapi/v1/fiat/payments\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * transactionType -- mandatory/string -- 0-buy,1-sell <br>\n     * beginTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * page -- optional/int -- default 1 <br>\n     * rows -- optional/int -- default 100, max 500 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-fiat-payments-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-fiat-payments-history-user_data</a>\n     */\n    public String payments(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"transactionType\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, PAYMENTS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String ORDERS = \"/sapi/v1/fiat/orders\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ORDERS = \"/sapi/v1/fiat/orders\"", "syntax_pass": true}, {"attribute_expression": "private final String PAYMENTS = \"/sapi/v1/fiat/payments\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "PAYMENTS = \"/sapi/v1/fiat/payments\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt", "name": "Blvt", "file_path": "src/main/java/com/binance/connector/client/impl/spot/Blvt.java", "superclasses": "", "methods": ["[]Blvt(String,String,String,boolean,ProxyAuth)", "[]Blvt(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]blvtInfo(Map<String, Object>)", "[String]subscribe(Map<String, Object>)", "[String]subscriptionRecord(Map<String, Object>)", "[String]redeem(Map<String, Object>)", "[String]redeemRecord(Map<String, Object>)", "[String]userLimit(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[]Blvt(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[]Blvt(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[String]blvtInfo(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[String]subscribe(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[String]subscriptionRecord(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[String]redeem(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[String]redeemRecord(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Blvt.java.Blvt.[String]userLimit(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>BLVT Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#blvt-endpoints\">BLVT Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class Blvt {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public Blvt(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public Blvt(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String BLVT_INFO = \"/sapi/v1/blvt/tokenInfo\";\n    /**\n     * GET /sapi/v1/blvt/tokenInfo\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * tokenName -- optional/string -- BTCDOWN, BTCUP <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-blvt-info-market_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-blvt-info-market_data</a>\n     */\n    public String blvtInfo(Map<String, Object> parameters) {\n        return requestHandler.sendApiRequest(baseUrl, BLVT_INFO, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SUBSCRIBE = \"/sapi/v1/blvt/subscribe\";\n    /**\n     * POST /sapi/v1/blvt/subscribe\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * tokenName -- mandatory/string -- BTCDOWN, BTCUP <br>\n     * cost -- mandatory/decimal -- spot balance <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#subscribe-blvt-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#subscribe-blvt-user_data</a>\n     */\n    public String subscribe(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"tokenName\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"cost\");\n        return requestHandler.sendSignedRequest(baseUrl, SUBSCRIBE, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String SUBSCRIPTION_RECORD = \"/sapi/v1/blvt/subscribe/record\";\n    /**\n     * GET /sapi/v1/blvt/subscribe/record\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * tokenName -- optional/string -- BTCDOWN, BTCUP <br>\n     * id -- optional/long <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int -- default 1000, max 1000 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-subscription-record-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-subscription-record-user_data</a>\n     */\n    public String subscriptionRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SUBSCRIPTION_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String REDEEM = \"/sapi/v1/blvt/redeem\";\n    /**\n     * POST /sapi/v1/blvt/redeem\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * tokenName -- mandatory/string -- BTCDOWN, BTCUP <br>\n     * amount -- mandatory/decimal -- spot balance <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#redeem-blvt-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#redeem-blvt-user_data</a>\n     */\n    public String redeem(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"tokenName\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, REDEEM, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String REDEEM_RECORD = \"/sapi/v1/blvt/redeem/record\";\n    /**\n     * GET /sapi/v1/blvt/redeem/record\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * tokenName -- optional/string -- BTCDOWN, BTCUP <br>\n     * id -- optional/long <br>\n     * startTime -- optional/long <br>\n     * endTime -- optional/long <br>\n     * limit -- optional/int -- default 1000, max 1000 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-redemption-record-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-redemption-record-user_data</a>\n     */\n    public String redeemRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, REDEEM_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String USER_LIMIT = \"/sapi/v1/blvt/userLimit\";\n    /**\n     * GET /sapi/v1/blvt/userLimit\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * tokenName -- optional/string -- BTCDOWN, BTCUP <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-blvt-user-limit-info-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-blvt-user-limit-info-user_data</a>\n     */\n    public String userLimit(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, USER_LIMIT, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String BLVT_INFO = \"/sapi/v1/blvt/tokenInfo\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BLVT_INFO = \"/sapi/v1/blvt/tokenInfo\"", "syntax_pass": true}, {"attribute_expression": "private final String SUBSCRIBE = \"/sapi/v1/blvt/subscribe\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUBSCRIBE = \"/sapi/v1/blvt/subscribe\"", "syntax_pass": true}, {"attribute_expression": "private final String SUBSCRIPTION_RECORD = \"/sapi/v1/blvt/subscribe/record\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUBSCRIPTION_RECORD = \"/sapi/v1/blvt/subscribe/record\"", "syntax_pass": true}, {"attribute_expression": "private final String REDEEM = \"/sapi/v1/blvt/redeem\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "REDEEM = \"/sapi/v1/blvt/redeem\"", "syntax_pass": true}, {"attribute_expression": "private final String REDEEM_RECORD = \"/sapi/v1/blvt/redeem/record\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "REDEEM_RECORD = \"/sapi/v1/blvt/redeem/record\"", "syntax_pass": true}, {"attribute_expression": "private final String USER_LIMIT = \"/sapi/v1/blvt/userLimit\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "USER_LIMIT = \"/sapi/v1/blvt/userLimit\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans", "name": "VIPLoans", "file_path": "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java", "superclasses": "", "methods": ["[]VIPLoans(String,String,String,boolean,ProxyAuth)", "[]VIPLoans(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]ongoingOrders(Map<String, Object>)", "[String]repay(Map<String, Object>)", "[String]repaymentHistory(Map<String, Object>)", "[String]renew(Map<String, Object>)", "[String]collateralAccount(Map<String, Object>)", "[String]borrow(Map<String, Object>)", "[String]loanableAssets(Map<String, Object>)", "[String]collateralAsset(Map<String, Object>)", "[String]orderStatus(Map<String, Object>)", "[String]borrowInterestRate(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[]VIPLoans(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[]VIPLoans(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]ongoingOrders(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]repay(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]repaymentHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]renew(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]collateralAccount(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]borrow(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]loanableAssets(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]collateralAsset(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]orderStatus(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/VIPLoans.java.VIPLoans.[String]borrowInterestRate(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>VIPLoans Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#vip-loans-endpoints\">VIP Loans Endpoints</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class VIPLoans {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public VIPLoans(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public VIPLoans(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String ONGOING_ORDERS = \"/sapi/v1/loan/vip/ongoing/orders\";\n    /**\n     * VIP loan is available for VIP users only.\n     * \n     * <br><br>\n     * GET /sapi/v1/loan/vip/ongoing/orders\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * orderId -- optional/long -- Order ID <br>\n     * collateralAccountId -- optional/long <br>\n     * loanCoin -- optional/string -- Coin loaned <br>\n     * collateralCoin -- optional/string -- Coin used as collateral <br>\n     * current -- optional/long -- Current querying page. Start from 1, Default:1, Max:1000<br>\n     * limit -- optional/long -- Default 10; max 100. <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-vip-loan-ongoing-orders-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-vip-loan-ongoing-orders-user_data</a>\n     */\n    public String ongoingOrders(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ONGOING_ORDERS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String REPAY = \"/sapi/v1/loan/vip/repay\";\n    /**\n     * VIP loan is available for VIP users only.\n     * \n     * <br><br>\n     * POST /sapi/v1/loan/vip/repay\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * orderId -- mandatory/long -- Order ID <br>\n     * amount -- mandatory/decimal <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#vip-loan-repay-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#vip-loan-repay-trade</a>\n     */\n    public String repay(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"orderId\", Long.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, REPAY, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String REPAYMENT_HISTORY = \"/sapi/v1/loan/vip/repay/history\";\n    /**\n     * VIP loan is available for VIP users only.\n     * \n     * <br><br>\n     * GET /sapi/v1/loan/vip/repay/history\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * orderId -- optional/long -- Order ID <br>\n     * loanCoin -- optional/string -- Coin loaned <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * current -- optional/long -- Current querying page. Start from 1, Default:1, Max:1000<br>\n     * limit -- optional/long -- Default 10; max 100. <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-vip-loan-repayment-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-vip-loan-repayment-history-user_data</a>\n     */\n    public String repaymentHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, REPAYMENT_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String RENEW = \"/sapi/v1/loan/vip/renew\";\n    /**\n     * VIP loan is available for VIP users only.\n     * \n     * <br><br>\n     * POST /sapi/v1/loan/vip/renew\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * orderId -- mandatory/long -- Order ID <br>\n     * loanTerm -- optional/int -- 30/60 days <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#vip-loan-renew-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#vip-loan-renew-trade</a>\n     */\n    public String renew(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"orderId\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, RENEW, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String COLLATERAL_ACCOUNT = \"/sapi/v1/loan/vip/collateral/account\";\n    /**\n     * VIP loan is available for VIP users only.\n     * \n     * <br><br>\n     * GET /sapi/v1/loan/vip/collateral/account\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * orderId -- optional/long -- Order ID <br>\n     * collateralAccountId -- optional/long <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#check-locked-value-of-vip-collateral-account-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#check-locked-value-of-vip-collateral-account-user_data</a>\n     */\n    public String collateralAccount(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, COLLATERAL_ACCOUNT, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String BORROW = \"/sapi/v1/loan/vip/borrow\";\n    /**\n     * VIP loan is available for VIP users only.\n     * \n     * <br><br>\n     * POST /sapi/v1/loan/vip/borrow\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * loanAccountId -- mandatory/long <br>\n     * loanCoin -- mandatory/string -- Coin loaned <br>\n     * loanAmount -- mandatory/decimal <br>\n     * collateralAccountId -- mandatory/string -- Multiple split by ',' <br>\n     * collateralCoin -- mandatory/string -- Multiple split by ',' <br>\n     * isFlexibleRate -- mandatory/boolean -- TRUE : flexible rate; FALSE: fixed rate. Default: TRUE.<br>\n     * loanTerm -- optional/integer -- Mandatory for fixed rate. Optional for fixed interest rate. Eg: 30/60 days <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#vip-loan-borrow-trade\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#vip-loan-borrow-trade</a>\n     */\n    public String borrow(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"loanAccountId\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"loanCoin\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"loanAmount\");\n        ParameterChecker.checkParameter(parameters, \"collateralAccountId\", String.class);\n        ParameterChecker.checkParameter(parameters, \"collateralCoin\", String.class);\n        ParameterChecker.checkParameter(parameters, \"isFlexibleRate\", Boolean.class);\n        return requestHandler.sendSignedRequest(baseUrl, BORROW, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String LOANABLE_ASSETS = \"/sapi/v1/loan/vip/loanable/data\";\n    /**\n     * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.\n     * \n     * <br><br>\n     * GET /sapi/v1/loan/vip/loanable/data\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * loanCoin -- optional/string -- Coin loaned <br>\n     * vipLevel -- optional/integer -- Defaults to user's vip level <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-loanable-assets-data-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-loanable-assets-data-user_data</a>\n     */\n    public String loanableAssets(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOANABLE_ASSETS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String COLLATERAL_ASSET_DATA = \"/sapi/v1/loan/vip/collateral/data\";\n    /**\n     * Get Collateral Asset Data\n     * \n     * <br><br>\n     * GET /sapi/v1/loan/vip/collateral/data\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * collateralCoin -- optional/string <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-collateral-asset-data-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-collateral-asset-data-user_data</a>\n     */\n    public String collateralAsset(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, COLLATERAL_ASSET_DATA, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String ORDER_STATUS = \"/sapi/v1/loan/vip/request/data\";\n    /**\n     * Get order status\n     * \n     * <br><br>\n     * GET /sapi/v1/loan/vip/request/data\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * limit -- optional/long -- Default 10; max 100. <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#query-application-status-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#query-application-status-user_data</a>\n     */\n    public String orderStatus(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, ORDER_STATUS, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String BORROW_INTEREST_RATE = \"/sapi/v1/loan/vip/request/interestRate\";\n    /**\n     * Get Borrow Interest Rate \n     * \n     * <br><br>\n     * GET /sapi/v1/loan/vip/request/interestRate\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * loanCoin -- mandatory/string -- Max 10 assets, Multiple split by \",\" <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-borrow-interest-rate-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-borrow-interest-rate-user_data</a>\n     */\n    public String borrowInterestRate(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"loanCoin\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, BORROW_INTEREST_RATE, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String ONGOING_ORDERS = \"/sapi/v1/loan/vip/ongoing/orders\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ONGOING_ORDERS = \"/sapi/v1/loan/vip/ongoing/orders\"", "syntax_pass": true}, {"attribute_expression": "private final String REPAY = \"/sapi/v1/loan/vip/repay\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "REPAY = \"/sapi/v1/loan/vip/repay\"", "syntax_pass": true}, {"attribute_expression": "private final String REPAYMENT_HISTORY = \"/sapi/v1/loan/vip/repay/history\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "REPAYMENT_HISTORY = \"/sapi/v1/loan/vip/repay/history\"", "syntax_pass": true}, {"attribute_expression": "private final String RENEW = \"/sapi/v1/loan/vip/renew\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "RENEW = \"/sapi/v1/loan/vip/renew\"", "syntax_pass": true}, {"attribute_expression": "private final String COLLATERAL_ACCOUNT = \"/sapi/v1/loan/vip/collateral/account\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "COLLATERAL_ACCOUNT = \"/sapi/v1/loan/vip/collateral/account\"", "syntax_pass": true}, {"attribute_expression": "private final String BORROW = \"/sapi/v1/loan/vip/borrow\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BORROW = \"/sapi/v1/loan/vip/borrow\"", "syntax_pass": true}, {"attribute_expression": "private final String LOANABLE_ASSETS = \"/sapi/v1/loan/vip/loanable/data\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOANABLE_ASSETS = \"/sapi/v1/loan/vip/loanable/data\"", "syntax_pass": true}, {"attribute_expression": "private final String COLLATERAL_ASSET_DATA = \"/sapi/v1/loan/vip/collateral/data\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "COLLATERAL_ASSET_DATA = \"/sapi/v1/loan/vip/collateral/data\"", "syntax_pass": true}, {"attribute_expression": "private final String ORDER_STATUS = \"/sapi/v1/loan/vip/request/data\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "ORDER_STATUS = \"/sapi/v1/loan/vip/request/data\"", "syntax_pass": true}, {"attribute_expression": "private final String BORROW_INTEREST_RATE = \"/sapi/v1/loan/vip/request/interestRate\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "BORROW_INTEREST_RATE = \"/sapi/v1/loan/vip/request/interestRate\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures", "name": "Futures", "file_path": "src/main/java/com/binance/connector/client/impl/spot/Futures.java", "superclasses": "", "methods": ["[]Futures(String,String,String,boolean,ProxyAuth)", "[]Futures(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]futuresTransfer(Map<String, Object>)", "[String]futuresTransferHistory(Map<String, Object>)", "[String]futuresOrderBookHistory(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures.[]Futures(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures.[]Futures(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures.[String]futuresTransfer(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures.[String]futuresTransferHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/Futures.java.Futures.[String]futuresOrderBookHistory(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Futures Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#futures-endpoints\">Futures Endpoint</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class Futures {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public Futures(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public Futures(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String FUTURES_TRANSFER = \"/sapi/v1/futures/transfer\";\n    /**\n     * Execute transfer between spot account and futures account.\n     * <br><br>\n     * POST /sapi/v1/futures/transfer\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- mandatory/string -- The asset being transferred, e.g. USDT <br>\n     * amount -- mandatory/decimal -- The amount to be transferred <br>\n     * type -- mandatory/int -- 1: transfer from spot account to USDT-M futures account.\n     * 2: transfer from USDT-M futures account to spot account.\n     * 3: transfer from spot account to COIN-M futures account.\n     * 4: transfer from COIN-M futures account to spot account. <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#new-future-account-transfer-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#new-future-account-transfer-user_data</a>\n     */\n    public String futuresTransfer(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        ParameterChecker.checkParameter(parameters, \"type\", Integer.class);\n        return requestHandler.sendSignedRequest(baseUrl, FUTURES_TRANSFER, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    /**\n     * GET /sapi/v1/futures/transfer\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string -- The asset being transferred, e.g. USDT <br>\n     * startTime -- mandatory/long <br>\n     * endTime -- optional/long <br>\n     * current -- optional/long -- Currently querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-future-account-transaction-history-list-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-future-account-transaction-history-list-user_data</a>\n     */\n    public String futuresTransferHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"asset\", String.class);\n        ParameterChecker.checkParameter(parameters, \"startTime\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, FUTURES_TRANSFER, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String HISTORICAL_DATA = \"/sapi/v1/futures/histDataLink\";\n    /**\n     * GET /sapi/v1/futures/histDataLink\n     * \n     * - The span between startTime and endTime can't be more than 7 days\n     * - The downloand link will be valid for 1 day\n     * - Only VIP user can query this endpoint\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * symbol -- mandatory/string -- symbol name, e.g. BTCUSDT or BTCUSD_PERP <br>\n     * dataType -- mandatory/enum -- \"T_DEPTH\" for ticklevel orderbook data, \"S_DEPTH\" for orderbook snapshot data <br>\n     * startTime -- mandatory/long <br>\n     * endTime -- mandatory/long <br>\n     * recvWindow -- optional/long <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-future-ticklevel-orderbook-historical-data-download-link-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-future-ticklevel-orderbook-historical-data-download-link-user_data</a>\n     */\n    public String futuresOrderBookHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"symbol\", String.class);\n        ParameterChecker.checkParameter(parameters, \"dataType\", String.class);\n        ParameterChecker.checkParameter(parameters, \"startTime\", Long.class);\n        ParameterChecker.checkParameter(parameters, \"endTime\", Long.class);\n        return requestHandler.sendSignedRequest(baseUrl, HISTORICAL_DATA, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String FUTURES_TRANSFER = \"/sapi/v1/futures/transfer\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FUTURES_TRANSFER = \"/sapi/v1/futures/transfer\"", "syntax_pass": true}, {"attribute_expression": "private final String HISTORICAL_DATA = \"/sapi/v1/futures/histDataLink\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "HISTORICAL_DATA = \"/sapi/v1/futures/histDataLink\"", "syntax_pass": true}]}, {"uris": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn", "name": "SimpleEarn", "file_path": "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java", "superclasses": "", "methods": ["[]SimpleEarn(String,String,String,boolean,ProxyAuth)", "[]SimpleEarn(String,String,SignatureGenerator,boolean,ProxyAuth)", "[String]flexibleProductList(Map<String, Object>)", "[String]lockedProductList(Map<String, Object>)", "[String]subscribeFlexibleProduct(Map<String, Object>)", "[String]subscribeLockedProduct(Map<String, Object>)", "[String]redeemFlexibleProduct(Map<String, Object>)", "[String]redeemLockedProduct(Map<String, Object>)", "[String]flexibleProductPosition(Map<String, Object>)", "[String]lockedProductPosition(Map<String, Object>)", "[String]simpleAccount(Map<String, Object>)", "[String]flexibleSubscriptionRecord(Map<String, Object>)", "[String]lockedSubscriptionRecord(Map<String, Object>)", "[String]flexibleRedemptionRecord(Map<String, Object>)", "[String]lockedRedemptionRecord(Map<String, Object>)", "[String]flexibleRewardsHistory(Map<String, Object>)", "[String]lockedRewardsHistory(Map<String, Object>)", "[String]setFlexibleAutoSubscribe(Map<String, Object>)", "[String]setLockedAutoSubscribe(Map<String, Object>)", "[String]flexiblePersonalLeftQuota(Map<String, Object>)", "[String]lockedPersonalLeftQuota(Map<String, Object>)", "[String]flexibleSubscriptionPreview(Map<String, Object>)", "[String]lockedSubscriptionPreview(Map<String, Object>)", "[String]rateHistory(Map<String, Object>)", "[String]collateralRecord(Map<String, Object>)"], "method_uris": ["src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[]SimpleEarn(String,String,String,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[]SimpleEarn(String,String,SignatureGenerator,boolean,ProxyAuth)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]flexibleProductList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]lockedProductList(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]subscribeFlexibleProduct(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]subscribeLockedProduct(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]redeemFlexibleProduct(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]redeemLockedProduct(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]flexibleProductPosition(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]lockedProductPosition(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]simpleAccount(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]flexibleSubscriptionRecord(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]lockedSubscriptionRecord(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]flexibleRedemptionRecord(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]lockedRedemptionRecord(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]flexibleRewardsHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]lockedRewardsHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]setFlexibleAutoSubscribe(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]setLockedAutoSubscribe(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]flexiblePersonalLeftQuota(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]lockedPersonalLeftQuota(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]flexibleSubscriptionPreview(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]lockedSubscriptionPreview(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]rateHistory(Map<String, Object>)", "src/main/java/com/binance/connector/client/impl/spot/SimpleEarn.java.SimpleEarn.[String]collateralRecord(Map<String, Object>)"], "overrides": null, "attributes": [], "class_docstring": "\n<h2>Simple Earn Endpoints</h2>\nAll endpoints under the\n<a href=\"https://binance-docs.github.io/apidocs/spot/en/#simple-earn-endpoints\">Simple Earn Endpoints</a>\nsection of the API documentation will be implemented in this class.\n<br>\nResponse will be returned in <i>String format</i>.\n", "original_string": "public class SimpleEarn {\n    private final String baseUrl;\n    private final RequestHandler requestHandler;\n    private final boolean showLimitUsage;\n\n    public SimpleEarn(String baseUrl, String apiKey, String secretKey, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, new HmacSignatureGenerator(secretKey), proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    public SimpleEarn(String baseUrl, String apiKey, SignatureGenerator signatureGenerator, boolean showLimitUsage, ProxyAuth proxy) {\n        this.baseUrl = baseUrl;\n        this.requestHandler = new RequestHandler(apiKey, signatureGenerator, proxy);\n        this.showLimitUsage = showLimitUsage;\n    }\n\n    private final String FLEXIBLE_PRODUCT_LIST = \"/sapi/v1/simple-earn/flexible/list\";\n    /**\n     * Get available Simple Earn flexible product list\n     * <br><br>\n     * GET /sapi/v1/simple-earn/flexible/list\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-simple-earn-flexible-product-list-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-simple-earn-flexible-product-list-user_data</a>\n     */\n    public String flexibleProductList(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_PRODUCT_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String LOCKED_PRODUCT_LIST = \"/sapi/v1/simple-earn/locked/list\";\n    /**\n     * GET /sapi/v1/simple-earn/locked/list\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-simple-earn-locked-product-list-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-simple-earn-locked-product-list-user_data</a>\n     */\n    public String lockedProductList(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOCKED_PRODUCT_LIST, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SUBSCRIBE_FLEXIBLE_PRODUCT = \"/sapi/v1/simple-earn/flexible/subscribe\";\n    /**\n     * POST /sapi/v1/simple-earn/flexible/subscribe\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * productId -- mandatory/string <br>\n     * amount -- mandatory/decimal <br>\n     * autoSubscribe -- optional/boolean -- true or false, default true. <br>\n     * sourceAccount -- optional/enum -- SPOT,FUND,ALL, default SPOT <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#subscribe-flexible-product-trade\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#subscribe-flexible-product-trade</a>\n     */\n    public String subscribeFlexibleProduct(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"productId\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, SUBSCRIBE_FLEXIBLE_PRODUCT, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String SUBSCRIBE_LOCKED_PRODUCT = \"/sapi/v1/simple-earn/locked/subscribe\";\n    /**\n     * POST /sapi/v1/simple-earn/locked/subscribe\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * projectId -- mandatory/string <br>\n     * amount -- mandatory/decimal <br>\n     * autoSubscribe -- optional/boolean -- true or false, default true. <br>\n     * sourceAccount -- optional/enum -- SPOT,FUND,ALL, default SPOT <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#subscribe-locked-product-trade\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#subscribe-locked-product-trade</a>\n     */\n    public String subscribeLockedProduct(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"projectId\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, SUBSCRIBE_LOCKED_PRODUCT, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String REDEEM_FLEXIBLE_PRODUCT = \"/sapi/v1/simple-earn/flexible/redeem\";\n    /**\n     * POST /sapi/v1/simple-earn/flexible/redeem\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * productId -- mandatory/string <br>\n     * redeemAll -- optional/boolean -- true or false, default to false <br>\n     * amount -- optional/decimal -- if redeemAll is false, amount is mandatory <br>\n     * destAccount -- optional/enum -- SPOT,FUND,ALL, default SPOT <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#redeem-flexible-product-trade\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#redeem-flexible-product-trade</a>\n     */\n    public String redeemFlexibleProduct(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"productId\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, REDEEM_FLEXIBLE_PRODUCT, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String REDEEM_LOCKED_PRODUCT = \"/sapi/v1/simple-earn/locked/redeem\";\n    /**\n     * POST /sapi/v1/simple-earn/locked/redeem\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * positionId -- mandatory/string -- 1234 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#redeem-locked-product-trade\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#redeem-locked-product-trade</a>\n     */\n    public String redeemLockedProduct(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"positionId\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, REDEEM_LOCKED_PRODUCT, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_PRODUCT_POSITION = \"/sapi/v1/simple-earn/flexible/position\";\n    /**\n     * GET /sapi/v1/simple-earn/flexible/position\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string <br>\n     * productId -- optional/string <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-product-position-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-flexible-product-position-user_data</a>\n     */\n    public String flexibleProductPosition(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_PRODUCT_POSITION, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String LOCKED_PRODUCT_POSITION = \"/sapi/v1/simple-earn/locked/position\";\n    /**\n     * GET /sapi/v1/simple-earn/locked/position\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * asset -- optional/string <br>\n     * positionId -- optional/string <br>\n     * projectId -- optional/string <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-locked-product-position-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-locked-product-position-user_data</a>\n     */\n    public String lockedProductPosition(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOCKED_PRODUCT_POSITION, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SIMPLE_ACCOUNT = \"/sapi/v1/simple-earn/account\";\n    /**\n     * GET /sapi/v1/simple-earn/account\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#simple-account-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#simple-account-user_data</a>\n     */\n    public String simpleAccount(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, SIMPLE_ACCOUNT, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_SUBSCRIPTION_RECORD = \"/sapi/v1/simple-earn/flexible/history/subscriptionRecord\";\n    /**\n     * GET /sapi/v1/simple-earn/flexible/history/subscriptionRecord\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * productId -- optional/string <br>\n     * purchaseId -- optional/string <br>\n     * asset -- optional/string <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-subscription-record-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-flexible-subscription-record-user_data</a>\n     */\n    public String flexibleSubscriptionRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_SUBSCRIPTION_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String LOCKED_SUBSCRIPTION_RECORD = \"/sapi/v1/simple-earn/locked/history/subscriptionRecord\";\n    /**\n     * GET /sapi/v1/simple-earn/locked/history/subscriptionRecord\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * purchaseId -- optional/string <br>\n     * asset -- optional/string <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-locked-subscription-record-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-locked-subscription-record-user_data</a>\n     */\n    public String lockedSubscriptionRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOCKED_SUBSCRIPTION_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_REDEMPTION_RECORD = \"/sapi/v1/simple-earn/flexible/history/redemptionRecord\";\n    /**\n     * GET /sapi/v1/simple-earn/flexible/history/redemptionRecord\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * productId -- optional/string <br>\n     * redeemId -- optional/string <br>\n     * asset -- optional/string <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-redemption-record-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-flexible-redemption-record-user_data</a>\n     */\n    public String flexibleRedemptionRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_REDEMPTION_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String LOCKED_REDEMPTION_RECORD = \"/sapi/v1/simple-earn/locked/history/redemptionRecord\";\n    /**\n     * GET /sapi/v1/simple-earn/locked/history/redemptionRecord\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * positionId -- optional/string <br>\n     * redeemId -- optional/string <br>\n     * asset -- optional/string <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-locked-redemption-record-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-locked-redemption-record-user_data</a>\n     */\n    public String lockedRedemptionRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOCKED_REDEMPTION_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_REWARDS_HISTORY = \"/sapi/v1/simple-earn/flexible/history/rewardsRecord\";\n    /**\n     * GET /sapi/v1/simple-earn/flexible/history/rewardsRecord\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * productId -- optional/string <br>\n     * asset -- optional/string <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * type -- mandatory/enum -- \"BONUS\", \"REALTIME\", \"REWARDS\" <br>\n     * current -- optional/long -- Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-rewards-history-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-flexible-rewards-history-user_data</a>\n     */\n    public String flexibleRewardsHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"type\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_REWARDS_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String LOCKED_REWARDS_HISTORY = \"/sapi/v1/simple-earn/locked/history/rewardsRecord\";\n    /**\n     * GET /sapi/v1/simple-earn/locked/history/rewardsRecord\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * positionId -- optional/string <br>\n     * asset -- optional/string <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * current -- optional/long -- Currently querying the page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-locked-rewards-history-user_data\">\n     *     https://binance-docs.github.io/apidocs/spot/en/#get-locked-rewards-history-user_data</a>\n     */\n    public String lockedRewardsHistory(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, LOCKED_REWARDS_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String SET_FLEXIBLE_AUTO_SUBSCRIBE = \"/sapi/v1/simple-earn/flexible/setAutoSubscribe\";\n    /**\n     * POST /sapi/v1/simple-earn/flexible/setAutoSubscribe\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * productId -- mandatory/string <br>\n     * autoSubscribe -- mandatory/boolean -- true or false <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#set-flexible-auto-subscribe-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#set-flexible-auto-subscribe-user_data</a>\n     */\n    public String setFlexibleAutoSubscribe(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"productId\", String.class);\n        ParameterChecker.checkParameter(parameters, \"autoSubscribe\", Boolean.class);\n        return requestHandler.sendSignedRequest(baseUrl, SET_FLEXIBLE_AUTO_SUBSCRIBE, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String SET_LOCKED_AUTO_SUBSCRIBE = \"/sapi/v1/simple-earn/locked/setAutoSubscribe\";\n    /**\n     * POST /sapi/v1/simple-earn/locked/setAutoSubscribe\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * positionId -- mandatory/string <br>\n     * autoSubscribe -- mandatory/boolean -- true or false <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#set-locked-auto-subscribe-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#set-locked-auto-subscribe-user_data</a>\n     */\n    public String setLockedAutoSubscribe(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"positionId\", String.class);\n        ParameterChecker.checkParameter(parameters, \"autoSubscribe\", Boolean.class);\n        return requestHandler.sendSignedRequest(baseUrl, SET_LOCKED_AUTO_SUBSCRIBE, parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_PERSONAL_LEFT_QUOTA = \"/sapi/v1/simple-earn/flexible/personalLeftQuota\";\n    /**\n     * GET /sapi/v1/simple-earn/flexible/personalLeftQuota\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * productId -- mandatory/string <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-personal-left-quota-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-flexible-personal-left-quota-user_data</a>\n     */\n    public String flexiblePersonalLeftQuota(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"productId\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_PERSONAL_LEFT_QUOTA, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String LOCKED_PERSONAL_LEFT_QUOTA = \"/sapi/v1/simple-earn/locked/personalLeftQuota\";\n    /**\n     * GET /sapi/v1/simple-earn/locked/personalLeftQuota\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * projectId -- mandatory/string <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-locked-personal-left-quota-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-locked-personal-left-quota-user_data</a>\n     */\n    public String lockedPersonalLeftQuota(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"projectId\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, LOCKED_PERSONAL_LEFT_QUOTA, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String FLEXIBLE_SUBSCRIPTION_PREVIEW = \"/sapi/v1/simple-earn/flexible/subscriptionPreview\";\n    /**\n     * GET /sapi/v1/simple-earn/flexible/subscriptionPreview\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * productId -- mandatory/string <br>\n     * amount -- mandatory/decimal <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-flexible-subscription-preview-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-flexible-subscription-preview-user_data</a>\n     */\n    public String flexibleSubscriptionPreview(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"productId\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, FLEXIBLE_SUBSCRIPTION_PREVIEW, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String LOCKED_SUBSCRIPTION_PREVIEW = \"/sapi/v1/simple-earn/locked/subscriptionPreview\";\n    /**\n     * GET /sapi/v1/simple-earn/locked/subscriptionPreview\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * projectId -- mandatory/string <br>\n     * amount -- mandatory/decimal <br>\n     * autoSubscribe -- optional/boolean -- true or false, default true. <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-locked-subscription-preview-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-locked-subscription-preview-user_data</a>\n     */\n    public String lockedSubscriptionPreview(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"projectId\", String.class);\n        ParameterChecker.checkRequiredParameter(parameters, \"amount\");\n        return requestHandler.sendSignedRequest(baseUrl, LOCKED_SUBSCRIPTION_PREVIEW, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String RATE_HISTORY = \"/sapi/v1/simple-earn/flexible/history/rateHistory\";\n    /**\n     * GET /sapi/v1/simple-earn/flexible/history/rateHistory\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * productId -- mandatory/string <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-rate-history-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-rate-history-user_data</a>\n     */\n    public String rateHistory(Map<String, Object> parameters) {\n        ParameterChecker.checkParameter(parameters, \"productId\", String.class);\n        return requestHandler.sendSignedRequest(baseUrl, RATE_HISTORY, parameters, HttpMethod.GET, showLimitUsage);\n    }\n\n    private final String COLLATERAL_RECORD = \"/sapi/v1/simple-earn/flexible/history/collateralRecord\";\n    /**\n     * GET /sapi/v1/simple-earn/flexible/history/collateralRecord\n     * <br>\n     * @param\n     * parameters Map of String,Object pair\n     *            where String is the name of the parameter and Object is the value of the parameter\n     * <br><br>\n     * productId -- optional/string <br>\n     * startTime -- optional/long -- UTC timestamp in ms <br>\n     * endTime -- optional/long -- UTC timestamp in ms <br>\n     * current -- optional/long -- Current querying page. Start from 1. Default:1 <br>\n     * size -- optional/long -- Default:10 Max:100 <br>\n     * recvWindow -- optional/long -- The value cannot be greater than 60000 <br>\n     * @return String\n     * @see <a href=\"https://binance-docs.github.io/apidocs/spot/en/#get-collateral-record-user_data\">\n     *      https://binance-docs.github.io/apidocs/spot/en/#get-collateral-record-user_data</a>\n     */\n    public String collateralRecord(Map<String, Object> parameters) {\n        return requestHandler.sendSignedRequest(baseUrl, COLLATERAL_RECORD, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final String baseUrl;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "baseUrl", "syntax_pass": true}, {"attribute_expression": "private final RequestHandler requestHandler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "RequestHandler", "name": "requestHandler", "syntax_pass": true}, {"attribute_expression": "private final boolean showLimitUsage;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "boolean", "name": "showLimitUsage", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_PRODUCT_LIST = \"/sapi/v1/simple-earn/flexible/list\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_PRODUCT_LIST = \"/sapi/v1/simple-earn/flexible/list\"", "syntax_pass": true}, {"attribute_expression": "private final String LOCKED_PRODUCT_LIST = \"/sapi/v1/simple-earn/locked/list\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOCKED_PRODUCT_LIST = \"/sapi/v1/simple-earn/locked/list\"", "syntax_pass": true}, {"attribute_expression": "private final String SUBSCRIBE_FLEXIBLE_PRODUCT = \"/sapi/v1/simple-earn/flexible/subscribe\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUBSCRIBE_FLEXIBLE_PRODUCT = \"/sapi/v1/simple-earn/flexible/subscribe\"", "syntax_pass": true}, {"attribute_expression": "private final String SUBSCRIBE_LOCKED_PRODUCT = \"/sapi/v1/simple-earn/locked/subscribe\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SUBSCRIBE_LOCKED_PRODUCT = \"/sapi/v1/simple-earn/locked/subscribe\"", "syntax_pass": true}, {"attribute_expression": "private final String REDEEM_FLEXIBLE_PRODUCT = \"/sapi/v1/simple-earn/flexible/redeem\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "REDEEM_FLEXIBLE_PRODUCT = \"/sapi/v1/simple-earn/flexible/redeem\"", "syntax_pass": true}, {"attribute_expression": "private final String REDEEM_LOCKED_PRODUCT = \"/sapi/v1/simple-earn/locked/redeem\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "REDEEM_LOCKED_PRODUCT = \"/sapi/v1/simple-earn/locked/redeem\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_PRODUCT_POSITION = \"/sapi/v1/simple-earn/flexible/position\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_PRODUCT_POSITION = \"/sapi/v1/simple-earn/flexible/position\"", "syntax_pass": true}, {"attribute_expression": "private final String LOCKED_PRODUCT_POSITION = \"/sapi/v1/simple-earn/locked/position\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOCKED_PRODUCT_POSITION = \"/sapi/v1/simple-earn/locked/position\"", "syntax_pass": true}, {"attribute_expression": "private final String SIMPLE_ACCOUNT = \"/sapi/v1/simple-earn/account\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SIMPLE_ACCOUNT = \"/sapi/v1/simple-earn/account\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_SUBSCRIPTION_RECORD = \"/sapi/v1/simple-earn/flexible/history/subscriptionRecord\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_SUBSCRIPTION_RECORD = \"/sapi/v1/simple-earn/flexible/history/subscriptionRecord\"", "syntax_pass": true}, {"attribute_expression": "private final String LOCKED_SUBSCRIPTION_RECORD = \"/sapi/v1/simple-earn/locked/history/subscriptionRecord\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOCKED_SUBSCRIPTION_RECORD = \"/sapi/v1/simple-earn/locked/history/subscriptionRecord\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_REDEMPTION_RECORD = \"/sapi/v1/simple-earn/flexible/history/redemptionRecord\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_REDEMPTION_RECORD = \"/sapi/v1/simple-earn/flexible/history/redemptionRecord\"", "syntax_pass": true}, {"attribute_expression": "private final String LOCKED_REDEMPTION_RECORD = \"/sapi/v1/simple-earn/locked/history/redemptionRecord\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOCKED_REDEMPTION_RECORD = \"/sapi/v1/simple-earn/locked/history/redemptionRecord\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_REWARDS_HISTORY = \"/sapi/v1/simple-earn/flexible/history/rewardsRecord\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_REWARDS_HISTORY = \"/sapi/v1/simple-earn/flexible/history/rewardsRecord\"", "syntax_pass": true}, {"attribute_expression": "private final String LOCKED_REWARDS_HISTORY = \"/sapi/v1/simple-earn/locked/history/rewardsRecord\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOCKED_REWARDS_HISTORY = \"/sapi/v1/simple-earn/locked/history/rewardsRecord\"", "syntax_pass": true}, {"attribute_expression": "private final String SET_FLEXIBLE_AUTO_SUBSCRIBE = \"/sapi/v1/simple-earn/flexible/setAutoSubscribe\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SET_FLEXIBLE_AUTO_SUBSCRIBE = \"/sapi/v1/simple-earn/flexible/setAutoSubscribe\"", "syntax_pass": true}, {"attribute_expression": "private final String SET_LOCKED_AUTO_SUBSCRIBE = \"/sapi/v1/simple-earn/locked/setAutoSubscribe\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "SET_LOCKED_AUTO_SUBSCRIBE = \"/sapi/v1/simple-earn/locked/setAutoSubscribe\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_PERSONAL_LEFT_QUOTA = \"/sapi/v1/simple-earn/flexible/personalLeftQuota\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_PERSONAL_LEFT_QUOTA = \"/sapi/v1/simple-earn/flexible/personalLeftQuota\"", "syntax_pass": true}, {"attribute_expression": "private final String LOCKED_PERSONAL_LEFT_QUOTA = \"/sapi/v1/simple-earn/locked/personalLeftQuota\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOCKED_PERSONAL_LEFT_QUOTA = \"/sapi/v1/simple-earn/locked/personalLeftQuota\"", "syntax_pass": true}, {"attribute_expression": "private final String FLEXIBLE_SUBSCRIPTION_PREVIEW = \"/sapi/v1/simple-earn/flexible/subscriptionPreview\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "FLEXIBLE_SUBSCRIPTION_PREVIEW = \"/sapi/v1/simple-earn/flexible/subscriptionPreview\"", "syntax_pass": true}, {"attribute_expression": "private final String LOCKED_SUBSCRIPTION_PREVIEW = \"/sapi/v1/simple-earn/locked/subscriptionPreview\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "LOCKED_SUBSCRIPTION_PREVIEW = \"/sapi/v1/simple-earn/locked/subscriptionPreview\"", "syntax_pass": true}, {"attribute_expression": "private final String RATE_HISTORY = \"/sapi/v1/simple-earn/flexible/history/rateHistory\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "RATE_HISTORY = \"/sapi/v1/simple-earn/flexible/history/rateHistory\"", "syntax_pass": true}, {"attribute_expression": "private final String COLLATERAL_RECORD = \"/sapi/v1/simple-earn/flexible/history/collateralRecord\";", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "String", "name": "COLLATERAL_RECORD = \"/sapi/v1/simple-earn/flexible/history/collateralRecord\"", "syntax_pass": true}]}]