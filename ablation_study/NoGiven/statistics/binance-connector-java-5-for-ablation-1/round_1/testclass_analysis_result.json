[{"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkRequiredParameterTest.java", "testclass_name": "ParameterChecker_checkRequiredParameterTest", "dependencies": ["package com.binance.connector.client.utils;", "import static org.junit.Assert.assertThrows;", "import org.junit.Test;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import java.util.HashMap;", "import java.util.Map;"], "name": "ParameterChecker_checkRequiredParameterTest", "description": "Unit tests for the ParameterChecker.checkRequiredParameter method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCheckRequiredParameterPresent", "primary_tested": ["ParameterChecker.checkRequiredParameter(Map<String,Object>,String)"], "external_dependencies": {"modules": ["ParameterChecker", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the ParameterChecker.checkRequiredParameter method does not throw an exception when the required parameter is present."}, {"name": "testCheckRequiredParameterMissing", "primary_tested": ["ParameterChecker.checkRequiredParameter(Map<String,Object>,String)"], "external_dependencies": {"modules": ["ParameterChecker", "HashMap", "Map", "BinanceConnectorException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the ParameterChecker.checkRequiredParameter method throws a BinanceConnectorException when the required parameter is missing."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java", "testclass_name": "ParameterChecker_checkParameterTypeTest", "dependencies": ["package com.binance.connector.client.utils;", "import static org.junit.Assert.assertThrows;", "import org.junit.Test;", "import com.binance.connector.client.exceptions.BinanceConnectorException;"], "name": "ParameterChecker_checkParameterTypeTest", "description": "Unit tests for the ParameterChecker.checkParameterType method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCheckParameterTypeValid", "primary_tested": ["ParameterChecker.checkParameterType(String,Class,String)"], "external_dependencies": {"modules": ["ParameterChecker"]}, "category": "unit", "description": "Tests the checkParameterType method with a valid string parameter."}, {"name": "testCheckParameterTypeInvalid", "primary_tested": ["ParameterChecker.checkParameterType(int,Class,String)"], "external_dependencies": {"modules": ["ParameterChecker", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the checkParameterType method with an invalid integer parameter, expecting a BinanceConnectorException."}, {"name": "testCheckParameterTypeEmptyString", "primary_tested": ["ParameterChecker.checkParameterType(String,Class,String)"], "external_dependencies": {"modules": ["ParameterChecker", "BinanceConnectorException"]}, "category": "unit", "description": "Tests the checkParameterType method with an empty string parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java", "testclass_name": "JSONParser_addKeyValueTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.json.JSONObject;", "import org.junit.Test;", "import static org.junit.Assert.*;"], "name": "JSONParser_addKeyValueTest", "description": "Unit tests for the addKeyValue method in the JSONParser class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testAddKeyValueWithNullParameters", "primary_tested": ["JSONParser.addKeyValue(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONParser", "JSONObject"]}, "category": "unit", "description": "Tests the addKeyValue method with null parameters."}, {"name": "testAddKeyValueWithExistingParameters", "primary_tested": ["JSONParser.addKeyValue(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONParser", "JSONObject"]}, "category": "unit", "description": "Tests the addKeyValue method with existing parameters."}, {"name": "testAddKeyValueWithNullValue", "primary_tested": ["JSONParser.addKeyValue(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONParser", "JSONObject"]}, "category": "unit", "description": "Tests the addKeyValue method with a null value."}, {"name": "testAddKeyValueWithExistingKey", "primary_tested": ["JSONParser.addKeyValue(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONParser", "JSONObject"]}, "category": "unit", "description": "Tests the addKeyValue method with an existing key."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java", "testclass_name": "JSONParser_getJSONIntValueTest", "dependencies": ["package com.binance.connector.client.utils;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import org.json.JSONException;", "import org.junit.Test;"], "name": "JSONParser_getJSONIntValueTest", "description": "Unit tests for the JSONParser.getJSONIntValue method.", "class_members": {"variables": [{"name": "mockJson", "type": "String"}]}, "fixtures": [], "test_cases": [{"name": "testGetJSONIntValueSuccess", "primary_tested": ["JSONParser.getJSONIntValue(String,String)"], "external_dependencies": {"modules": ["JSONParser"], "class_members": [{"name": "mockJson", "type": "variable"}]}, "category": "unit", "description": "Tests the successful retrieval of an integer value from a JSON string."}, {"name": "testGetJSONIntValueThrowException", "primary_tested": ["JSONParser.getJSONIntValue(String,String)"], "external_dependencies": {"modules": ["JSONParser"], "class_members": [{"name": "mockJson", "type": "variable"}]}, "category": "unit", "description": "Tests that the method throws a JSONException when an invalid key is provided."}, {"name": "testGetJSONIntValueInvalidJson", "primary_tested": ["JSONParser.getJSONIntValue(String,String)"], "external_dependencies": {"modules": ["JSONParser"]}, "category": "unit", "description": "Tests that the method throws a JSONException when an invalid JSON string is provided."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java", "testclass_name": "UrlBuilder_joinStreamUrlsTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import java.util.ArrayList;"], "name": "UrlBuilder_joinStreamUrlsTest", "description": "Unit tests for the joinStreamUrls method in the UrlBuilder class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testJoinStreamUrlsWithEmptyStreams", "primary_tested": ["UrlBuilder.joinStreamUrls(StringBuilder,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "ArrayList", "StringBuilder"]}, "category": "unit", "description": "Tests the joinStreamUrls method with an empty list of streams."}, {"name": "testJoinStreamUrlsWithSingleStream", "primary_tested": ["UrlBuilder.joinStreamUrls(StringBuilder,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "ArrayList", "StringBuilder"]}, "category": "unit", "description": "Tests the joinStreamUrls method with a single stream in the list."}, {"name": "testJoinStreamUrlsWithMultipleStreams", "primary_tested": ["UrlBuilder.joinStreamUrls(StringBuilder,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "ArrayList", "StringBuilder"]}, "category": "unit", "description": "Tests the joinStreamUrls method with multiple streams in the list."}, {"name": "testJoinStreamUrlsWithNullStreams", "primary_tested": ["UrlBuilder.joinStreamUrls(StringBuilder,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "StringBuilder"]}, "category": "unit", "description": "Tests the joinStreamUrls method with a null list of streams."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getIpRestrictionTest.java", "testclass_name": "SubAccount_getIpRestrictionTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ParameterChecker;", "import com.binance.connector.client.utils.RequestHandler;", "import org.junit.Before;", "import org.junit.Test;", "import org.mockito.Mockito;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "SubAccount_getIpRestrictionTest", "description": "Unit tests for the getIpRestriction method of the SubAccount class.", "class_members": {"variables": [{"name": "subAccount", "type": "SubAccount"}, {"name": "requestHandler", "type": "RequestHandler"}, {"name": "baseUrl", "type": "final String"}, {"name": "showLimitUsage", "type": "final boolean"}, {"name": "IP_RESTRICTION", "type": "final String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetIpRestriction", "primary_tested": ["SubAccount.getIpRestriction(Map<String,Object>)"], "associated_methods": ["RequestHandler.sendSignedRequest(String,String,Map<String,Object>,HttpMethod,boolean)"], "external_dependencies": {"modules": ["SubAccount", "RequestHandler", "HttpMethod", "HashMap", "Map"], "class_members": [{"name": "subAccount", "type": "variable"}, {"name": "requestHandler", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "showLimitUsage", "type": "variable"}, {"name": "IP_RESTRICTION", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getIpRestriction method of the SubAccount class by mocking the RequestHandler and verifying the response."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_sortJSONObjectTest.java", "testclass_name": "JSONParser_sortJSONObjectTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.json.JSONObject;", "import org.junit.Before;", "import org.junit.Test;", "import java.util.Map;", "import static org.junit.Assert.*;"], "name": "JSONParser_sortJSONObjectTest", "description": "Unit tests for the JSONParser.sortJSONObject method.", "class_members": {"variables": [{"name": "testJson", "type": "JSONObject"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSortJSONObject", "primary_tested": ["JSONParser.sortJSONObject(JSONObject)"], "external_dependencies": {"modules": ["JSONObject", "JSONParser"], "class_members": [{"name": "testJson", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the sorting functionality of the JSONParser.sortJSONObject method with a populated JSONObject."}, {"name": "testSortJSONObjectWithRemovedKey", "primary_tested": ["JSONParser.sortJSONObject(JSONObject)"], "associated_methods": ["JSONParser.pullValue(JSONObject,String)"], "external_dependencies": {"modules": ["JSONObject", "JSONParser"], "class_members": [{"name": "testJson", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the sorting functionality of the JSONParser.sortJSONObject method after removing a key from the JSONObject."}, {"name": "testSortJSONObjectWithEmptyObject", "primary_tested": ["JSONParser.sortJSONObject(JSONObject)"], "external_dependencies": {"modules": ["JSONObject", "JSONParser"]}, "category": "unit", "description": "Tests the sorting functionality of the JSONParser.sortJSONObject method with an empty JSONObject."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java", "testclass_name": "UrlBuilder_buildStreamUrlTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import java.util.ArrayList;"], "name": "UrlBuilder_buildStreamUrlTest", "description": "Unit tests for the buildStreamUrl method in the UrlBuilder class.", "class_members": {"variables": [{"name": "baseUrl", "type": "String"}, {"name": "streams", "type": "ArrayList<String>"}, {"name": "expectedUrl", "type": "String"}]}, "test_cases": [{"name": "testBuildStreamUrlWithStreams", "primary_tested": ["UrlBuilder.buildStreamUrl(String,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "ArrayList"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "streams", "type": "variable"}]}, "category": "unit", "description": "Tests the buildStreamUrl method with a list of streams."}, {"name": "testBuildStreamUrlWithoutStreams", "primary_tested": ["UrlBuilder.buildStreamUrl(String,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder", "ArrayList"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "streams", "type": "variable"}]}, "category": "unit", "description": "Tests the buildStreamUrl method without any streams."}, {"name": "testBuildStreamUrlWithNullStreams", "primary_tested": ["UrlBuilder.buildStreamUrl(String,ArrayList<String>)"], "external_dependencies": {"modules": ["UrlBuilder"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "description": "Tests the buildStreamUrl method with null streams."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java", "testclass_name": "UrlBuilder_joinQueryParametersTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import java.util.HashMap;", "import java.util.Map;"], "name": "UrlBuilder_joinQueryParametersTest", "description": "Unit tests for the UrlBuilder.joinQueryParameters method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testJoinQueryParametersWithNullParams", "primary_tested": ["UrlBuilder.joinQueryParameters(StringBuilder,Map)"], "external_dependencies": {"modules": ["UrlBuilder", "StringBuilder", "Map"]}, "category": "unit", "description": "Tests the joinQueryParameters method with null parameters."}, {"name": "testJoinQueryParametersWithEmptyParams", "primary_tested": ["UrlBuilder.joinQueryParameters(StringBuilder,Map)"], "external_dependencies": {"modules": ["UrlBuilder", "StringBuilder", "Map", "HashMap"]}, "category": "unit", "description": "Tests the joinQueryParameters method with empty parameters."}, {"name": "testJoinQueryParametersWithStringParams", "primary_tested": ["UrlBuilder.joinQueryParameters(StringBuilder,Map)"], "external_dependencies": {"modules": ["UrlBuilder", "StringBuilder", "Map", "HashMap"]}, "category": "unit", "description": "Tests the joinQueryParameters method with string parameters."}, {"name": "testJoinQueryParametersWithDoubleParams", "primary_tested": ["UrlBuilder.joinQueryParameters(StringBuilder,Map)"], "external_dependencies": {"modules": ["UrlBuilder", "StringBuilder", "Map", "HashMap"]}, "category": "unit", "description": "Tests the joinQueryParameters method with double parameters."}, {"name": "testJoinQueryParametersWithMixedParams", "primary_tested": ["UrlBuilder.joinQueryParameters(StringBuilder,Map)"], "external_dependencies": {"modules": ["UrlBuilder", "StringBuilder", "Map", "HashMap"]}, "category": "unit", "description": "Tests the joinQueryParameters method with mixed parameters."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java", "testclass_name": "ParameterChecker_checkOnlyOneOfParametersTest", "dependencies": ["package com.binance.connector.client.utils;", "import static org.junit.Assert.assertThrows;", "import org.json.JSONObject;", "import org.junit.Test;", "import com.binance.connector.client.exceptions.BinanceConnectorException;"], "name": "ParameterChecker_checkOnlyOneOfParametersTest", "description": "Unit tests for the ParameterChecker.checkOnlyOneOfParameters method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCheckOnlyOneOfParameters_SingleParameterPresent", "primary_tested": ["ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the checkOnlyOneOfParameters method when only one parameter is present."}, {"name": "testCheckOnlyOneOfParameters_MultipleParametersPresent", "primary_tested": ["ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker", "BinanceConnectorException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the checkOnlyOneOfParameters method when multiple parameters are present, expecting a BinanceConnectorException."}, {"name": "testCheckOnlyOneOfParameters_NoParametersPresent", "primary_tested": ["ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the checkOnlyOneOfParameters method when no parameters are present."}, {"name": "testCheckOnlyOneOfParameters_NullParams", "primary_tested": ["ParameterChecker.checkOnlyOneOfParameters(JSONObject,String,String)"], "external_dependencies": {"modules": ["JSONObject", "ParameterChecker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the checkOnlyOneOfParameters method when the parameters are null."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/httpclient/HttpClientSingleton_getHttpClientTest.java", "testclass_name": "HttpClientSingleton_getHttpClientTest", "dependencies": ["package com.binance.connector.client.utils.httpclient;", "import com.binance.connector.client.utils.ProxyAuth;", "import okhttp3.OkHttpClient;", "import org.junit.Test;", "import org.junit.Before;", "import org.junit.Assert;", "import java.net.Proxy;", "import java.net.InetSocketAddress;", "import okhttp3.Authenticator;", "import okhttp3.Route;"], "name": "HttpClientSingleton_getHttpClientTest", "description": "Unit tests for the HttpClientSingleton class, specifically focusing on the getHttpClient method with different proxy configurations.", "class_members": {"variables": [{"name": "proxyAuth", "type": "ProxyAuth"}, {"name": "proxyAuthWithAuth", "type": "ProxyAuth"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetHttpClient_InitialCall", "primary_tested": ["HttpClientSingleton.getHttpClient(ProxyAuth)"], "external_dependencies": {"modules": ["HttpClientSingleton", "ProxyAuth", "OkHttpClient"], "class_members": [{"name": "proxyAuth", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the initial call to getHttpClient with a proxy configuration without authentication."}, {"name": "testGetHttpClient_WithAuth", "primary_tested": ["HttpClientSingleton.getHttpClient(ProxyAuth)"], "external_dependencies": {"modules": ["HttpClientSingleton", "ProxyAuth", "OkHttpClient"], "class_members": [{"name": "proxyAuthWithAuth", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the call to getHttpClient with a proxy configuration that includes authentication."}, {"name": "testGetHttpClient_VerifyProxyChange", "primary_tested": ["HttpClientSingleton.getHttpClient(ProxyAuth)"], "external_dependencies": {"modules": ["HttpClientSingleton", "ProxyAuth", "OkHttpClient"], "class_members": [{"name": "proxyAuth", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the ability to change the proxy configuration in subsequent calls to getHttpClient."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java", "testclass_name": "SubAccount_managedSubWithdrawTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_managedSubWithdrawTest", "description": "Tests for the managed sub-account withdrawal functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testManagedSubWithdraw", "primary_tested": ["SubAccount.managedSubWithdraw(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account withdrawal functionality with valid parameters."}, {"name": "testManagedSubWithdrawMissingParameters", "primary_tested": ["SubAccount.managedSubWithdraw(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the managed sub-account withdrawal functionality when required parameters are missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java", "testclass_name": "JSONParser_pullValueTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.json.JSONObject;", "import org.junit.Test;", "import static org.junit.Assert.*;"], "name": "JSONParser_pullValueTest", "description": "Unit tests for the JSONParser.pullValue method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPullValueWithNullParameters", "primary_tested": ["JSONParser.pullValue(JSONObject,String)"], "external_dependencies": {"modules": ["JSONParser", "JSONObject"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the pullValue method with null parameters."}, {"name": "testPullValueWithExistingKey", "primary_tested": ["JSONParser.pullValue(JSONObject,String)"], "associated_methods": ["JSONObject.put(String,Object)", "JSONObject.has(String)"], "external_dependencies": {"modules": ["JSONParser", "JSONObject"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the pullValue method with an existing key in the JSONObject."}, {"name": "testPullValueWithNonExistingKey", "primary_tested": ["JSONParser.pullValue(JSONObject,String)"], "associated_methods": ["JSONObject.has(String)"], "external_dependencies": {"modules": ["JSONParser", "JSONObject"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the pullValue method with a non-existing key in the JSONObject."}, {"name": "testPullValueWithMultipleKeys", "primary_tested": ["JSONParser.pullValue(JSONObject,String)"], "associated_methods": ["JSONObject.put(String,Object)", "JSONObject.has(String)"], "external_dependencies": {"modules": ["JSONParser", "JSONObject"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the pullValue method with multiple keys in the JSONObject."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_deleteIpListTest.java", "testclass_name": "SubAccount_deleteIpListTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_deleteIpListTest", "description": "Unit tests for the SubAccount deleteIpList functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "subAccount", "type": "SubAccount"}]}, "fixtures": ["init"], "test_cases": [{"name": "testDeleteIpListWithoutParameters", "primary_tested": ["SubAccount.deleteIpList(Map<String,Object>)"], "external_dependencies": {"modules": ["BinanceConnectorException", "MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "subAccount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deleteIpList functionality of the SubAccount without parameters, expecting a BinanceConnectorException."}, {"name": "testDeleteIpListWithValidParameters", "primary_tested": ["SubAccount.deleteIpList(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "HttpMethod", "Dispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "subAccount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the deleteIpList functionality of the SubAccount with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java", "testclass_name": "ParameterChecker_processIdTest", "dependencies": ["package com.binance.connector.client.utils;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import java.util.UUID;"], "name": "ParameterChecker_processIdTest", "description": "Unit tests for the ParameterChecker.processId method with different input types.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testProcessIdWithInteger", "primary_tested": ["ParameterChecker.processId(Integer,String)"], "external_dependencies": {"modules": ["ParameterChecker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the processId method with an Integer input."}, {"name": "testProcessIdWithString", "primary_tested": ["ParameterChecker.processId(String,String)"], "external_dependencies": {"modules": ["ParameterChecker"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the processId method with a String input."}, {"name": "testProcessIdWithNull", "primary_tested": ["ParameterChecker.processId(Object,String)"], "external_dependencies": {"modules": ["ParameterChecker", "UUID"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the processId method with a null input, ensuring the returned value is a valid UUID."}, {"name": "testProcessIdWithEmptyString", "primary_tested": ["ParameterChecker.processId(String,String)"], "external_dependencies": {"modules": ["ParameterChecker", "UUID"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the processId method with an empty String input, ensuring the returned value is a valid UUID."}, {"name": "testProcessIdWithInvalidType", "primary_tested": ["ParameterChecker.processId(Object,String)"], "external_dependencies": {"modules": ["ParameterChecker", "BinanceConnectorException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the processId method with an invalid type input, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java", "testclass_name": "SubAccount_universalTransferTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import org.junit.Before;", "import org.junit.Test;", "import static org.junit.Assert.*;", "import java.util.HashMap;", "import java.util.Map;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.utils.ParameterChecker;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.exceptions.BinanceConnectorException;"], "name": "SubAccount_universalTransferTest", "description": "Test suite for the universal transfer functionality of the SubAccount class.", "class_members": {"variables": [{"name": "subAccount", "type": "SubAccount"}, {"name": "baseUrl", "type": "String"}, {"name": "requestHandler", "type": "RequestHandler"}, {"name": "showLimitUsage", "type": "boolean"}], "methods": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testUniversalTransferSuccess", "primary_tested": ["SubAccount.universalTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SubAccount", "BinanceConnectorException", "HashMap", "Map"], "class_members": [{"name": "subAccount", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful universal transfer functionality of the SubAccount."}, {"name": "testUniversalTransferMissingRequiredParameter", "primary_tested": ["SubAccount.universalTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SubAccount", "BinanceConnectorException", "HashMap", "Map"], "class_members": [{"name": "subAccount", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of missing required parameters in the universal transfer functionality of the SubAccount."}, {"name": "testUniversalTransferInvalidParameterType", "primary_tested": ["SubAccount.universalTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SubAccount", "BinanceConnectorException", "HashMap", "Map"], "class_members": [{"name": "subAccount", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of invalid parameter types in the universal transfer functionality of the SubAccount."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_updateIpRestrictionTest.java", "testclass_name": "SubAccount_updateIpRestrictionTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_updateIpRestrictionTest", "description": "Tests for updating IP restriction for sub-accounts in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "subAccount", "type": "SubAccount"}]}, "fixtures": ["init"], "test_cases": [{"name": "testUpdateIpRestrictionSuccess", "primary_tested": ["SubAccount.updateIpRestriction(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "SubAccount", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "subAccount", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful update of IP restriction for a sub-account."}, {"name": "testUpdateIpRestrictionMissingParameters", "primary_tested": ["SubAccount.updateIpRestriction(Map<String,Object>)"], "external_dependencies": {"modules": ["LinkedHashMap", "SubAccount", "BinanceConnectorException"], "class_members": [{"name": "subAccount", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of missing parameters when updating IP restriction for a sub-account."}, {"name": "testUpdateIpRestrictionInvalidParameters", "primary_tested": ["SubAccount.updateIpRestriction(Map<String,Object>)"], "external_dependencies": {"modules": ["LinkedHashMap", "SubAccount", "BinanceConnectorException"], "class_members": [{"name": "subAccount", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of invalid parameters when updating IP restriction for a sub-account."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowTest.java", "testclass_name": "CryptoLoans_loanBorrowTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_loanBorrowTest", "description": "Unit tests for the loan borrow functionality in the CryptoLoans service.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanBorrow", "primary_tested": ["CryptoLoans.loanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan borrow functionality of the CryptoLoans service with valid parameters."}, {"name": "testLoanBorrowInvalidParameters", "primary_tested": ["CryptoLoans.loanBorrow(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "com.binance.connector.client.exceptions.BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the loan borrow functionality of the CryptoLoans service with invalid parameters, expecting an exception."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_borrowTest.java", "testclass_name": "VIPLoans_borrowTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "VIPLoans_borrowTest", "description": "Unit tests for the VIPLoans borrow functionality.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "vipLoans", "type": "VIPLoans"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBorrowSuccess", "primary_tested": ["VIPLoans.borrow(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "VIPLoans", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "vipLoans", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful borrowing functionality of the VIPLoans."}, {"name": "testBorrowMissingRequiredParameter", "primary_tested": ["VIPLoans.borrow(Map<String,Object>)"], "external_dependencies": {"modules": ["VIPLoans", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "vipLoans", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of missing required parameters in the VIPLoans borrow method."}, {"name": "testBorrowInvalidParameterType", "primary_tested": ["VIPLoans.borrow(Map<String,Object>)"], "external_dependencies": {"modules": ["VIPLoans", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "vipLoans", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of invalid parameter types in the VIPLoans borrow method."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java", "testclass_name": "Wallet_cloudMiningHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_cloudMiningHistoryTest", "description": "Tests for the cloud mining history functionality in the Wallet module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCloudMiningHistory", "primary_tested": ["Wallet.cloudMiningHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cloud mining history functionality with valid parameters."}, {"name": "testCloudMiningHistoryInvalidParameters", "primary_tested": ["Wallet.cloudMiningHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the cloud mining history functionality with invalid parameters, expecting an exception."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java", "testclass_name": "SimpleEarn_lockedSubscriptionPreviewTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_lockedSubscriptionPreviewTest", "description": "Unit tests for the locked subscription preview functionality in the SimpleEarn class.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "simpleEarn", "type": "SimpleEarn"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLockedSubscriptionPreviewSuccess", "primary_tested": ["SimpleEarn.lockedSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "SimpleEarn", "LinkedHashMap", "Dispatcher", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "simpleEarn", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful preview of a locked subscription."}, {"name": "testLockedSubscriptionPreviewMissingProjectId", "primary_tested": ["SimpleEarn.lockedSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["SimpleEarn", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "simpleEarn", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when the projectId parameter is missing in the locked subscription preview."}, {"name": "testLockedSubscriptionPreviewMissingAmount", "primary_tested": ["SimpleEarn.lockedSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["SimpleEarn", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "simpleEarn", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when the amount parameter is missing in the locked subscription preview."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java", "testclass_name": "CryptoLoans_flexibleLoanBorrowTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_flexibleLoanBorrowTest", "description": "Unit tests for the flexible loan borrow functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanBorrow", "primary_tested": ["CryptoLoans.flexibleLoanBorrow(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan borrow functionality with valid parameters."}, {"name": "testFlexibleLoanBorrowInvalidParameters", "primary_tested": ["CryptoLoans.flexibleLoanBorrow(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan borrow functionality with invalid parameters, expecting an exception."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresPositionRiskV2Test.java", "testclass_name": "SubAccount_futuresPositionRiskV2Test", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_futuresPositionRiskV2Test", "description": "Tests for the futures position risk V2 functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesPositionRiskV2", "primary_tested": ["SubAccount.futuresPositionRiskV2(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures position risk V2 functionality with valid parameters."}, {"name": "testFuturesPositionRiskV2WithoutEmail", "primary_tested": ["SubAccount.futuresPositionRiskV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception handling when the email parameter is missing."}, {"name": "testFuturesPositionRiskV2WithoutFuturesType", "primary_tested": ["SubAccount.futuresPositionRiskV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception handling when the futuresType parameter is missing."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java", "testclass_name": "SubAccount_futuresAccountV2Test", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_futuresAccountV2Test", "description": "Tests for the futures account V2 functionality of the SubAccount service in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesAccountV2WithoutParameters", "primary_tested": ["SubAccount.futuresAccountV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account V2 functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFuturesAccountV2WithValidParameters", "primary_tested": ["SubAccount.futuresAccountV2(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map", "UrlBuilder"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)", "UrlBuilder.urlEncode(String)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the futures account V2 functionality with valid parameters, expecting a successful response."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_busdConvertTest.java", "testclass_name": "Wallet_busdConvertTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_busdConvertTest", "description": "Tests for the BUSD convert functionality in the Wallet module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBusdConvertSuccess", "primary_tested": ["Wallet.busdConvert(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful conversion of BUSD to another asset."}, {"name": "testBusdConvertMissingRequiredParameter", "primary_tested": ["Wallet.busdConvert(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "Map", "LinkedHashMap"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of missing required parameters in BUSD conversion."}, {"name": "testBusdConvertInvalidParameterType", "primary_tested": ["Wallet.busdConvert(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "Map", "LinkedHashMap"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of invalid parameter types in BUSD conversion."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Mining_statsticsListTest.java", "testclass_name": "Mining_statsticsListTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Mining_statsticsListTest", "description": "Tests for the statistics list functionality in the Mining module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testStatsticsList", "primary_tested": ["Mining.statsticsList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the statistics list functionality with all required parameters provided."}, {"name": "testStatsticsListMissingAlgo", "primary_tested": ["Mining.statsticsList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockData"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the statistics list functionality when the 'algo' parameter is missing, expecting a BinanceConnectorException."}, {"name": "testStatsticsListMissingUserName", "primary_tested": ["Mining.statsticsList(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockData"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the statistics list functionality when the 'userName' parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java", "testclass_name": "SubAccount_enableLeverageTokenTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_enableLeverageTokenTest", "description": "Unit tests for enabling leverage token functionality for sub-accounts.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "subAccount", "type": "SubAccount"}]}, "fixtures": ["init"], "test_cases": [{"name": "testEnableLeverageTokenSuccess", "primary_tested": ["SubAccount.enableLeverageToken(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "SubAccount", "LinkedHashMap", "Dispatcher", "MockWebServerDispatcher", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "subAccount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful enabling of leverage token for a sub-account."}, {"name": "testEnableLeverageTokenMissingEmail", "primary_tested": ["SubAccount.enableLeverageToken(Map<String,Object>)"], "external_dependencies": {"modules": ["SubAccount", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "subAccount", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception thrown when the email parameter is missing while enabling leverage token for a sub-account."}, {"name": "testEnableLeverageTokenMissingEnableBlvt", "primary_tested": ["SubAccount.enableLeverageToken(Map<String,Object>)"], "external_dependencies": {"modules": ["SubAccount", "LinkedHashMap", "BinanceConnectorException"], "class_members": [{"name": "subAccount", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception thrown when the enableBlvt parameter is missing while enabling leverage token for a sub-account."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Wallet_busdConvertHistoryTest.java", "testclass_name": "Wallet_busdConvertHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Wallet_busdConvertHistoryTest", "description": "Test suite for the BUSD convert history functionality in the Wallet service of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testBusdConvertHistory", "primary_tested": ["Wallet.busdConvertHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the BUSD convert history functionality with valid parameters."}, {"name": "testBusdConvertHistoryMissingStartTime", "primary_tested": ["Wallet.busdConvertHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the BUSD convert history functionality when the startTime parameter is missing, expecting a BinanceConnectorException."}, {"name": "testBusdConvertHistoryMissingEndTime", "primary_tested": ["Wallet.busdConvertHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the BUSD convert history functionality when the endTime parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanRepayTest.java", "testclass_name": "CryptoLoans_loanRepayTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_loanRepayTest", "description": "Unit tests for the loan repayment functionality in the Binance Connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testLoanRepaySuccess", "primary_tested": ["CryptoLoans.loanRepay(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful repayment of a loan using the CryptoLoans client."}, {"name": "testLoanRepayMissingOrderId", "primary_tested": ["CryptoLoans.loanRepay(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "Map", "LinkedHashMap"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of a missing 'orderId' parameter in the loan repayment request."}, {"name": "testLoanRepayMissingAmount", "primary_tested": ["CryptoLoans.loanRepay(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "Map", "LinkedHashMap"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of a missing 'amount' parameter in the loan repayment request."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanAdjustLtvTest.java", "testclass_name": "CryptoLoans_flexibleLoanAdjustLtvTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_flexibleLoanAdjustLtvTest", "description": "Test suite for the flexible loan adjust LTV functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleLoanAdjustLtvWithoutParameters", "primary_tested": ["CryptoLoans.flexibleLoanAdjustLtv(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan adjust LTV functionality without parameters, expecting a BinanceConnectorException."}, {"name": "testFlexibleLoanAdjustLtv", "primary_tested": ["CryptoLoans.flexibleLoanAdjustLtv(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan adjust LTV functionality with all required parameters, expecting a successful response."}, {"name": "testFlexibleLoanAdjustLtvMissingRequiredParameter", "primary_tested": ["CryptoLoans.flexibleLoanAdjustLtv(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible loan adjust LTV functionality with a missing required parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Margin_smallLiabilityExchangeHistoryTest.java", "testclass_name": "Margin_smallLiabilityExchangeHistoryTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Margin_smallLiabilityExchangeHistoryTest", "description": "Test suite for the small liability exchange history functionality in the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSmallLiabilityExchangeHistory", "primary_tested": ["Margin.smallLiabilityExchangeHistory(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "Map", "LinkedHashMap"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY", "MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the small liability exchange history functionality with valid parameters."}, {"name": "testSmallLiabilityExchangeHistoryMissingCurrent", "primary_tested": ["Margin.smallLiabilityExchangeHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockData", "Map", "LinkedHashMap"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the small liability exchange history functionality when the 'current' parameter is missing, expecting a BinanceConnectorException."}, {"name": "testSmallLiabilityExchangeHistoryMissingSize", "primary_tested": ["Margin.smallLiabilityExchangeHistory(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockData", "Map", "LinkedHashMap"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the small liability exchange history functionality when the 'size' parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Trade_testNewOrderTest.java", "testclass_name": "Trade_testNewOrderTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceClientException;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Trade_testNewOrderTest", "description": "Unit tests for the testNewOrder method in the Trade class, focusing on various scenarios including successful order testing and missing required parameters.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testTestNewOrderSuccess", "primary_tested": ["Trade.testNewOrder(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["Trade", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "HmacSignatureGenerator"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful scenario of testing a new order with all required parameters provided."}, {"name": "testTestNewOrderMissingSymbol", "primary_tested": ["Trade.testNewOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["Trade", "BinanceConnectorException", "HmacSignatureGenerator"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the 'symbol' parameter is missing, expecting a BinanceConnectorException."}, {"name": "testTestNewOrderMissingSide", "primary_tested": ["Trade.testNewOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["Trade", "BinanceConnectorException", "HmacSignatureGenerator"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the 'side' parameter is missing, expecting a BinanceConnectorException."}, {"name": "testTestNewOrderMissingType", "primary_tested": ["Trade.testNewOrder(Map<String,Object>)"], "external_dependencies": {"modules": ["Trade", "BinanceConnectorException", "HmacSignatureGenerator"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the 'type' parameter is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java", "testclass_name": "Futures_futuresTransferTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ParameterChecker;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.RequestHandler;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "Futures_futuresTransferTest", "description": "Unit tests for the futures transfer functionality in the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "futures", "type": "Futures"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testFuturesTransferSuccess", "primary_tested": ["Futures.futuresTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["MockWebServer", "MockWebServerDispatcher", "Futures", "HttpMethod", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "futures", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful execution of the futures transfer with all required parameters provided."}, {"name": "testFuturesTransferMissingAsset", "primary_tested": ["Futures.futuresTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["Futures", "BinanceConnectorException"], "class_members": [{"name": "futures", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of missing 'asset' parameter in the futures transfer, expecting a BinanceConnectorException."}, {"name": "testFuturesTransferMissingAmount", "primary_tested": ["Futures.futuresTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["Futures", "BinanceConnectorException"], "class_members": [{"name": "futures", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of missing 'amount' parameter in the futures transfer, expecting a BinanceConnectorException."}, {"name": "testFuturesTransferInvalidType", "primary_tested": ["Futures.futuresTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["Futures", "BinanceConnectorException"], "class_members": [{"name": "futures", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of an invalid 'type' parameter in the futures transfer, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_marginTransferTest.java", "testclass_name": "SubAccount_marginTransferTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.UrlBuilder;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SubAccount_marginTransferTest", "description": "Tests for the margin transfer functionality of the SubAccount in the Binance Connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testMarginTransferSuccess", "primary_tested": ["SubAccount.marginTransfer(Map<String,Object>)"], "associated_methods": ["UrlBuilder.urlEncode(String)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "UrlBuilder", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful margin transfer for a sub-account."}, {"name": "testMarginTransferMissingRequiredParameter", "primary_tested": ["SubAccount.marginTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of missing required parameters in the margin transfer for a sub-account."}, {"name": "testMarginTransferInvalidType", "primary_tested": ["SubAccount.marginTransfer(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "MockWebServer", "MockData"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the handling of an invalid type parameter in the margin transfer for a sub-account."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_changePlanStatusTest.java", "testclass_name": "AutoInvest_changePlanStatusTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ProxyAuth;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "AutoInvest_changePlanStatusTest", "description": "Tests for changing the status of an AutoInvest plan using the Binance Spot Client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": [], "nested_classes": []}, "fixtures": ["init"], "test_cases": [{"name": "testChangePlanStatusSuccess", "primary_tested": ["AutoInvest.changePlanStatus(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful change of an AutoInvest plan status."}, {"name": "testChangePlanStatusMissingPlanId", "primary_tested": ["AutoInvest.changePlanStatus(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the plan ID is missing when changing the AutoInvest plan status, expecting a BinanceConnectorException."}, {"name": "testChangePlanStatusMissingStatus", "primary_tested": ["AutoInvest.changePlanStatus(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the status is missing when changing the AutoInvest plan status, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java", "testclass_name": "SimpleEarn_flexibleSubscriptionPreviewTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_flexibleSubscriptionPreviewTest", "description": "Tests for the flexible subscription preview functionality in the SimpleEarn module of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "amount", "type": "static final double"}]}, "fixtures": ["init"], "test_cases": [{"name": "testFlexibleSubscriptionPreview", "primary_tested": ["SimpleEarn.flexibleSubscriptionPreview(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "LinkedHashMap", "Map"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible subscription preview functionality with valid parameters."}, {"name": "testFlexibleSubscriptionPreviewWithoutProductId", "primary_tested": ["SimpleEarn.flexibleSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "LinkedHashMap", "Map"], "class_members": [{"name": "baseUrl", "type": "variable"}, {"name": "amount", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible subscription preview functionality without the required productId parameter, expecting a BinanceConnectorException."}, {"name": "testFlexibleSubscriptionPreviewWithoutAmount", "primary_tested": ["SimpleEarn.flexibleSubscriptionPreview(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException", "LinkedHashMap", "Map"], "class_members": [{"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.API_KEY", "MockData.SECRET_KEY"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the flexible subscription preview functionality without the required amount parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java", "testclass_name": "SimpleEarn_setLockedAutoSubscribeTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_setLockedAutoSubscribeTest", "description": "Tests for setting auto-subscribe for locked positions in Simple Earn.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}], "methods": []}, "fixtures": ["init"], "test_cases": [{"name": "testSetLockedAutoSubscribe", "primary_tested": ["SimpleEarn.setLockedAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of setting auto-subscribe for a locked position with all required parameters."}, {"name": "testSetLockedAutoSubscribeWithoutPositionId", "primary_tested": ["SimpleEarn.setLockedAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when setting auto-subscribe without providing the required 'positionId' parameter, expecting a BinanceConnectorException."}, {"name": "testSetLockedAutoSubscribeWithoutAutoSubscribe", "primary_tested": ["SimpleEarn.setLockedAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the behavior when setting auto-subscribe without providing the required 'autoSubscribe' parameter, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeFlexibleProductTest.java", "testclass_name": "SimpleEarn_subscribeFlexibleProductTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_subscribeFlexibleProductTest", "description": "Unit tests for subscribing to a flexible product in SimpleEarn using the SpotClient.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSubscribeFlexibleProductSuccess", "primary_tested": ["SimpleEarn.subscribeFlexibleProduct(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful subscription to a flexible product in SimpleEarn."}, {"name": "testSubscribeFlexibleProductMissingProductId", "primary_tested": ["SimpleEarn.subscribeFlexibleProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception thrown when the productId is missing during subscription to a flexible product in SimpleEarn."}, {"name": "testSubscribeFlexibleProductMissingAmount", "primary_tested": ["SimpleEarn.subscribeFlexibleProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception thrown when the amount is missing during subscription to a flexible product in SimpleEarn."}, {"name": "testSubscribeFlexibleProductInvalidProductId", "primary_tested": ["SimpleEarn.subscribeFlexibleProduct(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "BinanceConnectorException"], "class_members": [{"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the exception thrown when the productId is invalid during subscription to a flexible product in SimpleEarn."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_redeemIndexPlanTest.java", "testclass_name": "AutoInvest_redeemIndexPlanTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "AutoInvest_redeemIndexPlanTest", "description": "Unit tests for redeeming index plans in the AutoInvest feature of the Binance connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testRedeemIndexPlan", "primary_tested": ["AutoInvest.redeemIndexPlan(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the redemption of an index plan with valid parameters."}, {"name": "testRedeemIndexPlanWithoutIndexId", "primary_tested": ["AutoInvest.redeemIndexPlan(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the redemption of an index plan without providing the indexId, expecting a BinanceConnectorException."}, {"name": "testRedeemIndexPlanWithoutRedemptionPercentage", "primary_tested": ["AutoInvest.redeemIndexPlan(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the redemption of an index plan without providing the redemptionPercentage, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/GiftCard_createDualTokensCodeTest.java", "testclass_name": "GiftCard_createDualTokensCodeTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.utils.ProxyAuth;", "import com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "GiftCard_createDualTokensCodeTest", "description": "Unit tests for the GiftCard createDualTokensCode method, including success and failure scenarios.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}, {"name": "giftCard", "type": "GiftCard"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCreateDualTokensCodeSuccess", "primary_tested": ["GiftCard.createDualTokensCode(Map<String,Object>)"], "associated_methods": ["MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"], "external_dependencies": {"modules": ["MockWebServer", "LinkedHashMap", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher", "GiftCard"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}, {"name": "giftCard", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the successful creation of dual tokens code with all required parameters."}, {"name": "testCreateDualTokensCodeMissingBaseToken", "primary_tested": ["GiftCard.createDualTokensCode(Map<String,Object>)"], "external_dependencies": {"modules": ["LinkedHashMap", "BinanceConnectorException", "GiftCard"], "class_members": [{"name": "giftCard", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the base token is missing, expecting a BinanceConnectorException."}, {"name": "testCreateDualTokensCodeMissingFaceToken", "primary_tested": ["GiftCard.createDualTokensCode(Map<String,Object>)"], "external_dependencies": {"modules": ["LinkedHashMap", "BinanceConnectorException", "GiftCard"], "class_members": [{"name": "giftCard", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the face token is missing, expecting a BinanceConnectorException."}, {"name": "testCreateDualTokensCodeMissingBaseTokenAmount", "primary_tested": ["GiftCard.createDualTokensCode(Map<String,Object>)"], "external_dependencies": {"modules": ["LinkedHashMap", "BinanceConnectorException", "GiftCard"], "class_members": [{"name": "giftCard", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the scenario where the base token amount is missing, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setFlexibleAutoSubscribeTest.java", "testclass_name": "SimpleEarn_setFlexibleAutoSubscribeTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.impl.SpotClientImpl;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "SimpleEarn_setFlexibleAutoSubscribeTest", "description": "Tests for setting flexible auto-subscribe functionality in the SimpleEarn module.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testSetFlexibleAutoSubscribe", "primary_tested": ["SimpleEarn.setFlexibleAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of setting flexible auto-subscribe with valid parameters."}, {"name": "testSetFlexibleAutoSubscribeWithInvalidProductId", "primary_tested": ["SimpleEarn.setFlexibleAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of setting flexible auto-subscribe with an invalid product ID."}, {"name": "testSetFlexibleAutoSubscribeWithInvalidAutoSubscribe", "primary_tested": ["SimpleEarn.setFlexibleAutoSubscribe(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "SpotClientImpl", "MockWebServer", "Dispatcher", "MockWebServerDispatcher", "MockData", "HttpMethod"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}], "project_specific_resources": ["MockData.PREFIX", "MockData.MOCK_RESPONSE", "MockData.HTTP_STATUS_OK", "MockWebServerDispatcher.getDispatcher(String,String,String,HttpMethod,int)"]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the functionality of setting flexible auto-subscribe with an invalid auto-subscribe parameter."}]}, {"file_path": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildApiKeyRequestTest.java", "testclass_name": "RequestBuilder_buildApiKeyRequestTest", "dependencies": ["package com.binance.connector.client.utils;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import okhttp3.Request;"], "name": "RequestBuilder_buildApiKeyRequestTest", "description": "Unit tests for the buildApiKeyRequest method in the RequestBuilder class.", "class_members": {"variables": [{"name": "VALID_URL", "type": "static final String"}, {"name": "INVALID_URL", "type": "static final String"}, {"name": "API_KEY", "type": "static final String"}]}, "test_cases": [{"name": "testBuildApiKeyRequestPost", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "VALID_URL", "type": "variable"}, {"name": "API_KEY", "type": "variable"}]}, "category": "unit", "description": "Tests the buildApiKeyRequest method with POST HTTP method."}, {"name": "testBuildApiKeyRequestGet", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "VALID_URL", "type": "variable"}, {"name": "API_KEY", "type": "variable"}]}, "category": "unit", "description": "Tests the buildApiKeyRequest method with GET HTTP method."}, {"name": "testBuildApiKeyRequestPut", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "VALID_URL", "type": "variable"}, {"name": "API_KEY", "type": "variable"}]}, "category": "unit", "description": "Tests the buildApiKeyRequest method with PUT HTTP method."}, {"name": "testBuildApiKeyRequestDelete", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "Request"], "class_members": [{"name": "VALID_URL", "type": "variable"}, {"name": "API_KEY", "type": "variable"}]}, "category": "unit", "description": "Tests the buildApiKeyRequest method with DELETE HTTP method."}, {"name": "testBuildApiKeyRequestInvalidMethod", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "VALID_URL", "type": "variable"}, {"name": "API_KEY", "type": "variable"}]}, "category": "unit", "description": "Tests the buildApiKeyRequest method with an invalid HTTP method, expecting a BinanceConnectorException."}, {"name": "testBuildApiKeyRequestInvalidUrl", "primary_tested": ["RequestBuilder.buildApiKeyRequest(String,HttpMethod,String)"], "external_dependencies": {"modules": ["RequestBuilder", "HttpMethod", "BinanceConnectorException"], "class_members": [{"name": "INVALID_URL", "type": "variable"}, {"name": "API_KEY", "type": "variable"}]}, "category": "unit", "description": "Tests the buildApiKeyRequest method with an invalid URL, expecting a BinanceConnectorException."}]}, {"file_path": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java", "testclass_name": "CryptoLoans_collateralRepayRateTest", "dependencies": ["package com.binance.connector.client.impl.spot;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertThrows;", "import java.util.LinkedHashMap;", "import java.util.Map;", "import org.junit.Before;", "import org.junit.Test;", "import com.binance.connector.client.SpotClient;", "import com.binance.connector.client.enums.HttpMethod;", "import com.binance.connector.client.exceptions.BinanceConnectorException;", "import com.binance.connector.client.impl.SpotClientImpl;", "import com.binance.connector.client.utils.ParameterChecker;", "import okhttp3.mockwebserver.Dispatcher;", "import okhttp3.mockwebserver.MockWebServer;", "import unit.MockData;", "import unit.MockWebServerDispatcher;"], "name": "CryptoLoans_collateralRepayRateTest", "description": "Unit tests for the collateral repay rate functionality in the Binance Connector client.", "class_members": {"variables": [{"name": "mockWebServer", "type": "MockWebServer"}, {"name": "baseUrl", "type": "String"}]}, "fixtures": ["init"], "test_cases": [{"name": "testCollateralRepayRateWithoutParameters", "primary_tested": ["CryptoLoans.collateralRepayRate(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral repay rate functionality without providing any parameters, expecting a BinanceConnectorException."}, {"name": "testCollateralRepayRateWithValidParameters", "primary_tested": ["CryptoLoans.collateralRepayRate(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral repay rate functionality with valid parameters, expecting a successful response."}, {"name": "testCollateralRepayRateWithMissingLoanCoin", "primary_tested": ["CryptoLoans.collateralRepayRate(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral repay rate functionality with missing 'loanCoin' parameter, expecting a BinanceConnectorException."}, {"name": "testCollateralRepayRateWithMissingCollateralCoin", "primary_tested": ["CryptoLoans.collateralRepayRate(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral repay rate functionality with missing 'collateralCoin' parameter, expecting a BinanceConnectorException."}, {"name": "testCollateralRepayRateWithMissingRepayAmount", "primary_tested": ["CryptoLoans.collateralRepayRate(Map<String,Object>)"], "external_dependencies": {"modules": ["SpotClient", "BinanceConnectorException", "MockWebServer", "Dispatcher", "HttpMethod", "MockData", "MockWebServerDispatcher"], "class_members": [{"name": "mockWebServer", "type": "variable"}, {"name": "baseUrl", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the collateral repay rate functionality with missing 'repayAmount' parameter, expecting a BinanceConnectorException."}]}]