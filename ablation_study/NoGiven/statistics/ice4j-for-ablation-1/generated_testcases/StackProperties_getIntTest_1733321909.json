[{"strategy": "retry", "code": "\npackage org.ice4j;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class StackProperties_getIntTest {\n\n    @Test\n    public void testGetInt_ValidInteger() {\n        // Given\n        String propertyName = \"testProperty\";\n        int defaultValue = 10;\n        String validInteger = \"20\";\n\n        // Mocking getString to return a valid integer string\n        StackProperties mockStackProperties = mock(StackProperties.class);\n        when(mockStackProperties.getString(propertyName)).thenReturn(validInteger);\n\n        // When\n        int result = mockStackProperties.getInt(propertyName, defaultValue);\n\n        // Then\n        assertEquals(20, result);\n    }\n\n    @Test\n    public void testGetInt_InvalidInteger() {\n        // Given\n        String propertyName = \"testProperty\";\n        int defaultValue = 10;\n        String invalidInteger = \"notAnInteger\";\n\n        // Mocking getString to return an invalid integer string\n        StackProperties mockStackProperties = mock(StackProperties.class);\n        when(mockStackProperties.getString(propertyName)).thenReturn(invalidInteger);\n\n        // When\n        int result = mockStackProperties.getInt(propertyName, defaultValue);\n\n        // Then\n        assertEquals(defaultValue, result);\n    }\n\n    @Test\n    public void testGetInt_NullString() {\n        // Given\n        String propertyName = \"testProperty\";\n        int defaultValue = 10;\n\n        // Mocking getString to return null\n        StackProperties mockStackProperties = mock(StackProperties.class);\n        when(mockStackProperties.getString(propertyName)).thenReturn(null);\n\n        // When\n        int result = mockStackProperties.getInt(propertyName, defaultValue);\n\n        // Then\n        assertEquals(defaultValue, result);\n    }\n\n    @Test\n    public void testGetInt_EmptyString() {\n        // Given\n        String propertyName = \"testProperty\";\n        int defaultValue = 10;\n        String emptyString = \"\";\n\n        // Mocking getString to return an empty string\n        StackProperties mockStackProperties = mock(StackProperties.class);\n        when(mockStackProperties.getString(propertyName)).thenReturn(emptyString);\n\n        // When\n        int result = mockStackProperties.getInt(propertyName, defaultValue);\n\n        // Then\n        assertEquals(defaultValue, result);\n    }\n}\n"}]