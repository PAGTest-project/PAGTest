[{"strategy": "retry", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.StunException;\nimport org.ice4j.TransportAddress;\nimport org.ice4j.message.RawMessage;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.io.IOException;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\npublic class StunStack_sendUdpMessageTest {\n\n    private StunStack stunStack;\n    private NetAccessManager mockNetAccessManager;\n\n    @BeforeEach\n    public void setUp() {\n        stunStack = new StunStack();\n        mockNetAccessManager = mock(NetAccessManager.class);\n        stunStack.netAccessManager = mockNetAccessManager;\n    }\n\n    @Test\n    public void testSendUdpMessage_Success() throws StunException, IOException {\n        RawMessage udpMessage = mock(RawMessage.class);\n        TransportAddress sendTo = mock(TransportAddress.class);\n        TransportAddress sendThrough = mock(TransportAddress.class);\n\n        when(udpMessage.getBytes()).thenReturn(new byte[0]);\n\n        stunStack.sendUdpMessage(udpMessage, sendTo, sendThrough);\n\n        verify(mockNetAccessManager).sendMessage(any(byte[].class), eq(sendThrough), eq(sendTo));\n    }\n\n    @Test\n    public void testSendUdpMessage_IllegalArgumentException() throws IOException {\n        RawMessage udpMessage = mock(RawMessage.class);\n        TransportAddress sendTo = mock(TransportAddress.class);\n        TransportAddress sendThrough = mock(TransportAddress.class);\n\n        when(udpMessage.getBytes()).thenReturn(new byte[0]);\n        doThrow(new IllegalArgumentException()).when(mockNetAccessManager).sendMessage(any(byte[].class), eq(sendThrough), eq(sendTo));\n\n        assertThrows(StunException.class, () -> {\n            stunStack.sendUdpMessage(udpMessage, sendTo, sendThrough);\n        });\n    }\n\n    @Test\n    public void testSendUdpMessage_IOException() throws IOException {\n        RawMessage udpMessage = mock(RawMessage.class);\n        TransportAddress sendTo = mock(TransportAddress.class);\n        TransportAddress sendThrough = mock(TransportAddress.class);\n\n        when(udpMessage.getBytes()).thenReturn(new byte[0]);\n        doThrow(new IOException()).when(mockNetAccessManager).sendMessage(any(byte[].class), eq(sendThrough), eq(sendTo));\n\n        assertThrows(StunException.class, () -> {\n            stunStack.sendUdpMessage(udpMessage, sendTo, sendThrough);\n        });\n    }\n}\n"}]