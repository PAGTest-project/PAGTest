[{"strategy": "retry", "code": "\npackage org.ice4j.message;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.ice4j.StunException;\n\npublic class ChannelData_decodeTest {\n\n    @Test\n    public void testDecode_ValidMessage() throws StunException {\n        byte[] binMessage = {0x40, 0x00, 0x00, 0x04, 0x01, 0x02, 0x03, 0x04};\n        char offset = 0;\n\n        ChannelData result = ChannelData.decode(binMessage, offset);\n\n        assertEquals(0x4000, result.getChannelNumber());\n        assertArrayEquals(new byte[]{0x01, 0x02, 0x03, 0x04}, result.getData());\n    }\n\n    @Test\n    public void testDecode_InvalidChannelNumber() {\n        byte[] binMessage = {0x00, 0x00, 0x00, 0x04, 0x01, 0x02, 0x03, 0x04};\n        char offset = 0;\n\n        assertThrows(StunException.class, () -> ChannelData.decode(binMessage, offset));\n    }\n\n    @Test\n    public void testDecode_SizeTooShort() {\n        byte[] binMessage = {0x01, 0x00, 0x00};\n        char offset = 0;\n\n        assertThrows(StunException.class, () -> ChannelData.decode(binMessage, offset));\n    }\n\n    @Test\n    public void testDecode_SizeMismatch() {\n        byte[] binMessage = {0x01, 0x00, 0x00, 0x08, 0x01, 0x02, 0x03, 0x04};\n        char offset = 0;\n\n        assertThrows(StunException.class, () -> ChannelData.decode(binMessage, offset));\n    }\n}\n"}]