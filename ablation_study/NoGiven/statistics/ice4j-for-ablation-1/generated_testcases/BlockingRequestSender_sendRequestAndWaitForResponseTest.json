[{"strategy": "generate", "code": "\npackage org.ice4j.stunclient;\n\nimport org.ice4j.*;\nimport org.ice4j.message.*;\nimport org.ice4j.stack.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.io.IOException;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.Mockito.*;\n\npublic class BlockingRequestSender_sendRequestAndWaitForResponseTest {\n\n    private BlockingRequestSender sender;\n    private StunStack mockStunStack;\n    private TransportAddress mockLocalAddress;\n    private TransportAddress mockServerAddress;\n    private Request mockRequest;\n    private StunResponseEvent mockResponseEvent;\n\n    @BeforeEach\n    public void setUp() {\n        mockStunStack = mock(StunStack.class);\n        mockLocalAddress = mock(TransportAddress.class);\n        mockServerAddress = mock(TransportAddress.class);\n        mockRequest = mock(Request.class);\n        mockResponseEvent = mock(StunResponseEvent.class);\n\n        sender = new BlockingRequestSender(mockStunStack, mockLocalAddress);\n    }\n\n    @Test\n    public void testSendRequestAndWaitForResponse_Success() throws StunException, IOException {\n        // Given\n        doAnswer(invocation -> {\n            sender.processResponse(mockResponseEvent);\n            return null;\n        }).when(mockStunStack).sendRequest(any(Request.class), any(TransportAddress.class), any(TransportAddress.class), any(BlockingRequestSender.class));\n\n        // When\n        StunMessageEvent result = sender.sendRequestAndWaitForResponse(mockRequest, mockServerAddress);\n\n        // Then\n        assertNotNull(result);\n        assertEquals(mockResponseEvent, result);\n    }\n\n    @Test\n    public void testSendRequestAndWaitForResponse_Failure() throws StunException, IOException {\n        // Given\n        doAnswer(invocation -> {\n            sender.processFailure(mock(BaseStunMessageEvent.class));\n            return null;\n        }).when(mockStunStack).sendRequest(any(Request.class), any(TransportAddress.class), any(TransportAddress.class), any(BlockingRequestSender.class));\n\n        // When\n        StunMessageEvent result = sender.sendRequestAndWaitForResponse(mockRequest, mockServerAddress);\n\n        // Then\n        assertNotNull(result);\n        assertEquals(null, result);\n    }\n}\n"}]