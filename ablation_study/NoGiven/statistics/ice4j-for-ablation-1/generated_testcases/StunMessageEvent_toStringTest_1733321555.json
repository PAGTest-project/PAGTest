[{"strategy": "retry", "code": "\npackage org.ice4j;\n\nimport org.ice4j.message.*;\nimport org.ice4j.stack.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class StunMessageEvent_toStringTest {\n\n    @Test\n    public void testToString() {\n        // Given\n        StunStack stunStack = mock(StunStack.class);\n        TransportAddress localAddress = mock(TransportAddress.class);\n        TransportAddress remoteAddress = mock(TransportAddress.class);\n        Message parsedMessage = mock(Message.class);\n        RawMessage rawMessage = mock(RawMessage.class);\n\n        when(rawMessage.getLocalAddress()).thenReturn(localAddress);\n        when(rawMessage.getRemoteAddress()).thenReturn(remoteAddress);\n        when(parsedMessage.toString()).thenReturn(\"MockedMessage\");\n        when(localAddress.toString()).thenReturn(\"127.0.0.1:1234\");\n        when(remoteAddress.toString()).thenReturn(\"192.168.1.1:5678\");\n\n        StunMessageEvent event = new StunMessageEvent(stunStack, rawMessage, parsedMessage);\n\n        // When\n        String result = event.toString();\n\n        // Then\n        String expected = \"StunMessageEvent:\\n\\tMessage=MockedMessage remoteAddr=192.168.1.1:5678 localAddr=127.0.0.1:1234\";\n        assertEquals(expected, result);\n    }\n}\n"}]