[{"strategy": "retry", "code": "\npackage org.ice4j;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.ice4j.ice.AgentConfig;\n\nimport java.net.InetAddress;\nimport java.net.Inet4Address;\nimport java.net.Inet6Address;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class TransportAddress_redactTest {\n\n    @Test\n    public void testRedactWithRedactionEnabled() throws Exception {\n        // Given\n        InetAddress mockAddr = mock(Inet6Address.class);\n        when(mockAddr.getAddress()).thenReturn(new byte[]{0x20, 0x01, (byte) 0x0d, (byte) 0xb8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});\n        when(mockAddr.isAnyLocalAddress()).thenReturn(false);\n        when(mockAddr.isLoopbackAddress()).thenReturn(false);\n        when(mockAddr.getHostAddress()).thenReturn(\"2001:db8::\");\n\n        AgentConfig mockConfig = mock(AgentConfig.class);\n        when(mockConfig.getRedactRemoteAddresses()).thenReturn(true);\n\n        // When\n        String result = TransportAddress.redact(mockAddr);\n\n        // Then\n        assertEquals(\"2xxx::xxx\", result);\n    }\n\n    @Test\n    public void testRedactWithRedactionDisabled() throws Exception {\n        // Given\n        InetAddress mockAddr = mock(Inet4Address.class);\n        when(mockAddr.getHostAddress()).thenReturn(\"192.168.1.1\");\n\n        AgentConfig mockConfig = mock(AgentConfig.class);\n        when(mockConfig.getRedactRemoteAddresses()).thenReturn(false);\n\n        // When\n        String result = TransportAddress.redact(mockAddr);\n\n        // Then\n        assertEquals(\"192.168.1.1\", result);\n    }\n}\n"}]