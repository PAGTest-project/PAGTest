[{"strategy": "retry", "code": "\npackage org.ice4j;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.net.InetAddress;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class TransportAddress_getRedactedAddressTest {\n\n    @Test\n    public void testGetRedactedAddress_RedactEnabled_AddressNotNull() {\n        // Given\n        TransportAddress transportAddress = Mockito.spy(new TransportAddress(\"localhost\", 8080, Transport.UDP));\n        InetAddress mockAddress = mock(InetAddress.class);\n        when(mockAddress.getHostAddress()).thenReturn(\"192.168.1.1\");\n        when(transportAddress.getAddress()).thenReturn(mockAddress);\n        when(transportAddress.toRedactedString(mockAddress)).thenReturn(\"xx.xx.xx.xx\");\n\n        // When\n        String result = transportAddress.getRedactedAddress();\n\n        // Then\n        assertEquals(\"xx.xx.xx.xx\", result);\n    }\n\n    @Test\n    public void testGetRedactedAddress_RedactEnabled_AddressNull() {\n        // Given\n        TransportAddress transportAddress = Mockito.spy(new TransportAddress(\"localhost\", 8080, Transport.UDP));\n        when(transportAddress.getAddress()).thenReturn(null);\n\n        // When\n        String result = transportAddress.getRedactedAddress();\n\n        // Then\n        assertEquals(null, result);\n    }\n\n    @Test\n    public void testGetRedactedAddress_RedactDisabled() {\n        // Given\n        TransportAddress transportAddress = Mockito.spy(new TransportAddress(\"localhost\", 8080, Transport.UDP));\n        InetAddress mockAddress = mock(InetAddress.class);\n        when(mockAddress.getHostAddress()).thenReturn(\"192.168.1.1\");\n        when(transportAddress.getAddress()).thenReturn(mockAddress);\n\n        // When\n        String result = transportAddress.getRedactedAddress();\n\n        // Then\n        assertEquals(\"192.168.1.1\", result);\n    }\n}\n"}]