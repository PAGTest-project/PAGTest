[{"strategy": "generate", "code": "\npackage org.ice4j.message;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nclass Indication_setMessageTypeTest {\n\n    @Test\n    void testSetMessageTypeValidIndication() {\n        Indication indication = new Indication();\n        char validIndicationType = 'A'; // Assume 'A' is a valid indication type\n\n        // Mock the superclass method to avoid actual state mutation\n        Indication spyIndication = Mockito.spy(indication);\n        Mockito.doNothing().when(spyIndication).setMessageType(validIndicationType);\n\n        spyIndication.setMessageType(validIndicationType);\n\n        // Verify that the superclass method was called with the correct argument\n        Mockito.verify(spyIndication).setMessageType(validIndicationType);\n    }\n\n    @Test\n    void testSetMessageTypeInvalidIndication() {\n        Indication indication = new Indication();\n        char invalidIndicationType = 'B'; // Assume 'B' is an invalid indication type\n\n        // Expect an IllegalArgumentException to be thrown\n        assertThrows(IllegalArgumentException.class, () -> {\n            indication.setMessageType(invalidIndicationType);\n        });\n    }\n}\n"}]