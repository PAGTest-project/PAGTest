[{"strategy": "generate", "code": "\npackage org.ice4j.message;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nclass Request_setMessageTypeTest {\n\n    @Test\n    void testSetMessageTypeValid() {\n        Request request = new Request();\n        char validRequestType = 'A'; // Assuming 'A' is a valid request type\n\n        // Mock the superclass method to avoid actual state mutation\n        Request spyRequest = Mockito.spy(request);\n        Mockito.doNothing().when(spyRequest).superSetMessageType(validRequestType);\n\n        assertDoesNotThrow(() -> spyRequest.setMessageType(validRequestType));\n        Mockito.verify(spyRequest).superSetMessageType(validRequestType);\n    }\n\n    @Test\n    void testSetMessageTypeInvalid() {\n        Request request = new Request();\n        char invalidRequestType = 'Z'; // Assuming 'Z' is an invalid request type\n\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class,\n                () -> request.setMessageType(invalidRequestType));\n\n        assertEquals((int) invalidRequestType + \" - is not a valid request type.\", exception.getMessage());\n    }\n\n    // Helper method to mock super.setMessageType\n    private void superSetMessageType(char requestType) {\n        super.setMessageType(requestType);\n    }\n}\n"}]