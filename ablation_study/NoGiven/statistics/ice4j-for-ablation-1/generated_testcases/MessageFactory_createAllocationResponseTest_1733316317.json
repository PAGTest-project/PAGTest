[{"strategy": "retry", "code": "\npackage org.ice4j.message;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.ice4j.*;\nimport org.ice4j.attribute.*;\nimport org.junit.jupiter.api.*;\n\npublic class MessageFactory_createAllocationResponseTest {\n\n    @Test\n    public void testCreateAllocationResponse() {\n        Request request = new Request();\n        request.setMessageType(Message.ALLOCATE_REQUEST);\n        request.setTransactionID(new byte[16]); // Initialize transaction ID\n\n        TransportAddress mappedAddress = new TransportAddress(\"127.0.0.1\", 12345, Transport.UDP);\n        TransportAddress relayedAddress = new TransportAddress(\"127.0.0.1\", 54321, Transport.UDP);\n        int lifetime = 600;\n\n        Response expectedResponse = new Response();\n        expectedResponse.setMessageType(Message.ALLOCATE_RESPONSE);\n\n        XorMappedAddressAttribute xorMappedAddressAttribute = AttributeFactory.createXorMappedAddressAttribute(mappedAddress, request.getTransactionID());\n        expectedResponse.putAttribute(xorMappedAddressAttribute);\n\n        XorRelayedAddressAttribute xorRelayedAddressAttribute = AttributeFactory.createXorRelayedAddressAttribute(relayedAddress, request.getTransactionID());\n        expectedResponse.putAttribute(xorRelayedAddressAttribute);\n\n        LifetimeAttribute lifetimeAttribute = AttributeFactory.createLifetimeAttribute(lifetime);\n        expectedResponse.putAttribute(lifetimeAttribute);\n\n        Response actualResponse = MessageFactory.createAllocationResponse(request, mappedAddress, relayedAddress, lifetime);\n\n        assertEquals(expectedResponse, actualResponse);\n    }\n\n    @Test\n    public void testCreateAllocationResponseWithToken() {\n        Request request = new Request();\n        request.setMessageType(Message.ALLOCATE_REQUEST);\n        request.setTransactionID(new byte[16]); // Initialize transaction ID\n\n        TransportAddress mappedAddress = new TransportAddress(\"127.0.0.1\", 12345, Transport.UDP);\n        TransportAddress relayedAddress = new TransportAddress(\"127.0.0.1\", 54321, Transport.UDP);\n        int lifetime = 600;\n        byte[] token = \"token\".getBytes();\n\n        Response expectedResponse = new Response();\n        expectedResponse.setMessageType(Message.ALLOCATE_RESPONSE);\n\n        XorMappedAddressAttribute xorMappedAddressAttribute = AttributeFactory.createXorMappedAddressAttribute(mappedAddress, request.getTransactionID());\n        expectedResponse.putAttribute(xorMappedAddressAttribute);\n\n        XorRelayedAddressAttribute xorRelayedAddressAttribute = AttributeFactory.createXorRelayedAddressAttribute(relayedAddress, request.getTransactionID());\n        expectedResponse.putAttribute(xorRelayedAddressAttribute);\n\n        LifetimeAttribute lifetimeAttribute = AttributeFactory.createLifetimeAttribute(lifetime);\n        expectedResponse.putAttribute(lifetimeAttribute);\n\n        ReservationTokenAttribute reservationTokenAttribute = AttributeFactory.createReservationTokenAttribute(token);\n        expectedResponse.putAttribute(reservationTokenAttribute);\n\n        Response actualResponse = MessageFactory.createAllocationResponse(request, mappedAddress, relayedAddress, token, lifetime);\n\n        assertEquals(expectedResponse, actualResponse);\n    }\n}\n"}]