[{"file_path": "src/test/java/org/ice4j/ice/harvest/SinglePortUdpHarvesterTest.java", "testclass_name": "SinglePortUdpHarvesterTest", "dependencies": ["package org.ice4j.ice.harvest;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import java.net.*;", "import org.junit.jupiter.api.*;"], "name": "SinglePortUdpHarvesterTest", "description": "Tests for the SinglePortUdpHarvester class, focusing on binding and rebinding of UDP addresses.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testRebindWithoutCloseThrows", "primary_tested": ["SinglePortUdpHarvester.SinglePortUdpHarvester(TransportAddress)"], "external_dependencies": {"modules": ["TransportAddress", "SinglePortUdpHarvester", "BindException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Verifies that without closing, the address used by a harvester cannot be re-used."}, {"name": "testRebindWithClose", "primary_tested": ["SinglePortUdpHarvester.SinglePortUdpHarvester(TransportAddress)"], "associated_methods": ["SinglePortUdpHarvester.close()"], "external_dependencies": {"modules": ["TransportAddress", "SinglePortUdpHarvester", "BindException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Verifies that after closing, the address used by a harvester can be re-used."}, {"name": "testBindWithPortZero", "primary_tested": ["SinglePortUdpHarvester.SinglePortUdpHarvester(TransportAddress)"], "associated_methods": ["SinglePortUdpHarvester.close()"], "external_dependencies": {"modules": ["TransportAddress", "SinglePortUdpHarvester", "BindException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Verifies that binding with port zero results in a non-zero port being chosen by the OS."}]}, {"file_path": "src/test/java/org/ice4j/ice/RoleConflictResolutionTest.java", "testclass_name": "RoleConflictResolutionTest", "dependencies": ["package org.ice4j.ice;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import java.io.*;", "import java.util.*;", "import java.util.concurrent.*;", "import java.util.logging.*;", "import org.junit.jupiter.api.*;"], "name": "RoleConflictResolutionTest", "description": "Tests for resolving role conflicts in ICE negotiation.", "class_members": {"variables": [{"name": "logger", "type": "static final Logger"}], "methods": [{"name": "testRecoveryFromRoleConflict", "signature": "private static void testRecoveryFromRoleConflict(boolean bothControlling) throws Throwable"}, {"name": "createPeer", "signature": "private static Agent createPeer(String label, boolean iceControlling) throws IOException"}, {"name": "disposePeer", "signature": "private static void disposePeer(Agent peer)"}, {"name": "logSelectedPairs", "signature": "private static void logSelectedPairs(Agent peer)"}, {"name": "exchangeCredentials", "signature": "private static void exchangeCredentials(Agent peer1, Agent peer2)"}, {"name": "exchangeCandidates", "signature": "private static void exchangeCandidates(Agent peer1, Agent peer2)"}, {"name": "copyRemoteCandidates", "signature": "private static void copyRemoteCandidates(Component localComponent, Component remoteComponent)"}]}, "fixtures": [], "test_cases": [{"name": "testRecoveryFromBothControlledConflict", "primary_tested": ["RoleConflictResolutionTest.testRecoveryFromRoleConflict(boolean)"], "associated_methods": [], "external_dependencies": {"modules": ["Agent", "CountDownLatch", "Arrays", "TimeUnit", "IOException", "IceMediaStream", "Component", "CandidatePair", "LocalCandidate", "RemoteCandidate", "KeepAliveStrategy"], "class_members": [{"name": "testRecoveryFromRoleConflict", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests recovery from a role conflict where both peers are in the controlled state."}, {"name": "testRecoveryFromBothControllingConflict", "primary_tested": ["RoleConflictResolutionTest.testRecoveryFromRoleConflict(boolean)"], "associated_methods": [], "external_dependencies": {"modules": ["Agent", "CountDownLatch", "Arrays", "TimeUnit", "IOException", "IceMediaStream", "Component", "CandidatePair", "LocalCandidate", "RemoteCandidate", "KeepAliveStrategy"], "class_members": [{"name": "testRecoveryFromRoleConflict", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests recovery from a role conflict where both peers are in the controlling state."}]}, {"file_path": "src/test/java/org/ice4j/attribute/XorOnlyTest.java", "testclass_name": "XorOnlyTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "XorOnlyTest", "description": "Unit tests for the XorOnlyAttribute class, covering encoding, decoding, equality, data length, and name retrieval.", "class_members": {"variables": [{"name": "xorOnly", "type": "XorOnlyAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDecodeAttributeBody", "primary_tested": ["XorOnlyAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that no exceptions are thrown when calling the decodeAttributeBody method."}, {"name": "testEncode", "primary_tested": ["XorOnlyAttribute.encode()"], "external_dependencies": {"modules": ["XorOnlyAttribute", "Attribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the encoding of XorOnly attributes."}, {"name": "testEquals", "primary_tested": ["XorOnlyAttribute.equals(Object)"], "associated_methods": ["MappedAddressAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["XorOnlyAttribute", "MappedAddressAttribute", "MsgFixture"], "class_members": [{"name": "xorOnly", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equality method of XorOnlyAttribute for both positive and negative cases."}, {"name": "testGetDataLength", "primary_tested": ["XorOnlyAttribute.getDataLength()"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the data length returned by XorOnlyAttribute is 0."}, {"name": "testGetName", "primary_tested": ["XorOnlyAttribute.getName()"], "external_dependencies": {"modules": ["XorOnlyAttribute"], "class_members": [{"name": "xorOnly", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of the name of the XorOnlyAttribute."}]}, {"file_path": "src/test/java/org/ice4j/attribute/OptionalAttributeAttributeTest.java", "testclass_name": "OptionalAttributeAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "OptionalAttributeAttributeTest", "description": "Tests for the OptionalAttribute class, focusing on decoding, encoding, equality, and data length.", "class_members": {"variables": [{"name": "optionalAttribute", "type": "OptionalAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "expectedAttributeValue", "type": "byte[]"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDecodeAttributeBody", "primary_tested": ["OptionalAttribute.decodeAttributeBody(byte[],char,char)"], "associated_methods": ["OptionalAttribute.getBody()", "OptionalAttribute.getDataLength()"], "external_dependencies": {"modules": ["Attribute", "OptionalAttribute", "MsgFixture", "StunException"], "class_members": [{"name": "optionalAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}, {"name": "expectedAttributeValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether sample binary arrays are correctly decoded."}, {"name": "testEncode", "primary_tested": ["OptionalAttribute.encode()"], "associated_methods": ["OptionalAttribute.setBody(byte[],int,int)"], "external_dependencies": {"modules": ["OptionalAttribute", "MsgFixture"], "class_members": [{"name": "optionalAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}, {"name": "expectedAttributeValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether attributes are properly encoded."}, {"name": "testEquals", "primary_tested": ["OptionalAttribute.equals(Object)"], "associated_methods": ["OptionalAttribute.setBody(byte[],int,int)"], "external_dependencies": {"modules": ["OptionalAttribute", "MsgFixture"], "class_members": [{"name": "optionalAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}, {"name": "expectedAttributeValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether the equals method works correctly."}, {"name": "testGetDataLength", "primary_tested": ["OptionalAttribute.getDataLength()"], "associated_methods": ["OptionalAttribute.setBody(byte[],int,int)"], "external_dependencies": {"modules": ["OptionalAttribute"], "class_members": [{"name": "optionalAttribute", "type": "variable"}, {"name": "expectedAttributeValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether the data length is correctly retrieved."}]}, {"file_path": "src/test/java/org/ice4j/attribute/SoftwareAttributeTest.java", "testclass_name": "SoftwareAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "SoftwareAttributeTest", "description": "Unit tests for the SoftwareAttribute class, focusing on encoding, decoding, and other attribute-specific functionalities.", "class_members": {"variables": [{"name": "softwareAttribute", "type": "SoftwareAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "softwareValue", "type": "String"}, {"name": "attributeBinValue", "type": "byte[]"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDecodeAttributeBody", "primary_tested": ["SoftwareAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["SoftwareAttribute", "StunException"], "class_members": [{"name": "softwareAttribute", "type": "variable"}, {"name": "softwareValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of the software attribute body."}, {"name": "testEncode", "primary_tested": ["SoftwareAttribute.encode()"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute", "type": "variable"}, {"name": "attributeBinValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the encoding method of the software attribute."}, {"name": "testEquals", "primary_tested": ["SoftwareAttribute.equals(Object)"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute", "type": "variable"}, {"name": "softwareValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equality method of the software attribute."}, {"name": "testGetDataLength", "primary_tested": ["SoftwareAttribute.getDataLength()"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute", "type": "variable"}, {"name": "softwareValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the data length of the software attribute."}, {"name": "testGetName", "primary_tested": ["SoftwareAttribute.getName()"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the name of the software attribute."}, {"name": "testSetGetSoftware", "primary_tested": ["SoftwareAttribute.setSoftware(byte[])", "SoftwareAttribute.getSoftware()"], "external_dependencies": {"modules": ["SoftwareAttribute"], "class_members": [{"name": "softwareValue", "type": "variable"}]}, "category": "unit", "description": "Tests the setter and getter methods for the software attribute."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UsernameAttributeTest.java", "testclass_name": "UsernameAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "UsernameAttributeTest", "description": "Unit tests for the UsernameAttribute class, focusing on encoding, decoding, and other attribute-specific functionalities.", "class_members": {"variables": [{"name": "usernameAttribute", "type": "UsernameAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "usernameValue", "type": "String"}, {"name": "attributeBinValue", "type": "byte[]"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDecodeAttributeBody", "primary_tested": ["UsernameAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["UsernameAttribute", "StunException"], "class_members": [{"name": "usernameAttribute", "type": "variable"}, {"name": "usernameValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of the username attribute body."}, {"name": "testEncode", "primary_tested": ["UsernameAttribute.encode()"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}, {"name": "attributeBinValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the encoding method of the UsernameAttribute."}, {"name": "testEquals", "primary_tested": ["UsernameAttribute.equals(Object)"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}, {"name": "usernameValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equality method of the UsernameAttribute."}, {"name": "testGetDataLength", "primary_tested": ["UsernameAttribute.getDataLength()"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}, {"name": "usernameValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the data length of the UsernameAttribute."}, {"name": "testGetName", "primary_tested": ["UsernameAttribute.getName()"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the name of the UsernameAttribute."}, {"name": "testSetGetUsername", "primary_tested": ["UsernameAttribute.setUsername(byte[])", "UsernameAttribute.getUsername()"], "external_dependencies": {"modules": ["UsernameAttribute"], "class_members": [{"name": "usernameValue", "type": "variable"}]}, "category": "unit", "description": "Tests the setter and getter methods for the username in the UsernameAttribute."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RealmAttributeTest.java", "testclass_name": "RealmAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "RealmAttributeTest", "description": "Unit tests for the RealmAttribute class, focusing on encoding, decoding, and other attribute-related functionalities.", "class_members": {"variables": [{"name": "realmAttribute", "type": "RealmAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "realmValue", "type": "String"}, {"name": "attributeBinValue", "type": "byte[]"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDecodeAttributeBody", "primary_tested": ["RealmAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["RealmAttribute", "StunException"], "class_members": [{"name": "realmAttribute", "type": "variable"}, {"name": "realmValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of the realm attribute body."}, {"name": "testEncode", "primary_tested": ["RealmAttribute.encode()"], "external_dependencies": {"modules": ["RealmAttribute"], "class_members": [{"name": "realmAttribute", "type": "variable"}, {"name": "attributeBinValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the encoding method of the RealmAttribute."}, {"name": "testEquals", "primary_tested": ["RealmAttribute.equals(Object)"], "external_dependencies": {"modules": ["RealmAttribute"], "class_members": [{"name": "realmAttribute", "type": "variable"}, {"name": "realmValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equality method of the RealmAttribute."}, {"name": "testGetDataLength", "primary_tested": ["RealmAttribute.getDataLength()"], "external_dependencies": {"modules": ["RealmAttribute"], "class_members": [{"name": "realmAttribute", "type": "variable"}, {"name": "realmValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the data length of the RealmAttribute."}, {"name": "testGetName", "primary_tested": ["RealmAttribute.getName()"], "external_dependencies": {"modules": ["RealmAttribute"], "class_members": [{"name": "realmAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the name of the RealmAttribute."}, {"name": "testSetGetRealm", "primary_tested": ["RealmAttribute.setRealm(byte[])", "RealmAttribute.getRealm()"], "external_dependencies": {"modules": ["RealmAttribute"], "class_members": [{"name": "realmValue", "type": "variable"}]}, "category": "unit", "description": "Tests the setter and getter methods for the realm attribute."}]}, {"file_path": "src/test/java/org/ice4j/attribute/NonceAttributeTest.java", "testclass_name": "NonceAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "NonceAttributeTest", "description": "Unit tests for the NonceAttribute class, focusing on encoding, decoding, and other attribute-specific functionalities.", "class_members": {"variables": [{"name": "nonceAttribute", "type": "NonceAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "nonceValue", "type": "String"}, {"name": "attributeBinValue", "type": "byte[]"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDecodeAttributeBody", "primary_tested": ["NonceAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["NonceAttribute", "StunException"], "class_members": [{"name": "nonceAttribute", "type": "variable"}, {"name": "nonceValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of the nonce attribute body."}, {"name": "testEncode", "primary_tested": ["NonceAttribute.encode()"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}, {"name": "attributeBinValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the encoding method of the NonceAttribute."}, {"name": "testEquals", "primary_tested": ["NonceAttribute.equals(Object)"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}, {"name": "nonceValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equality method of the NonceAttribute."}, {"name": "testGetDataLength", "primary_tested": ["NonceAttribute.getDataLength()"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}, {"name": "nonceValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the data length of the NonceAttribute."}, {"name": "testGetName", "primary_tested": ["NonceAttribute.getName()"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the method to get the name of the NonceAttribute."}, {"name": "testSetGetNonce", "primary_tested": ["NonceAttribute.setNonce(byte[])", "NonceAttribute.getNonce()"], "external_dependencies": {"modules": ["NonceAttribute"], "class_members": [{"name": "nonceValue", "type": "variable"}]}, "category": "unit", "description": "Tests the setter and getter methods for the nonce value in the NonceAttribute."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTcpStreamTest.java", "testclass_name": "PseudoTcpStreamTest", "dependencies": ["package org.ice4j.pseudotcp;", "import static org.junit.jupiter.api.Assertions.*;", "import java.io.*;", "import java.net.*;", "import java.util.concurrent.atomic.*;", "import java.util.logging.*;", "import org.junit.jupiter.api.*;"], "name": "PseudoTcpStreamTest", "description": "Tests for PseudoTcpStream functionality including connection, transfer, and timeout scenarios.", "class_members": {"variables": [{"name": "logger", "type": "static final Logger"}], "methods": [{"name": "receiveBuffer", "signature": "private static byte[] receiveBuffer(InputStream input, int size) throws IOException"}, {"name": "doTestTimeout", "signature": "private void doTestTimeout(final TimeoutOperationTest testOperation) throws Exception"}], "nested_classes": [{"name": "TimeoutOperationTest", "description": "Interface used to pass timeout test function"}]}, "fixtures": [], "test_cases": [{"name": "testConnectTransferClose", "primary_tested": ["PseudoTcpSocket.accept(int)", "PseudoTcpSocket.connect(InetSocketAddress,int)", "PseudoTcpSocket.getInputStream().read()", "PseudoTcpSocket.getOutputStream().write(byte[])", "PseudoTcpSocket.close()"], "associated_methods": ["PseudoTcpTestBase.createDummyData(int)", "PseudoTcpSocket.getLocalPort()", "PseudoTcpSocket.getState()"], "external_dependencies": {"modules": ["PseudoTcpSocket", "PseudoTcpSocketFactory", "PseudoTcpTestBase", "InetSocketAddress", "InetAddress", "AtomicBoolean", "Thread", "IOException", "PseudoTcpState"], "class_members": [{"name": "logger", "type": "variable"}], "project_specific_resources": ["PseudoTcpTestBase.createDummyData(int)"]}, "category": "integration", "fixtures_used": [], "description": "Tests the connection, data transfer, and closing of PseudoTcpSocket."}, {"name": "testAccept", "primary_tested": ["PseudoTcpSocketImpl.accept(int)"], "external_dependencies": {"modules": ["PseudoTcpSocketImpl", "IOException"]}, "category": "unit", "fixtures_used": [], "description": "Tests the timeout on the accept method of PseudoTcpSocketImpl."}, {"name": "testReadTimeout", "primary_tested": ["PseudoTcpSocketImpl.setPTCPOption(Option,int)", "PseudoTcpSocketImpl.getInputStream().read(byte[])"], "external_dependencies": {"modules": ["PseudoTcpSocketImpl", "Option", "IOException"], "class_members": [{"name": "doTestTimeout", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the timeout on the read method of PseudoTcpSocketImpl."}, {"name": "testWriteTimeout", "primary_tested": ["PseudoTcpSocketImpl.setPTCPOption(Option,int)", "PseudoTcpSocketImpl.getOutputStream().write(byte[])"], "external_dependencies": {"modules": ["PseudoTcpSocketImpl", "Option", "IOException", "PseudoTCPBase"], "class_members": [{"name": "doTestTimeout", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the timeout on the write method of PseudoTcpSocketImpl."}, {"name": "testFlushTimeout", "primary_tested": ["PseudoTcpSocketImpl.setPTCPOption(Option,int)", "PseudoTcpSocketImpl.getOutputStream().flush()"], "external_dependencies": {"modules": ["PseudoTcpSocketImpl", "Option", "IOException", "PseudoTCPBase"], "class_members": [{"name": "doTestTimeout", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the timeout on the flush method of PseudoTcpSocketImpl."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ChangeRequestAttributeTest.java", "testclass_name": "ChangeRequestAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "ChangeRequestAttributeTest", "description": "Unit tests for the ChangeRequestAttribute class, focusing on its construction, decoding, encoding, equality, data length, and name.", "class_members": {"variables": [{"name": "changeRequestAttribute", "type": "ChangeRequestAttribute"}, {"name": "binMessagesFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testChangeRequestAttribute", "primary_tested": ["ChangeRequestAttribute.getAttributeType()"], "external_dependencies": {"modules": ["ChangeRequestAttribute", "Attribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether the constructed object has the proper type."}, {"name": "testDecodeAttributeBody", "primary_tested": ["ChangeRequestAttribute.decodeAttributeBody(byte[],char,char)"], "associated_methods": ["ChangeRequestAttribute.getChangeIpFlag()", "ChangeRequestAttribute.getChangePortFlag()"], "external_dependencies": {"modules": ["ChangeRequestAttribute", "MsgFixture", "StunException"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}, {"name": "binMessagesFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether sample binary arrays are properly decoded."}, {"name": "testEncode", "primary_tested": ["ChangeRequestAttribute.encode()"], "associated_methods": ["ChangeRequestAttribute.setChangeIpFlag(boolean)", "ChangeRequestAttribute.setChangePortFlag(boolean)"], "external_dependencies": {"modules": ["ChangeRequestAttribute", "MsgFixture"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}, {"name": "binMessagesFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether sample objects encode properly."}, {"name": "testEquals", "primary_tested": ["ChangeRequestAttribute.equals(Object)"], "associated_methods": ["ChangeRequestAttribute.setChangeIpFlag(boolean)", "ChangeRequestAttribute.setChangePortFlag(boolean)"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method against a null, a different, and an identical object."}, {"name": "testGetDataLength", "primary_tested": ["ChangeRequestAttribute.getDataLength()"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether the returned value is always 4."}, {"name": "testGetName", "primary_tested": ["ChangeRequestAttribute.getName()"], "external_dependencies": {"modules": ["ChangeRequestAttribute"], "class_members": [{"name": "changeRequestAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether we get a relevant name."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ConnectionIdAttributeTest.java", "testclass_name": "ConnectionIdAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import org.ice4j.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ConnectionIdAttributeTest", "description": "Unit tests for the ConnectionIdAttribute class, focusing on various functionalities such as data length calculation, encoding, decoding, and equality checks.", "class_members": {"variables": [{"name": "connectionIdAttribute", "type": "ConnectionIdAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["ConnectionIdAttribute.getDataLength()"], "associated_methods": ["ConnectionIdAttribute.setConnectionIdValue(int)"], "external_dependencies": {"modules": ["ConnectionIdAttribute", "MsgFixture"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether data length is properly calculated."}, {"name": "testGetName", "primary_tested": ["ConnectionIdAttribute.getName()"], "external_dependencies": {"modules": ["ConnectionIdAttribute"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests getting the name."}, {"name": "testEqualsObject", "primary_tested": ["ConnectionIdAttribute.equals(Object)"], "associated_methods": ["ConnectionIdAttribute.setConnectionIdValue(int)"], "external_dependencies": {"modules": ["ConnectionIdAttribute", "MsgFixture"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method against a null, a different and an identical object."}, {"name": "testEncode", "primary_tested": ["ConnectionIdAttribute.encode()"], "associated_methods": ["ConnectionIdAttribute.setConnectionIdValue(int)"], "external_dependencies": {"modules": ["ConnectionIdAttribute", "MsgFixture"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether attributes are properly encoded."}, {"name": "testDecodeAttributeBody", "primary_tested": ["ConnectionIdAttribute.decodeAttributeBody(byte[],char,char)"], "associated_methods": ["ConnectionIdAttribute.getConnectionIdValue()"], "external_dependencies": {"modules": ["ConnectionIdAttribute", "MsgFixture", "StunException"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether sample binary arrays are correctly decoded."}, {"name": "testGetConnectionIdValue", "primary_tested": ["ConnectionIdAttribute.getConnectionIdValue()"], "associated_methods": ["ConnectionIdAttribute.setConnectionIdValue(int)"], "external_dependencies": {"modules": ["ConnectionIdAttribute", "MsgFixture"], "class_members": [{"name": "connectionIdAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the connection Id is always integer."}]}, {"file_path": "src/test/java/org/ice4j/util/PeriodicRunnableTests.java", "testclass_name": "PeriodicRunnableTests", "dependencies": ["package org.ice4j.util;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import java.time.*;", "import java.util.concurrent.*;", "import org.jitsi.utils.concurrent.*;", "import org.junit.jupiter.api.*;"], "name": "PeriodicRunnableTests", "description": "Unit tests for the PeriodicRunnable class, focusing on its scheduling and execution behavior.", "class_members": {"variables": [{"name": "timer", "type": "FakeScheduledExecutorService"}, {"name": "executor", "type": "ExecutorService"}], "methods": []}, "fixtures": ["beforeEach"], "test_cases": [{"name": "scheduleExecutesSpecifiedRunnableMultipleTimes", "primary_tested": ["PeriodicRunnable.schedule()"], "associated_methods": ["FakeScheduledExecutorService.getClock().elapse(Duration)", "FakeScheduledExecutorService.run()"], "external_dependencies": {"modules": ["PeriodicRunnable", "FakeScheduledExecutorService", "CountDownLatch", "Duration"], "class_members": [{"name": "timer", "type": "variable"}, {"name": "executor", "type": "variable"}]}, "category": "unit", "fixtures_used": ["beforeEach"], "description": "Tests that the specified runnable is executed multiple times according to the schedule."}, {"name": "scheduleWithNegativeDelayDoesNotExecuteRunnable", "primary_tested": ["PeriodicRunnable.schedule()"], "associated_methods": ["FakeScheduledExecutorService.getClock().elapse(Duration)", "FakeScheduledExecutorService.run()"], "external_dependencies": {"modules": ["PeriodicRunnable", "FakeScheduledExecutorService", "CountDownLatch", "Duration"], "class_members": [{"name": "timer", "type": "variable"}, {"name": "executor", "type": "variable"}]}, "category": "unit", "fixtures_used": ["beforeEach"], "description": "Tests that the runnable is not executed if the delay is negative."}, {"name": "negativeDelayStopsFurtherExecution", "primary_tested": ["PeriodicRunnable.getDelayUntilNextRun()"], "associated_methods": ["FakeScheduledExecutorService.getClock().elapse(Duration)", "FakeScheduledExecutorService.run()"], "external_dependencies": {"modules": ["PeriodicRunnable", "FakeScheduledExecutorService", "CountDownLatch", "Duration"], "class_members": [{"name": "timer", "type": "variable"}, {"name": "executor", "type": "variable"}]}, "category": "unit", "fixtures_used": ["beforeEach"], "description": "Tests that a negative delay stops further execution of the runnable."}, {"name": "cancelStopFurtherExecution", "primary_tested": ["PeriodicRunnable.cancel()"], "associated_methods": ["FakeScheduledExecutorService.getClock().elapse(Duration)", "FakeScheduledExecutorService.run()"], "external_dependencies": {"modules": ["PeriodicRunnable", "FakeScheduledExecutorService", "CountDownLatch", "Duration"], "class_members": [{"name": "timer", "type": "variable"}, {"name": "executor", "type": "variable"}]}, "category": "unit", "fixtures_used": ["beforeEach"], "description": "Tests that canceling the runnable stops further execution."}, {"name": "scheduleExecuteRunnableIfPreviouslyCancelled", "primary_tested": ["PeriodicRunnable.schedule()"], "associated_methods": ["FakeScheduledExecutorService.getClock().elapse(Duration)", "FakeScheduledExecutorService.run()"], "external_dependencies": {"modules": ["PeriodicRunnable", "FakeScheduledExecutorService", "CountDownLatch", "Duration"], "class_members": [{"name": "timer", "type": "variable"}, {"name": "executor", "type": "variable"}]}, "category": "unit", "fixtures_used": ["beforeEach"], "description": "Tests that the runnable can be scheduled again after being previously canceled."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageFactoryTest.java", "testclass_name": "MessageFactoryTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.junit.jupiter.api.*;"], "name": "MessageFactoryTest", "description": "Unit tests for creating various types of STUN messages using the MessageFactory.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCreateBindingErrorResponse", "primary_tested": ["MessageFactory.createBindingErrorResponse(char)"], "associated_methods": ["AttributeFactory.createErrorCodeAttribute(char)", "Response.setMessageType(char)", "Response.putAttribute(Attribute)"], "external_dependencies": {"modules": ["Message", "Response", "Attribute", "AttributeFactory", "MessageFactory", "StunException"], "class_members": []}, "category": "unit", "description": "Tests the creation of a binding error response with a specific error code."}, {"name": "testCreateBindingErrorResponse1", "primary_tested": ["MessageFactory.createBindingErrorResponse(char,String)"], "associated_methods": ["AttributeFactory.createErrorCodeAttribute(char,String)", "Response.setMessageType(char)", "Response.putAttribute(Attribute)"], "external_dependencies": {"modules": ["Message", "Response", "Attribute", "AttributeFactory", "MessageFactory"], "class_members": []}, "category": "unit", "description": "Tests the creation of a binding error response with a specific error code and reason phrase."}, {"name": "testCreateBindingErrorResponseUnknownAttributes", "primary_tested": ["MessageFactory.createBindingErrorResponseUnknownAttributes(char[])"], "associated_methods": ["AttributeFactory.createErrorCodeAttribute(char)", "ErrorCodeAttribute.setReasonPhrase(String)", "AttributeFactory.createUnknownAttributesAttribute()", "UnknownAttributesAttribute.addAttributeID(char)", "Response.setMessageType(char)", "Response.putAttribute(Attribute)"], "external_dependencies": {"modules": ["Message", "Response", "Attribute", "AttributeFactory", "MessageFactory", "ErrorCodeAttribute", "UnknownAttributesAttribute", "StunException"], "class_members": []}, "category": "unit", "description": "Tests the creation of a binding error response with unknown attributes."}, {"name": "testCreateBindingErrorResponseUnknownAttributes1", "primary_tested": ["MessageFactory.createBindingErrorResponseUnknownAttributes(String,char[])"], "associated_methods": ["AttributeFactory.createErrorCodeAttribute(char,String)", "AttributeFactory.createUnknownAttributesAttribute()", "UnknownAttributesAttribute.addAttributeID(char)", "Response.setMessageType(char)", "Response.putAttribute(Attribute)"], "external_dependencies": {"modules": ["Message", "Response", "Attribute", "AttributeFactory", "MessageFactory", "ErrorCodeAttribute", "UnknownAttributesAttribute", "StunException"], "class_members": []}, "category": "unit", "description": "Tests the creation of a binding error response with a specific reason phrase and unknown attributes."}, {"name": "testCreateBindingRequest", "primary_tested": ["MessageFactory.createBindingRequest()"], "associated_methods": ["Request.setMessageType(char)"], "external_dependencies": {"modules": ["Message", "Request", "AttributeFactory", "MessageFactory"], "class_members": []}, "category": "unit", "description": "Tests the creation of a binding request."}, {"name": "testCreateBindingResponse", "primary_tested": ["MessageFactory.create3489BindingResponse(TransportAddress,TransportAddress,TransportAddress)"], "associated_methods": ["AttributeFactory.createMappedAddressAttribute(TransportAddress)", "AttributeFactory.createSourceAddressAttribute(TransportAddress)", "AttributeFactory.createChangedAddressAttribute(TransportAddress)", "Response.setMessageType(char)", "Response.putAttribute(Attribute)"], "external_dependencies": {"modules": ["Message", "Response", "Attribute", "AttributeFactory", "MessageFactory", "TransportAddress", "Transport", "MsgFixture", "Exception"], "class_members": []}, "category": "unit", "description": "Tests the creation of a binding response with mapped, source, and changed addresses."}]}, {"file_path": "src/test/java/org/ice4j/message/MessageTest.java", "testclass_name": "MessageTest", "dependencies": ["package org.ice4j.message;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.attribute.*;", "import org.ice4j.stack.*;", "import org.jitsi.config.*;", "import org.junit.jupiter.api.*;"], "name": "MessageTest", "description": "Unit tests for the Message class, focusing on encoding, decoding, attribute management, and equality checks.", "class_members": {"variables": [{"name": "bindingRequest", "type": "Message"}, {"name": "bindingResponse", "type": "Message"}, {"name": "mappedAddress", "type": "MappedAddressAttribute"}, {"name": "sourceAddress", "type": "SourceAddressAttribute"}, {"name": "changedAddress", "type": "ChangedAddressAttribute"}, {"name": "changeRequest", "type": "ChangeRequestAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "stunStack", "type": "StunStack"}], "methods": [], "nested_classes": []}, "fixtures": ["setupConfig", "resetConfig", "setUp", "tearDown"], "test_cases": [{"name": "testAddAndGetAttribute", "primary_tested": ["Message.putAttribute(Attribute)", "Message.getAttribute(int)"], "external_dependencies": {"modules": ["Message", "Attribute"], "class_members": [{"name": "mappedAddress", "type": "variable"}, {"name": "sourceAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding and retrieving attributes from a Message object."}, {"name": "testEncode", "primary_tested": ["Message.encode(StunStack)"], "external_dependencies": {"modules": ["Message", "StunStack", "MsgFixture"], "class_members": [{"name": "bindingRequest", "type": "variable"}, {"name": "bindingResponse", "type": "variable"}, {"name": "stunStack", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests encoding of binding request and response messages."}, {"name": "testDecode", "primary_tested": ["Message.decode(byte[], int, int)"], "external_dependencies": {"modules": ["Message", "MsgFixture"], "class_members": [{"name": "bindingRequest", "type": "variable"}, {"name": "bindingResponse", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests decoding of binding request and response messages."}, {"name": "testEquals", "primary_tested": ["Message.equals(Object)"], "external_dependencies": {"modules": ["Message"], "class_members": [{"name": "bindingRequest", "type": "variable"}, {"name": "bindingResponse", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equality method of Message objects."}, {"name": "testGetAttributeCount", "primary_tested": ["Message.getAttributeCount()"], "external_dependencies": {"modules": ["Message"], "class_members": [{"name": "bindingRequest", "type": "variable"}, {"name": "bindingResponse", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests counting attributes in a Message object."}, {"name": "testRemoveAttribute", "primary_tested": ["Message.removeAttribute(int)"], "external_dependencies": {"modules": ["Message", "Attribute"], "class_members": [{"name": "bindingRequest", "type": "variable"}, {"name": "changeRequest", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests removing attributes from a Message object."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTcpTestRecvWindow.java", "testclass_name": "PseudoTcpTestRecvWindow", "dependencies": ["package org.ice4j.pseudotcp;", "import java.io.*;", "import java.util.*;", "import java.util.logging.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.pseudotcp.util.*;", "import org.junit.jupiter.api.*;"], "name": "PseudoTcpTestRecvWindow", "description": "Tests for the PseudoTCP receive window functionality.", "class_members": {"variables": [{"name": "logger", "type": "static final Logger"}, {"name": "send_stream", "type": "ByteFifoBuffer"}, {"name": "send_position", "type": "List<Integer>"}, {"name": "recv_stream", "type": "ByteFifoBuffer"}, {"name": "recv_position", "type": "List<Integer>"}, {"name": "writeTimer", "type": "Timer"}, {"name": "testDataSize", "type": "int"}], "methods": [{"name": "doTestTransfer", "signature": "void doTestTransfer(int)"}, {"name": "getShadowedBytes", "signature": "static int getShadowedBytes(int)"}, {"name": "readUntilIOPending", "signature": "void readUntilIOPending() throws IOException"}, {"name": "scheduleWriteAction", "signature": "void scheduleWriteAction(long)"}, {"name": "writeData", "signature": "void writeData() throws IOException"}, {"name": "estimateReceiveWindowSize", "signature": "int estimateReceiveWindowSize()"}, {"name": "estimateSendWindowSize", "signature": "int estimateSendWindowSize()"}, {"name": "onTcpReadable", "signature": "void onTcpReadable(PseudoTCPBase)"}, {"name": "onTcpWriteable", "signature": "void onTcpWriteable(PseudoTCPBase)"}, {"name": "setLocalOptSndBuf", "signature": "void setLocalOptSndBuf(int)"}, {"name": "getRemoteScaleFactor", "signature": "int getRemoteScaleFactor()"}]}, "fixtures": [], "test_cases": [{"name": "testGetShadowedBytes", "primary_tested": ["PseudoTcpTestRecvWindow.getShadowedBytes(int)"], "external_dependencies": {"modules": ["PseudoTcpTestRecvWindow"]}, "category": "unit", "description": "Tests the calculation of shadowed bytes due to scale factor."}, {"name": "testReceiveWindow", "primary_tested": ["PseudoTcpTestRecvWindow.doTestTransfer(int)"], "associated_methods": ["PseudoTcpTestRecvWindow.setLocalMtu(int)", "PseudoTcpTestRecvWindow.setRemoteMtu(int)", "PseudoTcpTestRecvWindow.setOptNagling(boolean)", "PseudoTcpTestRecvWindow.setOptAckDelay(int)"], "external_dependencies": {"modules": ["PseudoTcpTestRecvWindow"], "class_members": [{"name": "doTestTransfer", "type": "method"}]}, "category": "unit", "description": "Tests the functionality of the receive window expanding and contracting correctly."}, {"name": "testSetVerySmallSendWindowSize", "primary_tested": ["PseudoTcpTestRecvWindow.doTestTransfer(int)"], "associated_methods": ["PseudoTcpTestRecvWindow.setLocalMtu(int)", "PseudoTcpTestRecvWindow.setRemoteMtu(int)", "PseudoTcpTestRecvWindow.setOptNagling(boolean)", "PseudoTcpTestRecvWindow.setOptAckDelay(int)", "PseudoTcpTestRecvWindow.setOptSndBuf(int)", "PseudoTcpTestRecvWindow.estimateSendWindowSize()"], "external_dependencies": {"modules": ["PseudoTcpTestRecvWindow"], "class_members": [{"name": "doTestTransfer", "type": "method"}, {"name": "estimateSendWindowSize", "type": "method"}]}, "category": "unit", "description": "Tests setting the send window size to a very small value."}, {"name": "testSetReceiveWindowSize", "primary_tested": ["PseudoTcpTestRecvWindow.doTestTransfer(int)"], "associated_methods": ["PseudoTcpTestRecvWindow.setLocalMtu(int)", "PseudoTcpTestRecvWindow.setRemoteMtu(int)", "PseudoTcpTestRecvWindow.setOptNagling(boolean)", "PseudoTcpTestRecvWindow.setOptAckDelay(int)", "PseudoTcpTestRecvWindow.setLocalOptSndBuf(int)", "PseudoTcpTestRecvWindow.setRemoteOptRcvBuf(int)", "PseudoTcpTestRecvWindow.getRemoteScaleFactor()", "PseudoTcpTestRecvWindow.estimateReceiveWindowSize()"], "external_dependencies": {"modules": ["PseudoTcpTestRecvWindow"], "class_members": [{"name": "doTestTransfer", "type": "method"}, {"name": "estimateReceiveWindowSize", "type": "method"}, {"name": "getRemoteScaleFactor", "type": "method"}]}, "category": "unit", "description": "Tests setting the receive window size to a value other than default."}]}, {"file_path": "src/test/java/org/ice4j/attribute/ErrorCodeAttributeTest.java", "testclass_name": "ErrorCodeAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "ErrorCodeAttributeTest", "description": "Unit tests for the ErrorCodeAttribute class, focusing on its encoding, decoding, and error code handling functionalities.", "class_members": {"variables": [{"name": "errorCodeAttribute", "type": "ErrorCodeAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testErrorCodeAttribute", "primary_tested": ["ErrorCodeAttribute.getAttributeType()"], "external_dependencies": {"modules": ["ErrorCodeAttribute", "Attribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the construction of ErrorCodeAttribute and verifies its attribute type."}, {"name": "testDecodeAttributeBody", "primary_tested": ["ErrorCodeAttribute.decodeAttributeBody(byte[],char,char)"], "associated_methods": ["ErrorCodeAttribute.getErrorClass()", "ErrorCodeAttribute.getErrorNumber()", "ErrorCodeAttribute.getReasonPhrase()"], "external_dependencies": {"modules": ["ErrorCodeAttribute", "MsgFixture", "Attribute", "StunException"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of binary arrays into ErrorCodeAttribute and verifies the correctness of the decoded values."}, {"name": "testEncode", "primary_tested": ["ErrorCodeAttribute.encode()"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)", "ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute", "MsgFixture", "StunException"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the encoding of ErrorCodeAttribute into a binary array and verifies the correctness of the encoded values."}, {"name": "testEquals", "primary_tested": ["ErrorCodeAttribute.equals(Object)"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)"], "external_dependencies": {"modules": ["ErrorCodeAttribute", "MsgFixture", "StunException"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method of ErrorCodeAttribute against null, different, and identical objects."}, {"name": "testGetDataLength", "primary_tested": ["ErrorCodeAttribute.getDataLength()"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)", "ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["ErrorCodeAttribute", "MsgFixture", "StunException"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the calculation of the data length for ErrorCodeAttribute."}, {"name": "testGetErrorCode", "primary_tested": ["ErrorCodeAttribute.getErrorCode()"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(byte)", "ErrorCodeAttribute.setErrorNumber(byte)"], "external_dependencies": {"modules": ["ErrorCodeAttribute", "MsgFixture"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the calculation of the error code from error class and number."}, {"name": "testGetName", "primary_tested": ["ErrorCodeAttribute.getName()"], "external_dependencies": {"modules": ["ErrorCodeAttribute"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of the name for the ErrorCodeAttribute."}, {"name": "testSetErrorCode", "primary_tested": ["ErrorCodeAttribute.setErrorCode(char)"], "associated_methods": ["ErrorCodeAttribute.getErrorClass()", "ErrorCodeAttribute.getErrorNumber()"], "external_dependencies": {"modules": ["ErrorCodeAttribute", "MsgFixture"], "class_members": [{"name": "errorCodeAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setting of the error code and verifies the correctness of the error class and number."}]}, {"file_path": "src/test/java/org/ice4j/attribute/AttributeDecoderTest.java", "testclass_name": "AttributeDecoderTest", "dependencies": ["package org.ice4j.attribute;", "import org.ice4j.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "AttributeDecoderTest", "description": "Unit tests for decoding various attributes using the AttributeDecoder class.", "class_members": {"variables": [{"name": "msgFixture", "type": "MsgFixture"}, {"name": "expectedAttributeValue", "type": "byte[]"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testDecodeMappedAddress", "primary_tested": ["AttributeDecoder.decode(byte[],char,char)"], "associated_methods": ["MappedAddressAttribute.setAddress(TransportAddress)"], "external_dependencies": {"modules": ["MsgFixture", "MappedAddressAttribute", "TransportAddress", "Transport", "AttributeDecoder", "Attribute"], "class_members": [{"name": "msgFixture", "type": "variable"}], "project_specific_resources": ["MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS", "MsgFixture.ADDRESS_ATTRIBUTE_PORT"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of a MAPPED-ADDRESS attribute."}, {"name": "testDecodeMappedAddress_v6", "primary_tested": ["AttributeDecoder.decode(byte[],char,char)"], "associated_methods": ["MappedAddressAttribute.setAddress(TransportAddress)"], "external_dependencies": {"modules": ["MsgFixture", "MappedAddressAttribute", "TransportAddress", "Transport", "AttributeDecoder", "Attribute"], "class_members": [{"name": "msgFixture", "type": "variable"}], "project_specific_resources": ["MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS_V6", "MsgFixture.ADDRESS_ATTRIBUTE_PORT"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of a MAPPED-ADDRESS attribute for IPv6."}, {"name": "testDecodeChangeRequest", "primary_tested": ["AttributeDecoder.decode(byte[],char,char)"], "associated_methods": ["ChangeRequestAttribute.setChangeIpFlag(boolean)", "ChangeRequestAttribute.setChangePortFlag(boolean)"], "external_dependencies": {"modules": ["MsgFixture", "ChangeRequestAttribute", "AttributeDecoder", "Attribute"], "class_members": [{"name": "msgFixture", "type": "variable"}], "project_specific_resources": ["MsgFixture.CHANGE_IP_FLAG_1", "MsgFixture.CHANGE_PORT_FLAG_1"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of a CHANGE-REQUEST attribute."}, {"name": "testDecodeErrorCode", "primary_tested": ["AttributeDecoder.decode(byte[],char,char)"], "associated_methods": ["ErrorCodeAttribute.setErrorClass(int)", "ErrorCodeAttribute.setErrorNumber(int)", "ErrorCodeAttribute.setReasonPhrase(String)"], "external_dependencies": {"modules": ["MsgFixture", "ErrorCodeAttribute", "AttributeDecoder", "Attribute"], "class_members": [{"name": "msgFixture", "type": "variable"}], "project_specific_resources": ["MsgFixture.ERROR_CLASS", "MsgFixture.ERROR_NUMBER", "MsgFixture.REASON_PHRASE"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of an ERROR-CODE attribute."}, {"name": "testDecodeUnknownAttributes", "primary_tested": ["AttributeDecoder.decode(byte[],char,char)"], "associated_methods": ["UnknownAttributesAttribute.addAttributeID(int)"], "external_dependencies": {"modules": ["MsgFixture", "UnknownAttributesAttribute", "AttributeDecoder", "Attribute"], "class_members": [{"name": "msgFixture", "type": "variable"}], "project_specific_resources": ["MsgFixture.UNKNOWN_ATTRIBUTES_1ST_ATT", "MsgFixture.UNKNOWN_ATTRIBUTES_2ND_ATT", "MsgFixture.UNKNOWN_ATTRIBUTES_3D_ATT"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of UNKNOWN-ATTRIBUTES."}, {"name": "testDecodeUnknownOptionalAttribute", "primary_tested": ["AttributeDecoder.decode(byte[],char,char)"], "associated_methods": ["OptionalAttribute.setBody(byte[],int,int)"], "external_dependencies": {"modules": ["MsgFixture", "OptionalAttribute", "AttributeDecoder", "Attribute"], "class_members": [{"name": "msgFixture", "type": "variable"}, {"name": "expectedAttributeValue", "type": "variable"}], "project_specific_resources": ["MsgFixture.UNKNOWN_ATTRIBUTES_1ST_ATT", "MsgFixture.UNKNOWN_ATTRIBUTES_2ND_ATT", "MsgFixture.UNKNOWN_ATTRIBUTES_3D_ATT"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the decoding of an UNKNOWN_OPTIONAL attribute."}]}, {"file_path": "src/test/java/org/ice4j/MessageEventDispatchingTest.java", "testclass_name": "MessageEventDispatchingTest", "dependencies": ["package org.ice4j;", "import java.util.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.message.*;", "import org.ice4j.socket.*;", "import org.ice4j.stack.*;", "import org.junit.jupiter.api.*;"], "name": "MessageEventDispatchingTest", "description": "Tests for message event dispatching in the StunStack.", "class_members": {"variables": [{"name": "stunStack", "type": "StunStack"}, {"name": "clientAddress", "type": "TransportAddress"}, {"name": "serverAddress", "type": "TransportAddress"}, {"name": "serverAddress2", "type": "TransportAddress"}, {"name": "clientSock", "type": "IceSocketWrapper"}, {"name": "serverSock", "type": "IceSocketWrapper"}, {"name": "serverSock2", "type": "IceSocketWrapper"}, {"name": "bindingRequest", "type": "Request"}, {"name": "bindingResponse", "type": "Response"}, {"name": "requestCollector", "type": "PlainRequestCollector"}, {"name": "responseCollector", "type": "PlainResponseCollector"}], "methods": [], "nested_classes": [{"name": "PlainRequestCollector", "description": "Utility class to collect incoming requests."}, {"name": "PlainResponseCollector", "description": "Utility class to collect incoming responses."}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testClientTransactionTimeouts", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,AbstractResponseCollector)"], "external_dependencies": {"modules": ["StunStack", "StackProperties", "Request", "TransportAddress", "AbstractResponseCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests timeout events for client transactions."}, {"name": "testEventDispatchingUponIncomingRequests", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,AbstractResponseCollector)"], "external_dependencies": {"modules": ["StunStack", "Request", "TransportAddress", "AbstractResponseCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reception of message events upon incoming requests."}, {"name": "testSelectiveEventDispatchingUponIncomingRequests", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,AbstractResponseCollector)"], "external_dependencies": {"modules": ["StunStack", "Request", "TransportAddress", "AbstractResponseCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "serverAddress2", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests selective event dispatching upon incoming requests."}, {"name": "testServerResponseRetransmissions", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,AbstractResponseCollector)", "StunStack.sendResponse(byte[],Response,TransportAddress,TransportAddress)"], "external_dependencies": {"modules": ["StunStack", "Request", "Response", "TransportAddress", "AbstractResponseCollector", "StunMessageEvent"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "bindingResponse", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests server response retransmissions."}]}, {"file_path": "src/test/java/org/ice4j/attribute/RequestedAddressFamilyAttributeTest.java", "testclass_name": "RequestedAddressFamilyAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "RequestedAddressFamilyAttributeTest", "description": "Unit tests for the RequestedAddressFamilyAttribute class, focusing on data length calculation, name retrieval, equality checks, decoding, encoding, and family value validation.", "class_members": {"variables": [{"name": "requestedAddressFamilyAttribute", "type": "RequestedAddressFamilyAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testGetDataLength", "primary_tested": ["RequestedAddressFamilyAttribute.getDataLength()"], "associated_methods": ["RequestedAddressFamilyAttribute.setFamily(char)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether data length is properly calculated."}, {"name": "testGetName", "primary_tested": ["RequestedAddressFamilyAttribute.getName()"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests getting the name."}, {"name": "testEqualsObject", "primary_tested": ["RequestedAddressFamilyAttribute.equals(Object)"], "associated_methods": ["RequestedAddressFamilyAttribute.setFamily(char)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method against a null, a different and an identical object."}, {"name": "testDecodeAttributeBodyV4", "primary_tested": ["RequestedAddressFamilyAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture", "Attribute", "StunException"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test whether sample binary arrays are correctly decoded."}, {"name": "testDecodeAttributeBodyV6", "primary_tested": ["RequestedAddressFamilyAttribute.decodeAttributeBody(byte[],char,char)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture", "Attribute", "StunException"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test whether sample binary arrays are correctly decoded."}, {"name": "testEncodeV4", "primary_tested": ["RequestedAddressFamilyAttribute.encode()"], "associated_methods": ["RequestedAddressFamilyAttribute.setFamily(char)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test whether attributes are properly encoded."}, {"name": "testEncodeV6", "primary_tested": ["RequestedAddressFamilyAttribute.encode()"], "associated_methods": ["RequestedAddressFamilyAttribute.setFamily(char)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test whether attributes are properly encoded."}, {"name": "testGetFamily", "primary_tested": ["RequestedAddressFamilyAttribute.getFamily()"], "associated_methods": ["RequestedAddressFamilyAttribute.setFamily(char)"], "external_dependencies": {"modules": ["RequestedAddressFamilyAttribute", "MsgFixture"], "class_members": [{"name": "requestedAddressFamilyAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the address family is always 0x01 or 0x02."}]}, {"file_path": "src/test/java/org/ice4j/stack/ShallowStackTest.java", "testclass_name": "ShallowStackTest", "dependencies": [" package org.ice4j.stack;", "import java.net.*;", "import java.util.concurrent.*;", "import java.util.logging.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.message.*;", "import org.ice4j.socket.*;", "import org.jitsi.config.*;", "import org.junit.jupiter.api.*;"], "name": "ShallowStackTest", "description": "Unit tests for the ShallowStack functionality, including sending and receiving STUN requests and responses.", "class_members": {"variables": [{"name": "logger", "type": "static final Logger"}, {"name": "stunStack", "type": "StunStack"}, {"name": "msgFixture", "type": "MsgFixture"}, {"name": "dummyServerAddress", "type": "TransportAddress"}, {"name": "localAddress", "type": "TransportAddress"}, {"name": "dgramCollector", "type": "final DatagramCollector"}, {"name": "localSock", "type": "IceSocketWrapper"}, {"name": "dummyServerSocket", "type": "DatagramSocket"}], "methods": [{"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "tearDown", "signature": "void tearDown() throws Exception"}], "nested_classes": [{"name": "SimpleResponseCollector", "description": "A utility class for asynchronously collecting responses."}, {"name": "SimpleRequestCollector", "description": "A utility class for asynchronously collecting requests."}]}, "fixtures": ["setupConfig", "resetConfig", "setUp", "tearDown"], "test_cases": [{"name": "testSendRequest", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "external_dependencies": {"modules": ["StunStack", "MessageFactory", "DatagramCollector", "Request", "SimpleResponseCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "dummyServerAddress", "type": "variable"}, {"name": "localAddress", "type": "variable"}, {"name": "dgramCollector", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests sending a binding request using the stack to a bare socket and verifies its reception and content."}, {"name": "testReceiveRequest", "primary_tested": ["StunStack.addRequestListener(RequestListener)"], "external_dependencies": {"modules": ["StunStack", "SimpleRequestCollector", "DatagramSocket", "Request"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "dummyServerSocket", "type": "variable"}, {"name": "localAddress", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests sending a byte array containing a binding request through a datagram socket and verifies that the stack receives it."}, {"name": "testSendResponse", "primary_tested": ["StunStack.sendResponse(byte[],Response,TransportAddress,TransportAddress)"], "associated_methods": ["StunStack.addRequestListener(RequestListener)"], "external_dependencies": {"modules": ["StunStack", "MessageFactory", "SimpleRequestCollector", "DatagramSocket", "Request", "Response", "DatagramCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "dummyServerSocket", "type": "variable"}, {"name": "localAddress", "type": "variable"}, {"name": "msgFixture", "type": "variable"}, {"name": "dgramCollector", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests sending a byte array containing a binding request, verifies its reception, and then sends a response using the stack, verifying its reception."}, {"name": "testReceiveResponse", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "external_dependencies": {"modules": ["StunStack", "MessageFactory", "SimpleResponseCollector", "DatagramSocket", "Request", "Response"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "dummyServerSocket", "type": "variable"}, {"name": "localAddress", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests sending a binding request, creating a response, and verifying its reception."}, {"name": "testRetransmissionOriginalWait", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "external_dependencies": {"modules": ["StunStack", "MessageFactory", "DatagramCollector", "Request", "SimpleResponseCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "dummyServerAddress", "type": "variable"}, {"name": "localAddress", "type": "variable"}, {"name": "dgramCollector", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retransmission mechanism by setting a custom retransmission wait time and verifying it."}]}, {"file_path": "src/test/java/org/ice4j/stunclient/StunAddressDiscovererTest_v4v6.java", "testclass_name": "StunAddressDiscovererTest_v4v6", "dependencies": ["package org.ice4j.stunclient;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.message.*;", "import org.ice4j.stack.*;", "import org.junit.jupiter.api.*;"], "name": "StunAddressDiscovererTest_v4v6", "description": "Tests for the StunAddressDiscoverer class, focusing on recognizing different NAT types and public addresses in IPv4 and IPv6 environments.", "class_members": {"variables": [{"name": "stunAddressDiscoverer_v6", "type": "NetworkConfigurationDiscoveryProcess"}, {"name": "stunAddressDiscoverer_v4", "type": "NetworkConfigurationDiscoveryProcess"}, {"name": "discovererAddress_v4", "type": "TransportAddress"}, {"name": "discovererAddress_v6", "type": "TransportAddress"}, {"name": "responseServer_v6", "type": "ResponseSequenceServer"}, {"name": "responseServer_v4", "type": "ResponseSequenceServer"}, {"name": "responseServerAddress_v6", "type": "TransportAddress"}, {"name": "responseServerAddress_v4", "type": "TransportAddress"}, {"name": "mappedClientAddress_v6", "type": "TransportAddress"}, {"name": "mappedClientAddress_v6_Port2", "type": "TransportAddress"}, {"name": "mappedClientAddress_v4", "type": "TransportAddress"}, {"name": "mappedClientAddress_v4_Port2", "type": "TransportAddress"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testRecognizeSymmetricNat_Local_v6_Public_v4", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["MessageFactory.create3489BindingResponse(TransportAddress,TransportAddress,TransportAddress)", "ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer", "StunDiscoveryReport", "TransportAddress"], "class_members": [{"name": "stunAddressDiscoverer_v6", "type": "variable"}, {"name": "responseServer_v6", "type": "variable"}, {"name": "mappedClientAddress_v4", "type": "variable"}, {"name": "mappedClientAddress_v4_Port2", "type": "variable"}, {"name": "responseServerAddress_v6", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Symmetric NAT type in an IPv6 local and IPv4 public environment."}, {"name": "testRecognizeSymmetricNat_Local_v4_Public_v6", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["MessageFactory.create3489BindingResponse(TransportAddress,TransportAddress,TransportAddress)", "ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer", "StunDiscoveryReport", "TransportAddress"], "class_members": [{"name": "stunAddressDiscoverer_v4", "type": "variable"}, {"name": "responseServer_v4", "type": "variable"}, {"name": "mappedClientAddress_v6", "type": "variable"}, {"name": "mappedClientAddress_v6_Port2", "type": "variable"}, {"name": "responseServerAddress_v4", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Symmetric NAT type in an IPv4 local and IPv6 public environment."}, {"name": "testRecognizeFullCone_Local_v6_Public_v4", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["MessageFactory.create3489BindingResponse(TransportAddress,TransportAddress,TransportAddress)", "ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer", "StunDiscoveryReport", "TransportAddress"], "class_members": [{"name": "stunAddressDiscoverer_v6", "type": "variable"}, {"name": "responseServer_v6", "type": "variable"}, {"name": "mappedClientAddress_v4", "type": "variable"}, {"name": "responseServerAddress_v6", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Full Cone NAT type in an IPv6 local and IPv4 public environment."}, {"name": "testRecognizeFullCone_Local_v4_Public_v6", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["MessageFactory.create3489BindingResponse(TransportAddress,TransportAddress,TransportAddress)", "ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer", "StunDiscoveryReport", "TransportAddress"], "class_members": [{"name": "stunAddressDiscoverer_v4", "type": "variable"}, {"name": "responseServer_v4", "type": "variable"}, {"name": "mappedClientAddress_v6", "type": "variable"}, {"name": "responseServerAddress_v4", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Full Cone NAT type in an IPv4 local and IPv6 public environment."}]}, {"file_path": "src/test/java/org/ice4j/attribute/UnknownAttributesAttributeTest.java", "testclass_name": "UnknownAttributesAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "UnknownAttributesAttributeTest", "description": "Unit tests for the UnknownAttributesAttribute class, focusing on attribute type, attribute ID addition, decoding, encoding, equality, attribute retrieval, count, iteration, data length, and name.", "class_members": {"variables": [{"name": "unknownAttributesAttribute", "type": "UnknownAttributesAttribute"}, {"name": "binMessagesFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testUnknownAttributesAttribute", "primary_tested": ["UnknownAttributesAttribute.getAttributeType()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute", "Attribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that the constructed object has the correct (UNKNOWN-ATTRIBUTES) type."}, {"name": "testAddAttributeID", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getAttribute(int)", "UnknownAttributesAttribute.getAttributeCount()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that the passed attribute id is added to the list of attributes and that a second addition of the same id would not augment the attribute count."}, {"name": "testDecodeAttributeBody", "primary_tested": ["UnknownAttributesAttribute.decodeAttributeBody(byte[],int,char)", "UnknownAttributesAttribute.contains(char)", "UnknownAttributesAttribute.getAttributeCount()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute", "Attribute", "MsgFixture", "StunException"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}, {"name": "binMessagesFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether a sample binary array is properly decoded."}, {"name": "testEncode", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.encode()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute", "MsgFixture"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}, {"name": "binMessagesFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Creates a new UnknownAttributesAttribute, encodes it, and asserts equality with binMessagesFixture.unknownAttsEncodeExpectedResult."}, {"name": "testEquals", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.equals(Object)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method against a null, a different, and an identical object."}, {"name": "testGetAttribute", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getAttribute(int)"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that getAttribute() returns the correct attribute id, preserving entry order."}, {"name": "testGetAttributeCount", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getAttributeCount()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Adds some attributes and tests whether their number is properly calculated. Tests duplicate id handling as well."}, {"name": "testGetAttributes", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getAttributes()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Same as testGetAttributeID, only attribute attributes are extracted through the getAttributes()'s iterator."}, {"name": "testGetDataLength", "primary_tested": ["UnknownAttributesAttribute.addAttributeID(char)", "UnknownAttributesAttribute.getDataLength()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Adds a fixed number of attributes and checks data length accordingly. Test is first performed for an odd number of attributes and then again (after adding another attribute id). Both results should be the same."}, {"name": "testGetName", "primary_tested": ["UnknownAttributesAttribute.getName()"], "external_dependencies": {"modules": ["UnknownAttributesAttribute"], "class_members": [{"name": "unknownAttributesAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether getName returns a relevant name."}]}, {"file_path": "src/test/java/org/ice4j/attribute/AddressAttributeTest.java", "testclass_name": "AddressAttributeTest", "dependencies": ["package org.ice4j.attribute;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.junit.jupiter.api.*;"], "name": "AddressAttributeTest", "description": "Unit tests for AddressAttribute and its descendants, focusing on type, name, xor-ing, decoding, encoding, equality, data length, and family.", "class_members": {"variables": [{"name": "addressAttribute", "type": "AddressAttribute"}, {"name": "msgFixture", "type": "MsgFixture"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testAddressAttributeDescendants", "primary_tested": ["AddressAttribute.getAttributeType()", "AddressAttribute.getName()"], "external_dependencies": {"modules": ["MappedAddressAttribute", "SourceAddressAttribute", "ChangedAddressAttribute", "ResponseAddressAttribute", "ReflectedFromAttribute", "XorMappedAddressAttribute", "AlternateServerAttribute", "XorPeerAddressAttribute", "XorRelayedAddressAttribute"], "class_members": [{"name": "addressAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that AddressAttribute descendants have correctly set types and names."}, {"name": "testXorMappedAddressXoring_v4", "primary_tested": ["XorMappedAddressAttribute.applyXor(byte[])"], "external_dependencies": {"modules": ["XorMappedAddressAttribute", "TransportAddress"], "class_members": [{"name": "addressAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that xorred address-es are properly xor-ed for IPv4 addresses."}, {"name": "testXorMappedAddressXoring_v6", "primary_tested": ["XorMappedAddressAttribute.applyXor(byte[])"], "external_dependencies": {"modules": ["XorMappedAddressAttribute", "TransportAddress"], "class_members": [{"name": "addressAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that xorred address-es are properly xor-ed for IPv6 addresses."}, {"name": "testDecodeAttributeBody", "primary_tested": ["AddressAttribute.decodeAttributeBody(byte[], char, char)"], "external_dependencies": {"modules": ["AddressAttribute", "MsgFixture"], "class_members": [{"name": "addressAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether sample binary arrays are correctly decoded."}, {"name": "testDecodeAttributeBodyv6", "primary_tested": ["AddressAttribute.decodeAttributeBody(byte[], char, char)"], "external_dependencies": {"modules": ["AddressAttribute", "MsgFixture"], "class_members": [{"name": "addressAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether sample binary arrays are correctly decoded for IPv6."}, {"name": "testEncode", "primary_tested": ["AddressAttribute.encode()"], "external_dependencies": {"modules": ["AddressAttribute", "MsgFixture", "TransportAddress"], "class_members": [{"name": "addressAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether attributes are properly encoded."}, {"name": "testEncodev6", "primary_tested": ["AddressAttribute.encode()"], "external_dependencies": {"modules": ["AddressAttribute", "MsgFixture", "TransportAddress"], "class_members": [{"name": "addressAttribute", "type": "variable"}, {"name": "msgFixture", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether attributes are properly encoded for IPv6."}, {"name": "testEquals", "primary_tested": ["AddressAttribute.equals(Object)"], "external_dependencies": {"modules": ["AddressAttribute", "MappedAddressAttribute", "TransportAddress"], "class_members": [{"name": "addressAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method against a null, a different, and an identical object."}, {"name": "testGetDataLength", "primary_tested": ["AddressAttribute.getDataLength()"], "external_dependencies": {"modules": ["AddressAttribute", "TransportAddress"], "class_members": [{"name": "addressAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether data length is properly calculated."}, {"name": "testGetFamily", "primary_tested": ["AddressAttribute.getFamily()"], "external_dependencies": {"modules": ["AddressAttribute", "TransportAddress"], "class_members": [{"name": "addressAttribute", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the address family is always 1 for IPv4 and 2 for IPv6."}]}, {"file_path": "src/test/java/org/ice4j/stunclient/StunAddressDiscovererTest_v6.java", "testclass_name": "StunAddressDiscovererTest_v6", "dependencies": ["package org.ice4j.stunclient;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.message.*;", "import org.ice4j.stack.*;", "import org.junit.jupiter.api.*;"], "name": "StunAddressDiscovererTest_v6", "description": "Unit tests for the StunAddressDiscoverer to determine network configurations and NAT types.", "class_members": {"variables": [{"name": "stunAddressDiscoverer", "type": "NetworkConfigurationDiscoveryProcess"}, {"name": "discovererAddress", "type": "TransportAddress"}, {"name": "responseServer", "type": "ResponseSequenceServer"}, {"name": "responseServerAddress", "type": "TransportAddress"}, {"name": "mappedClientAddress", "type": "TransportAddress"}, {"name": "mappedClientAddressPort2", "type": "TransportAddress"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testRecognizeBlockedUDP", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a blocked UDP environment."}, {"name": "testRecognizeSymmetricNat", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}, {"name": "mappedClientAddressPort2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Symmetric NAT environment."}, {"name": "testRecognizePortRestrictedCone", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Port Restricted Cone NAT environment."}, {"name": "testRecognizeRestrictedCone", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Restricted Cone NAT environment."}, {"name": "testRecognizeFullCone", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a Full Cone NAT environment."}, {"name": "testRecognizeUdpSymmetricFirewall", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "discovererAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of a UDP Symmetric Firewall environment."}, {"name": "testRecognizeOpenInternet", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "discovererAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the recognition of an Open Internet environment."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/util/ByteFifoBufferTest.java", "testclass_name": "ByteFifoBufferTest", "dependencies": ["package org.ice4j.pseudotcp.util;", "import java.nio.*;", "import java.util.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.*;"], "name": "ByteFifoBufferTest", "description": "Unit tests for ByteFifoBuffer class, covering various methods like length, read, write, etc.", "class_members": {"methods": [{"name": "getWData", "signature": "byte[] getWData(int)"}]}, "fixtures": [], "test_cases": [{"name": "testLength", "primary_tested": ["ByteFifoBuffer.length()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "getWData", "type": "method"}]}, "category": "unit", "description": "Tests the length method of ByteFifoBuffer."}, {"name": "testRead", "primary_tested": ["ByteFifoBuffer.read(byte[],int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "getWData", "type": "method"}]}, "category": "unit", "description": "Tests the read method of ByteFifoBuffer."}, {"name": "testReadWithOffset", "primary_tested": ["ByteFifoBuffer.read(byte[],int,int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "getWData", "type": "method"}]}, "category": "unit", "description": "Tests the read method with an offset for destination buffer."}, {"name": "testGetWriteRemaining", "primary_tested": ["ByteFifoBuffer.getWriteRemaining()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "getWData", "type": "method"}]}, "category": "unit", "description": "Tests the getWriteRemaining method of ByteFifoBuffer."}, {"name": "testGetBuffered", "primary_tested": ["ByteFifoBuffer.getBuffered()"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "getWData", "type": "method"}]}, "category": "unit", "description": "Tests the getBuffered method of ByteFifoBuffer."}, {"name": "testWrite", "primary_tested": ["ByteFifoBuffer.write(byte[],int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "getWData", "type": "method"}]}, "category": "unit", "description": "Tests the write method of ByteFifoBuffer."}, {"name": "testWriteWithOffset", "primary_tested": ["ByteFifoBuffer.write(byte[],int,int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "getWData", "type": "method"}]}, "category": "unit", "description": "Tests the write method with an offset."}, {"name": "testConsumeWriteBuffer", "primary_tested": ["ByteFifoBuffer.consumeWriteBuffer(int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"]}, "category": "unit", "description": "Tests the consumeWriteBuffer method of ByteFifoBuffer."}, {"name": "testSetCapacity", "primary_tested": ["ByteFifoBuffer.setCapacity(int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "getWData", "type": "method"}]}, "category": "unit", "description": "Tests the setCapacity method of ByteFifoBuffer."}, {"name": "testConsumeReadData", "primary_tested": ["ByteFifoBuffer.consumeReadData(int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "getWData", "type": "method"}]}, "category": "unit", "description": "Tests the consumeReadData method of ByteFifoBuffer."}, {"name": "testReadOffset", "primary_tested": ["ByteFifoBuffer.readOffset(byte[],int,int,int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "getWData", "type": "method"}]}, "category": "unit", "description": "Tests the readOffset method of ByteFifoBuffer."}, {"name": "testWriteOffset", "primary_tested": ["ByteFifoBuffer.writeOffset(byte[],int,int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "getWData", "type": "method"}]}, "category": "unit", "description": "Tests the writeOffset method of ByteFifoBuffer."}, {"name": "testWriteReadWriteRead", "primary_tested": ["ByteFifoBuffer.getWriteRemaining()", "ByteFifoBuffer.writeOffset(byte[],int,int)", "ByteFifoBuffer.consumeWriteBuffer(int)", "ByteFifoBuffer.getBuffered()", "ByteFifoBuffer.readOffset(byte[],int,int,int)", "ByteFifoBuffer.consumeReadData(int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "getWData", "type": "method"}]}, "category": "unit", "description": "Tests a sequence of write, read, and readOffset operations."}, {"name": "testSomeMultiTest", "primary_tested": ["ByteFifoBuffer.writeOffset(byte[],int,int)", "ByteFifoBuffer.consumeWriteBuffer(int)", "ByteFifoBuffer.readOffset(byte[],int,int,int)"], "external_dependencies": {"modules": ["ByteFifoBuffer"], "class_members": [{"name": "getWData", "type": "method"}]}, "category": "unit", "description": "Tests multiple writeOffset and readOffset operations."}]}, {"file_path": "src/test/java/org/ice4j/stunclient/StunAddressDiscovererTest.java", "testclass_name": "StunAddressDiscovererTest", "dependencies": ["package org.ice4j.stunclient;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.*;", "import org.ice4j.message.*;", "import org.ice4j.stack.*;", "import org.junit.jupiter.api.*;"], "name": "StunAddressDiscovererTest", "description": "Unit tests for the StunAddressDiscoverer class, which determines the NAT type and public address of the client.", "class_members": {"variables": [{"name": "stunAddressDiscoverer", "type": "NetworkConfigurationDiscoveryProcess"}, {"name": "discovererAddress", "type": "TransportAddress"}, {"name": "responseServer", "type": "ResponseSequenceServer"}, {"name": "responseServerAddress", "type": "TransportAddress"}, {"name": "mappedClientAddress", "type": "TransportAddress"}, {"name": "mappedClientAddressPort2", "type": "TransportAddress"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testRecognizeBlockedUDP", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the scenario where the STUN client concludes that UDP is blocked."}, {"name": "testRecognizeSymmetricNat", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}, {"name": "mappedClientAddressPort2", "type": "variable"}, {"name": "responseServerAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the scenario where the STUN client concludes it is behind a Symmetric NAT."}, {"name": "testRecognizePortRestrictedCone", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}, {"name": "responseServerAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the scenario where the STUN client concludes it is behind a Port Restricted Cone NAT."}, {"name": "testRecognizeRestrictedCone", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}, {"name": "responseServerAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the scenario where the STUN client concludes it is behind a Restricted Cone NAT."}, {"name": "testRecognizeFullCone", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "mappedClientAddress", "type": "variable"}, {"name": "responseServerAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the scenario where the STUN client concludes it is behind a Full Cone NAT."}, {"name": "testRecognizeUdpSymmetricFirewall", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "discovererAddress", "type": "variable"}, {"name": "responseServerAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the scenario where the STUN client concludes it is behind a UDP Symmetric Firewall."}, {"name": "testRecognizeOpenInternet", "primary_tested": ["NetworkConfigurationDiscoveryProcess.determineAddress()"], "associated_methods": ["ResponseSequenceServer.addMessage(Response)"], "external_dependencies": {"modules": ["StunDiscoveryReport", "NetworkConfigurationDiscoveryProcess", "MessageFactory", "ResponseSequenceServer"], "class_members": [{"name": "stunAddressDiscoverer", "type": "variable"}, {"name": "responseServer", "type": "variable"}, {"name": "discovererAddress", "type": "variable"}, {"name": "responseServerAddress", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the scenario where the STUN client concludes it is on an Open Internet."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTcpTestPingPong.java", "testclass_name": "PseudoTcpTestPingPong", "dependencies": ["package org.ice4j.pseudotcp;", "import java.io.*;", "import java.util.logging.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.pseudotcp.util.*;", "import org.junit.jupiter.api.*;"], "name": "PseudoTcpTestPingPong", "description": "Tests for ping-pong (request/response) scenarios using PseudoTCPBase.", "class_members": {"variables": [{"name": "logger", "type": "static final Logger"}, {"name": "sender", "type": "PseudoTCPBase"}, {"name": "receiver", "type": "PseudoTCPBase"}, {"name": "bytesPerSend", "type": "int"}, {"name": "iterationsRemaining", "type": "int"}, {"name": "send_stream", "type": "ByteFifoBuffer"}, {"name": "recv_stream", "type": "ByteFifoBuffer"}], "methods": [{"name": "setBytesPerSend", "signature": "void setBytesPerSend(int)"}, {"name": "doTestPingPong", "signature": "void doTestPingPong(int, int)"}, {"name": "onTcpReadable", "signature": "void onTcpReadable(PseudoTCPBase)"}, {"name": "onTcpWriteable", "signature": "void onTcpWriteable(PseudoTCPBase)"}, {"name": "readData", "signature": "void readData() throws IOException"}, {"name": "writeData", "signature": "void writeData() throws IOException"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPingPong1xMtu", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "associated_methods": [], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "setLocalMtu", "type": "method"}, {"name": "setRemoteMtu", "type": "method"}, {"name": "doTestPingPong", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Test sending <= 1x MTU of data in each ping/pong. Should take <10ms."}, {"name": "testPingPong3xMtu", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "associated_methods": [], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "setLocalMtu", "type": "method"}, {"name": "setRemoteMtu", "type": "method"}, {"name": "doTestPingPong", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Test sending 2x-3x MTU of data in each ping/pong. Should take <10ms."}, {"name": "testPingPong2xMtu", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "associated_methods": [], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "setLocalMtu", "type": "method"}, {"name": "setRemoteMtu", "type": "method"}, {"name": "doTestPingPong", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Test sending 1x-2x MTU of data in each ping/pong. Should take ~1s, due to interaction between Nagling and Delayed ACK."}, {"name": "testPingPong2xMtuWithAckDelayOff", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "associated_methods": [], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "setLocalMtu", "type": "method"}, {"name": "setRemoteMtu", "type": "method"}, {"name": "setOptAckDelay", "type": "method"}, {"name": "doTestPingPong", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Test sending 1x-2x MTU of data in each ping/pong with Delayed ACK off. Should take <10ms."}, {"name": "testPingPong2xMtuWithNaglingOff", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "associated_methods": [], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "setLocalMtu", "type": "method"}, {"name": "setRemoteMtu", "type": "method"}, {"name": "setOptNagling", "type": "method"}, {"name": "doTestPingPong", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Test sending 1x-2x MTU of data in each ping/pong with Nagling off. Should take <10ms."}, {"name": "testPingPongShortSegments", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "associated_methods": [], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "setLocalMtu", "type": "method"}, {"name": "setRemoteMtu", "type": "method"}, {"name": "setOptAckDelay", "type": "method"}, {"name": "setBytesPerSend", "type": "method"}, {"name": "doTestPingPong", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Test sending a ping as pair of short (non-full) segments. Should take ~1s, due to Delayed ACK interaction with Nagling."}, {"name": "testPingPongShortSegmentsWithNaglingOff", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "associated_methods": [], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "setLocalMtu", "type": "method"}, {"name": "setRemoteMtu", "type": "method"}, {"name": "setOptNagling", "type": "method"}, {"name": "setBytesPerSend", "type": "method"}, {"name": "doTestPingPong", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Test sending ping as a pair of short (non-full) segments, with Nagling off. Should take <10ms."}, {"name": "testPingPongShortSegmentsWithAckDelayOff", "primary_tested": ["PseudoTCPBase.doTestPingPong(int, int)"], "associated_methods": [], "external_dependencies": {"modules": ["PseudoTcpTestPingPong", "PseudoTCPBase"], "class_members": [{"name": "setLocalMtu", "type": "method"}, {"name": "setRemoteMtu", "type": "method"}, {"name": "setBytesPerSend", "type": "method"}, {"name": "setOptAckDelay", "type": "method"}, {"name": "doTestPingPong", "type": "method"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Test sending <= 1x MTU of data ping/pong, in two segments, no Delayed ACK. Should take ~1s."}]}, {"file_path": "src/test/java/org/ice4j/TransactionSupportTests.java", "testclass_name": "TransactionSupportTests", "dependencies": ["package org.ice4j;", "import java.net.*;", "import java.util.*;", "import static org.junit.jupiter.api.Assertions.*;", "import org.ice4j.message.*;", "import org.ice4j.socket.*;", "import org.ice4j.stack.*;", "import org.junit.jupiter.api.*;"], "name": "TransactionSupportTests", "description": "Tests for transaction support in the STUN stack, focusing on retransmissions and configuration parameters.", "class_members": {"variables": [{"name": "clientAddress", "type": "TransportAddress"}, {"name": "serverAddress", "type": "TransportAddress"}, {"name": "clientSock", "type": "IceSocketWrapper"}, {"name": "serverSock", "type": "IceSocketWrapper"}, {"name": "stunStack", "type": "StunStack"}, {"name": "bindingRequest", "type": "Request"}, {"name": "bindingResponse", "type": "Response"}, {"name": "requestCollector", "type": "PlainRequestCollector"}, {"name": "responseCollector", "type": "PlainResponseCollector"}], "methods": [], "nested_classes": [{"name": "PlainRequestCollector", "description": "Utility for asynchronous collection of requests."}, {"name": "PlainResponseCollector", "description": "Utility for asynchronously collecting responses."}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "testClientRetransmissions", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "associated_methods": ["PlainRequestCollector.getRequestsForTransaction(byte[])"], "external_dependencies": {"modules": ["StunStack", "Request", "TransportAddress", "ResponseCollector", "PlainRequestCollector", "StackProperties"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}], "project_specific_resources": ["StackProperties.MAX_CTRAN_RETRANSMISSIONS", "StackProperties.MAX_CTRAN_RETRANS_TIMER"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that requests are retransmitted if no response is received."}, {"name": "testServerRetransmissionHiding", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "associated_methods": ["PlainRequestCollector.getRequestsForTransaction(byte[])"], "external_dependencies": {"modules": ["StunStack", "Request", "TransportAddress", "ResponseCollector", "PlainRequestCollector", "StackProperties"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}], "project_specific_resources": ["StackProperties.MAX_CTRAN_RETRANSMISSIONS"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that retransmissions are not seen by the server user and that it only gets a single request."}, {"name": "testServerResponseRetransmissions", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)", "StunStack.sendResponse(byte[],Response,TransportAddress,TransportAddress)"], "associated_methods": ["PlainRequestCollector.getRequestsForTransaction(byte[])", "PlainResponseCollector.receivedResponses"], "external_dependencies": {"modules": ["StunStack", "Request", "Response", "TransportAddress", "ResponseCollector", "PlainRequestCollector", "PlainResponseCollector", "StackProperties"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "bindingResponse", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}], "project_specific_resources": ["StackProperties.MAX_CTRAN_RETRANSMISSIONS", "StackProperties.MAX_CTRAN_RETRANS_TIMER", "StackProperties.KEEP_CRANS_AFTER_A_RESPONSE"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that once a request has been answered by the server, retransmissions of this request are not propagated to the UA and are automatically handled with a retransmission of the last seen response."}, {"name": "testUniqueIDs", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)", "StunStack.sendResponse(byte[],Response,TransportAddress,TransportAddress)"], "associated_methods": ["PlainRequestCollector.getRequestsForTransaction(byte[])"], "external_dependencies": {"modules": ["StunStack", "Request", "Response", "TransportAddress", "ResponseCollector", "PlainRequestCollector"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "bindingResponse", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that transaction IDs are unique."}, {"name": "testClientTransactionMaxRetransmisssionsConfigurationParameter", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "associated_methods": ["PlainRequestCollector.getRequestsForTransaction(byte[])"], "external_dependencies": {"modules": ["StunStack", "Request", "TransportAddress", "ResponseCollector", "PlainRequestCollector", "StackProperties"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}], "project_specific_resources": ["StackProperties.MAX_CTRAN_RETRANSMISSIONS", "StackProperties.PROPAGATE_RECEIVED_RETRANSMISSIONS"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether the properties for configuring the maximum number of retransmissions in a transaction are working properly."}, {"name": "testMinWaitIntervalConfigurationParameter", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "associated_methods": ["PlainRequestCollector.getRequestsForTransaction(byte[])"], "external_dependencies": {"modules": ["StunStack", "Request", "TransportAddress", "ResponseCollector", "PlainRequestCollector", "StackProperties"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}], "project_specific_resources": ["StackProperties.FIRST_CTRAN_RETRANS_AFTER", "StackProperties.PROPAGATE_RECEIVED_RETRANSMISSIONS"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether the properties for configuring the minimum transaction wait interval is working properly."}, {"name": "testMaxWaitIntervalConfigurationParameter", "primary_tested": ["StunStack.sendRequest(Request,TransportAddress,TransportAddress,ResponseCollector)"], "associated_methods": ["PlainRequestCollector.getRequestsForTransaction(byte[])"], "external_dependencies": {"modules": ["StunStack", "Request", "TransportAddress", "ResponseCollector", "PlainRequestCollector", "StackProperties"], "class_members": [{"name": "stunStack", "type": "variable"}, {"name": "bindingRequest", "type": "variable"}, {"name": "serverAddress", "type": "variable"}, {"name": "clientAddress", "type": "variable"}, {"name": "responseCollector", "type": "variable"}, {"name": "requestCollector", "type": "variable"}], "project_specific_resources": ["StackProperties.MAX_CTRAN_RETRANS_TIMER", "StackProperties.MAX_CTRAN_RETRANSMISSIONS", "StackProperties.PROPAGATE_RECEIVED_RETRANSMISSIONS"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests whether the properties for configuring the maximum transaction wait interval is working properly."}]}, {"file_path": "src/test/java/org/ice4j/pseudotcp/PseudoTcpTestTransfer.java", "testclass_name": "PseudoTcpTestTransfer", "dependencies": ["package org.ice4j.pseudotcp;", "import static org.junit.jupiter.api.Assertions.*;", "import java.io.*;", "import java.util.logging.*;", "import org.junit.jupiter.api.*;"]}]