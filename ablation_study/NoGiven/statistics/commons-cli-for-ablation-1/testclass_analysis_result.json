[{"file_path": "src/test/java/org/apache/commons/cli/UtilTest.java", "testclass_name": "UtilTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.Test;"], "name": "UtilTest", "description": "Unit tests for the Util class, focusing on methods that strip leading and trailing quotes and hyphens.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testStripLeadingAndTrailingQuotes", "primary_tested": ["Util.stripLeadingAndTrailingQuotes(String)"], "external_dependencies": {"modules": ["Util"]}, "category": "unit", "description": "Tests the functionality of stripping leading and trailing quotes from a string."}, {"name": "testStripLeadingHyphens", "primary_tested": ["Util.stripLeadingHyphens(String)"], "external_dependencies": {"modules": ["Util"]}, "category": "unit", "description": "Tests the functionality of stripping leading hyphens from a string."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI18Test.java", "testclass_name": "BugCLI18Test", "dependencies": ["package org.apache.commons.cli.bug;", "import java.io.PrintWriter;", "import java.io.StringWriter;", "import org.apache.commons.cli.HelpFormatter;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.Options;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI18Test", "description": "Test case for CLI-18 bug in Apache Commons CLI.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testCLI18", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String,boolean)"], "external_dependencies": {"modules": ["Options", "Option", "HelpFormatter", "StringWriter", "PrintWriter"]}, "category": "unit", "description": "Tests the printHelp method of HelpFormatter with various options and parameters."}]}, {"file_path": "src/test/java/org/apache/commons/cli/ParseExceptionTest.java", "testclass_name": "ParseExceptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.io.IOException;", "import org.junit.jupiter.api.Test;"], "name": "ParseExceptionTest", "description": "Unit tests for the ParseException class constructors and wrap method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testConstructor", "primary_tested": ["ParseException.ParseException(String)", "ParseException.ParseException(Throwable)", "ParseException.wrap(Throwable)"], "external_dependencies": {"modules": ["ParseException", "IOException"]}, "category": "unit", "description": "Tests the constructors and wrap method of the ParseException class."}]}, {"file_path": "src/test/java/org/apache/commons/cli/UnrecognizedOptionExceptionTest.java", "testclass_name": "UnrecognizedOptionExceptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "UnrecognizedOptionExceptionTest", "description": "Unit tests for the UnrecognizedOptionException class.", "test_cases": [{"name": "testConstructor", "primary_tested": ["UnrecognizedOptionException.UnrecognizedOptionException(String)", "UnrecognizedOptionException.UnrecognizedOptionException(String,String)", "UnrecognizedOptionException.getMessage()", "UnrecognizedOptionException.getOption()"], "external_dependencies": {"modules": ["UnrecognizedOptionException"]}, "category": "unit", "description": "Tests the constructors and methods of the UnrecognizedOptionException class."}]}, {"file_path": "src/test/java/org/apache/commons/cli/AlreadySelectedExceptionTest.java", "testclass_name": "AlreadySelectedExceptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.Test;"], "name": "AlreadySelectedExceptionTest", "description": "Unit tests for the AlreadySelectedException class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testConstructor", "primary_tested": ["AlreadySelectedException.AlreadySelectedException(String)", "AlreadySelectedException.AlreadySelectedException(OptionGroup,Option)"], "associated_methods": ["AlreadySelectedException.getMessage()", "AlreadySelectedException.getOption()", "AlreadySelectedException.getOptionGroup()"], "external_dependencies": {"modules": ["AlreadySelectedException", "Option", "OptionGroup"]}, "category": "unit", "description": "Tests the constructors and methods of the AlreadySelectedException class."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI325Test.java", "testclass_name": "BugCLI325Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Properties;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.DefaultParser;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.ParseException;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI325Test", "description": "Test case for CLI bug 325, focusing on the parsing of multiple arguments with a value separator.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCli325", "primary_tested": ["CommandLine.getOptionProperties(Option)"], "associated_methods": ["Option.builder(String)", "DefaultParser.builder().build().parse(Options,String[])"], "external_dependencies": {"modules": ["org.apache.commons.cli.CommandLine", "org.apache.commons.cli.DefaultParser", "org.apache.commons.cli.Option", "org.apache.commons.cli.Options", "org.apache.commons.cli.ParseException", "java.util.Properties"]}, "category": "unit", "description": "Tests the parsing of multiple arguments with a value separator using the CommandLine class."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI252Test.java", "testclass_name": "BugCLI252Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.apache.commons.cli.AmbiguousOptionException;", "import org.apache.commons.cli.DefaultParser;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.ParseException;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI252Test", "description": "Tests for handling ambiguous option names in Apache Commons CLI.", "class_members": {"methods": [{"name": "getOptions", "signature": "Options getOptions()"}]}, "fixtures": [], "test_cases": [{"name": "testAmbiquousOptionName", "primary_tested": ["DefaultParser.parse(Options,String[])"], "external_dependencies": {"modules": ["AmbiguousOptionException", "DefaultParser", "Options", "Option"], "class_members": [{"name": "getOptions", "type": "method"}]}, "category": "unit", "description": "Tests that an AmbiguousOptionException is thrown when an ambiguous option name is provided."}, {"name": "testExactOptionNameMatch", "primary_tested": ["DefaultParser.parse(Options,String[])"], "external_dependencies": {"modules": ["DefaultParser", "Options", "Option", "ParseException"], "class_members": [{"name": "getOptions", "type": "method"}]}, "category": "unit", "description": "Tests that no exception is thrown when an exact option name match is provided."}]}, {"file_path": "src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java", "testclass_name": "DisablePartialMatchingTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.Test;"], "name": "DisablePartialMatchingTest", "description": "Tests for disabling partial matching in CommandLineParser.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testDisablePartialMatching", "primary_tested": ["DefaultParser.parse(Options,String[])"], "associated_methods": ["Options.addOption(Option)", "CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["CommandLineParser", "DefaultParser", "Options", "Option", "CommandLine"]}, "category": "unit", "description": "Tests that partial matching is disabled by creating a CommandLineParser with partial matching disabled and verifying that both 'debug' and 'extract' options are recognized."}, {"name": "testRegularPartialMatching", "primary_tested": ["DefaultParser.parse(Options,String[])"], "associated_methods": ["Options.addOption(Option)", "CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["CommandLineParser", "DefaultParser", "Options", "Option", "CommandLine"]}, "category": "unit", "description": "Tests regular partial matching by creating a CommandLineParser with default settings and verifying that only the 'debug' option is recognized."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java", "testclass_name": "BugCLI148Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.CommandLineParser;", "import org.apache.commons.cli.OptionBuilder;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.PosixParser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI148Test", "description": "Tests for bug CLI-148 in the Apache Commons CLI library, focusing on parsing command line options.", "class_members": {"variables": [{"name": "options", "type": "Options"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testWorkaround1", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["CommandLine.getOptionValue(char)"], "external_dependencies": {"modules": ["CommandLine", "CommandLineParser", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the parsing of command line options with a workaround for bug CLI-148, ensuring the correct option value is retrieved."}, {"name": "testWorkaround2", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["CommandLine.getOptionValue(char)"], "external_dependencies": {"modules": ["CommandLine", "CommandLineParser", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the parsing of command line options with a different workaround for bug CLI-148, ensuring the correct option value is retrieved."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI13Test.java", "testclass_name": "BugCLI13Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.OptionBuilder;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.ParseException;", "import org.apache.commons.cli.PosixParser;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI13Test", "description": "Test case for CLI bug 13, focusing on the parsing and validation of command line options.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCLI13", "primary_tested": ["PosixParser.parse(Options,String[])"], "associated_methods": ["Options.addOption(Option)", "CommandLine.getOptionValue(String)", "CommandLine.getOptionValue(char)", "CommandLine.hasOption(char)", "CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["org.apache.commons.cli.CommandLine", "org.apache.commons.cli.Option", "org.apache.commons.cli.OptionBuilder", "org.apache.commons.cli.Options", "org.apache.commons.cli.ParseException", "org.apache.commons.cli.PosixParser"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of command line options using PosixParser and validates the parsed options."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java", "testclass_name": "BugCLI266Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.List;", "import org.apache.commons.cli.HelpFormatter;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.OptionGroup;", "import org.apache.commons.cli.Options;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI266Test", "description": "Tests for the CLI option comparator and order in the Apache Commons CLI library.", "class_members": {"variables": [{"name": "insertedOrder", "type": "List<String>"}, {"name": "sortOrder", "type": "List<String>"}], "methods": [{"name": "buildOptionsGroup", "signature": "void buildOptionsGroup(Options options)"}, {"name": "getOptions", "signature": "Options getOptions()"}]}, "test_cases": [{"name": "testOptionComparatorDefaultOrder", "primary_tested": ["HelpFormatter.getOptionComparator()"], "associated_methods": ["Options.getOptions()"], "external_dependencies": {"modules": ["HelpFormatter", "Option", "Options"], "class_members": [{"name": "sortOrder", "type": "variable"}]}, "category": "unit", "description": "Tests the default order of options after sorting using the HelpFormatter's option comparator."}, {"name": "testOptionComparatorInsertedOrder", "primary_tested": ["Options.getOptions()"], "associated_methods": [], "external_dependencies": {"modules": ["Option", "Options"], "class_members": [{"name": "insertedOrder", "type": "variable"}]}, "category": "unit", "description": "Tests the order of options as they were inserted without sorting."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI133Test.java", "testclass_name": "BugCLI133Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.ParseException;", "import org.apache.commons.cli.PosixParser;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI133Test", "description": "Test case for verifying the order of options in the CommandLine class.", "class_members": {"variables": [{"name": "optionA", "type": "Option"}, {"name": "opts", "type": "Options"}, {"name": "posixParser", "type": "PosixParser"}, {"name": "line", "type": "CommandLine"}]}, "fixtures": [], "test_cases": [{"name": "testOrder", "primary_tested": ["CommandLine.hasOption(String)"], "associated_methods": ["Options.addOption(Option)", "PosixParser.parse(Options,String[])"], "external_dependencies": {"modules": ["CommandLine", "Option", "Options", "ParseException", "PosixParser"], "class_members": [{"name": "optionA", "type": "variable"}, {"name": "opts", "type": "variable"}, {"name": "posixParser", "type": "variable"}, {"name": "line", "type": "variable"}]}, "category": "unit", "description": "Tests the order of options in the CommandLine class by checking if a null option is present."}]}, {"file_path": "src/test/java/org/apache/commons/cli/DeprecatedAttributesTest.java", "testclass_name": "DeprecatedAttributesTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "DeprecatedAttributesTest", "description": "Unit tests for the DeprecatedAttributes class, focusing on builder methods and default values.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testBuilderNonDefaults", "primary_tested": ["DeprecatedAttributes.builder().setDescription(String).setForRemoval(boolean).setSince(String).get()"], "associated_methods": ["DeprecatedAttributes.getDescription()", "DeprecatedAttributes.getSince()", "DeprecatedAttributes.isForRemoval()"], "external_dependencies": {"modules": ["DeprecatedAttributes"]}, "category": "unit", "description": "Tests the builder method of DeprecatedAttributes with non-default values."}, {"name": "testBuilderNonDefaultsToString", "primary_tested": ["DeprecatedAttributes.builder().setDescription(String).setForRemoval(boolean).setSince(String).get().toString()"], "associated_methods": ["DeprecatedAttributes.builder().setDescription(String).setForRemoval(boolean).get().toString()", "DeprecatedAttributes.builder().setDescription(String).setSince(String).get().toString()", "DeprecatedAttributes.builder().setDescription(String).get().toString()"], "external_dependencies": {"modules": ["DeprecatedAttributes"]}, "category": "unit", "description": "Tests the toString method of DeprecatedAttributes with various non-default configurations."}, {"name": "testDefaultBuilder", "primary_tested": ["DeprecatedAttributes.builder().get()"], "associated_methods": ["DeprecatedAttributes.DEFAULT.getDescription()", "DeprecatedAttributes.DEFAULT.getSince()", "DeprecatedAttributes.DEFAULT.isForRemoval()"], "external_dependencies": {"modules": ["DeprecatedAttributes"]}, "category": "unit", "description": "Tests the default builder method of DeprecatedAttributes."}, {"name": "testDefaultToString", "primary_tested": ["DeprecatedAttributes.DEFAULT.toString()"], "external_dependencies": {"modules": ["DeprecatedAttributes"]}, "category": "unit", "description": "Tests the toString method of DeprecatedAttributes with default values."}]}, {"file_path": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java", "testclass_name": "ArgumentIsOptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArgumentIsOptionTest", "description": "Tests for verifying the behavior of options and options with arguments in the CommandLineParser.", "class_members": {"variables": [{"name": "options", "type": "Options"}, {"name": "parser", "type": "CommandLineParser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testOption", "primary_tested": ["CommandLine.hasOption(String)"], "associated_methods": ["CommandLine.getArgs()"], "external_dependencies": {"modules": ["Options", "CommandLineParser", "CommandLine"], "class_members": [{"name": "options", "type": "variable"}, {"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the presence of a simple option without arguments."}, {"name": "testOptionAndOptionWithArgument", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getOptionValue(String)"], "associated_methods": ["CommandLine.getArgs()"], "external_dependencies": {"modules": ["Options", "CommandLineParser", "CommandLine"], "class_members": [{"name": "options", "type": "variable"}, {"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the presence of an option and an option with an argument."}, {"name": "testOptionWithArgument", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getOptionValue(String)"], "associated_methods": ["CommandLine.getArgs()"], "external_dependencies": {"modules": ["Options", "CommandLineParser", "CommandLine"], "class_members": [{"name": "options", "type": "variable"}, {"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the presence of an option with an argument."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI312Test.java", "testclass_name": "BugCLI312Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.Properties;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.CommandLineParser;", "import org.apache.commons.cli.DefaultParser;", "import org.apache.commons.cli.MissingArgumentException;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.ParseException;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI312Test", "description": "Tests for handling options and properties in CommandLineParser.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testNoOptionValues", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "external_dependencies": {"modules": ["Option", "Options", "CommandLineParser", "DefaultParser", "MissingArgumentException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that a MissingArgumentException is thrown when parsing options without values."}, {"name": "testPropertyStyleOption_withGetOptionProperties", "primary_tested": ["CommandLine.getOptionValues(char)", "CommandLine.getOptionProperties(String)"], "associated_methods": ["Properties.getProperty(String)", "Properties.size()", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["Option", "Options", "CommandLineParser", "DefaultParser", "CommandLine", "Properties"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of getting option values and properties from a CommandLine object."}, {"name": "testPropertyStyleOption_withGetOptions", "primary_tested": ["CommandLine.getOptionValues(char)", "CommandLine.getOptions()"], "associated_methods": ["Option.getValues()", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["Option", "Options", "CommandLineParser", "DefaultParser", "CommandLine"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of getting option values and iterating over options from a CommandLine object."}]}, {"file_path": "src/test/java/org/apache/commons/cli/SolrCreateToolTest.java", "testclass_name": "SolrCreateToolTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.PrintWriter;", "import java.io.StringWriter;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.jupiter.api.Test;"], "name": "SolrCreateToolTest", "description": "Unit tests for the SolrCreateTool class, focusing on the HelpFormatter functionality.", "class_members": {"methods": [{"name": "getOptions", "signature": "List<Option> getOptions()"}, {"name": "printHelp", "signature": "String printHelp(HelpFormatter formatter)"}]}, "test_cases": [{"name": "testHelpFormatter", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String,boolean)"], "associated_methods": ["SolrCreateToolTest.printHelp(HelpFormatter)"], "external_dependencies": {"modules": ["HelpFormatter", "Options", "Option", "PrintWriter", "StringWriter"], "class_members": [{"name": "getOptions", "type": "method"}, {"name": "printHelp", "type": "method"}]}, "category": "unit", "description": "Tests the HelpFormatter functionality to ensure it does not include deprecated options."}, {"name": "testHelpFormatterDeprecated", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String,boolean)"], "associated_methods": ["SolrCreateToolTest.printHelp(HelpFormatter)"], "external_dependencies": {"modules": ["HelpFormatter", "Options", "Option", "PrintWriter", "StringWriter"], "class_members": [{"name": "getOptions", "type": "method"}, {"name": "printHelp", "type": "method"}]}, "category": "unit", "description": "Tests the HelpFormatter functionality to ensure it includes deprecated options when configured to do so."}]}, {"file_path": "src/test/java/org/apache/commons/cli/SolrCliTest.java", "testclass_name": "SolrCliTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import java.util.Locale;", "import org.junit.jupiter.api.Test;"], "name": "SolrCliTest", "description": "Test class for verifying the options and default values in Solr CLI.", "class_members": {"variables": [{"name": "ZK_HOST", "type": "static final String"}, {"name": "DEFAULT_CONFIG_SET", "type": "static final String"}, {"name": "OPTION_ZKHOST_DEPRECATED", "type": "static final Option"}, {"name": "OPTION_ZKHOST", "type": "static final Option"}, {"name": "OPTION_SOLRURL_DEPRECATED", "type": "static final Option"}, {"name": "OPTION_SOLRURL", "type": "static final Option"}, {"name": "OPTION_VERBOSE", "type": "static final Option"}, {"name": "OPTION_HELP", "type": "static final Option"}, {"name": "OPTION_RECURSE", "type": "static final Option"}, {"name": "OPTION_CREDENTIALS", "type": "static final Option"}], "methods": [{"name": "getDefaultSolrUrl", "signature": "static String getDefaultSolrUrl()"}]}, "test_cases": [{"name": "testOptions", "primary_tested": [], "associated_methods": ["SolrCliTest.getDefaultSolrUrl()"], "external_dependencies": {"modules": [], "class_members": [{"name": "DEFAULT_CONFIG_SET", "type": "variable"}, {"name": "OPTION_CREDENTIALS", "type": "variable"}, {"name": "OPTION_HELP", "type": "variable"}, {"name": "OPTION_RECURSE", "type": "variable"}, {"name": "OPTION_SOLRURL", "type": "variable"}, {"name": "OPTION_SOLRURL_DEPRECATED", "type": "variable"}, {"name": "OPTION_VERBOSE", "type": "variable"}, {"name": "OPTION_ZKHOST", "type": "variable"}, {"name": "OPTION_ZKHOST_DEPRECATED", "type": "variable"}, {"name": "ZK_HOST", "type": "variable"}, {"name": "getDefaultSolrUrl", "type": "method"}]}, "category": "unit", "description": "Tests the sanity checks for various options and default values in Solr CLI."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java", "testclass_name": "BugCLI265Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.DefaultParser;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.Options;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI265Test", "description": "Tests for parsing concatenated short options and handling optional arguments in CommandLine.", "class_members": {"variables": [{"name": "parser", "type": "DefaultParser"}, {"name": "options", "type": "Options"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testShouldParseConcatenatedShortOptions", "primary_tested": ["DefaultParser.parse(Options,String[])"], "associated_methods": ["CommandLine.hasOption(String)", "CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "Options", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests parsing concatenated short options and verifies the presence of parsed options."}, {"name": "testShouldParseShortOptionWithoutValue", "primary_tested": ["DefaultParser.parse(Options,String[])"], "associated_methods": ["CommandLine.hasOption(String)", "CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "Options", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests parsing a short option without a value and verifies the presence of parsed options."}, {"name": "testShouldParseShortOptionWithValue", "primary_tested": ["DefaultParser.parse(Options,String[])"], "associated_methods": ["CommandLine.getOptionValue(String)", "CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["DefaultParser", "Options", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests parsing a short option with a value and verifies the parsed value."}]}, {"file_path": "src/test/java/org/apache/commons/cli/ConverterTests.java", "testclass_name": "ConverterTests", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.net.URL;", "import java.text.DateFormat;", "import java.text.SimpleDateFormat;", "import java.util.ArrayList;", "import java.util.Date;", "import java.util.List;", "import java.util.stream.Stream;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;"], "name": "ConverterTests", "description": "Unit tests for various conversion functionalities in the Converter class.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "AClassWithoutADefaultConstructor", "description": "A class without a default constructor."}]}, "fixtures": [], "test_cases": [{"name": "classTests", "primary_tested": ["Converter.CLASS.apply(String)"], "associated_methods": [], "external_dependencies": {"modules": ["Converter", "ClassNotFoundException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the class conversion functionality of the Converter."}, {"name": "dateTests", "primary_tested": ["Converter.DATE.apply(String)"], "associated_methods": [], "external_dependencies": {"modules": ["Converter", "DateFormat", "SimpleDateFormat", "Date", "ParseException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the date conversion functionality of the Converter."}, {"name": "fileTests", "primary_tested": ["Converter.FILE.apply(String)"], "associated_methods": [], "external_dependencies": {"modules": ["Converter", "URL"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the file conversion functionality of the Converter."}, {"name": "numberTests", "primary_tested": ["Converter.NUMBER.apply(String)"], "associated_methods": [], "external_dependencies": {"modules": ["Converter", "NumberFormatException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the number conversion functionality of the Converter."}, {"name": "objectTests", "primary_tested": ["Converter.OBJECT.apply(String)"], "associated_methods": [], "external_dependencies": {"modules": ["Converter", "ClassNotFoundException", "NoSuchMethodException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the object conversion functionality of the Converter."}, {"name": "urlTests", "primary_tested": ["Converter.URL.apply(String)"], "associated_methods": [], "external_dependencies": {"modules": ["Converter", "URL", "MalformedURLException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the URL conversion functionality of the Converter."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java", "testclass_name": "BugCLI71Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.fail;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.CommandLineParser;", "import org.apache.commons.cli.MissingArgumentException;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.PosixParser;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI71Test", "description": "Tests for handling command line options and arguments using Apache Commons CLI.", "class_members": {"variables": [{"name": "options", "type": "Options"}, {"name": "parser", "type": "CommandLineParser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBasic", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["CommandLine", "CommandLineParser", "Options", "Option"], "class_members": [{"name": "options", "type": "variable"}, {"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests basic parsing of command line options and verifies the values."}, {"name": "testGetsDefaultIfOptional", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["CommandLine.getOptionValue(String)", "CommandLine.getOptionValue(char,String)"], "external_dependencies": {"modules": ["CommandLine", "CommandLineParser", "Options", "Option"], "class_members": [{"name": "options", "type": "variable"}, {"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests parsing of command line options with an optional argument and verifies the default value if the argument is missing."}, {"name": "testLackOfError", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["MissingArgumentException.getOption()"], "external_dependencies": {"modules": ["CommandLineParser", "Options", "Option", "MissingArgumentException"], "class_members": [{"name": "options", "type": "variable"}, {"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that a MissingArgumentException is thrown when an option is missing an argument."}, {"name": "testMistakenArgument", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["CommandLine", "CommandLineParser", "Options", "Option"], "class_members": [{"name": "options", "type": "variable"}, {"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests parsing of command line options with a mistaken argument and verifies the values."}]}, {"file_path": "src/test/java/org/apache/commons/cli/PosixParserTest.java", "testclass_name": "PosixParserTest", "dependencies": ["package org.apache.commons.cli;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;"], "name": "PosixParserTest", "description": "Test class for the PosixParser, extending AbstractParserTestCase.", "class_members": {"variables": [{"name": "parser", "type": "PosixParser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAmbiguousLongWithoutEqualSingleDash", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testAmbiguousLongWithoutEqualSingleDash2", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testAmbiguousPartialLongOption4", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testDoubleDash2", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testLongWithEqualSingleDash", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testLongWithoutEqualSingleDash", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testLongWithUnexpectedArgument1", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testNegativeOption", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser (CLI-184)."}, {"name": "testShortWithEqual", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}, {"name": "testUnambiguousPartialLongOption4", "primary_tested": [], "external_dependencies": {"modules": [], "class_members": []}, "category": "unit", "fixtures_used": ["setUp"], "description": "Test is disabled and not supported by the PosixParser."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionValidatorTest.java", "testclass_name": "OptionValidatorTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.stream.Stream;", "import org.junit.jupiter.api.BeforeAll;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;"], "name": "OptionValidatorTest", "description": "Tests for validating option strings in the OptionValidator class.", "class_members": {"variables": [{"name": "LETTERS", "type": "static final String"}, {"name": "DIGITS", "type": "static final String"}, {"name": "CURRENCY", "type": "static final String"}, {"name": "PUNCTUATION", "type": "static final String"}, {"name": "COMBINING_MARK", "type": "static final String"}, {"name": "NON_SPACING_MARK", "type": "static final String"}, {"name": "IDENTIFIER_IGNORABLE", "type": "static final String"}, {"name": "acceptablePunctuation", "type": "static String"}, {"name": "notAcceptablePunctuation", "type": "static String"}, {"name": "additionalOptonChars", "type": "static String"}, {"name": "additionalLongChars", "type": "static String"}, {"name": "firstChars", "type": "static String"}, {"name": "notFirstChars", "type": "static String"}, {"name": "restChars", "type": "static String"}, {"name": "notRestChars", "type": "static String"}], "methods": [{"name": "optionParameters", "signature": "static Stream<Arguments> optionParameters()"}]}, "fixtures": ["setup"], "test_cases": [{"name": "testExclusivity", "primary_tested": ["OptionValidator.ADDITIONAL_LONG_CHARS", "OptionValidator.ADDITIONAL_OPTION_CHARS"], "external_dependencies": {"modules": ["OptionValidator"], "class_members": [{"name": "additionalLongChars", "type": "variable"}, {"name": "additionalOptonChars", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setup"], "description": "Tests the exclusivity of additional long and option characters in the OptionValidator."}, {"name": "validateTest", "primary_tested": ["OptionValidator.validate(String)"], "external_dependencies": {"modules": ["OptionValidator"], "class_members": [{"name": "firstChars", "type": "variable"}, {"name": "restChars", "type": "variable"}, {"name": "notFirstChars", "type": "variable"}, {"name": "notRestChars", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setup"], "description": "Tests the validation of option strings using parameterized tests."}]}, {"file_path": "src/test/java/org/apache/commons/cli/ApplicationTest.java", "testclass_name": "ApplicationTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.PrintWriter;", "import java.io.StringWriter;", "import org.junit.jupiter.api.Test;"], "name": "ApplicationTest", "description": "Unit tests for various command line parsing scenarios using Apache Commons CLI.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAnt", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["Options.addOption(String,boolean,String)", "CommandLine.getOptionValues(String)", "CommandLine.getOptionValue(String)", "CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["CommandLineParser", "GnuParser", "Options", "CommandLine", "OptionBuilder"], "class_members": []}, "category": "unit", "description": "Tests the parsing of command line options using the GNU parser."}, {"name": "testGroovy", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["Options.addOption(Option)", "CommandLine.hasOption(char)", "CommandLine.getOptionValue(char)"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "PosixParser", "CommandLine"], "class_members": []}, "category": "unit", "description": "Tests the parsing of command line options using the Posix parser."}, {"name": "testLs", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["Options.addOption(String,String,boolean,String)", "CommandLine.hasOption(String)", "CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["CommandLineParser", "PosixParser", "Options", "CommandLine", "OptionBuilder"], "class_members": []}, "category": "unit", "description": "Tests the parsing of command line options for a 'ls' command-like scenario."}, {"name": "testMan", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String,boolean)"], "associated_methods": ["Options.addOption(String,String,boolean,String)", "HelpFormatter.DEFAULT_LEFT_PAD", "HelpFormatter.DEFAULT_DESC_PAD"], "external_dependencies": {"modules": ["HelpFormatter", "Options", "PrintWriter", "StringWriter"], "class_members": []}, "category": "unit", "description": "Tests the generation of a help message for a 'man' command-like scenario."}, {"name": "testNLT", "primary_tested": ["CommandLineParser.parse(Options,String[])"], "associated_methods": ["Options.addOption(Option)", "CommandLine.hasOption(String)", "CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["Option", "OptionBuilder", "PosixParser", "CommandLine", "Options"], "class_members": []}, "category": "unit", "description": "Tests the parsing of command line options for a 'NLT' command-like scenario."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java", "testclass_name": "OptionBuilderTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import org.junit.jupiter.api.Test;"], "name": "OptionBuilderTest", "description": "Unit tests for the OptionBuilder class in the Apache Commons CLI library.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testBaseOptionCharOpt", "primary_tested": ["OptionBuilder.create(char)"], "associated_methods": ["Option.getOpt()", "Option.getDescription()", "Option.hasArg()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"]}, "category": "unit", "description": "Tests the creation of a base option with a character option."}, {"name": "testBaseOptionStringOpt", "primary_tested": ["OptionBuilder.create(String)"], "associated_methods": ["Option.getOpt()", "Option.getDescription()", "Option.hasArg()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"]}, "category": "unit", "description": "Tests the creation of a base option with a string option."}, {"name": "testBuilderIsResettedAlways", "primary_tested": ["OptionBuilder.create(char)", "OptionBuilder.create()"], "associated_methods": ["Option.getDescription()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"]}, "category": "unit", "description": "Tests that the OptionBuilder is reset after an exception."}, {"name": "testCompleteOption", "primary_tested": ["OptionBuilder.create(char)"], "associated_methods": ["Option.getOpt()", "Option.getLongOpt()", "Option.getDescription()", "Option.getType()", "Option.hasArg()", "Option.isRequired()", "Option.hasArgs()"], "external_dependencies": {"modules": ["OptionBuilder", "Option", "Float"]}, "category": "unit", "description": "Tests the creation of a complete option with various attributes."}, {"name": "testCreateIncompleteOption", "primary_tested": ["OptionBuilder.create()"], "external_dependencies": {"modules": ["OptionBuilder"]}, "category": "unit", "description": "Tests the rejection of an incomplete option creation."}, {"name": "testIllegalOptions", "primary_tested": ["OptionBuilder.create(char)", "OptionBuilder.create(String)"], "external_dependencies": {"modules": ["OptionBuilder"]}, "category": "unit", "description": "Tests the handling of illegal option characters."}, {"name": "testOptionArgNumbers", "primary_tested": ["OptionBuilder.create(char)"], "associated_methods": ["Option.getArgs()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"]}, "category": "unit", "description": "Tests the setting of argument numbers for an option."}, {"name": "testSpecialOptChars", "primary_tested": ["OptionBuilder.create(char)"], "associated_methods": ["Option.getOpt()"], "external_dependencies": {"modules": ["OptionBuilder", "Option"]}, "category": "unit", "description": "Tests the handling of special option characters."}, {"name": "testTwoCompleteOptions", "primary_tested": ["OptionBuilder.create(char)"], "associated_methods": ["Option.getOpt()", "Option.getLongOpt()", "Option.getDescription()", "Option.getType()", "Option.hasArg()", "Option.isRequired()", "Option.hasArgs()"], "external_dependencies": {"modules": ["OptionBuilder", "Option", "Float", "String"]}, "category": "unit", "description": "Tests the creation of two complete options with different attributes."}]}, {"file_path": "src/test/java/org/apache/commons/cli/ValuesTest.java", "testclass_name": "ValuesTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ValuesTest", "description": "Unit tests for CommandLine options and values.", "class_members": {"variables": [{"name": "cmd", "type": "CommandLine"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCharSeparator", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.hasOption(char)", "CommandLine.getOptionValues(String)", "CommandLine.getOptionValues(char)"], "external_dependencies": {"modules": ["CommandLine", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "cmd", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the char methods of CommandLine that delegate to the String methods."}, {"name": "testComplexValues", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getOptionValues(String)"], "external_dependencies": {"modules": ["CommandLine", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "cmd", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests complex values for options i and h."}, {"name": "testExtraArgs", "primary_tested": ["CommandLine.getArgs()"], "external_dependencies": {"modules": ["CommandLine", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "cmd", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of extra arguments."}, {"name": "testMultipleArgValues", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getOptionValues(String)"], "external_dependencies": {"modules": ["CommandLine", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "cmd", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests multiple argument values for option e."}, {"name": "testShortArgs", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getOptionValues(String)"], "external_dependencies": {"modules": ["CommandLine", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "cmd", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests short arguments for options a and c."}, {"name": "testShortArgsWithValue", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getOptionValue(String)", "CommandLine.getOptionValues(String)"], "external_dependencies": {"modules": ["CommandLine", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "cmd", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests short arguments with values for options b and d."}, {"name": "testTwoArgValues", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getOptionValues(String)"], "external_dependencies": {"modules": ["CommandLine", "PosixParser", "Options", "OptionBuilder"], "class_members": [{"name": "cmd", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests two argument values for option g."}]}, {"file_path": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "testclass_name": "TypeHandlerTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.File;", "import java.io.FileInputStream;", "import java.io.IOException;", "import java.math.BigDecimal;", "import java.math.BigInteger;", "import java.net.MalformedURLException;", "import java.net.URL;", "import java.nio.file.InvalidPathException;", "import java.nio.file.Path;", "import java.nio.file.Paths;", "import java.text.DateFormat;", "import java.text.SimpleDateFormat;", "import java.time.Instant;", "import java.util.ArrayList;", "import java.util.Date;", "import java.util.List;", "import java.util.Map;", "import java.util.stream.Stream;", "import org.apache.commons.io.IOUtils;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;"], "name": "TypeHandlerTest", "description": "Unit tests for TypeHandler class, which handles type conversions and object creation.", "class_members": {"variables": [{"name": "PATH_CONVERTER", "type": "static final Converter<Path, InvalidPathException>"}], "methods": [{"name": "createDateFixtures", "signature": "private static Stream<Date> createDateFixtures()"}, {"name": "createValueTestParameters", "signature": "private static Stream<Arguments> createValueTestParameters() throws MalformedURLException"}], "nested_classes": [{"name": "Instantiable", "description": "Used for Class and Object creation tests."}, {"name": "NotInstantiable", "description": "Used for Class and Object negative creation tests."}]}, "fixtures": [], "test_cases": [{"name": "testCreateClass", "primary_tested": ["TypeHandler.createClass(String)"], "external_dependencies": {"modules": ["TypeHandler", "ParseException"]}, "category": "unit", "description": "Tests the creation of a class instance from its name."}, {"name": "testCreateFile", "primary_tested": ["TypeHandler.createFile(String)"], "external_dependencies": {"modules": ["TypeHandler", "File"]}, "category": "unit", "description": "Tests the creation of a File object from its string representation."}, {"name": "testCreateFiles", "primary_tested": ["TypeHandler.createFiles(String)"], "external_dependencies": {"modules": ["TypeHandler", "UnsupportedOperationException"]}, "category": "unit", "description": "Tests the creation of files, expecting an UnsupportedOperationException."}, {"name": "testCreateNumber", "primary_tested": ["TypeHandler.createNumber(String)"], "external_dependencies": {"modules": ["TypeHandler", "ParseException"]}, "category": "unit", "description": "Tests the creation of a Number object from its string representation."}, {"name": "testCreateObject", "primary_tested": ["TypeHandler.createObject(String)"], "external_dependencies": {"modules": ["TypeHandler", "ParseException"]}, "category": "unit", "description": "Tests the creation of an Object instance from its class name."}, {"name": "testCreateURL", "primary_tested": ["TypeHandler.createURL(String)"], "external_dependencies": {"modules": ["TypeHandler", "ParseException", "MalformedURLException", "URL", "Paths"]}, "category": "unit", "description": "Tests the creation of a URL object from its string representation."}, {"name": "testCreateValue", "primary_tested": ["TypeHandler.createValue(String, Class<?>)"], "external_dependencies": {"modules": ["TypeHandler", "ParseException", "Throwable"], "class_members": [{"name": "createValueTestParameters", "type": "method"}]}, "category": "unit", "description": "Tests the creation of various types of objects from their string representations."}, {"name": "testCreateValueExistingFile", "primary_tested": ["TypeHandler.createValue(String, Class<?>)"], "external_dependencies": {"modules": ["TypeHandler", "FileInputStream", "PatternOptionBuilder"]}, "category": "unit", "description": "Tests the creation of a FileInputStream from an existing file path."}, {"name": "testnstantiableEquals", "primary_tested": ["Instantiable.equals(Object)"], "external_dependencies": {"modules": ["Instantiable"]}, "category": "unit", "description": "Tests the equality of Instantiable objects."}, {"name": "testOpenFile", "primary_tested": ["TypeHandler.openFile(String)"], "external_dependencies": {"modules": ["TypeHandler", "ParseException", "IOException", "FileInputStream", "IOUtils"]}, "category": "unit", "description": "Tests the opening of a file and consuming its content."}, {"name": "testRegister", "primary_tested": ["TypeHandler.createDefaultMap()", "TypeHandler.getConverter(Class<?>)"], "external_dependencies": {"modules": ["TypeHandler", "Converter", "Path"]}, "category": "unit", "description": "Tests the registration and retrieval of a custom converter in TypeHandler."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionsTest.java", "testclass_name": "OptionsTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.junit.jupiter.api.Test;"], "name": "OptionsTest", "description": "Unit tests for the Options class in the Apache Commons CLI library, focusing on various functionalities like adding options, handling conflicts, and testing deprecated options.", "class_members": {"methods": [{"name": "assertToStrings", "signature": "void assertToStrings(Option option)"}]}, "fixtures": [], "test_cases": [{"name": "testAddConflictingOptions", "primary_tested": ["Options.addOptions(Options)"], "external_dependencies": {"modules": ["Options", "OptionGroup", "Option", "IllegalArgumentException"]}, "category": "unit", "description": "Tests the addition of conflicting options to an Options object, expecting an IllegalArgumentException."}, {"name": "testAddNonConflictingOptions", "primary_tested": ["Options.addOptions(Options)"], "external_dependencies": {"modules": ["Options", "OptionGroup", "Option", "Arrays", "HashSet"]}, "category": "unit", "description": "Tests the addition of non-conflicting options to an Options object, ensuring the correct merging of option groups and options."}, {"name": "testAddOptions", "primary_tested": ["Options.addOptions(Options)"], "external_dependencies": {"modules": ["Options", "OptionGroup", "Option", "Arrays"]}, "category": "unit", "description": "Tests the addition of options to an Options object, ensuring the correct merging of option groups and options."}, {"name": "testAddOptions2X", "primary_tested": ["Options.addOptions(Options)"], "external_dependencies": {"modules": ["Options", "OptionGroup", "Option", "IllegalArgumentException"]}, "category": "unit", "description": "Tests the addition of options to an Options object, expecting an IllegalArgumentException due to self-addition."}, {"name": "testDeprecated", "primary_tested": ["Option.toString()", "Option.toDeprecatedString()"], "external_dependencies": {"modules": ["Options", "Option", "DeprecatedAttributes"]}, "category": "unit", "description": "Tests the handling of deprecated options, ensuring the correct behavior of toString and toDeprecatedString methods."}, {"name": "testDuplicateLong", "primary_tested": ["Options.addOption(String, String, boolean, String)"], "external_dependencies": {"modules": ["Options", "Option"]}, "category": "unit", "description": "Tests the addition of options with duplicate long names, ensuring the last added option description is retained."}, {"name": "testDuplicateSimple", "primary_tested": ["Options.addOption(String, boolean, String)"], "external_dependencies": {"modules": ["Options", "Option"]}, "category": "unit", "description": "Tests the addition of options with duplicate simple names, ensuring the last added option description is retained."}, {"name": "testGetMatchingOpts", "primary_tested": ["Options.getMatchingOptions(String)"], "external_dependencies": {"modules": ["Options", "OptionBuilder"]}, "category": "unit", "description": "Tests the retrieval of matching options based on a partial name, ensuring the correct options are returned."}, {"name": "testGetOptionsGroups", "primary_tested": ["Options.getOptionGroups()"], "external_dependencies": {"modules": ["Options", "OptionGroup", "OptionBuilder"]}, "category": "unit", "description": "Tests the retrieval of option groups from an Options object, ensuring the correct groups are returned."}, {"name": "testHelpOptions", "primary_tested": ["Options.helpOptions()"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "ArrayList"]}, "category": "unit", "description": "Tests the retrieval of help options from an Options object, ensuring the correct options are returned."}, {"name": "testLong", "primary_tested": ["Options.addOption(String, String, boolean, String)", "Options.hasOption(String)"], "external_dependencies": {"modules": ["Options"]}, "category": "unit", "description": "Tests the addition of long options and checking their presence in an Options object."}, {"name": "testMissingOptionException", "primary_tested": ["PosixParser.parse(Options, String[])"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "PosixParser", "MissingOptionException"]}, "category": "unit", "description": "Tests the handling of missing required options, expecting a MissingOptionException."}, {"name": "testMissingOptionsException", "primary_tested": ["PosixParser.parse(Options, String[])"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "PosixParser", "MissingOptionException"]}, "category": "unit", "description": "Tests the handling of multiple missing required options, expecting a MissingOptionException."}, {"name": "testSimple", "primary_tested": ["Options.addOption(String, boolean, String)", "Options.hasOption(String)"], "external_dependencies": {"modules": ["Options"]}, "category": "unit", "description": "Tests the addition of simple options and checking their presence in an Options object."}, {"name": "testToString", "primary_tested": ["Options.toString()"], "external_dependencies": {"modules": ["Options"]}, "category": "unit", "description": "Tests the toString method of the Options class, ensuring it returns a non-null string containing the added options."}]}, {"file_path": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java", "testclass_name": "PatternOptionBuilderTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.File;", "import java.io.FileInputStream;", "import java.net.URL;", "import java.text.DateFormat;", "import java.text.SimpleDateFormat;", "import java.util.Calendar;", "import java.util.Date;", "import java.util.Vector;", "import org.junit.jupiter.api.Test;"], "name": "PatternOptionBuilderTest", "description": "Unit tests for the PatternOptionBuilder class in the Apache Commons CLI library.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testClassPattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.getOptionObject(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine", "Calendar"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of class patterns and the retrieval of option objects."}, {"name": "testEmptyPattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["Options.getOptions()"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of an empty pattern and verifies that no options are created."}, {"name": "testExistingFilePattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.getOptionObject(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine", "FileInputStream"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of a pattern for an existing readable file and verifies the file input stream."}, {"name": "testExistingFilePatternFileNotExist", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.getOptionObject(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of a pattern for a non-existing file and verifies that the option object is null."}, {"name": "testNumberPattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.getOptionObject(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of number patterns and verifies the parsed number objects."}, {"name": "testObjectPattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.getOptionObject(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of object patterns and verifies the parsed object values."}, {"name": "testRequiredOption", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLineParser.parse(Options,String[])"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "MissingOptionException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of a pattern with a required option and verifies the exception when the option is missing."}, {"name": "testSimplePattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.getOptionValue(String)", "CommandLine.getOptionObject(String)", "CommandLine.hasOption(String)", "CommandLine.getOptionObject(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine", "Date", "DateFormat", "SimpleDateFormat", "Vector", "File", "Calendar", "URL"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of a simple pattern and verifies the parsed values for various types."}, {"name": "testUntypedPattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.hasOption(char)", "CommandLine.getOptionObject(char)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of an untyped pattern and verifies the presence of options without values."}, {"name": "testURLPattern", "primary_tested": ["PatternOptionBuilder.parsePattern(String)"], "associated_methods": ["CommandLine.getOptionObject(String)"], "external_dependencies": {"modules": ["PatternOptionBuilder", "Options", "CommandLineParser", "PosixParser", "CommandLine", "URL"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of URL patterns and verifies the parsed URL objects."}]}, {"file_path": "src/test/java/org/apache/commons/cli/DefaultParserTest.java", "testclass_name": "DefaultParserTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashSet;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DefaultParserTest", "description": "Unit tests for the DefaultParser class, focusing on various parsing scenarios and quote handling.", "class_members": {"variables": [{"name": "parser", "type": "DefaultParser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBuilder", "primary_tested": ["DefaultParser.builder()"], "associated_methods": ["DefaultParser.setStripLeadingAndTrailingQuotes(boolean)", "DefaultParser.setAllowPartialMatching(boolean)", "DefaultParser.setDeprecatedHandler(Consumer<Option>)"], "external_dependencies": {"modules": ["DefaultParser"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the builder functionality of the DefaultParser."}, {"name": "testDeprecated", "primary_tested": ["DefaultParser.builder().setDeprecatedHandler(Consumer<Option>)"], "associated_methods": ["Option.builder().option(String).deprecated().build()", "Option.builder().option(String).deprecated(DeprecatedAttributes).build()", "CommandLine.hasOption(String)", "Set.contains(Option)"], "external_dependencies": {"modules": ["DefaultParser", "Option", "CommandLine", "HashSet", "Set"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of deprecated options in the DefaultParser."}, {"name": "testLongOptionQuoteHandlingWithoutStrip", "primary_tested": ["DefaultParser.builder().setStripLeadingAndTrailingQuotes(boolean)"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of long options with quotes without stripping them."}, {"name": "testLongOptionQuoteHandlingWithStrip", "primary_tested": ["DefaultParser.builder().setStripLeadingAndTrailingQuotes(boolean)"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of long options with quotes with stripping them."}, {"name": "testLongOptionWithEqualsQuoteHandling", "primary_tested": ["DefaultParser.parse(Options, String[])"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of long options with equals and quotes."}, {"name": "testLongOptionWithEqualsQuoteHandlingWithoutStrip", "primary_tested": ["DefaultParser.builder().setStripLeadingAndTrailingQuotes(boolean)"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of long options with equals and quotes without stripping them."}, {"name": "testLongOptionWithEqualsQuoteHandlingWithStrip", "primary_tested": ["DefaultParser.builder().setStripLeadingAndTrailingQuotes(boolean)"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of long options with equals and quotes with stripping them."}, {"name": "testShortOptionConcatenatedQuoteHandling", "primary_tested": ["DefaultParser.parse(Options, String[])"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of short options concatenated with quotes."}, {"name": "testShortOptionQuoteHandlingWithoutStrip", "primary_tested": ["DefaultParser.builder().setStripLeadingAndTrailingQuotes(boolean)"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of short options with quotes without stripping them."}, {"name": "testShortOptionQuoteHandlingWithStrip", "primary_tested": ["DefaultParser.builder().setStripLeadingAndTrailingQuotes(boolean)"], "associated_methods": ["CommandLine.getOptionValue(String)"], "external_dependencies": {"modules": ["DefaultParser", "CommandLine"], "class_members": [{"name": "parser", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of short options with quotes with stripping them."}]}, {"file_path": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "testclass_name": "GnuParserTest", "dependencies": ["package org.apache.commons.cli;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;"], "name": "GnuParserTest", "description": "Test class for the GnuParser, extending AbstractParserTestCase. Most tests are disabled as they are not supported by the GnuParser.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testAmbiguousLongWithoutEqualSingleDash", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testAmbiguousLongWithoutEqualSingleDash2", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testAmbiguousPartialLongOption1", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testAmbiguousPartialLongOption2", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testAmbiguousPartialLongOption3", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testAmbiguousPartialLongOption4", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testBursting", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testDoubleDash2", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testLongWithoutEqualSingleDash", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testLongWithUnexpectedArgument1", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testLongWithUnexpectedArgument2", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testMissingArgWithBursting", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testNegativeOption", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser (CLI-184)."}, {"name": "testPartialLongOptionSingleDash", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testShortWithUnexpectedArgument", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testStopBursting", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testStopBursting2", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testUnambiguousPartialLongOption1", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testUnambiguousPartialLongOption2", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testUnambiguousPartialLongOption3", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testUnambiguousPartialLongOption4", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}, {"name": "testUnrecognizedOptionWithBursting", "primary_tested": [], "external_dependencies": {"modules": []}, "category": "disabled", "fixtures_used": ["setUp"], "description": "Disabled test: not supported by the GnuParser."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java", "testclass_name": "BugCLI162Test", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.io.PrintWriter;", "import java.io.StringWriter;", "import java.sql.ParameterMetaData;", "import java.sql.Types;", "import org.apache.commons.cli.HelpFormatter;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.OptionGroup;", "import org.apache.commons.cli.Options;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BugCLI162Test", "description": "Tests for the HelpFormatter class in Apache Commons CLI, focusing on handling long descriptions and options.", "class_members": {"variables": [{"name": "CR", "type": "static final String"}, {"name": "OPT", "type": "static final String"}, {"name": "OPT_COLUMN_NAMES", "type": "static final String"}, {"name": "OPT_CONNECTION", "type": "static final String"}, {"name": "OPT_DESCRIPTION", "type": "static final String"}, {"name": "OPT_DRIVER", "type": "static final String"}, {"name": "OPT_DRIVER_INFO", "type": "static final String"}, {"name": "OPT_FILE_BINDING", "type": "static final String"}, {"name": "OPT_FILE_JDBC", "type": "static final String"}, {"name": "OPT_FILE_SFMD", "type": "static final String"}, {"name": "OPT_HELP", "type": "static final String"}, {"name": "OPT_HELP_LONG", "type": "static final String"}, {"name": "OPT_INTERACTIVE", "type": "static final String"}, {"name": "OPT_JDBC_TO_SFMD", "type": "static final String"}, {"name": "OPT_JDBC_TO_SFMD_L", "type": "static final String"}, {"name": "OPT_METADATA", "type": "static final String"}, {"name": "OPT_PARAM_MODES_INT", "type": "static final String"}, {"name": "OPT_PARAM_MODES_NAME", "type": "static final String"}, {"name": "OPT_PARAM_NAMES", "type": "static final String"}, {"name": "OPT_PARAM_TYPES_INT", "type": "static final String"}, {"name": "OPT_PARAM_TYPES_NAME", "type": "static final String"}, {"name": "OPT_PASSWORD", "type": "static final String"}, {"name": "OPT_PASSWORD_L", "type": "static final String"}, {"name": "OPT_SQL", "type": "static final String"}, {"name": "OPT_SQL_L", "type": "static final String"}, {"name": "OPT_STACK_TRACE", "type": "static final String"}, {"name": "OPT_TIMING", "type": "static final String"}, {"name": "OPT_TRIM_L", "type": "static final String"}, {"name": "OPT_USER", "type": "static final String"}, {"name": "OPT_WRITE_TO_FILE", "type": "static final String"}, {"name": "PMODE_IN", "type": "static final String"}, {"name": "PMODE_INOUT", "type": "static final String"}, {"name": "PMODE_OUT", "type": "static final String"}, {"name": "PMODE_UNK", "type": "static final String"}, {"name": "PMODES", "type": "static final String"}, {"name": "EXPECTED", "type": "static final String"}, {"name": "formatter", "type": "HelpFormatter"}, {"name": "sw", "type": "StringWriter"}], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testInfiniteLoop", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String)"], "external_dependencies": {"modules": ["Options", "HelpFormatter", "PrintWriter", "StringWriter"], "class_members": [{"name": "formatter", "type": "variable"}, {"name": "sw", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of long descriptions in the HelpFormatter to ensure it does not cause an infinite loop."}, {"name": "testLongLineChunking", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String)"], "external_dependencies": {"modules": ["Options", "HelpFormatter", "PrintWriter", "StringWriter"], "class_members": [{"name": "formatter", "type": "variable"}, {"name": "sw", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the HelpFormatter's ability to chunk long lines into multiple lines within a specified width."}, {"name": "testLongLineChunkingIndentIgnored", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String)"], "external_dependencies": {"modules": ["Options", "HelpFormatter", "PrintWriter", "StringWriter"], "class_members": [{"name": "formatter", "type": "variable"}, {"name": "sw", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the HelpFormatter's handling of long lines with indentation, ensuring the indentation is ignored when chunking."}, {"name": "testPrintHelpLongLines", "primary_tested": ["HelpFormatter.printHelp(PrintWriter,int,String,String,Options,int,int,String)"], "external_dependencies": {"modules": ["Options", "HelpFormatter", "PrintWriter", "StringWriter", "Option", "OptionGroup", "Types", "ParameterMetaData"], "class_members": [{"name": "formatter", "type": "variable"}, {"name": "sw", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the HelpFormatter's ability to handle and print long lines of options and descriptions."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "testclass_name": "OptionGroupTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.util.Properties;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "OptionGroupTest", "description": "Unit tests for the OptionGroup class in the Apache Commons CLI library.", "class_members": {"variables": [{"name": "options", "type": "Options"}, {"name": "parser", "type": "Parser"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetNames", "primary_tested": ["OptionGroup.isSelected()", "OptionGroup.getNames()"], "associated_methods": ["OptionGroup.addOption(Option)"], "external_dependencies": {"modules": ["OptionGroup", "OptionBuilder"]}, "category": "unit", "description": "Tests the functionality of retrieving option names from an OptionGroup."}, {"name": "testNoOptionsExtraArgs", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when no options are provided and extra arguments are present."}, {"name": "testSingleLongOption", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when a single long option (--file) is provided."}, {"name": "testSingleOption", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when a single option (-r) is provided."}, {"name": "testSingleOptionFromGroup", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when a single option (-f) from a group is provided."}, {"name": "testToString", "primary_tested": ["OptionGroup.toString()"], "associated_methods": ["OptionGroup.addOption(Option)"], "external_dependencies": {"modules": ["OptionGroup", "Option"]}, "category": "unit", "description": "Tests the toString method of the OptionGroup class."}, {"name": "testTwoLongOptionsFromGroup", "primary_tested": ["Parser.parse(Options, String[])"], "external_dependencies": {"modules": ["Parser", "AlreadySelectedException"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two long options from the same group are provided, expecting an exception."}, {"name": "testTwoOptionsFromDifferentGroup", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two options from different groups are provided."}, {"name": "testTwoOptionsFromGroup", "primary_tested": ["Parser.parse(Options, String[])"], "external_dependencies": {"modules": ["Parser", "AlreadySelectedException"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two options from the same group are provided, expecting an exception."}, {"name": "testTwoOptionsFromGroupWithProperties", "primary_tested": ["CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["CommandLine", "Parser", "Properties"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when an option from a group is provided with properties, expecting the other option from the group to be ignored."}, {"name": "testTwoValidLongOptions", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two valid long options are provided."}, {"name": "testTwoValidOptions", "primary_tested": ["CommandLine.hasOption(String)", "CommandLine.getArgList()"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when two valid options are provided."}, {"name": "testValidLongOnlyOptions", "primary_tested": ["CommandLine.hasOption(String)"], "external_dependencies": {"modules": ["CommandLine", "Parser"], "class_members": [{"name": "parser", "type": "variable"}, {"name": "options", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when valid long-only options (--export and --import) are provided."}]}, {"file_path": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "testclass_name": "BugsTest", "dependencies": ["package org.apache.commons.cli.bug;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.ByteArrayOutputStream;", "import java.io.PrintStream;", "import java.io.PrintWriter;", "import java.util.Iterator;", "import java.util.Properties;", "import org.apache.commons.cli.CommandLine;", "import org.apache.commons.cli.CommandLineParser;", "import org.apache.commons.cli.GnuParser;", "import org.apache.commons.cli.HelpFormatter;", "import org.apache.commons.cli.MissingArgumentException;", "import org.apache.commons.cli.Option;", "import org.apache.commons.cli.OptionBuilder;", "import org.apache.commons.cli.OptionGroup;", "import org.apache.commons.cli.Options;", "import org.apache.commons.cli.ParseException;", "import org.apache.commons.cli.Parser;", "import org.apache.commons.cli.PosixParser;", "import org.junit.jupiter.api.Test;"], "name": "BugsTest", "description": "Test suite for various bugs and edge cases in the Apache Commons CLI library.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "test11456", "primary_tested": ["CommandLine.getOptionValue(char)"], "associated_methods": ["Options.addOption(Option)", "PosixParser.parse(Options,String[])", "GnuParser.parse(Options,String[])"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "CommandLine", "CommandLineParser", "PosixParser", "GnuParser"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of command line options with optional and required arguments using both POSIX and GNU parsers."}, {"name": "test11457", "primary_tested": ["CommandLine.hasOption(String)"], "associated_methods": ["Options.addOption(Option)", "PosixParser.parse(Options,String[])"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "CommandLine", "CommandLineParser", "PosixParser"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the presence of a long option (--verbose) in the parsed command line."}, {"name": "test11458", "primary_tested": ["CommandLine.getOptionValues(char)"], "associated_methods": ["Options.addOption(Option)", "PosixParser.parse(Options,String[])", "CommandLine.iterator()"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "CommandLine", "CommandLineParser", "PosixParser", "Option"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of options with value separators and verifies the values using an iterator."}, {"name": "test11680", "primary_tested": ["CommandLine.getOptionValue(Option,String)", "CommandLine.getOptionValue(char,String)", "CommandLine.getOptionValue(String,String)"], "associated_methods": ["Options.addOption(String,boolean,String)", "PosixParser.parse(Options,String[])"], "external_dependencies": {"modules": ["Options", "CommandLine", "CommandLineParser", "PosixParser"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the retrieval of option values with default values and null checks."}, {"name": "test12210", "primary_tested": ["CommandLine.hasOption(String)"], "associated_methods": ["Options.addOptionGroup(OptionGroup)", "GnuParser.parse(Options,String[],boolean)", "CommandLine.getArgs()"], "external_dependencies": {"modules": ["Options", "OptionGroup", "Option", "CommandLine", "CommandLineParser", "GnuParser"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of command line options with exclusive option groups and nested options."}, {"name": "test13425", "primary_tested": ["Parser.parse(Options,String[])"], "associated_methods": ["Options.addOption(Option)", "PosixParser.parse(Options,String[])"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "Parser", "PosixParser", "MissingArgumentException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of missing arguments for options and expects a MissingArgumentException."}, {"name": "test13666", "primary_tested": ["HelpFormatter.printHelp(String,Options)"], "associated_methods": ["Options.addOption(Option)", "System.setOut(PrintStream)"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "HelpFormatter", "PrintStream", "ByteArrayOutputStream", "System"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the formatting of help messages for command line options."}, {"name": "test13666_Builder", "primary_tested": ["HelpFormatter.printHelp(String,Options)"], "associated_methods": ["Options.addOption(Option)", "HelpFormatter.builder().setPrintWriter(PrintWriter).get()"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "HelpFormatter", "PrintWriter", "ByteArrayOutputStream"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the formatting of help messages for command line options using the HelpFormatter builder."}, {"name": "test13935", "primary_tested": ["CommandLine.hasOption(String)"], "associated_methods": ["Options.addOptionGroup(OptionGroup)", "PosixParser.parse(Options,String[])"], "external_dependencies": {"modules": ["Options", "OptionGroup", "Option", "CommandLine", "CommandLineParser", "PosixParser", "ParseException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of command line options with required and exclusive option groups."}, {"name": "test14786", "primary_tested": ["CommandLine.hasOption(String)"], "associated_methods": ["Options.addOption(Option)", "GnuParser.parse(Options,String[])"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "CommandLine", "CommandLineParser", "GnuParser"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of command line options with a required option."}, {"name": "test15046", "primary_tested": ["CommandLine.getOptionValue(char)"], "associated_methods": ["Options.addOption(Option)", "PosixParser.parse(Options,String[])"], "external_dependencies": {"modules": ["Options", "Option", "CommandLine", "CommandLineParser", "PosixParser"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of command line options with conflicting short options."}, {"name": "test15648", "primary_tested": ["CommandLine.getOptionValue(String)"], "associated_methods": ["Options.addOption(Option)", "PosixParser.parse(Options,String[])"], "external_dependencies": {"modules": ["Options", "OptionBuilder", "CommandLine", "CommandLineParser", "PosixParser"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of command line options with quoted arguments."}, {"name": "test31148", "primary_tested": ["CommandLine.hasOption(char)", "CommandLine.getOptionValue(char)"], "associated_methods": ["Options.addOption(Option)", "PosixParser.parse(Options,String[],Properties)"], "external_dependencies": {"modules": ["Options", "Option", "CommandLine", "CommandLineParser", "PosixParser", "Properties"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of command line options with properties and verifies the option values."}]}, {"file_path": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "testclass_name": "BasicParserTest", "dependencies": ["package org.apache.commons.cli;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;"], "name": "BasicParserTest", "description": "Test class for the BasicParser functionality, extending AbstractParserTestCase. Most tests are disabled due to unsupported features by the BasicParser.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "testAmbiguousLongWithoutEqualSingleDash", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testAmbiguousLongWithoutEqualSingleDash2", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testAmbiguousPartialLongOption1", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testAmbiguousPartialLongOption2", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testAmbiguousPartialLongOption3", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testAmbiguousPartialLongOption4", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testBursting", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testDoubleDash2", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testLongOptionWithEqualsQuoteHandling", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testLongWithEqualDoubleDash", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testLongWithEqualSingleDash", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testLongWithoutEqualSingleDash", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testMissingArgWithBursting", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testNegativeOption", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser (CLI-184)"}, {"name": "testPartialLongOptionSingleDash", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testPropertiesOption1", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testPropertiesOption2", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testShortOptionConcatenatedQuoteHandling", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testShortWithEqual", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testShortWithoutEqual", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testStopBursting", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testStopBursting2", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testUnambiguousPartialLongOption1", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testUnambiguousPartialLongOption2", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testUnambiguousPartialLongOption3", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testUnambiguousPartialLongOption4", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}, {"name": "testUnrecognizedOptionWithBursting", "primary_tested": [], "associated_methods": [], "external_dependencies": {"modules": [], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Disabled test: not supported by the BasicParser"}]}, {"file_path": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "testclass_name": "CommandLineTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.io.ByteArrayOutputStream;", "import java.io.PrintStream;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.Properties;", "import java.util.function.Supplier;", "import java.util.stream.Stream;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;"], "name": "CommandLineTest", "description": "Unit tests for CommandLine operations including option handling and parsing.", "class_members": {"variables": [], "methods": [{"name": "asChar", "signature": "char asChar(Option opt)"}, {"name": "assertWritten", "signature": "void assertWritten(boolean optDep, ByteArrayOutputStream baos)"}, {"name": "checkHandler", "signature": "void checkHandler(boolean optDep, List<Option> handler, Option opt)"}], "nested_classes": [{"name": "Count", "description": "Enum for counting values"}]}, "fixtures": [], "test_cases": [{"name": "getOptionValuesTest", "primary_tested": ["CommandLine.getOptionValues(char)", "CommandLine.getOptionValues(String)", "CommandLine.getOptionValues(Option)", "CommandLine.getOptionValues(OptionGroup)"], "associated_methods": ["CommandLineTest.checkHandler(boolean, List<Option>, Option)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options", "Option", "OptionGroup", "ParseException"], "class_members": [{"name": "checkHandler", "type": "method"}]}, "category": "unit", "description": "Tests the retrieval of option values with and without default values, ensuring deprecated options are reported correctly."}, {"name": "getOptionValueTest", "primary_tested": ["CommandLine.getOptionValue(char)", "CommandLine.getOptionValue(String)", "CommandLine.getOptionValue(Option)", "CommandLine.getOptionValue(OptionGroup)"], "associated_methods": ["CommandLineTest.checkHandler(boolean, List<Option>, Option)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options", "Option", "OptionGroup", "ParseException"], "class_members": [{"name": "checkHandler", "type": "method"}]}, "category": "unit", "description": "Tests the retrieval of option values with and without default values, ensuring deprecated options are reported correctly."}, {"name": "getParsedOptionValueTest", "primary_tested": ["CommandLine.getParsedOptionValue(char)", "CommandLine.getParsedOptionValue(String)", "CommandLine.getParsedOptionValue(Option)", "CommandLine.getParsedOptionValue(OptionGroup)"], "associated_methods": ["CommandLineTest.checkHandler(boolean, List<Option>, Option)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options", "Option", "OptionGroup", "ParseException"], "class_members": [{"name": "checkHandler", "type": "method"}]}, "category": "unit", "description": "Tests the retrieval of parsed option values with and without default values, ensuring deprecated options are reported correctly."}, {"name": "hasOptionNoDeprecationHandlerTest", "primary_tested": ["CommandLine.hasOption(char)", "CommandLine.hasOption(String)", "CommandLine.hasOption(Option)", "CommandLine.hasOption(OptionGroup)"], "associated_methods": ["CommandLineTest.assertWritten(boolean, ByteArrayOutputStream)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options", "Option", "OptionGroup", "ParseException"], "class_members": [{"name": "assertWritten", "type": "method"}]}, "category": "unit", "description": "Tests the presence of options without a deprecation handler, ensuring correct behavior."}, {"name": "hasOptionNullDeprecationHandlerTest", "primary_tested": ["CommandLine.hasOption(char)", "CommandLine.hasOption(String)", "CommandLine.hasOption(Option)", "CommandLine.hasOption(OptionGroup)"], "associated_methods": ["CommandLineTest.assertWritten(boolean, ByteArrayOutputStream)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options", "Option", "OptionGroup", "ParseException"], "class_members": [{"name": "assertWritten", "type": "method"}]}, "category": "unit", "description": "Tests the presence of options with a null deprecation handler, ensuring correct behavior."}, {"name": "hasOptionTest", "primary_tested": ["CommandLine.hasOption(char)", "CommandLine.hasOption(String)", "CommandLine.hasOption(Option)", "CommandLine.hasOption(OptionGroup)"], "associated_methods": ["CommandLineTest.checkHandler(boolean, List<Option>, Option)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options", "Option", "OptionGroup", "ParseException"], "class_members": [{"name": "checkHandler", "type": "method"}]}, "category": "unit", "description": "Tests the presence of options, ensuring deprecated options are reported correctly."}, {"name": "noDeprecationHandlerTest", "primary_tested": ["CommandLine.getOptionValue(char)", "CommandLine.getOptionValue(String)", "CommandLine.getOptionValue(Option)", "CommandLine.getOptionValue(OptionGroup)"], "associated_methods": ["CommandLineTest.assertWritten(boolean, ByteArrayOutputStream)"], "external_dependencies": {"modules": ["CommandLine", "DefaultParser", "Options", "Option", "OptionGroup", "ParseException"], "class_members": [{"name": "assertWritten", "type": "method"}]}, "category": "unit", "description": "Tests the retrieval of option values without a deprecation handler, ensuring correct behavior."}, {"name": "testBadGetParsedOptionValue", "primary_tested": ["CommandLine.getParsedOptionValue(String)"], "external_dependencies": {"modules": ["CommandLine", "Options", "Option", "CommandLineParser", "DefaultParser", "ParseException"]}, "category": "unit", "description": "Tests the handling of bad input for parsed option values, ensuring exceptions are thrown correctly."}, {"name": "testBuilder", "primary_tested": ["CommandLine.Builder.addArg(String)", "CommandLine.Builder.addOption(Option)", "CommandLine.Builder.build()"], "external_dependencies": {"modules": ["CommandLine", "Option"]}, "category": "unit", "description": "Tests the CommandLine builder functionality, ensuring arguments and options are added correctly."}, {"name": "testBuilderNullArgs", "primary_tested": ["CommandLine.Builder.addArg(String)", "CommandLine.Builder.addOption(Option)", "CommandLine.Builder.build()"], "external_dependencies": {"modules": ["CommandLine", "Option"]}, "category": "unit", "description": "Tests the CommandLine builder functionality with null arguments, ensuring they are handled correctly."}, {"name": "testBuilderNullOption", "primary_tested": ["CommandLine.Builder.addArg(String)", "CommandLine.Builder.addOption(Option)", "CommandLine.Builder.build()"], "external_dependencies": {"modules": ["CommandLine", "Option"]}, "category": "unit", "description": "Tests the CommandLine builder functionality with null options, ensuring they are handled correctly."}, {"name": "testGetOptionProperties", "primary_tested": ["CommandLine.getOptionProperties(String)"], "external_dependencies": {"modules": ["CommandLine", "Options", "Option", "Parser", "GnuParser", "ParseException"]}, "category": "unit", "description": "Tests the retrieval of option properties, ensuring properties are parsed and retrieved correctly."}, {"name": "testGetOptionPropertiesWithOption", "primary_tested": ["CommandLine.getOptionProperties(Option)"], "external_dependencies": {"modules": ["CommandLine", "Options", "Option", "Parser", "GnuParser", "ParseException"]}, "category": "unit", "description": "Tests the retrieval of option properties using an Option object, ensuring properties are parsed and retrieved correctly."}, {"name": "testGetOptionsBuilder", "primary_tested": ["CommandLine.getOptions()"], "external_dependencies": {"modules": ["CommandLine", "Option"]}, "category": "unit", "description": "Tests the retrieval of options from a CommandLine object created with a builder, ensuring options are managed correctly."}, {"name": "testGetOptionsCtor", "primary_tested": ["CommandLine.getOptions()"], "external_dependencies": {"modules": ["CommandLine", "Option"]}, "category": "unit", "description": "Tests the retrieval of options from a CommandLine object created with a constructor, ensuring options are managed correctly."}, {"name": "testNullOption", "primary_tested": ["CommandLine.getOptionValue(Option)", "CommandLine.getParsedOptionValue(Option)", "CommandLine.getOptionValue(OptionGroup)", "CommandLine.getParsedOptionValue(OptionGroup)"], "external_dependencies": {"modules": ["CommandLine", "Options", "Option", "CommandLineParser", "DefaultParser", "ParseException"]}, "category": "unit", "description": "Tests the handling of null options, ensuring null values are returned correctly."}]}, {"file_path": "src/test/java/org/apache/commons/cli/OptionTest.java", "testclass_name": "OptionTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import static org.junit.jupiter.api.Assertions.assertNotSame;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import org.junit.jupiter.api.Test;"], "name": "OptionTest", "description": "Unit tests for the Option class in the Apache Commons CLI library.", "class_members": {"variables": [], "methods": [{"name": "checkOption", "signature": "void checkOption(Option, String, String, String, int, String, boolean, boolean, char, Class<?>, String, Boolean, String)"}, {"name": "roundTrip", "signature": "Option roundTrip(Option) throws IOException, ClassNotFoundException"}], "nested_classes": [{"name": "DefaultOption", "description": "Internal subclass of Option with a default value."}, {"name": "TestOption", "description": "Internal subclass of Option for testing purposes."}]}, "fixtures": [], "test_cases": [{"name": "testAddValue", "primary_tested": ["Option.addValue(String)", "Option.processValue(String)"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the addValue and processValue methods of the Option class, ensuring they throw the expected exceptions."}, {"name": "testBuilderEmpty", "primary_tested": ["Option.builder().build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class, ensuring it throws an exception when insufficient parameters are provided."}, {"name": "testBuilderInsufficientParams1", "primary_tested": ["Option.builder().desc(String).build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class, ensuring it throws an exception when insufficient parameters are provided."}, {"name": "testBuilderInsufficientParams2", "primary_tested": ["Option.builder(null).desc(String).build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class, ensuring it throws an exception when insufficient parameters are provided."}, {"name": "testBuilderInvalidOptionName0", "primary_tested": ["Option.builder().option(String).build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class, ensuring it throws an exception when invalid option names are provided."}, {"name": "testBuilderInvalidOptionName1", "primary_tested": ["Option.builder().option(String).build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class, ensuring it throws an exception when invalid option names are provided."}, {"name": "testBuilderInvalidOptionName2", "primary_tested": ["Option.builder().option(String).build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class, ensuring it throws an exception when invalid option names are provided."}, {"name": "testBuilderInvalidOptionName3", "primary_tested": ["Option.builder(String).build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class, ensuring it throws an exception when invalid option names are provided."}, {"name": "testBuilderInvalidOptionName4", "primary_tested": ["Option.builder(String).build()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the builder method of the Option class, ensuring it throws an exception when invalid option names are provided."}, {"name": "testBuilderMethods", "primary_tested": ["Option.builder().build()"], "associated_methods": ["Option.getOpt()", "Option.getDescription()", "Option.getLongOpt()", "Option.getArgs()", "Option.getArgName()", "Option.isRequired()", "Option.hasOptionalArg()", "Option.hasArg()", "Option.acceptsArg()", "Option.getValueSeparator()", "Option.getType()", "Option.getDeprecated().getDescription()", "Option.getDeprecated().isForRemoval()", "Option.getDeprecated().getSince()"], "external_dependencies": {"modules": ["Option", "DeprecatedAttributes"], "class_members": []}, "category": "unit", "description": "Tests various configurations of the Option builder, ensuring the correct values are set."}, {"name": "testClear", "primary_tested": ["TestOption.clearValues()"], "associated_methods": ["TestOption.getValuesList()", "TestOption.addValue(String)"], "external_dependencies": {"modules": ["TestOption"], "class_members": []}, "category": "unit", "description": "Tests the clearValues method of the TestOption class, ensuring it correctly clears the values list."}, {"name": "testClone", "primary_tested": ["TestOption.clone()"], "associated_methods": ["TestOption.setDescription(String)", "TestOption.getDescription()", "TestOption.setArgs(int)", "TestOption.addValue(String)", "TestOption.getArgs()", "TestOption.getValuesList()", "TestOption.getValues()"], "external_dependencies": {"modules": ["TestOption"], "class_members": []}, "category": "unit", "description": "Tests the clone method of the TestOption class, ensuring it creates a deep copy."}, {"name": "testEquals", "primary_tested": ["Option.equals(Object)"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the equals method of the Option class, ensuring it correctly compares Option instances."}, {"name": "testGetValue", "primary_tested": ["Option.getValue(String)", "Option.getValue(int)", "Option.getValue()"], "associated_methods": ["Option.setArgs(int)", "Option.processValue(String)"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the getValue methods of the Option class, ensuring they return the correct values."}, {"name": "testHasArgName", "primary_tested": ["Option.hasArgName()"], "associated_methods": ["Option.setArgName(String)"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the hasArgName method of the Option class, ensuring it correctly identifies if an argument name is set."}, {"name": "testHasArgs", "primary_tested": ["Option.hasArgs()"], "associated_methods": ["Option.setArgs(int)"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the hasArgs method of the Option class, ensuring it correctly identifies if arguments are set."}, {"name": "testHashCode", "primary_tested": ["Option.hashCode()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the hashCode method of the Option class, ensuring it generates different hash codes for different Option instances."}, {"name": "testSerialization", "primary_tested": ["Option.getConverter()"], "associated_methods": ["Option.setConverter(Converter)"], "external_dependencies": {"modules": ["Option", "Converter", "TypeHandlerTest.Instantiable"], "class_members": []}, "category": "unit", "description": "Tests the serialization and deserialization of the Option class, ensuring the converter is correctly handled."}, {"name": "testSubclass", "primary_tested": ["DefaultOption.clone()"], "associated_methods": ["DefaultOption.getValue()"], "external_dependencies": {"modules": ["DefaultOption"], "class_members": []}, "category": "unit", "description": "Tests the clone method of the DefaultOption subclass, ensuring it correctly clones the instance."}, {"name": "testTypeClass", "primary_tested": ["Option.getType()"], "associated_methods": ["Option.setType(Class<?>)", "Option.getType()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the getType and setType methods of the Option class, ensuring they correctly handle the type."}, {"name": "testTypeObject", "primary_tested": ["Option.getType()"], "associated_methods": ["Option.setType(Object)", "Option.getType()"], "external_dependencies": {"modules": ["Option"], "class_members": []}, "category": "unit", "description": "Tests the getType and setType methods of the Option class, ensuring they correctly handle the type when set as an Object."}]}, {"file_path": "src/test/java/org/apache/commons/cli/ValueTest.java", "testclass_name": "ValueTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.stream.Stream;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.MethodSource;"]}, {"file_path": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "testclass_name": "HelpFormatterTest", "dependencies": ["package org.apache.commons.cli;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.mockito.Mockito.spy;", "import static org.mockito.Mockito.when;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.OutputStreamWriter;", "import java.io.PrintWriter;", "import java.io.StringWriter;", "import java.io.UncheckedIOException;", "import java.util.ArrayList;", "import java.util.List;", "import java.util.stream.Stream;", "import org.apache.commons.cli.HelpFormatter.Builder;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;"]}]