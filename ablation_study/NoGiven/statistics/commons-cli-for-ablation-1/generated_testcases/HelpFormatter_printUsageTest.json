[{"strategy": "retry", "code": "\npackage org.apache.commons.cli;\n\nimport org.junit.jupiter.api.Test;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class HelpFormatter_printUsageTest {\n\n    @Test\n    public void testPrintUsage_NoOptionGroups() {\n        HelpFormatter formatter = new HelpFormatter();\n        StringWriter sw = new StringWriter();\n        PrintWriter pw = new PrintWriter(sw);\n\n        Options options = new Options();\n        options.addOption(\"a\", \"optionA\", false, \"Description for A\");\n        options.addOption(\"b\", \"optionB\", true, \"Description for B\");\n\n        formatter.printUsage(pw, 80, \"myapp\", options);\n        pw.flush();\n\n        String expected = \"usage: myapp -a [-b <arg>]\\n\";\n        assertEquals(expected, sw.toString());\n    }\n\n    @Test\n    public void testPrintUsage_WithOptionGroups() {\n        HelpFormatter formatter = new HelpFormatter();\n        StringWriter sw = new StringWriter();\n        PrintWriter pw = new PrintWriter(sw);\n\n        Options options = new Options();\n        OptionGroup group = new OptionGroup();\n        group.addOption(new Option(\"a\", \"optionA\", false, \"Description for A\"));\n        group.addOption(new Option(\"b\", \"optionB\", true, \"Description for B\"));\n        options.addOptionGroup(group);\n\n        formatter.printUsage(pw, 80, \"myapp\", options);\n        pw.flush();\n\n        String expected = \"usage: myapp -a | -b <arg>\\n\";\n        assertEquals(expected, sw.toString());\n    }\n\n    @Test\n    public void testPrintUsage_WithOptionComparator() {\n        HelpFormatter formatter = new HelpFormatter();\n        StringWriter sw = new StringWriter();\n        PrintWriter pw = new PrintWriter(sw);\n\n        Options options = new Options();\n        options.addOption(\"b\", \"optionB\", true, \"Description for B\");\n        options.addOption(\"a\", \"optionA\", false, \"Description for A\");\n\n        formatter.setOptionComparator((o1, o2) -> o1.getKey().compareTo(o2.getKey()));\n        formatter.printUsage(pw, 80, \"myapp\", options);\n        pw.flush();\n\n        String expected = \"usage: myapp -a [-b <arg>]\\n\";\n        assertEquals(expected, sw.toString());\n    }\n}\n"}]