[{"strategy": "generate", "code": "\npackage org.apache.commons.cli;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CommandLine_hasOptionTest {\n    private CommandLine cmd;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        final Options options = new Options();\n\n        options.addOption(\"a\", false, \"toggle -a\");\n        options.addOption(\"b\", true, \"set -b\");\n        options.addOption(\"c\", \"c\", false, \"toggle -c\");\n        options.addOption(\"d\", \"d\", true, \"set -d\");\n\n        options.addOption(OptionBuilder.withLongOpt(\"e\").hasArgs().withDescription(\"set -e \").create('e'));\n        options.addOption(\"f\", \"f\", false, \"jk\");\n        options.addOption(OptionBuilder.withLongOpt(\"g\").hasArgs(2).withDescription(\"set -g\").create('g'));\n        options.addOption(OptionBuilder.withLongOpt(\"h\").hasArg().withDescription(\"set -h\").create('h'));\n        options.addOption(OptionBuilder.withLongOpt(\"i\").withDescription(\"set -i\").create('i'));\n        options.addOption(OptionBuilder.withLongOpt(\"j\").hasArgs().withDescription(\"set -j\").withValueSeparator('=').create('j'));\n        options.addOption(OptionBuilder.withLongOpt(\"k\").hasArgs().withDescription(\"set -k\").withValueSeparator('=').create('k'));\n        options.addOption(OptionBuilder.withLongOpt(\"m\").hasArgs().withDescription(\"set -m\").withValueSeparator().create('m'));\n\n        //@formatter:off\n        final String[] args = {\n            \"-a\",\n            \"-b\", \"foo\",\n            \"--c\",\n            \"--d\", \"bar\",\n            \"-e\", \"one\", \"two\",\n            \"-f\",\n            \"arg1\", \"arg2\",\n            \"-g\", \"val1\", \"val2\", \"arg3\",\n            \"-h\", \"val1\", \"-i\",\n            \"-h\", \"val2\",\n            \"-jkey=value\",\n            \"-j\", \"key=value\",\n            \"-kkey1=value1\",\n            \"-kkey2=value2\",\n            \"-mkey=value\"\n        };\n        //@formatter:on\n\n        final CommandLineParser parser = new PosixParser();\n\n        cmd = parser.parse(options, args);\n    }\n\n    @Test\n    public void testHasOptionTrue() {\n        assertTrue(cmd.hasOption(\"a\"), \"Option a should be present\");\n        assertTrue(cmd.hasOption(\"b\"), \"Option b should be present\");\n        assertTrue(cmd.hasOption(\"c\"), \"Option c should be present\");\n        assertTrue(cmd.hasOption(\"d\"), \"Option d should be present\");\n    }\n\n    @Test\n    public void testHasOptionFalse() {\n        assertFalse(cmd.hasOption(\"z\"), \"Option z should not be present\");\n    }\n\n    @Test\n    public void testHasOptionDeprecated() {\n        Option deprecatedOption = Option.builder(\"dep\").longOpt(\"deprecated\").hasArg().build();\n        deprecatedOption.setDeprecated(true);\n        cmd.addOption(deprecatedOption);\n        assertTrue(cmd.hasOption(\"dep\"), \"Deprecated option dep should be present\");\n    }\n}\n"}]