[{"strategy": "generate", "code": "\npackage org.apache.commons.cli;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.io.File;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.net.URL;\nimport org.junit.jupiter.api.Test;\n\npublic class TypeHandler_createValueTest {\n\n    @Test\n    public void testCreateValue_Long() throws ParseException {\n        Long expected = 123L;\n        Long actual = TypeHandler.createValue(\"123\", Long.class);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testCreateValue_Integer() throws ParseException {\n        Integer expected = 456;\n        Integer actual = TypeHandler.createValue(\"456\", Integer.class);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testCreateValue_File() throws ParseException {\n        File expected = new File(\"/tmp/test.txt\");\n        File actual = TypeHandler.createValue(\"/tmp/test.txt\", File.class);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testCreateValue_URL() throws ParseException {\n        URL expected = new URL(\"http://example.com\");\n        URL actual = TypeHandler.createValue(\"http://example.com\", URL.class);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testCreateValue_BigInteger() throws ParseException {\n        BigInteger expected = new BigInteger(\"12345678901234567890\");\n        BigInteger actual = TypeHandler.createValue(\"12345678901234567890\", BigInteger.class);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testCreateValue_BigDecimal() throws ParseException {\n        BigDecimal expected = new BigDecimal(\"1234567890.1234567890\");\n        BigDecimal actual = TypeHandler.createValue(\"1234567890.1234567890\", BigDecimal.class);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testCreateValue_InvalidInput() {\n        assertThrows(ParseException.class, () -> {\n            TypeHandler.createValue(\"invalid\", Long.class);\n        });\n    }\n}\n"}]