{"file_path": "src/test/java/net/hydromatic/morel/ShellTest.java", "testclass_name": "ShellTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.eval.Prop;", "import net.hydromatic.morel.foreign.ForeignValue;", "import com.google.common.collect.ImmutableList;", "import com.google.common.collect.ImmutableMap;", "import org.hamcrest.Matcher;", "import org.junit.jupiter.api.Test;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.File;", "import java.io.IOException;", "import java.io.Reader;", "import java.io.StringReader;", "import java.io.StringWriter;", "import java.util.Collections;", "import java.util.LinkedHashMap;", "import java.util.List;", "import java.util.Map;", "import java.util.function.UnaryOperator;", "import static net.hydromatic.morel.TestUtils.findDirectory;", "import static net.hydromatic.morel.TestUtils.plus;", "import static org.hamcrest.CoreMatchers.anyOf;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.Is.is;", "import static org.hamcrest.core.StringContains.containsString;", "import static org.junit.jupiter.api.Assumptions.assumeTrue;", "import static java.nio.charset.StandardCharsets.UTF_8;", "import static java.util.Objects.requireNonNull;"], "name": "ShellTest", "description": "Unit tests for the Shell class, focusing on various input scenarios and configurations.", "class_members": {"methods": [{"name": "fixture", "signature": "static Fixture fixture()"}, {"name": "pauseForTenMilliseconds", "signature": "static void pauseForTenMilliseconds()"}, {"name": "assumeNotInCi", "signature": "static void assumeNotInCi()"}, {"name": "getUseDirectory", "signature": "static File getUseDirectory()"}, {"name": "is2", "signature": "private Matcher<String> is2(String expected)"}], "nested_classes": [{"name": "Fixture", "description": "Interface for testing the shell."}, {"name": "FixtureImpl", "description": "Implementation of Fixture."}]}, "fixtures": ["assumeNotInCi"], "test_cases": [{"name": "testShell", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Collections", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with empty input."}, {"name": "testShellNoBanner", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with empty input and banner disabled."}, {"name": "testOneLine", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the Shell with one line of input."}, {"name": "testTwoLines", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the Shell with a continued line of input."}, {"name": "testReal", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the Shell printing some tricky real values."}, {"name": "testEmptyLines", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the Shell with lines that are comments, empty, or have only a semicolon."}, {"name": "testSingleLineComment", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the Shell with a single-line comment."}, {"name": "testSingleLineCommentWithQuote", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the Shell with a single-line comment that contains a quote."}, {"name": "testMultiLineLet", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the Shell with a let statement spread over multiple lines."}, {"name": "testUse", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the use function."}, {"name": "testMatchWarning", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests a warning."}, {"name": "testUseEmpty", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the use function on an empty file."}, {"name": "testUseMissing", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the use function on a missing file."}, {"name": "testUseSelfReferential", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the use function on a file that uses itself."}, {"name": "testRaw", "primary_tested": ["Main.run()"], "external_dependencies": {"modules": ["Main", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests a script running in raw mode using Main rather than Shell."}, {"name": "testStringDepth", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the string depth functionality."}, {"name": "testPrintDepth", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the print depth functionality."}, {"name": "testPrintLength", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the print length functionality."}, {"name": "testLineWidth", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the line width functionality."}]}