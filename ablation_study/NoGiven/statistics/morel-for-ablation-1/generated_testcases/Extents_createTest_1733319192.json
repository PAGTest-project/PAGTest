[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.compile;\n\nimport net.hydromatic.morel.ast.Core;\nimport net.hydromatic.morel.type.TypeSystem;\nimport net.hydromatic.morel.util.ImmutablePairList;\nimport net.hydromatic.morel.util.Pair;\nimport net.hydromatic.morel.util.PairList;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.SortedMap;\nimport java.util.TreeMap;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\nclass Extents_createTest {\n\n    @Test\n    void testCreate() {\n        // Given\n        TypeSystem typeSystem = new TypeSystem();\n        Core.Pat pat = new Core.Pat();\n        SortedMap<Core.NamedPat, Core.Exp> boundPats = new TreeMap<>();\n        Iterable<? extends Core.FromStep> followingSteps = new Iterable<Core.FromStep>() {\n            @Override\n            public java.util.Iterator<Core.FromStep> iterator() {\n                return java.util.Collections.emptyIterator();\n            }\n        };\n        PairList<Core.IdPat, Core.Exp> idPats = ImmutablePairList.of();\n\n        // When\n        Analysis result = Extents.create(typeSystem, pat, boundPats, followingSteps, idPats);\n\n        // Then\n        assertNotNull(result);\n        assertEquals(boundPats, result.boundPats);\n        assertNotNull(result.extentExp);\n        assertNotNull(result.satisfiedFilters);\n        assertNotNull(result.remainingFilters);\n    }\n\n    @Test\n    void testCreateWithFollowingSteps() {\n        // Given\n        TypeSystem typeSystem = new TypeSystem();\n        Core.Pat pat = new Core.Pat();\n        SortedMap<Core.NamedPat, Core.Exp> boundPats = new TreeMap<>();\n        Iterable<? extends Core.FromStep> followingSteps = new Iterable<Core.FromStep>() {\n            @Override\n            public java.util.Iterator<Core.FromStep> iterator() {\n                return java.util.Collections.singletonList(new Core.Where()).iterator();\n            }\n        };\n        PairList<Core.IdPat, Core.Exp> idPats = ImmutablePairList.of();\n\n        // When\n        Analysis result = Extents.create(typeSystem, pat, boundPats, followingSteps, idPats);\n\n        // Then\n        assertNotNull(result);\n        assertEquals(boundPats, result.boundPats);\n        assertNotNull(result.extentExp);\n        assertNotNull(result.satisfiedFilters);\n        assertNotNull(result.remainingFilters);\n    }\n\n    @Test\n    void testCreateWithNonEmptyFoo() {\n        // Given\n        TypeSystem typeSystem = new TypeSystem();\n        Core.Pat pat = new Core.Pat();\n        SortedMap<Core.NamedPat, Core.Exp> boundPats = new TreeMap<>();\n        Iterable<? extends Core.FromStep> followingSteps = new Iterable<Core.FromStep>() {\n            @Override\n            public java.util.Iterator<Core.FromStep> iterator() {\n                return java.util.Collections.emptyIterator();\n            }\n        };\n        PairList<Core.IdPat, Core.Exp> idPats = ImmutablePairList.of();\n        Extent extent = new Extent(typeSystem, pat, boundPats, idPats);\n        ExtentMap map = new ExtentMap();\n        map.map.put(pat, ImmutablePairList.of(new Core.Exp(), new Core.Exp()));\n\n        // When\n        Analysis result = Extents.create(typeSystem, pat, boundPats, followingSteps, idPats);\n\n        // Then\n        assertNotNull(result);\n        assertEquals(boundPats, result.boundPats);\n        assertNotNull(result.extentExp);\n        assertNotNull(result.satisfiedFilters);\n        assertNotNull(result.remainingFilters);\n    }\n}\n"}]