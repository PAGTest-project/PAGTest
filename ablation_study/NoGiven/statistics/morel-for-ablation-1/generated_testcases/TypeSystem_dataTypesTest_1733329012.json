[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.type;\n\nimport com.google.common.collect.ImmutableList;\nimport net.hydromatic.morel.util.Pair;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class TypeSystem_dataTypesTest {\n\n    @Test\n    public void testDataTypes() {\n        // Given\n        TypeSystem typeSystem = new TypeSystem();\n        Keys.DataTypeKey mockKey1 = mock(Keys.DataTypeKey.class);\n        Keys.DataTypeKey mockKey2 = mock(Keys.DataTypeKey.class);\n        DataType mockDataType1 = mock(DataType.class);\n        DataType mockDataType2 = mock(DataType.class);\n        Type.Key mockNameKey1 = mock(Type.Key.class);\n        Type.Key mockNameKey2 = mock(Type.Key.class);\n        Type.Key mockTypeKey1 = mock(Type.Key.class);\n        Type.Key mockTypeKey2 = mock(Type.Key.class);\n\n        when(mockKey1.toType(typeSystem)).thenReturn(mockDataType1);\n        when(mockKey2.toType(typeSystem)).thenReturn(mockDataType2);\n        when(mockDataType1.name).thenReturn(\"name1\");\n        when(mockDataType2.name).thenReturn(\"name2\");\n        when(Keys.name(mockDataType1.name)).thenReturn(mockNameKey1);\n        when(Keys.name(mockDataType2.name)).thenReturn(mockNameKey2);\n        when(mockDataType1.arguments).thenReturn(ImmutableList.of());\n        when(mockDataType2.arguments).thenReturn(ImmutableList.of());\n        when(mockDataType1.typeConstructors).thenReturn(ImmutableList.of(Pair.of(\"type1\", mockTypeKey1)));\n        when(mockDataType2.typeConstructors).thenReturn(ImmutableList.of(Pair.of(\"type2\", mockTypeKey2)));\n\n        List<Keys.DataTypeKey> keys = ImmutableList.of(mockKey1, mockKey2);\n\n        // When\n        List<Type> result = typeSystem.dataTypes(keys);\n\n        // Then\n        assertEquals(2, result.size());\n        assertEquals(mockDataType1, result.get(0));\n        assertEquals(mockDataType2, result.get(1));\n    }\n}\n"}]