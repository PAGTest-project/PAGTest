[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.compile;\n\nimport net.hydromatic.morel.ast.AstNode;\nimport net.hydromatic.morel.type.Type;\nimport net.hydromatic.morel.type.TypeVar;\nimport net.hydromatic.morel.util.Unifier;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass TypeMap_typeIsVariableTest {\n\n    @Test\n    void testTypeIsVariable_WithTypeVar() {\n        // Given\n        TypeMap typeMap = new TypeMap(null, null, null);\n        AstNode node = mock(AstNode.class);\n        Unifier.Variable variable = mock(Unifier.Variable.class);\n        TypeVar typeVar = mock(TypeVar.class);\n\n        when(typeMap.nodeTypeTerms.get(node)).thenReturn(variable);\n        when(typeMap.termToType(variable)).thenReturn(typeVar);\n\n        // When\n        boolean result = typeMap.typeIsVariable(node);\n\n        // Then\n        assertTrue(result);\n    }\n\n    @Test\n    void testTypeIsVariable_WithNonVariableTerm() {\n        // Given\n        TypeMap typeMap = new TypeMap(null, null, null);\n        AstNode node = mock(AstNode.class);\n        Unifier.Term term = mock(Unifier.Term.class);\n\n        when(typeMap.nodeTypeTerms.get(node)).thenReturn(term);\n\n        // When\n        boolean result = typeMap.typeIsVariable(node);\n\n        // Then\n        assertFalse(result);\n    }\n\n    @Test\n    void testTypeIsVariable_WithProgressiveType() {\n        // Given\n        TypeMap typeMap = new TypeMap(null, null, null);\n        AstNode node = mock(AstNode.class);\n        Unifier.Variable variable = mock(Unifier.Variable.class);\n        Type progressiveType = mock(Type.class);\n\n        when(typeMap.nodeTypeTerms.get(node)).thenReturn(variable);\n        when(typeMap.termToType(variable)).thenReturn(progressiveType);\n        when(progressiveType.isProgressive()).thenReturn(true);\n\n        // When\n        boolean result = typeMap.typeIsVariable(node);\n\n        // Then\n        assertTrue(result);\n    }\n}\n"}]