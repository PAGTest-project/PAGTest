[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.type;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass TypeSystem_applyTest {\n\n    @Test\n    void testApplyForallType() {\n        TypeSystem typeSystem = new TypeSystem();\n        ForallType forallType = new ForallType(2, new DataType(\"TestDataType\", \"TestMoniker\", Arrays.asList(), null));\n        List<Type> types = Arrays.asList(typeSystem.typeVariable(0), typeSystem.typeVariable(1));\n\n        Type result = typeSystem.apply(forallType, types);\n\n        assertNotNull(result);\n        assertTrue(result instanceof DataType);\n    }\n\n    @Test\n    void testApplyDataType() {\n        TypeSystem typeSystem = new TypeSystem();\n        DataType dataType = new DataType(\"TestDataType\", \"TestMoniker\", Arrays.asList(), null);\n        List<Type> types = Arrays.asList(typeSystem.typeVariable(0), typeSystem.typeVariable(1));\n\n        Type result = typeSystem.apply(dataType, types);\n\n        assertNotNull(result);\n        assertTrue(result instanceof DataType);\n    }\n\n    @Test\n    void testApplyThrowsAssertionError() {\n        TypeSystem typeSystem = new TypeSystem();\n        Type invalidType = new Type() {\n            @Override\n            public Key key() {\n                return null;\n            }\n\n            @Override\n            public <R> R accept(TypeVisitor<R> typeVisitor) {\n                return null;\n            }\n        };\n        List<Type> types = Arrays.asList(typeSystem.typeVariable(0), typeSystem.typeVariable(1));\n\n        assertThrows(AssertionError.class, () -> typeSystem.apply(invalidType, types));\n    }\n}\n"}]