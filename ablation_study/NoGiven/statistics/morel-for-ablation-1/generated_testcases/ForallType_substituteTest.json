[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.type;\n\nimport com.google.common.collect.Maps;\nimport net.hydromatic.morel.ast.Op;\nimport org.junit.jupiter.api.Test;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\nclass ForallType_substituteTest {\n\n    @Test\n    void testSubstituteDataType() {\n        // Given\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        DataType dataType = mock(DataType.class);\n        when(dataType.op()).thenReturn(Op.DATA_TYPE);\n        when(dataType.name).thenReturn(\"TestDataType\");\n        when(dataType.typeConstructors).thenReturn(new TreeMap<>());\n\n        ForallType forallType = new ForallType(1, dataType);\n\n        Key expectedKey = mock(Key.class);\n        Type expectedType = mock(Type.class);\n        when(Keys.datatype(anyString(), anyList(), anyMap())).thenReturn(expectedKey);\n        when(typeSystem.typeFor(expectedKey)).thenReturn(expectedType);\n\n        // When\n        Type result = forallType.substitute(typeSystem, Collections.emptyList());\n\n        // Then\n        assertEquals(expectedType, result);\n    }\n\n    @Test\n    void testSubstituteFunctionType() {\n        // Given\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        Type functionType = mock(Type.class);\n        when(functionType.op()).thenReturn(Op.FUNCTION_TYPE);\n\n        ForallType forallType = new ForallType(1, functionType);\n\n        Type expectedType = mock(Type.class);\n        when(functionType.substitute(eq(typeSystem), anyList())).thenReturn(expectedType);\n\n        // When\n        Type result = forallType.substitute(typeSystem, Collections.emptyList());\n\n        // Then\n        assertEquals(expectedType, result);\n    }\n\n    @Test\n    void testSubstituteDefaultCase() {\n        // Given\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        Type unknownType = mock(Type.class);\n        when(unknownType.op()).thenReturn(Op.UNKNOWN);\n        when(unknownType.toString()).thenReturn(\"UnknownType\");\n\n        ForallType forallType = new ForallType(1, unknownType);\n\n        // When & Then\n        assertThrows(AssertionError.class, () -> forallType.substitute(typeSystem, Collections.emptyList()));\n    }\n}\n"}]