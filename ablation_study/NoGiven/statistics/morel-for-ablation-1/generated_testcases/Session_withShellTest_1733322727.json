[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.eval;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Consumer;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class Session_withShellTest {\n\n    @Test\n    public void testWithShell_NoException() {\n        // Given\n        Session session = new Session(new HashMap<>());\n        Shell mockShell = mock(Shell.class);\n        Consumer<Session> consumer = mock(Consumer.class);\n        Consumer<String> outLines = mock(Consumer.class);\n\n        // When\n        session.withShell(mockShell, outLines, consumer);\n\n        // Then\n        verify(consumer).accept(session);\n        verifyNoInteractions(outLines);\n        assertEquals(Shells.INSTANCE, session.shell);\n    }\n\n    @Test\n    public void testWithShell_WithException() {\n        // Given\n        Session session = new Session(new HashMap<>());\n        Shell mockShell = mock(Shell.class);\n        Consumer<Session> consumer = mock(Consumer.class);\n        Consumer<String> outLines = mock(Consumer.class);\n        RuntimeException exception = new RuntimeException(\"Test exception\");\n\n        doThrow(exception).when(consumer).accept(session);\n\n        // When\n        session.withShell(mockShell, outLines, consumer);\n\n        // Then\n        verify(mockShell).handle(exception, any(StringBuilder.class));\n        verify(outLines).accept(anyString());\n        assertEquals(Shells.INSTANCE, session.shell);\n    }\n}\n"}]