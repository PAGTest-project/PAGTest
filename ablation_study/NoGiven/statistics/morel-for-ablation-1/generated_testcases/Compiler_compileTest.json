[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.compile;\n\nimport net.hydromatic.morel.ast.Core;\nimport net.hydromatic.morel.ast.Op;\nimport net.hydromatic.morel.eval.Code;\nimport net.hydromatic.morel.eval.Codes;\nimport net.hydromatic.morel.eval.Unit;\nimport net.hydromatic.morel.type.TypeSystem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class Compiler_compileTest {\n\n    @Test\n    public void testCompile() {\n        Compiler compiler = new Compiler(new TypeSystem());\n        Context cx = new Context(Codes.emptyEnv());\n\n        // Test BOOL_LITERAL\n        Core.Exp boolExp = new Core.Literal(Op.BOOL_LITERAL, true);\n        Code boolCode = compiler.compile(cx, boolExp);\n        assertEquals(Codes.constant(true), boolCode);\n\n        // Test CHAR_LITERAL\n        Core.Exp charExp = new Core.Literal(Op.CHAR_LITERAL, 'a');\n        Code charCode = compiler.compile(cx, charExp);\n        assertEquals(Codes.constant('a'), charCode);\n\n        // Test INT_LITERAL\n        Core.Exp intExp = new Core.Literal(Op.INT_LITERAL, 42);\n        Code intCode = compiler.compile(cx, intExp);\n        assertEquals(Codes.constant(42), intCode);\n\n        // Test REAL_LITERAL\n        Core.Exp realExp = new Core.Literal(Op.REAL_LITERAL, 3.14f);\n        Code realCode = compiler.compile(cx, realExp);\n        assertEquals(Codes.constant(3.14f), realCode);\n\n        // Test STRING_LITERAL\n        Core.Exp stringExp = new Core.Literal(Op.STRING_LITERAL, \"test\");\n        Code stringCode = compiler.compile(cx, stringExp);\n        assertEquals(Codes.constant(\"test\"), stringCode);\n\n        // Test UNIT_LITERAL\n        Core.Exp unitExp = new Core.Literal(Op.UNIT_LITERAL, Unit.INSTANCE);\n        Code unitCode = compiler.compile(cx, unitExp);\n        assertEquals(Codes.constant(Unit.INSTANCE), unitCode);\n\n        // Test FN_LITERAL\n        Core.Exp fnExp = new Core.Literal(Op.FN_LITERAL, new BuiltIn(\"test\"));\n        Code fnCode = compiler.compile(cx, fnExp);\n        assertEquals(Codes.constant(Codes.BUILT_IN_VALUES.get(new BuiltIn(\"test\"))), fnCode);\n\n        // Test INTERNAL_LITERAL\n        Core.Exp internalExp = new Core.Literal(Op.INTERNAL_LITERAL, new Object());\n        Code internalCode = compiler.compile(cx, internalExp);\n        assertEquals(Codes.constant(new Object()), internalCode);\n\n        // Test VALUE_LITERAL\n        Core.Exp valueExp = new Core.Literal(Op.VALUE_LITERAL, new Object());\n        Code valueCode = compiler.compile(cx, valueExp);\n        assertEquals(Codes.constant(new Object()), valueCode);\n\n        // Test UNHANDLED_OP\n        Core.Exp unhandledExp = new Core.Exp(Op.UNHANDLED_OP) {};\n        assertThrows(AssertionError.class, () -> compiler.compile(cx, unhandledExp));\n    }\n}\n"}]