[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.ast;\n\nimport net.hydromatic.morel.compile.Environments;\nimport net.hydromatic.morel.type.Binding;\nimport net.hydromatic.morel.type.TypeSystem;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nimport static net.hydromatic.morel.ast.CoreBuilder.core;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class FromBuilder_whereTest {\n    private FromBuilder fromBuilder;\n    private TypeSystem typeSystem;\n\n    @BeforeEach\n    public void setUp() {\n        typeSystem = new TypeSystem();\n        fromBuilder = new FromBuilder(typeSystem, Environments.empty());\n    }\n\n    @Test\n    public void testWhereWithTrueCondition() {\n        Core.Exp condition = core.boolLiteral(true);\n        FromBuilder result = fromBuilder.where(condition);\n        assertEquals(fromBuilder, result);\n    }\n\n    @Test\n    public void testWhereWithFalseCondition() {\n        Core.Exp condition = core.boolLiteral(false);\n        FromBuilder result = fromBuilder.where(condition);\n        assertEquals(fromBuilder, result);\n    }\n\n    @Test\n    public void testWhereWithNonLiteralCondition() {\n        Core.Exp condition = core.id(new Core.IdPat(typeSystem.getType(\"int\"), \"x\", 0));\n        FromBuilder result = fromBuilder.where(condition);\n        assertEquals(fromBuilder, result);\n    }\n\n    @Test\n    public void testWhereWithComplexCondition() {\n        Core.Exp condition = core.greaterThan(typeSystem, core.id(new Core.IdPat(typeSystem.getType(\"int\"), \"x\", 0)), core.intLiteral(10));\n        FromBuilder result = fromBuilder.where(condition);\n        assertEquals(fromBuilder, result);\n    }\n\n    @Test\n    public void testWhereWithEmptySteps() {\n        Core.Exp condition = core.boolLiteral(false);\n        FromBuilder result = fromBuilder.where(condition);\n        assertEquals(fromBuilder, result);\n    }\n\n    @Test\n    public void testWhereWithNonEmptySteps() {\n        fromBuilder.scan(new Core.IdPat(typeSystem.getType(\"int\"), \"x\", 0), core.list(typeSystem, core.intLiteral(1), core.intLiteral(2)));\n        Core.Exp condition = core.boolLiteral(false);\n        FromBuilder result = fromBuilder.where(condition);\n        assertEquals(fromBuilder, result);\n    }\n\n    @Test\n    public void testWhereWithMultipleSteps() {\n        fromBuilder.scan(new Core.IdPat(typeSystem.getType(\"int\"), \"x\", 0), core.list(typeSystem, core.intLiteral(1), core.intLiteral(2)));\n        fromBuilder.scan(new Core.IdPat(typeSystem.getType(\"int\"), \"y\", 0), core.list(typeSystem, core.intLiteral(3), core.intLiteral(4)));\n        Core.Exp condition = core.boolLiteral(false);\n        FromBuilder result = fromBuilder.where(condition);\n        assertEquals(fromBuilder, result);\n    }\n\n    @Test\n    public void testWhereWithClearBefore() {\n        fromBuilder.scan(new Core.IdPat(typeSystem.getType(\"int\"), \"x\", 0), core.list(typeSystem, core.intLiteral(1), core.intLiteral(2)));\n        fromBuilder.clear();\n        Core.Exp condition = core.boolLiteral(false);\n        FromBuilder result = fromBuilder.where(condition);\n        assertEquals(fromBuilder, result);\n    }\n\n    @Test\n    public void testWhereWithAddAllBefore() {\n        Core.FromStep step1 = core.scan(List.of(Binding.of(new Core.IdPat(typeSystem.getType(\"int\"), \"x\", 0))), new Core.IdPat(typeSystem.getType(\"int\"), \"x\", 0), core.list(typeSystem, core.intLiteral(1), core.intLiteral(2)), core.boolLiteral(true));\n        Core.FromStep step2 = core.scan(List.of(Binding.of(new Core.IdPat(typeSystem.getType(\"int\"), \"y\", 0))), new Core.IdPat(typeSystem.getType(\"int\"), \"y\", 0), core.list(typeSystem, core.intLiteral(3), core.intLiteral(4)), core.boolLiteral(true));\n        fromBuilder.addAll(List.of(step1, step2));\n        Core.Exp condition = core.boolLiteral(false);\n        FromBuilder result = fromBuilder.where(condition);\n        assertEquals(fromBuilder, result);\n    }\n}\n"}]