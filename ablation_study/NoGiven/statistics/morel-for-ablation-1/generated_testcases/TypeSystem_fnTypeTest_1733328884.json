[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.type;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.Lists;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass TypeSystem_fnTypeTest {\n\n    @Test\n    void testFnType_SingleType() {\n        TypeSystem typeSystem = new TypeSystem();\n        Type paramType = new Type() {\n            @Override\n            public Key key() {\n                return new Key() {\n                    @Override\n                    public Type toType(TypeSystem typeSystem) {\n                        return this;\n                    }\n                };\n            }\n        };\n        Type type1 = paramType;\n        Type type2 = paramType;\n\n        Type result = typeSystem.fnType(paramType, type1, type2);\n        assertNotNull(result);\n    }\n\n    @Test\n    void testFnType_MultipleTypes() {\n        TypeSystem typeSystem = new TypeSystem();\n        Type paramType = new Type() {\n            @Override\n            public Key key() {\n                return new Key() {\n                    @Override\n                    public Type toType(TypeSystem typeSystem) {\n                        return this;\n                    }\n                };\n            }\n        };\n        Type type1 = paramType;\n        Type type2 = paramType;\n        Type type3 = paramType;\n\n        Type result = typeSystem.fnType(paramType, type1, type2, type3);\n        assertNotNull(result);\n    }\n\n    @Test\n    void testFnType_NullHandling() {\n        TypeSystem typeSystem = new TypeSystem();\n        Type paramType = new Type() {\n            @Override\n            public Key key() {\n                return new Key() {\n                    @Override\n                    public Type toType(TypeSystem typeSystem) {\n                        return this;\n                    }\n                };\n            }\n        };\n        Type type1 = null;\n        Type type2 = paramType;\n\n        Type result = typeSystem.fnType(paramType, type1, type2);\n        assertNotNull(result);\n    }\n}\n"}]