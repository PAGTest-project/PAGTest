[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.type;\n\nimport com.google.common.collect.ImmutableList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.function.UnaryOperator;\n\nclass TupleType_copyTest {\n\n    @Test\n    void testCopyNoDifference() {\n        // Given\n        TypeSystem typeSystem = new TypeSystem();\n        Type type1 = new MockType(\"Type1\");\n        Type type2 = new MockType(\"Type2\");\n        TupleType tupleType = new TupleType(ImmutableList.of(type1, type2));\n        UnaryOperator<Type> identityTransform = t -> t;\n\n        // When\n        TupleType result = tupleType.copy(typeSystem, identityTransform);\n\n        // Then\n        assertSame(tupleType, result);\n    }\n\n    @Test\n    void testCopyWithDifference() {\n        // Given\n        TypeSystem typeSystem = new TypeSystem();\n        Type type1 = new MockType(\"Type1\");\n        Type type2 = new MockType(\"Type2\");\n        TupleType tupleType = new TupleType(ImmutableList.of(type1, type2));\n        UnaryOperator<Type> transform = t -> new MockType(\"Transformed\" + t.toString());\n\n        // When\n        TupleType result = tupleType.copy(typeSystem, transform);\n\n        // Then\n        assertNotSame(tupleType, result);\n        assertEquals(2, result.argTypes.size());\n        assertNotEquals(type1, result.argTypes.get(0));\n        assertNotEquals(type2, result.argTypes.get(1));\n    }\n\n    private static class MockType implements Type {\n        private final String name;\n\n        MockType(String name) {\n            this.name = name;\n        }\n\n        @Override\n        public String toString() {\n            return name;\n        }\n\n        @Override\n        public Key key() {\n            return null;\n        }\n\n        @Override\n        public <R> R accept(TypeVisitor<R> typeVisitor) {\n            return null;\n        }\n    }\n}\n"}]