[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.compile;\n\nimport net.hydromatic.morel.ast.AstNode;\nimport net.hydromatic.morel.ast.Core;\nimport net.hydromatic.morel.type.TypeSystem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\nclass Analyzer_analyzeTest {\n\n    @Test\n    void testAnalyzeWithNonRecValDecl() {\n        // Given\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        Environment env = mock(Environment.class);\n        Core.NonRecValDecl node = mock(Core.NonRecValDecl.class);\n        Core.NamedPat pat = mock(Core.NamedPat.class);\n        when(node.pat).thenReturn(pat);\n\n        // When\n        Analysis result = Analyzer.analyze(typeSystem, env, node);\n\n        // Then\n        assertTrue(result.map.containsKey(pat));\n    }\n\n    @Test\n    void testAnalyzeWithNonNonRecValDecl() {\n        // Given\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        Environment env = mock(Environment.class);\n        AstNode node = mock(AstNode.class);\n\n        // When\n        Analysis result = Analyzer.analyze(typeSystem, env, node);\n\n        // Then\n        assertTrue(result.map.isEmpty());\n    }\n}\n"}]