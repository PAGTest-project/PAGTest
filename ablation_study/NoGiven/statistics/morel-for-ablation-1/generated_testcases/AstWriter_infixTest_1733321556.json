[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.ast;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass AstWriter_infixTest {\n\n    @Test\n    void testInfix_OpApplyWithAstId() {\n        // Given\n        AstWriter writer = new AstWriter();\n        Ast.Id a0 = mock(Ast.Id.class);\n        when(a0.op).thenReturn(Op.ID);\n        when(a0.name).thenReturn(\"opName\");\n        Op op2 = mock(Op.class);\n        when(op2.left).thenReturn(1);\n        when(Op.BY_OP_NAME.get(\"opName\")).thenReturn(op2);\n        Ast.Tuple a1 = mock(Ast.Tuple.class);\n        when(a1.args).thenReturn(List.of(mock(Ast.Exp.class), mock(Ast.Exp.class)));\n        Ast.InfixCall call = mock(Ast.InfixCall.class);\n        when(call.unparse(writer, 0, 0)).thenReturn(writer);\n        whenNew(Ast.InfixCall.class).withArguments(Pos.ZERO, op2, any(), any()).thenReturn(call);\n\n        // When\n        AstWriter result = writer.infix(0, a0, Op.APPLY, a1, 0);\n\n        // Then\n        assertEquals(writer, result);\n    }\n\n    @Test\n    void testInfix_OpApplyWithCoreId() {\n        // Given\n        AstWriter writer = new AstWriter();\n        Core.Id a0 = mock(Core.Id.class);\n        when(a0.op).thenReturn(Op.ID);\n        when(a0.idPat).thenReturn(mock(Core.IdPat.class));\n        when(a0.idPat.name).thenReturn(\"opName\");\n        Op op2 = mock(Op.class);\n        when(op2.left).thenReturn(1);\n        when(Op.BY_OP_NAME.get(\"opName\")).thenReturn(op2);\n        Core.Tuple a1 = mock(Core.Tuple.class);\n        when(a1.args).thenReturn(List.of(mock(Core.Exp.class), mock(Core.Exp.class)));\n\n        // When\n        AstWriter result = writer.infix(0, a0, Op.APPLY, a1, 0);\n\n        // Then\n        assertEquals(writer, result);\n    }\n\n    @Test\n    void testInfix_Parenthesize() {\n        // Given\n        AstWriter writer = new AstWriter();\n        AstNode a0 = mock(AstNode.class);\n        when(a0.op).thenReturn(Op.ID);\n        AstNode a1 = mock(AstNode.class);\n        Op op = mock(Op.class);\n        when(op.left).thenReturn(1);\n        when(op.right).thenReturn(1);\n\n        // When\n        AstWriter result = writer.infix(2, a0, op, a1, 0);\n\n        // Then\n        assertEquals(writer, result);\n    }\n}\n"}]