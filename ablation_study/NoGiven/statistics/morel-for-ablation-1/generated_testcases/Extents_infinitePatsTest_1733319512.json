[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.compile;\n\nimport net.hydromatic.morel.ast.Core;\nimport net.hydromatic.morel.ast.FromBuilder;\nimport net.hydromatic.morel.ast.Shuttle;\nimport net.hydromatic.morel.type.TypeSystem;\nimport net.hydromatic.morel.util.ImmutablePairList;\nimport net.hydromatic.morel.util.Ord;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class Extents_infinitePatsTest {\n\n    @Test\n    public void testInfinitePatsWithInfiniteScan() {\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        Core.Decl node = mock(Core.Decl.class);\n        Core.From from = mock(Core.From.class);\n        Core.Scan scan = mock(Core.Scan.class);\n        Core.Exp exp = mock(Core.Exp.class);\n        Core.FromStep step = mock(Core.FromStep.class);\n        Ord<Core.FromStep> ordStep = new Ord<>(0, step);\n        FromBuilder fromBuilder = mock(FromBuilder.class);\n        Core.From builtFrom = mock(Core.From.class);\n\n        when(node.accept(any(Shuttle.class))).thenReturn(from);\n        when(from.steps).thenReturn(ImmutablePairList.of(ordStep));\n        when(step.e).thenReturn(scan);\n        when(scan.exp).thenReturn(exp);\n        when(Extents.isInfinite(exp)).thenReturn(true);\n        when(core.fromBuilder(typeSystem)).thenReturn(fromBuilder);\n        when(fromBuilder.build()).thenReturn(builtFrom);\n\n        Core.Decl result = Extents.infinitePats(typeSystem, node);\n\n        assertEquals(builtFrom, result);\n        verify(fromBuilder).scan(any(Core.Pat.class), any(Core.Exp.class), any(Core.Exp.class));\n        verify(fromBuilder).build();\n    }\n\n    @Test\n    public void testInfinitePatsWithNonInfiniteScan() {\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        Core.Decl node = mock(Core.Decl.class);\n        Core.From from = mock(Core.From.class);\n        Core.Scan scan = mock(Core.Scan.class);\n        Core.Exp exp = mock(Core.Exp.class);\n        Core.FromStep step = mock(Core.FromStep.class);\n        Ord<Core.FromStep> ordStep = new Ord<>(0, step);\n\n        when(node.accept(any(Shuttle.class))).thenReturn(from);\n        when(from.steps).thenReturn(ImmutablePairList.of(ordStep));\n        when(step.e).thenReturn(scan);\n        when(scan.exp).thenReturn(exp);\n        when(Extents.isInfinite(exp)).thenReturn(false);\n\n        Core.Decl result = Extents.infinitePats(typeSystem, node);\n\n        assertEquals(from, result);\n        verifyNoInteractions(core.fromBuilder(typeSystem));\n    }\n}\n"}]