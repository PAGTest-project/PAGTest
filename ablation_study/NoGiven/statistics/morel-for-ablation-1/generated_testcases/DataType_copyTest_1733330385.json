[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.type;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableSortedMap;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport java.util.SortedMap;\nimport java.util.function.UnaryOperator;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotEquals;\nimport static org.mockito.Mockito.*;\n\nclass DataType_copyTest {\n\n    @Test\n    void testCopyReturnsSameInstanceWhenArgumentsUnchanged() {\n        // Given\n        List<Type> arguments = ImmutableList.of(mock(Type.class));\n        SortedMap<String, Key> typeConstructors = ImmutableSortedMap.of();\n        DataType dataType = new DataType(\"name\", \"moniker\", arguments, typeConstructors);\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        UnaryOperator<Type> transform = UnaryOperator.identity();\n\n        // When\n        DataType result = dataType.copy(typeSystem, transform);\n\n        // Then\n        assertEquals(dataType, result);\n    }\n\n    @Test\n    void testCopyReturnsNewInstanceWhenArgumentsChanged() {\n        // Given\n        Type originalType = mock(Type.class);\n        Type transformedType = mock(Type.class);\n        List<Type> arguments = ImmutableList.of(originalType);\n        SortedMap<String, Key> typeConstructors = ImmutableSortedMap.of();\n        DataType dataType = new DataType(\"name\", \"moniker\", arguments, typeConstructors);\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        UnaryOperator<Type> transform = mock(UnaryOperator.class);\n        when(transform.apply(originalType)).thenReturn(transformedType);\n\n        // When\n        DataType result = dataType.copy(typeSystem, transform);\n\n        // Then\n        assertNotEquals(dataType, result);\n        assertEquals(ImmutableList.of(transformedType), result.arguments);\n    }\n}\n"}]