[{"strategy": "retry", "code": "\npackage net.hydromatic.morel;\n\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Collections;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class Shell_createTest {\n\n    private InputStream inputStream;\n    private OutputStream outputStream;\n\n    @BeforeEach\n    public void setUp() {\n        inputStream = new ByteArrayInputStream(\"\".getBytes());\n        outputStream = new ByteArrayOutputStream();\n    }\n\n    @Test\n    public void testCreateShellWithDefaultConfig() throws IOException {\n        List<String> args = Collections.emptyList();\n        Shell shell = createShell(args, inputStream, outputStream);\n        assertNotNull(shell);\n    }\n\n    @Test\n    public void testCreateShellWithCustomConfig() throws IOException {\n        List<String> args = Collections.singletonList(\"--banner=false\");\n        Shell shell = createShell(args, inputStream, outputStream);\n        assertNotNull(shell);\n    }\n\n    private Shell createShell(List<String> args, InputStream in, OutputStream out) throws IOException {\n        final Config config = Shell.parse(ConfigImpl.DEFAULT, args);\n        final TerminalBuilder builder = TerminalBuilder.builder();\n        builder.streams(in, out);\n        final ConfigImpl configImpl = (ConfigImpl) config;\n        builder.system(configImpl.system);\n        builder.dumb(configImpl.dumb);\n        if (configImpl.dumb) {\n            builder.type(\"dumb\");\n        }\n        final Terminal terminal = builder.build();\n        return new Shell(config, terminal);\n    }\n}\n"}]