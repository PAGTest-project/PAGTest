[{"strategy": "retry", "code": "\npackage net.hydromatic.morel;\n\nimport net.hydromatic.morel.compile.Environment;\nimport net.hydromatic.morel.compile.Environments;\nimport net.hydromatic.morel.eval.Session;\nimport net.hydromatic.morel.type.TypeSystem;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.io.BufferedReader;\nimport java.io.PrintWriter;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.function.Consumer;\n\nimport static org.mockito.Mockito.*;\n\npublic class Main_runTest {\n\n    private Main main;\n    private BufferedReader mockIn;\n    private PrintWriter mockOut;\n    private Session mockSession;\n    private Map<String, ForeignValue> valueMap;\n\n    @BeforeEach\n    public void setUp() {\n        mockIn = mock(BufferedReader.class);\n        mockOut = mock(PrintWriter.class);\n        mockSession = mock(Session.class);\n        valueMap = new LinkedHashMap<>();\n        main = new Main(null, mockIn, mockOut, valueMap, new LinkedHashMap<>(), false);\n    }\n\n    @Test\n    public void testRun() {\n        // Given\n        Environment mockEnv = mock(Environment.class);\n        Shell mockShell = mock(Shell.class);\n        Consumer<String> mockEchoLines = mock(Consumer.class);\n        Consumer<String> mockOutLines = mock(Consumer.class);\n\n        when(Environments.env(any(TypeSystem.class), eq(mockSession), eq(valueMap))).thenReturn(mockEnv);\n        when(mockSession.withShell(any(Shell.class), any(Consumer.class), any())).thenAnswer(invocation -> {\n            Consumer<Session> consumer = invocation.getArgument(2);\n            consumer.accept(mockSession);\n            return null;\n        });\n\n        // When\n        main.run();\n\n        // Then\n        verify(mockOut).flush();\n        verify(mockSession).withShell(any(Shell.class), any(Consumer.class), any());\n    }\n}\n"}]