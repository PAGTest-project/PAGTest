[{"strategy": "generate", "code": "\npackage net.hydromatic.morel;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport net.hydromatic.morel.foreign.ForeignValue;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class Shell_parseTest {\n\n    @Test\n    public void testParse() {\n        ConfigImpl initialConfig = new ConfigImpl(true, false, true, false, false, ImmutableMap.of(), new File(\"\"), () -> {}, -1);\n        List<String> argList = ImmutableList.of(\n            \"--banner=false\",\n            \"--terminal=dumb\",\n            \"--echo\",\n            \"--help\",\n            \"--system=false\",\n            \"--foreign=net.hydromatic.morel.foreign.Calcite\",\n            \"--directory=/tmp\",\n            \"--maxUseDepth=10\"\n        );\n\n        Config result = Shell.parse(initialConfig, argList);\n\n        assertTrue(result instanceof ConfigImpl);\n        ConfigImpl resultImpl = (ConfigImpl) result;\n\n        assertEquals(false, resultImpl.banner);\n        assertEquals(true, resultImpl.dumb);\n        assertEquals(true, resultImpl.echo);\n        assertEquals(true, resultImpl.help);\n        assertEquals(false, resultImpl.system);\n        assertEquals(new File(\"/tmp\"), resultImpl.directory);\n        assertEquals(10, resultImpl.maxUseDepth);\n\n        Map<String, ForeignValue> valueMap = resultImpl.valueMap;\n        assertTrue(valueMap.containsKey(\"net.hydromatic.morel.foreign.Calcite\"));\n    }\n}\n"}]