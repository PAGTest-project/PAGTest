[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.type;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.function.UnaryOperator;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertNotSame;\nimport static org.mockito.Mockito.*;\n\nclass FnType_copyTest {\n\n    @Test\n    void testCopyReturnsSameInstanceWhenTypesAreUnchanged() {\n        // Given\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        Type paramType = mock(Type.class);\n        Type resultType = mock(Type.class);\n        FnType fnType = new FnType(paramType, resultType);\n        UnaryOperator<Type> transform = mock(UnaryOperator.class);\n\n        when(paramType.copy(typeSystem, transform)).thenReturn(paramType);\n        when(resultType.copy(typeSystem, transform)).thenReturn(resultType);\n\n        // When\n        FnType result = fnType.copy(typeSystem, transform);\n\n        // Then\n        assertSame(fnType, result);\n    }\n\n    @Test\n    void testCopyReturnsNewInstanceWhenTypesAreChanged() {\n        // Given\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        Type paramType = mock(Type.class);\n        Type resultType = mock(Type.class);\n        FnType fnType = new FnType(paramType, resultType);\n        UnaryOperator<Type> transform = mock(UnaryOperator.class);\n\n        Type newParamType = mock(Type.class);\n        Type newResultType = mock(Type.class);\n\n        when(paramType.copy(typeSystem, transform)).thenReturn(newParamType);\n        when(resultType.copy(typeSystem, transform)).thenReturn(newResultType);\n        when(typeSystem.fnType(newParamType, newResultType)).thenReturn(new FnType(newParamType, newResultType));\n\n        // When\n        FnType result = fnType.copy(typeSystem, transform);\n\n        // Then\n        assertNotSame(fnType, result);\n        assertSame(newParamType, result.paramType);\n        assertSame(newResultType, result.resultType);\n    }\n}\n"}]