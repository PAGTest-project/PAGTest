[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.compile;\n\nimport net.hydromatic.morel.ast.Core;\nimport net.hydromatic.morel.eval.Code;\nimport net.hydromatic.morel.foreign.Calcite;\nimport org.apache.calcite.tools.RelBuilder;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class CalciteCompiler_compileArgTest {\n\n    @Test\n    public void testCompileArg_RelCodeAndNonRelContext() {\n        // Given\n        Calcite calcite = mock(Calcite.class);\n        CalciteCompiler compiler = new CalciteCompiler(null, calcite);\n        Context cx = mock(Context.class);\n        Core.Exp expression = mock(Core.Exp.class);\n        Code code = mock(Code.class);\n        RelBuilder relBuilder = mock(RelBuilder.class);\n        RelContext rx = mock(RelContext.class);\n\n        when(compiler.superCompileArg(cx, expression)).thenReturn(code);\n        when(code instanceof RelCode).thenReturn(true);\n        when(cx instanceof RelContext).thenReturn(false);\n        when(calcite.relBuilder()).thenReturn(relBuilder);\n        when(rx.env).thenReturn(null);\n        when(rx.relBuilder).thenReturn(relBuilder);\n        when(calcite.code(rx.env, rx.relBuilder.build(), expression.type)).thenReturn(code);\n        when(compiler.toRel3(rx, expression, false)).thenReturn(true);\n\n        // When\n        Code result = compiler.compileArg(cx, expression);\n\n        // Then\n        assertTrue(result instanceof Code);\n    }\n\n    @Test\n    public void testCompileArg_NonRelCodeOrRelContext() {\n        // Given\n        Calcite calcite = mock(Calcite.class);\n        CalciteCompiler compiler = new CalciteCompiler(null, calcite);\n        Context cx = mock(Context.class);\n        Core.Exp expression = mock(Core.Exp.class);\n        Code code = mock(Code.class);\n\n        when(compiler.superCompileArg(cx, expression)).thenReturn(code);\n        when(code instanceof RelCode).thenReturn(false);\n        when(cx instanceof RelContext).thenReturn(false);\n\n        // When\n        Code result = compiler.compileArg(cx, expression);\n\n        // Then\n        assertTrue(result instanceof Code);\n    }\n}\n"}]