[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.type;\n\nimport net.hydromatic.morel.util.PairList;\nimport org.junit.jupiter.api.Test;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.function.UnaryOperator;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nclass RecordType_copyTest {\n\n    @Test\n    void testCopyNoDifference() {\n        // Given\n        SortedMap<String, Type> argNameTypes = new TreeMap<>();\n        argNameTypes.put(\"key1\", mock(Type.class));\n        RecordType recordType = new RecordType(argNameTypes);\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        UnaryOperator<Type> transform = mock(UnaryOperator.class);\n\n        // When\n        when(transform.apply(any(Type.class))).thenAnswer(i -> i.getArgument(0));\n        RecordType result = recordType.copy(typeSystem, transform);\n\n        // Then\n        assertEquals(recordType, result);\n        verify(typeSystem, never()).recordType(any());\n    }\n\n    @Test\n    void testCopyWithDifference() {\n        // Given\n        SortedMap<String, Type> argNameTypes = new TreeMap<>();\n        Type originalType = mock(Type.class);\n        Type transformedType = mock(Type.class);\n        argNameTypes.put(\"key1\", originalType);\n        RecordType recordType = new RecordType(argNameTypes);\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        UnaryOperator<Type> transform = mock(UnaryOperator.class);\n\n        // When\n        when(transform.apply(originalType)).thenReturn(transformedType);\n        when(typeSystem.recordType(any(PairList.class))).thenReturn(new RecordType(argNameTypes));\n        RecordType result = recordType.copy(typeSystem, transform);\n\n        // Then\n        assertEquals(argNameTypes, result.argNameTypes());\n        verify(typeSystem, times(1)).recordType(any());\n    }\n}\n"}]