[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.ast;\n\nimport com.google.common.collect.Lists;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass AstWriter_appendAllTest {\n\n    @Test\n    void testAppendAll_SingleNode() {\n        AstWriter writer = new AstWriter();\n        AstNode node = new AstNode();\n        writer.appendAll(Lists.newArrayList(node), 1, Op.PLUS, 1);\n        assertEquals(\"node\", writer.toString());\n    }\n\n    @Test\n    void testAppendAll_MultipleNodes() {\n        AstWriter writer = new AstWriter();\n        AstNode node1 = new AstNode();\n        AstNode node2 = new AstNode();\n        writer.appendAll(Lists.newArrayList(node1, node2), 1, Op.PLUS, 1);\n        assertEquals(\"node + node\", writer.toString());\n    }\n\n    @Test\n    void testAppendAll_EmptyList() {\n        AstWriter writer = new AstWriter();\n        writer.appendAll(Lists.newArrayList(), 1, Op.PLUS, 1);\n        assertEquals(\"\", writer.toString());\n    }\n\n    private static class AstNode {\n        Op op = Op.PLUS;\n        void unparse(AstWriter writer, int left, int right) {\n            writer.append(\"node\");\n        }\n    }\n\n    private static class Op {\n        static final Op PLUS = new Op();\n        int left = 1;\n        int right = 1;\n        String padded = \" + \";\n    }\n}\n"}]