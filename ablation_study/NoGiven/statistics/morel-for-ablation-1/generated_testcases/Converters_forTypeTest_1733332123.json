[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.foreign;\n\nimport net.hydromatic.morel.eval.Unit;\nimport net.hydromatic.morel.type.PrimitiveType;\nimport net.hydromatic.morel.type.RecordLikeType;\nimport net.hydromatic.morel.type.Type;\nimport org.apache.calcite.rel.type.RelDataType;\nimport org.apache.calcite.rel.type.RelDataTypeField;\nimport org.apache.calcite.rel.type.RelDataTypeFactory;\nimport org.apache.calcite.rel.type.RelDataTypeImpl;\nimport org.apache.calcite.rel.type.RelDataTypeSystem;\nimport org.apache.calcite.sql.type.SqlTypeFactoryImpl;\nimport org.apache.calcite.sql.type.SqlTypeName;\nimport org.junit.jupiter.api.Test;\n\nimport java.math.BigDecimal;\nimport java.util.function.Function;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class Converters_forTypeTest {\n\n    @Test\n    public void testForType_PrimitiveType() {\n        RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n        RelDataType fromType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n        Type type = PrimitiveType.INT;\n\n        Function<Object, Object> converter = Converters.forType(fromType, type);\n        assertNotNull(converter);\n\n        Object result = converter.apply(123);\n        assertEquals(123, result);\n    }\n\n    @Test\n    public void testForType_RecordLikeType() {\n        RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n        RelDataType fromType = typeFactory.createSqlType(SqlTypeName.ROW);\n        Type type = new RecordLikeType() {\n            @Override\n            public SortedMap<String, Type> argNameTypes() {\n                return new TreeMap<>();\n            }\n\n            @Override\n            public List<Type> argTypes() {\n                return Collections.emptyList();\n            }\n\n            @Override\n            public Type argType(int index) {\n                return null;\n            }\n\n            @Override\n            public TypedValue asTypedValue() {\n                return null;\n            }\n        };\n\n        Function<Object, Object> converter = Converters.forType(fromType, type);\n        assertNotNull(converter);\n\n        Object result = converter.apply(new Object[]{});\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testForType_NullableType() {\n        RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n        RelDataType fromType = typeFactory.createTypeWithNullability(\n                typeFactory.createSqlType(SqlTypeName.INTEGER), true);\n        Type type = PrimitiveType.INT;\n\n        Function<Object, Object> converter = Converters.forType(fromType, type);\n        assertNotNull(converter);\n\n        Object result = converter.apply(null);\n        assertEquals(BigDecimal.ZERO, result);\n    }\n\n    @Test\n    public void testForType_UnitType() {\n        RelDataTypeFactory typeFactory = new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n        RelDataType fromType = typeFactory.createSqlType(SqlTypeName.INTEGER);\n        Type type = PrimitiveType.UNIT;\n\n        Function<Object, Object> converter = Converters.forType(fromType, type);\n        assertNotNull(converter);\n\n        Object result = converter.apply(123);\n        assertEquals(Unit.INSTANCE, result);\n    }\n}\n"}]