[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.compile;\n\nimport net.hydromatic.morel.ast.Ast;\nimport net.hydromatic.morel.type.TypeSystem;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class TypeResolver_deduceTypeTest {\n\n    @Test\n    public void testDeduceType_SingleAttempt() {\n        // Given\n        Environment env = mock(Environment.class);\n        Ast.Decl decl = mock(Ast.Decl.class);\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        TypeResolver typeResolver = new TypeResolver(typeSystem);\n        TypeResolver.Resolved expectedResolved = mock(TypeResolver.Resolved.class);\n\n        when(typeSystem.expandCount.get()).thenReturn(0);\n        when(typeResolver.deduceType_(env, decl)).thenReturn(expectedResolved);\n\n        // When\n        TypeResolver.Resolved actualResolved = TypeResolver.deduceType(env, decl, typeSystem);\n\n        // Then\n        assertEquals(expectedResolved, actualResolved);\n    }\n\n    @Test\n    public void testDeduceType_MultipleAttempts() {\n        // Given\n        Environment env = mock(Environment.class);\n        Ast.Decl decl = mock(Ast.Decl.class);\n        TypeSystem typeSystem = mock(TypeSystem.class);\n        TypeResolver typeResolver = new TypeResolver(typeSystem);\n        TypeResolver.Resolved expectedResolved = mock(TypeResolver.Resolved.class);\n\n        when(typeSystem.expandCount.get()).thenReturn(1, 2);\n        when(typeResolver.deduceType_(env, decl)).thenReturn(expectedResolved);\n\n        // When\n        TypeResolver.Resolved actualResolved = TypeResolver.deduceType(env, decl, typeSystem);\n\n        // Then\n        assertEquals(expectedResolved, actualResolved);\n    }\n}\n"}]