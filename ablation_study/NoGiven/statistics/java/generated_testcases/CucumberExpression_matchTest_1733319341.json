[{"strategy": "retry", "code": "\npackage io.cucumber.cucumberexpressions;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.mockito.Mockito.*;\n\npublic class CucumberExpression_matchTest {\n\n    private CucumberExpression cucumberExpression;\n    private ParameterTypeRegistry parameterTypeRegistry;\n    private TreeRegexp treeRegexp;\n\n    @BeforeEach\n    public void setUp() {\n        parameterTypeRegistry = mock(ParameterTypeRegistry.class);\n        treeRegexp = mock(TreeRegexp.class);\n        cucumberExpression = new CucumberExpression(\"expression\", parameterTypeRegistry) {\n            @Override\n            TreeRegexp treeRegexp() {\n                return treeRegexp;\n            }\n        };\n    }\n\n    @Test\n    public void testMatch_NoMatch() {\n        when(treeRegexp.match(anyString())).thenReturn(null);\n\n        List<Argument<?>> result = cucumberExpression.match(\"text\");\n\n        assertNull(result);\n    }\n\n    @Test\n    public void testMatch_WithMatch() {\n        Group group = mock(Group.class);\n        ParameterType<?> parameterType = mock(ParameterType.class);\n        ParameterByTypeTransformer transformer = mock(ParameterByTypeTransformer.class);\n\n        when(treeRegexp.match(anyString())).thenReturn(group);\n        when(parameterTypeRegistry.getDefaultParameterTransformer()).thenReturn(transformer);\n        when(parameterType.isAnonymous()).thenReturn(true);\n        when(parameterType.deAnonymize(any(), any())).thenReturn(parameterType);\n\n        cucumberExpression.parameterTypes.add(parameterType);\n\n        List<Argument<?>> result = cucumberExpression.match(\"text\");\n\n        assertNotNull(result);\n    }\n}\n"}]