[{"strategy": "generate", "code": "\npackage io.cucumber.cucumberexpressions;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.regex.Pattern;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.mockito.Mockito.*;\n\npublic class RegularExpression_matchTest {\n\n    private RegularExpression regularExpression;\n    private ParameterTypeRegistry parameterTypeRegistry;\n    private TreeRegexp treeRegexp;\n\n    @BeforeEach\n    public void setUp() {\n        parameterTypeRegistry = mock(ParameterTypeRegistry.class);\n        treeRegexp = mock(TreeRegexp.class);\n        regularExpression = new RegularExpression(Pattern.compile(\"somePattern\"), parameterTypeRegistry);\n    }\n\n    @Test\n    public void testMatch_NoMatch() {\n        when(treeRegexp.match(anyString())).thenReturn(null);\n        List<Argument<?>> result = regularExpression.match(\"someText\");\n        assertNull(result);\n    }\n\n    @Test\n    public void testMatch_WithMatch() {\n        Group group = mock(Group.class);\n        GroupBuilder groupBuilder = mock(GroupBuilder.class);\n        ParameterType<?> parameterType = mock(ParameterType.class);\n        ParameterByTypeTransformer defaultTransformer = mock(ParameterByTypeTransformer.class);\n\n        when(treeRegexp.match(anyString())).thenReturn(group);\n        when(treeRegexp.getGroupBuilder()).thenReturn(groupBuilder);\n        when(groupBuilder.getChildren()).thenReturn(List.of(groupBuilder));\n        when(groupBuilder.getSource()).thenReturn(\"someRegexp\");\n        when(parameterTypeRegistry.lookupByRegexp(anyString(), any(Pattern.class), anyString())).thenReturn(parameterType);\n        when(parameterTypeRegistry.getDefaultParameterTransformer()).thenReturn(defaultTransformer);\n        when(parameterType.isAnonymous()).thenReturn(false);\n\n        List<Argument<?>> result = regularExpression.match(\"someText\");\n        assertNotNull(result);\n    }\n}\n"}]