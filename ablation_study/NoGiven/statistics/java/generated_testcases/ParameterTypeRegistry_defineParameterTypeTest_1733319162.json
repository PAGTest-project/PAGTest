[{"strategy": "retry", "code": "\npackage io.cucumber.cucumberexpressions;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.function.Executable;\n\nimport java.util.Collections;\nimport java.util.Locale;\nimport java.util.regex.Pattern;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ParameterTypeRegistry_defineParameterTypeTest {\n    private ParameterTypeRegistry registry;\n\n    @BeforeEach\n    public void setUp() {\n        registry = new ParameterTypeRegistry(Locale.ENGLISH);\n    }\n\n    @Test\n    public void testDefineParameterType_DuplicateName_ThrowsException() {\n        ParameterType<String> parameterType1 = new ParameterType<>(\"name\", Collections.singletonList(\"\\\\w+\"), String.class, (Transformer<String>) s -> s, false, false, false);\n        ParameterType<String> parameterType2 = new ParameterType<>(\"name\", Collections.singletonList(\"\\\\w+\"), String.class, (Transformer<String>) s -> s, false, false, false);\n\n        registry.defineParameterType(parameterType1);\n\n        final Executable testMethod = () -> registry.defineParameterType(parameterType2);\n\n        assertThrows(DuplicateTypeNameException.class, testMethod);\n    }\n\n    @Test\n    public void testDefineParameterType_AnonymousDuplicateName_ThrowsException() {\n        ParameterType<String> parameterType1 = new ParameterType<>(\"\", Collections.singletonList(\"\\\\w+\"), String.class, (Transformer<String>) s -> s, false, false, false);\n        ParameterType<String> parameterType2 = new ParameterType<>(\"\", Collections.singletonList(\"\\\\w+\"), String.class, (Transformer<String>) s -> s, false, false, false);\n\n        registry.defineParameterType(parameterType1);\n\n        final Executable testMethod = () -> registry.defineParameterType(parameterType2);\n\n        assertThrows(DuplicateTypeNameException.class, testMethod);\n    }\n\n    @Test\n    public void testDefineParameterType_PreferentialConflict_ThrowsException() {\n        ParameterType<String> parameterType1 = new ParameterType<>(\"name1\", Collections.singletonList(\"\\\\w+\"), String.class, (Transformer<String>) s -> s, false, true, false);\n        ParameterType<String> parameterType2 = new ParameterType<>(\"name2\", Collections.singletonList(\"\\\\w+\"), String.class, (Transformer<String>) s -> s, false, true, false);\n\n        registry.defineParameterType(parameterType1);\n\n        final Executable testMethod = () -> registry.defineParameterType(parameterType2);\n\n        assertThrows(CucumberExpressionException.class, testMethod);\n    }\n\n    @Test\n    public void testDefineParameterType_Success() {\n        ParameterType<String> parameterType = new ParameterType<>(\"name\", Collections.singletonList(\"\\\\w+\"), String.class, (Transformer<String>) s -> s, false, false, false);\n\n        assertDoesNotThrow(() -> registry.defineParameterType(parameterType));\n        assertEquals(parameterType, registry.lookupByTypeName(\"name\"));\n    }\n}\n"}]