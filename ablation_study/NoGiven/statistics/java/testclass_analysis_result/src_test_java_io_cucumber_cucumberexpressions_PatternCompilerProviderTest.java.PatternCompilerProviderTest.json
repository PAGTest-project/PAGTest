{"file_path": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java", "testclass_name": "PatternCompilerProviderTest", "dependencies": ["package io.cucumber.cucumberexpressions;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.api.function.Executable;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.regex.Pattern;", "import static org.hamcrest.CoreMatchers.is;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.IsEqual.equalTo;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "PatternCompilerProviderTest", "description": "Tests for the PatternCompilerProvider class, ensuring it correctly selects and uses a PatternCompiler.", "class_members": {"methods": [{"name": "getTestCompiler", "signature": "PatternCompiler getTestCompiler()"}]}, "fixtures": ["setUp", "tearDown"], "test_cases": [{"name": "use_default_compiler_if_none_registered", "primary_tested": ["PatternCompilerProvider.findPatternCompiler(Iterator<PatternCompiler>)"], "external_dependencies": {"modules": ["PatternCompilerProvider", "DefaultPatternCompiler"], "class_members": [{"name": "PatternCompilerProvider.service", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the default compiler is used if no compiler is registered."}, {"name": "use_found_pattern_compiler_if_one_provided", "primary_tested": ["PatternCompilerProvider.findPatternCompiler(Iterator<PatternCompiler>)"], "associated_methods": ["PatternCompilerProviderTest.getTestCompiler()"], "external_dependencies": {"modules": ["PatternCompilerProvider", "PatternCompiler"], "class_members": [{"name": "PatternCompilerProvider.service", "type": "variable"}, {"name": "getTestCompiler", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the found compiler is used if one is provided."}, {"name": "throws_error_if_more_than_one_pattern_compiler", "primary_tested": ["PatternCompilerProvider.findPatternCompiler(Iterator<PatternCompiler>)"], "associated_methods": ["PatternCompilerProviderTest.getTestCompiler()"], "external_dependencies": {"modules": ["PatternCompilerProvider", "DefaultPatternCompiler", "IllegalStateException"], "class_members": [{"name": "getTestCompiler", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an error is thrown if more than one pattern compiler is provided."}]}