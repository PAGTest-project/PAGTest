[{"uris": "src/main/java/org/apache/commons/dbutils/ColumnHandler.java.ColumnHandler", "name": "ColumnHandler", "file_path": "src/main/java/org/apache/commons/dbutils/ColumnHandler.java", "superclasses": [], "methods": ["[T]apply(ResultSet,int)", "[boolean]match(Class<?>)"], "method_uris": ["src/main/java/org/apache/commons/dbutils/ColumnHandler.java.ColumnHandler.[T]apply(ResultSet,int)", "src/main/java/org/apache/commons/dbutils/ColumnHandler.java.ColumnHandler.[boolean]match(Class<?>)"], "overrides": null, "attributes": null, "class_docstring": "\nDefines how to process columns when constructing a bean from a {@link ResultSet}. Instances do the work of retrieving data from a {@code ResultSet}.\n\n@param <T> The return type.\n", "original_string": "public interface ColumnHandler<T> {\n\n    /**\n     * Retrieves the current row's column value from a {@link ResultSet} and stores it into an instance of {@code propType}. This method is only called if\n     * {@link #match(Class)} returns true.\n     *\n     * @param resultSet   The source result set. This must be on the correct row.\n     * @param columnIndex The position of the column to retrieve, a 1-based index.\n     * @return The converted value or the original value if something doesn't work out.\n     * @throws SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set\n     */\n    T apply(ResultSet resultSet, int columnIndex) throws SQLException;\n\n    /**\n     * Tests whether to handle a column targeted for a value type matching {@code propType}.\n     *\n     * @param propType The type of the target parameter.\n     * @return true is this property handler handles this {@code propType}; false otherwise.\n     */\n    boolean match(Class<?> propType);\n}"}, {"uris": "src/main/java/org/apache/commons/dbutils/PropertyHandler.java.PropertyHandler", "name": "PropertyHandler", "file_path": "src/main/java/org/apache/commons/dbutils/PropertyHandler.java", "superclasses": [], "methods": ["[Object]apply(Class<?>,Object)", "[boolean]match(Class<?>,Object)"], "method_uris": ["src/main/java/org/apache/commons/dbutils/PropertyHandler.java.PropertyHandler.[Object]apply(Class<?>,Object)", "src/main/java/org/apache/commons/dbutils/PropertyHandler.java.PropertyHandler.[boolean]match(Class<?>,Object)"], "overrides": null, "attributes": null, "class_docstring": "\nDefines how to handle properties when constructing a bean from a {@link java.sql.ResultSet}. Instances coerce values into a target types.\n", "original_string": "public interface PropertyHandler {\n\n    /**\n     * Stores the given {@code value} into an instance of type {@code parameter}. This method is only called if {@link #match(Class, Object)} return true.\n     *\n     * @param parameter The type of the target parameter.\n     * @param value     The value to set.\n     * @return The converted value or the original value if something doesn't work out.\n     */\n    Object apply(Class<?> parameter, Object value);\n\n    /**\n     * Tests whether to handle setting {@code value} into an instance of {@code parameter}.\n     *\n     * @param parameter The type of the target parameter.\n     * @param value     The value to be set.\n     * @return true is this property handler can/wants to handle this value; false otherwise.\n     */\n    boolean match(Class<?> parameter, Object value);\n}"}, {"uris": "src/main/java/org/apache/commons/dbutils/RowProcessor.java.RowProcessor", "name": "RowProcessor", "file_path": "src/main/java/org/apache/commons/dbutils/RowProcessor.java", "superclasses": [], "methods": ["[Object[]]toArray(ResultSet)", "[T]toBean(ResultSet,Class<? extends T>)", "[List<T>]toBeanList(ResultSet,Class<? extends T>)", "[Map<String, Object>]toMap(ResultSet)"], "method_uris": ["src/main/java/org/apache/commons/dbutils/RowProcessor.java.RowProcessor.[Object[]]toArray(ResultSet)", "src/main/java/org/apache/commons/dbutils/RowProcessor.java.RowProcessor.[T]toBean(ResultSet,Class<? extends T>)", "src/main/java/org/apache/commons/dbutils/RowProcessor.java.RowProcessor.[List<T>]toBeanList(ResultSet,Class<? extends T>)", "src/main/java/org/apache/commons/dbutils/RowProcessor.java.RowProcessor.[Map<String, Object>]toMap(ResultSet)"], "overrides": null, "attributes": null, "class_docstring": "\n{@code RowProcessor} implementations convert\n{@code ResultSet} rows into various other objects.  Implementations\ncan extend {@code BasicRowProcessor} to protect themselves\nfrom changes to this interface.\n\n@see BasicRowProcessor\n", "original_string": "public interface RowProcessor {\n\n    /**\n     * Create an {@code Object[]} from the column values in one\n     * {@code ResultSet} row.  The {@code ResultSet} should be\n     * positioned on a valid row before passing it to this method.\n     * Implementations of this method must not alter the row position of\n     * the {@code ResultSet}.\n     *\n     * @param resultSet ResultSet that supplies the array data\n     * @throws SQLException if a database access error occurs\n     * @return the newly created array\n     */\n    Object[] toArray(ResultSet resultSet) throws SQLException;\n\n    /**\n     * Create a JavaBean from the column values in one {@code ResultSet}\n     * row.  The {@code ResultSet} should be positioned on a valid row before\n     * passing it to this method.  Implementations of this method must not\n     * alter the row position of the {@code ResultSet}.\n     * @param <T> The type of bean to create\n     * @param resultSet ResultSet that supplies the bean data\n     * @param type Class from which to create the bean instance\n     * @throws SQLException if a database access error occurs\n     * @return the newly created bean\n     */\n    <T> T toBean(ResultSet resultSet, Class<? extends T> type) throws SQLException;\n\n    /**\n     * Create a {@code List} of JavaBeans from the column values in all\n     * {@code ResultSet} rows.  {@code ResultSet.next()} should\n     * <strong>not</strong> be called before passing it to this method.\n     * @param <T> The type of bean to create\n     * @param resultSet ResultSet that supplies the bean data\n     * @param type Class from which to create the bean instance\n     * @throws SQLException if a database access error occurs\n     * @return A {@code List} of beans with the given type in the order\n     * they were returned by the {@code ResultSet}.\n     */\n    <T> List<T> toBeanList(ResultSet resultSet, Class<? extends T> type) throws SQLException;\n\n    /**\n     * Create a {@code Map} from the column values in one\n     * {@code ResultSet} row.  The {@code ResultSet} should be\n     * positioned on a valid row before\n     * passing it to this method.  Implementations of this method must not\n     * alter the row position of the {@code ResultSet}.\n     *\n     * @param resultSet ResultSet that supplies the map data\n     * @throws SQLException if a database access error occurs\n     * @return the newly created Map\n     */\n    Map<String, Object> toMap(ResultSet resultSet) throws SQLException;\n\n}"}, {"uris": "src/main/java/org/apache/commons/dbutils/ResultSetHandler.java.ResultSetHandler", "name": "ResultSetHandler", "file_path": "src/main/java/org/apache/commons/dbutils/ResultSetHandler.java", "superclasses": [], "methods": ["[T]handle(ResultSet)"], "method_uris": ["src/main/java/org/apache/commons/dbutils/ResultSetHandler.java.ResultSetHandler.[T]handle(ResultSet)"], "overrides": null, "attributes": null, "class_docstring": "\nImplementations of this interface convert ResultSets into other objects.\n\n@param <T> the target type the input ResultSet will be converted to.\n", "original_string": "public interface ResultSetHandler<T> {\n\n    /**\n     * Turn the {@code ResultSet} into an Object.\n     *\n     * @param resultSet The {@code ResultSet} to handle.  It has not been touched\n     * before being passed to this method.\n     *\n     * @return An Object initialized with {@code ResultSet} data. It is\n     * legal for implementations to return {@code null} if the\n     * {@code ResultSet} contained 0 rows.\n     *\n     * @throws SQLException if a database access error occurs\n     */\n    T handle(ResultSet resultSet) throws SQLException;\n\n}"}]