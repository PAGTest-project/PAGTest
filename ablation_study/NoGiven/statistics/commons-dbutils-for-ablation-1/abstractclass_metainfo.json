[{"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler", "name": "AbstractTestColumnHandler", "file_path": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java", "superclasses": "", "methods": ["[]AbstractTestColumnHandler(ColumnHandler<T>,Class<?>)", "[ColumnHandler<T>]getColumnHandler()", "[Class<?>]getMatchingType()", "[ResultSet]getResultSet()"], "method_uris": ["src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler.[]AbstractTestColumnHandler(ColumnHandler<T>,Class<?>)", "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler.[ColumnHandler<T>]getColumnHandler()", "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler.[Class<?>]getMatchingType()", "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler.[ResultSet]getResultSet()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public abstract class AbstractTestColumnHandler<T> {\n\n    @Mock\n    private ResultSet rs;\n    private final ColumnHandler<T> handler;\n    private final Class<?> matchingType;\n\n    public AbstractTestColumnHandler(final ColumnHandler<T> handler, final Class<?> matchingType) {\n        this.handler = handler;\n        this.matchingType = matchingType;\n    }\n\n    public ColumnHandler<T> getColumnHandler() {\n        return this.handler;\n    }\n\n    public Class<?> getMatchingType() {\n        return this.matchingType;\n    }\n\n    public ResultSet getResultSet() {\n        return this.rs;\n    }\n\n    @Test\n    public abstract void testApplyType() throws Exception;\n\n    @Test\n    public void testMatch() {\n        assertTrue(handler.match(matchingType));\n    }\n\n    @Test\n    public void testMatchNegative() {\n        assertFalse(handler.match(Integer.class));\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "@Mock\n    private ResultSet rs;", "docstring": "", "modifiers": "@Mock\n    private", "marker_annotations": ["@Mock"], "non_marker_annotations": ["private"], "comments": [], "type": "ResultSet", "name": "rs", "syntax_pass": true}, {"attribute_expression": "private final ColumnHandler<T> handler;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "ColumnHandler<T>", "name": "handler", "syntax_pass": true}, {"attribute_expression": "private final Class<?> matchingType;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Class<?>", "name": "matchingType", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "name": "BaseResultSetHandler", "file_path": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "superclasses": "", "methods": ["[boolean]absolute(int)", "[void]afterLast()", "[void]beforeFirst()", "[void]cancelRowUpdates()", "[void]clearWarnings()", "[void]close()", "[void]deleteRow()", "[int]findColumn(String)", "[boolean]first()", "[ResultSet]getAdaptedResultSet()", "[Array]getArray(int)", "[Array]getArray(String)", "[InputStream]getAsciiStream(int)", "[InputStream]getAsciiStream(String)", "[BigDecimal]getBigDecimal(int)", "[BigDecimal]getBigDecimal(int,int)", "[BigDecimal]getBigDecimal(String)", "[BigDecimal]getBigDecimal(String,int)", "[InputStream]getBinaryStream(int)", "[InputStream]getBinaryStream(String)", "[Blob]getBlob(int)", "[Blob]getBlob(String)", "[boolean]getBoolean(int)", "[boolean]getBoolean(String)", "[byte]getByte(int)", "[byte]getByte(String)", "[byte[]]getBytes(int)", "[byte[]]getBytes(String)", "[Reader]getCharacterStream(int)", "[Reader]getCharacterStream(String)", "[Clob]getClob(int)", "[Clob]getClob(String)", "[int]getConcurrency()", "[String]getCursorName()", "[Date]getDate(int)", "[Date]getDate(int,Calendar)", "[Date]getDate(String)", "[Date]getDate(String,Calendar)", "[double]getDouble(int)", "[double]getDouble(String)", "[int]getFetchDirection()", "[int]getFetchSize()", "[float]getFloat(int)", "[float]getFloat(String)", "[int]getHoldability()", "[int]getInt(int)", "[int]getInt(String)", "[long]getLong(int)", "[long]getLong(String)", "[ResultSetMetaData]getMetaData()", "[Reader]getNCharacterStream(int)", "[Reader]getNCharacterStream(String)", "[NClob]getNClob(int)", "[NClob]getNClob(String)", "[String]getNString(int)", "[String]getNString(String)", "[Object]getObject(int)", "[Object]getObject(int,Map<String, Class<?>>)", "[Object]getObject(String)", "[Object]getObject(String,Map<String, Class<?>>)", "[Ref]getRef(int)", "[Ref]getRef(String)", "[int]getRow()", "[RowId]getRowId(int)", "[RowId]getRowId(String)", "[short]getShort(int)", "[short]getShort(String)", "[SQLXML]getSQLXML(int)", "[SQLXML]getSQLXML(String)", "[Statement]getStatement()", "[String]getString(int)", "[String]getString(String)", "[Time]getTime(int)", "[Time]getTime(int,Calendar)", "[Time]getTime(String)", "[Time]getTime(String,Calendar)", "[Timestamp]getTimestamp(int)", "[Timestamp]getTimestamp(int,Calendar)", "[Timestamp]getTimestamp(String)", "[Timestamp]getTimestamp(String,Calendar)", "[int]getType()", "[InputStream]getUnicodeStream(int)", "[InputStream]getUnicodeStream(String)", "[URL]getURL(int)", "[URL]getURL(String)", "[SQLWarning]getWarnings()", "[T]handle()", "[T]handle(ResultSet)", "[void]insertRow()", "[boolean]isAfterLast()", "[boolean]isBeforeFirst()", "[boolean]isClosed()", "[boolean]isFirst()", "[boolean]isLast()", "[boolean]isWrapperFor(Class<?>)", "[boolean]last()", "[void]moveToCurrentRow()", "[void]moveToInsertRow()", "[boolean]next()", "[boolean]previous()", "[void]refreshRow()", "[boolean]relative(int)", "[boolean]rowDeleted()", "[boolean]rowInserted()", "[boolean]rowUpdated()", "[void]setFetchDirection(int)", "[void]setFetchSize(int)", "[E]unwrap(Class<E>)", "[void]updateArray(int,Array)", "[void]updateArray(String,Array)", "[void]updateAsciiStream(int,InputStream)", "[void]updateAsciiStream(int,InputStream,int)", "[void]updateAsciiStream(int,InputStream,long)", "[void]updateAsciiStream(String,InputStream)", "[void]updateAsciiStream(String,InputStream,int)", "[void]updateAsciiStream(String,InputStream,long)", "[void]updateBigDecimal(int,BigDecimal)", "[void]updateBigDecimal(String,BigDecimal)", "[void]updateBinaryStream(int,InputStream)", "[void]updateBinaryStream(int,InputStream,int)", "[void]updateBinaryStream(int,InputStream,long)", "[void]updateBinaryStream(String,InputStream)", "[void]updateBinaryStream(String,InputStream,int)", "[void]updateBinaryStream(String,InputStream,long)", "[void]updateBlob(int,Blob)", "[void]updateBlob(int,InputStream)", "[void]updateBlob(int,InputStream,long)", "[void]updateBlob(String,Blob)", "[void]updateBlob(String,InputStream)", "[void]updateBlob(String,InputStream,long)", "[void]updateBoolean(int,boolean)", "[void]updateBoolean(String,boolean)", "[void]updateByte(int,byte)", "[void]updateByte(String,byte)", "[void]updateBytes(int,byte[])", "[void]updateBytes(String,byte[])", "[void]updateCharacterStream(int,Reader)", "[void]updateCharacterStream(int,Reader,int)", "[void]updateCharacterStream(int,Reader,long)", "[void]updateCharacterStream(String,Reader)", "[void]updateCharacterStream(String,Reader,int)", "[void]updateCharacterStream(String,Reader,long)", "[void]updateClob(int,Clob)", "[void]updateClob(int,Reader)", "[void]updateClob(int,Reader,long)", "[void]updateClob(String,Clob)", "[void]updateClob(String,Reader)", "[void]updateClob(String,Reader,long)", "[void]updateDate(int,Date)", "[void]updateDate(String,Date)", "[void]updateDouble(int,double)", "[void]updateDouble(String,double)", "[void]updateFloat(int,float)", "[void]updateFloat(String,float)", "[void]updateInt(int,int)", "[void]updateInt(String,int)", "[void]updateLong(int,long)", "[void]updateLong(String,long)", "[void]updateNCharacterStream(int,Reader)", "[void]updateNCharacterStream(int,Reader,long)", "[void]updateNCharacterStream(String,Reader)", "[void]updateNCharacterStream(String,Reader,long)", "[void]updateNClob(int,NClob)", "[void]updateNClob(int,Reader)", "[void]updateNClob(int,Reader,long)", "[void]updateNClob(String,NClob)", "[void]updateNClob(String,Reader)", "[void]updateNClob(String,Reader,long)", "[void]updateNString(int,String)", "[void]updateNString(String,String)", "[void]updateNull(int)", "[void]updateNull(String)", "[void]updateObject(int,Object)", "[void]updateObject(int,Object,int)", "[void]updateObject(String,Object)", "[void]updateObject(String,Object,int)", "[void]updateRef(int,Ref)", "[void]updateRef(String,Ref)", "[void]updateRow()", "[void]updateRowId(int,RowId)", "[void]updateRowId(String,RowId)", "[void]updateShort(int,short)", "[void]updateShort(String,short)", "[void]updateSQLXML(int,SQLXML)", "[void]updateSQLXML(String,SQLXML)", "[void]updateString(int,String)", "[void]updateString(String,String)", "[void]updateTime(int,Time)", "[void]updateTime(String,Time)", "[void]updateTimestamp(int,Timestamp)", "[void]updateTimestamp(String,Timestamp)", "[boolean]wasNull()"], "method_uris": ["src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]absolute(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]afterLast()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]beforeFirst()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]cancelRowUpdates()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]clearWarnings()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]close()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]deleteRow()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]findColumn(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]first()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[ResultSet]getAdaptedResultSet()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Array]getArray(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Array]getArray(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[InputStream]getAsciiStream(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[InputStream]getAsciiStream(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[BigDecimal]getBigDecimal(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[BigDecimal]getBigDecimal(int,int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[BigDecimal]getBigDecimal(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[BigDecimal]getBigDecimal(String,int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[InputStream]getBinaryStream(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[InputStream]getBinaryStream(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Blob]getBlob(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Blob]getBlob(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]getBoolean(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]getBoolean(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[byte]getByte(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[byte]getByte(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[byte[]]getBytes(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[byte[]]getBytes(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Reader]getCharacterStream(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Reader]getCharacterStream(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Clob]getClob(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Clob]getClob(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getConcurrency()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[String]getCursorName()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Date]getDate(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Date]getDate(int,Calendar)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Date]getDate(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Date]getDate(String,Calendar)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[double]getDouble(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[double]getDouble(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getFetchDirection()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getFetchSize()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[float]getFloat(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[float]getFloat(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getHoldability()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getInt(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getInt(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[long]getLong(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[long]getLong(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[ResultSetMetaData]getMetaData()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Reader]getNCharacterStream(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Reader]getNCharacterStream(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[NClob]getNClob(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[NClob]getNClob(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[String]getNString(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[String]getNString(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Object]getObject(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Object]getObject(int,Map<String, Class<?>>)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Object]getObject(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Object]getObject(String,Map<String, Class<?>>)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Ref]getRef(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Ref]getRef(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getRow()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[RowId]getRowId(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[RowId]getRowId(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[short]getShort(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[short]getShort(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[SQLXML]getSQLXML(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[SQLXML]getSQLXML(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Statement]getStatement()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[String]getString(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[String]getString(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Time]getTime(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Time]getTime(int,Calendar)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Time]getTime(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Time]getTime(String,Calendar)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Timestamp]getTimestamp(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Timestamp]getTimestamp(int,Calendar)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Timestamp]getTimestamp(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Timestamp]getTimestamp(String,Calendar)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getType()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[InputStream]getUnicodeStream(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[InputStream]getUnicodeStream(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[URL]getURL(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[URL]getURL(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[SQLWarning]getWarnings()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[T]handle()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[T]handle(ResultSet)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]insertRow()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]isAfterLast()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]isBeforeFirst()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]isClosed()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]isFirst()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]isLast()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]isWrapperFor(Class<?>)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]last()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]moveToCurrentRow()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]moveToInsertRow()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]next()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]previous()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]refreshRow()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]relative(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]rowDeleted()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]rowInserted()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]rowUpdated()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]setFetchDirection(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]setFetchSize(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[E]unwrap(Class<E>)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateArray(int,Array)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateArray(String,Array)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateAsciiStream(int,InputStream)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateAsciiStream(int,InputStream,int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateAsciiStream(int,InputStream,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateAsciiStream(String,InputStream)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateAsciiStream(String,InputStream,int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateAsciiStream(String,InputStream,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBigDecimal(int,BigDecimal)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBigDecimal(String,BigDecimal)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBinaryStream(int,InputStream)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBinaryStream(int,InputStream,int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBinaryStream(int,InputStream,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBinaryStream(String,InputStream)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBinaryStream(String,InputStream,int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBinaryStream(String,InputStream,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBlob(int,Blob)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBlob(int,InputStream)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBlob(int,InputStream,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBlob(String,Blob)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBlob(String,InputStream)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBlob(String,InputStream,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBoolean(int,boolean)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBoolean(String,boolean)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateByte(int,byte)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateByte(String,byte)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBytes(int,byte[])", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBytes(String,byte[])", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateCharacterStream(int,Reader)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateCharacterStream(int,Reader,int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateCharacterStream(int,Reader,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateCharacterStream(String,Reader)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateCharacterStream(String,Reader,int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateCharacterStream(String,Reader,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateClob(int,Clob)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateClob(int,Reader)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateClob(int,Reader,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateClob(String,Clob)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateClob(String,Reader)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateClob(String,Reader,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateDate(int,Date)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateDate(String,Date)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateDouble(int,double)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateDouble(String,double)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateFloat(int,float)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateFloat(String,float)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateInt(int,int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateInt(String,int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateLong(int,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateLong(String,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNCharacterStream(int,Reader)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNCharacterStream(int,Reader,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNCharacterStream(String,Reader)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNCharacterStream(String,Reader,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNClob(int,NClob)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNClob(int,Reader)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNClob(int,Reader,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNClob(String,NClob)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNClob(String,Reader)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNClob(String,Reader,long)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNString(int,String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNString(String,String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNull(int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNull(String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateObject(int,Object)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateObject(int,Object,int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateObject(String,Object)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateObject(String,Object,int)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateRef(int,Ref)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateRef(String,Ref)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateRow()", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateRowId(int,RowId)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateRowId(String,RowId)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateShort(int,short)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateShort(String,short)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateSQLXML(int,SQLXML)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateSQLXML(String,SQLXML)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateString(int,String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateString(String,String)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateTime(int,Time)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateTime(String,Time)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateTimestamp(int,Timestamp)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateTimestamp(String,Timestamp)", "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]wasNull()"], "overrides": null, "attributes": [], "class_docstring": "\nExtensions of this class convert ResultSets into other objects.\n<p>\nAccording to the <em>DRY</em> principle (Don't Repeat Yourself), repeating {@code resultSet} variable inside the {@link ResultSetHandler#handle(ResultSet)}\nover and over for each iteration can get a little tedious, {@code AbstractResultSetHandler} implicitly gives users access to {@code ResultSet}'s methods.\n</p>\n<p>\n<b>NOTE</b> This class is <em>NOT</em> thread safe!\n</p>\n\n@param <T> the target type the input ResultSet will be converted to.\n@since 1.6\n", "original_string": "public abstract class BaseResultSetHandler<T> implements ResultSetHandler<T> {\n\n    /**\n     * The adapted ResultSet.\n     */\n    private ResultSet resultSet;\n\n    /**\n     * TODO. A\n     */\n    protected final boolean absolute(final int row) throws SQLException {\n        return resultSet.absolute(row);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void afterLast() throws SQLException {\n        resultSet.afterLast();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void beforeFirst() throws SQLException {\n        resultSet.beforeFirst();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void cancelRowUpdates() throws SQLException {\n        resultSet.cancelRowUpdates();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void clearWarnings() throws SQLException {\n        resultSet.clearWarnings();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void close() throws SQLException {\n        resultSet.close();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void deleteRow() throws SQLException {\n        resultSet.deleteRow();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final int findColumn(final String columnLabel) throws SQLException {\n        return resultSet.findColumn(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean first() throws SQLException {\n        return resultSet.first();\n    }\n\n    protected final ResultSet getAdaptedResultSet() {\n        return resultSet;\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Array getArray(final int columnIndex) throws SQLException {\n        return resultSet.getArray(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Array getArray(final String columnLabel) throws SQLException {\n        return resultSet.getArray(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final InputStream getAsciiStream(final int columnIndex) throws SQLException {\n        return resultSet.getAsciiStream(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final InputStream getAsciiStream(final String columnLabel) throws SQLException {\n        return resultSet.getAsciiStream(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final BigDecimal getBigDecimal(final int columnIndex) throws SQLException {\n        return resultSet.getBigDecimal(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    @Deprecated\n    protected final BigDecimal getBigDecimal(final int columnIndex, final int scale) throws SQLException {\n        return resultSet.getBigDecimal(columnIndex, scale);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final BigDecimal getBigDecimal(final String columnLabel) throws SQLException {\n        return resultSet.getBigDecimal(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    @Deprecated\n    protected final BigDecimal getBigDecimal(final String columnLabel, final int scale) throws SQLException {\n        return resultSet.getBigDecimal(columnLabel, scale);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final InputStream getBinaryStream(final int columnIndex) throws SQLException {\n        return resultSet.getBinaryStream(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final InputStream getBinaryStream(final String columnLabel) throws SQLException {\n        return resultSet.getBinaryStream(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Blob getBlob(final int columnIndex) throws SQLException {\n        return resultSet.getBlob(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Blob getBlob(final String columnLabel) throws SQLException {\n        return resultSet.getBlob(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean getBoolean(final int columnIndex) throws SQLException {\n        return resultSet.getBoolean(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean getBoolean(final String columnLabel) throws SQLException {\n        return resultSet.getBoolean(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final byte getByte(final int columnIndex) throws SQLException {\n        return resultSet.getByte(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final byte getByte(final String columnLabel) throws SQLException {\n        return resultSet.getByte(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final byte[] getBytes(final int columnIndex) throws SQLException {\n        return resultSet.getBytes(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final byte[] getBytes(final String columnLabel) throws SQLException {\n        return resultSet.getBytes(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Reader getCharacterStream(final int columnIndex) throws SQLException {\n        return resultSet.getCharacterStream(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Reader getCharacterStream(final String columnLabel) throws SQLException {\n        return resultSet.getCharacterStream(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Clob getClob(final int columnIndex) throws SQLException {\n        return resultSet.getClob(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Clob getClob(final String columnLabel) throws SQLException {\n        return resultSet.getClob(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final int getConcurrency() throws SQLException {\n        return resultSet.getConcurrency();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final String getCursorName() throws SQLException {\n        return resultSet.getCursorName();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Date getDate(final int columnIndex) throws SQLException {\n        return resultSet.getDate(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Date getDate(final int columnIndex, final Calendar cal) throws SQLException {\n        return resultSet.getDate(columnIndex, cal);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Date getDate(final String columnLabel) throws SQLException {\n        return resultSet.getDate(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Date getDate(final String columnLabel, final Calendar cal) throws SQLException {\n        return resultSet.getDate(columnLabel, cal);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final double getDouble(final int columnIndex) throws SQLException {\n        return resultSet.getDouble(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final double getDouble(final String columnLabel) throws SQLException {\n        return resultSet.getDouble(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final int getFetchDirection() throws SQLException {\n        return resultSet.getFetchDirection();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final int getFetchSize() throws SQLException {\n        return resultSet.getFetchSize();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final float getFloat(final int columnIndex) throws SQLException {\n        return resultSet.getFloat(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final float getFloat(final String columnLabel) throws SQLException {\n        return resultSet.getFloat(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final int getHoldability() throws SQLException {\n        return resultSet.getHoldability();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final int getInt(final int columnIndex) throws SQLException {\n        return resultSet.getInt(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final int getInt(final String columnLabel) throws SQLException {\n        return resultSet.getInt(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final long getLong(final int columnIndex) throws SQLException {\n        return resultSet.getLong(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final long getLong(final String columnLabel) throws SQLException {\n        return resultSet.getLong(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final ResultSetMetaData getMetaData() throws SQLException {\n        return resultSet.getMetaData();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Reader getNCharacterStream(final int columnIndex) throws SQLException {\n        return resultSet.getNCharacterStream(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Reader getNCharacterStream(final String columnLabel) throws SQLException {\n        return resultSet.getNCharacterStream(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final NClob getNClob(final int columnIndex) throws SQLException {\n        return resultSet.getNClob(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final NClob getNClob(final String columnLabel) throws SQLException {\n        return resultSet.getNClob(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final String getNString(final int columnIndex) throws SQLException {\n        return resultSet.getNString(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final String getNString(final String columnLabel) throws SQLException {\n        return resultSet.getNString(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Object getObject(final int columnIndex) throws SQLException {\n        return resultSet.getObject(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Object getObject(final int columnIndex, final Map<String, Class<?>> map) throws SQLException {\n        return resultSet.getObject(columnIndex, map);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Object getObject(final String columnLabel) throws SQLException {\n        return resultSet.getObject(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Object getObject(final String columnLabel, final Map<String, Class<?>> map) throws SQLException {\n        return resultSet.getObject(columnLabel, map);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Ref getRef(final int columnIndex) throws SQLException {\n        return resultSet.getRef(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Ref getRef(final String columnLabel) throws SQLException {\n        return resultSet.getRef(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final int getRow() throws SQLException {\n        return resultSet.getRow();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final RowId getRowId(final int columnIndex) throws SQLException {\n        return resultSet.getRowId(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final RowId getRowId(final String columnLabel) throws SQLException {\n        return resultSet.getRowId(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final short getShort(final int columnIndex) throws SQLException {\n        return resultSet.getShort(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final short getShort(final String columnLabel) throws SQLException {\n        return resultSet.getShort(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final SQLXML getSQLXML(final int columnIndex) throws SQLException {\n        return resultSet.getSQLXML(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final SQLXML getSQLXML(final String columnLabel) throws SQLException {\n        return resultSet.getSQLXML(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Statement getStatement() throws SQLException {\n        return resultSet.getStatement();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final String getString(final int columnIndex) throws SQLException {\n        return resultSet.getString(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final String getString(final String columnLabel) throws SQLException {\n        return resultSet.getString(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Time getTime(final int columnIndex) throws SQLException {\n        return resultSet.getTime(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Time getTime(final int columnIndex, final Calendar cal) throws SQLException {\n        return resultSet.getTime(columnIndex, cal);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Time getTime(final String columnLabel) throws SQLException {\n        return resultSet.getTime(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Time getTime(final String columnLabel, final Calendar cal) throws SQLException {\n        return resultSet.getTime(columnLabel, cal);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Timestamp getTimestamp(final int columnIndex) throws SQLException {\n        return resultSet.getTimestamp(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Timestamp getTimestamp(final int columnIndex, final Calendar cal) throws SQLException {\n        return resultSet.getTimestamp(columnIndex, cal);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Timestamp getTimestamp(final String columnLabel) throws SQLException {\n        return resultSet.getTimestamp(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final Timestamp getTimestamp(final String columnLabel, final Calendar cal) throws SQLException {\n        return resultSet.getTimestamp(columnLabel, cal);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final int getType() throws SQLException {\n        return resultSet.getType();\n    }\n\n    /**\n     * TODO.\n     */\n    @Deprecated\n    protected final InputStream getUnicodeStream(final int columnIndex) throws SQLException {\n        return resultSet.getUnicodeStream(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    @Deprecated\n    protected final InputStream getUnicodeStream(final String columnLabel) throws SQLException {\n        return resultSet.getUnicodeStream(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final URL getURL(final int columnIndex) throws SQLException {\n        return resultSet.getURL(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final URL getURL(final String columnLabel) throws SQLException {\n        return resultSet.getURL(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final SQLWarning getWarnings() throws SQLException {\n        return resultSet.getWarnings();\n    }\n\n    /**\n     * Turn the {@code ResultSet} into an Object.\n     *\n     * @return An Object initialized with {@code ResultSet} data\n     * @throws SQLException if a database access error occurs\n     * @see ResultSetHandler#handle(ResultSet)\n     */\n    protected abstract T handle() throws SQLException;\n\n    /**\n     * TODO.\n     */\n    @Override\n    public final T handle(final ResultSet rs) throws SQLException {\n        if (this.resultSet != null) {\n            throw new IllegalStateException(\"Re-entry not allowed!\");\n        }\n\n        this.resultSet = rs;\n\n        try {\n            return handle();\n        } finally {\n            this.resultSet = null;\n        }\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void insertRow() throws SQLException {\n        resultSet.insertRow();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean isAfterLast() throws SQLException {\n        return resultSet.isAfterLast();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean isBeforeFirst() throws SQLException {\n        return resultSet.isBeforeFirst();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean isClosed() throws SQLException {\n        return resultSet.isClosed();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean isFirst() throws SQLException {\n        return resultSet.isFirst();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean isLast() throws SQLException {\n        return resultSet.isLast();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean isWrapperFor(final Class<?> iface) throws SQLException {\n        return resultSet.isWrapperFor(iface);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean last() throws SQLException {\n        return resultSet.last();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void moveToCurrentRow() throws SQLException {\n        resultSet.moveToCurrentRow();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void moveToInsertRow() throws SQLException {\n        resultSet.moveToInsertRow();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean next() throws SQLException {\n        return resultSet.next();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean previous() throws SQLException {\n        return resultSet.previous();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void refreshRow() throws SQLException {\n        resultSet.refreshRow();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean relative(final int rows) throws SQLException {\n        return resultSet.relative(rows);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean rowDeleted() throws SQLException {\n        return resultSet.rowDeleted();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean rowInserted() throws SQLException {\n        return resultSet.rowInserted();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean rowUpdated() throws SQLException {\n        return resultSet.rowUpdated();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void setFetchDirection(final int direction) throws SQLException {\n        resultSet.setFetchDirection(direction);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void setFetchSize(final int rows) throws SQLException {\n        resultSet.setFetchSize(rows);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final <E> E unwrap(final Class<E> iface) throws SQLException {\n        return resultSet.unwrap(iface);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateArray(final int columnIndex, final Array x) throws SQLException {\n        resultSet.updateArray(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateArray(final String columnLabel, final Array x) throws SQLException {\n        resultSet.updateArray(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateAsciiStream(final int columnIndex, final InputStream x) throws SQLException {\n        resultSet.updateAsciiStream(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateAsciiStream(final int columnIndex, final InputStream x, final int length) throws SQLException {\n        resultSet.updateAsciiStream(columnIndex, x, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateAsciiStream(final int columnIndex, final InputStream x, final long length) throws SQLException {\n        resultSet.updateAsciiStream(columnIndex, x, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateAsciiStream(final String columnLabel, final InputStream x) throws SQLException {\n        resultSet.updateAsciiStream(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateAsciiStream(final String columnLabel, final InputStream x, final int length) throws SQLException {\n        resultSet.updateAsciiStream(columnLabel, x, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateAsciiStream(final String columnLabel, final InputStream x, final long length) throws SQLException {\n        resultSet.updateAsciiStream(columnLabel, x, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBigDecimal(final int columnIndex, final BigDecimal x) throws SQLException {\n        resultSet.updateBigDecimal(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBigDecimal(final String columnLabel, final BigDecimal x) throws SQLException {\n        resultSet.updateBigDecimal(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBinaryStream(final int columnIndex, final InputStream x) throws SQLException {\n        resultSet.updateBinaryStream(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBinaryStream(final int columnIndex, final InputStream x, final int length) throws SQLException {\n        resultSet.updateBinaryStream(columnIndex, x, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBinaryStream(final int columnIndex, final InputStream x, final long length) throws SQLException {\n        resultSet.updateBinaryStream(columnIndex, x, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBinaryStream(final String columnLabel, final InputStream x) throws SQLException {\n        resultSet.updateBinaryStream(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBinaryStream(final String columnLabel, final InputStream x, final int length) throws SQLException {\n        resultSet.updateBinaryStream(columnLabel, x, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBinaryStream(final String columnLabel, final InputStream x, final long length) throws SQLException {\n        resultSet.updateBinaryStream(columnLabel, x, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBlob(final int columnIndex, final Blob x) throws SQLException {\n        resultSet.updateBlob(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBlob(final int columnIndex, final InputStream inputStream) throws SQLException {\n        resultSet.updateBlob(columnIndex, inputStream);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBlob(final int columnIndex, final InputStream inputStream, final long length) throws SQLException {\n        resultSet.updateBlob(columnIndex, inputStream, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBlob(final String columnLabel, final Blob x) throws SQLException {\n        resultSet.updateBlob(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBlob(final String columnLabel, final InputStream inputStream) throws SQLException {\n        resultSet.updateBlob(columnLabel, inputStream);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBlob(final String columnLabel, final InputStream inputStream, final long length) throws SQLException {\n        resultSet.updateBlob(columnLabel, inputStream, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBoolean(final int columnIndex, final boolean x) throws SQLException {\n        resultSet.updateBoolean(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBoolean(final String columnLabel, final boolean x) throws SQLException {\n        resultSet.updateBoolean(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateByte(final int columnIndex, final byte x) throws SQLException {\n        resultSet.updateByte(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateByte(final String columnLabel, final byte x) throws SQLException {\n        resultSet.updateByte(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBytes(final int columnIndex, final byte[] x) throws SQLException {\n        resultSet.updateBytes(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateBytes(final String columnLabel, final byte[] x) throws SQLException {\n        resultSet.updateBytes(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateCharacterStream(final int columnIndex, final Reader x) throws SQLException {\n        resultSet.updateCharacterStream(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateCharacterStream(final int columnIndex, final Reader x, final int length) throws SQLException {\n        resultSet.updateCharacterStream(columnIndex, x, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateCharacterStream(final int columnIndex, final Reader x, final long length) throws SQLException {\n        resultSet.updateCharacterStream(columnIndex, x, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateCharacterStream(final String columnLabel, final Reader reader) throws SQLException {\n        resultSet.updateCharacterStream(columnLabel, reader);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateCharacterStream(final String columnLabel, final Reader reader, final int length) throws SQLException {\n        resultSet.updateCharacterStream(columnLabel, reader, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateCharacterStream(final String columnLabel, final Reader reader, final long length) throws SQLException {\n        resultSet.updateCharacterStream(columnLabel, reader, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateClob(final int columnIndex, final Clob x) throws SQLException {\n        resultSet.updateClob(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateClob(final int columnIndex, final Reader reader) throws SQLException {\n        resultSet.updateClob(columnIndex, reader);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateClob(final int columnIndex, final Reader reader, final long length) throws SQLException {\n        resultSet.updateClob(columnIndex, reader, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateClob(final String columnLabel, final Clob x) throws SQLException {\n        resultSet.updateClob(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateClob(final String columnLabel, final Reader reader) throws SQLException {\n        resultSet.updateClob(columnLabel, reader);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateClob(final String columnLabel, final Reader reader, final long length) throws SQLException {\n        resultSet.updateClob(columnLabel, reader, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateDate(final int columnIndex, final Date x) throws SQLException {\n        resultSet.updateDate(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateDate(final String columnLabel, final Date x) throws SQLException {\n        resultSet.updateDate(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateDouble(final int columnIndex, final double x) throws SQLException {\n        resultSet.updateDouble(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateDouble(final String columnLabel, final double x) throws SQLException {\n        resultSet.updateDouble(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateFloat(final int columnIndex, final float x) throws SQLException {\n        resultSet.updateFloat(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateFloat(final String columnLabel, final float x) throws SQLException {\n        resultSet.updateFloat(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateInt(final int columnIndex, final int x) throws SQLException {\n        resultSet.updateInt(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateInt(final String columnLabel, final int x) throws SQLException {\n        resultSet.updateInt(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateLong(final int columnIndex, final long x) throws SQLException {\n        resultSet.updateLong(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateLong(final String columnLabel, final long x) throws SQLException {\n        resultSet.updateLong(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateNCharacterStream(final int columnIndex, final Reader x) throws SQLException {\n        resultSet.updateNCharacterStream(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateNCharacterStream(final int columnIndex, final Reader x, final long length) throws SQLException {\n        resultSet.updateNCharacterStream(columnIndex, x, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateNCharacterStream(final String columnLabel, final Reader reader) throws SQLException {\n        resultSet.updateNCharacterStream(columnLabel, reader);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateNCharacterStream(final String columnLabel, final Reader reader, final long length) throws SQLException {\n        resultSet.updateNCharacterStream(columnLabel, reader, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateNClob(final int columnIndex, final NClob nClob) throws SQLException {\n        resultSet.updateNClob(columnIndex, nClob);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateNClob(final int columnIndex, final Reader reader) throws SQLException {\n        resultSet.updateNClob(columnIndex, reader);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateNClob(final int columnIndex, final Reader reader, final long length) throws SQLException {\n        resultSet.updateNClob(columnIndex, reader, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateNClob(final String columnLabel, final NClob nClob) throws SQLException {\n        resultSet.updateNClob(columnLabel, nClob);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateNClob(final String columnLabel, final Reader reader) throws SQLException {\n        resultSet.updateNClob(columnLabel, reader);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateNClob(final String columnLabel, final Reader reader, final long length) throws SQLException {\n        resultSet.updateNClob(columnLabel, reader, length);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateNString(final int columnIndex, final String nString) throws SQLException {\n        resultSet.updateNString(columnIndex, nString);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateNString(final String columnLabel, final String nString) throws SQLException {\n        resultSet.updateNString(columnLabel, nString);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateNull(final int columnIndex) throws SQLException {\n        resultSet.updateNull(columnIndex);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateNull(final String columnLabel) throws SQLException {\n        resultSet.updateNull(columnLabel);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateObject(final int columnIndex, final Object x) throws SQLException {\n        resultSet.updateObject(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateObject(final int columnIndex, final Object x, final int scaleOrLength) throws SQLException {\n        resultSet.updateObject(columnIndex, x, scaleOrLength);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateObject(final String columnLabel, final Object x) throws SQLException {\n        resultSet.updateObject(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateObject(final String columnLabel, final Object x, final int scaleOrLength) throws SQLException {\n        resultSet.updateObject(columnLabel, x, scaleOrLength);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateRef(final int columnIndex, final Ref x) throws SQLException {\n        resultSet.updateRef(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateRef(final String columnLabel, final Ref x) throws SQLException {\n        resultSet.updateRef(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateRow() throws SQLException {\n        resultSet.updateRow();\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateRowId(final int columnIndex, final RowId x) throws SQLException {\n        resultSet.updateRowId(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateRowId(final String columnLabel, final RowId x) throws SQLException {\n        resultSet.updateRowId(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateShort(final int columnIndex, final short x) throws SQLException {\n        resultSet.updateShort(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateShort(final String columnLabel, final short x) throws SQLException {\n        resultSet.updateShort(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateSQLXML(final int columnIndex, final SQLXML xmlObject) throws SQLException {\n        resultSet.updateSQLXML(columnIndex, xmlObject);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateSQLXML(final String columnLabel, final SQLXML xmlObject) throws SQLException {\n        resultSet.updateSQLXML(columnLabel, xmlObject);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateString(final int columnIndex, final String x) throws SQLException {\n        resultSet.updateString(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateString(final String columnLabel, final String x) throws SQLException {\n        resultSet.updateString(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateTime(final int columnIndex, final Time x) throws SQLException {\n        resultSet.updateTime(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateTime(final String columnLabel, final Time x) throws SQLException {\n        resultSet.updateTime(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateTimestamp(final int columnIndex, final Timestamp x) throws SQLException {\n        resultSet.updateTimestamp(columnIndex, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final void updateTimestamp(final String columnLabel, final Timestamp x) throws SQLException {\n        resultSet.updateTimestamp(columnLabel, x);\n    }\n\n    /**\n     * TODO.\n     */\n    protected final boolean wasNull() throws SQLException {\n        return resultSet.wasNull();\n    }\n\n}", "super_interfaces": ["ResultSetHandler<T>"], "fields": [{"attribute_expression": "private ResultSet resultSet;", "docstring": "\nThe adapted ResultSet.\n", "modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "type": "ResultSet", "name": "resultSet", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "name": "AbstractQueryRunner", "file_path": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "superclasses": "", "methods": ["[]AbstractQueryRunner()", "[]AbstractQueryRunner(boolean)", "[]AbstractQueryRunner(DataSource)", "[]AbstractQueryRunner(DataSource,boolean)", "[]AbstractQueryRunner(DataSource,boolean,StatementConfiguration)", "[]AbstractQueryRunner(DataSource,StatementConfiguration)", "[]AbstractQueryRunner(StatementConfiguration)", "[void]close(Connection)", "[void]close(ResultSet)", "[void]close(Statement)", "[void]closeQuietly(Connection)", "[void]closeQuietly(ResultSet)", "[void]closeQuietly(Statement)", "[void]configureStatement(Statement)", "[void]fillStatement(PreparedStatement)", "[void]fillStatement(PreparedStatement,ParameterMetaData)", "[void]fillStatementWithBean(PreparedStatement,Object,PropertyDescriptor[])", "[void]fillStatementWithBean(PreparedStatement,Object)", "[DataSource]getDataSource()", "[ParameterMetaData]getParameterMetaData(PreparedStatement)", "[boolean]isPmdKnownBroken()", "[CallableStatement]prepareCall(Connection,String)", "[Connection]prepareConnection()", "[PreparedStatement]prepareStatement(Connection,String)", "[PreparedStatement]prepareStatement(Connection,String,int)", "[void]rethrow(SQLException,String)", "[ResultSet]wrap(ResultSet)"], "method_uris": ["src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[]AbstractQueryRunner()", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[]AbstractQueryRunner(boolean)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[]AbstractQueryRunner(DataSource)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[]AbstractQueryRunner(DataSource,boolean)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[]AbstractQueryRunner(DataSource,boolean,StatementConfiguration)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[]AbstractQueryRunner(DataSource,StatementConfiguration)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[]AbstractQueryRunner(StatementConfiguration)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]close(Connection)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]close(ResultSet)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]close(Statement)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]closeQuietly(Connection)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]closeQuietly(ResultSet)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]closeQuietly(Statement)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]configureStatement(Statement)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]fillStatement(PreparedStatement)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]fillStatement(PreparedStatement,ParameterMetaData)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]fillStatementWithBean(PreparedStatement,Object,PropertyDescriptor[])", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]fillStatementWithBean(PreparedStatement,Object)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[DataSource]getDataSource()", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[ParameterMetaData]getParameterMetaData(PreparedStatement)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[boolean]isPmdKnownBroken()", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[CallableStatement]prepareCall(Connection,String)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[Connection]prepareConnection()", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[PreparedStatement]prepareStatement(Connection,String)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[PreparedStatement]prepareStatement(Connection,String,int)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]rethrow(SQLException,String)", "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[ResultSet]wrap(ResultSet)"], "overrides": null, "attributes": [], "class_docstring": "\nThe base class for QueryRunner &amp; AsyncQueryRunner. This class is thread safe.\n\n@since 1.4 (mostly extracted from QueryRunner)\n", "original_string": "public abstract class AbstractQueryRunner {\n    /**\n     * Is {@link ParameterMetaData#getParameterType(int)} broken (have we tried\n     * it yet)?\n     */\n    private volatile boolean pmdKnownBroken;\n\n    /**\n     * The DataSource to retrieve connections from.\n     * @deprecated Access to this field should be through {@link #getDataSource()}.\n     */\n    @Deprecated\n    protected final DataSource ds;\n\n    /**\n     * Configuration to use when preparing statements.\n     */\n    private final StatementConfiguration stmtConfig;\n\n    /**\n     * Default constructor, sets pmdKnownBroken to false, ds to null and stmtConfig to null.\n     */\n    public AbstractQueryRunner() {\n        ds = null;\n        this.stmtConfig = null;\n    }\n\n    /**\n     * Constructor to control the use of {@code ParameterMetaData}.\n     *\n     * @param pmdKnownBroken\n     *            Some drivers don't support\n     *            {@link ParameterMetaData#getParameterType(int) }; if\n     *            {@code pmdKnownBroken} is set to true, we won't even try\n     *            it; if false, we'll try it, and if it breaks, we'll remember\n     *            not to use it again.\n     */\n    public AbstractQueryRunner(final boolean pmdKnownBroken) {\n        this.pmdKnownBroken = pmdKnownBroken;\n        ds = null;\n        this.stmtConfig = null;\n    }\n\n    /**\n     * Constructor to provide a {@code DataSource}. Methods that do not\n     * take a {@code Connection} parameter will retrieve connections from\n     * this {@code DataSource}.\n     *\n     * @param ds\n     *            The {@code DataSource} to retrieve connections from.\n     */\n    public AbstractQueryRunner(final DataSource ds) {\n        this.ds = ds;\n        this.stmtConfig = null;\n    }\n\n    /**\n     * Constructor to provide a {@code DataSource} and control the use of\n     * {@code ParameterMetaData}. Methods that do not take a\n     * {@code Connection} parameter will retrieve connections from this\n     * {@code DataSource}.\n     *\n     * @param ds\n     *            The {@code DataSource} to retrieve connections from.\n     * @param pmdKnownBroken\n     *            Some drivers don't support\n     *            {@link ParameterMetaData#getParameterType(int) }; if\n     *            {@code pmdKnownBroken} is set to true, we won't even try\n     *            it; if false, we'll try it, and if it breaks, we'll remember\n     *            not to use it again.\n     */\n    public AbstractQueryRunner(final DataSource ds, final boolean pmdKnownBroken) {\n        this.pmdKnownBroken = pmdKnownBroken;\n        this.ds = ds;\n        this.stmtConfig = null;\n    }\n\n    /**\n     * Constructor for QueryRunner that takes a {@code DataSource}, a {@code StatementConfiguration}, and\n     * controls the use of {@code ParameterMetaData}.  Methods that do not take a {@code Connection} parameter\n     * will retrieve connections from this {@code DataSource}.\n     *\n     * @param ds The {@code DataSource} to retrieve connections from.\n     * @param pmdKnownBroken Some drivers don't support {@link java.sql.ParameterMetaData#getParameterType(int) };\n     * if {@code pmdKnownBroken} is set to true, we won't even try it; if false, we'll try it,\n     * and if it breaks, we'll remember not to use it again.\n     * @param stmtConfig The configuration to apply to statements when they are prepared.\n     */\n    public AbstractQueryRunner(final DataSource ds, final boolean pmdKnownBroken, final StatementConfiguration stmtConfig) {\n        this.pmdKnownBroken = pmdKnownBroken;\n        this.ds = ds;\n        this.stmtConfig = stmtConfig;\n    }\n\n    /**\n     * Constructor for QueryRunner that takes a {@code DataSource} to use and a {@code StatementConfiguration}.\n     *\n     * Methods that do not take a {@code Connection} parameter will retrieve connections from this\n     * {@code DataSource}.\n     *\n     * @param ds The {@code DataSource} to retrieve connections from.\n     * @param stmtConfig The configuration to apply to statements when they are prepared.\n     */\n    public AbstractQueryRunner(final DataSource ds, final StatementConfiguration stmtConfig) {\n        this.ds = ds;\n        this.stmtConfig = stmtConfig;\n    }\n\n    /**\n     * Constructor for QueryRunner that takes a {@code StatementConfiguration} to configure statements when\n     * preparing them.\n     *\n     * @param stmtConfig The configuration to apply to statements when they are prepared.\n     */\n    public AbstractQueryRunner(final StatementConfiguration stmtConfig) {\n        this.ds = null;\n        this.stmtConfig = stmtConfig;\n    }\n\n    /**\n     * Close a {@code Connection}. This implementation avoids closing if\n     * null and does <strong>not</strong> suppress any exceptions. Subclasses\n     * can override to provide special handling like logging.\n     *\n     * @param conn\n     *            Connection to close\n     * @throws SQLException\n     *             if a database access error occurs\n     * @since 1.1\n     */\n    protected void close(final Connection conn) throws SQLException {\n        DbUtils.close(conn);\n    }\n\n    /**\n     * Close a {@code ResultSet}. This implementation avoids closing if\n     * null and does <strong>not</strong> suppress any exceptions. Subclasses\n     * can override to provide special handling like logging.\n     *\n     * @param resultSet\n     *            ResultSet to close\n     * @throws SQLException\n     *             if a database access error occurs\n     * @since 1.1\n     */\n    protected void close(final ResultSet resultSet) throws SQLException {\n        DbUtils.close(resultSet);\n    }\n\n    /**\n     * Close a {@code Statement}. This implementation avoids closing if\n     * null and does <strong>not</strong> suppress any exceptions. Subclasses\n     * can override to provide special handling like logging.\n     *\n     * @param stmt\n     *            Statement to close\n     * @throws SQLException\n     *             if a database access error occurs\n     * @since 1.1\n     */\n    protected void close(final Statement stmt) throws SQLException {\n        DbUtils.close(stmt);\n    }\n\n    /**\n     * Calls {@link DbUtils#closeQuietly(Connection)}.\n     *\n     * @param conn Connection to close.\n     * @since 1.8.0\n     */\n    protected void closeQuietly(final Connection conn) {\n        DbUtils.closeQuietly(conn);\n    }\n\n    /**\n     * Calls {@link DbUtils#closeQuietly(ResultSet)}.\n     *\n     * @param resultSet ResultSet to close.\n     * @since 1.8.0\n     */\n    protected void closeQuietly(final ResultSet resultSet) {\n        DbUtils.closeQuietly(resultSet);\n    }\n\n    /**\n     * Calls {@link DbUtils#closeQuietly(Statement)}.\n     *\n     * @param statement ResultSet to close.\n     * @since 1.8.0\n     */\n    protected void closeQuietly(final Statement statement) {\n        DbUtils.closeQuietly(statement);\n    }\n\n    private void configureStatement(final Statement stmt) throws SQLException {\n\n        if (stmtConfig != null) {\n            if (stmtConfig.isFetchDirectionSet()) {\n                stmt.setFetchDirection(stmtConfig.getFetchDirection());\n            }\n\n            if (stmtConfig.isFetchSizeSet()) {\n                stmt.setFetchSize(stmtConfig.getFetchSize());\n            }\n\n            if (stmtConfig.isMaxFieldSizeSet()) {\n                stmt.setMaxFieldSize(stmtConfig.getMaxFieldSize());\n            }\n\n            if (stmtConfig.isMaxRowsSet()) {\n                stmt.setMaxRows(stmtConfig.getMaxRows());\n            }\n\n            if (stmtConfig.isQueryTimeoutSet()) {\n                stmt.setQueryTimeout(stmtConfig.getQueryTimeout());\n            }\n        }\n    }\n\n    /**\n     * Fill the {@code PreparedStatement} replacement parameters with the\n     * given objects.\n     *\n     * @param stmt\n     *            PreparedStatement to fill\n     * @param params\n     *            Query replacement parameters; {@code null} is a valid\n     *            value to pass in.\n     * @throws SQLException\n     *             if a database access error occurs\n     */\n    public void fillStatement(final PreparedStatement stmt, final Object... params) throws SQLException {\n        ParameterMetaData pmd = null;\n        if (!pmdKnownBroken) {\n            try {\n                pmd = getParameterMetaData(stmt);\n                if (pmd == null) { // can be returned by implementations that don't support the method\n                    pmdKnownBroken = true;\n                }\n            } catch (final SQLFeatureNotSupportedException ex) {\n                pmdKnownBroken = true;\n            }\n            // TODO see DBUTILS-117: would it make sense to catch any other SQLEx types here?\n        }\n        fillStatement(stmt, pmd, params);\n    }\n\n    /**\n     * Fill the {@code PreparedStatement} replacement parameters with the\n     * given objects, and prefetched parameter metadata.\n     *\n     * @param stmt\n     *            PreparedStatement to fill\n     * @param pmd\n     *            Prefetched parameter metadata\n     * @param params\n     *            Query replacement parameters; {@code null} is a valid\n     *            value to pass in.\n     * @throws SQLException\n     *             if a database access error occurs\n     */\n    public void fillStatement(final PreparedStatement stmt, final ParameterMetaData pmd, final Object... params)\n            throws SQLException {\n\n        // check the parameter count, if we can\n        if (!pmdKnownBroken && pmd != null) {\n            final int stmtCount = pmd.getParameterCount();\n            final int paramsCount = params == null ? 0 : params.length;\n\n            if (stmtCount != paramsCount) {\n                throw new SQLException(\"Wrong number of parameters: expected \"\n                        + stmtCount + \", was given \" + paramsCount);\n            }\n        }\n\n        // nothing to do here\n        if (params == null) {\n            return;\n        }\n\n        CallableStatement call = null;\n        if (stmt instanceof CallableStatement) {\n            call = (CallableStatement) stmt;\n        }\n\n        for (int i = 0; i < params.length; i++) {\n            if (params[i] != null) {\n                if (call != null && params[i] instanceof OutParameter) {\n                    ((OutParameter<?>) params[i]).register(call, i + 1);\n                } else {\n                    stmt.setObject(i + 1, params[i]);\n                }\n            } else {\n                // VARCHAR works with many drivers regardless\n                // of the actual column type. Oddly, NULL and\n                // OTHER don't work with Oracle's drivers.\n                int sqlType = Types.VARCHAR;\n                if (!pmdKnownBroken) {\n                    // TODO see DBUTILS-117: does it make sense to catch SQLEx here?\n                    try {\n                        /*\n                         * It's not possible for pmdKnownBroken to change from true to false, (once true, always true) so pmd cannot be null here.\n                         */\n                        sqlType = pmd.getParameterType(i + 1);\n                    } catch (final SQLException e) {\n                        pmdKnownBroken = true;\n                    }\n                }\n                stmt.setNull(i + 1, sqlType);\n            }\n        }\n    }\n\n    /**\n     * Fill the {@code PreparedStatement} replacement parameters with the\n     * given object's bean property values.\n     *\n     * @param stmt\n     *            PreparedStatement to fill\n     * @param bean\n     *            a JavaBean object\n     * @param properties\n     *            an ordered array of properties; this gives the order to insert\n     *            values in the statement\n     * @throws SQLException\n     *             if a database access error occurs\n     */\n    public void fillStatementWithBean(final PreparedStatement stmt, final Object bean,\n            final PropertyDescriptor[] properties) throws SQLException {\n        final Object[] params = new Object[properties.length];\n        for (int i = 0; i < properties.length; i++) {\n            final PropertyDescriptor property = properties[i];\n            Object value = null;\n            final Method method = property.getReadMethod();\n            if (method == null) {\n                throw new IllegalArgumentException(\"No read method for bean property \" + bean.getClass() + \" \" + property.getName());\n            }\n            try {\n                value = method.invoke(bean);\n            } catch (final IllegalArgumentException e) {\n                throw new IllegalArgumentException(\"Couldn't invoke method with 0 arguments: \" + method, e);\n            } catch (final InvocationTargetException | IllegalAccessException e) {\n                throw new IllegalArgumentException(\"Couldn't invoke method: \" + method, e);\n            }\n            params[i] = value;\n        }\n        fillStatement(stmt, params);\n    }\n\n    /**\n     * Fill the {@code PreparedStatement} replacement parameters with the\n     * given object's bean property values.\n     *\n     * @param stmt\n     *            PreparedStatement to fill\n     * @param bean\n     *            A JavaBean object\n     * @param propertyNames\n     *            An ordered array of property names (these should match the\n     *            getters/setters); this gives the order to insert values in the\n     *            statement\n     * @throws SQLException\n     *             If a database access error occurs\n     */\n    public void fillStatementWithBean(final PreparedStatement stmt, final Object bean,\n            final String... propertyNames) throws SQLException {\n        PropertyDescriptor[] descriptors;\n        try {\n            descriptors = Introspector.getBeanInfo(bean.getClass()).getPropertyDescriptors();\n        } catch (final IntrospectionException e) {\n            throw new IllegalArgumentException(\"Couldn't introspect bean \" + bean.getClass().toString(), e);\n        }\n        final PropertyDescriptor[] sorted = new PropertyDescriptor[propertyNames.length];\n        for (int i = 0; i < propertyNames.length; i++) {\n            final String propertyName = propertyNames[i];\n            if (propertyName == null) {\n                throw new NullPointerException(\"propertyName can't be null: \" + i);\n            }\n            boolean found = false;\n            for (final PropertyDescriptor descriptor : descriptors) {\n                if (propertyName.equals(descriptor.getName())) {\n                    sorted[i] = descriptor;\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                throw new IllegalStateException(\"Couldn't find bean property: \" + bean.getClass() + \" \" + propertyName);\n            }\n        }\n        fillStatementWithBean(stmt, bean, sorted);\n    }\n\n    /**\n     * Returns the {@code DataSource} this runner is using.\n     * {@code QueryRunner} methods always call this method to get the\n     * {@code DataSource} so subclasses can provide specialized behavior.\n     *\n     * @return DataSource the runner is using\n     */\n    public DataSource getDataSource() {\n        return this.ds;\n    }\n\n    /**\n     * Gets the {@code ParameterMetaData} of the prepared statement, if the {@code pmdKnownBroken}\n     * is set to false.\n     *\n     * @param stmt\n     *            PreparedStatement of which to query the metadata of parameters\n     * @return the metadata of parameters\n     * @throws SQLException\n     *            if a database access error occurs\n     */\n    public ParameterMetaData getParameterMetaData(final PreparedStatement stmt) throws SQLException {\n        ParameterMetaData pmd = null;\n        if (!pmdKnownBroken) {\n            try {\n                pmd = stmt.getParameterMetaData();\n            } catch (final SQLFeatureNotSupportedException ex) {\n                pmdKnownBroken = true;\n            }\n        }\n        return pmd;\n    }\n\n    /**\n     * Some drivers don't support\n     * {@link ParameterMetaData#getParameterType(int) }; if\n     * {@code pmdKnownBroken} is set to true, we won't even try it; if\n     * false, we'll try it, and if it breaks, we'll remember not to use it\n     * again.\n     *\n     * @return the flag to skip (or not)\n     *         {@link ParameterMetaData#getParameterType(int) }\n     * @since 1.4\n     */\n    public boolean isPmdKnownBroken() {\n        return pmdKnownBroken;\n    }\n\n    /**\n     * Factory method that creates and initializes a\n     * {@code CallableStatement} object for the given SQL.\n     * {@code QueryRunner} methods always call this method to prepare\n     * callable statements for them. Subclasses can override this method to\n     * provide special CallableStatement configuration if needed. This\n     * implementation simply calls {@code conn.prepareCall(sql)}.\n     *\n     * @param conn\n     *            The {@code Connection} used to create the\n     *            {@code CallableStatement}\n     * @param sql\n     *            The SQL statement to prepare.\n     * @return An initialized {@code CallableStatement}.\n     * @throws SQLException\n     *             if a database access error occurs\n     */\n    protected CallableStatement prepareCall(final Connection conn, final String sql)\n            throws SQLException {\n\n        return conn.prepareCall(sql);\n    }\n\n    /**\n     * Factory method that creates and initializes a {@code Connection}\n     * object. {@code QueryRunner} methods always call this method to\n     * retrieve connections from its DataSource. Subclasses can override this\n     * method to provide special {@code Connection} configuration if\n     * needed. This implementation simply calls {@code ds.getConnection()}.\n     *\n     * @return An initialized {@code Connection}.\n     * @throws SQLException\n     *             if a database access error occurs\n     * @since 1.1\n     */\n    protected Connection prepareConnection() throws SQLException {\n        if (getDataSource() == null) {\n            throw new SQLException(\n                    \"QueryRunner requires a DataSource to be \"\n                            + \"invoked in this way, or a Connection should be passed in\");\n        }\n        return getDataSource().getConnection();\n    }\n\n    /**\n     * Factory method that creates and initializes a\n     * {@code PreparedStatement} object for the given SQL.\n     * {@code QueryRunner} methods always call this method to prepare\n     * statements for them. Subclasses can override this method to provide\n     * special PreparedStatement configuration if needed. This implementation\n     * simply calls {@code conn.prepareStatement(sql)}.\n     *\n     * @param conn\n     *            The {@code Connection} used to create the\n     *            {@code PreparedStatement}\n     * @param sql\n     *            The SQL statement to prepare.\n     * @return An initialized {@code PreparedStatement}.\n     * @throws SQLException\n     *             if a database access error occurs\n     */\n    protected PreparedStatement prepareStatement(final Connection conn, final String sql)\n            throws SQLException {\n\n        @SuppressWarnings(\"resource\")\n        final\n        PreparedStatement ps = conn.prepareStatement(sql);\n        try {\n            configureStatement(ps);\n        } catch (final SQLException e) {\n            ps.close();\n            throw e;\n        }\n        return ps;\n    }\n\n    /**\n     * Factory method that creates and initializes a\n     * {@code PreparedStatement} object for the given SQL.\n     * {@code QueryRunner} methods always call this method to prepare\n     * statements for them. Subclasses can override this method to provide\n     * special PreparedStatement configuration if needed. This implementation\n     * simply calls {@code conn.prepareStatement(sql, returnedKeys)}\n     * which will result in the ability to retrieve the automatically-generated\n     * keys from an auto_increment column.\n     *\n     * @param conn\n     *            The {@code Connection} used to create the\n     *            {@code PreparedStatement}\n     * @param sql\n     *            The SQL statement to prepare.\n     * @param returnedKeys\n     *            Flag indicating whether to return generated keys or not.\n     *\n     * @return An initialized {@code PreparedStatement}.\n     * @throws SQLException\n     *             if a database access error occurs\n     * @since 1.6\n     */\n    protected PreparedStatement prepareStatement(final Connection conn, final String sql, final int returnedKeys)\n            throws SQLException {\n\n        @SuppressWarnings(\"resource\")\n        final\n        PreparedStatement ps = conn.prepareStatement(sql, returnedKeys);\n        try {\n            configureStatement(ps);\n        } catch (final SQLException e) {\n            ps.close();\n            throw e;\n        }\n        return ps;\n    }\n\n    /**\n     * Throws a new exception with a more informative error message.\n     *\n     * @param cause\n     *            The original exception that will be chained to the new\n     *            exception when it's rethrown.\n     *\n     * @param sql\n     *            The query that was executing when the exception happened.\n     *\n     * @param params\n     *            The query replacement parameters; {@code null} is a valid\n     *            value to pass in.\n     *\n     * @throws SQLException\n     *             if a database access error occurs\n     */\n    protected void rethrow(final SQLException cause, final String sql, final Object... params)\n            throws SQLException {\n\n        String causeMessage = cause.getMessage();\n        if (causeMessage == null) {\n            causeMessage = \"\";\n        }\n        final StringBuilder msg = new StringBuilder(causeMessage);\n\n        msg.append(\" Query: \");\n        msg.append(sql);\n        msg.append(\" Parameters: \");\n\n        if (params == null) {\n            msg.append(\"[]\");\n        } else {\n            msg.append(Arrays.deepToString(params));\n        }\n\n        final SQLException e = new SQLException(msg.toString(), cause.getSQLState(),\n                cause.getErrorCode());\n        e.setNextException(cause);\n\n        throw e;\n    }\n\n    /**\n     * Wrap the {@code ResultSet} in a decorator before processing it. This\n     * implementation returns the {@code ResultSet} it is given without any\n     * decoration.\n     *\n     * <p>\n     * Often, the implementation of this method can be done in an anonymous\n     * inner class like this:\n     * </p>\n     *\n     * <pre>\n     * QueryRunner run = new QueryRunner() {\n     *     protected ResultSet wrap(ResultSet rs) {\n     *         return StringTrimmedResultSet.wrap(rs);\n     *     }\n     * };\n     * </pre>\n     *\n     * @param rs\n     *            The {@code ResultSet} to decorate; never\n     *            {@code null}.\n     * @return The {@code ResultSet} wrapped in some decorator.\n     */\n    protected ResultSet wrap(final ResultSet rs) {\n        return rs;\n    }\n\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private volatile boolean pmdKnownBroken;", "docstring": "\nIs {@link ParameterMetaData#getParameterType(int)} broken (have we tried\nit yet)?\n", "modifiers": "private volatile", "marker_annotations": [], "non_marker_annotations": ["private", "volatile"], "comments": [], "type": "boolean", "name": "pmdKnownBroken", "syntax_pass": true}, {"attribute_expression": "@Deprecated\n    protected final DataSource ds;", "docstring": "\nThe DataSource to retrieve connections from.\n@deprecated Access to this field should be through {@link #getDataSource()}.\n", "modifiers": "@Deprecated\n    protected final", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["protected", "final"], "comments": [], "type": "DataSource", "name": "ds", "syntax_pass": true}, {"attribute_expression": "private final StatementConfiguration stmtConfig;", "docstring": "\nConfiguration to use when preparing statements.\n", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "StatementConfiguration", "name": "stmtConfig", "syntax_pass": true}]}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/AbstractListHandler.java.AbstractListHandler", "name": "AbstractListHandler", "file_path": "src/main/java/org/apache/commons/dbutils/handlers/AbstractListHandler.java", "superclasses": "", "methods": ["[List<T>]handle(ResultSet)", "[T]handleRow(ResultSet)"], "method_uris": ["src/main/java/org/apache/commons/dbutils/handlers/AbstractListHandler.java.AbstractListHandler.[List<T>]handle(ResultSet)", "src/main/java/org/apache/commons/dbutils/handlers/AbstractListHandler.java.AbstractListHandler.[T]handleRow(ResultSet)"], "overrides": null, "attributes": [], "class_docstring": "\nAbstract class that simplify development of {@code ResultSetHandler}\nclasses that convert {@code ResultSet} into {@code List}.\n\n@param <T> the target List generic type\n@see org.apache.commons.dbutils.ResultSetHandler\n", "original_string": "public abstract class AbstractListHandler<T> implements ResultSetHandler<List<T>> {\n\n    /**\n     * Whole {@code ResultSet} handler. It produce {@code List} as\n     * result. To convert individual rows into Java objects it uses\n     * {@code handleRow(ResultSet)} method.\n     *\n     * @see #handleRow(ResultSet)\n     * @param resultSet {@code ResultSet} to process.\n     * @return a list of all rows in the result set\n     * @throws SQLException error occurs\n     */\n    @Override\n    public List<T> handle(final ResultSet resultSet) throws SQLException {\n        final List<T> rows = new ArrayList<>();\n        while (resultSet.next()) {\n            rows.add(this.handleRow(resultSet));\n        }\n        return rows;\n    }\n\n    /**\n     * Row handler. Method converts current row into some Java object.\n     *\n     * @param resultSet {@code ResultSet} to process.\n     * @return row processing result\n     * @throws SQLException error occurs\n     */\n    protected abstract T handleRow(ResultSet resultSet) throws SQLException;\n}", "super_interfaces": ["ResultSetHandler<List<T>>"], "fields": []}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java.AbstractKeyedHandler", "name": "AbstractKeyedHandler", "file_path": "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java", "superclasses": "", "methods": ["[K]createKey(ResultSet)", "[Map<K, V>]createMap()", "[V]createRow(ResultSet)", "[Map<K, V>]handle(ResultSet)"], "method_uris": ["src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java.AbstractKeyedHandler.[K]createKey(ResultSet)", "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java.AbstractKeyedHandler.[Map<K, V>]createMap()", "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java.AbstractKeyedHandler.[V]createRow(ResultSet)", "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java.AbstractKeyedHandler.[Map<K, V>]handle(ResultSet)"], "overrides": null, "attributes": [], "class_docstring": "\n<p>\n{@code ResultSetHandler} implementation that returns a Map.\n{@code ResultSet} rows are converted into objects (Vs) which are then stored\nin a Map under the given keys (Ks).\n</p>\n\n@param <K> the type of keys maintained by the returned map\n@param <V> the type of mapped values\n@see org.apache.commons.dbutils.ResultSetHandler\n@since 1.3\n", "original_string": "public abstract class AbstractKeyedHandler<K, V> implements ResultSetHandler<Map<K, V>> {\n\n    /**\n     * This factory method is called by {@code handle()} to retrieve the\n     * key value from the current {@code ResultSet} row.\n     * @param resultSet ResultSet to create a key from\n     * @return K from the configured key column name/index\n     * @throws SQLException if a database access error occurs\n     */\n    protected abstract K createKey(ResultSet resultSet) throws SQLException;\n\n    /**\n     * This factory method is called by {@code handle()} to create the Map\n     * to store records in.  This implementation returns a {@code HashMap}\n     * instance.\n     *\n     * @return Map to store records in\n     */\n    protected Map<K, V> createMap() {\n        return new HashMap<>();\n    }\n\n    /**\n     * This factory method is called by {@code handle()} to store the\n     * current {@code ResultSet} row in some object.\n     * @param resultSet ResultSet to create a row from\n     * @return V object created from the current row\n     * @throws SQLException if a database access error occurs\n     */\n    protected abstract V createRow(ResultSet resultSet) throws SQLException;\n\n    /**\n     * Convert each row's columns into a Map and store then\n     * in a {@code Map} under {@code ResultSet.getObject(key)} key.\n     * @param resultSet {@code ResultSet} to process.\n     * @return A {@code Map}, never {@code null}.\n     * @throws SQLException if a database access error occurs\n     * @see org.apache.commons.dbutils.ResultSetHandler#handle(java.sql.ResultSet)\n     */\n    @Override\n    public Map<K, V> handle(final ResultSet resultSet) throws SQLException {\n        final Map<K, V> result = createMap();\n        while (resultSet.next()) {\n            result.put(createKey(resultSet), createRow(resultSet));\n        }\n        return result;\n    }\n\n}", "super_interfaces": ["ResultSetHandler<Map<K, V>>"], "fields": []}]