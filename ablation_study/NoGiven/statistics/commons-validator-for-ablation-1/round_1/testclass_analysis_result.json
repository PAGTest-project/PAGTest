[{"file_path": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_copyFastHashMapTest.java", "testclass_name": "ValidatorUtils_copyFastHashMapTest", "dependencies": ["package org.apache.commons.validator.util;", "import org.apache.commons.collections.FastHashMap;", "import org.apache.commons.validator.Arg;", "import org.apache.commons.validator.Msg;", "import org.apache.commons.validator.Var;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ValidatorUtils_copyFastHashMapTest", "description": "Unit tests for the copyFastHashMap method in ValidatorUtils.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testCopyFastHashMap", "primary_tested": ["ValidatorUtils.copyFastHashMap(FastHashMap)"], "associated_methods": [], "external_dependencies": {"modules": ["FastHashMap", "Msg", "Arg", "Var", "ValidatorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the functionality of copying a FastHashMap using ValidatorUtils.copyFastHashMap method, ensuring that the copied map is a deep copy with the same contents but different references."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_replaceTest.java", "testclass_name": "ValidatorUtils_replaceTest", "dependencies": ["package org.apache.commons.validator.util;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ValidatorUtils_replaceTest", "description": "Unit tests for the replace method in ValidatorUtils.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testReplace_AllNonNull", "primary_tested": ["ValidatorUtils.replace(String,String,String)"], "external_dependencies": {"modules": ["ValidatorUtils"]}, "category": "unit", "description": "Tests the replace functionality of ValidatorUtils when all parameters are non-null."}, {"name": "testReplace_AnyNull", "primary_tested": ["ValidatorUtils.replace(String,String,String)"], "external_dependencies": {"modules": ["ValidatorUtils"]}, "category": "unit", "description": "Tests the replace functionality of ValidatorUtils when any of the parameters are null."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Field_getKeyTest.java", "testclass_name": "Field_getKeyTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Field_getKeyTest", "description": "Unit tests for the getKey method in the Field class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetKey_KeyIsNull", "primary_tested": ["Field.getKey()"], "external_dependencies": {"modules": ["Field"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getKey method when the key is null, ensuring it constructs the key correctly."}, {"name": "testGetKey_KeyIsNotNull", "primary_tested": ["Field.getKey()"], "external_dependencies": {"modules": ["Field"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the getKey method when the key is not null, ensuring it returns the existing key."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ValidatorResources_addConstantTest.java", "testclass_name": "ValidatorResources_addConstantTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.io.InputStream;", "import java.util.Map;"], "name": "ValidatorResources_addConstantTest", "description": "Unit tests for the addConstant method in ValidatorResources.", "class_members": {"variables": [{"name": "resources", "type": "ValidatorResources"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddConstant", "primary_tested": ["ValidatorResources.addConstant(String,String)"], "associated_methods": ["ValidatorResources.getConstants()"], "external_dependencies": {"modules": ["ValidatorResources", "Map"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a constant to ValidatorResources and verifies it is correctly stored."}, {"name": "testAddConstantWithDebugLogging", "primary_tested": ["ValidatorResources.addConstant(String,String)"], "associated_methods": ["ValidatorResources.getConstants()"], "external_dependencies": {"modules": ["ValidatorResources", "Map"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a constant to ValidatorResources with debug logging and verifies it is correctly stored."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Field_getVarValueTest.java", "testclass_name": "Field_getVarValueTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Field_getVarValueTest", "description": "Unit tests for the getVarValue method of the Field class.", "class_members": {"variables": [{"name": "field", "type": "Field"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetVarValueExists", "primary_tested": ["Field.getVarValue(String)"], "associated_methods": ["Field.addVar(String,String,String)"], "external_dependencies": {"modules": ["Field"], "class_members": [{"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getVarValue method when the variable exists in the Field."}, {"name": "testGetVarValueNotExists", "primary_tested": ["Field.getVarValue(String)"], "external_dependencies": {"modules": ["Field"], "class_members": [{"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getVarValue method when the variable does not exist in the Field."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareQuartersTest.java", "testclass_name": "DateValidator_compareQuartersTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Calendar;", "import java.util.Date;", "import java.util.TimeZone;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DateValidator_compareQuartersTest", "description": "Unit tests for comparing quarters using DateValidator.", "class_members": {"variables": [{"name": "dateValidator", "type": "DateValidator"}, {"name": "GMT", "type": "static final TimeZone"}, {"name": "EST", "type": "static final TimeZone"}], "methods": [{"name": "createDate", "signature": "Date createDate(TimeZone, int, int)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareQuarters", "primary_tested": ["DateValidator.compareQuarters(Date,Date,TimeZone)"], "associated_methods": ["DateValidator.compareQuarters(Date,Date,TimeZone,int)"], "external_dependencies": {"modules": ["DateValidator", "TimeZone", "Calendar", "Date"], "class_members": [{"name": "dateValidator", "type": "variable"}, {"name": "createDate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of quarters using DateValidator."}]}, {"file_path": "src/test/java/org/apache/commons/validator/GenericValidator_matchRegexpTest.java", "testclass_name": "GenericValidator_matchRegexpTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "GenericValidator_matchRegexpTest", "description": "Unit tests for the matchRegexp method in GenericValidator.", "test_cases": [{"name": "testMatchRegexp_NullRegexp", "primary_tested": ["GenericValidator.matchRegexp(String,String)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the matchRegexp method with a null regular expression."}, {"name": "testMatchRegexp_EmptyRegexp", "primary_tested": ["GenericValidator.matchRegexp(String,String)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the matchRegexp method with an empty regular expression."}, {"name": "testMatchRegexp_ValidMatch", "primary_tested": ["GenericValidator.matchRegexp(String,String)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the matchRegexp method with a valid match."}, {"name": "testMatchRegexp_InvalidMatch", "primary_tested": ["GenericValidator.matchRegexp(String,String)"], "external_dependencies": {"modules": ["GenericValidator"]}, "category": "unit", "description": "Tests the matchRegexp method with an invalid match."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Field_generateKeyTest.java", "testclass_name": "Field_generateKeyTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Field_generateKeyTest", "description": "Unit tests for the generateKey method in the Field class.", "class_members": {"variables": [{"name": "field", "type": "Field"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGenerateKeyIndexed", "primary_tested": ["Field.generateKey()"], "associated_methods": ["Field.setIndexedListProperty(String)", "Field.setProperty(String)", "Field.getKey()"], "external_dependencies": {"modules": ["Field"], "class_members": [{"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generateKey method when the field is indexed."}, {"name": "testGenerateKeyNotIndexed", "primary_tested": ["Field.generateKey()"], "associated_methods": ["Field.setProperty(String)", "Field.getKey()"], "external_dependencies": {"modules": ["Field"], "class_members": [{"name": "field", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generateKey method when the field is not indexed."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareWeeksTest.java", "testclass_name": "DateValidator_compareWeeksTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Calendar;", "import java.util.Date;", "import java.util.TimeZone;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DateValidator_compareWeeksTest", "description": "Unit tests for comparing weeks using DateValidator.", "class_members": {"variables": [{"name": "dateValidator", "type": "DateValidator"}, {"name": "GMT", "type": "static final TimeZone"}, {"name": "EST", "type": "static final TimeZone"}], "methods": [{"name": "createDate", "signature": "Date createDate(TimeZone, int, int)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareWeeks", "primary_tested": ["DateValidator.compareWeeks(Date,Date,TimeZone)"], "associated_methods": ["DateValidator_compareWeeksTest.createDate(TimeZone,int,int)"], "external_dependencies": {"modules": ["DateValidator", "TimeZone", "Calendar", "Date"], "class_members": [{"name": "dateValidator", "type": "variable"}, {"name": "GMT", "type": "variable"}, {"name": "createDate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of weeks using DateValidator."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_isValidTest.java", "testclass_name": "ModulusTenCheckDigit_isValidTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import org.apache.commons.validator.GenericValidator;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ModulusTenCheckDigit_isValidTest", "description": "Unit tests for the isValid method of ModulusTenCheckDigit class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIsValid_BlankOrNullCode", "primary_tested": ["ModulusTenCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["ModulusTenCheckDigit"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isValid method with null, empty, and blank strings."}, {"name": "testIsValid_NonDigitCheckDigit", "primary_tested": ["ModulusTenCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["ModulusTenCheckDigit"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isValid method with a string containing non-digit characters."}, {"name": "testIsValid_ValidCode", "primary_tested": ["ModulusTenCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["ModulusTenCheckDigit"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the isValid method with a valid string."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareYearsTest.java", "testclass_name": "DateValidator_compareYearsTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Calendar;", "import java.util.Date;", "import java.util.TimeZone;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DateValidator_compareYearsTest", "description": "Unit tests for comparing years using DateValidator.", "class_members": {"variables": [{"name": "dateValidator", "type": "DateValidator"}, {"name": "GMT", "type": "static final TimeZone"}, {"name": "EST", "type": "static final TimeZone"}], "methods": [{"name": "createDate", "signature": "Date createDate(TimeZone timeZone, int date, int time)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareYears", "primary_tested": ["DateValidator.compareYears(Date,Date,TimeZone)"], "associated_methods": ["DateValidator_compareYearsTest.createDate(TimeZone,int,int)"], "external_dependencies": {"modules": ["DateValidator", "TimeZone", "Calendar", "Date"], "class_members": [{"name": "dateValidator", "type": "variable"}, {"name": "GMT", "type": "variable"}, {"name": "EST", "type": "variable"}, {"name": "createDate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of years using different dates and time zones."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareMonthsTest.java", "testclass_name": "DateValidator_compareMonthsTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Calendar;", "import java.util.Date;", "import java.util.TimeZone;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DateValidator_compareMonthsTest", "description": "Unit tests for comparing months using DateValidator.", "class_members": {"variables": [{"name": "dateValidator", "type": "DateValidator"}, {"name": "GMT", "type": "static final TimeZone"}, {"name": "EST", "type": "static final TimeZone"}], "methods": [{"name": "createDate", "signature": "Date createDate(TimeZone, int, int)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareMonths", "primary_tested": ["DateValidator.compareMonths(Date,Date,TimeZone)"], "associated_methods": ["DateValidator_compareMonthsTest.createDate(TimeZone,int,int)"], "external_dependencies": {"modules": ["DateValidator", "TimeZone", "Calendar", "Date"], "class_members": [{"name": "dateValidator", "type": "variable"}, {"name": "GMT", "type": "variable"}, {"name": "EST", "type": "variable"}, {"name": "createDate", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of months using different dates and time zones."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Form_toStringTest.java", "testclass_name": "Form_toStringTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Form_toStringTest", "description": "Unit tests for the toString method of the Form class.", "class_members": {"variables": [{"name": "form", "type": "Form"}, {"name": "field1", "type": "Field"}, {"name": "field2", "type": "Field"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToStringWithFields", "primary_tested": ["Form.toString()"], "associated_methods": ["Field.toString()"], "external_dependencies": {"modules": ["Form", "Field"], "class_members": [{"name": "form", "type": "variable"}, {"name": "field1", "type": "variable"}, {"name": "field2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of the Form class when it contains fields."}, {"name": "testToStringWithoutFields", "primary_tested": ["Form.toString()"], "external_dependencies": {"modules": ["Form"], "class_members": [{"name": "form", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the toString method of the Form class when it does not contain any fields."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit_toStringTest.java", "testclass_name": "ModulusTenCheckDigit_toStringTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ModulusTenCheckDigit_toStringTest", "description": "Unit tests for the toString method of ModulusTenCheckDigit.", "class_members": {"variables": [{"name": "routine", "type": "ModulusTenCheckDigit"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToStringWithRightPosAndSumWeightedDigits", "primary_tested": ["ModulusTenCheckDigit.toString()"], "external_dependencies": {"modules": ["ModulusTenCheckDigit"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method with right position and sum weighted digits."}, {"name": "testToStringWithLeftPosAndNoSumWeightedDigits", "primary_tested": ["ModulusTenCheckDigit.toString()"], "external_dependencies": {"modules": ["ModulusTenCheckDigit"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the toString method with left position and no sum weighted digits."}, {"name": "testToStringWithEmptyPositionWeight", "primary_tested": ["ModulusTenCheckDigit.toString()"], "external_dependencies": {"modules": ["ModulusTenCheckDigit"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the toString method with an empty position weight."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/RegexValidator_toStringTest.java", "testclass_name": "RegexValidator_toStringTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "RegexValidator_toStringTest", "description": "Unit tests for the toString method of the RegexValidator class.", "class_members": {"variables": [{"name": "MULTIPLE_REGEX", "type": "static final String[]"}, {"name": "regexValidator", "type": "RegexValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToStringWithMultipleRegex", "primary_tested": ["RegexValidator.toString()"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "regexValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of RegexValidator with multiple regex patterns."}, {"name": "testToStringWithSingleRegex", "primary_tested": ["RegexValidator.toString()"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "regexValidator", "type": "variable"}]}, "category": "unit", "description": "Tests the toString method of RegexValidator with a single regex pattern."}, {"name": "testToStringWithEmptyRegex", "primary_tested": ["RegexValidator.toString()"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "regexValidator", "type": "variable"}]}, "category": "unit", "description": "Tests the toString method of RegexValidator with an empty regex pattern."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_copyMapTest.java", "testclass_name": "ValidatorUtils_copyMapTest", "dependencies": ["package org.apache.commons.validator.util;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.validator.Arg;", "import org.apache.commons.validator.Msg;", "import org.apache.commons.validator.Var;", "import org.junit.jupiter.api.Test;"], "name": "ValidatorUtils_copyMapTest", "description": "Unit tests for the copyMap method in ValidatorUtils, which tests the copying of maps containing different types of objects.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCopyMapWithMsg", "primary_tested": ["ValidatorUtils.copyMap(Map<String,Object>)"], "external_dependencies": {"modules": ["HashMap", "Map", "Msg", "ValidatorUtils"], "class_members": []}, "category": "unit", "description": "Tests the copying of a map containing a Msg object."}, {"name": "testCopyMapWithArg", "primary_tested": ["ValidatorUtils.copyMap(Map<String,Object>)"], "external_dependencies": {"modules": ["HashMap", "Map", "Arg", "ValidatorUtils"], "class_members": []}, "category": "unit", "description": "Tests the copying of a map containing an Arg object."}, {"name": "testCopyMapWithVar", "primary_tested": ["ValidatorUtils.copyMap(Map<String,Object>)"], "external_dependencies": {"modules": ["HashMap", "Map", "Var", "ValidatorUtils"], "class_members": []}, "category": "unit", "description": "Tests the copying of a map containing a Var object."}, {"name": "testCopyMapWithOtherTypes", "primary_tested": ["ValidatorUtils.copyMap(Map<String,Object>)"], "external_dependencies": {"modules": ["HashMap", "Map", "ValidatorUtils"], "class_members": []}, "category": "unit", "description": "Tests the copying of a map containing other types like String and Integer."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/CalendarValidator_adjustToTimeZoneTest.java", "testclass_name": "CalendarValidator_adjustToTimeZoneTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.Calendar;", "import java.util.TimeZone;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CalendarValidator_adjustToTimeZoneTest", "description": "Unit tests for the adjustToTimeZone method in CalendarValidator.", "class_members": {"variables": [{"name": "calValidator", "type": "CalendarValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAdjustToTimeZoneSameRules", "primary_tested": ["CalendarValidator.adjustToTimeZone(Calendar,TimeZone)"], "external_dependencies": {"modules": ["Calendar", "TimeZone"], "class_members": [{"name": "calValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the time zone remains the same when adjusted to the same time zone."}, {"name": "testAdjustToTimeZoneDifferentRules", "primary_tested": ["CalendarValidator.adjustToTimeZone(Calendar,TimeZone)"], "external_dependencies": {"modules": ["Calendar", "TimeZone"], "class_members": [{"name": "calValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the time zone is updated correctly and the date and time components remain the same when adjusted to a different time zone."}, {"name": "testAdjustToTimeZoneDifferentRulesWithDifferentDate", "primary_tested": ["CalendarValidator.adjustToTimeZone(Calendar,TimeZone)"], "external_dependencies": {"modules": ["Calendar", "TimeZone"], "class_members": [{"name": "calValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the time zone is updated correctly and the date and time components remain the same when adjusted to a different time zone with a specific date set."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/Flags_cloneTest.java", "testclass_name": "Flags_cloneTest", "dependencies": ["package org.apache.commons.validator.util;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Flags_cloneTest", "description": "Unit tests for the clone functionality of the Flags class.", "class_members": {"variables": [{"name": "flags", "type": "Flags"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCloneWithAllFlagsOn", "primary_tested": ["Flags.clone()"], "associated_methods": ["Flags.getFlags()", "Flags.equals(Object)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the Flags class when all flags are on."}, {"name": "testCloneWithAllFlagsOff", "primary_tested": ["Flags.clone()"], "associated_methods": ["Flags.turnOffAll()", "Flags.getFlags()", "Flags.equals(Object)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the Flags class when all flags are off."}, {"name": "testCloneWithMixedFlags", "primary_tested": ["Flags.clone()"], "associated_methods": ["Flags.turnOff(long)", "Flags.getFlags()", "Flags.equals(Object)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the Flags class when flags are mixed (some on, some off)."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/IBANValidator_getValidatorTest.java", "testclass_name": "IBANValidator_getValidatorTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IBANValidator_getValidatorTest", "description": "Unit tests for the IBANValidator's getValidator method.", "class_members": {"variables": [{"name": "validator", "type": "IBANValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetValidator_ValidCode", "primary_tested": ["IBANValidator.getValidator(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getValidator method with a valid IBAN code."}, {"name": "testGetValidator_NullCode", "primary_tested": ["IBANValidator.getValidator(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getValidator method with a null IBAN code."}, {"name": "testGetValidator_ShortCode", "primary_tested": ["IBANValidator.getValidator(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getValidator method with a short IBAN code."}, {"name": "testGetValidator_InvalidCode", "primary_tested": ["IBANValidator.getValidator(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getValidator method with an invalid IBAN code."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Var_cloneTest.java", "testclass_name": "Var_cloneTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Var_cloneTest", "description": "Unit tests for the clone functionality of the Var class.", "class_members": {"variables": [{"name": "var", "type": "Var"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCloneWithAllFieldsSet", "primary_tested": ["Var.clone()"], "associated_methods": ["Var.getName()", "Var.getValue()", "Var.getJsType()", "Var.isResource()", "Var.getBundle()"], "external_dependencies": {"modules": ["Var"], "class_members": [{"name": "var", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the Var class when all fields are set."}, {"name": "testCloneWithDefaultFields", "primary_tested": ["Var.clone()"], "associated_methods": ["Var.getName()", "Var.getValue()", "Var.getJsType()", "Var.isResource()", "Var.getBundle()"], "external_dependencies": {"modules": ["Var"], "class_members": [{"name": "var", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the Var class when no fields are set."}, {"name": "testCloneWithPartialFieldsSet", "primary_tested": ["Var.clone()"], "associated_methods": ["Var.getName()", "Var.getValue()", "Var.getJsType()", "Var.isResource()", "Var.getBundle()"], "external_dependencies": {"modules": ["Var"], "class_members": [{"name": "var", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clone functionality of the Var class when only some fields are set."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet4AddressTest.java", "testclass_name": "InetAddressValidator_isValidInet4AddressTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "InetAddressValidator_isValidInet4AddressTest", "description": "Unit tests for validating IPv4 addresses using InetAddressValidator.", "class_members": {"variables": [{"name": "validator", "type": "InetAddressValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValidInet4Address", "primary_tested": ["InetAddressValidator.isValidInet4Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of valid IPv4 addresses."}, {"name": "testInvalidInet4Address", "primary_tested": ["InetAddressValidator.isValidInet4Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of invalid IPv4 addresses."}, {"name": "testInvalidFormatInet4Address", "primary_tested": ["InetAddressValidator.isValidInet4Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of IPv4 addresses with invalid formats."}, {"name": "testLeadingZeroInet4Address", "primary_tested": ["InetAddressValidator.isValidInet4Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of IPv4 addresses with leading zeros."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DomainValidator_isValidLocalTldTest.java", "testclass_name": "DomainValidator_isValidLocalTldTest", "dependencies": ["package org.apache.commons.validator.routines;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "DomainValidator_isValidLocalTldTest", "description": "Unit tests for the isValidLocalTld method of DomainValidator.", "class_members": {"variables": [{"name": "validator", "type": "DomainValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsValidLocalTld_ValidLocalTld", "primary_tested": ["DomainValidator.isValidLocalTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValidLocalTld method with a valid local TLD."}, {"name": "testIsValidLocalTld_InvalidLocalTld", "primary_tested": ["DomainValidator.isValidLocalTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValidLocalTld method with an invalid local TLD."}, {"name": "testIsValidLocalTld_ValidLocalTldWithPlus", "primary_tested": ["DomainValidator.isValidLocalTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValidLocalTld method with a valid local TLD containing '+'."}, {"name": "testIsValidLocalTld_InvalidLocalTldWithMinus", "primary_tested": ["DomainValidator.isValidLocalTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValidLocalTld method with an invalid local TLD containing '-'."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Validator_getClassLoaderTest.java", "testclass_name": "Validator_getClassLoaderTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Validator_getClassLoaderTest", "description": "Unit tests for the getClassLoader method in the Validator class.", "class_members": {"variables": [{"name": "validator", "type": "Validator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetClassLoaderWithSetClassLoader", "primary_tested": ["Validator.getClassLoader()"], "associated_methods": ["Validator.setClassLoader(ClassLoader)"], "external_dependencies": {"modules": ["Validator", "ClassLoader"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getClassLoader method when a custom ClassLoader is set."}, {"name": "testGetClassLoaderWithContextClassLoader", "primary_tested": ["Validator.getClassLoader()"], "associated_methods": ["Validator.setUseContextClassLoader(boolean)", "Thread.currentThread().getContextClassLoader()"], "external_dependencies": {"modules": ["Validator", "Thread"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getClassLoader method when the context ClassLoader is used."}, {"name": "testGetClassLoaderWithDefaultClassLoader", "primary_tested": ["Validator.getClassLoader()"], "external_dependencies": {"modules": ["Validator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getClassLoader method with the default ClassLoader."}, {"name": "testGetClassLoaderWithNullContextClassLoader", "primary_tested": ["Validator.getClassLoader()"], "associated_methods": ["Validator.setUseContextClassLoader(boolean)", "Thread.currentThread().getContextClassLoader()", "Thread.currentThread().setContextClassLoader(ClassLoader)"], "external_dependencies": {"modules": ["Validator", "Thread"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getClassLoader method when the context ClassLoader is set to null."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_isValidTest.java", "testclass_name": "IBANCheckDigit_isValidTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IBANCheckDigit_isValidTest", "description": "Unit tests for the IBANCheckDigit isValid method.", "class_members": {"variables": [{"name": "checkDigit", "type": "IBANCheckDigit"}]}, "test_cases": [{"name": "testIsValid_ValidCode", "primary_tested": ["IBANCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["IBANCheckDigit"], "class_members": [{"name": "checkDigit", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method with a valid IBAN code."}, {"name": "testIsValid_NullCode", "primary_tested": ["IBANCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["IBANCheckDigit"], "class_members": [{"name": "checkDigit", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method with a null IBAN code."}, {"name": "testIsValid_ShortCode", "primary_tested": ["IBANCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["IBANCheckDigit"], "class_members": [{"name": "checkDigit", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method with a short IBAN code."}, {"name": "testIsValid_InvalidCheckDigits", "primary_tested": ["IBANCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["IBANCheckDigit"], "class_members": [{"name": "checkDigit", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method with invalid check digits in the IBAN code."}, {"name": "testIsValid_CheckDigitException", "primary_tested": ["IBANCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["IBANCheckDigit"], "class_members": [{"name": "checkDigit", "type": "variable"}]}, "category": "unit", "description": "Tests the isValid method with an IBAN code containing non-numeric characters in the check digits."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DateValidator_compareDatesTest.java", "testclass_name": "DateValidator_compareDatesTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.Calendar;", "import java.util.Date;", "import java.util.TimeZone;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DateValidator_compareDatesTest", "description": "Unit tests for comparing dates using DateValidator.", "class_members": {"variables": [{"name": "dateValidator", "type": "DateValidator"}, {"name": "GMT", "type": "static final TimeZone"}, {"name": "EST", "type": "static final TimeZone"}], "methods": [{"name": "createDate", "signature": "Date createDate(TimeZone, int, int, int, int, int, int)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareDates_SameDay", "primary_tested": ["DateValidator.compareDates(Date,Date,TimeZone)"], "external_dependencies": {"modules": ["DateValidator", "Calendar", "Date", "TimeZone"], "class_members": [{"name": "dateValidator", "type": "variable"}, {"name": "GMT", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests comparing dates on the same day but different times."}, {"name": "testCompareDates_DifferentDays", "primary_tested": ["DateValidator.compareDates(Date,Date,TimeZone)"], "external_dependencies": {"modules": ["DateValidator", "Calendar", "Date", "TimeZone"], "class_members": [{"name": "dateValidator", "type": "variable"}, {"name": "GMT", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests comparing dates on different days."}, {"name": "testCompareDates_DifferentTimeZones", "primary_tested": ["DateValidator.compareDates(Date,Date,TimeZone)"], "external_dependencies": {"modules": ["DateValidator", "Calendar", "Date", "TimeZone"], "class_members": [{"name": "dateValidator", "type": "variable"}, {"name": "GMT", "type": "variable"}, {"name": "EST", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests comparing dates on the same day but different time zones."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/Flags_toStringTest.java", "testclass_name": "Flags_toStringTest", "dependencies": ["package org.apache.commons.validator.util;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Flags_toStringTest", "description": "Unit tests for the toString method of the Flags class.", "class_members": {"variables": [{"name": "flags", "type": "Flags"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToStringAllFlagsOff", "primary_tested": ["Flags.toString()"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method when all flags are turned off."}, {"name": "testToStringAllFlagsOn", "primary_tested": ["Flags.toString()"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method when all flags are turned on."}, {"name": "testToStringSingleFlagOn", "primary_tested": ["Flags.toString()"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method when a single flag is turned on."}, {"name": "testToStringMultipleFlagsOn", "primary_tested": ["Flags.toString()"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method when multiple flags are turned on."}, {"name": "testToStringTurnOffFlag", "primary_tested": ["Flags.toString()"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method after turning off a specific flag."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/ISSNValidator_convertToEAN13Test.java", "testclass_name": "ISSNValidator_convertToEAN13Test", "dependencies": ["package org.apache.commons.validator.routines;", "import org.apache.commons.validator.routines.checkdigit.CheckDigitException;", "import org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ISSNValidator_convertToEAN13Test", "description": "Unit tests for the convertToEAN13 method in the ISSNValidator class.", "class_members": {"variables": [{"name": "validator", "type": "ISSNValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testConvertToEAN13Valid", "primary_tested": ["ISSNValidator.convertToEAN13(String,String)"], "external_dependencies": {"modules": ["ISSNValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the convertToEAN13 method with a valid ISSN and suffix, expecting a correct EAN13 conversion."}, {"name": "testConvertToEAN13InvalidSuffix", "primary_tested": ["ISSNValidator.convertToEAN13(String,String)"], "external_dependencies": {"modules": ["ISSNValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the convertToEAN13 method with an invalid suffix, expecting an IllegalArgumentException."}, {"name": "testConvertToEAN13InvalidISSN", "primary_tested": ["ISSNValidator.convertToEAN13(String,String)"], "external_dependencies": {"modules": ["ISSNValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the convertToEAN13 method with an invalid ISSN, expecting a null result."}, {"name": "testConvertToEAN13CheckDigitException", "primary_tested": ["ISSNValidator.convertToEAN13(String,String)"], "external_dependencies": {"modules": ["ISSNValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the convertToEAN13 method with an invalid EAN13 prefix, expecting a correct EAN13 conversion."}]}, {"file_path": "src/test/java/org/apache/commons/validator/Var_toStringTest.java", "testclass_name": "Var_toStringTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Var_toStringTest", "description": "Unit tests for the toString method of the Var class.", "class_members": {"variables": [{"name": "var", "type": "Var"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToStringWithResource", "primary_tested": ["Var.toString()"], "associated_methods": ["Var.setName(String)", "Var.setValue(String)", "Var.setResource(boolean)", "Var.setBundle(String)", "Var.setJsType(String)"], "external_dependencies": {"modules": ["Var"], "class_members": [{"name": "var", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of the Var class when the resource is set to true."}, {"name": "testToStringWithoutResource", "primary_tested": ["Var.toString()"], "associated_methods": ["Var.setName(String)", "Var.setValue(String)", "Var.setResource(boolean)", "Var.setJsType(String)"], "external_dependencies": {"modules": ["Var"], "class_members": [{"name": "var", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of the Var class when the resource is set to false."}, {"name": "testToStringWithNullValues", "primary_tested": ["Var.toString()"], "associated_methods": ["Var.setName(String)", "Var.setValue(String)", "Var.setResource(boolean)", "Var.setJsType(String)"], "external_dependencies": {"modules": ["Var"], "class_members": [{"name": "var", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of the Var class when the values are set to null."}, {"name": "testToStringWithEmptyValues", "primary_tested": ["Var.toString()"], "associated_methods": ["Var.setName(String)", "Var.setValue(String)", "Var.setResource(boolean)", "Var.setJsType(String)"], "external_dependencies": {"modules": ["Var"], "class_members": [{"name": "var", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of the Var class when the values are set to empty strings."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ValidatorResources_addFormSetTest.java", "testclass_name": "ValidatorResources_addFormSetTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ValidatorResources_addFormSetTest", "description": "Unit tests for the addFormSet method in ValidatorResources class.", "class_members": {"variables": [{"name": "resources", "type": "ValidatorResources"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddFormSetDefault", "primary_tested": ["ValidatorResources.addFormSet(FormSet)"], "external_dependencies": {"modules": ["ValidatorResources", "FormSet"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a default FormSet to ValidatorResources."}, {"name": "testAddFormSetWithLocale", "primary_tested": ["ValidatorResources.addFormSet(FormSet)"], "associated_methods": ["ValidatorResources.buildKey(FormSet)"], "external_dependencies": {"modules": ["ValidatorResources", "FormSet"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a FormSet with a specific locale to ValidatorResources."}, {"name": "testAddFormSetOverrideDefault", "primary_tested": ["ValidatorResources.addFormSet(FormSet)"], "external_dependencies": {"modules": ["ValidatorResources", "FormSet"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests overriding the default FormSet in ValidatorResources."}, {"name": "testAddFormSetOverrideWithLocale", "primary_tested": ["ValidatorResources.addFormSet(FormSet)"], "associated_methods": ["ValidatorResources.buildKey(FormSet)"], "external_dependencies": {"modules": ["ValidatorResources", "FormSet"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests overriding a FormSet with a specific locale in ValidatorResources."}, {"name": "testAddFormSetNoOverride", "primary_tested": ["ValidatorResources.addFormSet(FormSet)"], "associated_methods": ["ValidatorResources.buildKey(FormSet)"], "external_dependencies": {"modules": ["ValidatorResources", "FormSet"], "class_members": [{"name": "resources", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding multiple FormSets without overriding each other in ValidatorResources."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit_isValidTest.java", "testclass_name": "ISBNCheckDigit_isValidTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ISBNCheckDigit_isValidTest", "description": "Unit tests for the isValid method of the ISBNCheckDigit class.", "class_members": {"variables": [{"name": "routine", "type": "CheckDigit"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsValidWithNullCode", "primary_tested": ["CheckDigit.isValid(String)"], "external_dependencies": {"modules": ["CheckDigit"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a null code."}, {"name": "testIsValidWithValidISBN10", "primary_tested": ["CheckDigit.isValid(String)"], "external_dependencies": {"modules": ["CheckDigit"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a valid ISBN-10 code."}, {"name": "testIsValidWithInvalidISBN10", "primary_tested": ["CheckDigit.isValid(String)"], "external_dependencies": {"modules": ["CheckDigit"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with an invalid ISBN-10 code."}, {"name": "testIsValidWithValidISBN13", "primary_tested": ["CheckDigit.isValid(String)"], "external_dependencies": {"modules": ["CheckDigit"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a valid ISBN-13 code."}, {"name": "testIsValidWithInvalidISBN13", "primary_tested": ["CheckDigit.isValid(String)"], "external_dependencies": {"modules": ["CheckDigit"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with an invalid ISBN-13 code."}, {"name": "testIsValidWithInvalidLength", "primary_tested": ["CheckDigit.isValid(String)"], "external_dependencies": {"modules": ["CheckDigit"], "class_members": [{"name": "routine", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with codes of invalid lengths (9, 11, 12, and 14)."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ValidatorResults_getResultValueMapTest.java", "testclass_name": "ValidatorResults_getResultValueMapTest", "dependencies": ["package org.apache.commons.validator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ValidatorResults_getResultValueMapTest", "description": "Unit tests for the getResultValueMap method in ValidatorResults class.", "class_members": {"variables": [{"name": "validatorResults", "type": "ValidatorResults"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetResultValueMapWithNonBooleanResult", "primary_tested": ["ValidatorResults.getResultValueMap()"], "associated_methods": ["ValidatorResults.add(Field,String,boolean,Object)"], "external_dependencies": {"modules": ["ValidatorResults", "Field"], "class_members": [{"name": "validatorResults", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getResultValueMap method with a non-boolean result."}, {"name": "testGetResultValueMapWithBooleanResult", "primary_tested": ["ValidatorResults.getResultValueMap()"], "associated_methods": ["ValidatorResults.add(Field,String,boolean,Object)"], "external_dependencies": {"modules": ["ValidatorResults", "Field"], "class_members": [{"name": "validatorResults", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getResultValueMap method with a boolean result."}, {"name": "testGetResultValueMapWithNullResult", "primary_tested": ["ValidatorResults.getResultValueMap()"], "associated_methods": ["ValidatorResults.add(Field,String,boolean,Object)"], "external_dependencies": {"modules": ["ValidatorResults", "Field"], "class_members": [{"name": "validatorResults", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getResultValueMap method with a null result."}, {"name": "testGetResultValueMapWithMultipleResults", "primary_tested": ["ValidatorResults.getResultValueMap()"], "associated_methods": ["ValidatorResults.add(Field,String,boolean,Object)"], "external_dependencies": {"modules": ["ValidatorResults", "Field"], "class_members": [{"name": "validatorResults", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getResultValueMap method with multiple results."}, {"name": "testGetResultValueMapWithEmptyResults", "primary_tested": ["ValidatorResults.getResultValueMap()"], "external_dependencies": {"modules": ["ValidatorResults"], "class_members": [{"name": "validatorResults", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getResultValueMap method with empty results."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/InetAddressValidator_isValidInet6AddressTest.java", "testclass_name": "InetAddressValidator_isValidInet6AddressTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "InetAddressValidator_isValidInet6AddressTest", "description": "Unit tests for validating IPv6 addresses using InetAddressValidator.", "class_members": {"variables": [{"name": "validator", "type": "InetAddressValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValidInet6Address", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of valid IPv6 addresses."}, {"name": "testInvalidInet6Address", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of invalid IPv6 addresses."}, {"name": "testValidInet6AddressWithIPv4", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of valid IPv6 addresses containing embedded IPv4 addresses."}, {"name": "testInvalidInet6AddressWithIPv4", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of invalid IPv6 addresses containing invalid embedded IPv4 addresses."}, {"name": "testInvalidInet6AddressWithMultiplePrefixes", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of invalid IPv6 addresses with multiple prefixes."}, {"name": "testInvalidInet6AddressWithInvalidZoneId", "primary_tested": ["InetAddressValidator.isValidInet6Address(String)"], "external_dependencies": {"modules": ["InetAddressValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validation of invalid IPv6 addresses with invalid zone identifiers."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/ValidatorUtils_getValueAsStringTest.java", "testclass_name": "ValidatorUtils_getValueAsStringTest", "dependencies": ["package org.apache.commons.validator.util;", "import org.apache.commons.beanutils.PropertyUtils;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.Collections;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;"], "name": "ValidatorUtils_getValueAsStringTest", "description": "Unit tests for the ValidatorUtils.getValueAsString method, which retrieves property values as strings from a bean.", "class_members": {"nested_classes": [{"name": "TestBean", "description": "Internal test bean class with various properties for testing."}]}, "test_cases": [{"name": "testGetValueAsString_PropertyFound", "primary_tested": ["ValidatorUtils.getValueAsString(Object,String)"], "associated_methods": ["PropertyUtils.setProperty(Object,String,Object)"], "external_dependencies": {"modules": ["ValidatorUtils", "PropertyUtils"]}, "category": "unit", "description": "Tests the retrieval of a property value as a string when the property exists."}, {"name": "testGetValueAsString_PropertyNotFound", "primary_tested": ["ValidatorUtils.getValueAsString(Object,String)"], "external_dependencies": {"modules": ["ValidatorUtils"]}, "category": "unit", "description": "Tests the retrieval of a property value as a string when the property does not exist."}, {"name": "testGetValueAsString_PropertyIsNull", "primary_tested": ["ValidatorUtils.getValueAsString(Object,String)"], "associated_methods": ["PropertyUtils.setProperty(Object,String,Object)"], "external_dependencies": {"modules": ["ValidatorUtils", "PropertyUtils"]}, "category": "unit", "description": "Tests the retrieval of a property value as a string when the property is null."}, {"name": "testGetValueAsString_PropertyIsStringArray", "primary_tested": ["ValidatorUtils.getValueAsString(Object,String)"], "associated_methods": ["PropertyUtils.setProperty(Object,String,Object)"], "external_dependencies": {"modules": ["ValidatorUtils", "PropertyUtils"]}, "category": "unit", "description": "Tests the retrieval of a property value as a string when the property is a string array."}, {"name": "testGetValueAsString_PropertyIsEmptyStringArray", "primary_tested": ["ValidatorUtils.getValueAsString(Object,String)"], "associated_methods": ["PropertyUtils.setProperty(Object,String,Object)"], "external_dependencies": {"modules": ["ValidatorUtils", "PropertyUtils"]}, "category": "unit", "description": "Tests the retrieval of a property value as a string when the property is an empty string array."}, {"name": "testGetValueAsString_PropertyIsCollection", "primary_tested": ["ValidatorUtils.getValueAsString(Object,String)"], "associated_methods": ["PropertyUtils.setProperty(Object,String,Object)"], "external_dependencies": {"modules": ["ValidatorUtils", "PropertyUtils", "Collections"]}, "category": "unit", "description": "Tests the retrieval of a property value as a string when the property is a collection."}, {"name": "testGetValueAsString_PropertyIsEmptyCollection", "primary_tested": ["ValidatorUtils.getValueAsString(Object,String)"], "associated_methods": ["PropertyUtils.setProperty(Object,String,Object)"], "external_dependencies": {"modules": ["ValidatorUtils", "PropertyUtils", "Collections"]}, "category": "unit", "description": "Tests the retrieval of a property value as a string when the property is an empty collection."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit_calculateTest.java", "testclass_name": "IBANCheckDigit_calculateTest", "dependencies": ["package org.apache.commons.validator.routines.checkdigit;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IBANCheckDigit_calculateTest", "description": "Unit tests for the IBANCheckDigit class, focusing on the calculate and isValid methods.", "class_members": {"variables": [{"name": "ibanCheckDigit", "type": "IBANCheckDigit"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCalculateValidCode", "primary_tested": ["IBANCheckDigit.calculate(String)"], "external_dependencies": {"modules": ["IBANCheckDigit", "CheckDigitException"], "class_members": [{"name": "ibanCheckDigit", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the calculate method with a valid IBAN code."}, {"name": "testCalculateInvalidCodeLength", "primary_tested": ["IBANCheckDigit.calculate(String)"], "external_dependencies": {"modules": ["IBANCheckDigit", "CheckDigitException"], "class_members": [{"name": "ibanCheckDigit", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the calculate method with an invalid IBAN code length, expecting a CheckDigitException."}, {"name": "testCalculateNullCode", "primary_tested": ["IBANCheckDigit.calculate(String)"], "external_dependencies": {"modules": ["IBANCheckDigit", "CheckDigitException"], "class_members": [{"name": "ibanCheckDigit", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the calculate method with a null IBAN code, expecting a CheckDigitException."}, {"name": "testIsValidWithValidCode", "primary_tested": ["IBANCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["IBANCheckDigit"], "class_members": [{"name": "ibanCheckDigit", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a valid IBAN code."}, {"name": "testIsValidWithInvalidCodeLength", "primary_tested": ["IBANCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["IBANCheckDigit"], "class_members": [{"name": "ibanCheckDigit", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with an invalid IBAN code length."}, {"name": "testIsValidWithNullCode", "primary_tested": ["IBANCheckDigit.isValid(String)"], "external_dependencies": {"modules": ["IBANCheckDigit"], "class_members": [{"name": "ibanCheckDigit", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a null IBAN code."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/DomainValidator_isValidTldTest.java", "testclass_name": "DomainValidator_isValidTldTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "DomainValidator_isValidTldTest", "description": "Unit tests for the isValidTld method of the DomainValidator class.", "class_members": {"variables": [{"name": "validator", "type": "DomainValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsValidTld_LocalTld_Valid", "primary_tested": ["DomainValidator.isValidTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValidTld method with a valid local TLD."}, {"name": "testIsValidTld_LocalTld_Invalid", "primary_tested": ["DomainValidator.isValidTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValidTld method with an invalid local TLD."}, {"name": "testIsValidTld_GenericTld_Valid", "primary_tested": ["DomainValidator.isValidTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValidTld method with a valid generic TLD."}, {"name": "testIsValidTld_GenericTld_Invalid", "primary_tested": ["DomainValidator.isValidTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValidTld method with an invalid generic TLD."}, {"name": "testIsValidTld_CountryCodeTld_Valid", "primary_tested": ["DomainValidator.isValidTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValidTld method with a valid country code TLD."}, {"name": "testIsValidTld_CountryCodeTld_Invalid", "primary_tested": ["DomainValidator.isValidTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValidTld method with an invalid country code TLD."}, {"name": "testIsValidTld_InfrastructureTld_Valid", "primary_tested": ["DomainValidator.isValidTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValidTld method with a valid infrastructure TLD."}, {"name": "testIsValidTld_InfrastructureTld_Invalid", "primary_tested": ["DomainValidator.isValidTld(String)"], "external_dependencies": {"modules": ["DomainValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValidTld method with an invalid infrastructure TLD."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/RegexValidator_validateTest.java", "testclass_name": "RegexValidator_validateTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.regex.Pattern;"], "name": "RegexValidator_validateTest", "description": "Unit tests for the RegexValidator class, focusing on the validate method and related functionalities.", "class_members": {"variables": [{"name": "MULTIPLE_REGEX", "type": "static final String[]"}, {"name": "regexValidator", "type": "RegexValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValidateNullValue", "primary_tested": ["RegexValidator.validate(String)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "regexValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method with a null value."}, {"name": "testValidateSingleGroupMatch", "primary_tested": ["RegexValidator.validate(String)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "regexValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method with a single group match."}, {"name": "testValidateMultipleGroupMatch", "primary_tested": ["RegexValidator.validate(String)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "regexValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method with a multiple group match."}, {"name": "testValidateNoMatch", "primary_tested": ["RegexValidator.validate(String)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "regexValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method with no match."}, {"name": "testValidateMultipleGroupsConcatenation", "primary_tested": ["RegexValidator.validate(String)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "regexValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method with multiple groups concatenation."}, {"name": "testValidateWithIsValid", "primary_tested": ["RegexValidator.validate(String)", "RegexValidator.isValid(String)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "regexValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method in conjunction with the isValid method."}, {"name": "testValidateWithMatch", "primary_tested": ["RegexValidator.validate(String)", "RegexValidator.match(String)"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "regexValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method in conjunction with the match method."}, {"name": "testValidateToString", "primary_tested": ["RegexValidator.validate(String)", "RegexValidator.toString()"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "regexValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the validate method and checks the toString output."}, {"name": "testGetPatterns", "primary_tested": ["RegexValidator.getPatterns()"], "external_dependencies": {"modules": ["RegexValidator"], "class_members": [{"name": "regexValidator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getPatterns method."}]}, {"file_path": "src/test/java/org/apache/commons/validator/util/Flags_equalsTest.java", "testclass_name": "Flags_equalsTest", "dependencies": ["package org.apache.commons.validator.util;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "Flags_equalsTest", "description": "Unit tests for the equals method in the Flags class.", "class_members": {"variables": [{"name": "flags1", "type": "Flags"}, {"name": "flags2", "type": "Flags"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameObject", "primary_tested": ["Flags.equals(Object)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same object."}, {"name": "testEqualsDifferentObjectType", "primary_tested": ["Flags.equals(Object)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with a different object type."}, {"name": "testEqualsDifferentFlags", "primary_tested": ["Flags.equals(Object)"], "associated_methods": ["Flags.turnOff(long)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags1", "type": "variable"}, {"name": "flags2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing different flags."}, {"name": "testEqualsSameFlags", "primary_tested": ["Flags.equals(Object)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags1", "type": "variable"}, {"name": "flags2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same flags."}, {"name": "testEqualsAfterTurnOn", "primary_tested": ["Flags.equals(Object)"], "associated_methods": ["Flags.turnOff(long)", "Flags.turnOn(long)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags1", "type": "variable"}, {"name": "flags2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method after turning on a flag."}, {"name": "testEqualsAfterTurnOff", "primary_tested": ["Flags.equals(Object)"], "associated_methods": ["Flags.turnOff(long)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags1", "type": "variable"}, {"name": "flags2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method after turning off a flag."}, {"name": "testEqualsHashCodeConsistency", "primary_tested": ["Flags.equals(Object)", "Flags.hashCode()"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags1", "type": "variable"}, {"name": "flags2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the consistency between equals and hashCode methods."}, {"name": "testEqualsStateVerification", "primary_tested": ["Flags.equals(Object)", "Flags.isOn(long)"], "external_dependencies": {"modules": ["Flags"], "class_members": [{"name": "flags1", "type": "variable"}, {"name": "flags2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with state verification using isOn method."}]}, {"file_path": "src/test/java/org/apache/commons/validator/ValidatorResults_addTest.java", "testclass_name": "ValidatorResults_addTest", "dependencies": ["package org.apache.commons.validator;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ValidatorResults_addTest", "description": "Unit tests for the add method of ValidatorResults class.", "class_members": {"variables": [{"name": "validatorResults", "type": "ValidatorResults"}, {"name": "field", "type": "Field"}, {"name": "VALIDATOR_NAME", "type": "static final String"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddNewValidatorResult", "primary_tested": ["ValidatorResults.add(Field,String,boolean,Object)"], "associated_methods": ["ValidatorResults.getValidatorResult(String)", "ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)", "ValidatorResult.getResult(String)"], "external_dependencies": {"modules": ["ValidatorResults", "Field", "ValidatorResult"], "class_members": [{"name": "validatorResults", "type": "variable"}, {"name": "field", "type": "variable"}, {"name": "VALIDATOR_NAME", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding a new validator result to ValidatorResults and verifies its properties."}, {"name": "testAddExistingValidatorResult", "primary_tested": ["ValidatorResults.add(Field,String,boolean,Object)"], "associated_methods": ["ValidatorResults.getValidatorResult(String)", "ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)", "ValidatorResult.getResult(String)"], "external_dependencies": {"modules": ["ValidatorResults", "Field", "ValidatorResult"], "class_members": [{"name": "validatorResults", "type": "variable"}, {"name": "field", "type": "variable"}, {"name": "VALIDATOR_NAME", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding multiple validator results to ValidatorResults and verifies their properties."}, {"name": "testClearBeforeAdd", "primary_tested": ["ValidatorResults.clear()"], "associated_methods": ["ValidatorResults.getValidatorResult(String)"], "external_dependencies": {"modules": ["ValidatorResults", "Field"], "class_members": [{"name": "validatorResults", "type": "variable"}, {"name": "field", "type": "variable"}, {"name": "VALIDATOR_NAME", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests clearing the ValidatorResults before adding a new validator result and verifies the results."}, {"name": "testMergeBeforeAdd", "primary_tested": ["ValidatorResults.merge(ValidatorResults)"], "associated_methods": ["ValidatorResults.getValidatorResult(String)", "ValidatorResult.containsAction(String)", "ValidatorResult.isValid(String)", "ValidatorResult.getResult(String)"], "external_dependencies": {"modules": ["ValidatorResults", "Field", "ValidatorResult"], "class_members": [{"name": "validatorResults", "type": "variable"}, {"name": "field", "type": "variable"}, {"name": "VALIDATOR_NAME", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests merging another ValidatorResults into the current one before adding a new validator result and verifies the results."}, {"name": "testIsEmptyAfterAdd", "primary_tested": ["ValidatorResults.isEmpty()"], "associated_methods": ["ValidatorResults.add(Field,String,boolean,Object)"], "external_dependencies": {"modules": ["ValidatorResults", "Field"], "class_members": [{"name": "validatorResults", "type": "variable"}, {"name": "field", "type": "variable"}, {"name": "VALIDATOR_NAME", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests checking if ValidatorResults is empty after adding a new validator result."}, {"name": "testGetPropertyNamesAfterAdd", "primary_tested": ["ValidatorResults.getPropertyNames()"], "associated_methods": ["ValidatorResults.add(Field,String,boolean,Object)"], "external_dependencies": {"modules": ["ValidatorResults", "Field"], "class_members": [{"name": "validatorResults", "type": "variable"}, {"name": "field", "type": "variable"}, {"name": "VALIDATOR_NAME", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests getting property names from ValidatorResults after adding a new validator result."}]}, {"file_path": "src/test/java/org/apache/commons/validator/routines/IBANValidator_isValidTest.java", "testclass_name": "IBANValidator_isValidTest", "dependencies": ["package org.apache.commons.validator.routines;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeAll;", "import org.junit.jupiter.api.Test;"], "name": "IBANValidator_isValidTest", "description": "Unit tests for the IBANValidator isValid method, covering various scenarios including valid and invalid IBANs.", "class_members": {"variables": [{"name": "validator", "type": "IBANValidator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsValidWithValidIBAN", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a valid IBAN."}, {"name": "testIsValidWithInvalidLength", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with an IBAN of invalid length."}, {"name": "testIsValidWithInvalidFormat", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with an IBAN containing invalid characters."}, {"name": "testIsValidWithNullCode", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a null IBAN."}, {"name": "testIsValidWithEmptyCode", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with an empty IBAN."}, {"name": "testIsValidWithUnknownCountryCode", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with an IBAN containing an unknown country code."}, {"name": "testIsValidWithLowercaseCountryCode", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with an IBAN containing a lowercase country code."}, {"name": "testIsValidWithInvalidCheckDigit", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with an IBAN containing an invalid check digit."}, {"name": "testIsValidWithValidIBANForOtherCountryCode", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a valid IBAN for a different country code."}, {"name": "testIsValidWithValidIBANForMultipleCountryCodes", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a valid IBAN for multiple country codes."}, {"name": "testIsValidWithValidIBANForShortestLength", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a valid IBAN of the shortest length."}, {"name": "testIsValidWithValidIBANForLongestLength", "primary_tested": ["IBANValidator.isValid(String)"], "external_dependencies": {"modules": ["IBANValidator"], "class_members": [{"name": "validator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isValid method with a valid IBAN of the longest length."}]}]