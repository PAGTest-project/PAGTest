[{"strategy": "generate", "code": "\npackage org.apache.commons.validator.routines;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class RegexValidator_validateTest {\n\n    private static final String[] MULTIPLE_REGEX = {\n        \"^([A-Z]{2})$\", // Matches two uppercase letters\n        \"^([0-9]{3})$\", // Matches three digits\n        \"^([a-z]{4})$\"  // Matches four lowercase letters\n    };\n\n    private RegexValidator regexValidator;\n\n    @BeforeEach\n    public void setUp() {\n        regexValidator = new RegexValidator(MULTIPLE_REGEX);\n    }\n\n    @Test\n    public void testValidateNullValue() {\n        assertNull(regexValidator.validate(null));\n    }\n\n    @Test\n    public void testValidateSingleGroupMatch() {\n        assertEquals(\"AB\", regexValidator.validate(\"AB\"));\n    }\n\n    @Test\n    public void testValidateMultipleGroupMatch() {\n        assertEquals(\"123\", regexValidator.validate(\"123\"));\n    }\n\n    @Test\n    public void testValidateNoMatch() {\n        assertNull(regexValidator.validate(\"XYZ\"));\n    }\n\n    @Test\n    public void testValidateMultipleGroupsConcatenation() {\n        assertEquals(\"abcd\", regexValidator.validate(\"abcd\"));\n    }\n\n    @Test\n    public void testValidateWithIsValid() {\n        String value = \"AB\";\n        assertTrue(regexValidator.isValid(value));\n        assertEquals(\"AB\", regexValidator.validate(value));\n    }\n\n    @Test\n    public void testValidateWithMatch() {\n        String value = \"123\";\n        String[] matchedGroups = regexValidator.match(value);\n        assertNotNull(matchedGroups);\n        assertEquals(1, matchedGroups.length);\n        assertEquals(\"123\", matchedGroups[0]);\n        assertEquals(\"123\", regexValidator.validate(value));\n    }\n\n    @Test\n    public void testValidateToString() {\n        String value = \"abcd\";\n        regexValidator.validate(value);\n        String validatorString = regexValidator.toString();\n        assertTrue(validatorString.contains(\"^([A-Z]{2})$\"));\n        assertTrue(validatorString.contains(\"^([0-9]{3})$\"));\n        assertTrue(validatorString.contains(\"^([a-z]{4})$\"));\n    }\n\n    @Test\n    public void testGetPatterns() {\n        assertNotSame(regexValidator.getPatterns(), regexValidator.getPatterns());\n        Pattern[] patterns = regexValidator.getPatterns();\n        assertEquals(\"^([A-Z]{2})$\", patterns[0].pattern());\n        assertEquals(\"^([0-9]{3})$\", patterns[1].pattern());\n        assertEquals(\"^([a-z]{4})$\", patterns[2].pattern());\n    }\n}\n"}]