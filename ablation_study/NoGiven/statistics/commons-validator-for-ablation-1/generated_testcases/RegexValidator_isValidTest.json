[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class RegexValidator_isValidTest {\n\n    private static final String REGEX_1 = \"^[a-z]+$\";\n    private static final String REGEX_2 = \"^[A-Z]+$\";\n    private static final String REGEX_3 = \"^[0-9]+$\";\n    private static final String[] MULTIPLE_REGEX = {REGEX_1, REGEX_2, REGEX_3};\n\n    private RegexValidator multipleRegexValidator;\n    private RegexValidator singleRegexValidator1;\n    private RegexValidator singleRegexValidator2;\n    private RegexValidator singleRegexValidator3;\n\n    @BeforeEach\n    public void setUp() {\n        multipleRegexValidator = new RegexValidator(MULTIPLE_REGEX);\n        singleRegexValidator1 = new RegexValidator(REGEX_1);\n        singleRegexValidator2 = new RegexValidator(REGEX_2);\n        singleRegexValidator3 = new RegexValidator(REGEX_3);\n    }\n\n    @Test\n    public void testIsValidWithNullValue() {\n        assertFalse(multipleRegexValidator.isValid(null));\n    }\n\n    @Test\n    public void testIsValidWithMatchingValue() {\n        assertTrue(multipleRegexValidator.isValid(\"abc\"));\n        assertTrue(multipleRegexValidator.isValid(\"ABC\"));\n        assertTrue(multipleRegexValidator.isValid(\"123\"));\n    }\n\n    @Test\n    public void testIsValidWithNonMatchingValue() {\n        assertFalse(multipleRegexValidator.isValid(\"abc123\"));\n        assertFalse(multipleRegexValidator.isValid(\"ABC123\"));\n        assertFalse(multipleRegexValidator.isValid(\"abcABC\"));\n    }\n\n    @Test\n    public void testIsValidWithSingleRegexValidators() {\n        assertTrue(singleRegexValidator1.isValid(\"abc\"));\n        assertFalse(singleRegexValidator1.isValid(\"ABC\"));\n        assertFalse(singleRegexValidator1.isValid(\"123\"));\n\n        assertFalse(singleRegexValidator2.isValid(\"abc\"));\n        assertTrue(singleRegexValidator2.isValid(\"ABC\"));\n        assertFalse(singleRegexValidator2.isValid(\"123\"));\n\n        assertFalse(singleRegexValidator3.isValid(\"abc\"));\n        assertFalse(singleRegexValidator3.isValid(\"ABC\"));\n        assertTrue(singleRegexValidator3.isValid(\"123\"));\n    }\n\n    @Test\n    public void testValidateWithNullValue() {\n        assertNull(multipleRegexValidator.validate(null));\n    }\n\n    @Test\n    public void testValidateWithMatchingValue() {\n        assertEquals(\"abc\", multipleRegexValidator.validate(\"abc\"));\n        assertEquals(\"ABC\", multipleRegexValidator.validate(\"ABC\"));\n        assertEquals(\"123\", multipleRegexValidator.validate(\"123\"));\n    }\n\n    @Test\n    public void testValidateWithNonMatchingValue() {\n        assertNull(multipleRegexValidator.validate(\"abc123\"));\n        assertNull(multipleRegexValidator.validate(\"ABC123\"));\n        assertNull(multipleRegexValidator.validate(\"abcABC\"));\n    }\n\n    @Test\n    public void testMatchWithNullValue() {\n        assertNull(multipleRegexValidator.match(null));\n    }\n\n    @Test\n    public void testMatchWithMatchingValue() {\n        assertArrayEquals(new String[]{\"abc\"}, multipleRegexValidator.match(\"abc\"));\n        assertArrayEquals(new String[]{\"ABC\"}, multipleRegexValidator.match(\"ABC\"));\n        assertArrayEquals(new String[]{\"123\"}, multipleRegexValidator.match(\"123\"));\n    }\n\n    @Test\n    public void testMatchWithNonMatchingValue() {\n        assertNull(multipleRegexValidator.match(\"abc123\"));\n        assertNull(multipleRegexValidator.match(\"ABC123\"));\n        assertNull(multipleRegexValidator.match(\"abcABC\"));\n    }\n\n    private void checkArray(String message, String[] expected, String[] actual) {\n        if (expected == null) {\n            assertNull(actual, message);\n        } else {\n            assertArrayEquals(expected, actual, message);\n        }\n    }\n}\n"}]