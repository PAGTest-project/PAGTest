[{"strategy": "generate", "code": "\npackage org.apache.commons.validator.routines;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport org.apache.commons.validator.routines.checkdigit.CheckDigit;\nimport org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CodeValidator_validateTest {\n\n    private CodeValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        validator = new CodeValidator((String) null, -1, -1, (CheckDigit) null);\n    }\n\n    @Test\n    public void testValidateNullInput() {\n        assertNull(validator.validate(null), \"Null input should return null\");\n    }\n\n    @Test\n    public void testValidateEmptyInput() {\n        assertNull(validator.validate(\"\"), \"Empty input should return null\");\n    }\n\n    @Test\n    public void testValidateValidCodeWithoutRegexValidator() {\n        final String validCode = \"1234567890123\";\n        assertEquals(validCode, validator.validate(validCode), \"Valid code should return the code\");\n    }\n\n    @Test\n    public void testValidateInvalidCodeWithoutRegexValidator() {\n        final String invalidCode = \"12345\";\n        assertEquals(invalidCode, validator.validate(invalidCode), \"Invalid code should return the code\");\n    }\n\n    @Test\n    public void testValidateValidCodeWithRegexValidator() {\n        RegexValidator regexValidator = new RegexValidator(\"\\\\d{13}\");\n        validator = new CodeValidator(regexValidator, 13, 13, (CheckDigit) null);\n        final String validCode = \"1234567890123\";\n        assertEquals(validCode, validator.validate(validCode), \"Valid code should return the code\");\n    }\n\n    @Test\n    public void testValidateInvalidCodeWithRegexValidator() {\n        RegexValidator regexValidator = new RegexValidator(\"\\\\d{13}\");\n        validator = new CodeValidator(regexValidator, 13, 13, (CheckDigit) null);\n        final String invalidCode = \"12345\";\n        assertNull(validator.validate(invalidCode), \"Invalid code should return null\");\n    }\n\n    @Test\n    public void testValidateValidCodeWithCheckDigit() {\n        validator = new CodeValidator((String) null, 13, EAN13CheckDigit.EAN13_CHECK_DIGIT);\n        final String validCode = \"9781930110991\";\n        assertEquals(validCode, validator.validate(validCode), \"Valid code should return the code\");\n    }\n\n    @Test\n    public void testValidateInvalidCodeWithCheckDigit() {\n        validator = new CodeValidator((String) null, 13, EAN13CheckDigit.EAN13_CHECK_DIGIT);\n        final String invalidCode = \"9781930110992\";\n        assertNull(validator.validate(invalidCode), \"Invalid code should return null\");\n    }\n\n    @Test\n    public void testValidateValidCodeWithRegexValidatorAndCheckDigit() {\n        RegexValidator regexValidator = new RegexValidator(\"\\\\d{13}\");\n        validator = new CodeValidator(regexValidator, 13, 13, EAN13CheckDigit.EAN13_CHECK_DIGIT);\n        final String validCode = \"9781930110991\";\n        assertEquals(validCode, validator.validate(validCode), \"Valid code should return the code\");\n    }\n\n    @Test\n    public void testValidateInvalidCodeWithRegexValidatorAndCheckDigit() {\n        RegexValidator regexValidator = new RegexValidator(\"\\\\d{13}\");\n        validator = new CodeValidator(regexValidator, 13, 13, EAN13CheckDigit.EAN13_CHECK_DIGIT);\n        final String invalidCode = \"9781930110992\";\n        assertNull(validator.validate(invalidCode), \"Invalid code should return null\");\n    }\n}\n"}]