[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DomainValidator_getInstanceTest {\n\n    private DomainValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        validator = DomainValidator.getInstance(false);\n    }\n\n    @Test\n    public void testGetInstanceWithLocalAllowed() {\n        DomainValidator localValidator = DomainValidator.getInstance(true);\n        assertNotNull(localValidator);\n        assertTrue(localValidator.isAllowLocal());\n    }\n\n    @Test\n    public void testGetInstanceWithLocalNotAllowed() {\n        DomainValidator nonLocalValidator = DomainValidator.getInstance(false);\n        assertNotNull(nonLocalValidator);\n        assertFalse(nonLocalValidator.isAllowLocal());\n    }\n\n    @Test\n    public void testValidDomains() {\n        assertTrue(validator.isValid(\"apache.org\"), \"apache.org should validate\");\n        assertTrue(validator.isValid(\"www.google.com\"), \"www.google.com should validate\");\n        assertTrue(validator.isValid(\"test-domain.com\"), \"test-domain.com should validate\");\n        assertTrue(validator.isValid(\"test---domain.com\"), \"test---domain.com should validate\");\n        assertTrue(validator.isValid(\"test-d-o-m-ain.com\"), \"test-d-o-m-ain.com should validate\");\n        assertTrue(validator.isValid(\"as.uk\"), \"two-letter domain label should validate\");\n        assertTrue(validator.isValid(\"ApAchE.Org\"), \"case-insensitive ApAchE.Org should validate\");\n        assertTrue(validator.isValid(\"z.com\"), \"single-character domain label should validate\");\n        assertTrue(validator.isValid(\"i.have.an-example.domain.name\"), \"i.have.an-example.domain.name should validate\");\n    }\n\n    @Test\n    public void testInvalidDomains() {\n        assertFalse(validator.isValid(\"invalid..domain.com\"), \"invalid..domain.com should not validate\");\n        assertFalse(validator.isValid(\"invalid-.domain.com\"), \"invalid-.domain.com should not validate\");\n        assertFalse(validator.isValid(\"-invalid.domain.com\"), \"-invalid.domain.com should not validate\");\n        assertFalse(validator.isValid(\"invalid.domain-.com\"), \"invalid.domain-.com should not validate\");\n        assertFalse(validator.isValid(\"invalid.domain.com-\"), \"invalid.domain.com- should not validate\");\n        assertFalse(validator.isValid(\"invalid.domain.com.\"), \"invalid.domain.com. should not validate\");\n        assertFalse(validator.isValid(\"invalid.domain.com..\"), \"invalid.domain.com.. should not validate\");\n    }\n\n    @Test\n    public void testLocalDomains() {\n        DomainValidator localValidator = DomainValidator.getInstance(true);\n        assertTrue(localValidator.isValid(\"localhost\"), \"localhost should validate when local is allowed\");\n        assertTrue(localValidator.isValid(\"localdomain\"), \"localdomain should validate when local is allowed\");\n        assertFalse(validator.isValid(\"localhost\"), \"localhost should not validate when local is not allowed\");\n        assertFalse(validator.isValid(\"localdomain\"), \"localdomain should not validate when local is not allowed\");\n    }\n\n    @Test\n    public void testTLDOverride() {\n        DomainValidator.updateTLDOverride(DomainValidator.ArrayType.GENERIC_PLUS, \"example\");\n        DomainValidator customValidator = DomainValidator.getInstance(false);\n        assertTrue(customValidator.isValid(\"test.example\"), \"test.example should validate after TLD override\");\n    }\n}\n"}]