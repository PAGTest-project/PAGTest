[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.apache.commons.validator.routines.checkdigit.CheckDigitException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ISSNValidator_extractFromEAN13Test {\n\n    private ISSNValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        validator = new ISSNValidator();\n    }\n\n    @Test\n    public void testExtractFromEAN13Valid() {\n        String ean13 = \"9771234567000\";\n        String expectedISSN = \"12345670\";\n        assertEquals(expectedISSN, validator.extractFromEAN13(ean13));\n    }\n\n    @Test\n    public void testExtractFromEAN13InvalidLength() {\n        String ean13 = \"977123456700\";\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            validator.extractFromEAN13(ean13);\n        });\n        assertTrue(exception.getMessage().contains(\"Invalid length\"));\n    }\n\n    @Test\n    public void testExtractFromEAN13InvalidPrefix() {\n        String ean13 = \"9781234567000\";\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            validator.extractFromEAN13(ean13);\n        });\n        assertTrue(exception.getMessage().contains(\"Prefix must be 977\"));\n    }\n\n    @Test\n    public void testExtractFromEAN13NullResult() {\n        String ean13 = \"9771234567001\"; // Assuming this is an invalid EAN-13 code\n        assertNull(validator.extractFromEAN13(ean13));\n    }\n\n    @Test\n    public void testExtractFromEAN13CheckDigitException() {\n        String ean13 = \"9771234567002\"; // Assuming this triggers a CheckDigitException\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            validator.extractFromEAN13(ean13);\n        });\n        assertTrue(exception.getMessage().contains(\"Check digit error\"));\n    }\n}\n"}]