[{"strategy": "generate", "code": "\npackage org.apache.commons.validator.routines;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class DateValidator_compareQuartersTest {\n    private DateValidator dateValidator;\n    private static final TimeZone GMT = TimeZone.getTimeZone(\"GMT\");\n    private static final TimeZone EST = TimeZone.getTimeZone(\"EST\");\n\n    @BeforeEach\n    protected void setUp() {\n        dateValidator = new DateValidator();\n    }\n\n    @Test\n    public void testCompareQuarters() {\n        final int sameTime = 124522;\n        final int testDate = 20050823;\n\n        final Date value = createDate(GMT, testDate, sameTime); // test value\n        final Date date20051101 = createDate(GMT, 20051101, sameTime); // +1 quarter (Feb Start)\n        final Date date20051001 = createDate(GMT, 20051001, sameTime); // +1 quarter\n        final Date date20050701 = createDate(GMT, 20050701, sameTime); // same quarter\n        final Date date20050630 = createDate(GMT, 20050630, sameTime); // -1 quarter\n        final Date date20050110 = createDate(GMT, 20050110, sameTime); // Previous Year qtr (Fen start)\n\n        assertEquals(-1, dateValidator.compareQuarters(value, date20051101, GMT), \"qtrA <1\"); // +1 quarter (Feb)\n        assertEquals(-1, dateValidator.compareQuarters(value, date20051001, GMT), \"qtrA <2\"); // +1 quarter\n        assertEquals(0, dateValidator.compareQuarters(value, date20050701, GMT), \"qtrA =2\"); // same quarter\n        assertEquals(1, dateValidator.compareQuarters(value, date20050630, GMT), \"qtrA GT\"); // -1 quarter\n\n        // Change quarter 1 to start in Feb\n        assertEquals(-1, dateValidator.compareQuarters(value, date20051101, GMT, 2), \"qtrB LT\"); // +1 quarter (Feb)\n        assertEquals(0, dateValidator.compareQuarters(value, date20051001, GMT, 2), \"qtrB =1\"); // same quarter\n        assertEquals(1, dateValidator.compareQuarters(value, date20050701, GMT, 2), \"qtrB =3\"); // same quarter\n        assertEquals(1, dateValidator.compareQuarters(value, date20050630, GMT, 2), \"qtrB GT\"); // -1 quarter\n        assertEquals(1, dateValidator.compareQuarters(value, date20050110, GMT, 2), \"qtrB prev\"); // Jan Prev year qtr\n    }\n\n    private Date createDate(TimeZone timeZone, int date, int time) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.set(Calendar.YEAR, date / 10000);\n        calendar.set(Calendar.MONTH, (date % 10000) / 100 - 1);\n        calendar.set(Calendar.DAY_OF_MONTH, date % 100);\n        calendar.set(Calendar.HOUR_OF_DAY, time / 10000);\n        calendar.set(Calendar.MINUTE, (time % 10000) / 100);\n        calendar.set(Calendar.SECOND, time % 100);\n        calendar.set(Calendar.MILLISECOND, 0);\n        return calendar.getTime();\n    }\n}\n"}]