[{"strategy": "generate", "code": "\npackage org.apache.commons.validator.routines;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class InetAddressValidator_isValidInet6AddressTest {\n    private InetAddressValidator validator;\n\n    @BeforeEach\n    protected void setUp() {\n        validator = new InetAddressValidator();\n    }\n\n    @Test\n    public void testValidInet6Address() {\n        final String[] valid = {\n            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876\",\n            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/123\",\n            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/0\",\n            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%0\",\n            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abcdefgh\"\n        };\n        for (final String item : valid) {\n            assertTrue(validator.isValidInet6Address(item), () -> String.format(\"%s should be valid\", item));\n        }\n    }\n\n    @Test\n    public void testInvalidInet6Address() {\n        final String[] invalid = {\n            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/129\", // too big\n            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/-0\", // sign not allowed\n            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/+0\", // sign not allowed\n            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/10O\", // non-digit\n            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/0%0\", // /bits before %node-id\n            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abc defgh\", // space in node id\n            \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abc%defgh\" // '%' in node id\n        };\n        for (final String item : invalid) {\n            assertFalse(validator.isValidInet6Address(item), () -> String.format(\"%s should be invalid\", item));\n        }\n    }\n\n    @Test\n    public void testValidInet6AddressWithIPv4() {\n        final String valid = \"2001:0000:1234:0000:0000:C1C0:192.168.0.1\";\n        assertTrue(validator.isValidInet6Address(valid), () -> String.format(\"%s should be valid\", valid));\n    }\n\n    @Test\n    public void testInvalidInet6AddressWithIPv4() {\n        final String invalid = \"2001:0000:1234:0000:0000:C1C0:256.256.256.256\";\n        assertFalse(validator.isValidInet6Address(invalid), () -> String.format(\"%s should be invalid\", invalid));\n    }\n\n    @Test\n    public void testInvalidInet6AddressWithMultiplePrefixes() {\n        final String invalid = \"2001:0000:1234:0000:0000:C1C0:ABCD:0876/64/64\";\n        assertFalse(validator.isValidInet6Address(invalid), () -> String.format(\"%s should be invalid\", invalid));\n    }\n\n    @Test\n    public void testInvalidInet6AddressWithInvalidZoneId() {\n        final String invalid = \"2001:0000:1234:0000:0000:C1C0:ABCD:0876%abc/defgh\";\n        assertFalse(validator.isValidInet6Address(invalid), () -> String.format(\"%s should be invalid\", invalid));\n    }\n}\n"}]