{"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "testclass_name": "BoundedPriorityQueueTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static com.github.davidmoten.rtree.internal.util.BoundedPriorityQueue.create;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import java.util.Comparator;", "import org.junit.Test;", "import com.github.davidmoten.guavamini.Sets;"], "name": "BoundedPriorityQueueTest", "description": "Unit tests for the BoundedPriorityQueue class, focusing on its behavior with different input scenarios and edge cases.", "class_members": {"variables": [{"name": "comparator", "type": "static final Comparator<Integer>"}]}, "fixtures": [], "test_cases": [{"name": "emptyQueueAsListIsEmpty", "primary_tested": ["BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that an empty queue returns an empty list."}, {"name": "singleItemReturnsSingleItem", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with a single item returns a list with that single item."}, {"name": "twoItemsReturnsSingleItemWhenMaxIsOne", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with two items and a max size of one returns a list with the smallest item."}, {"name": "twoItemsReturnsSingleItemWhenMaxIsOneInputOrderFlipped", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with two items and a max size of one returns a list with the smallest item, even when input order is flipped."}, {"name": "threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderFlipped", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of two returns a list with the two smallest items, even when input order is flipped."}, {"name": "threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderIncreasing", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of two returns a list with the two smallest items, even when input order is increasing."}, {"name": "threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderMixed", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of two returns a list with the two smallest items, even when input order is mixed."}, {"name": "threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderMixed2", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of two returns a list with the two smallest items, even when input order is mixed."}, {"name": "threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderFlipped", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of ten returns a list with all three items, even when input order is flipped."}, {"name": "threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderIncreasing", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of ten returns a list with all three items, even when input order is increasing."}, {"name": "threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderMixed", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of ten returns a list with all three items, even when input order is mixed."}, {"name": "threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderMixed2", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of ten returns a list with all three items, even when input order is mixed."}, {"name": "testInstantiateWithNegativeSizeThrowsIAE", "primary_tested": ["BoundedPriorityQueue.create(int,Comparator)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that instantiating a queue with a negative size throws an IllegalArgumentException."}, {"name": "testInstantiateWithZeroSizeThrowsIAE", "primary_tested": ["BoundedPriorityQueue.create(int,Comparator)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that instantiating a queue with a size of zero throws an IllegalArgumentException."}, {"name": "testAddNullThrowsNPE", "primary_tested": ["BoundedPriorityQueue.add(Integer)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that adding a null item to the queue throws a NullPointerException."}]}