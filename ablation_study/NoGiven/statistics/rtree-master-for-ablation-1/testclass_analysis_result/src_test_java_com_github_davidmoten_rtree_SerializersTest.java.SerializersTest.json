{"file_path": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "testclass_name": "SerializersTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import org.junit.Test;", "import com.github.davidmoten.guavamini.Sets;", "import com.github.davidmoten.junit.Asserts;", "import com.github.davidmoten.rtree.geometry.Circle;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.Geometry;", "import com.github.davidmoten.rtree.geometry.Line;", "import com.github.davidmoten.rtree.geometry.Point;", "import com.github.davidmoten.rtree.geometry.Rectangle;"], "name": "SerializersTest", "description": "Test suite for Serializers class, focusing on various serialization scenarios for different geometries.", "class_members": {"variables": [], "methods": [{"name": "checkRoundTripPoint", "signature": "private static void checkRoundTripPoint(Serializer<String, Point> serializer) throws IOException"}, {"name": "check", "signature": "private static <S extends Geometry> void check(Serializer<String, S> serializer, Entry<String, S> a, Entry<String, S> b) throws IOException"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testJavaIoSerialization", "primary_tested": ["Serializers.flatBuffers().javaIo()"], "associated_methods": ["SerializersTest.checkRoundTripPoint(Serializer<String, Point>)"], "external_dependencies": {"modules": ["Serializer", "Point", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Java IO serialization for Point objects."}, {"name": "testStringPointSerialization", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": ["SerializersTest.checkRoundTripPoint(Serializer<String, Point>)"], "external_dependencies": {"modules": ["Serializer", "Point", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the UTF-8 serialization for Point objects."}, {"name": "testStringRectangleFloatSerialization", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": ["SerializersTest.check(Serializer<String, Rectangle>, Entry<String, Rectangle>, Entry<String, Rectangle>)"], "external_dependencies": {"modules": ["Serializer", "Rectangle", "Entries", "Geometries", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the UTF-8 serialization for Rectangle objects with float coordinates."}, {"name": "testStringRectangleDoubleSerialization", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": ["SerializersTest.check(Serializer<String, Rectangle>, Entry<String, Rectangle>, Entry<String, Rectangle>)"], "external_dependencies": {"modules": ["Serializer", "Rectangle", "Entries", "Geometries", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the UTF-8 serialization for Rectangle objects with double coordinates."}, {"name": "testStringCircleFloatSerialization", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": ["SerializersTest.check(Serializer<String, Circle>, Entry<String, Circle>, Entry<String, Circle>)"], "external_dependencies": {"modules": ["Serializer", "Circle", "Entries", "Geometries", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the UTF-8 serialization for Circle objects with float coordinates."}, {"name": "testStringCircleDoubleSerialization", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": ["SerializersTest.check(Serializer<String, Circle>, Entry<String, Circle>, Entry<String, Circle>)"], "external_dependencies": {"modules": ["Serializer", "Circle", "Entries", "Geometries", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the UTF-8 serialization for Circle objects with double coordinates."}, {"name": "testStringLineFloatSerialization", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": ["SerializersTest.check(Serializer<String, Line>, Entry<String, Line>, Entry<String, Line>)"], "external_dependencies": {"modules": ["Serializer", "Line", "Entries", "Geometries", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the UTF-8 serialization for Line objects with float coordinates."}, {"name": "testStringLineDoubleSerialization", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": ["SerializersTest.check(Serializer<String, Line>, Entry<String, Line>, Entry<String, Line>)"], "external_dependencies": {"modules": ["Serializer", "Line", "Entries", "Geometries", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the UTF-8 serialization for Line objects with double coordinates."}, {"name": "testAddToFlatBuffers", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": [], "external_dependencies": {"modules": ["RTree", "Entries", "Geometries", "Serializer", "ByteArrayOutputStream", "ByteArrayInputStream", "InternalStructure", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests adding entries to a tree serialized with FlatBuffers."}, {"name": "testDeleteFromFlatBuffers", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": [], "external_dependencies": {"modules": ["RTree", "Entries", "Geometries", "Serializer", "ByteArrayOutputStream", "ByteArrayInputStream", "InternalStructure", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests deleting entries from a tree serialized with FlatBuffers."}, {"name": "testAddToFlatBuffersWhenRootNodeIsNonLeaf", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": [], "external_dependencies": {"modules": ["RTree", "Entries", "Geometries", "Serializer", "ByteArrayOutputStream", "ByteArrayInputStream", "InternalStructure", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests adding entries to a tree serialized with FlatBuffers when the root node is non-leaf."}, {"name": "testDeleteFromFlatBuffersWhenRootNodeIsNonLeaf", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": [], "external_dependencies": {"modules": ["RTree", "Entries", "Geometries", "Serializer", "ByteArrayOutputStream", "ByteArrayInputStream", "InternalStructure", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests deleting entries from a tree serialized with FlatBuffers when the root node is non-leaf."}, {"name": "canRoundTripEmptyTree", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": [], "external_dependencies": {"modules": ["RTree", "Serializer", "ByteArrayOutputStream", "ByteArrayInputStream", "InternalStructure", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the round-trip serialization of an empty tree."}, {"name": "isUtilityClass", "primary_tested": ["Asserts.assertIsUtilityClass(Class<?>)", "Serializers.class"], "associated_methods": [], "external_dependencies": {"modules": ["Asserts", "Serializers"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the Serializers class is a utility class."}]}