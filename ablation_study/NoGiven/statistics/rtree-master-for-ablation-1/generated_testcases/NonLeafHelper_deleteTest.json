[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.internal;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport com.github.davidmoten.rtree.Context;\nimport com.github.davidmoten.rtree.Entry;\nimport com.github.davidmoten.rtree.Node;\nimport com.github.davidmoten.rtree.NonLeaf;\nimport com.github.davidmoten.rtree.geometry.Geometry;\n\npublic class NonLeafHelper_deleteTest {\n\n    @Mock\n    private Entry<String, Geometry> entry;\n    @Mock\n    private NonLeaf<String, Geometry> node;\n    @Mock\n    private Node<String, Geometry> child;\n    @Mock\n    private Context<String, Geometry> context;\n    @Mock\n    private NodeAndEntries<String, Geometry> nodeAndEntries;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        when(node.context()).thenReturn(context);\n        when(node.children()).thenReturn(Collections.singletonList(child));\n        when(entry.geometry()).thenReturn(mock(Geometry.class));\n        when(child.geometry()).thenReturn(mock(Geometry.class));\n        when(child.delete(any(), anyBoolean())).thenReturn(nodeAndEntries);\n        when(nodeAndEntries.node()).thenReturn(Optional.of(child));\n        when(nodeAndEntries.entriesToAdd()).thenReturn(Collections.emptyList());\n        when(nodeAndEntries.countDeleted()).thenReturn(0);\n    }\n\n    @Test\n    public void testDeleteNoIntersection() {\n        when(entry.geometry().intersects(any())).thenReturn(false);\n        NodeAndEntries<String, Geometry> result = NonLeafHelper.delete(entry, true, node);\n        assertEquals(node, result.node().get());\n        assertEquals(0, result.countDeleted());\n        assertEquals(Collections.emptyList(), result.entriesToAdd());\n    }\n\n    @Test\n    public void testDeleteWithIntersectionNoDeletion() {\n        when(entry.geometry().intersects(any())).thenReturn(true);\n        when(nodeAndEntries.node()).thenReturn(Optional.of(child));\n        NodeAndEntries<String, Geometry> result = NonLeafHelper.delete(entry, true, node);\n        assertEquals(node, result.node().get());\n        assertEquals(0, result.countDeleted());\n        assertEquals(Collections.emptyList(), result.entriesToAdd());\n    }\n\n    @Test\n    public void testDeleteWithIntersectionAndDeletion() {\n        when(entry.geometry().intersects(any())).thenReturn(true);\n        Node<String, Geometry> newNode = mock(Node.class);\n        when(nodeAndEntries.node()).thenReturn(Optional.of(newNode));\n        when(nodeAndEntries.countDeleted()).thenReturn(1);\n        NodeAndEntries<String, Geometry> result = NonLeafHelper.delete(entry, true, node);\n        assertNotEquals(node, result.node().get());\n        assertEquals(1, result.countDeleted());\n        assertEquals(Collections.emptyList(), result.entriesToAdd());\n    }\n\n    @Test\n    public void testDeleteWithIntersectionAndDeletionBelowMinChildren() {\n        when(entry.geometry().intersects(any())).thenReturn(true);\n        when(nodeAndEntries.node()).thenReturn(Optional.empty());\n        when(nodeAndEntries.countDeleted()).thenReturn(1);\n        NodeAndEntries<String, Geometry> result = NonLeafHelper.delete(entry, true, node);\n        assertFalse(result.node().isPresent());\n        assertEquals(1, result.countDeleted());\n        assertEquals(Collections.emptyList(), result.entriesToAdd());\n    }\n}\n"}]