[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree;\n\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.Assert.assertSame;\nimport static org.mockito.Mockito.when;\n\npublic class SelectorRStar_selectTest {\n\n    private SelectorRStar selectorRStar;\n    private Selector overlapAreaSelector;\n    private Selector areaIncreaseSelector;\n    private Node<Object, Geometry> leafNode;\n    private Node<Object, Geometry> nonLeafNode;\n\n    @Before\n    public void setup() {\n        selectorRStar = new SelectorRStar();\n        overlapAreaSelector = Mockito.mock(Selector.class);\n        areaIncreaseSelector = Mockito.mock(Selector.class);\n        selectorRStar.overlapAreaSelector = overlapAreaSelector;\n        selectorRStar.areaIncreaseSelector = areaIncreaseSelector;\n\n        leafNode = Mockito.mock(Node.class);\n        nonLeafNode = Mockito.mock(Node.class);\n        when(leafNode.mbr()).thenReturn(Mockito.mock(Rectangle.class));\n        when(nonLeafNode.mbr()).thenReturn(Mockito.mock(Rectangle.class));\n    }\n\n    @Test\n    public void testSelectWithLeafNodes() {\n        List<Node<Object, Geometry>> nodes = Arrays.asList(leafNode, leafNode);\n        Geometry g = Mockito.mock(Geometry.class);\n        Node<Object, Geometry> expectedNode = Mockito.mock(Node.class);\n\n        when(overlapAreaSelector.select(g, nodes)).thenReturn(expectedNode);\n\n        Node<Object, Geometry> result = selectorRStar.select(g, nodes);\n        assertSame(expectedNode, result);\n    }\n\n    @Test\n    public void testSelectWithNonLeafNodes() {\n        List<Node<Object, Geometry>> nodes = Arrays.asList(nonLeafNode, nonLeafNode);\n        Geometry g = Mockito.mock(Geometry.class);\n        Node<Object, Geometry> expectedNode = Mockito.mock(Node.class);\n\n        when(areaIncreaseSelector.select(g, nodes)).thenReturn(expectedNode);\n\n        Node<Object, Geometry> result = selectorRStar.select(g, nodes);\n        assertSame(expectedNode, result);\n    }\n}\n"}]