[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree.internal;\n\nimport com.github.davidmoten.rtree.Entry;\nimport com.github.davidmoten.rtree.Node;\nimport com.github.davidmoten.rtree.NonLeaf;\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport org.junit.Before;\nimport org.junit.Test;\nimport rx.Subscriber;\nimport rx.functions.Func1;\n\nimport static org.mockito.Mockito.*;\n\npublic class NonLeafHelper_searchTest {\n\n    private Func1<Geometry, Boolean> criterion;\n    private Subscriber<Entry<Object, Geometry>> subscriber;\n    private NonLeaf<Object, Geometry> node;\n\n    @Before\n    public void setUp() {\n        criterion = mock(Func1.class);\n        subscriber = mock(Subscriber.class);\n        node = mock(NonLeaf.class);\n    }\n\n    @Test\n    public void testSearch_CriterionFalse() {\n        when(criterion.call(any())).thenReturn(false);\n        NonLeafHelper.search(criterion, subscriber, node);\n        verify(criterion).call(node.geometry().mbr());\n        verifyNoMoreInteractions(subscriber, node);\n    }\n\n    @Test\n    public void testSearch_CriterionTrue_SubscriberUnsubscribed() {\n        when(criterion.call(any())).thenReturn(true);\n        when(subscriber.isUnsubscribed()).thenReturn(true);\n        when(node.count()).thenReturn(1);\n\n        NonLeafHelper.search(criterion, subscriber, node);\n\n        verify(criterion).call(node.geometry().mbr());\n        verify(subscriber).isUnsubscribed();\n        verifyNoMoreInteractions(subscriber, node);\n    }\n\n    @Test\n    public void testSearch_CriterionTrue_SubscriberNotUnsubscribed() {\n        when(criterion.call(any())).thenReturn(true);\n        when(subscriber.isUnsubscribed()).thenReturn(false);\n        when(node.count()).thenReturn(1);\n        Node<Object, Geometry> child = mock(Node.class);\n        when(node.child(0)).thenReturn(child);\n\n        NonLeafHelper.search(criterion, subscriber, node);\n\n        verify(criterion).call(node.geometry().mbr());\n        verify(subscriber).isUnsubscribed();\n        verify(node).child(0);\n        verify(child).searchWithoutBackpressure(criterion, subscriber);\n        verifyNoMoreInteractions(subscriber, node, child);\n    }\n}\n"}]