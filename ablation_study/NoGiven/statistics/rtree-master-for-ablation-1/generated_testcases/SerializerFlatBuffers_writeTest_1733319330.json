[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree.fbs;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.github.davidmoten.rtree.Context;\nimport com.github.davidmoten.rtree.Entry;\nimport com.github.davidmoten.rtree.RTree;\nimport com.github.davidmoten.rtree.geometry.Geometries;\nimport com.github.davidmoten.rtree.geometry.Point;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\nimport com.github.davidmoten.rtree.internal.LeafDefault;\nimport com.github.davidmoten.rtree.internal.NonLeafDefault;\nimport com.google.flatbuffers.FlatBufferBuilder;\n\nimport rx.functions.Func1;\n\npublic class SerializerFlatBuffers_writeTest {\n\n    private SerializerFlatBuffers<String, Point> serializer;\n    private RTree<String, Point> tree;\n\n    @Before\n    public void setUp() {\n        Func1<String, byte[]> serializerFunc = s -> s.getBytes();\n        Func1<byte[], String> deserializerFunc = bytes -> new String(bytes);\n        serializer = new SerializerFlatBuffers<>(serializerFunc, deserializerFunc);\n\n        tree = RTree.create();\n        tree = tree.add(\"Entry1\", Geometries.point(1, 1));\n        tree = tree.add(\"Entry2\", Geometries.point(2, 2));\n    }\n\n    @Test\n    public void testWriteWithEmptyTree() throws IOException {\n        RTree<String, Point> emptyTree = RTree.create();\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        serializer.write(emptyTree, os);\n\n        ByteBuffer bb = ByteBuffer.wrap(os.toByteArray());\n        Tree_ t = Tree_.getRootAsTree_(bb);\n        assertEquals(0, t.size());\n        assertTrue(t.root() == null);\n    }\n\n    @Test\n    public void testWriteWithNonEmptyTree() throws IOException {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        serializer.write(tree, os);\n\n        ByteBuffer bb = ByteBuffer.wrap(os.toByteArray());\n        Tree_ t = Tree_.getRootAsTree_(bb);\n        assertEquals(2, t.size());\n        assertTrue(t.root() != null);\n    }\n\n    @Test\n    public void testWriteWithSingleEntryTree() throws IOException {\n        RTree<String, Point> singleEntryTree = RTree.create();\n        singleEntryTree = singleEntryTree.add(\"Entry1\", Geometries.point(1, 1));\n\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        serializer.write(singleEntryTree, os);\n\n        ByteBuffer bb = ByteBuffer.wrap(os.toByteArray());\n        Tree_ t = Tree_.getRootAsTree_(bb);\n        assertEquals(1, t.size());\n        assertTrue(t.root() != null);\n    }\n\n    @Test\n    public void testWriteWithDoublePrecision() throws IOException {\n        RTree<String, Point> doublePrecisionTree = RTree.create();\n        doublePrecisionTree = doublePrecisionTree.add(\"Entry1\", Geometries.rectangle(1.1, 1.1, 2.2, 2.2));\n\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        serializer.write(doublePrecisionTree, os);\n\n        ByteBuffer bb = ByteBuffer.wrap(os.toByteArray());\n        Tree_ t = Tree_.getRootAsTree_(bb);\n        assertEquals(1, t.size());\n        assertTrue(t.root() != null);\n    }\n}\n"}]