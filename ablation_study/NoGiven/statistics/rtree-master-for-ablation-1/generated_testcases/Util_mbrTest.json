[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree.internal;\n\nimport com.github.davidmoten.rtree.geometry.Geometries;\nimport com.github.davidmoten.rtree.geometry.HasGeometry;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\nimport org.junit.Test;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class Util_mbrTest {\n\n    @Test\n    public void testMbrWithSingleItemDoublePrecision() {\n        HasGeometry item = mock(HasGeometry.class);\n        Rectangle rect = mock(Rectangle.class);\n        when(item.geometry()).thenReturn(rect);\n        when(rect.mbr()).thenReturn(rect);\n        when(rect.isDoublePrecision()).thenReturn(true);\n        when(rect.x1()).thenReturn(1.0);\n        when(rect.y1()).thenReturn(2.0);\n        when(rect.x2()).thenReturn(3.0);\n        when(rect.y2()).thenReturn(4.0);\n\n        Collection<HasGeometry> items = Arrays.asList(item);\n        Rectangle result = Util.mbr(items);\n\n        assertEquals(1.0, result.x1(), 0.001);\n        assertEquals(2.0, result.y1(), 0.001);\n        assertEquals(3.0, result.x2(), 0.001);\n        assertEquals(4.0, result.y2(), 0.001);\n        assertTrue(result.isDoublePrecision());\n    }\n\n    @Test\n    public void testMbrWithMultipleItemsSinglePrecision() {\n        HasGeometry item1 = mock(HasGeometry.class);\n        Rectangle rect1 = mock(Rectangle.class);\n        when(item1.geometry()).thenReturn(rect1);\n        when(rect1.mbr()).thenReturn(rect1);\n        when(rect1.isDoublePrecision()).thenReturn(false);\n        when(rect1.x1()).thenReturn(1.0);\n        when(rect1.y1()).thenReturn(2.0);\n        when(rect1.x2()).thenReturn(3.0);\n        when(rect1.y2()).thenReturn(4.0);\n\n        HasGeometry item2 = mock(HasGeometry.class);\n        Rectangle rect2 = mock(Rectangle.class);\n        when(item2.geometry()).thenReturn(rect2);\n        when(rect2.mbr()).thenReturn(rect2);\n        when(rect2.isDoublePrecision()).thenReturn(false);\n        when(rect2.x1()).thenReturn(2.0);\n        when(rect2.y1()).thenReturn(3.0);\n        when(rect2.x2()).thenReturn(4.0);\n        when(rect2.y2()).thenReturn(5.0);\n\n        Collection<HasGeometry> items = Arrays.asList(item1, item2);\n        Rectangle result = Util.mbr(items);\n\n        assertEquals(1.0, result.x1(), 0.001);\n        assertEquals(2.0, result.y1(), 0.001);\n        assertEquals(4.0, result.x2(), 0.001);\n        assertEquals(5.0, result.y2(), 0.001);\n        assertTrue(!result.isDoublePrecision());\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testMbrWithEmptyCollection() {\n        Collection<HasGeometry> items = Arrays.asList();\n        Util.mbr(items);\n    }\n}\n"}]