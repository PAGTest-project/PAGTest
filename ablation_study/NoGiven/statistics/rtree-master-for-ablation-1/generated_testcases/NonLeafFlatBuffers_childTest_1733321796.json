[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree.fbs;\n\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Mockito.*;\n\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport com.github.davidmoten.rtree.Context;\nimport com.github.davidmoten.rtree.Node;\nimport com.github.davidmoten.rtree.fbs.generated.Node_;\nimport com.github.davidmoten.rtree.geometry.Geometry;\n\nimport rx.functions.Func1;\n\npublic class NonLeafFlatBuffers_childTest {\n\n    @Test\n    public void testChildWithNonLeaf() {\n        // Given\n        Node_ mockNode = Mockito.mock(Node_.class);\n        Node_ mockChild = Mockito.mock(Node_.class);\n        Context<String, Geometry> mockContext = Mockito.mock(Context.class);\n        Func1<byte[], String> mockDeserializer = Mockito.mock(Func1.class);\n\n        when(mockNode.children(0)).thenReturn(mockChild);\n        when(mockChild.childrenLength()).thenReturn(1); // Non-leaf child\n\n        NonLeafFlatBuffers<String, Geometry> nonLeaf = new NonLeafFlatBuffers<>(mockNode, mockContext, mockDeserializer);\n\n        // When\n        Node<String, Geometry> result = nonLeaf.child(0);\n\n        // Then\n        assertTrue(result instanceof NonLeafFlatBuffers);\n    }\n\n    @Test\n    public void testChildWithLeaf() {\n        // Given\n        Node_ mockNode = Mockito.mock(Node_.class);\n        Node_ mockChild = Mockito.mock(Node_.class);\n        Context<String, Geometry> mockContext = Mockito.mock(Context.class);\n        Func1<byte[], String> mockDeserializer = Mockito.mock(Func1.class);\n\n        when(mockNode.children(0)).thenReturn(mockChild);\n        when(mockChild.childrenLength()).thenReturn(0); // Leaf child\n\n        NonLeafFlatBuffers<String, Geometry> nonLeaf = new NonLeafFlatBuffers<>(mockNode, mockContext, mockDeserializer);\n\n        // When\n        Node<String, Geometry> result = nonLeaf.child(0);\n\n        // Then\n        assertTrue(result instanceof LeafFlatBuffers);\n    }\n}\n"}]