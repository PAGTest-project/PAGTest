[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.fbs;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\nimport java.util.Optional;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.github.davidmoten.rtree.Context;\nimport com.github.davidmoten.rtree.InternalStructure;\nimport com.github.davidmoten.rtree.RTree;\nimport com.github.davidmoten.rtree.SelectorRStar;\nimport com.github.davidmoten.rtree.SplitterRStar;\nimport com.github.davidmoten.rtree.fbs.generated.Node_;\nimport com.github.davidmoten.rtree.fbs.generated.Tree_;\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport com.github.davidmoten.rtree.internal.FactoryDefault;\n\npublic class SerializerFlatBuffers_readTest {\n\n    private SerializerFlatBuffers<Object, Geometry> serializer;\n\n    @Before\n    public void setUp() {\n        serializer = new SerializerFlatBuffers<>(null, null);\n    }\n\n    @Test\n    public void testReadWithEmptyTree() throws IOException {\n        byte[] emptyTreeBytes = createEmptyTreeBytes();\n        InputStream is = new ByteArrayInputStream(emptyTreeBytes);\n        RTree<Object, Geometry> tree = serializer.read(is, emptyTreeBytes.length, InternalStructure.SINGLE_ARRAY);\n        assertTrue(tree.root().isEmpty());\n        assertEquals(0, tree.size());\n    }\n\n    @Test\n    public void testReadWithNonEmptyTree() throws IOException {\n        byte[] nonEmptyTreeBytes = createNonEmptyTreeBytes();\n        InputStream is = new ByteArrayInputStream(nonEmptyTreeBytes);\n        RTree<Object, Geometry> tree = serializer.read(is, nonEmptyTreeBytes.length, InternalStructure.SINGLE_ARRAY);\n        assertTrue(tree.root().isPresent());\n        assertEquals(1, tree.size());\n    }\n\n    private byte[] createEmptyTreeBytes() {\n        // Create an empty tree in FlatBuffers format\n        com.google.flatbuffers.FlatBufferBuilder builder = new com.google.flatbuffers.FlatBufferBuilder();\n        int contextOffset = com.github.davidmoten.rtree.fbs.generated.Context_.createContext_(builder, 0, 0, 0);\n        Tree_.startTree_(builder);\n        Tree_.addContext(builder, contextOffset);\n        Tree_.addSize(builder, 0);\n        int treeOffset = Tree_.endTree_(builder);\n        Tree_.finishTree_Buffer(builder, treeOffset);\n        return builder.sizedByteArray();\n    }\n\n    private byte[] createNonEmptyTreeBytes() {\n        // Create a non-empty tree in FlatBuffers format\n        com.google.flatbuffers.FlatBufferBuilder builder = new com.google.flatbuffers.FlatBufferBuilder();\n        int contextOffset = com.github.davidmoten.rtree.fbs.generated.Context_.createContext_(builder, 2, 4, 0);\n        int nodeOffset = com.github.davidmoten.rtree.fbs.generated.Node_.createNode_(builder, 0, 0, 0);\n        Tree_.startTree_(builder);\n        Tree_.addContext(builder, contextOffset);\n        Tree_.addRoot(builder, nodeOffset);\n        Tree_.addSize(builder, 1);\n        int treeOffset = Tree_.endTree_(builder);\n        Tree_.finishTree_Buffer(builder, treeOffset);\n        return builder.sizedByteArray();\n    }\n}\n"}]