[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.internal;\n\nimport com.github.davidmoten.rtree.Context;\nimport com.github.davidmoten.rtree.Entry;\nimport com.github.davidmoten.rtree.Node;\nimport com.github.davidmoten.rtree.NonLeaf;\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport com.github.davidmoten.rtree.geometry.ListPair;\nimport com.github.davidmoten.rtree.internal.Util;\nimport com.github.davidmoten.rtree.internal.Factory;\nimport com.github.davidmoten.rtree.internal.Selector;\nimport com.github.davidmoten.rtree.internal.Splitter;\nimport org.junit.Test;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class NonLeafHelper_addTest {\n\n    @Test\n    public void testAddWhenChildrenSizeLessThanOrEqualToMaxChildren() {\n        // Given\n        Entry<?, ? extends Geometry> entry = mock(Entry.class);\n        NonLeaf<?, ? extends Geometry> node = mock(NonLeaf.class);\n        Context<?, ? extends Geometry> context = mock(Context.class);\n        Node<?, ? extends Geometry> child = mock(Node.class);\n        List<Node<?, ? extends Geometry>> children = Collections.singletonList(child);\n\n        when(node.context()).thenReturn(context);\n        when(node.children()).thenReturn(children);\n        when(context.selector()).thenReturn(mock(Selector.class));\n        when(context.selector().select(any(), any())).thenReturn(child);\n        when(child.add(entry)).thenReturn(children);\n        when(context.maxChildren()).thenReturn(2);\n        when(context.factory()).thenReturn(mock(Factory.class));\n        when(context.factory().createNonLeaf(any(), any())).thenReturn(mock(NonLeaf.class));\n\n        // When\n        List<Node<?, ? extends Geometry>> result = NonLeafHelper.add(entry, node);\n\n        // Then\n        assertEquals(1, result.size());\n    }\n\n    @Test\n    public void testAddWhenChildrenSizeGreaterThanMaxChildren() {\n        // Given\n        Entry<?, ? extends Geometry> entry = mock(Entry.class);\n        NonLeaf<?, ? extends Geometry> node = mock(NonLeaf.class);\n        Context<?, ? extends Geometry> context = mock(Context.class);\n        Node<?, ? extends Geometry> child = mock(Node.class);\n        List<Node<?, ? extends Geometry>> children = Collections.singletonList(child);\n\n        when(node.context()).thenReturn(context);\n        when(node.children()).thenReturn(children);\n        when(context.selector()).thenReturn(mock(Selector.class));\n        when(context.selector().select(any(), any())).thenReturn(child);\n        when(child.add(entry)).thenReturn(children);\n        when(context.maxChildren()).thenReturn(1);\n        when(context.minChildren()).thenReturn(1);\n        when(context.splitter()).thenReturn(mock(Splitter.class));\n        when(context.splitter().split(any(), anyInt())).thenReturn(mock(ListPair.class));\n        when(context.factory()).thenReturn(mock(Factory.class));\n        when(context.factory().createNonLeaf(any(), any())).thenReturn(mock(NonLeaf.class));\n\n        // When\n        List<Node<?, ? extends Geometry>> result = NonLeafHelper.add(entry, node);\n\n        // Then\n        assertEquals(2, result.size());\n    }\n}\n"}]