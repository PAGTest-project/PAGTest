[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.geometry.internal;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport org.junit.Test;\nimport com.github.davidmoten.rtree.geometry.Circle;\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport com.github.davidmoten.rtree.geometry.Point;\nimport com.github.davidmoten.rtree.geometry.Line;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\nimport com.github.davidmoten.rtree.geometry.internal.Vector;\n\npublic class GeometryUtil_lineIntersectsTest {\n\n    @Test\n    public void testLineIntersects_LineSegmentIntersectsCircle() {\n        Circle circle = new Circle() {\n            @Override\n            public double x() {\n                return 0;\n            }\n\n            @Override\n            public double y() {\n                return 0;\n            }\n\n            @Override\n            public double radius() {\n                return 1;\n            }\n\n            @Override\n            public boolean intersects(Circle other) {\n                return false;\n            }\n\n            @Override\n            public boolean intersects(Point point) {\n                return false;\n            }\n\n            @Override\n            public boolean intersects(Line line) {\n                return false;\n            }\n\n            @Override\n            public boolean intersects(Rectangle rectangle) {\n                return false;\n            }\n\n            @Override\n            public boolean isDoublePrecision() {\n                return true;\n            }\n        };\n\n        assertTrue(GeometryUtil.lineIntersects(0, 1, 0, -1, circle));\n    }\n\n    @Test\n    public void testLineIntersects_LineSegmentDoesNotIntersectCircle() {\n        Circle circle = new Circle() {\n            @Override\n            public double x() {\n                return 0;\n            }\n\n            @Override\n            public double y() {\n                return 0;\n            }\n\n            @Override\n            public double radius() {\n                return 1;\n            }\n\n            @Override\n            public boolean intersects(Circle other) {\n                return false;\n            }\n\n            @Override\n            public boolean intersects(Point point) {\n                return false;\n            }\n\n            @Override\n            public boolean intersects(Line line) {\n                return false;\n            }\n\n            @Override\n            public boolean intersects(Rectangle rectangle) {\n                return false;\n            }\n\n            @Override\n            public boolean isDoublePrecision() {\n                return true;\n            }\n        };\n\n        assertFalse(GeometryUtil.lineIntersects(0, 2, 0, -2, circle));\n    }\n\n    @Test\n    public void testLineIntersects_PointIntersectsCircle() {\n        Circle circle = new Circle() {\n            @Override\n            public double x() {\n                return 0;\n            }\n\n            @Override\n            public double y() {\n                return 0;\n            }\n\n            @Override\n            public double radius() {\n                return 1;\n            }\n\n            @Override\n            public boolean intersects(Circle other) {\n                return false;\n            }\n\n            @Override\n            public boolean intersects(Point point) {\n                return false;\n            }\n\n            @Override\n            public boolean intersects(Line line) {\n                return false;\n            }\n\n            @Override\n            public boolean intersects(Rectangle rectangle) {\n                return false;\n            }\n\n            @Override\n            public boolean isDoublePrecision() {\n                return true;\n            }\n        };\n\n        assertTrue(GeometryUtil.lineIntersects(0, 0, 0, 0, circle));\n    }\n\n    @Test\n    public void testLineIntersects_PointDoesNotIntersectCircle() {\n        Circle circle = new Circle() {\n            @Override\n            public double x() {\n                return 0;\n            }\n\n            @Override\n            public double y() {\n                return 0;\n            }\n\n            @Override\n            public double radius() {\n                return 1;\n            }\n\n            @Override\n            public boolean intersects(Circle other) {\n                return false;\n            }\n\n            @Override\n            public boolean intersects(Point point) {\n                return false;\n            }\n\n            @Override\n            public boolean intersects(Line line) {\n                return false;\n            }\n\n            @Override\n            public boolean intersects(Rectangle rectangle) {\n                return false;\n            }\n\n            @Override\n            public boolean isDoublePrecision() {\n                return true;\n            }\n        };\n\n        assertFalse(GeometryUtil.lineIntersects(2, 2, 2, 2, circle));\n    }\n}\n"}]