[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree.kryo;\n\nimport com.esotericsoftware.kryo.Kryo;\nimport com.esotericsoftware.kryo.io.Output;\nimport com.github.davidmoten.rtree.RTree;\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport org.junit.Test;\nimport rx.functions.Func0;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\n\nimport static org.mockito.Mockito.*;\n\npublic class SerializerKryo_writeTest {\n\n    @Test\n    public void testWrite() throws IOException {\n        // Given\n        RTree<String, Geometry> tree = mock(RTree.class);\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        Func0<Kryo> kryoFactory = mock(Func0.class);\n        Kryo kryo = mock(Kryo.class);\n        when(kryoFactory.call()).thenReturn(kryo);\n\n        SerializerKryo<String, Geometry> serializer = new SerializerKryo<>(null, null, kryoFactory);\n\n        // When\n        serializer.write(tree, os);\n\n        // Then\n        verify(kryoFactory).call();\n        verify(kryo, never()).writeObject(any(Output.class), any());\n    }\n}\n"}]