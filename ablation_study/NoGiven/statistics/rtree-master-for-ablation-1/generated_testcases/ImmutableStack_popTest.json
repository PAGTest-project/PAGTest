[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.internal.util;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.util.Iterator;\nimport org.junit.Test;\n\npublic class ImmutableStack_popTest {\n\n    @Test\n    public void testPopRemovesTopElement() {\n        ImmutableStack<Integer> stack = ImmutableStack.create(1).push(2).push(3);\n        ImmutableStack<Integer> poppedStack = stack.pop();\n        assertEquals(Integer.valueOf(2), poppedStack.peek());\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testPopOnEmptyStack() {\n        ImmutableStack<Integer> emptyStack = ImmutableStack.empty();\n        emptyStack.pop();\n    }\n\n    @Test\n    public void testPopThenPush() {\n        ImmutableStack<Integer> stack = ImmutableStack.create(1).push(2).push(3);\n        ImmutableStack<Integer> poppedStack = stack.pop();\n        ImmutableStack<Integer> newStack = poppedStack.push(4);\n        assertEquals(Integer.valueOf(4), newStack.peek());\n    }\n\n    @Test\n    public void testPopThenCheckIsEmpty() {\n        ImmutableStack<Integer> stack = ImmutableStack.create(1).push(2).push(3);\n        ImmutableStack<Integer> poppedStack = stack.pop();\n        assertFalse(poppedStack.isEmpty());\n    }\n}\n"}]