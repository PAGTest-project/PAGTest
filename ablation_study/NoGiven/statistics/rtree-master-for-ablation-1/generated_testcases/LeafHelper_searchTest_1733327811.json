[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree.internal;\n\nimport com.github.davidmoten.rtree.Entry;\nimport com.github.davidmoten.rtree.Leaf;\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport org.junit.Test;\nimport rx.Subscriber;\nimport rx.functions.Func1;\n\nimport static org.mockito.Mockito.*;\n\npublic class LeafHelper_searchTest {\n\n    @Test\n    public void testSearch_ConditionFalse_NoEntriesProcessed() {\n        // Given\n        Func1<Geometry, Boolean> condition = mock(Func1.class);\n        Subscriber<Entry<String, Geometry>> subscriber = mock(Subscriber.class);\n        Leaf<String, Geometry> leaf = mock(Leaf.class);\n\n        when(condition.call(any())).thenReturn(false);\n        when(leaf.geometry()).thenReturn(mock(Geometry.class));\n\n        // When\n        LeafHelper.search(condition, subscriber, leaf);\n\n        // Then\n        verify(subscriber, never()).onNext(any());\n        verify(subscriber, never()).isUnsubscribed();\n    }\n\n    @Test\n    public void testSearch_ConditionTrue_AllEntriesProcessed() {\n        // Given\n        Func1<Geometry, Boolean> condition = mock(Func1.class);\n        Subscriber<Entry<String, Geometry>> subscriber = mock(Subscriber.class);\n        Leaf<String, Geometry> leaf = mock(Leaf.class);\n        Entry<String, Geometry> entry1 = mock(Entry.class);\n        Entry<String, Geometry> entry2 = mock(Entry.class);\n\n        when(condition.call(any())).thenReturn(true);\n        when(leaf.geometry()).thenReturn(mock(Geometry.class));\n        when(leaf.count()).thenReturn(2);\n        when(leaf.entry(0)).thenReturn(entry1);\n        when(leaf.entry(1)).thenReturn(entry2);\n        when(entry1.geometry()).thenReturn(mock(Geometry.class));\n        when(entry2.geometry()).thenReturn(mock(Geometry.class));\n\n        // When\n        LeafHelper.search(condition, subscriber, leaf);\n\n        // Then\n        verify(subscriber, times(2)).onNext(any());\n        verify(subscriber, never()).isUnsubscribed();\n    }\n\n    @Test\n    public void testSearch_SubscriberUnsubscribed_NoEntriesProcessed() {\n        // Given\n        Func1<Geometry, Boolean> condition = mock(Func1.class);\n        Subscriber<Entry<String, Geometry>> subscriber = mock(Subscriber.class);\n        Leaf<String, Geometry> leaf = mock(Leaf.class);\n        Entry<String, Geometry> entry1 = mock(Entry.class);\n\n        when(condition.call(any())).thenReturn(true);\n        when(subscriber.isUnsubscribed()).thenReturn(true);\n        when(leaf.geometry()).thenReturn(mock(Geometry.class));\n        when(leaf.count()).thenReturn(1);\n        when(leaf.entry(0)).thenReturn(entry1);\n        when(entry1.geometry()).thenReturn(mock(Geometry.class));\n\n        // When\n        LeafHelper.search(condition, subscriber, leaf);\n\n        // Then\n        verify(subscriber, never()).onNext(any());\n        verify(subscriber, times(1)).isUnsubscribed();\n    }\n}\n"}]