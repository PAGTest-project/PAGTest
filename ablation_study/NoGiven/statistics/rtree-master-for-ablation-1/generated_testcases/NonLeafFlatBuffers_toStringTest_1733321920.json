[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree.fbs;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.Test;\n\nimport com.github.davidmoten.rtree.Context;\nimport com.github.davidmoten.rtree.fbs.generated.Bounds_;\nimport com.github.davidmoten.rtree.fbs.generated.Node_;\nimport com.github.davidmoten.rtree.geometry.Geometry;\n\nimport rx.functions.Func1;\n\npublic class NonLeafFlatBuffers_toStringTest {\n\n    @Test\n    public void testToStringNonLeaf() {\n        // Given\n        Node_ node = mock(Node_.class);\n        when(node.childrenLength()).thenReturn(1); // NonLeaf\n        Bounds_ bounds = mock(Bounds_.class);\n        when(node.mbb()).thenReturn(bounds);\n        when(FlatBuffersHelper.createBox(bounds).toString()).thenReturn(\"Box\");\n\n        Context<Object, Geometry> context = mock(Context.class);\n        Func1<byte[], ? extends Object> deserializer = mock(Func1.class);\n\n        NonLeafFlatBuffers<Object, Geometry> nonLeaf = new NonLeafFlatBuffers<>(node, context, deserializer);\n\n        // When\n        String result = nonLeaf.toString();\n\n        // Then\n        assertEquals(\"Node [NonLeaf,Box]\", result);\n    }\n\n    @Test\n    public void testToStringLeaf() {\n        // Given\n        Node_ node = mock(Node_.class);\n        when(node.childrenLength()).thenReturn(0); // Leaf\n        Bounds_ bounds = mock(Bounds_.class);\n        when(node.mbb()).thenReturn(bounds);\n        when(FlatBuffersHelper.createBox(bounds).toString()).thenReturn(\"Box\");\n\n        Context<Object, Geometry> context = mock(Context.class);\n        Func1<byte[], ? extends Object> deserializer = mock(Func1.class);\n\n        NonLeafFlatBuffers<Object, Geometry> nonLeaf = new NonLeafFlatBuffers<>(node, context, deserializer);\n\n        // When\n        String result = nonLeaf.toString();\n\n        // Then\n        assertEquals(\"Node [Leaf,Box]\", result);\n    }\n}\n"}]