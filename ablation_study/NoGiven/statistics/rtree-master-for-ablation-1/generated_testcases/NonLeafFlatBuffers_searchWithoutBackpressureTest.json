[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.fbs;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport com.github.davidmoten.rtree.Entry;\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport com.github.davidmoten.rtree.fbs.generated.Bounds_;\nimport com.github.davidmoten.rtree.fbs.generated.Entry_;\nimport com.github.davidmoten.rtree.fbs.generated.Geometry_;\nimport com.github.davidmoten.rtree.fbs.generated.Node_;\nimport rx.Subscriber;\nimport rx.functions.Func1;\n\npublic class NonLeafFlatBuffers_searchWithoutBackpressureTest {\n\n    private NonLeafFlatBuffers<String, Geometry> nonLeaf;\n    private Node_ node;\n    private Func1<byte[], String> deserializer;\n    private Func1<Geometry, Boolean> criterion;\n    private Subscriber<Entry<String, Geometry>> subscriber;\n\n    @Before\n    public void setUp() {\n        node = mock(Node_.class);\n        deserializer = mock(Func1.class);\n        criterion = mock(Func1.class);\n        subscriber = mock(Subscriber.class);\n        nonLeaf = new NonLeafFlatBuffers<>(node, null, deserializer);\n    }\n\n    @Test\n    public void testSearchWithoutBackpressure() {\n        // Given\n        when(node.childrenLength()).thenReturn(1);\n        when(node.entriesLength()).thenReturn(0);\n        Node_ child = mock(Node_.class);\n        when(node.children(any(Node_.class), anyInt())).thenReturn(child);\n        when(subscriber.isUnsubscribed()).thenReturn(false);\n\n        // When\n        nonLeaf.searchWithoutBackpressure(criterion, subscriber);\n\n        // Then\n        verify(node).childrenLength();\n        verify(node).children(any(Node_.class), anyInt());\n        verify(subscriber, never()).onNext(any());\n    }\n}\n"}]