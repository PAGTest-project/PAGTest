[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.internal.util;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertFalse;\nimport org.junit.Test;\nimport java.util.Iterator;\n\npublic class ImmutableStack_peekTest {\n\n    @Test\n    public void testPeekOnNonEmptyStack() {\n        ImmutableStack<Integer> stack = ImmutableStack.create(1);\n        assertEquals(Integer.valueOf(1), stack.peek());\n    }\n\n    @Test\n    public void testPeekAfterPush() {\n        ImmutableStack<Integer> stack = ImmutableStack.empty();\n        stack = stack.push(1);\n        assertEquals(Integer.valueOf(1), stack.peek());\n    }\n\n    @Test\n    public void testPeekAfterMultiplePushes() {\n        ImmutableStack<Integer> stack = ImmutableStack.empty();\n        stack = stack.push(1);\n        stack = stack.push(2);\n        assertEquals(Integer.valueOf(2), stack.peek());\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testPeekOnEmptyStack() {\n        ImmutableStack<Integer> stack = ImmutableStack.empty();\n        stack.peek();\n    }\n\n    @Test\n    public void testPeekAfterPop() {\n        ImmutableStack<Integer> stack = ImmutableStack.create(1);\n        stack = stack.push(2);\n        stack = stack.pop();\n        assertEquals(Integer.valueOf(1), stack.peek());\n    }\n\n    @Test\n    public void testPeekWithIterator() {\n        ImmutableStack<Integer> stack = ImmutableStack.create(1);\n        Iterator<Integer> iterator = stack.iterator();\n        assertTrue(iterator.hasNext());\n        assertEquals(Integer.valueOf(1), iterator.next());\n    }\n}\n"}]