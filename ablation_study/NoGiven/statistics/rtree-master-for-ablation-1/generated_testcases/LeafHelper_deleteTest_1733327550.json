[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.internal;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport com.github.davidmoten.rtree.Context;\nimport com.github.davidmoten.rtree.Entry;\nimport com.github.davidmoten.rtree.Leaf;\nimport com.github.davidmoten.rtree.Node;\nimport com.github.davidmoten.rtree.geometry.Geometry;\n\npublic class LeafHelper_deleteTest {\n\n    @Mock\n    private Leaf<String, Geometry> leaf;\n\n    @Mock\n    private Context<String, Geometry> context;\n\n    @Mock\n    private Entry<String, Geometry> entry;\n\n    @Mock\n    private Context.Factory<String, Geometry> factory;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        when(leaf.context()).thenReturn(context);\n        when(context.minChildren()).thenReturn(2);\n        when(context.factory()).thenReturn(factory);\n    }\n\n    @Test\n    public void testDeleteEntryNotPresent() {\n        when(leaf.entries()).thenReturn(Collections.emptyList());\n\n        NodeAndEntries<String, Geometry> result = LeafHelper.delete(entry, false, leaf);\n\n        assertEquals(Optional.of(leaf), result.node());\n        assertEquals(Collections.emptyList(), result.entriesToAdd());\n        assertEquals(0, result.countDeleted());\n    }\n\n    @Test\n    public void testDeleteEntryPresentOnce() {\n        when(leaf.entries()).thenReturn(Arrays.asList(entry));\n        when(factory.createLeaf(anyList(), eq(context))).thenReturn(leaf);\n\n        NodeAndEntries<String, Geometry> result = LeafHelper.delete(entry, false, leaf);\n\n        assertEquals(Optional.of(leaf), result.node());\n        assertEquals(Collections.emptyList(), result.entriesToAdd());\n        assertEquals(1, result.countDeleted());\n    }\n\n    @Test\n    public void testDeleteEntryPresentMultipleTimes() {\n        when(leaf.entries()).thenReturn(Arrays.asList(entry, entry, entry));\n        when(factory.createLeaf(anyList(), eq(context))).thenReturn(leaf);\n\n        NodeAndEntries<String, Geometry> result = LeafHelper.delete(entry, true, leaf);\n\n        assertEquals(Optional.of(leaf), result.node());\n        assertEquals(Collections.emptyList(), result.entriesToAdd());\n        assertEquals(3, result.countDeleted());\n    }\n\n    @Test\n    public void testDeleteEntryPresentButNotEnoughChildren() {\n        when(leaf.entries()).thenReturn(Arrays.asList(entry));\n        when(factory.createLeaf(anyList(), eq(context))).thenReturn(leaf);\n        when(context.minChildren()).thenReturn(2);\n\n        NodeAndEntries<String, Geometry> result = LeafHelper.delete(entry, false, leaf);\n\n        assertEquals(Optional.empty(), result.node());\n        assertEquals(Collections.emptyList(), result.entriesToAdd());\n        assertEquals(1, result.countDeleted());\n    }\n}\n"}]