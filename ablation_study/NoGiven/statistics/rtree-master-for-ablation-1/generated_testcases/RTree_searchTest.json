[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree;\n\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\nimport org.junit.Test;\nimport rx.Observable;\nimport rx.functions.Func1;\nimport rx.functions.Func2;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class RTree_searchTest {\n\n    @Test\n    public void testSearch() {\n        // Given\n        RTree<String, Rectangle> rTree = RTree.create();\n        Rectangle geometry = mock(Rectangle.class);\n        double maxDistance = 10.0;\n        Func2<Rectangle, Rectangle, Double> distanceFunc = mock(Func2.class);\n\n        Observable<Entry<String, Rectangle>> expectedObservable = Observable.empty();\n        Observable<Entry<String, Rectangle>> mockObservable = mock(Observable.class);\n\n        when(geometry.mbr()).thenReturn(geometry);\n        when(distanceFunc.call(any(), eq(geometry))).thenReturn(5.0);\n        when(rTree.search(any(Func1.class))).thenReturn(mockObservable);\n        when(mockObservable.filter(any(Func1.class))).thenReturn(expectedObservable);\n\n        // When\n        Observable<Entry<String, Rectangle>> result = rTree.search(geometry, maxDistance, distanceFunc);\n\n        // Then\n        assertEquals(expectedObservable, result);\n    }\n}\n"}]