[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport com.github.davidmoten.rtree.internal.NodeAndEntries;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class RTree_addTest {\n\n    @Mock\n    private Node<String, Geometry> mockNode;\n\n    @Mock\n    private Context<String, Geometry> mockContext;\n\n    @Mock\n    private Factory<String, Geometry> mockFactory;\n\n    @Mock\n    private Entry<String, Geometry> mockEntry;\n\n    @Test\n    public void testAddWhenRootIsPresent() {\n        // Given\n        RTree<String, Geometry> tree = new RTree<>(Optional.of(mockNode), 1, mockContext);\n        when(mockNode.add(any())).thenReturn(List.of(mockNode));\n        when(mockContext.factory()).thenReturn(mockFactory);\n        when(mockFactory.createNonLeaf(any(), any())).thenReturn(mockNode);\n\n        // When\n        RTree<String, Geometry> result = tree.add(mockEntry);\n\n        // Then\n        assertEquals(2, result.size());\n        assertEquals(mockNode, result.root().get());\n    }\n\n    @Test\n    public void testAddWhenRootIsNotPresent() {\n        // Given\n        RTree<String, Geometry> tree = new RTree<>(Optional.empty(), 0, mockContext);\n        when(mockContext.factory()).thenReturn(mockFactory);\n        when(mockFactory.createLeaf(any(), any())).thenReturn(mockNode);\n\n        // When\n        RTree<String, Geometry> result = tree.add(mockEntry);\n\n        // Then\n        assertEquals(1, result.size());\n        assertEquals(mockNode, result.root().get());\n    }\n}\n"}]