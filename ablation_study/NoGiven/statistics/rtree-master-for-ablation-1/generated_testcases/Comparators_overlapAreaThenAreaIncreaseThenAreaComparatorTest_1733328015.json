[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.internal;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport com.github.davidmoten.rtree.geometry.HasGeometry;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\n\npublic class Comparators_overlapAreaThenAreaIncreaseThenAreaComparatorTest {\n\n    private Rectangle rectangle;\n    private HasGeometry g1;\n    private HasGeometry g2;\n    private List<HasGeometry> list;\n\n    @Before\n    public void setUp() {\n        rectangle = mock(Rectangle.class);\n        g1 = mock(HasGeometry.class);\n        g2 = mock(HasGeometry.class);\n        list = Arrays.asList(g1, g2);\n    }\n\n    @Test\n    public void testOverlapAreaThenAreaIncreaseThenAreaComparator() {\n        // Given\n        when(Comparators.overlapArea(rectangle, list, g1)).thenReturn(10.0f);\n        when(Comparators.overlapArea(rectangle, list, g2)).thenReturn(20.0f);\n\n        // When\n        Comparator<HasGeometry> comparator = Comparators.overlapAreaThenAreaIncreaseThenAreaComparator(rectangle, list);\n\n        // Then\n        assertEquals(-1, comparator.compare(g1, g2));\n    }\n\n    @Test\n    public void testOverlapAreaThenAreaIncreaseThenAreaComparator_SameOverlapArea() {\n        // Given\n        when(Comparators.overlapArea(rectangle, list, g1)).thenReturn(10.0f);\n        when(Comparators.overlapArea(rectangle, list, g2)).thenReturn(10.0f);\n        when(Comparators.areaIncrease(rectangle, g1)).thenReturn(5.0);\n        when(Comparators.areaIncrease(rectangle, g2)).thenReturn(15.0);\n\n        // When\n        Comparator<HasGeometry> comparator = Comparators.overlapAreaThenAreaIncreaseThenAreaComparator(rectangle, list);\n\n        // Then\n        assertEquals(-1, comparator.compare(g1, g2));\n    }\n\n    @Test\n    public void testOverlapAreaThenAreaIncreaseThenAreaComparator_SameOverlapAreaAndAreaIncrease() {\n        // Given\n        when(Comparators.overlapArea(rectangle, list, g1)).thenReturn(10.0f);\n        when(Comparators.overlapArea(rectangle, list, g2)).thenReturn(10.0f);\n        when(Comparators.areaIncrease(rectangle, g1)).thenReturn(10.0);\n        when(Comparators.areaIncrease(rectangle, g2)).thenReturn(10.0);\n        when(Comparators.area(rectangle, g1)).thenReturn(100.0);\n        when(Comparators.area(rectangle, g2)).thenReturn(200.0);\n\n        // When\n        Comparator<HasGeometry> comparator = Comparators.overlapAreaThenAreaIncreaseThenAreaComparator(rectangle, list);\n\n        // Then\n        assertEquals(-1, comparator.compare(g1, g2));\n    }\n}\n"}]