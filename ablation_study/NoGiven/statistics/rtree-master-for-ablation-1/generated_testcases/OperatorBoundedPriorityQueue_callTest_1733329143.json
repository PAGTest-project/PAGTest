[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.internal.operators;\n\nimport com.github.davidmoten.rtree.internal.util.BoundedPriorityQueue;\nimport org.junit.Test;\nimport rx.Subscriber;\nimport rx.observers.TestSubscriber;\n\nimport java.util.Comparator;\n\nimport static org.mockito.Mockito.*;\n\npublic class OperatorBoundedPriorityQueue_callTest {\n\n    @Test\n    public void testCallMethod() {\n        // Given\n        int maximumSize = 5;\n        Comparator<Integer> comparator = Comparator.naturalOrder();\n        OperatorBoundedPriorityQueue<Integer> operator = new OperatorBoundedPriorityQueue<>(maximumSize, comparator);\n        TestSubscriber<Integer> child = new TestSubscriber<>();\n\n        // When\n        Subscriber<? super Integer> subscriber = operator.call(child);\n        subscriber.onStart();\n        subscriber.onNext(1);\n        subscriber.onNext(2);\n        subscriber.onCompleted();\n\n        // Then\n        child.assertNoErrors();\n        child.assertCompleted();\n        child.assertValues(1, 2);\n    }\n\n    @Test\n    public void testCallMethodWithUnsubscription() {\n        // Given\n        int maximumSize = 5;\n        Comparator<Integer> comparator = Comparator.naturalOrder();\n        OperatorBoundedPriorityQueue<Integer> operator = new OperatorBoundedPriorityQueue<>(maximumSize, comparator);\n        TestSubscriber<Integer> child = new TestSubscriber<>();\n\n        // When\n        Subscriber<? super Integer> subscriber = operator.call(child);\n        subscriber.onStart();\n        subscriber.onNext(1);\n        subscriber.unsubscribe();\n        subscriber.onNext(2);\n        subscriber.onCompleted();\n\n        // Then\n        child.assertNoErrors();\n        child.assertNotCompleted();\n        child.assertValues(1);\n    }\n\n    @Test\n    public void testCallMethodWithError() {\n        // Given\n        int maximumSize = 5;\n        Comparator<Integer> comparator = Comparator.naturalOrder();\n        OperatorBoundedPriorityQueue<Integer> operator = new OperatorBoundedPriorityQueue<>(maximumSize, comparator);\n        TestSubscriber<Integer> child = new TestSubscriber<>();\n\n        // When\n        Subscriber<? super Integer> subscriber = operator.call(child);\n        subscriber.onStart();\n        subscriber.onNext(1);\n        subscriber.onError(new RuntimeException(\"Test error\"));\n\n        // Then\n        child.assertError(RuntimeException.class);\n        child.assertNotCompleted();\n        child.assertValues(1);\n    }\n}\n"}]