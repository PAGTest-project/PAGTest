[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree.internal;\n\nimport com.github.davidmoten.rtree.Context;\nimport com.github.davidmoten.rtree.Entry;\nimport com.github.davidmoten.rtree.Leaf;\nimport com.github.davidmoten.rtree.Node;\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport com.github.davidmoten.rtree.geometry.ListPair;\nimport org.junit.Test;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class LeafHelper_addTest {\n\n    @Test\n    public void testAddWhenEntriesSizeLessThanMaxChildren() {\n        // Given\n        Entry<String, Geometry> entry = mock(Entry.class);\n        Leaf<String, Geometry> leaf = mock(Leaf.class);\n        Context<String, Geometry> context = mock(Context.class);\n        List<Entry<String, Geometry>> entries = Collections.emptyList();\n\n        when(leaf.entries()).thenReturn(entries);\n        when(leaf.context()).thenReturn(context);\n        when(context.maxChildren()).thenReturn(5);\n        when(context.factory()).thenReturn(mock(Context.Factory.class));\n        when(context.factory().createLeaf(anyList(), eq(context))).thenReturn(mock(Leaf.class));\n\n        // When\n        List<Node<String, Geometry>> result = LeafHelper.add(entry, leaf);\n\n        // Then\n        assertEquals(1, result.size());\n    }\n\n    @Test\n    public void testAddWhenEntriesSizeGreaterThanMaxChildren() {\n        // Given\n        Entry<String, Geometry> entry = mock(Entry.class);\n        Leaf<String, Geometry> leaf = mock(Leaf.class);\n        Context<String, Geometry> context = mock(Context.class);\n        List<Entry<String, Geometry>> entries = Collections.nCopies(6, mock(Entry.class));\n\n        when(leaf.entries()).thenReturn(entries);\n        when(leaf.context()).thenReturn(context);\n        when(context.maxChildren()).thenReturn(5);\n        when(context.minChildren()).thenReturn(2);\n        when(context.splitter()).thenReturn(mock(Context.Splitter.class));\n        when(context.splitter().split(anyList(), anyInt())).thenReturn(mock(ListPair.class));\n        when(context.factory()).thenReturn(mock(Context.Factory.class));\n        when(context.factory().createLeaf(anyList(), eq(context))).thenReturn(mock(Leaf.class));\n\n        // When\n        List<Node<String, Geometry>> result = LeafHelper.add(entry, leaf);\n\n        // Then\n        assertEquals(2, result.size());\n    }\n}\n"}]