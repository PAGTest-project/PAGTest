[{"uris": "src/test/java/com/github/davidmoten/rtree/GreekEarthquakes.java.GreekEarthquakes.[Observable<Entry<Object, Point>>]entries(Precision)", "name": "entries", "arg_nums": 1, "params": [{"name": "precision", "type": "Precision"}], "return_type": "Observable<Entry<Object, Point>>", "signature": "public static Observable<Entry<Object, Point>> entries(final Precision precision)", "original_string": "    public static Observable<Entry<Object, Point>> entries(final Precision precision) {\n        Observable<String> source = Observable.using(new Func0<InputStream>() {\n            @Override\n            public InputStream call() {\n                try {\n                    return new GZIPInputStream(GreekEarthquakes.class\n                            .getResourceAsStream(\"/greek-earthquakes-1964-2000.txt.gz\"));\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }, new Func1<InputStream, Observable<String>>() {\n            @Override\n            public Observable<String> call(InputStream is) {\n                return StringObservable.from(new InputStreamReader(is));\n            }\n        }, new Action1<InputStream>() {\n            @Override\n            public void call(InputStream is) {\n                try {\n                    is.close();\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        });\n        return StringObservable.split(source, \"\\n\")\n                .flatMap(new Func1<String, Observable<Entry<Object, Point>>>() {\n\n                    @Override\n                    public Observable<Entry<Object, Point>> call(String line) {\n                        if (line.trim().length() > 0) {\n                            String[] items = line.split(\" \");\n                            double lat = Double.parseDouble(items[0]);\n                            double lon = Double.parseDouble(items[1]);\n                            Entry<Object, Point> entry;\n                            if (precision == Precision.DOUBLE)\n                                entry = Entries.entry(new Object(), Geometries.point(lat, lon));\n                            else\n                                entry = Entries.entry(new Object(),\n                                        Geometries.point((float) lat, (float) lon));\n                            return Observable.just(entry);\n                        } else\n                            return Observable.empty();\n                    }\n                });\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/GreekEarthquakes.java", "class_name": "GreekEarthquakes", "class_uri": "src/test/java/com/github/davidmoten/rtree/GreekEarthquakes.java.GreekEarthquakes", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Observable<Entry<Object, Point>>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/GreekEarthquakes.java.GreekEarthquakes.[List<Entry<Object, Point>>]entriesList(Precision)", "name": "entriesList", "arg_nums": 1, "params": [{"name": "precision", "type": "Precision"}], "return_type": "List<Entry<Object, Point>>", "signature": "static List<Entry<Object, Point>> entriesList(Precision precision)", "original_string": "    static List<Entry<Object, Point>> entriesList(Precision precision) {\n        List<Entry<Object, Point>> result = entries(precision).toList().toBlocking().single();\n        System.out.println(\"loaded greek earthquakes into list\");\n        return result;\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/GreekEarthquakes.java", "class_name": "GreekEarthquakes", "class_uri": "src/test/java/com/github/davidmoten/rtree/GreekEarthquakes.java.GreekEarthquakes", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "List<Entry<Object, Point>>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/GreekEarthquakes.java.GreekEarthquakes.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws InterruptedException {\n        RTree<Object, Point> tree = RTree.star().create();\n        tree = tree.add(entries(Precision.SINGLE)).last().toBlocking().single();\n        System.gc();\n        Thread.sleep(10000000);\n        System.out.println(tree.size());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/GreekEarthquakes.java", "class_name": "GreekEarthquakes", "class_uri": "src/test/java/com/github/davidmoten/rtree/GreekEarthquakes.java.GreekEarthquakes", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004()", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Point>", "signature": "@Benchmark\n    public RTree<Object, Point> defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004()", "original_string": "    @Benchmark\n    public RTree<Object, Point> defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004() {\n        return insertPoint(defaultTreeM4);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[byte[]]createFlatBuffersByteArrayGreek()", "name": "createFlatBuffersByteArrayGreek", "arg_nums": 0, "params": [], "return_type": "byte[]", "signature": "private byte[] createFlatBuffersByteArrayGreek()", "original_string": "    private byte[] createFlatBuffersByteArrayGreek() {\n        RTree<Object, Point> tree = RTree.maxChildren(10).star().<Object, Point> create()\n                .add(entries);\n        final ByteArrayOutputStream os = new ByteArrayOutputStream();\n        Func1<Object, byte[]> serializer = new Func1<Object, byte[]>() {\n            @Override\n            public byte[] call(Object o) {\n                return new byte[0];\n            }\n        };\n        Func1<byte[], Object> deserializer = new Func1<byte[], Object>() {\n            @Override\n            public Object call(byte[] bytes) {\n                return null;\n            }\n        };\n        Serializer<Object, Point> fbSerializer = SerializerFlatBuffers.create(serializer,\n                deserializer);\n        try {\n            fbSerializer.write(tree, os);\n            os.close();\n            return os.toByteArray();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "byte[]", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]createFlatBuffersGreek()", "name": "createFlatBuffersGreek", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Point>", "signature": "private RTree<Object, Point> createFlatBuffersGreek()", "original_string": "    private RTree<Object, Point> createFlatBuffersGreek() {\n        Func1<Object, byte[]> serializer = new Func1<Object, byte[]>() {\n            @Override\n            public byte[] call(Object o) {\n                return new byte[0];\n            }\n        };\n        Func1<byte[], Object> deserializer = new Func1<byte[], Object>() {\n            @Override\n            public Object call(byte[] bytes) {\n                return null;\n            }\n        };\n        Serializer<Object, Point> fbSerializer = SerializerFlatBuffers.create(serializer,\n                deserializer);\n        try {\n            ByteArrayInputStream is = new ByteArrayInputStream(byteArrayGreek);\n            return fbSerializer.read(is, byteArrayGreek.length, InternalStructure.SINGLE_ARRAY);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]defaultRTreeCreation010()", "name": "defaultRTreeCreation010", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Point>", "signature": "@Benchmark\n    public RTree<Object, Point> defaultRTreeCreation010()", "original_string": "    @Benchmark\n    public RTree<Object, Point> defaultRTreeCreation010() {\n        return RTree.maxChildren(10).<Object, Point> create().add(entries);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]starRTreeCreation010()", "name": "starRTreeCreation010", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Point>", "signature": "@Benchmark\n    public RTree<Object, Point> starRTreeCreation010()", "original_string": "    @Benchmark\n    public RTree<Object, Point> starRTreeCreation010() {\n        return RTree.maxChildren(10).star().<Object, Point> create().add(entries);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]flatBufferRTreeCreation010()", "name": "flatBufferRTreeCreation010", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Point>", "signature": "@Benchmark\n    public RTree<Object, Point> flatBufferRTreeCreation010()", "original_string": "    @Benchmark\n    public RTree<Object, Point> flatBufferRTreeCreation010() {\n        return createFlatBuffersGreek();\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]bulkLoadingRTreeCreation010()", "name": "bulkLoadingRTreeCreation010", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Point>", "signature": "@Benchmark\n    public RTree<Object, Point> bulkLoadingRTreeCreation010()", "original_string": "    @Benchmark\n    public RTree<Object, Point> bulkLoadingRTreeCreation010() {\n        return RTree.maxChildren(10).<Object, Point> create(entries);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]bulkLoadingFullRTreeCreation010()", "name": "bulkLoadingFullRTreeCreation010", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Point>", "signature": "@Benchmark\n    public RTree<Object, Point> bulkLoadingFullRTreeCreation010()", "original_string": "    @Benchmark\n    public RTree<Object, Point> bulkLoadingFullRTreeCreation010() {\n        return RTree.maxChildren(10).loadingFactor(1.0).<Object, Point> create(entries);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren004(Blackhole)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren004", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void defaultRTreeSearchOfGreekDataPointsMaxChildren004(Blackhole bh)", "original_string": "    @Benchmark\n    public void defaultRTreeSearchOfGreekDataPointsMaxChildren004(Blackhole bh) {\n        searchGreek(defaultTreeM4, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010()", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Point>", "signature": "@Benchmark\n    public RTree<Object, Point> defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010()", "original_string": "    @Benchmark\n    public RTree<Object, Point> defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010() {\n        return insertPoint(defaultTreeM10);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren010(Blackhole)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren010", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void defaultRTreeSearchOfGreekDataPointsMaxChildren010(Blackhole bh)", "original_string": "    @Benchmark\n    public void defaultRTreeSearchOfGreekDataPointsMaxChildren010(Blackhole bh) {\n        searchGreek(defaultTreeM10, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004()", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Point>", "signature": "@Benchmark\n    public RTree<Object, Point> rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004()", "original_string": "    @Benchmark\n    public RTree<Object, Point> rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004() {\n        return insertPoint(starTreeM4);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010()", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Point>", "signature": "@Benchmark\n    public RTree<Object, Point> rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010()", "original_string": "    @Benchmark\n    public RTree<Object, Point> rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010() {\n        return insertPoint(starTreeM10);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]rStarTreeSearchOfGreekDataPointsMaxChildren004(Blackhole)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren004", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void rStarTreeSearchOfGreekDataPointsMaxChildren004(Blackhole bh)", "original_string": "    @Benchmark\n    public void rStarTreeSearchOfGreekDataPointsMaxChildren004(Blackhole bh) {\n        searchGreek(starTreeM4, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010(Blackhole)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void rStarTreeSearchOfGreekDataPointsMaxChildren010(Blackhole bh)", "original_string": "    @Benchmark\n    public void rStarTreeSearchOfGreekDataPointsMaxChildren010(Blackhole bh) {\n        searchGreek(starTreeM10, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers(Blackhole)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers(Blackhole bh)", "original_string": "    @Benchmark\n    public void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers(Blackhole bh) {\n        searchGreek(starTreeM10FlatBuffers, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure(Blackhole)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure(\n            Blackhole bh)", "original_string": "    @Benchmark\n    public void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure(\n            Blackhole bh) {\n        searchGreekBackpressure(starTreeM10FlatBuffers, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure(Blackhole)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure(Blackhole bh)", "original_string": "    @Benchmark\n    public void rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure(Blackhole bh) {\n        searchGreekWithBackpressure(starTreeM10, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032()", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Point>", "signature": "@Benchmark\n    public RTree<Object, Point> defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032()", "original_string": "    @Benchmark\n    public RTree<Object, Point> defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032() {\n        return insertPoint(defaultTreeM32);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren032(Blackhole)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren032", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void defaultRTreeSearchOfGreekDataPointsMaxChildren032(Blackhole bh)", "original_string": "    @Benchmark\n    public void defaultRTreeSearchOfGreekDataPointsMaxChildren032(Blackhole bh) {\n        searchGreek(defaultTreeM32, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032()", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Point>", "signature": "@Benchmark\n    public RTree<Object, Point> rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032()", "original_string": "    @Benchmark\n    public RTree<Object, Point> rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032() {\n        return insertPoint(starTreeM32);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]rStarTreeSearchOfGreekDataPointsMaxChildren032(Blackhole)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren032", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void rStarTreeSearchOfGreekDataPointsMaxChildren032(Blackhole bh)", "original_string": "    @Benchmark\n    public void rStarTreeSearchOfGreekDataPointsMaxChildren032(Blackhole bh) {\n        searchGreek(starTreeM32, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128()", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Point>", "signature": "@Benchmark\n    public RTree<Object, Point> defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128()", "original_string": "    @Benchmark\n    public RTree<Object, Point> defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128() {\n        return insertPoint(defaultTreeM128);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren128(Blackhole)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren128", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void defaultRTreeSearchOfGreekDataPointsMaxChildren128(Blackhole bh)", "original_string": "    @Benchmark\n    public void defaultRTreeSearchOfGreekDataPointsMaxChildren128(Blackhole bh) {\n        searchGreek(defaultTreeM128, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128()", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Point>", "signature": "@Benchmark\n    public RTree<Object, Point> rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128()", "original_string": "    @Benchmark\n    public RTree<Object, Point> rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128() {\n        return insertPoint(starTreeM128);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]rStarTreeSearchOfGreekDataPointsMaxChildren128(Blackhole)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren128", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void rStarTreeSearchOfGreekDataPointsMaxChildren128(Blackhole bh)", "original_string": "    @Benchmark\n    public void rStarTreeSearchOfGreekDataPointsMaxChildren128(Blackhole bh) {\n        searchGreek(starTreeM128, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Rectangle>]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004()", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Rectangle>", "signature": "@Benchmark\n    public RTree<Object, Rectangle> defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004()", "original_string": "    @Benchmark\n    public RTree<Object, Rectangle> defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004() {\n        return insertRectangle(smallDefaultTreeM4);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Rectangle>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]defaultRTreeSearchOf1000PointsMaxChildren004(Blackhole)", "name": "defaultRTreeSearchOf1000PointsMaxChildren004", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void defaultRTreeSearchOf1000PointsMaxChildren004(Blackhole bh)", "original_string": "    @Benchmark\n    public void defaultRTreeSearchOf1000PointsMaxChildren004(Blackhole bh) {\n        search(smallDefaultTreeM4, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Rectangle>]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010()", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Rectangle>", "signature": "@Benchmark\n    public RTree<Object, Rectangle> defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010()", "original_string": "    @Benchmark\n    public RTree<Object, Rectangle> defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010() {\n        return insertRectangle(smallDefaultTreeM10);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Rectangle>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]defaultRTreeSearchOf1000PointsMaxChildren010(Blackhole)", "name": "defaultRTreeSearchOf1000PointsMaxChildren010", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void defaultRTreeSearchOf1000PointsMaxChildren010(Blackhole bh)", "original_string": "    @Benchmark\n    public void defaultRTreeSearchOf1000PointsMaxChildren010(Blackhole bh) {\n        search(smallDefaultTreeM10, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Rectangle>]rStarTreeInsertOneEntryInto1000EntriesMaxChildren004()", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren004", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Rectangle>", "signature": "@Benchmark\n    public RTree<Object, Rectangle> rStarTreeInsertOneEntryInto1000EntriesMaxChildren004()", "original_string": "    @Benchmark\n    public RTree<Object, Rectangle> rStarTreeInsertOneEntryInto1000EntriesMaxChildren004() {\n        return insertRectangle(smallStarTreeM4);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Rectangle>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Rectangle>]rStarTreeInsertOneEntryInto1000EntriesMaxChildren010()", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren010", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Rectangle>", "signature": "@Benchmark\n    public RTree<Object, Rectangle> rStarTreeInsertOneEntryInto1000EntriesMaxChildren010()", "original_string": "    @Benchmark\n    public RTree<Object, Rectangle> rStarTreeInsertOneEntryInto1000EntriesMaxChildren010() {\n        return insertRectangle(smallStarTreeM10);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Rectangle>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]rStarTreeSearchOf1000PointsMaxChildren004(Blackhole)", "name": "rStarTreeSearchOf1000PointsMaxChildren004", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void rStarTreeSearchOf1000PointsMaxChildren004(Blackhole bh)", "original_string": "    @Benchmark\n    public void rStarTreeSearchOf1000PointsMaxChildren004(Blackhole bh) {\n        search(smallStarTreeM4, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]rStarTreeSearchOf1000PointsMaxChildren010(Blackhole)", "name": "rStarTreeSearchOf1000PointsMaxChildren010", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void rStarTreeSearchOf1000PointsMaxChildren010(Blackhole bh)", "original_string": "    @Benchmark\n    public void rStarTreeSearchOf1000PointsMaxChildren010(Blackhole bh) {\n        search(smallStarTreeM10, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Rectangle>]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032()", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Rectangle>", "signature": "@Benchmark\n    public RTree<Object, Rectangle> defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032()", "original_string": "    @Benchmark\n    public RTree<Object, Rectangle> defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032() {\n        return insertRectangle(smallDefaultTreeM32);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Rectangle>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]defaultRTreeSearchOf1000PointsMaxChildren032(Blackhole)", "name": "defaultRTreeSearchOf1000PointsMaxChildren032", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void defaultRTreeSearchOf1000PointsMaxChildren032(Blackhole bh)", "original_string": "    @Benchmark\n    public void defaultRTreeSearchOf1000PointsMaxChildren032(Blackhole bh) {\n        search(smallDefaultTreeM32, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Rectangle>]rStarTreeInsertOneEntryInto1000EntriesMaxChildren032()", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren032", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Rectangle>", "signature": "@Benchmark\n    public RTree<Object, Rectangle> rStarTreeInsertOneEntryInto1000EntriesMaxChildren032()", "original_string": "    @Benchmark\n    public RTree<Object, Rectangle> rStarTreeInsertOneEntryInto1000EntriesMaxChildren032() {\n        return insertRectangle(smallStarTreeM32);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Rectangle>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]rStarTreeSearchOf1000PointsMaxChildren032(Blackhole)", "name": "rStarTreeSearchOf1000PointsMaxChildren032", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void rStarTreeSearchOf1000PointsMaxChildren032(Blackhole bh)", "original_string": "    @Benchmark\n    public void rStarTreeSearchOf1000PointsMaxChildren032(Blackhole bh) {\n        search(smallStarTreeM32, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Rectangle>]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128()", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Rectangle>", "signature": "@Benchmark\n    public RTree<Object, Rectangle> defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128()", "original_string": "    @Benchmark\n    public RTree<Object, Rectangle> defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128() {\n        return insertRectangle(smallDefaultTreeM128);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Rectangle>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]defaultRTreeSearchOf1000PointsMaxChildren128(Blackhole)", "name": "defaultRTreeSearchOf1000PointsMaxChildren128", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void defaultRTreeSearchOf1000PointsMaxChildren128(Blackhole bh)", "original_string": "    @Benchmark\n    public void defaultRTreeSearchOf1000PointsMaxChildren128(Blackhole bh) {\n        search(smallDefaultTreeM128, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Rectangle>]rStarTreeInsertOneEntryInto1000EntriesMaxChildren128()", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren128", "arg_nums": 0, "params": [], "return_type": "RTree<Object, Rectangle>", "signature": "@Benchmark\n    public RTree<Object, Rectangle> rStarTreeInsertOneEntryInto1000EntriesMaxChildren128()", "original_string": "    @Benchmark\n    public RTree<Object, Rectangle> rStarTreeInsertOneEntryInto1000EntriesMaxChildren128() {\n        return insertRectangle(smallStarTreeM128);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<Object, Rectangle>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]rStarTreeSearchOf1000PointsMaxChildren128(Blackhole)", "name": "rStarTreeSearchOf1000PointsMaxChildren128", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void rStarTreeSearchOf1000PointsMaxChildren128(Blackhole bh)", "original_string": "    @Benchmark\n    public void rStarTreeSearchOf1000PointsMaxChildren128(Blackhole bh) {\n        search(smallStarTreeM128, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010()", "name": "rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Benchmark\n    public void rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010()", "original_string": "    @Benchmark\n    public void rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010() {\n        deleteAll(starTreeM10);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]searchNearestGreek(Blackhole)", "name": "searchNearestGreek", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "@Benchmark\n    public void searchNearestGreek(Blackhole bh)", "original_string": "    @Benchmark\n    public void searchNearestGreek(Blackhole bh) {\n        searchNearestGreek(starTreeM4, bh);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "@Benchmark\n    public", "marker_annotations": ["@Benchmark"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]deleteAll(RTree<Object, Point>)", "name": "deleteAll", "arg_nums": 1, "params": [{"name": "tree", "type": "RTree<Object, Point>"}], "return_type": "RTree<Object, Point>", "signature": "private RTree<Object, Point> deleteAll(RTree<Object, Point> tree)", "original_string": "    private RTree<Object, Point> deleteAll(RTree<Object, Point> tree) {\n        return tree.delete(entries.get(1000), true);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]search(RTree<Object, Rectangle>,Blackhole)", "name": "search", "arg_nums": 2, "params": [{"name": "tree", "type": "RTree<Object, Rectangle>"}, {"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "private void search(RTree<Object, Rectangle> tree, Blackhole bh)", "original_string": "    private void search(RTree<Object, Rectangle> tree, Blackhole bh) {\n        // returns 10 results\n        tree.search(Geometries.rectangle(500, 500, 630, 630)).subscribe(consumeWith(bh));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]searchGreek(RTree<Object, Point>,Blackhole)", "name": "searchGreek", "arg_nums": 2, "params": [{"name": "tree", "type": "RTree<Object, Point>"}, {"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "private void searchGreek(RTree<Object, Point> tree, Blackhole bh)", "original_string": "    private void searchGreek(RTree<Object, Point> tree, Blackhole bh) {\n        // should return 22 results\n        tree.search(Geometries.rectangle(40, 27.0, 40.5, 27.5)).subscribe(consumeWith(bh));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[Action1<Object>]consumeWith(Blackhole)", "name": "consumeWith", "arg_nums": 1, "params": [{"name": "bh", "type": "Blackhole"}], "return_type": "Action1<Object>", "signature": "private Action1<Object> consumeWith(final Blackhole bh)", "original_string": "    private Action1<Object> consumeWith(final Blackhole bh) {\n        return new Action1<Object>() {\n\n            @Override\n            public void call(Object t) {\n                bh.consume(t);\n            }\n        };\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Action1<Object>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]searchGreekBackpressure(RTree<Object, Point>,Blackhole)", "name": "searchGreekBackpressure", "arg_nums": 2, "params": [{"name": "tree", "type": "RTree<Object, Point>"}, {"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "private void searchGreekBackpressure(RTree<Object, Point> tree, Blackhole bh)", "original_string": "    private void searchGreekBackpressure(RTree<Object, Point> tree, Blackhole bh) {\n        // should return 22 results\n        final Rectangle r = searchRectangle();\n        tree.search(r).take(1000).subscribe(consumeWith(bh));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[Rectangle]searchRectangle()", "name": "searchRectangle", "arg_nums": 0, "params": [], "return_type": "Rectangle", "signature": "private static Rectangle searchRectangle()", "original_string": "    private static Rectangle searchRectangle() {\n        final Rectangle r;\n        if (precision == Precision.DOUBLE) {\n            r = Geometries.rectangle(40, 27.0, 40.5, 27.5);\n        } else {\n            r = Geometries.rectangle(40f, 27.0f, 40.5f, 27.5f);\n        }\n        return r;\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]searchNearestGreek(RTree<Object, Point>,Blackhole)", "name": "searchNearestGreek", "arg_nums": 2, "params": [{"name": "tree", "type": "RTree<Object, Point>"}, {"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "private void searchNearestGreek(RTree<Object, Point> tree, Blackhole bh)", "original_string": "    private void searchNearestGreek(RTree<Object, Point> tree, Blackhole bh) {\n        final Point p;\n        if (precision == Precision.DOUBLE) {\n            p = Geometries.point(40.0, 27.0);\n        } else {\n            p = Geometries.point(40.0f, 27.0f);\n        }\n        tree.nearest(p, 1, 300).subscribe(consumeWith(bh));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]searchGreekWithBackpressure(RTree<Object, Point>,Blackhole)", "name": "searchGreekWithBackpressure", "arg_nums": 2, "params": [{"name": "tree", "type": "RTree<Object, Point>"}, {"name": "bh", "type": "Blackhole"}], "return_type": "void", "signature": "private void searchGreekWithBackpressure(RTree<Object, Point> tree, final Blackhole bh)", "original_string": "    private void searchGreekWithBackpressure(RTree<Object, Point> tree, final Blackhole bh) {\n        // should return 22 results\n        tree.search(searchRectangle()).subscribe(new Subscriber<Object>() {\n\n            @Override\n            public void onStart() {\n                request(1);\n            }\n\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable arg0) {\n\n            }\n\n            @Override\n            public void onNext(Object t) {\n                request(1);\n                bh.consume(t);\n            }\n        });\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Rectangle>]insertRectangle(RTree<Object, Rectangle>)", "name": "insertRectangle", "arg_nums": 1, "params": [{"name": "tree", "type": "RTree<Object, Rectangle>"}], "return_type": "RTree<Object, Rectangle>", "signature": "private RTree<Object, Rectangle> insertRectangle(RTree<Object, Rectangle> tree)", "original_string": "    private RTree<Object, Rectangle> insertRectangle(RTree<Object, Rectangle> tree) {\n        return tree.add(new Object(), RTreeTest.random(precision));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "RTree<Object, Rectangle>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[RTree<Object, Point>]insertPoint(RTree<Object, Point>)", "name": "insertPoint", "arg_nums": 1, "params": [{"name": "tree", "type": "RTree<Object, Point>"}], "return_type": "RTree<Object, Point>", "signature": "private RTree<Object, Point> insertPoint(RTree<Object, Point> tree)", "original_string": "    private RTree<Object, Point> insertPoint(RTree<Object, Point> tree) {\n        if (precision == Precision.DOUBLE) {\n            return tree.add(new Object(),\n                    Geometries.point(Math.random() * 1000, Math.random() * 1000));\n        } else {\n            return tree.add(new Object(),\n                    Geometries.point((float) Math.random() * 1000, (float) Math.random() * 1000));\n        }\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "RTree<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        BenchmarksRTree b = new BenchmarksRTree();\n        System.out.println(\"starting searches\");\n        while (true)\n            b.starTreeM4.search(searchRectangle()).subscribe();\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java", "class_name": "BenchmarksRTree", "class_uri": "src/test/java/com/github/davidmoten/rtree/BenchmarksRTree.java.BenchmarksRTree", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testSaveFileException()", "name": "testSaveFileException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSaveFileException()", "original_string": "    public void testSaveFileException() throws IOException {\n        FileLock lock = null;\n        RandomAccessFile file = null;\n        try {\n            String filename = \"target/locked.png\";\n            File f = new File(filename);\n            f.createNewFile();\n            file = new RandomAccessFile(f, \"rw\");\n            lock = file.getChannel().lock();\n            RTree.create().visualize(600, 600).save(filename, \"PNG\");\n        } finally {\n            try {\n                lock.release();\n                file.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " @Test(expected = IOException.class)"}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[List<Entry<Object, Geometry>>]createRandomEntries(long)", "name": "createRandomEntries", "arg_nums": 1, "params": [{"name": "n", "type": "long"}], "return_type": "List<Entry<Object, Geometry>>", "signature": "static List<Entry<Object, Geometry>> createRandomEntries(long n)", "original_string": "    static List<Entry<Object, Geometry>> createRandomEntries(long n) {\n        List<Entry<Object, Geometry>> list = new ArrayList<Entry<Object, Geometry>>();\n        for (long i = 0; i < n; i++)\n            list.add(randomEntry());\n        return list;\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "List<Entry<Object, Geometry>>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[RTree<Object, Geometry>]createRandomRTree(long)", "name": "createRandomRTree", "arg_nums": 1, "params": [{"name": "n", "type": "long"}], "return_type": "RTree<Object, Geometry>", "signature": "static RTree<Object, Geometry> createRandomRTree(long n)", "original_string": "    static RTree<Object, Geometry> createRandomRTree(long n) {\n        RTree<Object, Geometry> tree = RTree.maxChildren(4).create();\n        for (long i = 0; i < n; i++) {\n            Entry<Object, Geometry> entry = randomEntry();\n            tree = tree.add(entry);\n        }\n        return tree;\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "RTree<Object, Geometry>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[Entry<Object, Geometry>]randomEntry()", "name": "randomEntry", "arg_nums": 0, "params": [], "return_type": "Entry<Object, Geometry>", "signature": "static Entry<Object, Geometry> randomEntry()", "original_string": "    static Entry<Object, Geometry> randomEntry() {\n        return entry(new Object(), (Geometry) random(Precision.SINGLE));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "Entry<Object, Geometry>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[Subscriber<Entry<Object, T>>]createBackpressureSubscriber(Collection<Entry<Object, T>>)", "name": "createBackpressureSubscriber", "arg_nums": 1, "params": [{"name": "collection", "type": "Collection<Entry<Object, T>>"}], "return_type": "Subscriber<Entry<Object, T>>", "signature": "private static <T extends Geometry> Subscriber<Entry<Object, T>> createBackpressureSubscriber(\n            final Collection<Entry<Object, T>> collection)", "original_string": "    private static <T extends Geometry> Subscriber<Entry<Object, T>> createBackpressureSubscriber(\n            final Collection<Entry<Object, T>> collection) {\n        return new Subscriber<Entry<Object, T>>() {\n\n            @Override\n            public void onStart() {\n                request(1);\n            }\n\n            @Override\n            public void onCompleted() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(Entry<Object, T> t) {\n                collection.add(t);\n                request(1);\n            }\n        };\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Subscriber<Entry<Object, T>>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[void]testBuiltTree(RTree<Object, Point>)", "name": "testBuiltTree", "arg_nums": 1, "params": [{"name": "tree", "type": "RTree<Object, Point>"}], "return_type": "void", "signature": "private void testBuiltTree(RTree<Object, Point> tree)", "original_string": "    private void testBuiltTree(RTree<Object, Point> tree) {\n        for (int i = 1; i <= 1000; i++) {\n            tree = tree.add(i, Geometries.point(i, i));\n        }\n        assertEquals(1000, (int) tree.entries().count().toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[RTree<Object, Rectangle>]create(int,int)", "name": "create", "arg_nums": 2, "params": [{"name": "maxChildren", "type": "int"}, {"name": "n", "type": "int"}], "return_type": "RTree<Object, Rectangle>", "signature": "private static RTree<Object, Rectangle> create(int maxChildren, int n)", "original_string": "    private static RTree<Object, Rectangle> create(int maxChildren, int n) {\n        RTree<Object, Rectangle> tree = RTree.maxChildren(maxChildren).create();\n        for (int i = 1; i <= n; i++)\n            tree = tree.add(e(i));\n        return tree;\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "RTree<Object, Rectangle>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[Func1<Entry<T, ?>, T>]toValue()", "name": "toValue", "arg_nums": 0, "params": [], "return_type": "Func1<Entry<T, ?>, T>", "signature": "private static <T> Func1<Entry<T, ?>, T> toValue()", "original_string": "    private static <T> Func1<Entry<T, ?>, T> toValue() {\n        return new Func1<Entry<T, ?>, T>() {\n\n            @Override\n            public T call(Entry<T, ?> entry) {\n                return entry.value();\n            }\n        };\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Func1<Entry<T, ?>, T>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[Point]nextPoint()", "name": "nextPoint", "arg_nums": 0, "params": [], "return_type": "Point", "signature": "private static Point nextPoint()", "original_string": "    private static Point nextPoint() {\n\n        double randomX = Math.round(Math.random() * 100);\n\n        double randomY = Math.round(Math.random() * 100);\n\n        return Geometries.point(randomX, randomY);\n\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Point", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[Entry<Object, Rectangle>]e(int)", "name": "e", "arg_nums": 1, "params": [{"name": "n", "type": "int"}], "return_type": "Entry<Object, Rectangle>", "signature": "static Entry<Object, Rectangle> e(int n)", "original_string": "    static Entry<Object, Rectangle> e(int n) {\n        return Entries.<Object, Rectangle>entry(n, r(n));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "Entry<Object, Rectangle>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[Entry<Object, Rectangle>]e2(int)", "name": "e2", "arg_nums": 1, "params": [{"name": "n", "type": "int"}], "return_type": "Entry<Object, Rectangle>", "signature": "static Entry<Object, Rectangle> e2(int n)", "original_string": "    static Entry<Object, Rectangle> e2(int n) {\n        return Entries.<Object, Rectangle>entry(n, r(n - 1));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "Entry<Object, Rectangle>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[Rectangle]r(int)", "name": "r", "arg_nums": 1, "params": [{"name": "n", "type": "int"}], "return_type": "Rectangle", "signature": "private static Rectangle r(int n)", "original_string": "    private static Rectangle r(int n) {\n        return rectangle(n, n, n + 1, n + 1);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[Rectangle]r(double,double)", "name": "r", "arg_nums": 2, "params": [{"name": "n", "type": "double"}, {"name": "m", "type": "double"}], "return_type": "Rectangle", "signature": "private static Rectangle r(double n, double m)", "original_string": "    private static Rectangle r(double n, double m) {\n        return rectangle(n, m, n + 1, m + 1);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[Rectangle]r(float,float)", "name": "r", "arg_nums": 2, "params": [{"name": "n", "type": "float"}, {"name": "m", "type": "float"}], "return_type": "Rectangle", "signature": "private static Rectangle r(float n, float m)", "original_string": "    private static Rectangle r(float n, float m) {\n        return rectangle(n, m, n + 1, m + 1);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest.[Rectangle]random(Precision)", "name": "random", "arg_nums": 1, "params": [{"name": "precision", "type": "Precision"}], "return_type": "Rectangle", "signature": "static Rectangle random(Precision precision)", "original_string": "    static Rectangle random(Precision precision) {\n        if (precision == Precision.SINGLE)\n            return r((float) Math.random() * 1000, (float) Math.random() * 1000);\n        else\n            return r(Math.random() * 1000, Math.random() * 1000);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "class_name": "RTreeTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java.RTreeTest", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest.[Mbr]r(int)", "name": "r", "arg_nums": 1, "params": [{"name": "n", "type": "int"}], "return_type": "Mbr", "signature": "private static Mbr r(int n)", "original_string": "    private static Mbr r(int n) {\n        return new Mbr(Geometries.rectangle(n, n, n + 1, n + 1));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java", "class_name": "QuadraticSplitterTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java.QuadraticSplitterTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Mbr", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java.LatLongExampleTest.[Observable<Entry<T, Point>>]search(RTree<T, Point>,Point,double)", "name": "search", "arg_nums": 3, "params": [{"name": "tree", "type": "RTree<T, Point>"}, {"name": "lonLat", "type": "Point"}, {"name": "distanceKm", "type": "double"}], "return_type": "Observable<Entry<T, Point>>", "signature": "public static <T> Observable<Entry<T, Point>> search(RTree<T, Point> tree, Point lonLat,\n            final double distanceKm)", "original_string": "    public static <T> Observable<Entry<T, Point>> search(RTree<T, Point> tree, Point lonLat,\n            final double distanceKm) {\n        // First we need to calculate an enclosing lat long rectangle for this\n        // distance then we refine on the exact distance\n        final Position from = Position.create(lonLat.y(), lonLat.x());\n        Rectangle bounds = createBounds(from, distanceKm);\n\n        return tree\n                // do the first search using the bounds\n                .search(bounds)\n                // refine using the exact distance\n                .filter(new Func1<Entry<T, Point>, Boolean>() {\n                    @Override\n                    public Boolean call(Entry<T, Point> entry) {\n                        Point p = entry.geometry();\n                        Position position = Position.create(p.y(), p.x());\n                        return from.getDistanceToKm(position) < distanceKm;\n                    }\n                });\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java", "class_name": "LatLongExampleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java.LatLongExampleTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Observable<Entry<T, Point>>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java.LatLongExampleTest.[Rectangle]createBounds(Position,double)", "name": "createBounds", "arg_nums": 2, "params": [{"name": "from", "type": "Position"}, {"name": "distanceKm", "type": "double"}], "return_type": "Rectangle", "signature": "private static Rectangle createBounds(final Position from, final double distanceKm)", "original_string": "    private static Rectangle createBounds(final Position from, final double distanceKm) {\n        // this calculates a pretty accurate bounding box. Depending on the\n        // performance you require you wouldn't have to be this accurate because\n        // accuracy is enforced later\n        Position north = from.predict(distanceKm, 0);\n        Position south = from.predict(distanceKm, 180);\n        Position east = from.predict(distanceKm, 90);\n        Position west = from.predict(distanceKm, 270);\n\n        return Geometries.rectangle(west.getLon(), south.getLat(), east.getLon(), north.getLat());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java", "class_name": "LatLongExampleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java.LatLongExampleTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java.LatLongExampleTest.[GeoCircleValue<T>]createGeoCircleValue(Point,double,T)", "name": "createGeoCircleValue", "arg_nums": 3, "params": [{"name": "point", "type": "Point"}, {"name": "radiusKm", "type": "double"}, {"name": "value", "type": "T"}], "return_type": "GeoCircleValue<T>", "signature": "private static <T> GeoCircleValue<T> createGeoCircleValue(Point point, double radiusKm,\n            T value)", "original_string": "    private static <T> GeoCircleValue<T> createGeoCircleValue(Point point, double radiusKm,\n            T value) {\n        return new GeoCircleValue<T>((float) point.y(), (float) point.x(), radiusKm, value);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java", "class_name": "LatLongExampleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java.LatLongExampleTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "GeoCircleValue<T>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java.LatLongExampleTest.[RTree<GeoCircleValue<T>, Rectangle>]add(RTree<GeoCircleValue<T>, Rectangle>,GeoCircleValue<T>)", "name": "add", "arg_nums": 2, "params": [{"name": "tree", "type": "RTree<GeoCircleValue<T>, Rectangle>"}, {"name": "c", "type": "GeoCircleValue<T>"}], "return_type": "RTree<GeoCircleValue<T>, Rectangle>", "signature": "private static <T> RTree<GeoCircleValue<T>, Rectangle> add(\n            RTree<GeoCircleValue<T>, Rectangle> tree, GeoCircleValue<T> c)", "original_string": "    private static <T> RTree<GeoCircleValue<T>, Rectangle> add(\n            RTree<GeoCircleValue<T>, Rectangle> tree, GeoCircleValue<T> c) {\n        return tree.add(c, createBounds(Position.create(c.lat, c.lon), c.radiusKm));\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java", "class_name": "LatLongExampleTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java.LatLongExampleTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "RTree<GeoCircleValue<T>, Rectangle>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]checkRoundTripPoint(Serializer<String, Point>)", "name": "checkRoundTripPoint", "arg_nums": 1, "params": [{"name": "serializer", "type": "Serializer<String, Point>"}], "return_type": "void", "signature": "private static void checkRoundTripPoint(Serializer<String, Point> serializer)", "original_string": "    private static void checkRoundTripPoint(Serializer<String, Point> serializer)\n            throws IOException {\n        Entry<String, Point> a = Entries.entry(\"hello\", Geometries.point(1, 2));\n        Entry<String, Point> b = Entries.entry(\"there\", Geometries.point(3, 4));\n        check(serializer, a, b);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest.[void]check(Serializer<String, S>,Entry<String, S>,Entry<String, S>)", "name": "check", "arg_nums": 3, "params": [{"name": "serializer", "type": "Serializer<String, S>"}, {"name": "a", "type": "Entry<String, S>"}, {"name": "b", "type": "Entry<String, S>"}], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    private static <S extends Geometry> void check(Serializer<String, S> serializer,\n            Entry<String, S> a, Entry<String, S> b)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    private static <S extends Geometry> void check(Serializer<String, S> serializer,\n            Entry<String, S> a, Entry<String, S> b) throws IOException {\n        RTree<String, S> tree = RTree.create();\n        tree = tree.add(a).add(b);\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        serializer.write(tree, bytes);\n        bytes.close();\n        {\n            ByteArrayInputStream input = new ByteArrayInputStream(bytes.toByteArray());\n            RTree<String, S> tree2 = serializer.read(input, bytes.size(),\n                    InternalStructure.DEFAULT);\n            assertEquals(2, tree2.size());\n            assertEquals(Sets.newHashSet(a, b),\n                    Sets.newHashSet(tree2.entries().toList().toBlocking().single()));\n        }\n        {\n            ByteArrayInputStream input = new ByteArrayInputStream(bytes.toByteArray());\n            RTree<String, S> tree2 = serializer.read(input, bytes.size(),\n                    InternalStructure.SINGLE_ARRAY);\n            assertEquals(2, tree2.size());\n            assertEquals(Sets.newHashSet(a, b),\n                    Sets.newHashSet(tree2.entries().toList().toBlocking().single()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "class_name": "SerializersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java.SerializersTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    private static", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/Utilities.java.Utilities.[List<Entry<Object, Rectangle>>]entries1000(Precision)", "name": "entries1000", "arg_nums": 1, "params": [{"name": "precision", "type": "Precision"}], "return_type": "List<Entry<Object, Rectangle>>", "signature": "static List<Entry<Object, Rectangle>> entries1000(Precision precision)", "original_string": "    static List<Entry<Object, Rectangle>> entries1000(Precision precision) {\n        List<Entry<Object, Rectangle>> list = new ArrayList<Entry<Object, Rectangle>>();\n        BufferedReader br = new BufferedReader(\n                new InputStreamReader(BenchmarksRTree.class.getResourceAsStream(\"/1000.txt\")));\n        String line;\n        try {\n            while ((line = br.readLine()) != null) {\n                String[] items = line.split(\" \");\n                double x = Double.parseDouble(items[0]);\n                double y = Double.parseDouble(items[1]);\n                Entry<Object, Rectangle> entry;\n                if (precision == Precision.DOUBLE)\n                    entry = Entries.entry(new Object(), Geometries.rectangle(x, y, x + 1, y + 1));\n                else\n                    entry = Entries.entry(new Object(), Geometries.rectangle((float) x, (float) y,\n                            (float) x + 1, (float) y + 1));\n                list.add(entry);\n            }\n            br.close();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return list;\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/Utilities.java", "class_name": "Utilities", "class_uri": "src/test/java/com/github/davidmoten/rtree/Utilities.java.Utilities", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "List<Entry<Object, Rectangle>>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/GalleryMain.java.GalleryMain.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Observable<Entry<Object, Point>> entries = GreekEarthquakes.entries(Precision.DOUBLE)\n                .cache();\n\n        List<Integer> sizes = Arrays.asList(100, 1000, 10000, 1000000);\n        List<Integer> maxChildrenValues = Arrays.asList(4, 8, 16, 32, 64, 128);\n        for (int size : sizes)\n            for (int maxChildren : maxChildrenValues) {\n                if (size > maxChildren) {\n                    System.out.println(\"saving \" + size + \" m=\" + maxChildren);\n                    RTree<Object, Point> tree = RTree.maxChildren(maxChildren)\n                            .<Object, Point>create().add(entries.take(size)).last().toBlocking()\n                            .single();\n                    tree.visualize(600, 600)\n                            .save(\"target/greek-\" + size + \"-\" + maxChildren + \"-quad.png\");\n                    RTree<Object, Point> tree2 = RTree.star().maxChildren(maxChildren)\n                            .<Object, Point>create().add(entries.take(size)).last().toBlocking()\n                            .single();\n                    tree2.visualize(600, 600)\n                            .save(\"target/greek-\" + size + \"-\" + maxChildren + \"-star.png\");\n                }\n            }\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/GalleryMain.java", "class_name": "GalleryMain", "class_uri": "src/test/java/com/github/davidmoten/rtree/GalleryMain.java.GalleryMain", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/Mbr.java.Mbr.[]Mbr(Rectangle)", "name": "Mbr", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "", "signature": "public Mbr(Rectangle r)", "original_string": "    public Mbr(Rectangle r) {\n        this.r = r;\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/Mbr.java", "class_name": "Mbr", "class_uri": "src/test/java/com/github/davidmoten/rtree/Mbr.java.Mbr", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/Mbr.java.Mbr.[Geometry]geometry()", "name": "geometry", "arg_nums": 0, "params": [], "return_type": "Geometry", "signature": "@Override\n    public Geometry geometry()", "original_string": "    @Override\n    public Geometry geometry() {\n        return r;\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/Mbr.java", "class_name": "Mbr", "class_uri": "src/test/java/com/github/davidmoten/rtree/Mbr.java.Mbr", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Geometry", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest.[Subscriber<Entry<Object, Rectangle>>]backpressureSubscriber(Set<Entry<Object, Rectangle>>)", "name": "backpressureSubscriber", "arg_nums": 1, "params": [{"name": "found", "type": "Set<Entry<Object, Rectangle>>"}], "return_type": "Subscriber<Entry<Object, Rectangle>>", "signature": "private static Subscriber<Entry<Object, Rectangle>> backpressureSubscriber(\n            final Set<Entry<Object, Rectangle>> found)", "original_string": "    private static Subscriber<Entry<Object, Rectangle>> backpressureSubscriber(\n            final Set<Entry<Object, Rectangle>> found) {\n        return new Subscriber<Entry<Object, Rectangle>>() {\n\n            @Override\n            public void onStart() {\n                request(1);\n            }\n\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(Entry<Object, Rectangle> t) {\n                found.add(t);\n                request(1);\n            }\n        };\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java", "class_name": "BackpressureTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java.BackpressureTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Subscriber<Entry<Object, Rectangle>>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/StringSplitTest.java.StringSplitTest.[void]testSplitOnEmptyStream()", "name": "testSplitOnEmptyStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSplitOnEmptyStream()", "original_string": "    public void testSplitOnEmptyStream() {\n        assertEquals(0, (int) StringObservable.split(Observable.<String> empty(), \"\\n\").count()\n                .toBlocking().single());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/StringSplitTest.java", "class_name": "StringSplitTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/StringSplitTest.java.StringSplitTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " @Test"}, {"uris": "src/test/java/com/github/davidmoten/rtree/StringSplitTest.java.StringSplitTest.[void]testSplitOnStreamThatThrowsExceptionImmediately()", "name": "testSplitOnStreamThatThrowsExceptionImmediately", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSplitOnStreamThatThrowsExceptionImmediately()", "original_string": "    public void testSplitOnStreamThatThrowsExceptionImmediately() {\n        RuntimeException ex = new RuntimeException(\"boo\");\n        try {\n            StringObservable.split(Observable.<String> error(ex), \"\\n\").count().toBlocking()\n                    .single();\n            fail();\n        } catch (RuntimeException e) {\n            assertEquals(ex, e);\n        }\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/StringSplitTest.java", "class_name": "StringSplitTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/StringSplitTest.java.StringSplitTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " @Test"}, {"uris": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest.[void]roundTrip(InternalStructure,boolean)", "name": "roundTrip", "arg_nums": 2, "params": [{"name": "structure", "type": "InternalStructure"}, {"name": "backpressure", "type": "boolean"}], "return_type": "void", "signature": "private void roundTrip(InternalStructure structure, boolean backpressure)", "original_string": "    private void roundTrip(InternalStructure structure, boolean backpressure) throws Exception {\n        RTree<Object, Point> tree = RTree.star().maxChildren(10).create();\n        tree = tree.add(GreekEarthquakes.entries(Precision.SINGLE)).last().toBlocking().single();\n        long t = System.currentTimeMillis();\n        File file = new File(\"target/file\");\n        FileOutputStream os = new FileOutputStream(file);\n        Serializer<Object, Point> fbSerializer = createSerializer();\n\n        serialize(tree, t, file, os, fbSerializer);\n\n        deserialize(structure, file, fbSerializer, backpressure);\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java", "class_name": "SerializerFlatBuffersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest.[Serializer<Object, Point>]createSerializer()", "name": "createSerializer", "arg_nums": 0, "params": [], "return_type": "Serializer<Object, Point>", "signature": "private static Serializer<Object, Point> createSerializer()", "original_string": "    private static Serializer<Object, Point> createSerializer() {\n        Func1<Object, byte[]> serializer = new Func1<Object, byte[]>() {\n            @Override\n            public byte[] call(Object o) {\n                return EMPTY;\n            }\n        };\n        Func1<byte[], Object> deserializer = new Func1<byte[], Object>() {\n            @Override\n            public Object call(byte[] bytes) {\n                return null;\n            }\n        };\n        Serializer<Object, Point> fbSerializer = SerializerFlatBuffers.create(serializer,\n                deserializer);\n        return fbSerializer;\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java", "class_name": "SerializerFlatBuffersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Serializer<Object, Point>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest.[void]serialize(RTree<Object, Point>,long,File,FileOutputStream,Serializer<Object, Point>)", "name": "serialize", "arg_nums": 5, "params": [{"name": "tree", "type": "RTree<Object, Point>"}, {"name": "t", "type": "long"}, {"name": "file", "type": "File"}, {"name": "os", "type": "FileOutputStream"}, {"name": "fbSerializer", "type": "Serializer<Object, Point>"}], "return_type": "void", "signature": "private static void serialize(RTree<Object, Point> tree, long t, File file, FileOutputStream os,\n            Serializer<Object, Point> fbSerializer)", "original_string": "    private static void serialize(RTree<Object, Point> tree, long t, File file, FileOutputStream os,\n            Serializer<Object, Point> fbSerializer) throws IOException {\n        fbSerializer.write(tree, os);\n        os.close();\n        System.out.println(\"written in \" + (System.currentTimeMillis() - t) + \"ms, \" + \"file size=\"\n                + file.length() / 1000000.0 + \"MB\");\n        System.out.println(\"bytes per entry=\" + file.length() / tree.size());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java", "class_name": "SerializerFlatBuffersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest.[void]deserialize(InternalStructure,File,Serializer<Object, Point>,boolean)", "name": "deserialize", "arg_nums": 4, "params": [{"name": "structure", "type": "InternalStructure"}, {"name": "file", "type": "File"}, {"name": "fbSerializer", "type": "Serializer<Object, Point>"}, {"name": "backpressure", "type": "boolean"}], "return_type": "void", "signature": "private static void deserialize(InternalStructure structure, File file,\n            Serializer<Object, Point> fbSerializer, boolean backpressure)", "original_string": "    private static void deserialize(InternalStructure structure, File file,\n            Serializer<Object, Point> fbSerializer, boolean backpressure) throws Exception {\n        long t = System.currentTimeMillis();\n        InputStream is = new FileInputStream(file);\n        t = System.currentTimeMillis();\n        RTree<Object, Point> tr = fbSerializer.read(is, file.length(), structure);\n        System.out.println(tr.root().get());\n\n        System.out.println(\"read in \" + (System.currentTimeMillis() - t) + \"ms\");\n        Observable<Entry<Object, Point>> o = tr.search(Geometries.rectangle(40, 27.0, 40.5, 27.5));\n        if (backpressure)\n            o = o.take(10000);\n        int found = o.count().toBlocking().single();\n        System.out.println(\"found=\" + found);\n        assertEquals(22, found);\n        System.out.println(tr.size());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java", "class_name": "SerializerFlatBuffersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws Exception {\n        // use this with jvisualvm and heap dump, find biggest objects to check\n        // memory usage of rtree\n        // deserialize(InternalStructure.FLATBUFFERS_SINGLE_ARRAY, new\n        // File(\"target/file\"),\n        // createSerializer());\n    }", "default_arguments": null, "file": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java", "class_name": "SerializerFlatBuffersTest", "class_uri": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java.SerializerFlatBuffersTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/SelectorRStar.java.SelectorRStar.[Node<T, S>]select(Geometry,List<? extends Node<T, S>>)", "name": "select", "arg_nums": 2, "params": [{"name": "g", "type": "Geometry"}, {"name": "nodes", "type": "List<? extends Node<T, S>>"}], "return_type": "Node<T, S>", "signature": "@Override\n    public <T, S extends Geometry> Node<T, S> select(Geometry g, List<? extends Node<T, S>> nodes)", "original_string": "    @Override\n    public <T, S extends Geometry> Node<T, S> select(Geometry g, List<? extends Node<T, S>> nodes) {\n        boolean leafNodes = nodes.get(0) instanceof Leaf;\n        if (leafNodes)\n            return overlapAreaSelector.select(g, nodes);\n        else\n            return areaIncreaseSelector.select(g, nodes);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SelectorRStar.java", "class_name": "SelectorRStar", "class_uri": "src/main/java/com/github/davidmoten/rtree/SelectorRStar.java.SelectorRStar", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Node<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/NonLeafFactory.java.NonLeafFactory.[NonLeaf<T, S>]createNonLeaf(List<? extends Node<T, S>>,Context<T, S>)", "name": "createNonLeaf", "arg_nums": 2, "params": [{"name": "children", "type": "List<? extends Node<T, S>>"}, {"name": "context", "type": "Context<T, S>"}], "return_type": "NonLeaf<T, S>", "signature": "NonLeaf<T, S> createNonLeaf(List<? extends Node<T, S>> children, Context<T, S> context)", "original_string": "    NonLeaf<T, S> createNonLeaf(List<? extends Node<T, S>> children, Context<T, S> context);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/NonLeafFactory.java", "class_name": "NonLeafFactory", "class_uri": "src/main/java/com/github/davidmoten/rtree/NonLeafFactory.java.NonLeafFactory", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "NonLeaf<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/SelectorMinimalOverlapArea.java.SelectorMinimalOverlapArea.[Node<T, S>]select(Geometry,List<? extends Node<T, S>>)", "name": "select", "arg_nums": 2, "params": [{"name": "g", "type": "Geometry"}, {"name": "nodes", "type": "List<? extends Node<T, S>>"}], "return_type": "Node<T, S>", "signature": "@Override\n    public <T, S extends Geometry> Node<T, S> select(Geometry g, List<? extends Node<T, S>> nodes)", "original_string": "    @Override\n    public <T, S extends Geometry> Node<T, S> select(Geometry g, List<? extends Node<T, S>> nodes) {\n        return min(nodes,\n                Comparators.overlapAreaThenAreaIncreaseThenAreaComparator(g.mbr(), nodes));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SelectorMinimalOverlapArea.java", "class_name": "SelectorMinimalOverlapArea", "class_uri": "src/main/java/com/github/davidmoten/rtree/SelectorMinimalOverlapArea.java.SelectorMinimalOverlapArea", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Node<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/NodePosition.java.NodePosition.[]NodePosition(Node<T, S>,int)", "name": "NodePosition", "arg_nums": 2, "params": [{"name": "node", "type": "Node<T, S>"}, {"name": "position", "type": "int"}], "return_type": "", "signature": "NodePosition(Node<T, S> node, int position)", "original_string": "    NodePosition(Node<T, S> node, int position) {\n        Preconditions.checkNotNull(node);\n        this.node = node;\n        this.position = position;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/NodePosition.java", "class_name": "NodePosition", "class_uri": "src/main/java/com/github/davidmoten/rtree/NodePosition.java.NodePosition", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/NodePosition.java.NodePosition.[Node<T, S>]node()", "name": "node", "arg_nums": 0, "params": [], "return_type": "Node<T, S>", "signature": "Node<T, S> node()", "original_string": "    Node<T, S> node() {\n        return node;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/NodePosition.java", "class_name": "NodePosition", "class_uri": "src/main/java/com/github/davidmoten/rtree/NodePosition.java.NodePosition", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Node<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/NodePosition.java.NodePosition.[int]position()", "name": "position", "arg_nums": 0, "params": [], "return_type": "int", "signature": "int position()", "original_string": "    int position() {\n        return position;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/NodePosition.java", "class_name": "NodePosition", "class_uri": "src/main/java/com/github/davidmoten/rtree/NodePosition.java.NodePosition", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/NodePosition.java.NodePosition.[NodePosition<T, S>]nextPosition()", "name": "nextPosition", "arg_nums": 0, "params": [], "return_type": "NodePosition<T, S>", "signature": "NodePosition<T, S> nextPosition()", "original_string": "    NodePosition<T, S> nextPosition() {\n        return new NodePosition<T, S>(node, position + 1);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/NodePosition.java", "class_name": "NodePosition", "class_uri": "src/main/java/com/github/davidmoten/rtree/NodePosition.java.NodePosition", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "NodePosition<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/NodePosition.java.NodePosition.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        String builder = \"NodePosition [node=\" +\n                node +\n                \", position=\" +\n                position +\n                \"]\";\n        return builder;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/NodePosition.java", "class_name": "NodePosition", "class_uri": "src/main/java/com/github/davidmoten/rtree/NodePosition.java.NodePosition", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Serializer.java.Serializer.[void]write(RTree<T, S>,OutputStream)", "name": "write", "arg_nums": 2, "params": [{"name": "tree", "type": "RTree<T, S>"}, {"name": "os", "type": "OutputStream"}], "return_type": "void", "signature": "void write(RTree<T, S> tree, OutputStream os)", "original_string": "    void write(RTree<T, S> tree, OutputStream os) throws IOException;", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Serializer.java", "class_name": "Serializer", "class_uri": "src/main/java/com/github/davidmoten/rtree/Serializer.java.Serializer", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Serializer.java.Serializer.[RTree<T, S>]read(InputStream,long,InternalStructure)", "name": "read", "arg_nums": 3, "params": [{"name": "is", "type": "InputStream"}, {"name": "sizeBytes", "type": "long"}, {"name": "structure", "type": "InternalStructure"}], "return_type": "RTree<T, S>", "signature": "RTree<T, S> read(InputStream is, long sizeBytes, InternalStructure structure)", "original_string": "    RTree<T, S> read(InputStream is, long sizeBytes, InternalStructure structure)\n            throws IOException;", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Serializer.java", "class_name": "Serializer", "class_uri": "src/main/java/com/github/davidmoten/rtree/Serializer.java.Serializer", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer.[]Visualizer(RTree<?, Geometry>,int,int,Rectangle)", "name": "Visualizer", "arg_nums": 4, "params": [{"name": "tree", "type": "RTree<?, Geometry>"}, {"name": "width", "type": "int"}, {"name": "height", "type": "int"}, {"name": "view", "type": "Rectangle"}], "return_type": "", "signature": "Visualizer(RTree<?, Geometry> tree, int width, int height, Rectangle view)", "original_string": "    Visualizer(RTree<?, Geometry> tree, int width, int height, Rectangle view) {\n        this.tree = tree;\n        this.width = width;\n        this.height = height;\n        this.view = view;\n        this.maxDepth = calculateMaxDepth(tree.root());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Visualizer.java", "class_name": "Visualizer", "class_uri": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer.[int]calculateMaxDepth(Optional<? extends Node<R, S>>)", "name": "calculateMaxDepth", "arg_nums": 1, "params": [{"name": "root", "type": "Optional<? extends Node<R, S>>"}], "return_type": "int", "signature": "private static <R, S extends Geometry> int calculateMaxDepth(\n            Optional<? extends Node<R, S>> root)", "original_string": "    private static <R, S extends Geometry> int calculateMaxDepth(\n            Optional<? extends Node<R, S>> root) {\n        if (!root.isPresent()) {\n            return 0;\n        } else {\n            return calculateDepth(root.get(), 0);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Visualizer.java", "class_name": "Visualizer", "class_uri": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer.[int]calculateDepth(Node<R, S>,int)", "name": "calculateDepth", "arg_nums": 2, "params": [{"name": "node", "type": "Node<R, S>"}, {"name": "depth", "type": "int"}], "return_type": "int", "signature": "private static <R, S extends Geometry> int calculateDepth(Node<R, S> node, int depth)", "original_string": "    private static <R, S extends Geometry> int calculateDepth(Node<R, S> node, int depth) {\n        if (node instanceof Leaf) {\n            return depth + 1;\n        } else {\n            return calculateDepth(((NonLeaf<R, S>) node).child(0), depth + 1);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Visualizer.java", "class_name": "Visualizer", "class_uri": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer.[BufferedImage]createImage()", "name": "createImage", "arg_nums": 0, "params": [], "return_type": "BufferedImage", "signature": "public BufferedImage createImage()", "original_string": "    public BufferedImage createImage() {\n        final BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n        final Graphics2D g = (Graphics2D) image.getGraphics();\n        g.setBackground(Color.white);\n        g.clearRect(0, 0, width, height);\n        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.75f));\n\n        if (tree.root().isPresent()) {\n            final List<RectangleDepth> nodeDepths = getNodeDepthsSortedByDepth(tree.root().get());\n            drawNode(g, nodeDepths);\n        }\n        return image;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Visualizer.java", "class_name": "Visualizer", "class_uri": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BufferedImage", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer.[List<RectangleDepth>]getNodeDepthsSortedByDepth(Node<T, S>)", "name": "getNodeDepthsSortedByDepth", "arg_nums": 1, "params": [{"name": "root", "type": "Node<T, S>"}], "return_type": "List<RectangleDepth>", "signature": "private <T, S extends Geometry> List<RectangleDepth> getNodeDepthsSortedByDepth(\n            Node<T, S> root)", "original_string": "    private <T, S extends Geometry> List<RectangleDepth> getNodeDepthsSortedByDepth(\n            Node<T, S> root) {\n        final List<RectangleDepth> list = getRectangleDepths(root, 0);\n        list.sort(Comparator.comparing(RectangleDepth::getDepth));\n        return list;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Visualizer.java", "class_name": "Visualizer", "class_uri": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "List<RectangleDepth>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer.[List<RectangleDepth>]getRectangleDepths(Node<T, S>,int)", "name": "getRectangleDepths", "arg_nums": 2, "params": [{"name": "node", "type": "Node<T, S>"}, {"name": "depth", "type": "int"}], "return_type": "List<RectangleDepth>", "signature": "private <T, S extends Geometry> List<RectangleDepth> getRectangleDepths(Node<T, S> node,\n            int depth)", "original_string": "    private <T, S extends Geometry> List<RectangleDepth> getRectangleDepths(Node<T, S> node,\n            int depth) {\n        final List<RectangleDepth> list = new ArrayList<RectangleDepth>();\n        list.add(new RectangleDepth(node.geometry().mbr(), depth));\n        if (node instanceof Leaf) {\n            final Leaf<T, S> leaf = (Leaf<T, S>) node;\n            for (final Entry<T, S> entry : leaf.entries()) {\n                list.add(new RectangleDepth(entry.geometry().mbr(), depth + 2));\n            }\n        } else {\n            final NonLeaf<T, S> n = (NonLeaf<T, S>) node;\n            for (int i = 0; i < n.count(); i++) {\n                list.addAll(getRectangleDepths(n.child(i), depth + 1));\n            }\n        }\n        return list;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Visualizer.java", "class_name": "Visualizer", "class_uri": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "List<RectangleDepth>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer.[void]drawNode(Graphics2D,List<RectangleDepth>)", "name": "drawNode", "arg_nums": 2, "params": [{"name": "g", "type": "Graphics2D"}, {"name": "nodes", "type": "List<RectangleDepth>"}], "return_type": "void", "signature": "private void drawNode(Graphics2D g, List<RectangleDepth> nodes)", "original_string": "    private void drawNode(Graphics2D g, List<RectangleDepth> nodes) {\n        for (final RectangleDepth node : nodes) {\n            final Color color = Color.getHSBColor(node.getDepth() / (maxDepth + 1f), 1f, 1f);\n            g.setStroke(new BasicStroke(Math.max(0.5f, maxDepth - node.getDepth() + 1 - 1)));\n            g.setColor(color);\n            final Rectangle r = node.getRectangle();\n            drawRectangle(g, r);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Visualizer.java", "class_name": "Visualizer", "class_uri": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer.[void]drawRectangle(Graphics2D,Rectangle)", "name": "drawRectangle", "arg_nums": 2, "params": [{"name": "g", "type": "Graphics2D"}, {"name": "r", "type": "Rectangle"}], "return_type": "void", "signature": "private void drawRectangle(Graphics2D g, Rectangle r)", "original_string": "    private void drawRectangle(Graphics2D g, Rectangle r) {\n        final double x1 = (r.x1() - view.x1()) / (view.x2() - view.x1()) * width;\n        final double y1 = (r.y1() - view.y1()) / (view.y2() - view.y1()) * height;\n        final double x2 = (r.x2() - view.x1()) / (view.x2() - view.x1()) * width;\n        final double y2 = (r.y2() - view.y1()) / (view.y2() - view.y1()) * height;\n        g.drawRect(rnd(x1), rnd(y1), Math.max(rnd(x2 - x1), 1), Math.max(rnd(y2 - y1), 1));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Visualizer.java", "class_name": "Visualizer", "class_uri": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer.[int]rnd(double)", "name": "rnd", "arg_nums": 1, "params": [{"name": "d", "type": "double"}], "return_type": "int", "signature": "private static int rnd(double d)", "original_string": "    private static int rnd(double d) {\n        return (int) Math.round(d);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Visualizer.java", "class_name": "Visualizer", "class_uri": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer.[void]save(File,String)", "name": "save", "arg_nums": 2, "params": [{"name": "file", "type": "File"}, {"name": "imageFormat", "type": "String"}], "return_type": "void", "signature": "public void save(File file, String imageFormat)", "original_string": "    public void save(File file, String imageFormat) {\n        ImageSaver.save(createImage(), file, imageFormat);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Visualizer.java", "class_name": "Visualizer", "class_uri": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer.[void]save(String,String)", "name": "save", "arg_nums": 2, "params": [{"name": "filename", "type": "String"}, {"name": "imageFormat", "type": "String"}], "return_type": "void", "signature": "public void save(String filename, String imageFormat)", "original_string": "    public void save(String filename, String imageFormat) {\n        save(new File(filename), imageFormat);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Visualizer.java", "class_name": "Visualizer", "class_uri": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer.[void]save(String)", "name": "save", "arg_nums": 1, "params": [{"name": "filename", "type": "String"}], "return_type": "void", "signature": "public void save(String filename)", "original_string": "    public void save(String filename) {\n        save(new File(filename), \"PNG\");\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Visualizer.java", "class_name": "Visualizer", "class_uri": "src/main/java/com/github/davidmoten/rtree/Visualizer.java.Visualizer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Serializers.java.Serializers.[]Serializers()", "name": "Serializers", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Serializers()", "original_string": "    private Serializers() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Serializers.java", "class_name": "Serializers", "class_uri": "src/main/java/com/github/davidmoten/rtree/Serializers.java.Serializers", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Serializers.java.Serializers.[SerializerBuilder]flatBuffers()", "name": "flatBuffers", "arg_nums": 0, "params": [], "return_type": "SerializerBuilder", "signature": "public static <T, S extends Geometry> SerializerBuilder flatBuffers()", "original_string": "    public static <T, S extends Geometry> SerializerBuilder flatBuffers() {\n        return new SerializerBuilder().method(Method.FLATBUFFERS);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Serializers.java", "class_name": "Serializers", "class_uri": "src/main/java/com/github/davidmoten/rtree/Serializers.java.Serializers", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "SerializerBuilder", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Serializers.java.Serializers.[Func1<String, byte[]>]createStringSerializer(Charset)", "name": "createStringSerializer", "arg_nums": 1, "params": [{"name": "charset", "type": "Charset"}], "return_type": "Func1<String, byte[]>", "signature": "private static Func1<String, byte[]> createStringSerializer(final Charset charset)", "original_string": "    private static Func1<String, byte[]> createStringSerializer(final Charset charset) {\n        return new Func1<String, byte[]>() {\n            @Override\n            public byte[] call(String s) {\n                return s.getBytes(charset);\n            }\n        };\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Serializers.java", "class_name": "Serializers", "class_uri": "src/main/java/com/github/davidmoten/rtree/Serializers.java.Serializers", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Func1<String, byte[]>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Serializers.java.Serializers.[Func1<byte[], String>]createStringDeserializer(Charset)", "name": "createStringDeserializer", "arg_nums": 1, "params": [{"name": "charset", "type": "Charset"}], "return_type": "Func1<byte[], String>", "signature": "private static <T> Func1<byte[], String> createStringDeserializer(final Charset charset)", "original_string": "    private static <T> Func1<byte[], String> createStringDeserializer(final Charset charset) {\n        return new Func1<byte[], String>() {\n            @Override\n            public String call(byte[] bytes) {\n                return new String(bytes, charset);\n            }\n        };\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Serializers.java", "class_name": "Serializers", "class_uri": "src/main/java/com/github/davidmoten/rtree/Serializers.java.Serializers", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Func1<byte[], String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Serializers.java.Serializers.[Func1<Serializable, byte[]>]javaIoSerializer()", "name": "javaIoSerializer", "arg_nums": 0, "params": [], "return_type": "Func1<Serializable, byte[]>", "signature": "private static Func1<Serializable, byte[]> javaIoSerializer()", "original_string": "    private static Func1<Serializable, byte[]> javaIoSerializer() {\n        return new Func1<Serializable, byte[]>() {\n            @Override\n            public byte[] call(Serializable o) {\n                ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n                ObjectOutputStream oos = null;\n                try {\n                    oos = new ObjectOutputStream(bytes);\n                    oos.writeObject(o);\n                    oos.close();\n                    return bytes.toByteArray();\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                } finally {\n                    try {\n                        if (oos != null)\n                            oos.close();\n                    } catch (IOException e) {\n                        // ignore\n                    }\n                }\n            }\n        };\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Serializers.java", "class_name": "Serializers", "class_uri": "src/main/java/com/github/davidmoten/rtree/Serializers.java.Serializers", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Func1<Serializable, byte[]>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Serializers.java.Serializers.[Func1<byte[], Serializable>]javaIoDeserializer()", "name": "javaIoDeserializer", "arg_nums": 0, "params": [], "return_type": "Func1<byte[], Serializable>", "signature": "private static Func1<byte[], Serializable> javaIoDeserializer()", "original_string": "    private static Func1<byte[], Serializable> javaIoDeserializer() {\n        return new Func1<byte[], Serializable>() {\n            @Override\n            public Serializable call(byte[] bytes) {\n                ByteArrayInputStream is = new ByteArrayInputStream(bytes);\n                ObjectInputStream ois = null;\n                try {\n                    ois = new ObjectInputStream(is);\n                    return (Serializable) ois.readObject();\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                } catch (ClassNotFoundException e) {\n                    throw new RuntimeException(e);\n                } finally {\n                    if (ois != null)\n                        try {\n                            ois.close();\n                        } catch (IOException e) {\n                            // ignore\n                        }\n                }\n            }\n        };\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Serializers.java", "class_name": "Serializers", "class_uri": "src/main/java/com/github/davidmoten/rtree/Serializers.java.Serializers", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Func1<byte[], Serializable>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java.SplitterRStar.[]SplitterRStar()", "name": "SplitterRStar", "arg_nums": 0, "params": [], "return_type": "", "signature": "public SplitterRStar()", "original_string": "    public SplitterRStar() {\n        this.comparator = new Comparator<ListPair<?>>() {\n\n            @Override\n            public int compare(ListPair<?> p1, ListPair<?> p2) {\n                // check overlap first then areaSum\n                int value = Double.compare(overlap(p1), overlap(p2));\n                if (value == 0) {\n                    return Double.compare(p1.areaSum(), p2.areaSum());\n                } else {\n                    return value;\n                }\n            }\n        };\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java", "class_name": "SplitterRStar", "class_uri": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java.SplitterRStar", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java.SplitterRStar.[ListPair<T>]split(List<T>,int)", "name": "split", "arg_nums": 2, "params": [{"name": "items", "type": "List<T>"}, {"name": "minSize", "type": "int"}], "return_type": "ListPair<T>", "signature": "@Override\n    public <T extends HasGeometry> ListPair<T> split(List<T> items, int minSize)", "original_string": "    @Override\n    public <T extends HasGeometry> ListPair<T> split(List<T> items, int minSize) {\n        Preconditions.checkArgument(!items.isEmpty());\n        // sort nodes into increasing x, calculate min overlap where both groups\n        // have more than minChildren\n\n        // compute S the sum of all margin-values of the lists above\n        // the list with the least S is then used to find minimum overlap\n\n        List<ListPair<T>> pairs = null;\n        double lowestMarginSum = Double.POSITIVE_INFINITY;\n        List<T> list = null;\n        for (SortType sortType : SortType.values()) {\n            if (list == null) {\n                list = new ArrayList<T>(items);\n            }\n            Collections.sort(list, comparator(sortType));\n            List<ListPair<T>> p = getPairs(minSize, list);\n            double marginSum = marginValueSum(p);\n            if (marginSum <= lowestMarginSum) {\n                lowestMarginSum = marginSum;\n                pairs = p;\n                // because p uses subViews of list we need to create a new one\n                // for further comparisons\n                list = null;\n            }\n        }\n        return Collections.min(pairs, comparator);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java", "class_name": "SplitterRStar", "class_uri": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java.SplitterRStar", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "ListPair<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java.SplitterRStar.[Comparator<HasGeometry>]comparator(SortType)", "name": "comparator", "arg_nums": 1, "params": [{"name": "sortType", "type": "SortType"}], "return_type": "Comparator<HasGeometry>", "signature": "private static Comparator<HasGeometry> comparator(SortType sortType)", "original_string": "    private static Comparator<HasGeometry> comparator(SortType sortType) {\n        switch (sortType) {\n        case X_LOWER:\n            return INCREASING_X_LOWER;\n        case X_UPPER:\n            return INCREASING_X_UPPER;\n        case Y_LOWER:\n            return INCREASING_Y_LOWER;\n        case Y_UPPER:\n            return INCREASING_Y_UPPER;\n        default:\n            throw new IllegalArgumentException(\"unknown SortType \" + sortType);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java", "class_name": "SplitterRStar", "class_uri": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java.SplitterRStar", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Comparator<HasGeometry>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java.SplitterRStar.[double]marginValueSum(List<ListPair<T>>)", "name": "marginValueSum", "arg_nums": 1, "params": [{"name": "list", "type": "List<ListPair<T>>"}], "return_type": "double", "signature": "private static <T extends HasGeometry> double marginValueSum(List<ListPair<T>> list)", "original_string": "    private static <T extends HasGeometry> double marginValueSum(List<ListPair<T>> list) {\n        double sum = 0;\n        for (ListPair<T> p : list)\n            sum += p.marginSum();\n        return sum;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java", "class_name": "SplitterRStar", "class_uri": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java.SplitterRStar", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java.SplitterRStar.[List<ListPair<T>>]getPairs(int,List<T>)", "name": "getPairs", "arg_nums": 2, "params": [{"name": "minSize", "type": "int"}, {"name": "list", "type": "List<T>"}], "return_type": "List<ListPair<T>>", "signature": "@VisibleForTesting\n    static <T extends HasGeometry> List<ListPair<T>> getPairs(int minSize, List<T> list)", "original_string": "    @VisibleForTesting\n    static <T extends HasGeometry> List<ListPair<T>> getPairs(int minSize, List<T> list) {\n        List<ListPair<T>> pairs = new ArrayList<ListPair<T>>(list.size() - 2 * minSize + 1);\n        for (int i = minSize; i < list.size() - minSize + 1; i++) {\n            // Note that subList returns a view of list so creating list1 and\n            // list2 doesn't\n            // necessarily incur array allocation costs.\n            List<T> list1 = list.subList(0, i);\n            List<T> list2 = list.subList(i, list.size());\n            ListPair<T> pair = new ListPair<T>(list1, list2);\n            pairs.add(pair);\n        }\n        return pairs;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java", "class_name": "SplitterRStar", "class_uri": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java.SplitterRStar", "attributes": {"modifiers": "@VisibleForTesting\n    static", "marker_annotations": ["@VisibleForTesting"], "non_marker_annotations": ["static"], "comments": [], "return_type": "List<ListPair<T>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java.SplitterRStar.[double]overlap(ListPair<? extends HasGeometry>)", "name": "overlap", "arg_nums": 1, "params": [{"name": "pair", "type": "ListPair<? extends HasGeometry>"}], "return_type": "double", "signature": "private static double overlap(ListPair<? extends HasGeometry> pair)", "original_string": "    private static double overlap(ListPair<? extends HasGeometry> pair) {\n        return pair.group1().geometry().mbr().intersectionArea(pair.group2().geometry().mbr());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java", "class_name": "SplitterRStar", "class_uri": "src/main/java/com/github/davidmoten/rtree/SplitterRStar.java.SplitterRStar", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Splitter.java.Splitter.[ListPair<T>]split(List<T>,int)", "name": "split", "arg_nums": 2, "params": [{"name": "items", "type": "List<T>"}, {"name": "minSize", "type": "int"}], "return_type": "ListPair<T>", "signature": "<T extends HasGeometry> ListPair<T> split(List<T> items, int minSize)", "original_string": "    <T extends HasGeometry> ListPair<T> split(List<T> items, int minSize);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Splitter.java", "class_name": "Splitter", "class_uri": "src/main/java/com/github/davidmoten/rtree/Splitter.java.Splitter", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "ListPair<T>", "classes": []}, "docstring": "\nSplits a list of items into two lists of at least minSize.\n\n@param <T>\n           geometry type\n@param items\n           list of items to split\n@param minSize\n           min size of each list\n@return two lists\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/ImageSaver.java.ImageSaver.[]ImageSaver()", "name": "ImageSaver", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ImageSaver()", "original_string": "    private ImageSaver() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/ImageSaver.java", "class_name": "ImageSaver", "class_uri": "src/main/java/com/github/davidmoten/rtree/ImageSaver.java.ImageSaver", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/ImageSaver.java.ImageSaver.[void]save(BufferedImage,File,String)", "name": "save", "arg_nums": 3, "params": [{"name": "image", "type": "BufferedImage"}, {"name": "file", "type": "File"}, {"name": "imageFormat", "type": "String"}], "return_type": "void", "signature": "static void save(final BufferedImage image, final File file, final String imageFormat)", "original_string": "    static void save(final BufferedImage image, final File file, final String imageFormat) {\n        // this is an ugly workaround to achieve 100% coverage (the pesky\n        // IOException catch)\n        // The performance hit of making this allocation should be negligible\n        // compared to the cost of IO\n        Callable<Void> callable = new Callable<Void>() {\n            @Override\n            public Void call() throws Exception {\n                ImageIO.write(image, imageFormat, file);\n                return null;\n            }\n        };\n        run(callable);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/ImageSaver.java", "class_name": "ImageSaver", "class_uri": "src/main/java/com/github/davidmoten/rtree/ImageSaver.java.ImageSaver", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/ImageSaver.java.ImageSaver.[void]run(Callable<Void>)", "name": "run", "arg_nums": 1, "params": [{"name": "callable", "type": "Callable<Void>"}], "return_type": "void", "signature": "static void run(Callable<Void> callable)", "original_string": "    static void run(Callable<Void> callable) {\n        try {\n            callable.call();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/ImageSaver.java", "class_name": "ImageSaver", "class_uri": "src/main/java/com/github/davidmoten/rtree/ImageSaver.java.ImageSaver", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/EntryFactory.java.EntryFactory.[Entry<T,S>]createEntry(T,S)", "name": "createEntry", "arg_nums": 2, "params": [{"name": "value", "type": "T"}, {"name": "geometry", "type": "S"}], "return_type": "Entry<T,S>", "signature": "Entry<T,S> createEntry(T value, S geometry)", "original_string": "    Entry<T,S> createEntry(T value, S geometry);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/EntryFactory.java", "class_name": "EntryFactory", "class_uri": "src/main/java/com/github/davidmoten/rtree/EntryFactory.java.EntryFactory", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Entry<T,S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Factories.java.Factories.[]Factories()", "name": "Factories", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Factories()", "original_string": "    private Factories() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Factories.java", "class_name": "Factories", "class_uri": "src/main/java/com/github/davidmoten/rtree/Factories.java.Factories", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Factories.java.Factories.[Factory<T, S>]defaultFactory()", "name": "defaultFactory", "arg_nums": 0, "params": [], "return_type": "Factory<T, S>", "signature": "public static <T, S extends Geometry> Factory<T, S> defaultFactory()", "original_string": "    public static <T, S extends Geometry> Factory<T, S> defaultFactory() {\n        return FactoryDefault.instance();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Factories.java", "class_name": "Factories", "class_uri": "src/main/java/com/github/davidmoten/rtree/Factories.java.Factories", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Factory<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/LeafFactory.java.LeafFactory.[Leaf<T, S>]createLeaf(List<Entry<T, S>>,Context<T, S>)", "name": "createLeaf", "arg_nums": 2, "params": [{"name": "entries", "type": "List<Entry<T, S>>"}, {"name": "context", "type": "Context<T, S>"}], "return_type": "Leaf<T, S>", "signature": "Leaf<T, S> createLeaf(List<Entry<T, S>> entries, Context<T, S> context)", "original_string": "    Leaf<T, S> createLeaf(List<Entry<T, S>> entries, Context<T, S> context);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/LeafFactory.java", "class_name": "LeafFactory", "class_uri": "src/main/java/com/github/davidmoten/rtree/LeafFactory.java.LeafFactory", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Leaf<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Leaf.java.Leaf.[List<Entry<T, S>>]entries()", "name": "entries", "arg_nums": 0, "params": [], "return_type": "List<Entry<T, S>>", "signature": "List<Entry<T, S>> entries()", "original_string": "    List<Entry<T, S>> entries();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Leaf.java", "class_name": "Leaf", "class_uri": "src/main/java/com/github/davidmoten/rtree/Leaf.java.Leaf", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "List<Entry<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Leaf.java.Leaf.[Entry<T, S>]entry(int)", "name": "entry", "arg_nums": 1, "params": [{"name": "i", "type": "int"}], "return_type": "Entry<T, S>", "signature": "Entry<T, S> entry(int i)", "original_string": "    Entry<T, S> entry(int i);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Leaf.java", "class_name": "Leaf", "class_uri": "src/main/java/com/github/davidmoten/rtree/Leaf.java.Leaf", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Entry<T, S>", "classes": []}, "docstring": "\nReturns the ith entry (0-based). This method should be preferred for\nperformance reasons when only one entry is required (in comparison to\n{@code entries().get(i)}).\n\n@param i\n           0-based index\n@return ith entry\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RectangleDepth.java.RectangleDepth.[]RectangleDepth(Rectangle,int)", "name": "RectangleDepth", "arg_nums": 2, "params": [{"name": "rectangle", "type": "Rectangle"}, {"name": "depth", "type": "int"}], "return_type": "", "signature": "RectangleDepth(Rectangle rectangle, int depth)", "original_string": "    RectangleDepth(Rectangle rectangle, int depth) {\n        super();\n        this.rectangle = rectangle;\n        this.depth = depth;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RectangleDepth.java", "class_name": "RectangleDepth", "class_uri": "src/main/java/com/github/davidmoten/rtree/RectangleDepth.java.RectangleDepth", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/RectangleDepth.java.RectangleDepth.[Rectangle]getRectangle()", "name": "getRectangle", "arg_nums": 0, "params": [], "return_type": "Rectangle", "signature": "Rectangle getRectangle()", "original_string": "    Rectangle getRectangle() {\n        return rectangle;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RectangleDepth.java", "class_name": "RectangleDepth", "class_uri": "src/main/java/com/github/davidmoten/rtree/RectangleDepth.java.RectangleDepth", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/RectangleDepth.java.RectangleDepth.[int]getDepth()", "name": "getDepth", "arg_nums": 0, "params": [], "return_type": "int", "signature": "int getDepth()", "original_string": "    int getDepth() {\n        return depth;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RectangleDepth.java", "class_name": "RectangleDepth", "class_uri": "src/main/java/com/github/davidmoten/rtree/RectangleDepth.java.RectangleDepth", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Context.java.Context.[]Context(int,int,Selector,Splitter,Factory<T, S>)", "name": "Context", "arg_nums": 5, "params": [{"name": "minChildren", "type": "int"}, {"name": "maxChildren", "type": "int"}, {"name": "selector", "type": "Selector"}, {"name": "splitter", "type": "Splitter"}, {"name": "factory", "type": "Factory<T, S>"}], "return_type": "", "signature": "public Context(int minChildren, int maxChildren, Selector selector, Splitter splitter,\n            Factory<T, S> factory)", "original_string": "    public Context(int minChildren, int maxChildren, Selector selector, Splitter splitter,\n            Factory<T, S> factory) {\n        Preconditions.checkNotNull(splitter);\n        Preconditions.checkNotNull(selector);\n        Preconditions.checkArgument(maxChildren > 2);\n        Preconditions.checkArgument(minChildren >= 1);\n        Preconditions.checkArgument(minChildren < maxChildren);\n        Preconditions.checkNotNull(factory);\n        this.selector = selector;\n        this.maxChildren = maxChildren;\n        this.minChildren = minChildren;\n        this.splitter = splitter;\n        this.factory = factory;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Context.java", "class_name": "Context", "class_uri": "src/main/java/com/github/davidmoten/rtree/Context.java.Context", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor.\n\n@param minChildren\n           minimum number of children per node (at least 1)\n@param maxChildren\n           max number of children per node (minimum is 3)\n@param selector\n           algorithm to select search path\n@param splitter\n           algorithm to split the children across two new nodes\n@param factory\n           node creation factory\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/Context.java.Context.[int]maxChildren()", "name": "maxChildren", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int maxChildren()", "original_string": "    public int maxChildren() {\n        return maxChildren;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Context.java", "class_name": "Context", "class_uri": "src/main/java/com/github/davidmoten/rtree/Context.java.Context", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Context.java.Context.[int]minChildren()", "name": "minChildren", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int minChildren()", "original_string": "    public int minChildren() {\n        return minChildren;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Context.java", "class_name": "Context", "class_uri": "src/main/java/com/github/davidmoten/rtree/Context.java.Context", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Context.java.Context.[Splitter]splitter()", "name": "splitter", "arg_nums": 0, "params": [], "return_type": "Splitter", "signature": "public Splitter splitter()", "original_string": "    public Splitter splitter() {\n        return splitter;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Context.java", "class_name": "Context", "class_uri": "src/main/java/com/github/davidmoten/rtree/Context.java.Context", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Splitter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Context.java.Context.[Selector]selector()", "name": "selector", "arg_nums": 0, "params": [], "return_type": "Selector", "signature": "public Selector selector()", "original_string": "    public Selector selector() {\n        return selector;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Context.java", "class_name": "Context", "class_uri": "src/main/java/com/github/davidmoten/rtree/Context.java.Context", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Selector", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Context.java.Context.[Factory<T, S>]factory()", "name": "factory", "arg_nums": 0, "params": [], "return_type": "Factory<T, S>", "signature": "public Factory<T, S> factory()", "original_string": "    public Factory<T, S> factory() {\n        return factory;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Context.java", "class_name": "Context", "class_uri": "src/main/java/com/github/davidmoten/rtree/Context.java.Context", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Factory<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/OnSubscribeSearch.java.OnSubscribeSearch.[]OnSubscribeSearch(Node<T, S>,Func1<? super Geometry, Boolean>)", "name": "OnSubscribeSearch", "arg_nums": 2, "params": [{"name": "node", "type": "Node<T, S>"}, {"name": "condition", "type": "Func1<? super Geometry, Boolean>"}], "return_type": "", "signature": "OnSubscribeSearch(Node<T, S> node, Func1<? super Geometry, Boolean> condition)", "original_string": "    OnSubscribeSearch(Node<T, S> node, Func1<? super Geometry, Boolean> condition) {\n        this.node = node;\n        this.condition = condition;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/OnSubscribeSearch.java", "class_name": "OnSubscribeSearch", "class_uri": "src/main/java/com/github/davidmoten/rtree/OnSubscribeSearch.java.OnSubscribeSearch", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/OnSubscribeSearch.java.OnSubscribeSearch.[void]call(Subscriber<? super Entry<T, S>>)", "name": "call", "arg_nums": 1, "params": [{"name": "subscriber", "type": "Subscriber<? super Entry<T, S>>"}], "return_type": "void", "signature": "@Override\n    public void call(Subscriber<? super Entry<T, S>> subscriber)", "original_string": "    @Override\n    public void call(Subscriber<? super Entry<T, S>> subscriber) {\n        subscriber.setProducer(new SearchProducer<T, S>(node, condition, subscriber));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/OnSubscribeSearch.java", "class_name": "OnSubscribeSearch", "class_uri": "src/main/java/com/github/davidmoten/rtree/OnSubscribeSearch.java.OnSubscribeSearch", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/OnSubscribeSearch.java.OnSubscribeSearch.[long]getAndAddRequest(AtomicLong,long)", "name": "getAndAddRequest", "arg_nums": 2, "params": [{"name": "requested", "type": "AtomicLong"}, {"name": "n", "type": "long"}], "return_type": "long", "signature": "private static long getAndAddRequest(AtomicLong requested, long n)", "original_string": "    private static long getAndAddRequest(AtomicLong requested, long n) {\n        // add n to field but check for overflow\n        while (true) {\n            long current = requested.get();\n            long next = current + n;\n            // check for overflow\n            if (next < 0) {\n                next = Long.MAX_VALUE;\n            }\n            if (requested.compareAndSet(current, next)) {\n                return current;\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/OnSubscribeSearch.java", "class_name": "OnSubscribeSearch", "class_uri": "src/main/java/com/github/davidmoten/rtree/OnSubscribeSearch.java.OnSubscribeSearch", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\nAdds {@code n} to {@code requested} and returns the value prior to\naddition once the addition is successful (uses CAS semantics). If\noverflows then sets {@code requested} field to {@code Long.MAX_VALUE}.\n\n@param requested\n           atomic field updater for a request count\n@param n\n           the number of requests to add to the requested count\n@return requested value just prior to successful addition\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/Entries.java.Entries.[]Entries()", "name": "Entries", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Entries()", "original_string": "    private Entries() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Entries.java", "class_name": "Entries", "class_uri": "src/main/java/com/github/davidmoten/rtree/Entries.java.Entries", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Entries.java.Entries.[Entry<T,S>]entry(T,S)", "name": "entry", "arg_nums": 2, "params": [{"name": "object", "type": "T"}, {"name": "geometry", "type": "S"}], "return_type": "Entry<T,S>", "signature": "public static <T, S extends Geometry> Entry<T,S> entry(T object, S geometry)", "original_string": "    public static <T, S extends Geometry> Entry<T,S> entry(T object, S geometry) {\n        return EntryDefault.entry(object, geometry);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Entries.java", "class_name": "Entries", "class_uri": "src/main/java/com/github/davidmoten/rtree/Entries.java.Entries", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Entry<T,S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Selector.java.Selector.[Node<T, S>]select(Geometry,List<? extends Node<T, S>>)", "name": "select", "arg_nums": 2, "params": [{"name": "g", "type": "Geometry"}, {"name": "nodes", "type": "List<? extends Node<T, S>>"}], "return_type": "Node<T, S>", "signature": "<T, S extends Geometry> Node<T, S> select(Geometry g, List<? extends Node<T, S>> nodes)", "original_string": "    <T, S extends Geometry> Node<T, S> select(Geometry g, List<? extends Node<T, S>> nodes);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Selector.java", "class_name": "Selector", "class_uri": "src/main/java/com/github/davidmoten/rtree/Selector.java.Selector", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Node<T, S>", "classes": []}, "docstring": "\nReturns the node from a list of nodes that an object with the given\ngeometry would be added to.\n\n@param <T>\n           type of value of entry in tree\n@param <S>\n           type of geometry of entry in tree\n@param g\n           geometry\n@param nodes\n           nodes to select from\n@return one of the given nodes\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/SerializerHelper.java.SerializerHelper.[]SerializerHelper()", "name": "SerializerHelper", "arg_nums": 0, "params": [], "return_type": "", "signature": "private SerializerHelper()", "original_string": "    private SerializerHelper() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SerializerHelper.java", "class_name": "SerializerHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/SerializerHelper.java.SerializerHelper", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/SerializerHelper.java.SerializerHelper.[RTree<T, S>]create(Optional<Node<T, S>>,int,Context<T, S>)", "name": "create", "arg_nums": 3, "params": [{"name": "root", "type": "Optional<Node<T, S>>"}, {"name": "size", "type": "int"}, {"name": "context", "type": "Context<T, S>"}], "return_type": "RTree<T, S>", "signature": "public static <T, S extends Geometry> RTree<T, S> create(Optional<Node<T, S>> root, int size,\n            Context<T, S> context)", "original_string": "    public static <T, S extends Geometry> RTree<T, S> create(Optional<Node<T, S>> root, int size,\n            Context<T, S> context) {\n        return RTree.create(root, size, context);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SerializerHelper.java", "class_name": "SerializerHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/SerializerHelper.java.SerializerHelper", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/SelectorMinimalAreaIncrease.java.SelectorMinimalAreaIncrease.[Node<T, S>]select(Geometry,List<? extends Node<T, S>>)", "name": "select", "arg_nums": 2, "params": [{"name": "g", "type": "Geometry"}, {"name": "nodes", "type": "List<? extends Node<T, S>>"}], "return_type": "Node<T, S>", "signature": "@Override\n    public <T, S extends Geometry> Node<T, S> select(Geometry g, List<? extends Node<T, S>> nodes)", "original_string": "    @Override\n    public <T, S extends Geometry> Node<T, S> select(Geometry g, List<? extends Node<T, S>> nodes) {\n        return min(nodes, Comparators.areaIncreaseThenAreaComparator(g.mbr()));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SelectorMinimalAreaIncrease.java", "class_name": "SelectorMinimalAreaIncrease", "class_uri": "src/main/java/com/github/davidmoten/rtree/SelectorMinimalAreaIncrease.java.SelectorMinimalAreaIncrease", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Node<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/SplitterQuadratic.java.SplitterQuadratic.[ListPair<T>]split(List<T>,int)", "name": "split", "arg_nums": 2, "params": [{"name": "items", "type": "List<T>"}, {"name": "minSize", "type": "int"}], "return_type": "ListPair<T>", "signature": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T extends HasGeometry> ListPair<T> split(List<T> items, int minSize)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    public <T extends HasGeometry> ListPair<T> split(List<T> items, int minSize) {\n        Preconditions.checkArgument(items.size() >= 2);\n\n        // according to\n        // http://en.wikipedia.org/wiki/R-tree#Splitting_an_overflowing_node\n\n        // find the worst combination pairwise in the list and use them to start\n        // the two groups\n        final Pair<T> worstCombination = worstCombination(items);\n\n        // worst combination to have in the same node is now e1,e2.\n\n        // establish a group around e1 and another group around e2\n        final List<T> group1 = Lists.newArrayList(worstCombination.value1());\n        final List<T> group2 = Lists.newArrayList(worstCombination.value2());\n\n        final List<T> remaining = new ArrayList<T>(items);\n        remaining.remove(worstCombination.value1());\n        remaining.remove(worstCombination.value2());\n\n        final int minGroupSize = items.size() / 2;\n\n        // now add the remainder to the groups using least mbr area increase\n        // except in the case where minimumSize would be contradicted\n        while (remaining.size() > 0) {\n            assignRemaining(group1, group2, remaining, minGroupSize);\n        }\n        return new ListPair<T>(group1, group2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SplitterQuadratic.java", "class_name": "SplitterQuadratic", "class_uri": "src/main/java/com/github/davidmoten/rtree/SplitterQuadratic.java.SplitterQuadratic", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "ListPair<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/SplitterQuadratic.java.SplitterQuadratic.[void]assignRemaining(List<T>,List<T>,List<T>,int)", "name": "assignRemaining", "arg_nums": 4, "params": [{"name": "group1", "type": "List<T>"}, {"name": "group2", "type": "List<T>"}, {"name": "remaining", "type": "List<T>"}, {"name": "minGroupSize", "type": "int"}], "return_type": "void", "signature": "private <T extends HasGeometry> void assignRemaining(final List<T> group1, final List<T> group2,\n            final List<T> remaining, final int minGroupSize)", "original_string": "    private <T extends HasGeometry> void assignRemaining(final List<T> group1, final List<T> group2,\n            final List<T> remaining, final int minGroupSize) {\n        final Rectangle mbr1 = Util.mbr(group1);\n        final Rectangle mbr2 = Util.mbr(group2);\n        final T item1 = getBestCandidateForGroup(remaining, group1, mbr1);\n        final T item2 = getBestCandidateForGroup(remaining, group2, mbr2);\n        final boolean area1LessThanArea2 = item1.geometry().mbr().add(mbr1).area() <= item2\n                .geometry().mbr().add(mbr2).area();\n\n        if (area1LessThanArea2 && (group2.size() + remaining.size() - 1 >= minGroupSize)\n                || !area1LessThanArea2 && (group1.size() + remaining.size() == minGroupSize)) {\n            group1.add(item1);\n            remaining.remove(item1);\n        } else {\n            group2.add(item2);\n            remaining.remove(item2);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SplitterQuadratic.java", "class_name": "SplitterQuadratic", "class_uri": "src/main/java/com/github/davidmoten/rtree/SplitterQuadratic.java.SplitterQuadratic", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/SplitterQuadratic.java.SplitterQuadratic.[T]getBestCandidateForGroup(List<T>,List<T>,Rectangle)", "name": "getBestCandidateForGroup", "arg_nums": 3, "params": [{"name": "list", "type": "List<T>"}, {"name": "group", "type": "List<T>"}, {"name": "groupMbr", "type": "Rectangle"}], "return_type": "T", "signature": "@VisibleForTesting\n    static <T extends HasGeometry> T getBestCandidateForGroup(List<T> list, List<T> group,\n            Rectangle groupMbr)", "original_string": "    @VisibleForTesting\n    static <T extends HasGeometry> T getBestCandidateForGroup(List<T> list, List<T> group,\n            Rectangle groupMbr) {\n        // TODO reduce allocations by not using Optional\n        Optional<T> minEntry = Optional.empty();\n        Optional<Double> minArea = Optional.empty();\n        for (final T entry : list) {\n            double area = groupMbr.add(entry.geometry().mbr()).area();\n            if (!minArea.isPresent() || area < minArea.get()) {\n                minArea = of(area);\n                minEntry = of(entry);\n            }\n        }\n        return minEntry.get();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SplitterQuadratic.java", "class_name": "SplitterQuadratic", "class_uri": "src/main/java/com/github/davidmoten/rtree/SplitterQuadratic.java.SplitterQuadratic", "attributes": {"modifiers": "@VisibleForTesting\n    static", "marker_annotations": ["@VisibleForTesting"], "non_marker_annotations": ["static"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/SplitterQuadratic.java.SplitterQuadratic.[Pair<T>]worstCombination(List<T>)", "name": "worstCombination", "arg_nums": 1, "params": [{"name": "items", "type": "List<T>"}], "return_type": "Pair<T>", "signature": "@VisibleForTesting\n    static <T extends HasGeometry> Pair<T> worstCombination(List<T> items)", "original_string": "    @VisibleForTesting\n    static <T extends HasGeometry> Pair<T> worstCombination(List<T> items) {\n        //TODO reduce allocations by not using Optional\n        Optional<T> e1 = Optional.empty();\n        Optional<T> e2 = Optional.empty();\n        {\n            Optional<Double> maxArea = Optional.empty();\n            for (int i = 0; i < items.size(); i++) {\n                for (int j = i + 1; j < items.size(); j++) {\n                    T entry1 = items.get(i);\n                    T entry2 = items.get(j);\n                    final double area = entry1.geometry().mbr().add(entry2.geometry().mbr()).area();\n                    if (!maxArea.isPresent() || area > maxArea.get()) {\n                        e1 = of(entry1);\n                        e2 = of(entry2);\n                        maxArea = of(area);\n                    }\n                }\n            }\n        }\n        if (e1.isPresent()) {\n            return new Pair<>(e1.get(), e2.get());\n        } else {\n            // all items are the same item\n            return new Pair<>(items.get(0), items.get(1));\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/SplitterQuadratic.java", "class_name": "SplitterQuadratic", "class_uri": "src/main/java/com/github/davidmoten/rtree/SplitterQuadratic.java.SplitterQuadratic", "attributes": {"modifiers": "@VisibleForTesting\n    static", "marker_annotations": ["@VisibleForTesting"], "non_marker_annotations": ["static"], "comments": [], "return_type": "Pair<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Backpressure.java.Backpressure.[]Backpressure()", "name": "Backpressure", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Backpressure()", "original_string": "    private Backpressure() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Backpressure.java", "class_name": "Backpressure", "class_uri": "src/main/java/com/github/davidmoten/rtree/Backpressure.java.Backpressure", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Backpressure.java.Backpressure.[ImmutableStack<NodePosition<T, S>>]search(Func1<? super Geometry, Boolean>,Subscriber<? super Entry<T, S>>,ImmutableStack<NodePosition<T, S>>,long)", "name": "search", "arg_nums": 4, "params": [{"name": "condition", "type": "Func1<? super Geometry, Boolean>"}, {"name": "subscriber", "type": "Subscriber<? super Entry<T, S>>"}, {"name": "stack", "type": "ImmutableStack<NodePosition<T, S>>"}, {"name": "request", "type": "long"}], "return_type": "ImmutableStack<NodePosition<T, S>>", "signature": "static <T, S extends Geometry> ImmutableStack<NodePosition<T, S>> search(\n            final Func1<? super Geometry, Boolean> condition,\n            final Subscriber<? super Entry<T, S>> subscriber,\n            final ImmutableStack<NodePosition<T, S>> stack, final long request)", "original_string": "    static <T, S extends Geometry> ImmutableStack<NodePosition<T, S>> search(\n            final Func1<? super Geometry, Boolean> condition,\n            final Subscriber<? super Entry<T, S>> subscriber,\n            final ImmutableStack<NodePosition<T, S>> stack, final long request) {\n        StackAndRequest<NodePosition<T, S>> state = StackAndRequest.create(stack, request);\n        return searchAndReturnStack(condition, subscriber, state);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Backpressure.java", "class_name": "Backpressure", "class_uri": "src/main/java/com/github/davidmoten/rtree/Backpressure.java.Backpressure", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "ImmutableStack<NodePosition<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Backpressure.java.Backpressure.[ImmutableStack<NodePosition<T, S>>]searchAndReturnStack(Func1<? super Geometry, Boolean>,Subscriber<? super Entry<T, S>>,StackAndRequest<NodePosition<T, S>>)", "name": "searchAndReturnStack", "arg_nums": 3, "params": [{"name": "condition", "type": "Func1<? super Geometry, Boolean>"}, {"name": "subscriber", "type": "Subscriber<? super Entry<T, S>>"}, {"name": "state", "type": "StackAndRequest<NodePosition<T, S>>"}], "return_type": "ImmutableStack<NodePosition<T, S>>", "signature": "private static <S extends Geometry, T> ImmutableStack<NodePosition<T, S>> searchAndReturnStack(\n            final Func1<? super Geometry, Boolean> condition,\n            final Subscriber<? super Entry<T, S>> subscriber,\n            StackAndRequest<NodePosition<T, S>> state)", "original_string": "    private static <S extends Geometry, T> ImmutableStack<NodePosition<T, S>> searchAndReturnStack(\n            final Func1<? super Geometry, Boolean> condition,\n            final Subscriber<? super Entry<T, S>> subscriber,\n            StackAndRequest<NodePosition<T, S>> state) {\n\n        while (!state.stack.isEmpty()) {\n            NodePosition<T, S> np = state.stack.peek();\n            if (subscriber.isUnsubscribed())\n                return ImmutableStack.empty();\n            else if (state.request <= 0)\n                return state.stack;\n            else if (np.position() == np.node().count()) {\n                // handle after last in node\n                state = StackAndRequest.create(searchAfterLastInNode(state.stack), state.request);\n            } else if (np.node() instanceof NonLeaf) {\n                // handle non-leaf\n                state = StackAndRequest.create(searchNonLeaf(condition, state.stack, np),\n                        state.request);\n            } else {\n                // handle leaf\n                state = searchLeaf(condition, subscriber, state, np);\n            }\n        }\n        return state.stack;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Backpressure.java", "class_name": "Backpressure", "class_uri": "src/main/java/com/github/davidmoten/rtree/Backpressure.java.Backpressure", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "ImmutableStack<NodePosition<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Backpressure.java.Backpressure.[StackAndRequest<NodePosition<T, S>>]searchLeaf(Func1<? super Geometry, Boolean>,Subscriber<? super Entry<T, S>>,StackAndRequest<NodePosition<T, S>>,NodePosition<T, S>)", "name": "searchLeaf", "arg_nums": 4, "params": [{"name": "condition", "type": "Func1<? super Geometry, Boolean>"}, {"name": "subscriber", "type": "Subscriber<? super Entry<T, S>>"}, {"name": "state", "type": "StackAndRequest<NodePosition<T, S>>"}, {"name": "np", "type": "NodePosition<T, S>"}], "return_type": "StackAndRequest<NodePosition<T, S>>", "signature": "private static <T, S extends Geometry> StackAndRequest<NodePosition<T, S>> searchLeaf(\n            final Func1<? super Geometry, Boolean> condition,\n            final Subscriber<? super Entry<T, S>> subscriber,\n            StackAndRequest<NodePosition<T, S>> state, NodePosition<T, S> np)", "original_string": "    private static <T, S extends Geometry> StackAndRequest<NodePosition<T, S>> searchLeaf(\n            final Func1<? super Geometry, Boolean> condition,\n            final Subscriber<? super Entry<T, S>> subscriber,\n            StackAndRequest<NodePosition<T, S>> state, NodePosition<T, S> np) {\n        final long nextRequest;\n        Entry<T, S> entry = ((Leaf<T, S>) np.node()).entry(np.position());\n        if (condition.call(entry.geometry())) {\n            subscriber.onNext(entry);\n            nextRequest = state.request - 1;\n        } else\n            nextRequest = state.request;\n        return StackAndRequest.create(state.stack.pop().push(np.nextPosition()), nextRequest);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Backpressure.java", "class_name": "Backpressure", "class_uri": "src/main/java/com/github/davidmoten/rtree/Backpressure.java.Backpressure", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "StackAndRequest<NodePosition<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Backpressure.java.Backpressure.[ImmutableStack<NodePosition<T, S>>]searchNonLeaf(Func1<? super Geometry, Boolean>,ImmutableStack<NodePosition<T, S>>,NodePosition<T, S>)", "name": "searchNonLeaf", "arg_nums": 3, "params": [{"name": "condition", "type": "Func1<? super Geometry, Boolean>"}, {"name": "stack", "type": "ImmutableStack<NodePosition<T, S>>"}, {"name": "np", "type": "NodePosition<T, S>"}], "return_type": "ImmutableStack<NodePosition<T, S>>", "signature": "private static <S extends Geometry, T> ImmutableStack<NodePosition<T, S>> searchNonLeaf(\n            final Func1<? super Geometry, Boolean> condition,\n            ImmutableStack<NodePosition<T, S>> stack, NodePosition<T, S> np)", "original_string": "    private static <S extends Geometry, T> ImmutableStack<NodePosition<T, S>> searchNonLeaf(\n            final Func1<? super Geometry, Boolean> condition,\n            ImmutableStack<NodePosition<T, S>> stack, NodePosition<T, S> np) {\n        Node<T, S> child = ((NonLeaf<T, S>) np.node()).child(np.position());\n        if (condition.call(child.geometry())) {\n            stack = stack.push(new NodePosition<T, S>(child, 0));\n        } else {\n            stack = stack.pop().push(np.nextPosition());\n        }\n        return stack;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Backpressure.java", "class_name": "Backpressure", "class_uri": "src/main/java/com/github/davidmoten/rtree/Backpressure.java.Backpressure", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "ImmutableStack<NodePosition<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Backpressure.java.Backpressure.[ImmutableStack<NodePosition<T, S>>]searchAfterLastInNode(ImmutableStack<NodePosition<T, S>>)", "name": "searchAfterLastInNode", "arg_nums": 1, "params": [{"name": "stack", "type": "ImmutableStack<NodePosition<T, S>>"}], "return_type": "ImmutableStack<NodePosition<T, S>>", "signature": "private static <S extends Geometry, T> ImmutableStack<NodePosition<T, S>> searchAfterLastInNode(\n            ImmutableStack<NodePosition<T, S>> stack)", "original_string": "    private static <S extends Geometry, T> ImmutableStack<NodePosition<T, S>> searchAfterLastInNode(\n            ImmutableStack<NodePosition<T, S>> stack) {\n        ImmutableStack<NodePosition<T, S>> stack2 = stack.pop();\n        if (stack2.isEmpty())\n            stack = stack2;\n        else {\n            NodePosition<T, S> previous = stack2.peek();\n            stack = stack2.pop().push(previous.nextPosition());\n        }\n        return stack;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Backpressure.java", "class_name": "Backpressure", "class_uri": "src/main/java/com/github/davidmoten/rtree/Backpressure.java.Backpressure", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "ImmutableStack<NodePosition<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Node.java.Node.[List<Node<T, S>>]add(Entry<? extends T, ? extends S>)", "name": "add", "arg_nums": 1, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}], "return_type": "List<Node<T, S>>", "signature": "List<Node<T, S>> add(Entry<? extends T, ? extends S> entry)", "original_string": "    List<Node<T, S>> add(Entry<? extends T, ? extends S> entry);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Node.java", "class_name": "Node", "class_uri": "src/main/java/com/github/davidmoten/rtree/Node.java.Node", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "List<Node<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Node.java.Node.[NodeAndEntries<T, S>]delete(Entry<? extends T, ? extends S>,boolean)", "name": "delete", "arg_nums": 2, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}, {"name": "all", "type": "boolean"}], "return_type": "NodeAndEntries<T, S>", "signature": "NodeAndEntries<T, S> delete(Entry<? extends T, ? extends S> entry, boolean all)", "original_string": "    NodeAndEntries<T, S> delete(Entry<? extends T, ? extends S> entry, boolean all);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Node.java", "class_name": "Node", "class_uri": "src/main/java/com/github/davidmoten/rtree/Node.java.Node", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "NodeAndEntries<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Node.java.Node.[void]searchWithoutBackpressure(Func1<? super Geometry, Boolean>,Subscriber<? super Entry<T, S>>)", "name": "searchWithoutBackpressure", "arg_nums": 2, "params": [{"name": "criterion", "type": "Func1<? super Geometry, Boolean>"}, {"name": "subscriber", "type": "Subscriber<? super Entry<T, S>>"}], "return_type": "void", "signature": "void searchWithoutBackpressure(Func1<? super Geometry, Boolean> criterion,\n            Subscriber<? super Entry<T, S>> subscriber)", "original_string": "    void searchWithoutBackpressure(Func1<? super Geometry, Boolean> criterion,\n            Subscriber<? super Entry<T, S>> subscriber);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Node.java", "class_name": "Node", "class_uri": "src/main/java/com/github/davidmoten/rtree/Node.java.Node", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nRun when a search requests Long.MAX_VALUE results. This is the\nno-backpressure fast path.\n\n@param criterion\n           function that returns true if the geometry is a search match\n@param subscriber\n           the subscriber to report search findings to\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/Node.java.Node.[int]count()", "name": "count", "arg_nums": 0, "params": [], "return_type": "int", "signature": "int count()", "original_string": "    int count();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Node.java", "class_name": "Node", "class_uri": "src/main/java/com/github/davidmoten/rtree/Node.java.Node", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Node.java.Node.[Context<T, S>]context()", "name": "context", "arg_nums": 0, "params": [], "return_type": "Context<T, S>", "signature": "Context<T, S> context()", "original_string": "    Context<T, S> context();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Node.java", "class_name": "Node", "class_uri": "src/main/java/com/github/davidmoten/rtree/Node.java.Node", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Context<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Entry.java.Entry.[T]value()", "name": "value", "arg_nums": 0, "params": [], "return_type": "T", "signature": "T value()", "original_string": "    T value();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Entry.java", "class_name": "Entry", "class_uri": "src/main/java/com/github/davidmoten/rtree/Entry.java.Entry", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/Entry.java.Entry.[S]geometry()", "name": "geometry", "arg_nums": 0, "params": [], "return_type": "S", "signature": "@Override\n    S geometry()", "original_string": "    @Override\n    S geometry();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/Entry.java", "class_name": "Entry", "class_uri": "src/main/java/com/github/davidmoten/rtree/Entry.java.Entry", "attributes": {"modifiers": "@Override", "marker_annotations": ["@Override"], "non_marker_annotations": [], "comments": [], "return_type": "S", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[]RTree(Optional<? extends Node<T, S>>,int,Context<T, S>)", "name": "RTree", "arg_nums": 3, "params": [{"name": "root", "type": "Optional<? extends Node<T, S>>"}, {"name": "size", "type": "int"}, {"name": "context", "type": "Context<T, S>"}], "return_type": "", "signature": "private RTree(Optional<? extends Node<T, S>> root, int size, Context<T, S> context)", "original_string": "    private RTree(Optional<? extends Node<T, S>> root, int size, Context<T, S> context) {\n        this.root = root;\n        this.size = size;\n        this.context = context;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor.\n\n@param root\n           the root node of the tree if present\n@param context\n           options for the R-tree\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[]RTree()", "name": "RTree", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RTree()", "original_string": "    private RTree() {\n        this(Optional.empty(), 0, null);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[]RTree(Node<T, S>,int,Context<T, S>)", "name": "RTree", "arg_nums": 3, "params": [{"name": "root", "type": "Node<T, S>"}, {"name": "size", "type": "int"}, {"name": "context", "type": "Context<T, S>"}], "return_type": "", "signature": "private RTree(Node<T, S> root, int size, Context<T, S> context)", "original_string": "    private RTree(Node<T, S> root, int size, Context<T, S> context) {\n        this(of(root), size, context);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor.\n\n@param root\n           the root node of the R-tree\n@param context\n           options for the R-tree\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[RTree<T, S>]create(Optional<? extends Node<T, S>>,int,Context<T, S>)", "name": "create", "arg_nums": 3, "params": [{"name": "root", "type": "Optional<? extends Node<T, S>>"}, {"name": "size", "type": "int"}, {"name": "context", "type": "Context<T, S>"}], "return_type": "RTree<T, S>", "signature": "static <T, S extends Geometry> RTree<T, S> create(Optional<? extends Node<T, S>> root, int size,\n            Context<T, S> context)", "original_string": "    static <T, S extends Geometry> RTree<T, S> create(Optional<? extends Node<T, S>> root, int size,\n            Context<T, S> context) {\n        return new RTree<T, S>(root, size, context);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[RTree<T, S>]create()", "name": "create", "arg_nums": 0, "params": [], "return_type": "RTree<T, S>", "signature": "public static <T, S extends Geometry> RTree<T, S> create()", "original_string": "    public static <T, S extends Geometry> RTree<T, S> create() {\n        return new Builder().create();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": "\nReturns a new Builder instance for {@link RTree}. Defaults to\nmaxChildren=128, minChildren=64, splitter=QuadraticSplitter.\n\n@param <T>\n           the value type of the entries in the tree\n@param <S>\n           the geometry type of the entries in the tree\n@return a new RTree instance\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[RTree<T, S>]create(List<Entry<T, S>>)", "name": "create", "arg_nums": 1, "params": [{"name": "entries", "type": "List<Entry<T, S>>"}], "return_type": "RTree<T, S>", "signature": "public static <T, S extends Geometry> RTree<T, S> create(List<Entry<T, S>> entries)", "original_string": "    public static <T, S extends Geometry> RTree<T, S> create(List<Entry<T, S>> entries) {\n        return new Builder().create(entries);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": "\nConstruct an Rtree through STR bulk loading. Default to maxChildren=128,\nminChildren=64 and fill nodes by a factor of 0.7\n\n@param entries\n           entries to add to the R-tree\n\n@param <T>\n           the value type of the entries in the tree\n@param <S>\n           the geometry type of the entries in the tree\n@return a new RTree instance\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[int]calculateDepth()", "name": "calculateDepth", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int calculateDepth()", "original_string": "    public int calculateDepth() {\n        return calculateDepth(root);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nThe tree is scanned for depth and the depth returned. This involves recursing\ndown to the leaf level of the tree to get the current depth. Should be\n<code>log(n)</code> in complexity.\n\n@return depth of the R-tree\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[int]calculateDepth(Optional<? extends Node<T, S>>)", "name": "calculateDepth", "arg_nums": 1, "params": [{"name": "root", "type": "Optional<? extends Node<T, S>>"}], "return_type": "int", "signature": "private static <T, S extends Geometry> int calculateDepth(Optional<? extends Node<T, S>> root)", "original_string": "    private static <T, S extends Geometry> int calculateDepth(Optional<? extends Node<T, S>> root) {\n        return root.map(node -> calculateDepth(node, 0)).orElse(0);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[int]calculateDepth(Node<T, S>,int)", "name": "calculateDepth", "arg_nums": 2, "params": [{"name": "node", "type": "Node<T, S>"}, {"name": "depth", "type": "int"}], "return_type": "int", "signature": "private static <T, S extends Geometry> int calculateDepth(Node<T, S> node, int depth)", "original_string": "    private static <T, S extends Geometry> int calculateDepth(Node<T, S> node, int depth) {\n        if (node instanceof Leaf) {\n            return depth + 1;\n        } else {\n            return calculateDepth(((NonLeaf<T, S>) node).child(0), depth + 1);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Builder]minChildren(int)", "name": "minChildren", "arg_nums": 1, "params": [{"name": "minChildren", "type": "int"}], "return_type": "Builder", "signature": "public static Builder minChildren(int minChildren)", "original_string": "    public static Builder minChildren(int minChildren) {\n        return new Builder().minChildren(minChildren);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Builder", "classes": []}, "docstring": "\nWhen the number of children in an R-tree node drops below this number the\nnode is deleted and the children are added on to the R-tree again.\n\n@param minChildren\n           less than this number of children in a node triggers a node\n           deletion and redistribution of its members\n@return builder\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Builder]maxChildren(int)", "name": "maxChildren", "arg_nums": 1, "params": [{"name": "maxChildren", "type": "int"}], "return_type": "Builder", "signature": "public static Builder maxChildren(int maxChildren)", "original_string": "    public static Builder maxChildren(int maxChildren) {\n        return new Builder().maxChildren(maxChildren);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Builder", "classes": []}, "docstring": "\nSets the max number of children in an R-tree node.\n\n@param maxChildren\n           max number of children in an R-tree node\n@return builder\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Builder]splitter(Splitter)", "name": "splitter", "arg_nums": 1, "params": [{"name": "splitter", "type": "Splitter"}], "return_type": "Builder", "signature": "public static Builder splitter(Splitter splitter)", "original_string": "    public static Builder splitter(Splitter splitter) {\n        return new Builder().splitter(splitter);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Builder", "classes": []}, "docstring": "\nSets the {@link Splitter} to use when maxChildren is reached.\n\n@param splitter\n           the splitter algorithm to use\n@return builder\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Builder]selector(Selector)", "name": "selector", "arg_nums": 1, "params": [{"name": "selector", "type": "Selector"}], "return_type": "Builder", "signature": "public static Builder selector(Selector selector)", "original_string": "    public static Builder selector(Selector selector) {\n        return new Builder().selector(selector);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Builder", "classes": []}, "docstring": "\nSets the node {@link Selector} which decides which branches to follow when\ninserting or searching.\n\n@param selector\n           determines which branches to follow when inserting or searching\n@return builder\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Builder]star()", "name": "star", "arg_nums": 0, "params": [], "return_type": "Builder", "signature": "public static Builder star()", "original_string": "    public static Builder star() {\n        return new Builder().star();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Builder", "classes": []}, "docstring": "\nSets the splitter to {@link SplitterRStar} and selector to\n{@link SelectorRStar} and defaults to minChildren=10.\n\n@return builder\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[RTree<T, S>]add(Entry<? extends T, ? extends S>)", "name": "add", "arg_nums": 1, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}], "return_type": "RTree<T, S>", "signature": "@SuppressWarnings(\"unchecked\")\n    public RTree<T, S> add(Entry<? extends T, ? extends S> entry)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    public RTree<T, S> add(Entry<? extends T, ? extends S> entry) {\n        if (root.isPresent()) {\n            List<Node<T, S>> nodes = root.get().add(entry);\n            Node<T, S> node;\n            if (nodes.size() == 1)\n                node = nodes.get(0);\n            else {\n                node = context.factory().createNonLeaf(nodes, context);\n            }\n            return new RTree<T, S>(node, size + 1, context);\n        } else {\n            Leaf<T, S> node = context.factory().createLeaf(Lists.newArrayList((Entry<T, S>) entry),\n                    context);\n            return new RTree<T, S>(node, size + 1, context);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": "\nReturns an immutable copy of the RTree with the addition of given entry.\n\n@param entry\n           item to add to the R-tree.\n@return a new immutable R-tree including the new entry\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[RTree<T, S>]add(T,S)", "name": "add", "arg_nums": 2, "params": [{"name": "value", "type": "T"}, {"name": "geometry", "type": "S"}], "return_type": "RTree<T, S>", "signature": "public RTree<T, S> add(T value, S geometry)", "original_string": "    public RTree<T, S> add(T value, S geometry) {\n        return add(context.factory().createEntry(value, geometry));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": "\nReturns an immutable copy of the RTree with the addition of an entry\ncomprised of the given value and Geometry.\n\n@param value\n           the value of the {@link Entry} to be added\n@param geometry\n           the geometry of the {@link Entry} to be added\n@return a new immutable R-tree including the new entry\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[RTree<T, S>]add(Iterable<Entry<T, S>>)", "name": "add", "arg_nums": 1, "params": [{"name": "entries", "type": "Iterable<Entry<T, S>>"}], "return_type": "RTree<T, S>", "signature": "public RTree<T, S> add(Iterable<Entry<T, S>> entries)", "original_string": "    public RTree<T, S> add(Iterable<Entry<T, S>> entries) {\n        RTree<T, S> tree = this;\n        for (Entry<T, S> entry : entries)\n            tree = tree.add(entry);\n        return tree;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": "\nReturns an immutable RTree with the current entries and the additional\nentries supplied as a parameter.\n\n@param entries\n           entries to add\n@return R-tree with entries added\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Observable<RTree<T, S>>]add(Observable<Entry<T, S>>)", "name": "add", "arg_nums": 1, "params": [{"name": "entries", "type": "Observable<Entry<T, S>>"}], "return_type": "Observable<RTree<T, S>>", "signature": "public Observable<RTree<T, S>> add(Observable<Entry<T, S>> entries)", "original_string": "    public Observable<RTree<T, S>> add(Observable<Entry<T, S>> entries) {\n        return entries.scan(this, (tree, entry) -> tree.add(entry));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Observable<RTree<T, S>>", "classes": []}, "docstring": "\nReturns the Observable sequence of trees created by progressively adding\nentries.\n\n@param entries\n           the entries to add\n@return a sequence of trees\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Observable<RTree<T, S>>]delete(Observable<Entry<T, S>>,boolean)", "name": "delete", "arg_nums": 2, "params": [{"name": "entries", "type": "Observable<Entry<T, S>>"}, {"name": "all", "type": "boolean"}], "return_type": "Observable<RTree<T, S>>", "signature": "public Observable<RTree<T, S>> delete(Observable<Entry<T, S>> entries, final boolean all)", "original_string": "    public Observable<RTree<T, S>> delete(Observable<Entry<T, S>> entries, final boolean all) {\n        return entries.scan(this, new Func2<RTree<T, S>, Entry<T, S>, RTree<T, S>>() {\n\n            @Override\n            public RTree<T, S> call(RTree<T, S> tree, Entry<T, S> entry) {\n                return tree.delete(entry, all);\n            }\n        });\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Observable<RTree<T, S>>", "classes": []}, "docstring": "\nReturns the Observable sequence of trees created by progressively deleting\nentries.\n\n@param entries\n           the entries to add\n@param all\n           if true delete all matching otherwise just first matching\n@return a sequence of trees\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[RTree<T, S>]delete(Iterable<Entry<T, S>>,boolean)", "name": "delete", "arg_nums": 2, "params": [{"name": "entries", "type": "Iterable<Entry<T, S>>"}, {"name": "all", "type": "boolean"}], "return_type": "RTree<T, S>", "signature": "public RTree<T, S> delete(Iterable<Entry<T, S>> entries, boolean all)", "original_string": "    public RTree<T, S> delete(Iterable<Entry<T, S>> entries, boolean all) {\n        RTree<T, S> tree = this;\n        for (Entry<T, S> entry : entries)\n            tree = tree.delete(entry, all);\n        return tree;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": "\nReturns a new R-tree with the given entries deleted. If <code>all</code> is\nfalse deletes only one if exists. If <code>all</code> is true deletes all\nmatching entries.\n\n@param entries\n           entries to delete\n@param all\n           if false deletes one if exists else deletes all\n@return R-tree with entries deleted\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[RTree<T, S>]delete(Iterable<Entry<T, S>>)", "name": "delete", "arg_nums": 1, "params": [{"name": "entries", "type": "Iterable<Entry<T, S>>"}], "return_type": "RTree<T, S>", "signature": "public RTree<T, S> delete(Iterable<Entry<T, S>> entries)", "original_string": "    public RTree<T, S> delete(Iterable<Entry<T, S>> entries) {\n        RTree<T, S> tree = this;\n        for (Entry<T, S> entry : entries)\n            tree = tree.delete(entry);\n        return tree;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": "\nReturns a new R-tree with the given entries deleted but only one matching\noccurence of each entry is deleted.\n\n@param entries\n           entries to delete\n@return R-tree with entries deleted up to one matching occurence per entry\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[RTree<T, S>]delete(T,S,boolean)", "name": "delete", "arg_nums": 3, "params": [{"name": "value", "type": "T"}, {"name": "geometry", "type": "S"}, {"name": "all", "type": "boolean"}], "return_type": "RTree<T, S>", "signature": "public RTree<T, S> delete(T value, S geometry, boolean all)", "original_string": "    public RTree<T, S> delete(T value, S geometry, boolean all) {\n        return delete(context.factory().createEntry(value, geometry), all);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": "\nIf <code>all</code> is false deletes one entry matching the given value and\nGeometry. If <code>all</code> is true deletes all entries matching the given\nvalue and geometry. This method has no effect if the entry is not present.\nThe entry must match on both value and geometry to be deleted.\n\n@param value\n           the value of the {@link Entry} to be deleted\n@param geometry\n           the geometry of the {@link Entry} to be deleted\n@param all\n           if false deletes one if exists else deletes all\n@return a new immutable R-tree without one or many instances of the specified\n        entry if it exists otherwise returns the original RTree object\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[RTree<T, S>]delete(T,S)", "name": "delete", "arg_nums": 2, "params": [{"name": "value", "type": "T"}, {"name": "geometry", "type": "S"}], "return_type": "RTree<T, S>", "signature": "public RTree<T, S> delete(T value, S geometry)", "original_string": "    public RTree<T, S> delete(T value, S geometry) {\n        return delete(context.factory().createEntry(value, geometry), false);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": "\nDeletes maximum one entry matching the given value and geometry. This method\nhas no effect if the entry is not present. The entry must match on both value\nand geometry to be deleted.\n\n@param value\n           the value to be matched for deletion\n@param geometry\n           the geometry to be matched for deletion\n@return an immutable RTree without one entry (if found) matching the given\n        value and geometry\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[RTree<T, S>]delete(Entry<? extends T, ? extends S>,boolean)", "name": "delete", "arg_nums": 2, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}, {"name": "all", "type": "boolean"}], "return_type": "RTree<T, S>", "signature": "public RTree<T, S> delete(Entry<? extends T, ? extends S> entry, boolean all)", "original_string": "    public RTree<T, S> delete(Entry<? extends T, ? extends S> entry, boolean all) {\n        if (root.isPresent()) {\n            NodeAndEntries<T, S> nodeAndEntries = root.get().delete(entry, all);\n            if (nodeAndEntries.node().isPresent() && nodeAndEntries.node().get() == root.get())\n                return this;\n            else\n                return new RTree<T, S>(nodeAndEntries.node(),\n                        size - nodeAndEntries.countDeleted() - nodeAndEntries.entriesToAdd().size(),\n                        context).add(nodeAndEntries.entriesToAdd());\n        } else\n            return this;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": "\nDeletes one or all matching entries depending on the value of\n<code>all</code>. If multiple copies of the entry are in the R-tree only one\nwill be deleted if all is false otherwise all matching entries will be\ndeleted. The entry must match on both value and geometry to be deleted.\n\n@param entry\n           the {@link Entry} to be deleted\n@param all\n           if true deletes all matches otherwise deletes first found\n@return a new immutable R-tree without one instance of the specified entry\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[RTree<T, S>]delete(Entry<? extends T, ? extends S>)", "name": "delete", "arg_nums": 1, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}], "return_type": "RTree<T, S>", "signature": "public RTree<T, S> delete(Entry<? extends T, ? extends S> entry)", "original_string": "    public RTree<T, S> delete(Entry<? extends T, ? extends S> entry) {\n        return delete(entry, false);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": "\nDeletes one entry if it exists, returning an immutable copy of the RTree\nwithout that entry. If multiple copies of the entry are in the R-tree only\none will be deleted. The entry must match on both value and geometry to be\ndeleted.\n\n@param entry\n           the {@link Entry} to be deleted\n@return a new immutable R-tree without one instance of the specified entry\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Observable<Entry<T, S>>]search(Func1<? super Geometry, Boolean>)", "name": "search", "arg_nums": 1, "params": [{"name": "condition", "type": "Func1<? super Geometry, Boolean>"}], "return_type": "Observable<Entry<T, S>>", "signature": "@VisibleForTesting\n    Observable<Entry<T, S>> search(Func1<? super Geometry, Boolean> condition)", "original_string": "    @VisibleForTesting\n    Observable<Entry<T, S>> search(Func1<? super Geometry, Boolean> condition) {\n        return root\n                .map(node -> Observable.unsafeCreate(new OnSubscribeSearch<>(node, condition)))\n                .orElseGet(Observable::empty);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "@VisibleForTesting", "marker_annotations": ["@VisibleForTesting"], "non_marker_annotations": [], "comments": [], "return_type": "Observable<Entry<T, S>>", "classes": []}, "docstring": "\n<p>\nReturns an Observable sequence of {@link Entry} that satisfy the given\ncondition. Note that this method is well-behaved only if:\n\n\n<p>\n{@code condition(g)} is true for {@link Geometry} g implies\n{@code condition(r)} is true for the minimum bounding rectangles of the\nancestor nodes.\n\n<p>\n{@code distance(g) < D} is an example of such a condition.\n\n\n@param condition\n           return Entries whose geometry satisfies the given condition\n@return sequence of matching entries\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Func1<Geometry, Boolean>]intersects(Rectangle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "Func1<Geometry, Boolean>", "signature": "public static Func1<Geometry, Boolean> intersects(final Rectangle r)", "original_string": "    public static Func1<Geometry, Boolean> intersects(final Rectangle r) {\n        return g -> g.intersects(r);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Func1<Geometry, Boolean>", "classes": []}, "docstring": "\nReturns a predicate function that indicates if {@link Geometry} intersects\nwith a given rectangle.\n\n@param r\n           the rectangle to check intersection with\n@return whether the geometry and the rectangle intersect\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Observable<Entry<T, S>>]search(Rectangle)", "name": "search", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "Observable<Entry<T, S>>", "signature": "public Observable<Entry<T, S>> search(final Rectangle r)", "original_string": "    public Observable<Entry<T, S>> search(final Rectangle r) {\n        return search(intersects(r));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Observable<Entry<T, S>>", "classes": []}, "docstring": "\nReturns an {@link Observable} sequence of all {@link Entry}s in the R-tree\nwhose minimum bounding rectangle intersects with the given rectangle.\n\n@param r\n           rectangle to check intersection with the entry mbr\n@return entries that intersect with the rectangle r\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Observable<Entry<T, S>>]search(Point)", "name": "search", "arg_nums": 1, "params": [{"name": "p", "type": "Point"}], "return_type": "Observable<Entry<T, S>>", "signature": "public Observable<Entry<T, S>> search(final Point p)", "original_string": "    public Observable<Entry<T, S>> search(final Point p) {\n        return search(p.mbr());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Observable<Entry<T, S>>", "classes": []}, "docstring": "\nReturns an {@link Observable} sequence of all {@link Entry}s in the R-tree\nwhose minimum bounding rectangle intersects with the given point.\n\n@param p\n           point to check intersection with the entry mbr\n@return entries that intersect with the point p\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Observable<Entry<T, S>>]search(Circle)", "name": "search", "arg_nums": 1, "params": [{"name": "circle", "type": "Circle"}], "return_type": "Observable<Entry<T, S>>", "signature": "public Observable<Entry<T, S>> search(Circle circle)", "original_string": "    public Observable<Entry<T, S>> search(Circle circle) {\n        return search(circle, Intersects.geometryIntersectsCircle);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Observable<Entry<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Observable<Entry<T, S>>]search(Line)", "name": "search", "arg_nums": 1, "params": [{"name": "line", "type": "Line"}], "return_type": "Observable<Entry<T, S>>", "signature": "public Observable<Entry<T, S>> search(Line line)", "original_string": "    public Observable<Entry<T, S>> search(Line line) {\n        return search(line, Intersects.geometryIntersectsLine);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Observable<Entry<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Observable<Entry<T, S>>]search(Rectangle,double)", "name": "search", "arg_nums": 2, "params": [{"name": "r", "type": "Rectangle"}, {"name": "maxDistance", "type": "double"}], "return_type": "Observable<Entry<T, S>>", "signature": "public Observable<Entry<T, S>> search(final Rectangle r, final double maxDistance)", "original_string": "    public Observable<Entry<T, S>> search(final Rectangle r, final double maxDistance) {\n        return search(g -> g.distance(r) < maxDistance);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Observable<Entry<T, S>>", "classes": []}, "docstring": "\nReturns an {@link Observable} sequence of all {@link Entry}s in the R-tree\nwhose minimum bounding rectangles are strictly less than maxDistance from the\ngiven rectangle.\n\n@param r\n           rectangle to measure distance from\n@param maxDistance\n           entries returned must be within this distance from rectangle r\n@return the sequence of matching entries\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Observable<Entry<T, S>>]search(R,Func2<? super S, ? super R, Boolean>)", "name": "search", "arg_nums": 2, "params": [{"name": "g", "type": "R"}, {"name": "intersects", "type": "Func2<? super S, ? super R, Boolean>"}], "return_type": "Observable<Entry<T, S>>", "signature": "public <R extends Geometry> Observable<Entry<T, S>> search(final R g,\n                                                               final Func2<? super S, ? super R, Boolean> intersects)", "original_string": "    public <R extends Geometry> Observable<Entry<T, S>> search(final R g,\n                                                               final Func2<? super S, ? super R, Boolean> intersects) {\n        return search(g.mbr()).filter(entry -> intersects.call(entry.geometry(), g));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Observable<Entry<T, S>>", "classes": []}, "docstring": "\nReturns the intersections with the the given (arbitrary) geometry using an\nintersection function to filter the search results returned from a search of\nthe mbr of <code>g</code>.\n\n@param <R>\n           type of geometry being searched for intersection with\n@param g\n           geometry being searched for intersection with\n@param intersects\n           function to determine if the two geometries intersect\n@return a sequence of entries that intersect with g\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Observable<Entry<T, S>>]search(R,double,Func2<? super S, ? super R, Double>)", "name": "search", "arg_nums": 3, "params": [{"name": "g", "type": "R"}, {"name": "maxDistance", "type": "double"}, {"name": "distance", "type": "Func2<? super S, ? super R, Double>"}], "return_type": "Observable<Entry<T, S>>", "signature": "public <R extends Geometry> Observable<Entry<T, S>> search(final R g, final double maxDistance,\n        final Func2<? super S, ? super R, Double> distance)", "original_string": "    public <R extends Geometry> Observable<Entry<T, S>> search(final R g, final double maxDistance,\n        final Func2<? super S, ? super R, Double> distance) {\n        // just use the mbr initially\n        return search(entry -> entry.distance(g.mbr()) < maxDistance)\n                // refine with distance function\n                .filter(entry -> distance.call(entry.geometry(), g) < maxDistance);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Observable<Entry<T, S>>", "classes": []}, "docstring": "\nReturns all entries strictly less than <code>maxDistance</code> from the\ngiven geometry. Because the geometry may be of an arbitrary type it is\nnecessary to also pass a distance function.\n\n@param <R>\n           type of the geometry being searched for\n@param g\n           geometry to search for entries within maxDistance of\n@param maxDistance\n           strict max distance that entries must be from g\n@param distance\n           function to calculate the distance between geometries of type S\n           and R.\n@return entries strictly less than maxDistance from g\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Observable<Entry<T, S>>]search(Point,double)", "name": "search", "arg_nums": 2, "params": [{"name": "p", "type": "Point"}, {"name": "maxDistance", "type": "double"}], "return_type": "Observable<Entry<T, S>>", "signature": "public Observable<Entry<T, S>> search(final Point p, final double maxDistance)", "original_string": "    public Observable<Entry<T, S>> search(final Point p, final double maxDistance) {\n        return search(p.mbr(), maxDistance);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Observable<Entry<T, S>>", "classes": []}, "docstring": "\nReturns an {@link Observable} sequence of all {@link Entry}s in the R-tree\nwhose minimum bounding rectangles are within maxDistance from the given\npoint.\n\n@param p\n           point to measure distance from\n@param maxDistance\n           entries returned must be within this distance from point p\n@return the sequence of matching entries\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Observable<Entry<T, S>>]nearest(Rectangle,double,int)", "name": "nearest", "arg_nums": 3, "params": [{"name": "r", "type": "Rectangle"}, {"name": "maxDistance", "type": "double"}, {"name": "maxCount", "type": "int"}], "return_type": "Observable<Entry<T, S>>", "signature": "public Observable<Entry<T, S>> nearest(final Rectangle r, final double maxDistance,\n            int maxCount)", "original_string": "    public Observable<Entry<T, S>> nearest(final Rectangle r, final double maxDistance,\n            int maxCount) {\n        return search(r, maxDistance).lift(new OperatorBoundedPriorityQueue<Entry<T, S>>(maxCount,\n                Comparators.<T, S>ascendingDistance(r)));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Observable<Entry<T, S>>", "classes": []}, "docstring": "\nReturns the nearest k entries (k=maxCount) to the given rectangle where the\nentries are strictly less than a given maximum distance from the rectangle.\n\n@param r\n           rectangle\n@param maxDistance\n           max distance of returned entries from the rectangle\n@param maxCount\n           max number of entries to return\n@return nearest entries to maxCount, in ascending order of distance\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Observable<Entry<T, S>>]nearest(Point,double,int)", "name": "nearest", "arg_nums": 3, "params": [{"name": "p", "type": "Point"}, {"name": "maxDistance", "type": "double"}, {"name": "maxCount", "type": "int"}], "return_type": "Observable<Entry<T, S>>", "signature": "public Observable<Entry<T, S>> nearest(final Point p, final double maxDistance, int maxCount)", "original_string": "    public Observable<Entry<T, S>> nearest(final Point p, final double maxDistance, int maxCount) {\n        return nearest(p.mbr(), maxDistance, maxCount);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Observable<Entry<T, S>>", "classes": []}, "docstring": "\nReturns the nearest k entries (k=maxCount) to the given point where the\nentries are strictly less than a given maximum distance from the point.\n\n@param p\n           point\n@param maxDistance\n           max distance of returned entries from the point\n@param maxCount\n           max number of entries to return\n@return nearest entries to maxCount, in ascending order of distance\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Observable<Entry<T, S>>]entries()", "name": "entries", "arg_nums": 0, "params": [], "return_type": "Observable<Entry<T, S>>", "signature": "public Observable<Entry<T, S>> entries()", "original_string": "    public Observable<Entry<T, S>> entries() {\n        return search(ALWAYS_TRUE);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Observable<Entry<T, S>>", "classes": []}, "docstring": "\nReturns all entries in the tree as an {@link Observable} sequence.\n\n@return all entries in the R-tree\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Visualizer]visualize(int,int,Rectangle)", "name": "visualize", "arg_nums": 3, "params": [{"name": "width", "type": "int"}, {"name": "height", "type": "int"}, {"name": "view", "type": "Rectangle"}], "return_type": "Visualizer", "signature": "@SuppressWarnings(\"unchecked\")\n    public Visualizer visualize(int width, int height, Rectangle view)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    public Visualizer visualize(int width, int height, Rectangle view) {\n        return new Visualizer((RTree<?, Geometry>) this, width, height, view);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "Visualizer", "classes": []}, "docstring": "\nReturns a {@link Visualizer} for an image of given width and height and\nrestricted to the given view of the coordinates. The points in the view are\nscaled to match the aspect ratio defined by the width and height.\n\n@param width\n           of the image in pixels\n@param height\n           of the image in pixels\n@param view\n           using the coordinate system of the entries\n@return visualizer\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Visualizer]visualize(int,int)", "name": "visualize", "arg_nums": 2, "params": [{"name": "width", "type": "int"}, {"name": "height", "type": "int"}], "return_type": "Visualizer", "signature": "public Visualizer visualize(int width, int height)", "original_string": "    public Visualizer visualize(int width, int height) {\n        return visualize(width, height, calculateMaxView(this));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Visualizer", "classes": []}, "docstring": "\nReturns a {@link Visualizer} for an image of given width and height and\nrestricted to the the smallest view that fully contains the coordinates. The\npoints in the view are scaled to match the aspect ratio defined by the width\nand height.\n\n@param width\n           of the image in pixels\n@param height\n           of the image in pixels\n@return visualizer\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Rectangle]calculateMaxView(RTree<T, S>)", "name": "calculateMaxView", "arg_nums": 1, "params": [{"name": "tree", "type": "RTree<T, S>"}], "return_type": "Rectangle", "signature": "private Rectangle calculateMaxView(RTree<T, S> tree)", "original_string": "    private Rectangle calculateMaxView(RTree<T, S> tree) {\n        @SuppressWarnings(\"unchecked\")\n        Func2<Optional<Rectangle>, Entry<T, S>, Optional<Rectangle>> ra = //\n                (Func2<Optional<Rectangle>, Entry<T, S>, Optional<Rectangle>>) //\n                (Func2<?,?,?>) //\n                RECTANGLE_ACCUMULATOR;\n        return tree.entries()\n                .reduce(Optional.empty(), ra)\n                .toBlocking().single()\n                .orElse(ZERO_RECTANGLE);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Optional<? extends Node<T, S>>]root()", "name": "root", "arg_nums": 0, "params": [], "return_type": "Optional<? extends Node<T, S>>", "signature": "public Optional<? extends Node<T, S>> root()", "original_string": "    public Optional<? extends Node<T, S>> root() {\n        return root;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Optional<? extends Node<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Optional<Rectangle>]mbr()", "name": "mbr", "arg_nums": 0, "params": [], "return_type": "Optional<Rectangle>", "signature": "public Optional<Rectangle> mbr()", "original_string": "    public Optional<Rectangle> mbr() {\n        return root.map(r -> r.geometry().mbr());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Optional<Rectangle>", "classes": []}, "docstring": "\nIf the RTree has no entries returns {@link Optional#absent} otherwise returns\nthe minimum bounding rectangle of all entries in the RTree.\n\n@return minimum bounding rectangle of all entries in RTree\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[boolean]isEmpty()", "name": "isEmpty", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isEmpty()", "original_string": "    public boolean isEmpty() {\n        return size == 0;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if and only if the R-tree is empty of entries.\n\n@return is R-tree empty\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[int]size()", "name": "size", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int size()", "original_string": "    public int size() {\n        return size;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nReturns the number of entries in the RTree.\n\n@return the number of entries\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[Context<T, S>]context()", "name": "context", "arg_nums": 0, "params": [], "return_type": "Context<T, S>", "signature": "public Context<T, S> context()", "original_string": "    public Context<T, S> context() {\n        return context;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Context<T, S>", "classes": []}, "docstring": "\nReturns a {@link Context} containing the configuration of the RTree at the\ntime of instantiation.\n\n@return the configuration of the RTree prior to instantiation\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[String]asString()", "name": "asString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String asString()", "original_string": "    public String asString() {\n        if (!root.isPresent())\n            return \"\";\n        else\n            return asString(root.get(), \"\");\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a human readable form of the RTree. Here's an example:\n\n<pre>\nmbr=Rectangle [x1=10.0, y1=4.0, x2=62.0, y2=85.0]\n  mbr=Rectangle [x1=28.0, y1=4.0, x2=34.0, y2=85.0]\n    entry=Entry [value=2, geometry=Point [x=29.0, y=4.0]]\n    entry=Entry [value=1, geometry=Point [x=28.0, y=19.0]]\n    entry=Entry [value=4, geometry=Point [x=34.0, y=85.0]]\n  mbr=Rectangle [x1=10.0, y1=45.0, x2=62.0, y2=63.0]\n    entry=Entry [value=5, geometry=Point [x=62.0, y=45.0]]\n    entry=Entry [value=3, geometry=Point [x=10.0, y=63.0]]\n</pre>\n\n@return a string representation of the RTree\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree.[String]asString(Node<T, S>,String)", "name": "asString", "arg_nums": 2, "params": [{"name": "node", "type": "Node<T, S>"}, {"name": "margin", "type": "String"}], "return_type": "String", "signature": "private String asString(Node<T, S> node, String margin)", "original_string": "    private String asString(Node<T, S> node, String margin) {\n        StringBuilder s = new StringBuilder();\n        s.append(margin);\n        s.append(\"mbr=\");\n        s.append(node.geometry());\n        s.append('\\n');\n        if (node instanceof NonLeaf) {\n            NonLeaf<T, S> n = (NonLeaf<T, S>) node;\n            for (int i = 0; i < n.count(); i++) {\n                Node<T, S> child = n.child(i);\n                s.append(asString(child, margin + MARGIN_INCREMENT));\n            }\n        } else {\n            Leaf<T, S> leaf = (Leaf<T, S>) node;\n\n            for (Entry<T, S> entry : leaf.entries()) {\n                s.append(margin);\n                s.append(MARGIN_INCREMENT);\n                s.append(\"entry=\");\n                s.append(entry);\n                s.append('\\n');\n            }\n        }\n        return s.toString();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/RTree.java", "class_name": "RTree", "class_uri": "src/main/java/com/github/davidmoten/rtree/RTree.java.RTree", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/NonLeaf.java.NonLeaf.[Node<T, S>]child(int)", "name": "child", "arg_nums": 1, "params": [{"name": "i", "type": "int"}], "return_type": "Node<T, S>", "signature": "Node<T, S> child(int i)", "original_string": "    Node<T, S> child(int i);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/NonLeaf.java", "class_name": "NonLeaf", "class_uri": "src/main/java/com/github/davidmoten/rtree/NonLeaf.java.NonLeaf", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Node<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/NonLeaf.java.NonLeaf.[List<Node<T, S>>]children()", "name": "children", "arg_nums": 0, "params": [], "return_type": "List<Node<T, S>>", "signature": "List<Node<T, S>> children()", "original_string": "    List<Node<T, S>> children();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/NonLeaf.java", "class_name": "NonLeaf", "class_uri": "src/main/java/com/github/davidmoten/rtree/NonLeaf.java.NonLeaf", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "List<Node<T, S>>", "classes": []}, "docstring": "\nReturns a list of children nodes. For accessing individual children the\nchild(int) method should be used to ensure good performance. To avoid\ncopying an existing list though this method can be used.\n\n@return list of children nodes\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers.[]SerializerFlatBuffers(Func1<? super T, byte[]>,Func1<byte[], ? extends T>)", "name": "SerializerFlatBuffers", "arg_nums": 2, "params": [{"name": "serializer", "type": "Func1<? super T, byte[]>"}, {"name": "deserializer", "type": "Func1<byte[], ? extends T>"}], "return_type": "", "signature": "private SerializerFlatBuffers(Func1<? super T, byte[]> serializer,\n            Func1<byte[], ? extends T> deserializer)", "original_string": "    private SerializerFlatBuffers(Func1<? super T, byte[]> serializer,\n            Func1<byte[], ? extends T> deserializer) {\n        this.factory = new FactoryFlatBuffers<T, S>(serializer, deserializer);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java", "class_name": "SerializerFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers.[Serializer<T, S>]create(Func1<? super T, byte[]>,Func1<byte[], ? extends T>)", "name": "create", "arg_nums": 2, "params": [{"name": "serializer", "type": "Func1<? super T, byte[]>"}, {"name": "deserializer", "type": "Func1<byte[], ? extends T>"}], "return_type": "Serializer<T, S>", "signature": "public static <T, S extends Geometry> Serializer<T, S> create(\n            Func1<? super T, byte[]> serializer, Func1<byte[], ? extends T> deserializer)", "original_string": "    public static <T, S extends Geometry> Serializer<T, S> create(\n            Func1<? super T, byte[]> serializer, Func1<byte[], ? extends T> deserializer) {\n        return new SerializerFlatBuffers<T, S>(serializer, deserializer);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java", "class_name": "SerializerFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Serializer<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers.[void]write(RTree<T, S>,OutputStream)", "name": "write", "arg_nums": 2, "params": [{"name": "tree", "type": "RTree<T, S>"}, {"name": "os", "type": "OutputStream"}], "return_type": "void", "signature": "@Override\n    public void write(RTree<T, S> tree, OutputStream os)", "original_string": "    @Override\n    public void write(RTree<T, S> tree, OutputStream os) throws IOException {\n        FlatBufferBuilder builder = new FlatBufferBuilder();\n        final Rectangle mbb;\n        if (tree.root().isPresent()) {\n            mbb = tree.root().get().geometry().mbr();\n        } else {\n            mbb = Geometries.rectangle(0, 0, 0, 0);\n        }\n        int b = toBounds(builder, mbb);\n        Context_.startContext_(builder);\n        Context_.addBounds(builder, b);\n        Context_.addMinChildren(builder, tree.context().minChildren());\n        Context_.addMaxChildren(builder, tree.context().maxChildren());\n        int c = Context_.endContext_(builder);\n        final int n;\n        if (tree.root().isPresent()) {\n            n = addNode(tree.root().get(), builder, factory.serializer());\n        } else {\n            // won't be used\n            n = 0;\n        }\n        // int t = Tree_.createTree_(builder, c, n, tree.size());\n        Tree_.startTree_(builder);\n        Tree_.addContext(builder, c);\n        Tree_.addSize(builder, tree.size());\n        if (tree.size() > 0) {\n            Tree_.addRoot(builder, n);\n        }\n        int t = Tree_.endTree_(builder);\n        Tree_.finishTree_Buffer(builder, t);\n\n        ByteBuffer bb = builder.dataBuffer();\n        os.write(bb.array(), bb.position(), bb.remaining());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java", "class_name": "SerializerFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers.[int]toBounds(FlatBufferBuilder,Rectangle)", "name": "toBounds", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "r", "type": "Rectangle"}], "return_type": "int", "signature": "private static int toBounds(FlatBufferBuilder builder, final Rectangle r)", "original_string": "    private static int toBounds(FlatBufferBuilder builder, final Rectangle r) {\n        Bounds_.startBounds_(builder);\n        if (r.isDoublePrecision()) {\n            Bounds_.addType(builder, BoundsType_.BoundsDouble);\n            int box = BoxDouble_.createBoxDouble_(builder, r.x1(), r.y1(), r.x2(), r.y2());\n            Bounds_.addBoxDouble(builder, box);\n        } else {\n            Bounds_.addType(builder, BoundsType_.BoundsFloat);\n            int box = BoxFloat_.createBoxFloat_(builder, (float) r.x1(), (float) r.y1(),\n                    (float) r.x2(), (float) r.y2());\n            Bounds_.addBoxFloat(builder, box);\n        }\n        return Bounds_.endBounds_(builder);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java", "class_name": "SerializerFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers.[int]addNode(Node<T, S>,FlatBufferBuilder,Func1<? super T, byte[]>)", "name": "addNode", "arg_nums": 3, "params": [{"name": "node", "type": "Node<T, S>"}, {"name": "builder", "type": "FlatBufferBuilder"}, {"name": "serializer", "type": "Func1<? super T, byte[]>"}], "return_type": "int", "signature": "private static <T, S extends Geometry> int addNode(Node<T, S> node, FlatBufferBuilder builder,\n            Func1<? super T, byte[]> serializer)", "original_string": "    private static <T, S extends Geometry> int addNode(Node<T, S> node, FlatBufferBuilder builder,\n            Func1<? super T, byte[]> serializer) {\n        if (node instanceof Leaf) {\n            Leaf<T, S> leaf = (Leaf<T, S>) node;\n            return FlatBuffersHelper.addEntries(leaf.entries(), builder, serializer);\n        } else {\n            NonLeaf<T, S> nonLeaf = (NonLeaf<T, S>) node;\n            int[] nodes = new int[nonLeaf.count()];\n            for (int i = 0; i < nonLeaf.count(); i++) {\n                Node<T, S> child = nonLeaf.child(i);\n                nodes[i] = addNode(child, builder, serializer);\n            }\n            int ch = Node_.createChildrenVector(builder, nodes);\n            Rectangle mbb = nonLeaf.geometry().mbr();\n            int b = toBounds(builder, mbb);\n            Node_.startNode_(builder);\n            Node_.addChildren(builder, ch);\n            Node_.addMbb(builder, b);\n            return Node_.endNode_(builder);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java", "class_name": "SerializerFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers.[RTree<T, S>]read(InputStream,long,InternalStructure)", "name": "read", "arg_nums": 3, "params": [{"name": "is", "type": "InputStream"}, {"name": "sizeBytes", "type": "long"}, {"name": "structure", "type": "InternalStructure"}], "return_type": "RTree<T, S>", "signature": "@Override\n    public RTree<T, S> read(InputStream is, long sizeBytes, InternalStructure structure)", "original_string": "    @Override\n    public RTree<T, S> read(InputStream is, long sizeBytes, InternalStructure structure)\n            throws IOException {\n        byte[] bytes = readFully(is, (int) sizeBytes);\n        Tree_ t = Tree_.getRootAsTree_(ByteBuffer.wrap(bytes));\n        Context<T, S> context = new Context<T, S>(t.context().minChildren(),\n                t.context().maxChildren(), new SelectorRStar(), new SplitterRStar(), factory);\n        Node_ node = t.root();\n        if (node == null) {\n            return SerializerHelper.create(Optional.empty(), 0, context);\n        } else {\n            final Node<T, S> root;\n            if (structure == InternalStructure.SINGLE_ARRAY) {\n                if (node.childrenLength() > 0) {\n                    root = new NonLeafFlatBuffers<T, S>(node, context, factory.deserializer());\n                } else {\n                    root = new LeafFlatBuffers<T, S>(node, context, factory.deserializer());\n                }\n            } else {\n                root = toNodeDefault(node, context, factory.deserializer());\n            }\n            return SerializerHelper.create(Optional.of(root), (int) t.size(), context);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java", "class_name": "SerializerFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers.[Node<T, S>]toNodeDefault(Node_,Context<T, S>,Func1<byte[], ? extends T>)", "name": "toNodeDefault", "arg_nums": 3, "params": [{"name": "node", "type": "Node_"}, {"name": "context", "type": "Context<T, S>"}, {"name": "deserializer", "type": "Func1<byte[], ? extends T>"}], "return_type": "Node<T, S>", "signature": "private static <T, S extends Geometry> Node<T, S> toNodeDefault(Node_ node,\n            Context<T, S> context, Func1<byte[], ? extends T> deserializer)", "original_string": "    private static <T, S extends Geometry> Node<T, S> toNodeDefault(Node_ node,\n            Context<T, S> context, Func1<byte[], ? extends T> deserializer) {\n        int numChildren = node.childrenLength();\n        if (numChildren > 0) {\n            List<Node<T, S>> children = new ArrayList<Node<T, S>>(numChildren);\n            for (int i = 0; i < numChildren; i++) {\n                children.add(toNodeDefault(node.children(i), context, deserializer));\n            }\n            return new NonLeafDefault<T, S>(children, context);\n        } else {\n            List<Entry<T, S>> entries = FlatBuffersHelper.createEntries(node, deserializer);\n            return new LeafDefault<T, S>(entries, context);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java", "class_name": "SerializerFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Node<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers.[byte[]]readFully(InputStream,int)", "name": "readFully", "arg_nums": 2, "params": [{"name": "is", "type": "InputStream"}, {"name": "numBytes", "type": "int"}], "return_type": "byte[]", "signature": "@VisibleForTesting\n    static byte[] readFully(InputStream is, int numBytes)", "original_string": "    @VisibleForTesting\n    static byte[] readFully(InputStream is, int numBytes) throws IOException {\n        byte[] b = new byte[numBytes];\n        int count = 0;\n        do {\n            int n = is.read(b, count, numBytes - count);\n            if (n > 0) {\n                count += n;\n            } else {\n                throw new RuntimeException(\"unexpected\");\n            }\n        } while (count < numBytes);\n        return b;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java", "class_name": "SerializerFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffers.java.SerializerFlatBuffers", "attributes": {"modifiers": "@VisibleForTesting\n    static", "marker_annotations": ["@VisibleForTesting"], "non_marker_annotations": ["static"], "comments": [], "return_type": "byte[]", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers.[]NonLeafFlatBuffers(Node_,Context<T, S>,Func1<byte[], ? extends T>)", "name": "NonLeafFlatBuffers", "arg_nums": 3, "params": [{"name": "node", "type": "Node_"}, {"name": "context", "type": "Context<T, S>"}, {"name": "deserializer", "type": "Func1<byte[], ? extends T>"}], "return_type": "", "signature": "NonLeafFlatBuffers(Node_ node, Context<T, S> context, Func1<byte[], ? extends T> deserializer)", "original_string": "    NonLeafFlatBuffers(Node_ node, Context<T, S> context, Func1<byte[], ? extends T> deserializer) {\n        Preconditions.checkNotNull(node);\n        // remove precondition because reduces performance\n        // Preconditions.checkArgument(node.childrenLength() > 0);\n        this.node = node;\n        this.context = context;\n        this.deserializer = deserializer;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java", "class_name": "NonLeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers.[List<Node<T, S>>]add(Entry<? extends T, ? extends S>)", "name": "add", "arg_nums": 1, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}], "return_type": "List<Node<T, S>>", "signature": "@Override\n    public List<Node<T, S>> add(Entry<? extends T, ? extends S> entry)", "original_string": "    @Override\n    public List<Node<T, S>> add(Entry<? extends T, ? extends S> entry) {\n        return NonLeafHelper.add(entry, this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java", "class_name": "NonLeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Node<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers.[NodeAndEntries<T, S>]delete(Entry<? extends T, ? extends S>,boolean)", "name": "delete", "arg_nums": 2, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}, {"name": "all", "type": "boolean"}], "return_type": "NodeAndEntries<T, S>", "signature": "@Override\n    public NodeAndEntries<T, S> delete(Entry<? extends T, ? extends S> entry, boolean all)", "original_string": "    @Override\n    public NodeAndEntries<T, S> delete(Entry<? extends T, ? extends S> entry, boolean all) {\n        return NonLeafHelper.delete(entry, all, this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java", "class_name": "NonLeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "NodeAndEntries<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers.[void]searchWithoutBackpressure(Func1<? super Geometry, Boolean>,Subscriber<? super Entry<T, S>>)", "name": "searchWithoutBackpressure", "arg_nums": 2, "params": [{"name": "criterion", "type": "Func1<? super Geometry, Boolean>"}, {"name": "subscriber", "type": "Subscriber<? super Entry<T, S>>"}], "return_type": "void", "signature": "@Override\n    public void searchWithoutBackpressure(Func1<? super Geometry, Boolean> criterion,\n            Subscriber<? super Entry<T, S>> subscriber)", "original_string": "    @Override\n    public void searchWithoutBackpressure(Func1<? super Geometry, Boolean> criterion,\n            Subscriber<? super Entry<T, S>> subscriber) {\n        // pass through entry and geometry and box instances to be reused for\n        // flatbuffers extraction this reduces allocation/gc costs (but of\n        // course introduces some mutable ugliness into the codebase)\n        searchWithoutBackpressure(node, criterion, subscriber, deserializer, new Entry_(),\n                new Geometry_(), new Bounds_());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java", "class_name": "NonLeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers.[void]searchWithoutBackpressure(Node_,Func1<? super Geometry, Boolean>,Subscriber<? super Entry<T, S>>,Func1<byte[], ? extends T>,Entry_,Geometry_,Bounds_)", "name": "searchWithoutBackpressure", "arg_nums": 7, "params": [{"name": "node", "type": "Node_"}, {"name": "criterion", "type": "Func1<? super Geometry, Boolean>"}, {"name": "subscriber", "type": "Subscriber<? super Entry<T, S>>"}, {"name": "deserializer", "type": "Func1<byte[], ? extends T>"}, {"name": "entry", "type": "Entry_"}, {"name": "geometry", "type": "Geometry_"}, {"name": "bounds", "type": "Bounds_"}], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    private static <T, S extends Geometry> void searchWithoutBackpressure(Node_ node,\n            Func1<? super Geometry, Boolean> criterion, Subscriber<? super Entry<T, S>> subscriber,\n            Func1<byte[], ? extends T> deserializer, Entry_ entry, Geometry_ geometry,\n            Bounds_ bounds)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    private static <T, S extends Geometry> void searchWithoutBackpressure(Node_ node,\n            Func1<? super Geometry, Boolean> criterion, Subscriber<? super Entry<T, S>> subscriber,\n            Func1<byte[], ? extends T> deserializer, Entry_ entry, Geometry_ geometry,\n            Bounds_ bounds) {\n        {\n            // write bounds from node to bounds variable\n            node.mbb(bounds);\n            final Rectangle rect;\n            if (bounds.type() == BoundsType_.BoundsDouble) {\n                BoxDouble_ b = bounds.boxDouble();\n                rect = Geometries.rectangle(b.minX(), b.minY(), b.maxX(), b.maxY());\n            } else {\n                BoxFloat_ b = bounds.boxFloat();\n                rect = Geometries.rectangle(b.minX(), b.minY(), b.maxX(), b.maxY());\n            }\n            if (!criterion.call(rect)) {\n                return;\n            }\n        }\n        int numChildren = node.childrenLength();\n        // reduce allocations by reusing objects\n        Node_ child = new Node_();\n        if (numChildren > 0) {\n            for (int i = 0; i < numChildren; i++) {\n                if (subscriber.isUnsubscribed())\n                    return;\n                node.children(child, i);\n                searchWithoutBackpressure(child, criterion, subscriber, deserializer, entry,\n                        geometry, bounds);\n            }\n        } else {\n            int numEntries = node.entriesLength();\n            // reduce allocations by reusing objects\n            // check all entries\n            for (int i = 0; i < numEntries; i++) {\n                if (subscriber.isUnsubscribed())\n                    return;\n                // set entry\n                node.entries(entry, i);\n                // set geometry\n                entry.geometry(geometry);\n                final Geometry g = toGeometry(geometry);\n                if (criterion.call(g)) {\n                    T t = parseObject(deserializer, entry);\n                    Entry<T, S> ent = Entries.entry(t, (S) g);\n                    subscriber.onNext(ent);\n                }\n            }\n        }\n\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java", "class_name": "NonLeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    private static", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers.[List<Node<T, S>>]createChildren()", "name": "createChildren", "arg_nums": 0, "params": [], "return_type": "List<Node<T, S>>", "signature": "private List<Node<T, S>> createChildren()", "original_string": "    private List<Node<T, S>> createChildren() {\n\n        // reduce allocations by resusing objects\n        int numChildren = node.childrenLength();\n        List<Node<T, S>> children = new ArrayList<Node<T, S>>(numChildren);\n        for (int i = 0; i < numChildren; i++) {\n            Node_ child = node.children(i);\n            if (child.childrenLength() > 0) {\n                children.add(new NonLeafFlatBuffers<T, S>(child, context, deserializer));\n            } else {\n                children.add(new LeafFlatBuffers<T, S>(child, context, deserializer));\n            }\n        }\n        return children;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java", "class_name": "NonLeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "List<Node<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers.[int]count()", "name": "count", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int count()", "original_string": "    @Override\n    public int count() {\n        return node.childrenLength();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java", "class_name": "NonLeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers.[Context<T, S>]context()", "name": "context", "arg_nums": 0, "params": [], "return_type": "Context<T, S>", "signature": "@Override\n    public Context<T, S> context()", "original_string": "    @Override\n    public Context<T, S> context() {\n        return context;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java", "class_name": "NonLeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Context<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers.[Geometry]geometry()", "name": "geometry", "arg_nums": 0, "params": [], "return_type": "Geometry", "signature": "@Override\n    public Geometry geometry()", "original_string": "    @Override\n    public Geometry geometry() {\n        return FlatBuffersHelper.createBox(node.mbb());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java", "class_name": "NonLeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Geometry", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers.[Node<T, S>]child(int)", "name": "child", "arg_nums": 1, "params": [{"name": "i", "type": "int"}], "return_type": "Node<T, S>", "signature": "@Override\n    public Node<T, S> child(int i)", "original_string": "    @Override\n    public Node<T, S> child(int i) {\n        Node_ child = node.children(i);\n        if (child.childrenLength() > 0)\n            return new NonLeafFlatBuffers<T, S>(child, context, deserializer);\n        else\n            return new LeafFlatBuffers<T, S>(child, context, deserializer);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java", "class_name": "NonLeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Node<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers.[List<Node<T, S>>]children()", "name": "children", "arg_nums": 0, "params": [], "return_type": "List<Node<T, S>>", "signature": "@Override\n    public List<Node<T, S>> children()", "original_string": "    @Override\n    public List<Node<T, S>> children() {\n        return createChildren();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java", "class_name": "NonLeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Node<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return \"Node [\" + (node.childrenLength() > 0 ? \"NonLeaf\" : \"Leaf\") + \",\"\n                + createBox(node.mbb()).toString() + \"]\";\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java", "class_name": "NonLeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/NonLeafFlatBuffers.java.NonLeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers.[]LeafFlatBuffers(List<Entry<T, S>>,Context<T, S>,Func1<? super T, byte[]>,Func1<byte[], ? extends T>)", "name": "LeafFlatBuffers", "arg_nums": 4, "params": [{"name": "entries", "type": "List<Entry<T, S>>"}, {"name": "context", "type": "Context<T, S>"}, {"name": "serializer", "type": "Func1<? super T, byte[]>"}, {"name": "deserializer", "type": "Func1<byte[], ? extends T>"}], "return_type": "", "signature": "LeafFlatBuffers(List<Entry<T, S>> entries, Context<T, S> context,\n            Func1<? super T, byte[]> serializer, Func1<byte[], ? extends T> deserializer)", "original_string": "    LeafFlatBuffers(List<Entry<T, S>> entries, Context<T, S> context,\n            Func1<? super T, byte[]> serializer, Func1<byte[], ? extends T> deserializer) {\n        this(createNode(entries, serializer), context, deserializer);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java", "class_name": "LeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers.[]LeafFlatBuffers(Node_,Context<T, S>,Func1<byte[], ? extends T>)", "name": "LeafFlatBuffers", "arg_nums": 3, "params": [{"name": "node", "type": "Node_"}, {"name": "context", "type": "Context<T, S>"}, {"name": "deserializer", "type": "Func1<byte[], ? extends T>"}], "return_type": "", "signature": "LeafFlatBuffers(Node_ node, Context<T, S> context, Func1<byte[], ? extends T> deserializer)", "original_string": "    LeafFlatBuffers(Node_ node, Context<T, S> context, Func1<byte[], ? extends T> deserializer) {\n        this.context = context;\n        this.deserializer = deserializer;\n        this.node = node;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java", "class_name": "LeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers.[Node_]createNode(List<Entry<T, S>>,Func1<? super T, byte[]>)", "name": "createNode", "arg_nums": 2, "params": [{"name": "entries", "type": "List<Entry<T, S>>"}, {"name": "serializer", "type": "Func1<? super T, byte[]>"}], "return_type": "Node_", "signature": "private static <T, S extends Geometry> Node_ createNode(List<Entry<T, S>> entries,\n            Func1<? super T, byte[]> serializer)", "original_string": "    private static <T, S extends Geometry> Node_ createNode(List<Entry<T, S>> entries,\n            Func1<? super T, byte[]> serializer) {\n        FlatBufferBuilder builder = new FlatBufferBuilder(0);\n        builder.finish(FlatBuffersHelper.addEntries(entries, builder, serializer));\n        return Node_.getRootAsNode_(builder.dataBuffer());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java", "class_name": "LeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Node_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers.[List<Node<T, S>>]add(Entry<? extends T, ? extends S>)", "name": "add", "arg_nums": 1, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}], "return_type": "List<Node<T, S>>", "signature": "@Override\n    public List<Node<T, S>> add(Entry<? extends T, ? extends S> entry)", "original_string": "    @Override\n    public List<Node<T, S>> add(Entry<? extends T, ? extends S> entry) {\n        return LeafHelper.add(entry, this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java", "class_name": "LeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Node<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers.[NodeAndEntries<T, S>]delete(Entry<? extends T, ? extends S>,boolean)", "name": "delete", "arg_nums": 2, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}, {"name": "all", "type": "boolean"}], "return_type": "NodeAndEntries<T, S>", "signature": "@Override\n    public NodeAndEntries<T, S> delete(Entry<? extends T, ? extends S> entry, boolean all)", "original_string": "    @Override\n    public NodeAndEntries<T, S> delete(Entry<? extends T, ? extends S> entry, boolean all) {\n        return LeafHelper.delete(entry, all, this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java", "class_name": "LeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "NodeAndEntries<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers.[void]searchWithoutBackpressure(Func1<? super Geometry, Boolean>,Subscriber<? super Entry<T, S>>)", "name": "searchWithoutBackpressure", "arg_nums": 2, "params": [{"name": "condition", "type": "Func1<? super Geometry, Boolean>"}, {"name": "subscriber", "type": "Subscriber<? super Entry<T, S>>"}], "return_type": "void", "signature": "@Override\n    public void searchWithoutBackpressure(Func1<? super Geometry, Boolean> condition,\n            Subscriber<? super Entry<T, S>> subscriber)", "original_string": "    @Override\n    public void searchWithoutBackpressure(Func1<? super Geometry, Boolean> condition,\n            Subscriber<? super Entry<T, S>> subscriber) {\n        // only called when the root of the tree is a Leaf\n        // normally the searchWithoutBackpressure is executed completely within the\n        // NonLeafFlatBuffers class to reduce object creation\n        LeafHelper.search(condition, subscriber, this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java", "class_name": "LeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers.[int]count()", "name": "count", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int count()", "original_string": "    @Override\n    public int count() {\n        return node.entriesLength();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java", "class_name": "LeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers.[Context<T, S>]context()", "name": "context", "arg_nums": 0, "params": [], "return_type": "Context<T, S>", "signature": "@Override\n    public Context<T, S> context()", "original_string": "    @Override\n    public Context<T, S> context() {\n        return context;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java", "class_name": "LeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Context<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers.[Geometry]geometry()", "name": "geometry", "arg_nums": 0, "params": [], "return_type": "Geometry", "signature": "@Override\n    public Geometry geometry()", "original_string": "    @Override\n    public Geometry geometry() {\n        Bounds_ b = node.mbb();\n        // create on demand to reduce memory use (though not gc pressure)\n        if (b.type() == BoundsType_.BoundsDouble) {\n            BoxDouble_ r = b.boxDouble();\n            return Geometries.rectangle(r.minX(), r.minY(), r.maxX(), r.maxY());\n        } else {\n            BoxFloat_ r = b.boxFloat();\n            return Geometries.rectangle(r.minX(), r.minY(), r.maxX(), r.maxY());\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java", "class_name": "LeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Geometry", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers.[List<Entry<T, S>>]entries()", "name": "entries", "arg_nums": 0, "params": [], "return_type": "List<Entry<T, S>>", "signature": "@Override\n    public List<Entry<T, S>> entries()", "original_string": "    @Override\n    public List<Entry<T, S>> entries() {\n        return FlatBuffersHelper.createEntries(node, deserializer);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java", "class_name": "LeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Entry<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers.[Entry<T, S>]entry(int)", "name": "entry", "arg_nums": 1, "params": [{"name": "i", "type": "int"}], "return_type": "Entry<T, S>", "signature": "@Override\n    public Entry<T, S> entry(int i)", "original_string": "    @Override\n    public Entry<T, S> entry(int i) {\n        return FlatBuffersHelper.createEntry(node, deserializer, i);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java", "class_name": "LeafFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/LeafFlatBuffers.java.LeafFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Entry<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper.[]FlatBuffersHelper()", "name": "FlatBuffersHelper", "arg_nums": 0, "params": [], "return_type": "", "signature": "private FlatBuffersHelper()", "original_string": "    private FlatBuffersHelper() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java", "class_name": "FlatBuffersHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper.[int]addEntries(List<Entry<T, S>>,FlatBufferBuilder,Func1<? super T, byte[]>)", "name": "addEntries", "arg_nums": 3, "params": [{"name": "entries", "type": "List<Entry<T, S>>"}, {"name": "builder", "type": "FlatBufferBuilder"}, {"name": "serializer", "type": "Func1<? super T, byte[]>"}], "return_type": "int", "signature": "static <T, S extends Geometry> int addEntries(List<Entry<T, S>> entries,\n            FlatBufferBuilder builder, Func1<? super T, byte[]> serializer)", "original_string": "    static <T, S extends Geometry> int addEntries(List<Entry<T, S>> entries,\n            FlatBufferBuilder builder, Func1<? super T, byte[]> serializer) {\n        int[] entries2 = new int[entries.size()];\n        for (int i = 0; i < entries.size(); i++) {\n            Geometry g = entries.get(i).geometry();\n            final int geom;\n            final byte geomType;\n            // Must check Point before Rectangle because Point is instance of\n            // Rectangle\n            if (g instanceof Point) {\n                Point p = (Point) g;\n                if (p.isDoublePrecision()) {\n                    geom = PointDouble_.createPointDouble_(builder, p.x(), p.y());\n                    geomType = GeometryType_.PointDouble;\n                } else {\n                    geom = PointFloat_.createPointFloat_(builder, (float) p.x(), (float) p.y());\n                    geomType = GeometryType_.PointFloat;\n                }\n            } else if (g instanceof Rectangle) {\n                Rectangle b = (Rectangle) g;\n                if (b.isDoublePrecision()) {\n                    geom = BoxDouble_.createBoxDouble_(builder, b.x1(), b.y1(), b.x2(), b.y2());\n                    geomType = GeometryType_.BoxDouble;\n                } else {\n                    geom = BoxFloat_.createBoxFloat_(builder, (float) b.x1(), (float) b.y1(),\n                            (float) b.x2(), (float) b.y2());\n                    geomType = GeometryType_.BoxFloat;\n                }\n            } else if (g instanceof Circle) {\n                Circle c = (Circle) g;\n                if (c.isDoublePrecision()) {\n                    geom = CircleDouble_.createCircleDouble_(builder, c.x(), c.y(), c.radius());\n                    geomType = GeometryType_.CircleDouble;\n                } else {\n                    geom = CircleFloat_.createCircleFloat_(builder, (float) c.x(), (float) c.y(),\n                            (float) c.radius());\n                    geomType = GeometryType_.CircleFloat;\n                }\n            } else if (g instanceof Line) {\n                Line c = (Line) g;\n                if (c.isDoublePrecision()) {\n                    geom = LineDouble_.createLineDouble_(builder, c.x1(), c.y1(), c.x2(), c.y2());\n                    geomType = GeometryType_.LineDouble;\n                } else {\n                    geom = LineFloat_.createLineFloat_(builder, (float) c.x1(), (float) c.y1(),\n                            (float) c.x2(), (float) c.y2());\n                    geomType = GeometryType_.LineFloat;\n                }\n            } else\n                throw new RuntimeException(\"unexpected\");\n\n            Geometry_.startGeometry_(builder);\n            if (geomType == GeometryType_.BoxFloat) {\n                Geometry_.addBoxFloat(builder, geom);\n            } else if (geomType == GeometryType_.BoxDouble) {\n                Geometry_.addBoxDouble(builder, geom);\n            } else if (geomType == GeometryType_.PointFloat) {\n                Geometry_.addPointFloat(builder, geom);\n            } else if (geomType == GeometryType_.PointDouble) {\n                Geometry_.addPointDouble(builder, geom);\n            } else if (geomType == GeometryType_.CircleFloat) {\n                Geometry_.addCircleFloat(builder, geom);\n            } else if (geomType == GeometryType_.CircleDouble) {\n                Geometry_.addCircleDouble(builder, geom);\n            } else if (geomType == GeometryType_.LineFloat) {\n                Geometry_.addLineFloat(builder, geom);\n            } else if (geomType == GeometryType_.LineDouble) {\n                Geometry_.addLineDouble(builder, geom);\n            } else\n                throw new RuntimeException(\"unexpected\");\n\n            Geometry_.addType(builder, geomType);\n            int geo = Geometry_.endGeometry_(builder);\n            int obj = Entry_.createObjectVector(builder, serializer.call(entries.get(i).value()));\n            entries2[i] = Entry_.createEntry_(builder, geo, obj);\n        }\n\n        int ents = Node_.createEntriesVector(builder, entries2);\n\n        Rectangle mbb = Util.mbr(entries);\n        Bounds_.startBounds_(builder);\n        if (mbb.isDoublePrecision()) {\n            int b = BoxDouble_.createBoxDouble_(builder, mbb.x1(), mbb.y1(), mbb.x2(), mbb.y2());\n            Bounds_.addBoxDouble(builder, b);\n            Bounds_.addType(builder, BoundsType_.BoundsDouble);\n        } else {\n            int b = BoxFloat_.createBoxFloat_(builder, (float) mbb.x1(), (float) mbb.y1(),\n                    (float) mbb.x2(), (float) mbb.y2());\n            Bounds_.addBoxFloat(builder, b);\n            Bounds_.addType(builder, BoundsType_.BoundsFloat);\n        }\n        int bounds = Bounds_.endBounds_(builder);\n\n        Node_.startNode_(builder);\n        Node_.addMbb(builder, bounds);\n        Node_.addEntries(builder, ents);\n        return Node_.endNode_(builder);\n\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java", "class_name": "FlatBuffersHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper.[List<Entry<T, S>>]createEntries(Node_,Func1<byte[], ? extends T>)", "name": "createEntries", "arg_nums": 2, "params": [{"name": "node", "type": "Node_"}, {"name": "deserializer", "type": "Func1<byte[], ? extends T>"}], "return_type": "List<Entry<T, S>>", "signature": "static <T, S extends Geometry> List<Entry<T, S>> createEntries(Node_ node,\n            Func1<byte[], ? extends T> deserializer)", "original_string": "    static <T, S extends Geometry> List<Entry<T, S>> createEntries(Node_ node,\n            Func1<byte[], ? extends T> deserializer) {\n        int numEntries = node.entriesLength();\n        List<Entry<T, S>> entries = new ArrayList<Entry<T, S>>(numEntries);\n        Preconditions.checkArgument(numEntries > 0);\n        Entry_ entry = new Entry_();\n        Geometry_ geom = new Geometry_();\n        for (int i = 0; i < numEntries; i++) {\n            Entry<T, S> ent = createEntry(node, deserializer, entry, geom, i);\n            entries.add(ent);\n        }\n        return entries;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java", "class_name": "FlatBuffersHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "List<Entry<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper.[Entry<T, S>]createEntry(Node_,Func1<byte[], ? extends T>,Entry_,Geometry_,int)", "name": "createEntry", "arg_nums": 5, "params": [{"name": "node", "type": "Node_"}, {"name": "deserializer", "type": "Func1<byte[], ? extends T>"}, {"name": "entry", "type": "Entry_"}, {"name": "geom", "type": "Geometry_"}, {"name": "i", "type": "int"}], "return_type": "Entry<T, S>", "signature": "@SuppressWarnings(\"unchecked\")\n    private static <T, S extends Geometry> Entry<T, S> createEntry(Node_ node,\n            Func1<byte[], ? extends T> deserializer, Entry_ entry, Geometry_ geom, int i)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    private static <T, S extends Geometry> Entry<T, S> createEntry(Node_ node,\n            Func1<byte[], ? extends T> deserializer, Entry_ entry, Geometry_ geom, int i) {\n        node.entries(entry, i);\n        entry.geometry(geom);\n        final Geometry g = toGeometry(geom);\n        return Entries.entry(parseObject(deserializer, entry), (S) g);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java", "class_name": "FlatBuffersHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    private static", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "private", "static"], "comments": [], "return_type": "Entry<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper.[Entry<T, S>]createEntry(Node_,Func1<byte[], ? extends T>,int)", "name": "createEntry", "arg_nums": 3, "params": [{"name": "node", "type": "Node_"}, {"name": "deserializer", "type": "Func1<byte[], ? extends T>"}, {"name": "i", "type": "int"}], "return_type": "Entry<T, S>", "signature": "static <T, S extends Geometry> Entry<T, S> createEntry(Node_ node,\n            Func1<byte[], ? extends T> deserializer, int i)", "original_string": "    static <T, S extends Geometry> Entry<T, S> createEntry(Node_ node,\n            Func1<byte[], ? extends T> deserializer, int i) {\n        return createEntry(node, deserializer, new Entry_(), new Geometry_(), i);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java", "class_name": "FlatBuffersHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "Entry<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper.[T]parseObject(Func1<byte[], ? extends T>,Entry_)", "name": "parseObject", "arg_nums": 2, "params": [{"name": "deserializer", "type": "Func1<byte[], ? extends T>"}, {"name": "entry", "type": "Entry_"}], "return_type": "T", "signature": "static <T> T parseObject(Func1<byte[], ? extends T> deserializer, Entry_ entry)", "original_string": "    static <T> T parseObject(Func1<byte[], ? extends T> deserializer, Entry_ entry) {\n        ByteBuffer bb = entry.objectAsByteBuffer();\n        if (bb == null) {\n            return null;\n        } else {\n            byte[] bytes = Arrays.copyOfRange(bb.array(), bb.position(), bb.limit());\n            T t = deserializer.call(bytes);\n            return t;\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java", "class_name": "FlatBuffersHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper.[S]toGeometry(Geometry_)", "name": "toGeometry", "arg_nums": 1, "params": [{"name": "g", "type": "Geometry_"}], "return_type": "S", "signature": "@SuppressWarnings(\"unchecked\")\n    static <S extends Geometry> S toGeometry(Geometry_ g)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    static <S extends Geometry> S toGeometry(Geometry_ g) {\n        final Geometry result;\n        byte type = g.type();\n        if (type == GeometryType_.BoxFloat) {\n            result = createBox(g.boxFloat());\n        } else if (type == GeometryType_.BoxDouble) {\n            result = createBox(g.boxDouble());\n        } else if (type == GeometryType_.PointFloat) {\n            PointFloat_ p = g.pointFloat();\n            result = Geometries.point(p.x(), p.y());\n        } else if (type == GeometryType_.PointDouble) {\n            PointDouble_ p = g.pointDouble();\n            result = Geometries.point(p.x(), p.y());\n        } else if (type == GeometryType_.CircleFloat) {\n            CircleFloat_ c = g.circleFloat();\n            result = Geometries.circle(c.x(), c.y(), c.radius());\n        } else if (type == GeometryType_.CircleDouble) {\n            CircleDouble_ c = g.circleDouble();\n            result = Geometries.circle(c.x(), c.y(), c.radius());\n        } else if (type == GeometryType_.LineFloat) {\n            result = createLine(g.lineFloat());\n        } else if (type == GeometryType_.LineDouble) {\n            result = createLine(g.lineDouble());\n        } else\n            throw new RuntimeException(\"unexpected\");\n        return (S) result;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java", "class_name": "FlatBuffersHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    static", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "static"], "comments": [], "return_type": "S", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper.[Geometry]createBox(BoxDouble_)", "name": "createBox", "arg_nums": 1, "params": [{"name": "b", "type": "BoxDouble_"}], "return_type": "Geometry", "signature": "private static Geometry createBox(BoxDouble_ b)", "original_string": "    private static Geometry createBox(BoxDouble_ b) {\n        return Geometries.rectangle(b.minX(), b.minY(), b.maxX(), b.maxY());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java", "class_name": "FlatBuffersHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Geometry", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper.[Geometry]createBox(BoxFloat_)", "name": "createBox", "arg_nums": 1, "params": [{"name": "b", "type": "BoxFloat_"}], "return_type": "Geometry", "signature": "private static Geometry createBox(BoxFloat_ b)", "original_string": "    private static Geometry createBox(BoxFloat_ b) {\n        return Geometries.rectangle(b.minX(), b.minY(), b.maxX(), b.maxY());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java", "class_name": "FlatBuffersHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Geometry", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper.[Rectangle]createBox(Bounds_)", "name": "createBox", "arg_nums": 1, "params": [{"name": "b", "type": "Bounds_"}], "return_type": "Rectangle", "signature": "static Rectangle createBox(Bounds_ b)", "original_string": "    static Rectangle createBox(Bounds_ b) {\n        if (b.type() == BoundsType_.BoundsDouble) {\n            BoxDouble_ r = b.boxDouble();\n            return Geometries.rectangle(r.minX(), r.minY(), r.maxX(), r.maxY());\n        } else {\n            BoxFloat_ r = b.boxFloat();\n            return Geometries.rectangle(r.minX(), r.minY(), r.maxX(), r.maxY());\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java", "class_name": "FlatBuffersHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper.[Line]createLine(BoxFloat_)", "name": "createLine", "arg_nums": 1, "params": [{"name": "b", "type": "BoxFloat_"}], "return_type": "Line", "signature": "static Line createLine(BoxFloat_ b)", "original_string": "    static Line createLine(BoxFloat_ b) {\n        return Geometries.line(b.minX(), b.minY(), b.maxX(), b.maxY());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java", "class_name": "FlatBuffersHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "Line", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper.[Line]createLine(BoxDouble_)", "name": "createLine", "arg_nums": 1, "params": [{"name": "b", "type": "BoxDouble_"}], "return_type": "Line", "signature": "static Line createLine(BoxDouble_ b)", "original_string": "    static Line createLine(BoxDouble_ b) {\n        return Geometries.line(b.minX(), b.minY(), b.maxX(), b.maxY());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java", "class_name": "FlatBuffersHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelper.java.FlatBuffersHelper", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "Line", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java.FactoryFlatBuffers.[]FactoryFlatBuffers(Func1<? super T, byte[]>,Func1<byte[], ? extends T>)", "name": "FactoryFlatBuffers", "arg_nums": 2, "params": [{"name": "serializer", "type": "Func1<? super T, byte[]>"}, {"name": "deserializer", "type": "Func1<byte[], ? extends T>"}], "return_type": "", "signature": "public FactoryFlatBuffers(Func1<? super T, byte[]> serializer, Func1<byte[], ? extends T> deserializer)", "original_string": "    public FactoryFlatBuffers(Func1<? super T, byte[]> serializer, Func1<byte[], ? extends T> deserializer) {\n        Preconditions.checkNotNull(serializer);\n        Preconditions.checkNotNull(deserializer);\n        this.serializer = serializer;\n        this.deserializer = deserializer;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java", "class_name": "FactoryFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java.FactoryFlatBuffers", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java.FactoryFlatBuffers.[Leaf<T, S>]createLeaf(List<Entry<T, S>>,Context<T, S>)", "name": "createLeaf", "arg_nums": 2, "params": [{"name": "entries", "type": "List<Entry<T, S>>"}, {"name": "context", "type": "Context<T, S>"}], "return_type": "Leaf<T, S>", "signature": "@Override\n    public Leaf<T, S> createLeaf(List<Entry<T, S>> entries, Context<T, S> context)", "original_string": "    @Override\n    public Leaf<T, S> createLeaf(List<Entry<T, S>> entries, Context<T, S> context) {\n        return new LeafFlatBuffers<T, S>(entries, context, serializer, deserializer);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java", "class_name": "FactoryFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java.FactoryFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Leaf<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java.FactoryFlatBuffers.[NonLeaf<T, S>]createNonLeaf(List<? extends Node<T, S>>,Context<T, S>)", "name": "createNonLeaf", "arg_nums": 2, "params": [{"name": "children", "type": "List<? extends Node<T, S>>"}, {"name": "context", "type": "Context<T, S>"}], "return_type": "NonLeaf<T, S>", "signature": "@Override\n    public NonLeaf<T, S> createNonLeaf(List<? extends Node<T, S>> children, Context<T, S> context)", "original_string": "    @Override\n    public NonLeaf<T, S> createNonLeaf(List<? extends Node<T, S>> children, Context<T, S> context) {\n        return new NonLeafDefault<T, S>(children, context);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java", "class_name": "FactoryFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java.FactoryFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "NonLeaf<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java.FactoryFlatBuffers.[Entry<T, S>]createEntry(T,S)", "name": "createEntry", "arg_nums": 2, "params": [{"name": "value", "type": "T"}, {"name": "geometry", "type": "S"}], "return_type": "Entry<T, S>", "signature": "@Override\n    public Entry<T, S> createEntry(T value, S geometry)", "original_string": "    @Override\n    public Entry<T, S> createEntry(T value, S geometry) {\n        return Entries.entry(value, geometry);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java", "class_name": "FactoryFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java.FactoryFlatBuffers", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Entry<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java.FactoryFlatBuffers.[Func1<? super T, byte[]>]serializer()", "name": "serializer", "arg_nums": 0, "params": [], "return_type": "Func1<? super T, byte[]>", "signature": "public Func1<? super T, byte[]> serializer()", "original_string": "    public Func1<? super T, byte[]> serializer() {\n        return serializer;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java", "class_name": "FactoryFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java.FactoryFlatBuffers", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Func1<? super T, byte[]>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java.FactoryFlatBuffers.[Func1<byte[], ? extends T>]deserializer()", "name": "deserializer", "arg_nums": 0, "params": [], "return_type": "Func1<byte[], ? extends T>", "signature": "public Func1<byte[], ? extends T> deserializer()", "original_string": "    public Func1<byte[], ? extends T> deserializer() {\n        return deserializer;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java", "class_name": "FactoryFlatBuffers", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/FactoryFlatBuffers.java.FactoryFlatBuffers", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Func1<byte[], ? extends T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java.BoxFloat_.[void]__init(int,ByteBuffer)", "name": "__init", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "void", "signature": "public void __init(int _i, ByteBuffer _bb)", "original_string": "  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java", "class_name": "BoxFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java.BoxFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java.BoxFloat_.[BoxFloat_]__assign(int,ByteBuffer)", "name": "__assign", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "BoxFloat_", "signature": "public BoxFloat_ __assign(int _i, ByteBuffer _bb)", "original_string": "  public BoxFloat_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java", "class_name": "BoxFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java.BoxFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BoxFloat_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java.BoxFloat_.[float]minX()", "name": "minX", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float minX()", "original_string": "  public float minX() { return bb.getFloat(bb_pos + 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java", "class_name": "BoxFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java.BoxFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java.BoxFloat_.[float]minY()", "name": "minY", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float minY()", "original_string": "  public float minY() { return bb.getFloat(bb_pos + 4); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java", "class_name": "BoxFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java.BoxFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java.BoxFloat_.[float]maxX()", "name": "maxX", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float maxX()", "original_string": "  public float maxX() { return bb.getFloat(bb_pos + 8); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java", "class_name": "BoxFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java.BoxFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java.BoxFloat_.[float]maxY()", "name": "maxY", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float maxY()", "original_string": "  public float maxY() { return bb.getFloat(bb_pos + 12); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java", "class_name": "BoxFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java.BoxFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java.BoxFloat_.[int]createBoxFloat_(FlatBufferBuilder,float,float,float,float)", "name": "createBoxFloat_", "arg_nums": 5, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "minX", "type": "float"}, {"name": "minY", "type": "float"}, {"name": "maxX", "type": "float"}, {"name": "maxY", "type": "float"}], "return_type": "int", "signature": "public static int createBoxFloat_(FlatBufferBuilder builder, float minX, float minY, float maxX, float maxY)", "original_string": "  public static int createBoxFloat_(FlatBufferBuilder builder, float minX, float minY, float maxX, float maxY) {\n    builder.prep(4, 16);\n    builder.putFloat(maxY);\n    builder.putFloat(maxX);\n    builder.putFloat(minY);\n    builder.putFloat(minX);\n    return builder.offset();\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java", "class_name": "BoxFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxFloat_.java.BoxFloat_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java.PointDouble_.[void]__init(int,ByteBuffer)", "name": "__init", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "void", "signature": "public void __init(int _i, ByteBuffer _bb)", "original_string": "  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java", "class_name": "PointDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java.PointDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java.PointDouble_.[PointDouble_]__assign(int,ByteBuffer)", "name": "__assign", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "PointDouble_", "signature": "public PointDouble_ __assign(int _i, ByteBuffer _bb)", "original_string": "  public PointDouble_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java", "class_name": "PointDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java.PointDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "PointDouble_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java.PointDouble_.[double]x()", "name": "x", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double x()", "original_string": "  public double x() { return bb.getDouble(bb_pos + 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java", "class_name": "PointDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java.PointDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java.PointDouble_.[double]y()", "name": "y", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double y()", "original_string": "  public double y() { return bb.getDouble(bb_pos + 8); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java", "class_name": "PointDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java.PointDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java.PointDouble_.[int]createPointDouble_(FlatBufferBuilder,double,double)", "name": "createPointDouble_", "arg_nums": 3, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "x", "type": "double"}, {"name": "y", "type": "double"}], "return_type": "int", "signature": "public static int createPointDouble_(FlatBufferBuilder builder, double x, double y)", "original_string": "  public static int createPointDouble_(FlatBufferBuilder builder, double x, double y) {\n    builder.prep(8, 16);\n    builder.putDouble(y);\n    builder.putDouble(x);\n    return builder.offset();\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java", "class_name": "PointDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointDouble_.java.PointDouble_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[void]ValidateVersion()", "name": "ValidateVersion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public static void ValidateVersion()", "original_string": "  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[Tree_]getRootAsTree_(ByteBuffer)", "name": "getRootAsTree_", "arg_nums": 1, "params": [{"name": "_bb", "type": "ByteBuffer"}], "return_type": "Tree_", "signature": "public static Tree_ getRootAsTree_(ByteBuffer _bb)", "original_string": "  public static Tree_ getRootAsTree_(ByteBuffer _bb) { return getRootAsTree_(_bb, new Tree_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Tree_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[Tree_]getRootAsTree_(ByteBuffer,Tree_)", "name": "getRootAsTree_", "arg_nums": 2, "params": [{"name": "_bb", "type": "ByteBuffer"}, {"name": "obj", "type": "Tree_"}], "return_type": "Tree_", "signature": "public static Tree_ getRootAsTree_(ByteBuffer _bb, Tree_ obj)", "original_string": "  public static Tree_ getRootAsTree_(ByteBuffer _bb, Tree_ obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Tree_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[void]__init(int,ByteBuffer)", "name": "__init", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "void", "signature": "public void __init(int _i, ByteBuffer _bb)", "original_string": "  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[Tree_]__assign(int,ByteBuffer)", "name": "__assign", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "Tree_", "signature": "public Tree_ __assign(int _i, ByteBuffer _bb)", "original_string": "  public Tree_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Tree_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[com.github.davidmoten.rtree.fbs.generated.Context_]context()", "name": "context", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Context_", "signature": "public com.github.davidmoten.rtree.fbs.generated.Context_ context()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Context_ context() { return context(new com.github.davidmoten.rtree.fbs.generated.Context_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Context_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[com.github.davidmoten.rtree.fbs.generated.Context_]context(com.github.davidmoten.rtree.fbs.generated.Context_)", "name": "context", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.Context_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.Context_", "signature": "public com.github.davidmoten.rtree.fbs.generated.Context_ context(com.github.davidmoten.rtree.fbs.generated.Context_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Context_ context(com.github.davidmoten.rtree.fbs.generated.Context_ obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Context_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[com.github.davidmoten.rtree.fbs.generated.Node_]root()", "name": "root", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Node_", "signature": "public com.github.davidmoten.rtree.fbs.generated.Node_ root()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Node_ root() { return root(new com.github.davidmoten.rtree.fbs.generated.Node_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Node_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[com.github.davidmoten.rtree.fbs.generated.Node_]root(com.github.davidmoten.rtree.fbs.generated.Node_)", "name": "root", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.Node_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.Node_", "signature": "public com.github.davidmoten.rtree.fbs.generated.Node_ root(com.github.davidmoten.rtree.fbs.generated.Node_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Node_ root(com.github.davidmoten.rtree.fbs.generated.Node_ obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Node_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[long]size()", "name": "size", "arg_nums": 0, "params": [], "return_type": "long", "signature": "public long size()", "original_string": "  public long size() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[int]createTree_(FlatBufferBuilder,int,int,long)", "name": "createTree_", "arg_nums": 4, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "contextOffset", "type": "int"}, {"name": "rootOffset", "type": "int"}, {"name": "size", "type": "long"}], "return_type": "int", "signature": "public static int createTree_(FlatBufferBuilder builder,\n      int contextOffset,\n      int rootOffset,\n      long size)", "original_string": "  public static int createTree_(FlatBufferBuilder builder,\n      int contextOffset,\n      int rootOffset,\n      long size) {\n    builder.startTable(3);\n    Tree_.addSize(builder, size);\n    Tree_.addRoot(builder, rootOffset);\n    Tree_.addContext(builder, contextOffset);\n    return Tree_.endTree_(builder);\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[void]startTree_(FlatBufferBuilder)", "name": "startTree_", "arg_nums": 1, "params": [{"name": "builder", "type": "FlatBufferBuilder"}], "return_type": "void", "signature": "public static void startTree_(FlatBufferBuilder builder)", "original_string": "  public static void startTree_(FlatBufferBuilder builder) { builder.startTable(3); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[void]addContext(FlatBufferBuilder,int)", "name": "addContext", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "contextOffset", "type": "int"}], "return_type": "void", "signature": "public static void addContext(FlatBufferBuilder builder, int contextOffset)", "original_string": "  public static void addContext(FlatBufferBuilder builder, int contextOffset) { builder.addOffset(0, contextOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[void]addRoot(FlatBufferBuilder,int)", "name": "addRoot", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "rootOffset", "type": "int"}], "return_type": "void", "signature": "public static void addRoot(FlatBufferBuilder builder, int rootOffset)", "original_string": "  public static void addRoot(FlatBufferBuilder builder, int rootOffset) { builder.addOffset(1, rootOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[void]addSize(FlatBufferBuilder,long)", "name": "addSize", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "size", "type": "long"}], "return_type": "void", "signature": "public static void addSize(FlatBufferBuilder builder, long size)", "original_string": "  public static void addSize(FlatBufferBuilder builder, long size) { builder.addInt(2, (int)size, (int)0L); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[int]endTree_(FlatBufferBuilder)", "name": "endTree_", "arg_nums": 1, "params": [{"name": "builder", "type": "FlatBufferBuilder"}], "return_type": "int", "signature": "public static int endTree_(FlatBufferBuilder builder)", "original_string": "  public static int endTree_(FlatBufferBuilder builder) {\n    int o = builder.endTable();\n    return o;\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[void]finishTree_Buffer(FlatBufferBuilder,int)", "name": "finishTree_Buffer", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "offset", "type": "int"}], "return_type": "void", "signature": "public static void finishTree_Buffer(FlatBufferBuilder builder, int offset)", "original_string": "  public static void finishTree_Buffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_.[void]finishSizePrefixedTree_Buffer(FlatBufferBuilder,int)", "name": "finishSizePrefixedTree_Buffer", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "offset", "type": "int"}], "return_type": "void", "signature": "public static void finishSizePrefixedTree_Buffer(FlatBufferBuilder builder, int offset)", "original_string": "  public static void finishSizePrefixedTree_Buffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java", "class_name": "Tree_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Tree_.java.Tree_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[void]ValidateVersion()", "name": "ValidateVersion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public static void ValidateVersion()", "original_string": "  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[Geometry_]getRootAsGeometry_(ByteBuffer)", "name": "getRootAsGeometry_", "arg_nums": 1, "params": [{"name": "_bb", "type": "ByteBuffer"}], "return_type": "Geometry_", "signature": "public static Geometry_ getRootAsGeometry_(ByteBuffer _bb)", "original_string": "  public static Geometry_ getRootAsGeometry_(ByteBuffer _bb) { return getRootAsGeometry_(_bb, new Geometry_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Geometry_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[Geometry_]getRootAsGeometry_(ByteBuffer,Geometry_)", "name": "getRootAsGeometry_", "arg_nums": 2, "params": [{"name": "_bb", "type": "ByteBuffer"}, {"name": "obj", "type": "Geometry_"}], "return_type": "Geometry_", "signature": "public static Geometry_ getRootAsGeometry_(ByteBuffer _bb, Geometry_ obj)", "original_string": "  public static Geometry_ getRootAsGeometry_(ByteBuffer _bb, Geometry_ obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Geometry_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[void]__init(int,ByteBuffer)", "name": "__init", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "void", "signature": "public void __init(int _i, ByteBuffer _bb)", "original_string": "  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[Geometry_]__assign(int,ByteBuffer)", "name": "__assign", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "Geometry_", "signature": "public Geometry_ __assign(int _i, ByteBuffer _bb)", "original_string": "  public Geometry_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Geometry_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[byte]type()", "name": "type", "arg_nums": 0, "params": [], "return_type": "byte", "signature": "public byte type()", "original_string": "  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "byte", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.BoxFloat_]boxFloat()", "name": "boxFloat", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_", "signature": "public com.github.davidmoten.rtree.fbs.generated.BoxFloat_ boxFloat()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.BoxFloat_ boxFloat() { return boxFloat(new com.github.davidmoten.rtree.fbs.generated.BoxFloat_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.BoxFloat_]boxFloat(com.github.davidmoten.rtree.fbs.generated.BoxFloat_)", "name": "boxFloat", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_", "signature": "public com.github.davidmoten.rtree.fbs.generated.BoxFloat_ boxFloat(com.github.davidmoten.rtree.fbs.generated.BoxFloat_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.BoxFloat_ boxFloat(com.github.davidmoten.rtree.fbs.generated.BoxFloat_ obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.PointFloat_]pointFloat()", "name": "pointFloat", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.PointFloat_", "signature": "public com.github.davidmoten.rtree.fbs.generated.PointFloat_ pointFloat()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.PointFloat_ pointFloat() { return pointFloat(new com.github.davidmoten.rtree.fbs.generated.PointFloat_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.PointFloat_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.PointFloat_]pointFloat(com.github.davidmoten.rtree.fbs.generated.PointFloat_)", "name": "pointFloat", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.PointFloat_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.PointFloat_", "signature": "public com.github.davidmoten.rtree.fbs.generated.PointFloat_ pointFloat(com.github.davidmoten.rtree.fbs.generated.PointFloat_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.PointFloat_ pointFloat(com.github.davidmoten.rtree.fbs.generated.PointFloat_ obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.PointFloat_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.CircleFloat_]circleFloat()", "name": "circleFloat", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.CircleFloat_", "signature": "public com.github.davidmoten.rtree.fbs.generated.CircleFloat_ circleFloat()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.CircleFloat_ circleFloat() { return circleFloat(new com.github.davidmoten.rtree.fbs.generated.CircleFloat_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.CircleFloat_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.CircleFloat_]circleFloat(com.github.davidmoten.rtree.fbs.generated.CircleFloat_)", "name": "circleFloat", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.CircleFloat_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.CircleFloat_", "signature": "public com.github.davidmoten.rtree.fbs.generated.CircleFloat_ circleFloat(com.github.davidmoten.rtree.fbs.generated.CircleFloat_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.CircleFloat_ circleFloat(com.github.davidmoten.rtree.fbs.generated.CircleFloat_ obj) { int o = __offset(10); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.CircleFloat_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.BoxFloat_]lineFloat()", "name": "lineFloat", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_", "signature": "public com.github.davidmoten.rtree.fbs.generated.BoxFloat_ lineFloat()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.BoxFloat_ lineFloat() { return lineFloat(new com.github.davidmoten.rtree.fbs.generated.BoxFloat_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.BoxFloat_]lineFloat(com.github.davidmoten.rtree.fbs.generated.BoxFloat_)", "name": "lineFloat", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_", "signature": "public com.github.davidmoten.rtree.fbs.generated.BoxFloat_ lineFloat(com.github.davidmoten.rtree.fbs.generated.BoxFloat_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.BoxFloat_ lineFloat(com.github.davidmoten.rtree.fbs.generated.BoxFloat_ obj) { int o = __offset(12); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.BoxDouble_]boxDouble()", "name": "boxDouble", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_", "signature": "public com.github.davidmoten.rtree.fbs.generated.BoxDouble_ boxDouble()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.BoxDouble_ boxDouble() { return boxDouble(new com.github.davidmoten.rtree.fbs.generated.BoxDouble_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.BoxDouble_]boxDouble(com.github.davidmoten.rtree.fbs.generated.BoxDouble_)", "name": "boxDouble", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_", "signature": "public com.github.davidmoten.rtree.fbs.generated.BoxDouble_ boxDouble(com.github.davidmoten.rtree.fbs.generated.BoxDouble_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.BoxDouble_ boxDouble(com.github.davidmoten.rtree.fbs.generated.BoxDouble_ obj) { int o = __offset(14); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.PointDouble_]pointDouble()", "name": "pointDouble", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.PointDouble_", "signature": "public com.github.davidmoten.rtree.fbs.generated.PointDouble_ pointDouble()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.PointDouble_ pointDouble() { return pointDouble(new com.github.davidmoten.rtree.fbs.generated.PointDouble_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.PointDouble_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.PointDouble_]pointDouble(com.github.davidmoten.rtree.fbs.generated.PointDouble_)", "name": "pointDouble", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.PointDouble_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.PointDouble_", "signature": "public com.github.davidmoten.rtree.fbs.generated.PointDouble_ pointDouble(com.github.davidmoten.rtree.fbs.generated.PointDouble_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.PointDouble_ pointDouble(com.github.davidmoten.rtree.fbs.generated.PointDouble_ obj) { int o = __offset(16); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.PointDouble_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.CircleDouble_]circleDouble()", "name": "circleDouble", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.CircleDouble_", "signature": "public com.github.davidmoten.rtree.fbs.generated.CircleDouble_ circleDouble()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.CircleDouble_ circleDouble() { return circleDouble(new com.github.davidmoten.rtree.fbs.generated.CircleDouble_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.CircleDouble_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.CircleDouble_]circleDouble(com.github.davidmoten.rtree.fbs.generated.CircleDouble_)", "name": "circleDouble", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.CircleDouble_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.CircleDouble_", "signature": "public com.github.davidmoten.rtree.fbs.generated.CircleDouble_ circleDouble(com.github.davidmoten.rtree.fbs.generated.CircleDouble_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.CircleDouble_ circleDouble(com.github.davidmoten.rtree.fbs.generated.CircleDouble_ obj) { int o = __offset(18); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.CircleDouble_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.BoxDouble_]lineDouble()", "name": "lineDouble", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_", "signature": "public com.github.davidmoten.rtree.fbs.generated.BoxDouble_ lineDouble()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.BoxDouble_ lineDouble() { return lineDouble(new com.github.davidmoten.rtree.fbs.generated.BoxDouble_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[com.github.davidmoten.rtree.fbs.generated.BoxDouble_]lineDouble(com.github.davidmoten.rtree.fbs.generated.BoxDouble_)", "name": "lineDouble", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_", "signature": "public com.github.davidmoten.rtree.fbs.generated.BoxDouble_ lineDouble(com.github.davidmoten.rtree.fbs.generated.BoxDouble_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.BoxDouble_ lineDouble(com.github.davidmoten.rtree.fbs.generated.BoxDouble_ obj) { int o = __offset(20); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[void]startGeometry_(FlatBufferBuilder)", "name": "startGeometry_", "arg_nums": 1, "params": [{"name": "builder", "type": "FlatBufferBuilder"}], "return_type": "void", "signature": "public static void startGeometry_(FlatBufferBuilder builder)", "original_string": "  public static void startGeometry_(FlatBufferBuilder builder) { builder.startTable(9); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[void]addType(FlatBufferBuilder,byte)", "name": "addType", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "type", "type": "byte"}], "return_type": "void", "signature": "public static void addType(FlatBufferBuilder builder, byte type)", "original_string": "  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[void]addBoxFloat(FlatBufferBuilder,int)", "name": "addBoxFloat", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "boxFloatOffset", "type": "int"}], "return_type": "void", "signature": "public static void addBoxFloat(FlatBufferBuilder builder, int boxFloatOffset)", "original_string": "  public static void addBoxFloat(FlatBufferBuilder builder, int boxFloatOffset) { builder.addStruct(1, boxFloatOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[void]addPointFloat(FlatBufferBuilder,int)", "name": "addPointFloat", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "pointFloatOffset", "type": "int"}], "return_type": "void", "signature": "public static void addPointFloat(FlatBufferBuilder builder, int pointFloatOffset)", "original_string": "  public static void addPointFloat(FlatBufferBuilder builder, int pointFloatOffset) { builder.addStruct(2, pointFloatOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[void]addCircleFloat(FlatBufferBuilder,int)", "name": "addCircleFloat", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "circleFloatOffset", "type": "int"}], "return_type": "void", "signature": "public static void addCircleFloat(FlatBufferBuilder builder, int circleFloatOffset)", "original_string": "  public static void addCircleFloat(FlatBufferBuilder builder, int circleFloatOffset) { builder.addStruct(3, circleFloatOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[void]addLineFloat(FlatBufferBuilder,int)", "name": "addLineFloat", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "lineFloatOffset", "type": "int"}], "return_type": "void", "signature": "public static void addLineFloat(FlatBufferBuilder builder, int lineFloatOffset)", "original_string": "  public static void addLineFloat(FlatBufferBuilder builder, int lineFloatOffset) { builder.addStruct(4, lineFloatOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[void]addBoxDouble(FlatBufferBuilder,int)", "name": "addBoxDouble", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "boxDoubleOffset", "type": "int"}], "return_type": "void", "signature": "public static void addBoxDouble(FlatBufferBuilder builder, int boxDoubleOffset)", "original_string": "  public static void addBoxDouble(FlatBufferBuilder builder, int boxDoubleOffset) { builder.addStruct(5, boxDoubleOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[void]addPointDouble(FlatBufferBuilder,int)", "name": "addPointDouble", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "pointDoubleOffset", "type": "int"}], "return_type": "void", "signature": "public static void addPointDouble(FlatBufferBuilder builder, int pointDoubleOffset)", "original_string": "  public static void addPointDouble(FlatBufferBuilder builder, int pointDoubleOffset) { builder.addStruct(6, pointDoubleOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[void]addCircleDouble(FlatBufferBuilder,int)", "name": "addCircleDouble", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "circleDoubleOffset", "type": "int"}], "return_type": "void", "signature": "public static void addCircleDouble(FlatBufferBuilder builder, int circleDoubleOffset)", "original_string": "  public static void addCircleDouble(FlatBufferBuilder builder, int circleDoubleOffset) { builder.addStruct(7, circleDoubleOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[void]addLineDouble(FlatBufferBuilder,int)", "name": "addLineDouble", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "lineDoubleOffset", "type": "int"}], "return_type": "void", "signature": "public static void addLineDouble(FlatBufferBuilder builder, int lineDoubleOffset)", "original_string": "  public static void addLineDouble(FlatBufferBuilder builder, int lineDoubleOffset) { builder.addStruct(8, lineDoubleOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_.[int]endGeometry_(FlatBufferBuilder)", "name": "endGeometry_", "arg_nums": 1, "params": [{"name": "builder", "type": "FlatBufferBuilder"}], "return_type": "int", "signature": "public static int endGeometry_(FlatBufferBuilder builder)", "original_string": "  public static int endGeometry_(FlatBufferBuilder builder) {\n    int o = builder.endTable();\n    return o;\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java", "class_name": "Geometry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Geometry_.java.Geometry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[void]ValidateVersion()", "name": "ValidateVersion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public static void ValidateVersion()", "original_string": "  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[Bounds_]getRootAsBounds_(ByteBuffer)", "name": "getRootAsBounds_", "arg_nums": 1, "params": [{"name": "_bb", "type": "ByteBuffer"}], "return_type": "Bounds_", "signature": "public static Bounds_ getRootAsBounds_(ByteBuffer _bb)", "original_string": "  public static Bounds_ getRootAsBounds_(ByteBuffer _bb) { return getRootAsBounds_(_bb, new Bounds_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Bounds_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[Bounds_]getRootAsBounds_(ByteBuffer,Bounds_)", "name": "getRootAsBounds_", "arg_nums": 2, "params": [{"name": "_bb", "type": "ByteBuffer"}, {"name": "obj", "type": "Bounds_"}], "return_type": "Bounds_", "signature": "public static Bounds_ getRootAsBounds_(ByteBuffer _bb, Bounds_ obj)", "original_string": "  public static Bounds_ getRootAsBounds_(ByteBuffer _bb, Bounds_ obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Bounds_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[void]__init(int,ByteBuffer)", "name": "__init", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "void", "signature": "public void __init(int _i, ByteBuffer _bb)", "original_string": "  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[Bounds_]__assign(int,ByteBuffer)", "name": "__assign", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "Bounds_", "signature": "public Bounds_ __assign(int _i, ByteBuffer _bb)", "original_string": "  public Bounds_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Bounds_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[byte]type()", "name": "type", "arg_nums": 0, "params": [], "return_type": "byte", "signature": "public byte type()", "original_string": "  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "byte", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[com.github.davidmoten.rtree.fbs.generated.BoxFloat_]boxFloat()", "name": "boxFloat", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_", "signature": "public com.github.davidmoten.rtree.fbs.generated.BoxFloat_ boxFloat()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.BoxFloat_ boxFloat() { return boxFloat(new com.github.davidmoten.rtree.fbs.generated.BoxFloat_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[com.github.davidmoten.rtree.fbs.generated.BoxFloat_]boxFloat(com.github.davidmoten.rtree.fbs.generated.BoxFloat_)", "name": "boxFloat", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_", "signature": "public com.github.davidmoten.rtree.fbs.generated.BoxFloat_ boxFloat(com.github.davidmoten.rtree.fbs.generated.BoxFloat_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.BoxFloat_ boxFloat(com.github.davidmoten.rtree.fbs.generated.BoxFloat_ obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxFloat_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[com.github.davidmoten.rtree.fbs.generated.BoxDouble_]boxDouble()", "name": "boxDouble", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_", "signature": "public com.github.davidmoten.rtree.fbs.generated.BoxDouble_ boxDouble()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.BoxDouble_ boxDouble() { return boxDouble(new com.github.davidmoten.rtree.fbs.generated.BoxDouble_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[com.github.davidmoten.rtree.fbs.generated.BoxDouble_]boxDouble(com.github.davidmoten.rtree.fbs.generated.BoxDouble_)", "name": "boxDouble", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_", "signature": "public com.github.davidmoten.rtree.fbs.generated.BoxDouble_ boxDouble(com.github.davidmoten.rtree.fbs.generated.BoxDouble_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.BoxDouble_ boxDouble(com.github.davidmoten.rtree.fbs.generated.BoxDouble_ obj) { int o = __offset(8); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.BoxDouble_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[void]startBounds_(FlatBufferBuilder)", "name": "startBounds_", "arg_nums": 1, "params": [{"name": "builder", "type": "FlatBufferBuilder"}], "return_type": "void", "signature": "public static void startBounds_(FlatBufferBuilder builder)", "original_string": "  public static void startBounds_(FlatBufferBuilder builder) { builder.startTable(3); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[void]addType(FlatBufferBuilder,byte)", "name": "addType", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "type", "type": "byte"}], "return_type": "void", "signature": "public static void addType(FlatBufferBuilder builder, byte type)", "original_string": "  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[void]addBoxFloat(FlatBufferBuilder,int)", "name": "addBoxFloat", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "boxFloatOffset", "type": "int"}], "return_type": "void", "signature": "public static void addBoxFloat(FlatBufferBuilder builder, int boxFloatOffset)", "original_string": "  public static void addBoxFloat(FlatBufferBuilder builder, int boxFloatOffset) { builder.addStruct(1, boxFloatOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[void]addBoxDouble(FlatBufferBuilder,int)", "name": "addBoxDouble", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "boxDoubleOffset", "type": "int"}], "return_type": "void", "signature": "public static void addBoxDouble(FlatBufferBuilder builder, int boxDoubleOffset)", "original_string": "  public static void addBoxDouble(FlatBufferBuilder builder, int boxDoubleOffset) { builder.addStruct(2, boxDoubleOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_.[int]endBounds_(FlatBufferBuilder)", "name": "endBounds_", "arg_nums": 1, "params": [{"name": "builder", "type": "FlatBufferBuilder"}], "return_type": "int", "signature": "public static int endBounds_(FlatBufferBuilder builder)", "original_string": "  public static int endBounds_(FlatBufferBuilder builder) {\n    int o = builder.endTable();\n    return o;\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java", "class_name": "Bounds_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Bounds_.java.Bounds_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java.PointFloat_.[void]__init(int,ByteBuffer)", "name": "__init", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "void", "signature": "public void __init(int _i, ByteBuffer _bb)", "original_string": "  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java", "class_name": "PointFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java.PointFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java.PointFloat_.[PointFloat_]__assign(int,ByteBuffer)", "name": "__assign", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "PointFloat_", "signature": "public PointFloat_ __assign(int _i, ByteBuffer _bb)", "original_string": "  public PointFloat_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java", "class_name": "PointFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java.PointFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "PointFloat_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java.PointFloat_.[float]x()", "name": "x", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float x()", "original_string": "  public float x() { return bb.getFloat(bb_pos + 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java", "class_name": "PointFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java.PointFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java.PointFloat_.[float]y()", "name": "y", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float y()", "original_string": "  public float y() { return bb.getFloat(bb_pos + 4); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java", "class_name": "PointFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java.PointFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java.PointFloat_.[int]createPointFloat_(FlatBufferBuilder,float,float)", "name": "createPointFloat_", "arg_nums": 3, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "return_type": "int", "signature": "public static int createPointFloat_(FlatBufferBuilder builder, float x, float y)", "original_string": "  public static int createPointFloat_(FlatBufferBuilder builder, float x, float y) {\n    builder.prep(4, 8);\n    builder.putFloat(y);\n    builder.putFloat(x);\n    return builder.offset();\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java", "class_name": "PointFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/PointFloat_.java.PointFloat_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[void]ValidateVersion()", "name": "ValidateVersion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public static void ValidateVersion()", "original_string": "  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[Entry_]getRootAsEntry_(ByteBuffer)", "name": "getRootAsEntry_", "arg_nums": 1, "params": [{"name": "_bb", "type": "ByteBuffer"}], "return_type": "Entry_", "signature": "public static Entry_ getRootAsEntry_(ByteBuffer _bb)", "original_string": "  public static Entry_ getRootAsEntry_(ByteBuffer _bb) { return getRootAsEntry_(_bb, new Entry_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Entry_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[Entry_]getRootAsEntry_(ByteBuffer,Entry_)", "name": "getRootAsEntry_", "arg_nums": 2, "params": [{"name": "_bb", "type": "ByteBuffer"}, {"name": "obj", "type": "Entry_"}], "return_type": "Entry_", "signature": "public static Entry_ getRootAsEntry_(ByteBuffer _bb, Entry_ obj)", "original_string": "  public static Entry_ getRootAsEntry_(ByteBuffer _bb, Entry_ obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Entry_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[void]__init(int,ByteBuffer)", "name": "__init", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "void", "signature": "public void __init(int _i, ByteBuffer _bb)", "original_string": "  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[Entry_]__assign(int,ByteBuffer)", "name": "__assign", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "Entry_", "signature": "public Entry_ __assign(int _i, ByteBuffer _bb)", "original_string": "  public Entry_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Entry_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[com.github.davidmoten.rtree.fbs.generated.Geometry_]geometry()", "name": "geometry", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Geometry_", "signature": "public com.github.davidmoten.rtree.fbs.generated.Geometry_ geometry()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Geometry_ geometry() { return geometry(new com.github.davidmoten.rtree.fbs.generated.Geometry_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Geometry_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[com.github.davidmoten.rtree.fbs.generated.Geometry_]geometry(com.github.davidmoten.rtree.fbs.generated.Geometry_)", "name": "geometry", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.Geometry_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.Geometry_", "signature": "public com.github.davidmoten.rtree.fbs.generated.Geometry_ geometry(com.github.davidmoten.rtree.fbs.generated.Geometry_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Geometry_ geometry(com.github.davidmoten.rtree.fbs.generated.Geometry_ obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Geometry_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[byte]object(int)", "name": "object", "arg_nums": 1, "params": [{"name": "j", "type": "int"}], "return_type": "byte", "signature": "public byte object(int j)", "original_string": "  public byte object(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "byte", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[int]objectLength()", "name": "objectLength", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int objectLength()", "original_string": "  public int objectLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[ByteVector]objectVector()", "name": "objectVector", "arg_nums": 0, "params": [], "return_type": "ByteVector", "signature": "public ByteVector objectVector()", "original_string": "  public ByteVector objectVector() { return objectVector(new ByteVector()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ByteVector", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[ByteVector]objectVector(ByteVector)", "name": "objectVector", "arg_nums": 1, "params": [{"name": "obj", "type": "ByteVector"}], "return_type": "ByteVector", "signature": "public ByteVector objectVector(ByteVector obj)", "original_string": "  public ByteVector objectVector(ByteVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ByteVector", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[ByteBuffer]objectAsByteBuffer()", "name": "objectAsByteBuffer", "arg_nums": 0, "params": [], "return_type": "ByteBuffer", "signature": "public ByteBuffer objectAsByteBuffer()", "original_string": "  public ByteBuffer objectAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ByteBuffer", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[ByteBuffer]objectInByteBuffer(ByteBuffer)", "name": "objectInByteBuffer", "arg_nums": 1, "params": [{"name": "_bb", "type": "ByteBuffer"}], "return_type": "ByteBuffer", "signature": "public ByteBuffer objectInByteBuffer(ByteBuffer _bb)", "original_string": "  public ByteBuffer objectInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ByteBuffer", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[int]createEntry_(FlatBufferBuilder,int,int)", "name": "createEntry_", "arg_nums": 3, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "geometryOffset", "type": "int"}, {"name": "objectOffset", "type": "int"}], "return_type": "int", "signature": "public static int createEntry_(FlatBufferBuilder builder,\n      int geometryOffset,\n      int objectOffset)", "original_string": "  public static int createEntry_(FlatBufferBuilder builder,\n      int geometryOffset,\n      int objectOffset) {\n    builder.startTable(2);\n    Entry_.addObject(builder, objectOffset);\n    Entry_.addGeometry(builder, geometryOffset);\n    return Entry_.endEntry_(builder);\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[void]startEntry_(FlatBufferBuilder)", "name": "startEntry_", "arg_nums": 1, "params": [{"name": "builder", "type": "FlatBufferBuilder"}], "return_type": "void", "signature": "public static void startEntry_(FlatBufferBuilder builder)", "original_string": "  public static void startEntry_(FlatBufferBuilder builder) { builder.startTable(2); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[void]addGeometry(FlatBufferBuilder,int)", "name": "addGeometry", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "geometryOffset", "type": "int"}], "return_type": "void", "signature": "public static void addGeometry(FlatBufferBuilder builder, int geometryOffset)", "original_string": "  public static void addGeometry(FlatBufferBuilder builder, int geometryOffset) { builder.addOffset(0, geometryOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[void]addObject(FlatBufferBuilder,int)", "name": "addObject", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "objectOffset", "type": "int"}], "return_type": "void", "signature": "public static void addObject(FlatBufferBuilder builder, int objectOffset)", "original_string": "  public static void addObject(FlatBufferBuilder builder, int objectOffset) { builder.addOffset(1, objectOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[int]createObjectVector(FlatBufferBuilder,byte[])", "name": "createObjectVector", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "data", "type": "byte[]"}], "return_type": "int", "signature": "public static int createObjectVector(FlatBufferBuilder builder, byte[] data)", "original_string": "  public static int createObjectVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[int]createObjectVector(FlatBufferBuilder,ByteBuffer)", "name": "createObjectVector", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "data", "type": "ByteBuffer"}], "return_type": "int", "signature": "public static int createObjectVector(FlatBufferBuilder builder, ByteBuffer data)", "original_string": "  public static int createObjectVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[void]startObjectVector(FlatBufferBuilder,int)", "name": "startObjectVector", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "numElems", "type": "int"}], "return_type": "void", "signature": "public static void startObjectVector(FlatBufferBuilder builder, int numElems)", "original_string": "  public static void startObjectVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_.[int]endEntry_(FlatBufferBuilder)", "name": "endEntry_", "arg_nums": 1, "params": [{"name": "builder", "type": "FlatBufferBuilder"}], "return_type": "int", "signature": "public static int endEntry_(FlatBufferBuilder builder)", "original_string": "  public static int endEntry_(FlatBufferBuilder builder) {\n    int o = builder.endTable();\n    return o;\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java", "class_name": "Entry_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Entry_.java.Entry_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java.LineFloat_.[void]__init(int,ByteBuffer)", "name": "__init", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "void", "signature": "public void __init(int _i, ByteBuffer _bb)", "original_string": "  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java", "class_name": "LineFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java.LineFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java.LineFloat_.[LineFloat_]__assign(int,ByteBuffer)", "name": "__assign", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "LineFloat_", "signature": "public LineFloat_ __assign(int _i, ByteBuffer _bb)", "original_string": "  public LineFloat_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java", "class_name": "LineFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java.LineFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "LineFloat_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java.LineFloat_.[float]minX()", "name": "minX", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float minX()", "original_string": "  public float minX() { return bb.getFloat(bb_pos + 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java", "class_name": "LineFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java.LineFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java.LineFloat_.[float]minY()", "name": "minY", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float minY()", "original_string": "  public float minY() { return bb.getFloat(bb_pos + 4); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java", "class_name": "LineFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java.LineFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java.LineFloat_.[float]maxX()", "name": "maxX", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float maxX()", "original_string": "  public float maxX() { return bb.getFloat(bb_pos + 8); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java", "class_name": "LineFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java.LineFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java.LineFloat_.[float]maxY()", "name": "maxY", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float maxY()", "original_string": "  public float maxY() { return bb.getFloat(bb_pos + 12); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java", "class_name": "LineFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java.LineFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java.LineFloat_.[int]createLineFloat_(FlatBufferBuilder,float,float,float,float)", "name": "createLineFloat_", "arg_nums": 5, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "minX", "type": "float"}, {"name": "minY", "type": "float"}, {"name": "maxX", "type": "float"}, {"name": "maxY", "type": "float"}], "return_type": "int", "signature": "public static int createLineFloat_(FlatBufferBuilder builder, float minX, float minY, float maxX, float maxY)", "original_string": "  public static int createLineFloat_(FlatBufferBuilder builder, float minX, float minY, float maxX, float maxY) {\n    builder.prep(4, 16);\n    builder.putFloat(maxY);\n    builder.putFloat(maxX);\n    builder.putFloat(minY);\n    builder.putFloat(minX);\n    return builder.offset();\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java", "class_name": "LineFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineFloat_.java.LineFloat_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java.CircleDouble_.[void]__init(int,ByteBuffer)", "name": "__init", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "void", "signature": "public void __init(int _i, ByteBuffer _bb)", "original_string": "  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java", "class_name": "CircleDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java.CircleDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java.CircleDouble_.[CircleDouble_]__assign(int,ByteBuffer)", "name": "__assign", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "CircleDouble_", "signature": "public CircleDouble_ __assign(int _i, ByteBuffer _bb)", "original_string": "  public CircleDouble_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java", "class_name": "CircleDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java.CircleDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "CircleDouble_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java.CircleDouble_.[double]x()", "name": "x", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double x()", "original_string": "  public double x() { return bb.getDouble(bb_pos + 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java", "class_name": "CircleDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java.CircleDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java.CircleDouble_.[double]y()", "name": "y", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double y()", "original_string": "  public double y() { return bb.getDouble(bb_pos + 8); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java", "class_name": "CircleDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java.CircleDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java.CircleDouble_.[double]radius()", "name": "radius", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double radius()", "original_string": "  public double radius() { return bb.getDouble(bb_pos + 16); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java", "class_name": "CircleDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java.CircleDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java.CircleDouble_.[int]createCircleDouble_(FlatBufferBuilder,double,double,double)", "name": "createCircleDouble_", "arg_nums": 4, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "x", "type": "double"}, {"name": "y", "type": "double"}, {"name": "radius", "type": "double"}], "return_type": "int", "signature": "public static int createCircleDouble_(FlatBufferBuilder builder, double x, double y, double radius)", "original_string": "  public static int createCircleDouble_(FlatBufferBuilder builder, double x, double y, double radius) {\n    builder.prep(8, 24);\n    builder.putDouble(radius);\n    builder.putDouble(y);\n    builder.putDouble(x);\n    return builder.offset();\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java", "class_name": "CircleDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleDouble_.java.CircleDouble_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoundsType_.java.BoundsType_.[]BoundsType_()", "name": "BoundsType_", "arg_nums": 0, "params": [], "return_type": "", "signature": "private BoundsType_()", "original_string": "  private BoundsType_() { }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoundsType_.java", "class_name": "BoundsType_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoundsType_.java.BoundsType_", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoundsType_.java.BoundsType_.[String]name(int)", "name": "name", "arg_nums": 1, "params": [{"name": "e", "type": "int"}], "return_type": "String", "signature": "public static String name(int e)", "original_string": "  public static String name(int e) { return names[e]; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoundsType_.java", "class_name": "BoundsType_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoundsType_.java.BoundsType_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[void]ValidateVersion()", "name": "ValidateVersion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public static void ValidateVersion()", "original_string": "  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[Context_]getRootAsContext_(ByteBuffer)", "name": "getRootAsContext_", "arg_nums": 1, "params": [{"name": "_bb", "type": "ByteBuffer"}], "return_type": "Context_", "signature": "public static Context_ getRootAsContext_(ByteBuffer _bb)", "original_string": "  public static Context_ getRootAsContext_(ByteBuffer _bb) { return getRootAsContext_(_bb, new Context_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Context_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[Context_]getRootAsContext_(ByteBuffer,Context_)", "name": "getRootAsContext_", "arg_nums": 2, "params": [{"name": "_bb", "type": "ByteBuffer"}, {"name": "obj", "type": "Context_"}], "return_type": "Context_", "signature": "public static Context_ getRootAsContext_(ByteBuffer _bb, Context_ obj)", "original_string": "  public static Context_ getRootAsContext_(ByteBuffer _bb, Context_ obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Context_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[void]__init(int,ByteBuffer)", "name": "__init", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "void", "signature": "public void __init(int _i, ByteBuffer _bb)", "original_string": "  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[Context_]__assign(int,ByteBuffer)", "name": "__assign", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "Context_", "signature": "public Context_ __assign(int _i, ByteBuffer _bb)", "original_string": "  public Context_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Context_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[com.github.davidmoten.rtree.fbs.generated.Bounds_]bounds()", "name": "bounds", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Bounds_", "signature": "public com.github.davidmoten.rtree.fbs.generated.Bounds_ bounds()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Bounds_ bounds() { return bounds(new com.github.davidmoten.rtree.fbs.generated.Bounds_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Bounds_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[com.github.davidmoten.rtree.fbs.generated.Bounds_]bounds(com.github.davidmoten.rtree.fbs.generated.Bounds_)", "name": "bounds", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.Bounds_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.Bounds_", "signature": "public com.github.davidmoten.rtree.fbs.generated.Bounds_ bounds(com.github.davidmoten.rtree.fbs.generated.Bounds_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Bounds_ bounds(com.github.davidmoten.rtree.fbs.generated.Bounds_ obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Bounds_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[int]minChildren()", "name": "minChildren", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int minChildren()", "original_string": "  public int minChildren() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[int]maxChildren()", "name": "maxChildren", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int maxChildren()", "original_string": "  public int maxChildren() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[int]createContext_(FlatBufferBuilder,int,int,int)", "name": "createContext_", "arg_nums": 4, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "boundsOffset", "type": "int"}, {"name": "minChildren", "type": "int"}, {"name": "maxChildren", "type": "int"}], "return_type": "int", "signature": "public static int createContext_(FlatBufferBuilder builder,\n      int boundsOffset,\n      int minChildren,\n      int maxChildren)", "original_string": "  public static int createContext_(FlatBufferBuilder builder,\n      int boundsOffset,\n      int minChildren,\n      int maxChildren) {\n    builder.startTable(3);\n    Context_.addMaxChildren(builder, maxChildren);\n    Context_.addMinChildren(builder, minChildren);\n    Context_.addBounds(builder, boundsOffset);\n    return Context_.endContext_(builder);\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[void]startContext_(FlatBufferBuilder)", "name": "startContext_", "arg_nums": 1, "params": [{"name": "builder", "type": "FlatBufferBuilder"}], "return_type": "void", "signature": "public static void startContext_(FlatBufferBuilder builder)", "original_string": "  public static void startContext_(FlatBufferBuilder builder) { builder.startTable(3); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[void]addBounds(FlatBufferBuilder,int)", "name": "addBounds", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "boundsOffset", "type": "int"}], "return_type": "void", "signature": "public static void addBounds(FlatBufferBuilder builder, int boundsOffset)", "original_string": "  public static void addBounds(FlatBufferBuilder builder, int boundsOffset) { builder.addOffset(0, boundsOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[void]addMinChildren(FlatBufferBuilder,int)", "name": "addMinChildren", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "minChildren", "type": "int"}], "return_type": "void", "signature": "public static void addMinChildren(FlatBufferBuilder builder, int minChildren)", "original_string": "  public static void addMinChildren(FlatBufferBuilder builder, int minChildren) { builder.addInt(1, minChildren, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[void]addMaxChildren(FlatBufferBuilder,int)", "name": "addMaxChildren", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "maxChildren", "type": "int"}], "return_type": "void", "signature": "public static void addMaxChildren(FlatBufferBuilder builder, int maxChildren)", "original_string": "  public static void addMaxChildren(FlatBufferBuilder builder, int maxChildren) { builder.addInt(2, maxChildren, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_.[int]endContext_(FlatBufferBuilder)", "name": "endContext_", "arg_nums": 1, "params": [{"name": "builder", "type": "FlatBufferBuilder"}], "return_type": "int", "signature": "public static int endContext_(FlatBufferBuilder builder)", "original_string": "  public static int endContext_(FlatBufferBuilder builder) {\n    int o = builder.endTable();\n    return o;\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java", "class_name": "Context_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Context_.java.Context_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/GeometryType_.java.GeometryType_.[]GeometryType_()", "name": "GeometryType_", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GeometryType_()", "original_string": "  private GeometryType_() { }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/GeometryType_.java", "class_name": "GeometryType_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/GeometryType_.java.GeometryType_", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/GeometryType_.java.GeometryType_.[String]name(int)", "name": "name", "arg_nums": 1, "params": [{"name": "e", "type": "int"}], "return_type": "String", "signature": "public static String name(int e)", "original_string": "  public static String name(int e) { return names[e]; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/GeometryType_.java", "class_name": "GeometryType_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/GeometryType_.java.GeometryType_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java.CircleFloat_.[void]__init(int,ByteBuffer)", "name": "__init", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "void", "signature": "public void __init(int _i, ByteBuffer _bb)", "original_string": "  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java", "class_name": "CircleFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java.CircleFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java.CircleFloat_.[CircleFloat_]__assign(int,ByteBuffer)", "name": "__assign", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "CircleFloat_", "signature": "public CircleFloat_ __assign(int _i, ByteBuffer _bb)", "original_string": "  public CircleFloat_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java", "class_name": "CircleFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java.CircleFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "CircleFloat_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java.CircleFloat_.[float]x()", "name": "x", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float x()", "original_string": "  public float x() { return bb.getFloat(bb_pos + 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java", "class_name": "CircleFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java.CircleFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java.CircleFloat_.[float]y()", "name": "y", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float y()", "original_string": "  public float y() { return bb.getFloat(bb_pos + 4); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java", "class_name": "CircleFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java.CircleFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java.CircleFloat_.[float]radius()", "name": "radius", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float radius()", "original_string": "  public float radius() { return bb.getFloat(bb_pos + 8); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java", "class_name": "CircleFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java.CircleFloat_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java.CircleFloat_.[int]createCircleFloat_(FlatBufferBuilder,float,float,float)", "name": "createCircleFloat_", "arg_nums": 4, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "x", "type": "float"}, {"name": "y", "type": "float"}, {"name": "radius", "type": "float"}], "return_type": "int", "signature": "public static int createCircleFloat_(FlatBufferBuilder builder, float x, float y, float radius)", "original_string": "  public static int createCircleFloat_(FlatBufferBuilder builder, float x, float y, float radius) {\n    builder.prep(4, 12);\n    builder.putFloat(radius);\n    builder.putFloat(y);\n    builder.putFloat(x);\n    return builder.offset();\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java", "class_name": "CircleFloat_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/CircleFloat_.java.CircleFloat_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[void]ValidateVersion()", "name": "ValidateVersion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public static void ValidateVersion()", "original_string": "  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[Node_]getRootAsNode_(ByteBuffer)", "name": "getRootAsNode_", "arg_nums": 1, "params": [{"name": "_bb", "type": "ByteBuffer"}], "return_type": "Node_", "signature": "public static Node_ getRootAsNode_(ByteBuffer _bb)", "original_string": "  public static Node_ getRootAsNode_(ByteBuffer _bb) { return getRootAsNode_(_bb, new Node_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Node_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[Node_]getRootAsNode_(ByteBuffer,Node_)", "name": "getRootAsNode_", "arg_nums": 2, "params": [{"name": "_bb", "type": "ByteBuffer"}, {"name": "obj", "type": "Node_"}], "return_type": "Node_", "signature": "public static Node_ getRootAsNode_(ByteBuffer _bb, Node_ obj)", "original_string": "  public static Node_ getRootAsNode_(ByteBuffer _bb, Node_ obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Node_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[void]__init(int,ByteBuffer)", "name": "__init", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "void", "signature": "public void __init(int _i, ByteBuffer _bb)", "original_string": "  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[Node_]__assign(int,ByteBuffer)", "name": "__assign", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "Node_", "signature": "public Node_ __assign(int _i, ByteBuffer _bb)", "original_string": "  public Node_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Node_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[com.github.davidmoten.rtree.fbs.generated.Bounds_]mbb()", "name": "mbb", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Bounds_", "signature": "public com.github.davidmoten.rtree.fbs.generated.Bounds_ mbb()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Bounds_ mbb() { return mbb(new com.github.davidmoten.rtree.fbs.generated.Bounds_()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Bounds_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[com.github.davidmoten.rtree.fbs.generated.Bounds_]mbb(com.github.davidmoten.rtree.fbs.generated.Bounds_)", "name": "mbb", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.Bounds_"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.Bounds_", "signature": "public com.github.davidmoten.rtree.fbs.generated.Bounds_ mbb(com.github.davidmoten.rtree.fbs.generated.Bounds_ obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Bounds_ mbb(com.github.davidmoten.rtree.fbs.generated.Bounds_ obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Bounds_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[com.github.davidmoten.rtree.fbs.generated.Node_]children(int)", "name": "children", "arg_nums": 1, "params": [{"name": "j", "type": "int"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.Node_", "signature": "public com.github.davidmoten.rtree.fbs.generated.Node_ children(int j)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Node_ children(int j) { return children(new com.github.davidmoten.rtree.fbs.generated.Node_(), j); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Node_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[com.github.davidmoten.rtree.fbs.generated.Node_]children(com.github.davidmoten.rtree.fbs.generated.Node_,int)", "name": "children", "arg_nums": 2, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.Node_"}, {"name": "j", "type": "int"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.Node_", "signature": "public com.github.davidmoten.rtree.fbs.generated.Node_ children(com.github.davidmoten.rtree.fbs.generated.Node_ obj, int j)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Node_ children(com.github.davidmoten.rtree.fbs.generated.Node_ obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Node_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[int]childrenLength()", "name": "childrenLength", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int childrenLength()", "original_string": "  public int childrenLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[com.github.davidmoten.rtree.fbs.generated.Node_.Vector]childrenVector()", "name": "childrenVector", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Node_.Vector", "signature": "public com.github.davidmoten.rtree.fbs.generated.Node_.Vector childrenVector()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Node_.Vector childrenVector() { return childrenVector(new com.github.davidmoten.rtree.fbs.generated.Node_.Vector()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Node_.Vector", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[com.github.davidmoten.rtree.fbs.generated.Node_.Vector]childrenVector(com.github.davidmoten.rtree.fbs.generated.Node_.Vector)", "name": "childrenVector", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.Node_.Vector"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.Node_.Vector", "signature": "public com.github.davidmoten.rtree.fbs.generated.Node_.Vector childrenVector(com.github.davidmoten.rtree.fbs.generated.Node_.Vector obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Node_.Vector childrenVector(com.github.davidmoten.rtree.fbs.generated.Node_.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Node_.Vector", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[com.github.davidmoten.rtree.fbs.generated.Entry_]entries(int)", "name": "entries", "arg_nums": 1, "params": [{"name": "j", "type": "int"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.Entry_", "signature": "public com.github.davidmoten.rtree.fbs.generated.Entry_ entries(int j)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Entry_ entries(int j) { return entries(new com.github.davidmoten.rtree.fbs.generated.Entry_(), j); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Entry_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[com.github.davidmoten.rtree.fbs.generated.Entry_]entries(com.github.davidmoten.rtree.fbs.generated.Entry_,int)", "name": "entries", "arg_nums": 2, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.Entry_"}, {"name": "j", "type": "int"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.Entry_", "signature": "public com.github.davidmoten.rtree.fbs.generated.Entry_ entries(com.github.davidmoten.rtree.fbs.generated.Entry_ obj, int j)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Entry_ entries(com.github.davidmoten.rtree.fbs.generated.Entry_ obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Entry_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[int]entriesLength()", "name": "entriesLength", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int entriesLength()", "original_string": "  public int entriesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[com.github.davidmoten.rtree.fbs.generated.Entry_.Vector]entriesVector()", "name": "entriesVector", "arg_nums": 0, "params": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Entry_.Vector", "signature": "public com.github.davidmoten.rtree.fbs.generated.Entry_.Vector entriesVector()", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Entry_.Vector entriesVector() { return entriesVector(new com.github.davidmoten.rtree.fbs.generated.Entry_.Vector()); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Entry_.Vector", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[com.github.davidmoten.rtree.fbs.generated.Entry_.Vector]entriesVector(com.github.davidmoten.rtree.fbs.generated.Entry_.Vector)", "name": "entriesVector", "arg_nums": 1, "params": [{"name": "obj", "type": "com.github.davidmoten.rtree.fbs.generated.Entry_.Vector"}], "return_type": "com.github.davidmoten.rtree.fbs.generated.Entry_.Vector", "signature": "public com.github.davidmoten.rtree.fbs.generated.Entry_.Vector entriesVector(com.github.davidmoten.rtree.fbs.generated.Entry_.Vector obj)", "original_string": "  public com.github.davidmoten.rtree.fbs.generated.Entry_.Vector entriesVector(com.github.davidmoten.rtree.fbs.generated.Entry_.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "com.github.davidmoten.rtree.fbs.generated.Entry_.Vector", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[int]createNode_(FlatBufferBuilder,int,int,int)", "name": "createNode_", "arg_nums": 4, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "mbbOffset", "type": "int"}, {"name": "childrenOffset", "type": "int"}, {"name": "entriesOffset", "type": "int"}], "return_type": "int", "signature": "public static int createNode_(FlatBufferBuilder builder,\n      int mbbOffset,\n      int childrenOffset,\n      int entriesOffset)", "original_string": "  public static int createNode_(FlatBufferBuilder builder,\n      int mbbOffset,\n      int childrenOffset,\n      int entriesOffset) {\n    builder.startTable(3);\n    Node_.addEntries(builder, entriesOffset);\n    Node_.addChildren(builder, childrenOffset);\n    Node_.addMbb(builder, mbbOffset);\n    return Node_.endNode_(builder);\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[void]startNode_(FlatBufferBuilder)", "name": "startNode_", "arg_nums": 1, "params": [{"name": "builder", "type": "FlatBufferBuilder"}], "return_type": "void", "signature": "public static void startNode_(FlatBufferBuilder builder)", "original_string": "  public static void startNode_(FlatBufferBuilder builder) { builder.startTable(3); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[void]addMbb(FlatBufferBuilder,int)", "name": "addMbb", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "mbbOffset", "type": "int"}], "return_type": "void", "signature": "public static void addMbb(FlatBufferBuilder builder, int mbbOffset)", "original_string": "  public static void addMbb(FlatBufferBuilder builder, int mbbOffset) { builder.addOffset(0, mbbOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[void]addChildren(FlatBufferBuilder,int)", "name": "addChildren", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "childrenOffset", "type": "int"}], "return_type": "void", "signature": "public static void addChildren(FlatBufferBuilder builder, int childrenOffset)", "original_string": "  public static void addChildren(FlatBufferBuilder builder, int childrenOffset) { builder.addOffset(1, childrenOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[int]createChildrenVector(FlatBufferBuilder,int[])", "name": "createChildrenVector", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "data", "type": "int[]"}], "return_type": "int", "signature": "public static int createChildrenVector(FlatBufferBuilder builder, int[] data)", "original_string": "  public static int createChildrenVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[void]startChildrenVector(FlatBufferBuilder,int)", "name": "startChildrenVector", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "numElems", "type": "int"}], "return_type": "void", "signature": "public static void startChildrenVector(FlatBufferBuilder builder, int numElems)", "original_string": "  public static void startChildrenVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[void]addEntries(FlatBufferBuilder,int)", "name": "addEntries", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "entriesOffset", "type": "int"}], "return_type": "void", "signature": "public static void addEntries(FlatBufferBuilder builder, int entriesOffset)", "original_string": "  public static void addEntries(FlatBufferBuilder builder, int entriesOffset) { builder.addOffset(2, entriesOffset, 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[int]createEntriesVector(FlatBufferBuilder,int[])", "name": "createEntriesVector", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "data", "type": "int[]"}], "return_type": "int", "signature": "public static int createEntriesVector(FlatBufferBuilder builder, int[] data)", "original_string": "  public static int createEntriesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[void]startEntriesVector(FlatBufferBuilder,int)", "name": "startEntriesVector", "arg_nums": 2, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "numElems", "type": "int"}], "return_type": "void", "signature": "public static void startEntriesVector(FlatBufferBuilder builder, int numElems)", "original_string": "  public static void startEntriesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_.[int]endNode_(FlatBufferBuilder)", "name": "endNode_", "arg_nums": 1, "params": [{"name": "builder", "type": "FlatBufferBuilder"}], "return_type": "int", "signature": "public static int endNode_(FlatBufferBuilder builder)", "original_string": "  public static int endNode_(FlatBufferBuilder builder) {\n    int o = builder.endTable();\n    return o;\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java", "class_name": "Node_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/Node_.java.Node_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java.LineDouble_.[void]__init(int,ByteBuffer)", "name": "__init", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "void", "signature": "public void __init(int _i, ByteBuffer _bb)", "original_string": "  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java", "class_name": "LineDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java.LineDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java.LineDouble_.[LineDouble_]__assign(int,ByteBuffer)", "name": "__assign", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "LineDouble_", "signature": "public LineDouble_ __assign(int _i, ByteBuffer _bb)", "original_string": "  public LineDouble_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java", "class_name": "LineDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java.LineDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "LineDouble_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java.LineDouble_.[double]minX()", "name": "minX", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double minX()", "original_string": "  public double minX() { return bb.getDouble(bb_pos + 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java", "class_name": "LineDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java.LineDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java.LineDouble_.[double]minY()", "name": "minY", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double minY()", "original_string": "  public double minY() { return bb.getDouble(bb_pos + 8); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java", "class_name": "LineDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java.LineDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java.LineDouble_.[double]maxX()", "name": "maxX", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double maxX()", "original_string": "  public double maxX() { return bb.getDouble(bb_pos + 16); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java", "class_name": "LineDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java.LineDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java.LineDouble_.[double]maxY()", "name": "maxY", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double maxY()", "original_string": "  public double maxY() { return bb.getDouble(bb_pos + 24); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java", "class_name": "LineDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java.LineDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java.LineDouble_.[int]createLineDouble_(FlatBufferBuilder,double,double,double,double)", "name": "createLineDouble_", "arg_nums": 5, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "minX", "type": "double"}, {"name": "minY", "type": "double"}, {"name": "maxX", "type": "double"}, {"name": "maxY", "type": "double"}], "return_type": "int", "signature": "public static int createLineDouble_(FlatBufferBuilder builder, double minX, double minY, double maxX, double maxY)", "original_string": "  public static int createLineDouble_(FlatBufferBuilder builder, double minX, double minY, double maxX, double maxY) {\n    builder.prep(8, 32);\n    builder.putDouble(maxY);\n    builder.putDouble(maxX);\n    builder.putDouble(minY);\n    builder.putDouble(minX);\n    return builder.offset();\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java", "class_name": "LineDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/LineDouble_.java.LineDouble_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java.BoxDouble_.[void]__init(int,ByteBuffer)", "name": "__init", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "void", "signature": "public void __init(int _i, ByteBuffer _bb)", "original_string": "  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java", "class_name": "BoxDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java.BoxDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java.BoxDouble_.[BoxDouble_]__assign(int,ByteBuffer)", "name": "__assign", "arg_nums": 2, "params": [{"name": "_i", "type": "int"}, {"name": "_bb", "type": "ByteBuffer"}], "return_type": "BoxDouble_", "signature": "public BoxDouble_ __assign(int _i, ByteBuffer _bb)", "original_string": "  public BoxDouble_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java", "class_name": "BoxDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java.BoxDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BoxDouble_", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java.BoxDouble_.[double]minX()", "name": "minX", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double minX()", "original_string": "  public double minX() { return bb.getDouble(bb_pos + 0); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java", "class_name": "BoxDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java.BoxDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java.BoxDouble_.[double]minY()", "name": "minY", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double minY()", "original_string": "  public double minY() { return bb.getDouble(bb_pos + 8); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java", "class_name": "BoxDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java.BoxDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java.BoxDouble_.[double]maxX()", "name": "maxX", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double maxX()", "original_string": "  public double maxX() { return bb.getDouble(bb_pos + 16); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java", "class_name": "BoxDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java.BoxDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java.BoxDouble_.[double]maxY()", "name": "maxY", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double maxY()", "original_string": "  public double maxY() { return bb.getDouble(bb_pos + 24); }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java", "class_name": "BoxDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java.BoxDouble_", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java.BoxDouble_.[int]createBoxDouble_(FlatBufferBuilder,double,double,double,double)", "name": "createBoxDouble_", "arg_nums": 5, "params": [{"name": "builder", "type": "FlatBufferBuilder"}, {"name": "minX", "type": "double"}, {"name": "minY", "type": "double"}, {"name": "maxX", "type": "double"}, {"name": "maxY", "type": "double"}], "return_type": "int", "signature": "public static int createBoxDouble_(FlatBufferBuilder builder, double minX, double minY, double maxX, double maxY)", "original_string": "  public static int createBoxDouble_(FlatBufferBuilder builder, double minX, double minY, double maxX, double maxY) {\n    builder.prep(8, 32);\n    builder.putDouble(maxY);\n    builder.putDouble(maxX);\n    builder.putDouble(minY);\n    builder.putDouble(minX);\n    return builder.offset();\n  }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java", "class_name": "BoxDouble_", "class_uri": "src/main/java/com/github/davidmoten/rtree/fbs/generated/BoxDouble_.java.BoxDouble_", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo.[]SerializerKryo(Func1<? super T, byte[]>,Func1<byte[], ? extends T>,Func0<Kryo>)", "name": "SerializerKryo", "arg_nums": 3, "params": [{"name": "serializer", "type": "Func1<? super T, byte[]>"}, {"name": "deserializer", "type": "Func1<byte[], ? extends T>"}, {"name": "kryoFactory", "type": "Func0<Kryo>"}], "return_type": "", "signature": "public SerializerKryo(Func1<? super T, byte[]> serializer,\n            Func1<byte[], ? extends T> deserializer, Func0<Kryo> kryoFactory)", "original_string": "    public SerializerKryo(Func1<? super T, byte[]> serializer,\n            Func1<byte[], ? extends T> deserializer, Func0<Kryo> kryoFactory) {\n        this.serializer = serializer;\n        this.deserializer = deserializer;\n        this.kryoFactory = kryoFactory;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java", "class_name": "SerializerKryo", "class_uri": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo.[void]write(RTree<T, S>,OutputStream)", "name": "write", "arg_nums": 2, "params": [{"name": "tree", "type": "RTree<T, S>"}, {"name": "os", "type": "OutputStream"}], "return_type": "void", "signature": "@Override\n    public void write(RTree<T, S> tree, OutputStream os)", "original_string": "    @Override\n    public void write(RTree<T, S> tree, OutputStream os) throws IOException {\n        Output output = new Output(os);\n        Kryo kryo = kryoFactory.call();\n        write(kryo, output, tree);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java", "class_name": "SerializerKryo", "class_uri": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo.[void]write(Kryo,Output,RTree<T, S>)", "name": "write", "arg_nums": 3, "params": [{"name": "kryo", "type": "Kryo"}, {"name": "output", "type": "Output"}, {"name": "tree", "type": "RTree<T, S>"}], "return_type": "void", "signature": "private void write(Kryo kryo, Output output, RTree<T, S> tree)", "original_string": "    private void write(Kryo kryo, Output output, RTree<T, S> tree) {\n        writeContext(tree.context(), output);\n        output.writeBoolean(tree.root().isPresent());\n        output.writeInt(tree.size());\n        if (tree.root().isPresent()) {\n            writeNode(tree.root().get(), output);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java", "class_name": "SerializerKryo", "class_uri": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo.[void]writeNode(Node<T, S>,Output)", "name": "writeNode", "arg_nums": 2, "params": [{"name": "node", "type": "Node<T, S>"}, {"name": "output", "type": "Output"}], "return_type": "void", "signature": "private void writeNode(Node<T, S> node, Output output)", "original_string": "    private void writeNode(Node<T, S> node, Output output) {\n        boolean isLeaf = node instanceof Leaf;\n        output.writeBoolean(isLeaf);\n        if (isLeaf) {\n            Leaf<T, S> leaf = (Leaf<T, S>) node;\n            writeBounds(output, leaf.geometry().mbr());\n            output.writeInt(leaf.count());\n            for (Entry<T, S> entry : leaf.entries()) {\n                S g = entry.geometry();\n                writeValue(output, entry.value());\n                writeGeometry(output, g);\n            }\n        } else {\n            NonLeaf<T, S> nonLeaf = (NonLeaf<T, S>) node;\n            writeBounds(output, nonLeaf.geometry().mbr());\n            output.writeInt(nonLeaf.count());\n            for (Node<T, S> nd : nonLeaf.children()) {\n                writeNode(nd, output);\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java", "class_name": "SerializerKryo", "class_uri": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo.[void]writeValue(Output,T)", "name": "writeValue", "arg_nums": 2, "params": [{"name": "output", "type": "Output"}, {"name": "t", "type": "T"}], "return_type": "void", "signature": "private void writeValue(Output output, T t)", "original_string": "    private void writeValue(Output output, T t) {\n        byte[] bytes = serializer.call(t);\n        output.write(bytes.length);\n        output.write(bytes);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java", "class_name": "SerializerKryo", "class_uri": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo.[void]writeRectangle(Output,S)", "name": "writeRectangle", "arg_nums": 2, "params": [{"name": "output", "type": "Output"}, {"name": "g", "type": "S"}], "return_type": "void", "signature": "private void writeRectangle(Output output, S g)", "original_string": "    private void writeRectangle(Output output, S g) {\n        Rectangle r = (Rectangle) g;\n        output.write(0);\n        writeBounds(output, r);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java", "class_name": "SerializerKryo", "class_uri": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo.[void]writeGeometry(Output,S)", "name": "writeGeometry", "arg_nums": 2, "params": [{"name": "output", "type": "Output"}, {"name": "g", "type": "S"}], "return_type": "void", "signature": "private void writeGeometry(Output output, S g)", "original_string": "    private void writeGeometry(Output output, S g) {\n        if (g instanceof Rectangle) {\n            writeRectangle(output, g);\n        } else {\n            throw new RuntimeException(\"unexpected\");\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java", "class_name": "SerializerKryo", "class_uri": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo.[void]writeBounds(Output,Rectangle)", "name": "writeBounds", "arg_nums": 2, "params": [{"name": "output", "type": "Output"}, {"name": "mbr", "type": "Rectangle"}], "return_type": "void", "signature": "private void writeBounds(Output output, Rectangle mbr)", "original_string": "    private void writeBounds(Output output, Rectangle mbr) {\n        output.writeBoolean(mbr.isDoublePrecision());\n        if (mbr.isDoublePrecision()) {\n            output.writeDouble(mbr.x1());\n            output.writeDouble(mbr.y1());\n            output.writeDouble(mbr.y1());\n            output.writeDouble(mbr.y2());\n        } else {\n            output.writeFloat((float) mbr.x1());\n            output.writeFloat((float) mbr.y1());\n            output.writeFloat((float) mbr.y1());\n            output.writeFloat((float) mbr.y2());\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java", "class_name": "SerializerKryo", "class_uri": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo.[void]writeContext(Context<T, S>,Output)", "name": "writeContext", "arg_nums": 2, "params": [{"name": "context", "type": "Context<T, S>"}, {"name": "output", "type": "Output"}], "return_type": "void", "signature": "private void writeContext(Context<T, S> context, Output output)", "original_string": "    private void writeContext(Context<T, S> context, Output output) {\n        output.writeInt(context.minChildren());\n        output.writeInt(context.maxChildren());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java", "class_name": "SerializerKryo", "class_uri": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo.[RTree<T, S>]read(InputStream,long,InternalStructure)", "name": "read", "arg_nums": 3, "params": [{"name": "is", "type": "InputStream"}, {"name": "sizeBytes", "type": "long"}, {"name": "structure", "type": "InternalStructure"}], "return_type": "RTree<T, S>", "signature": "@Override\n    public RTree<T, S> read(InputStream is, long sizeBytes, InternalStructure structure)", "original_string": "    @Override\n    public RTree<T, S> read(InputStream is, long sizeBytes, InternalStructure structure)\n            throws IOException {\n        Input input = new Input(is);\n        return read(input);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java", "class_name": "SerializerKryo", "class_uri": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo.[RTree<T, S>]read(Input)", "name": "read", "arg_nums": 1, "params": [{"name": "input", "type": "Input"}], "return_type": "RTree<T, S>", "signature": "private static <T, S extends Geometry> RTree<T, S> read(Input input)", "original_string": "    private static <T, S extends Geometry> RTree<T, S> read(Input input) {\n        Context<T, S> context = readContext(input);\n        boolean hasRoot = input.readBoolean();\n        int size = input.readInt();\n        Optional<Node<T, S>> root;\n        if (hasRoot) {\n            root = Optional.of(SerializerKryo.readNode(input));\n        } else {\n            root = Optional.empty();\n        }\n        return SerializerHelper.create(root, size, context);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java", "class_name": "SerializerKryo", "class_uri": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "RTree<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo.[Node<T, S>]readNode(Input)", "name": "readNode", "arg_nums": 1, "params": [{"name": "input", "type": "Input"}], "return_type": "Node<T, S>", "signature": "private static <T, S extends Geometry> Node<T, S> readNode(Input input)", "original_string": "    private static <T, S extends Geometry> Node<T, S> readNode(Input input) {\n        // TODO\n        return null;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java", "class_name": "SerializerKryo", "class_uri": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Node<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo.[Context<T, S>]readContext(Input)", "name": "readContext", "arg_nums": 1, "params": [{"name": "input", "type": "Input"}], "return_type": "Context<T, S>", "signature": "private static <T, S extends Geometry> Context<T, S> readContext(Input input)", "original_string": "    private static <T, S extends Geometry> Context<T, S> readContext(Input input) {\n        return new Context<T, S>(2, 4, new SelectorRStar(), new SplitterRStar(),\n                FactoryDefault.<T, S>instance());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java", "class_name": "SerializerKryo", "class_uri": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Context<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo.[Serializer<T, S>]create(Func1<? super T, byte[]>,Func1<byte[], ? extends T>,Func0<Kryo>)", "name": "create", "arg_nums": 3, "params": [{"name": "serializer", "type": "Func1<? super T, byte[]>"}, {"name": "deserializer", "type": "Func1<byte[], ? extends T>"}, {"name": "kryoFactory", "type": "Func0<Kryo>"}], "return_type": "Serializer<T, S>", "signature": "public static <T, S extends Geometry> Serializer<T, S> create(\n            Func1<? super T, byte[]> serializer, Func1<byte[], ? extends T> deserializer,\n            Func0<Kryo> kryoFactory)", "original_string": "    public static <T, S extends Geometry> Serializer<T, S> create(\n            Func1<? super T, byte[]> serializer, Func1<byte[], ? extends T> deserializer,\n            Func0<Kryo> kryoFactory) {\n        return new SerializerKryo<T, S>(serializer, deserializer, kryoFactory);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java", "class_name": "SerializerKryo", "class_uri": "src/main/java/com/github/davidmoten/rtree/kryo/SerializerKryo.java.SerializerKryo", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Serializer<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java.Geometry.[double]distance(Rectangle)", "name": "distance", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "double distance(Rectangle r)", "original_string": "    double distance(Rectangle r);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java", "class_name": "Geometry", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java.Geometry", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": "\n<p>\nReturns the distance to the given {@link Rectangle}. For a {@link Rectangle}\nthis might be Euclidean distance but for an EPSG4326 lat-long Rectangle might\nbe great-circle distance. The distance function should satisfy the following\nproperties:\n</p>\n\n<p>\n<code>distance(r) &gt;= 0</code>\n</p>\n\n<p>\n<code>if r1 contains r2 then distance(r1)&lt;=distance(r2)</code>\n</p>\n\n\n@param r\n           rectangle to measure distance to\n@return distance to the rectangle r from the geometry\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java.Geometry.[Rectangle]mbr()", "name": "mbr", "arg_nums": 0, "params": [], "return_type": "Rectangle", "signature": "Rectangle mbr()", "original_string": "    Rectangle mbr();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java", "class_name": "Geometry", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java.Geometry", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": "\nReturns the minimum bounding rectangle of this geometry.\n\n@return minimum bounding rectangle\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java.Geometry.[boolean]intersects(Rectangle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "boolean", "signature": "boolean intersects(Rectangle r)", "original_string": "    boolean intersects(Rectangle r);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java", "class_name": "Geometry", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java.Geometry", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java.Geometry.[boolean]isDoublePrecision()", "name": "isDoublePrecision", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "boolean isDoublePrecision()", "original_string": "    boolean isDoublePrecision();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java", "class_name": "Geometry", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometry.java.Geometry", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Group.java.Group.[]Group(List<T>)", "name": "Group", "arg_nums": 1, "params": [{"name": "list", "type": "List<T>"}], "return_type": "", "signature": "public Group(List<T> list)", "original_string": "    public Group(List<T> list) {\n        this.list = list;\n        this.mbr = Util.mbr(list);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Group.java", "class_name": "Group", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Group.java.Group", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Group.java.Group.[List<T>]list()", "name": "list", "arg_nums": 0, "params": [], "return_type": "List<T>", "signature": "public List<T> list()", "original_string": "    public List<T> list() {\n        return list;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Group.java", "class_name": "Group", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Group.java.Group", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Group.java.Group.[Geometry]geometry()", "name": "geometry", "arg_nums": 0, "params": [], "return_type": "Geometry", "signature": "@Override\n    public Geometry geometry()", "original_string": "    @Override\n    public Geometry geometry() {\n        return mbr;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Group.java", "class_name": "Group", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Group.java.Group", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Geometry", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[]Geometries()", "name": "Geometries", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Geometries()", "original_string": "    private Geometries() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[Point]point(double,double)", "name": "point", "arg_nums": 2, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}], "return_type": "Point", "signature": "public static Point point(double x, double y)", "original_string": "    public static Point point(double x, double y) {\n        return PointDouble.create(x, y);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Point", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[Point]point(float,float)", "name": "point", "arg_nums": 2, "params": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "return_type": "Point", "signature": "public static Point point(float x, float y)", "original_string": "    public static Point point(float x, float y) {\n        return PointFloat.create(x, y);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Point", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[Point]pointGeographic(double,double)", "name": "pointGeographic", "arg_nums": 2, "params": [{"name": "lon", "type": "double"}, {"name": "lat", "type": "double"}], "return_type": "Point", "signature": "public static Point pointGeographic(double lon, double lat)", "original_string": "    public static Point pointGeographic(double lon, double lat) {\n        return point(normalizeLongitudeDouble(lon), lat);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Point", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[Point]pointGeographic(float,float)", "name": "pointGeographic", "arg_nums": 2, "params": [{"name": "lon", "type": "float"}, {"name": "lat", "type": "float"}], "return_type": "Point", "signature": "public static Point pointGeographic(float lon, float lat)", "original_string": "    public static Point pointGeographic(float lon, float lat) {\n        return point(normalizeLongitude(lon), lat);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Point", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[Rectangle]rectangle(double,double,double,double)", "name": "rectangle", "arg_nums": 4, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "Rectangle", "signature": "public static Rectangle rectangle(double x1, double y1, double x2, double y2)", "original_string": "    public static Rectangle rectangle(double x1, double y1, double x2, double y2) {\n        return rectangleDouble(x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[Rectangle]rectangle(float,float,float,float)", "name": "rectangle", "arg_nums": 4, "params": [{"name": "x1", "type": "float"}, {"name": "y1", "type": "float"}, {"name": "x2", "type": "float"}, {"name": "y2", "type": "float"}], "return_type": "Rectangle", "signature": "public static Rectangle rectangle(float x1, float y1, float x2, float y2)", "original_string": "    public static Rectangle rectangle(float x1, float y1, float x2, float y2) {\n        return RectangleFloat.create(x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[Rectangle]rectangleGeographic(double,double,double,double)", "name": "rectangleGeographic", "arg_nums": 4, "params": [{"name": "lon1", "type": "double"}, {"name": "lat1", "type": "double"}, {"name": "lon2", "type": "double"}, {"name": "lat2", "type": "double"}], "return_type": "Rectangle", "signature": "public static Rectangle rectangleGeographic(double lon1, double lat1, double lon2,\n            double lat2)", "original_string": "    public static Rectangle rectangleGeographic(double lon1, double lat1, double lon2,\n            double lat2) {\n        return rectangleGeographic((float) lon1, (float) lat1, (float) lon2, (float) lat2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[Rectangle]rectangleGeographic(float,float,float,float)", "name": "rectangleGeographic", "arg_nums": 4, "params": [{"name": "lon1", "type": "float"}, {"name": "lat1", "type": "float"}, {"name": "lon2", "type": "float"}, {"name": "lat2", "type": "float"}], "return_type": "Rectangle", "signature": "public static Rectangle rectangleGeographic(float lon1, float lat1, float lon2, float lat2)", "original_string": "    public static Rectangle rectangleGeographic(float lon1, float lat1, float lon2, float lat2) {\n        float x1 = normalizeLongitude(lon1);\n        float x2 = normalizeLongitude(lon2);\n        if (x2 < x1) {\n            x2 += 360;\n        }\n        return rectangle(x1, lat1, x2, lat2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[Rectangle]rectangleDouble(double,double,double,double)", "name": "rectangleDouble", "arg_nums": 4, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "Rectangle", "signature": "private static Rectangle rectangleDouble(double x1, double y1, double x2, double y2)", "original_string": "    private static Rectangle rectangleDouble(double x1, double y1, double x2, double y2) {\n        return  RectangleDouble.create(x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[Circle]circle(double,double,double)", "name": "circle", "arg_nums": 3, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}, {"name": "radius", "type": "double"}], "return_type": "Circle", "signature": "public static Circle circle(double x, double y, double radius)", "original_string": "    public static Circle circle(double x, double y, double radius) {\n        return CircleDouble.create(x, y, radius);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Circle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[Circle]circle(float,float,float)", "name": "circle", "arg_nums": 3, "params": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}, {"name": "radius", "type": "float"}], "return_type": "Circle", "signature": "public static Circle circle(float x, float y, float radius)", "original_string": "    public static Circle circle(float x, float y, float radius) {\n        return CircleFloat.create(x, y, radius);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Circle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[Line]line(double,double,double,double)", "name": "line", "arg_nums": 4, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "Line", "signature": "public static Line line(double x1, double y1, double x2, double y2)", "original_string": "    public static Line line(double x1, double y1, double x2, double y2) {\n        return LineDouble.create(x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Line", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[Line]line(float,float,float,float)", "name": "line", "arg_nums": 4, "params": [{"name": "x1", "type": "float"}, {"name": "y1", "type": "float"}, {"name": "x2", "type": "float"}, {"name": "y2", "type": "float"}], "return_type": "Line", "signature": "public static Line line(float x1, float y1, float x2, float y2)", "original_string": "    public static Line line(float x1, float y1, float x2, float y2) {\n        return LineFloat.create(x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Line", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[double]normalizeLongitude(double)", "name": "normalizeLongitude", "arg_nums": 1, "params": [{"name": "d", "type": "double"}], "return_type": "double", "signature": "@VisibleForTesting\n    static double normalizeLongitude(double d)", "original_string": "    @VisibleForTesting\n    static double normalizeLongitude(double d) {\n        return normalizeLongitude((float) d);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "@VisibleForTesting\n    static", "marker_annotations": ["@VisibleForTesting"], "non_marker_annotations": ["static"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[float]normalizeLongitude(float)", "name": "normalizeLongitude", "arg_nums": 1, "params": [{"name": "d", "type": "float"}], "return_type": "float", "signature": "private static float normalizeLongitude(float d)", "original_string": "    private static float normalizeLongitude(float d) {\n        if (d == -180.0f)\n            return -180.0f;\n        else {\n            float sign = Math.signum(d);\n            float x = Math.abs(d) / 360;\n            float x2 = (x - (float) Math.floor(x)) * 360;\n            if (x2 >= 180)\n                x2 -= 360;\n            return x2 * sign;\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries.[double]normalizeLongitudeDouble(double)", "name": "normalizeLongitudeDouble", "arg_nums": 1, "params": [{"name": "d", "type": "double"}], "return_type": "double", "signature": "private static double normalizeLongitudeDouble(double d)", "original_string": "    private static double normalizeLongitudeDouble(double d) {\n        if (d == -180.0f)\n            return -180.0d;\n        else {\n            double sign = Math.signum(d);\n            double x = Math.abs(d) / 360;\n            double x2 = (x - (float) Math.floor(x)) * 360;\n            if (x2 >= 180)\n                x2 -= 360;\n            return x2 * sign;\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java", "class_name": "Geometries", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Geometries.java.Geometries", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java.ListPair.[]ListPair(List<T>,List<T>)", "name": "ListPair", "arg_nums": 2, "params": [{"name": "list1", "type": "List<T>"}, {"name": "list2", "type": "List<T>"}], "return_type": "", "signature": "public ListPair(List<T> list1, List<T> list2)", "original_string": "    public ListPair(List<T> list1, List<T> list2) {\n        this.group1 = new Group<T>(list1);\n        this.group2 = new Group<T>(list2);\n        this.marginSum = group1.geometry().mbr().perimeter() + group2.geometry().mbr().perimeter();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java", "class_name": "ListPair", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java.ListPair", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java.ListPair.[Group<T>]group1()", "name": "group1", "arg_nums": 0, "params": [], "return_type": "Group<T>", "signature": "public Group<T> group1()", "original_string": "    public Group<T> group1() {\n        return group1;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java", "class_name": "ListPair", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java.ListPair", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Group<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java.ListPair.[Group<T>]group2()", "name": "group2", "arg_nums": 0, "params": [], "return_type": "Group<T>", "signature": "public Group<T> group2()", "original_string": "    public Group<T> group2() {\n        return group2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java", "class_name": "ListPair", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java.ListPair", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Group<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java.ListPair.[double]areaSum()", "name": "areaSum", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double areaSum()", "original_string": "    public double areaSum() {\n        if (areaSum == -1)\n            areaSum = group1.geometry().mbr().area() + group2.geometry().mbr().area();\n        return areaSum;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java", "class_name": "ListPair", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java.ListPair", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java.ListPair.[double]marginSum()", "name": "marginSum", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double marginSum()", "original_string": "    public double marginSum() {\n        return marginSum;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java", "class_name": "ListPair", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/ListPair.java.ListPair", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/HasGeometry.java.HasGeometry.[Geometry]geometry()", "name": "geometry", "arg_nums": 0, "params": [], "return_type": "Geometry", "signature": "Geometry geometry()", "original_string": "    Geometry geometry();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/HasGeometry.java", "class_name": "HasGeometry", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/HasGeometry.java.HasGeometry", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Geometry", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Point.java.Point.[double]x()", "name": "x", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double x()", "original_string": "    double x();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Point.java", "class_name": "Point", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Point.java.Point", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Point.java.Point.[double]y()", "name": "y", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double y()", "original_string": "    double y();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Point.java", "class_name": "Point", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Point.java.Point", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[double]x1()", "name": "x1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double x1()", "original_string": "    double x1();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java", "class_name": "Rectangle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[double]y1()", "name": "y1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double y1()", "original_string": "    double y1();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java", "class_name": "Rectangle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[double]x2()", "name": "x2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double x2()", "original_string": "    double x2();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java", "class_name": "Rectangle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[double]y2()", "name": "y2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double y2()", "original_string": "    double y2();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java", "class_name": "Rectangle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[double]area()", "name": "area", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double area()", "original_string": "    double area();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java", "class_name": "Rectangle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[double]intersectionArea(Rectangle)", "name": "intersectionArea", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "double intersectionArea(Rectangle r)", "original_string": "    double intersectionArea(Rectangle r);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java", "class_name": "Rectangle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[double]perimeter()", "name": "perimeter", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double perimeter()", "original_string": "    double perimeter();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java", "class_name": "Rectangle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[Rectangle]add(Rectangle)", "name": "add", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "Rectangle", "signature": "Rectangle add(Rectangle r)", "original_string": "    Rectangle add(Rectangle r);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java", "class_name": "Rectangle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[boolean]contains(double,double)", "name": "contains", "arg_nums": 2, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}], "return_type": "boolean", "signature": "boolean contains(double x, double y)", "original_string": "    boolean contains(double x, double y);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java", "class_name": "Rectangle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle.[boolean]isDoublePrecision()", "name": "isDoublePrecision", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "boolean isDoublePrecision()", "original_string": "    boolean isDoublePrecision();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java", "class_name": "Rectangle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Rectangle.java.Rectangle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle.[double]x()", "name": "x", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double x()", "original_string": "    double x();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java", "class_name": "Circle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle.[double]y()", "name": "y", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double y()", "original_string": "    double y();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java", "class_name": "Circle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle.[double]radius()", "name": "radius", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double radius()", "original_string": "    double radius();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java", "class_name": "Circle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle.[boolean]intersects(Circle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "c", "type": "Circle"}], "return_type": "boolean", "signature": "boolean intersects(Circle c)", "original_string": "    boolean intersects(Circle c);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java", "class_name": "Circle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle.[boolean]intersects(Point)", "name": "intersects", "arg_nums": 1, "params": [{"name": "point", "type": "Point"}], "return_type": "boolean", "signature": "boolean intersects(Point point)", "original_string": "    boolean intersects(Point point);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java", "class_name": "Circle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle.[boolean]intersects(Line)", "name": "intersects", "arg_nums": 1, "params": [{"name": "line", "type": "Line"}], "return_type": "boolean", "signature": "boolean intersects(Line line)", "original_string": "    boolean intersects(Line line);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java", "class_name": "Circle", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Circle.java.Circle", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Intersects.java.Intersects.[]Intersects()", "name": "Intersects", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Intersects()", "original_string": "    private Intersects() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Intersects.java", "class_name": "Intersects", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Intersects.java.Intersects", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line.[double]x1()", "name": "x1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double x1()", "original_string": "    double x1();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java", "class_name": "Line", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line.[double]y1()", "name": "y1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double y1()", "original_string": "    double y1();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java", "class_name": "Line", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line.[double]x2()", "name": "x2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double x2()", "original_string": "    double x2();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java", "class_name": "Line", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line.[double]y2()", "name": "y2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double y2()", "original_string": "    double y2();", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java", "class_name": "Line", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line.[boolean]intersects(Line)", "name": "intersects", "arg_nums": 1, "params": [{"name": "b", "type": "Line"}], "return_type": "boolean", "signature": "boolean intersects(Line b)", "original_string": "    boolean intersects(Line b);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java", "class_name": "Line", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line.[boolean]intersects(Point)", "name": "intersects", "arg_nums": 1, "params": [{"name": "point", "type": "Point"}], "return_type": "boolean", "signature": "boolean intersects(Point point)", "original_string": "    boolean intersects(Point point);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java", "class_name": "Line", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line.[boolean]intersects(Circle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "circle", "type": "Circle"}], "return_type": "boolean", "signature": "boolean intersects(Circle circle)", "original_string": "    boolean intersects(Circle circle);", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java", "class_name": "Line", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/Line.java.Line", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[]LineFloat(double,double,double,double)", "name": "LineFloat", "arg_nums": 4, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "", "signature": "private LineFloat(double x1, double y1, double x2, double y2)", "original_string": "    private LineFloat(double x1, double y1, double x2, double y2) {\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[LineFloat]create(double,double,double,double)", "name": "create", "arg_nums": 4, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "LineFloat", "signature": "public static LineFloat create(double x1, double y1, double x2, double y2)", "original_string": "    public static LineFloat create(double x1, double y1, double x2, double y2) {\n        return new LineFloat(x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "LineFloat", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[double]distance(Rectangle)", "name": "distance", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "@Override\n    public double distance(Rectangle r)", "original_string": "    @Override\n    public double distance(Rectangle r) {\n        if (r.contains(x1, y1) || r.contains(x2, y2)) {\n            return 0;\n        } else {\n            double d1 = distance(r.x1(), r.y1(), r.x1(), r.y2());\n            if (d1 == 0)\n                return 0;\n            double d2 = distance(r.x1(), r.y2(), r.x2(), r.y2());\n            if (d2 == 0)\n                return 0;\n            double d3 = distance(r.x2(), r.y2(), r.x2(), r.y1());\n            double d4 = distance(r.x2(), r.y1(), r.x1(), r.y1());\n            return Math.min(d1, Math.min(d2, Math.min(d3, d4)));\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[double]distance(double,double,double,double)", "name": "distance", "arg_nums": 4, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "double", "signature": "private double distance(double x1, double y1, double x2, double y2)", "original_string": "    private double distance(double x1, double y1, double x2, double y2) {\n        Line2D line = new Line2D(x1, y1, x2, y2);\n        double d1 = line.ptSegDist(this.x1, this.y1);\n        double d2 = line.ptSegDist(this.x2, this.y2);\n        Line2D line2 = new Line2D(this.x1, this.y1, this.x2, this.y2);\n        double d3 = line2.ptSegDist(x1, y1);\n        if (d3 == 0)\n            return 0;\n        double d4 = line2.ptSegDist(x2, y2);\n        if (d4 == 0)\n            return 0;\n        else\n            return Math.min(d1, Math.min(d2, Math.min(d3, d4)));\n\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[Rectangle]mbr()", "name": "mbr", "arg_nums": 0, "params": [], "return_type": "Rectangle", "signature": "@Override\n    public Rectangle mbr()", "original_string": "    @Override\n    public Rectangle mbr() {\n        return Geometries.rectangle(Math.min(x1, x2), Math.min(y1, y2), Math.max(x1, x2),\n                Math.max(y1, y2));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[boolean]intersects(Rectangle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Rectangle r)", "original_string": "    @Override\n    public boolean intersects(Rectangle r) {\n        return RectangleUtil.rectangleIntersectsLine(r.x1(), r.y1(), r.x2() - r.x1(),\n                r.y2() - r.y1(), x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[double]x1()", "name": "x1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x1()", "original_string": "    @Override\n    public double x1() {\n        return x1;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[double]y1()", "name": "y1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y1()", "original_string": "    @Override\n    public double y1() {\n        return y1;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[double]x2()", "name": "x2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x2()", "original_string": "    @Override\n    public double x2() {\n        return x2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[double]y2()", "name": "y2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y2()", "original_string": "    @Override\n    public double y2() {\n        return y2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[boolean]intersects(Line)", "name": "intersects", "arg_nums": 1, "params": [{"name": "b", "type": "Line"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Line b)", "original_string": "    @Override\n    public boolean intersects(Line b) {\n        Line2D line1 = new Line2D(x1, y1, x2, y2);\n        Line2D line2 = new Line2D(b.x1(), b.y1(), b.x2(), b.y2());\n        return line2.intersectsLine(line1);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[boolean]intersects(Point)", "name": "intersects", "arg_nums": 1, "params": [{"name": "point", "type": "Point"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Point point)", "original_string": "    @Override\n    public boolean intersects(Point point) {\n        return intersects(point.mbr());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[boolean]intersects(Circle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "circle", "type": "Circle"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Circle circle)", "original_string": "    @Override\n    public boolean intersects(Circle circle) {\n        return GeometryUtil.lineIntersects(x1, y1, x2, y2, circle);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        return Objects.hash(x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "obj", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object obj)", "original_string": "    @Override\n    public boolean equals(Object obj) {\n        Optional<LineFloat> other = ObjectsHelper.asClass(obj, LineFloat.class);\n        if (other.isPresent()) {\n            return Objects.equals(x1, other.get().x1) && Objects.equals(x2, other.get().x2)\n                    && Objects.equals(y1, other.get().y1) && Objects.equals(y2, other.get().y2);\n        } else\n            return false;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat.[boolean]isDoublePrecision()", "name": "isDoublePrecision", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "@Override\n    public boolean isDoublePrecision()", "original_string": "    @Override\n    public boolean isDoublePrecision() {\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java", "class_name": "LineFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineFloat.java.LineFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[]PointFloat(float,float)", "name": "PointFloat", "arg_nums": 2, "params": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "return_type": "", "signature": "private PointFloat(float x, float y)", "original_string": "    private PointFloat(float x, float y) {\n        this.x = x;\n        this.y = y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[PointFloat]create(float,float)", "name": "create", "arg_nums": 2, "params": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}], "return_type": "PointFloat", "signature": "public static PointFloat create(float x, float y)", "original_string": "    public static PointFloat create(float x, float y) {\n        return new PointFloat(x, y);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "PointFloat", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[Rectangle]mbr()", "name": "mbr", "arg_nums": 0, "params": [], "return_type": "Rectangle", "signature": "@Override\n    public Rectangle mbr()", "original_string": "    @Override\n    public Rectangle mbr() {\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[double]distance(Rectangle)", "name": "distance", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "@Override\n    public double distance(Rectangle r)", "original_string": "    @Override\n    public double distance(Rectangle r) {\n        return GeometryUtil.distance(x, y, r);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[boolean]intersects(Rectangle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Rectangle r)", "original_string": "    @Override\n    public boolean intersects(Rectangle r) {\n        return r.x1() <= x && x <= r.x2() && r.y1() <= y && y <= r.y2();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[double]x()", "name": "x", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x()", "original_string": "    @Override\n    public double x() {\n        return x;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[double]y()", "name": "y", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y()", "original_string": "    @Override\n    public double y() {\n        return y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + Float.floatToIntBits(x);\n        result = prime * result + Float.floatToIntBits(y);\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "obj", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object obj)", "original_string": "    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        PointFloat other = (PointFloat) obj;\n        if (Float.floatToIntBits(x) != Float.floatToIntBits(other.x))\n            return false;\n        if (Float.floatToIntBits(y) != Float.floatToIntBits(other.y))\n            return false;\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return \"Point [x=\" + x() + \", y=\" + y() + \"]\";\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[Geometry]geometry()", "name": "geometry", "arg_nums": 0, "params": [], "return_type": "Geometry", "signature": "@Override\n    public Geometry geometry()", "original_string": "    @Override\n    public Geometry geometry() {\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Geometry", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[double]x1()", "name": "x1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x1()", "original_string": "    @Override\n    public double x1() {\n        return x;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[double]y1()", "name": "y1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y1()", "original_string": "    @Override\n    public double y1() {\n        return y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[double]x2()", "name": "x2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x2()", "original_string": "    @Override\n    public double x2() {\n        return x;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[double]y2()", "name": "y2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y2()", "original_string": "    @Override\n    public double y2() {\n        return y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[double]area()", "name": "area", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double area()", "original_string": "    @Override\n    public double area() {\n        return 0;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[Rectangle]add(Rectangle)", "name": "add", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "Rectangle", "signature": "@Override\n    public Rectangle add(Rectangle r)", "original_string": "    @Override\n    public Rectangle add(Rectangle r) {\n        if (r.isDoublePrecision()) {\n            return RectangleDouble.create(Math.min(x, r.x1()), Math.min(y, r.y1()),\n                    Math.max(x, r.x2()), Math.max(y, r.y2()));\n        } else if (r instanceof RectangleFloat) {\n            RectangleFloat rf = (RectangleFloat) r;\n            return RectangleFloat.create(Math.min(x, rf.x1), Math.min(y, rf.y1), Math.max(x, rf.x2),\n                    Math.max(y, rf.y2));\n        } else if (r instanceof PointFloat) {\n            PointFloat p = (PointFloat) r;\n            return RectangleFloat.create(Math.min(x, p.x), Math.min(y, p.y), Math.max(x, p.x),\n                    Math.max(y, p.y));\n        } else {\n            PointDouble p = (PointDouble) r;\n            return RectangleDouble.create(Math.min(x, p.x()), Math.min(y, p.y()),\n                    Math.max(x, p.x()), Math.max(y, p.y()));\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[boolean]contains(double,double)", "name": "contains", "arg_nums": 2, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}], "return_type": "boolean", "signature": "@Override\n    public boolean contains(double x, double y)", "original_string": "    @Override\n    public boolean contains(double x, double y) {\n        return this.x == x && this.y == y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[double]intersectionArea(Rectangle)", "name": "intersectionArea", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "@Override\n    public double intersectionArea(Rectangle r)", "original_string": "    @Override\n    public double intersectionArea(Rectangle r) {\n        return 0;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[double]perimeter()", "name": "perimeter", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double perimeter()", "original_string": "    @Override\n    public double perimeter() {\n        return 0;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[boolean]isDoublePrecision()", "name": "isDoublePrecision", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "@Override\n    public boolean isDoublePrecision()", "original_string": "    @Override\n    public boolean isDoublePrecision() {\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[float]xFloat()", "name": "xFloat", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float xFloat()", "original_string": "    public float xFloat() {\n        return x;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat.[float]yFloat()", "name": "yFloat", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float yFloat()", "original_string": "    public float yFloat() {\n        return y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java", "class_name": "PointFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointFloat.java.PointFloat", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[]RectangleDouble(double,double,double,double)", "name": "RectangleDouble", "arg_nums": 4, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "", "signature": "private RectangleDouble(double x1, double y1, double x2, double y2)", "original_string": "    private RectangleDouble(double x1, double y1, double x2, double y2) {\n        Preconditions.checkArgument(x2 >= x1);\n        Preconditions.checkArgument(y2 >= y1);\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[RectangleDouble]create(double,double,double,double)", "name": "create", "arg_nums": 4, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "RectangleDouble", "signature": "public static RectangleDouble create(double x1, double y1, double x2, double y2)", "original_string": "    public static RectangleDouble create(double x1, double y1, double x2, double y2) {\n        return new RectangleDouble((double) x1, (double) y1, (double) x2, (double) y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "RectangleDouble", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[double]x1()", "name": "x1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x1()", "original_string": "    @Override\n    public double x1() {\n        return x1;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[double]y1()", "name": "y1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y1()", "original_string": "    @Override\n    public double y1() {\n        return y1;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[double]x2()", "name": "x2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x2()", "original_string": "    @Override\n    public double x2() {\n        return x2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[double]y2()", "name": "y2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y2()", "original_string": "    @Override\n    public double y2() {\n        return  y2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[Rectangle]add(Rectangle)", "name": "add", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "Rectangle", "signature": "@Override\n    public Rectangle add(Rectangle r)", "original_string": "    @Override\n    public Rectangle add(Rectangle r) {\n        return new RectangleDouble(min(x1, r.x1()), min(y1, r.y1()), max(x2, r.x2()),\n                max(y2, r.y2()));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[boolean]contains(double,double)", "name": "contains", "arg_nums": 2, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}], "return_type": "boolean", "signature": "@Override\n    public boolean contains(double x, double y)", "original_string": "    @Override\n    public boolean contains(double x, double y) {\n        return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[boolean]intersects(Rectangle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Rectangle r)", "original_string": "    @Override\n    public boolean intersects(Rectangle r) {\n        if (r instanceof RectangleDouble) {\n            RectangleDouble rd = (RectangleDouble) r;\n            return intersects(rd);\n        } else {\n            return GeometryUtil.intersects(x1, y1, x2, y2, r.x1(), r.y1(), r.x2(), r.y2());\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[boolean]intersects(RectangleDouble)", "name": "intersects", "arg_nums": 1, "params": [{"name": "rd", "type": "RectangleDouble"}], "return_type": "boolean", "signature": "private boolean intersects(RectangleDouble rd)", "original_string": "    private boolean intersects(RectangleDouble rd) {\n        return GeometryUtil.intersects(x1, y1, x2, y2, rd.x1, rd.y1, rd.x2, rd.y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[double]distance(Rectangle)", "name": "distance", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "@Override\n    public double distance(Rectangle r)", "original_string": "    @Override\n    public double distance(Rectangle r) {\n        return GeometryUtil.distance(x1, y1, x2, y2, r.x1(), r.y1(), r.x2(), r.y2());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[Rectangle]mbr()", "name": "mbr", "arg_nums": 0, "params": [], "return_type": "Rectangle", "signature": "@Override\n    public Rectangle mbr()", "original_string": "    @Override\n    public Rectangle mbr() {\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return \"Rectangle [x1=\" + x1 + \", y1=\" + y1 + \", x2=\" + x2 + \", y2=\" + y2 + \"]\";\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        return Objects.hash(x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "obj", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object obj)", "original_string": "    @Override\n    public boolean equals(Object obj) {\n        Optional<RectangleDouble> other = ObjectsHelper.asClass(obj, RectangleDouble.class);\n        if (other.isPresent()) {\n            return Objects.equals(x1, other.get().x1) && Objects.equals(x2, other.get().x2)\n                    && Objects.equals(y1, other.get().y1) && Objects.equals(y2, other.get().y2);\n        } else\n            return false;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[double]intersectionArea(Rectangle)", "name": "intersectionArea", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "@Override\n    public double intersectionArea(Rectangle r)", "original_string": "    @Override\n    public double intersectionArea(Rectangle r) {\n        if (!intersects(r))\n            return 0;\n        else {\n            return create(max(x1, r.x1()), max(y1, r.y1()), min(x2, r.x2()), min(y2, r.y2()))\n                    .area();\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[Geometry]geometry()", "name": "geometry", "arg_nums": 0, "params": [], "return_type": "Geometry", "signature": "@Override\n    public Geometry geometry()", "original_string": "    @Override\n    public Geometry geometry() {\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Geometry", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[double]max(double,double)", "name": "max", "arg_nums": 2, "params": [{"name": "a", "type": "double"}, {"name": "b", "type": "double"}], "return_type": "double", "signature": "private static double max(double a, double b)", "original_string": "    private static double max(double a, double b) {\n        if (a < b)\n            return b;\n        else\n            return a;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[double]min(double,double)", "name": "min", "arg_nums": 2, "params": [{"name": "a", "type": "double"}, {"name": "b", "type": "double"}], "return_type": "double", "signature": "private static double min(double a, double b)", "original_string": "    private static double min(double a, double b) {\n        if (a < b)\n            return a;\n        else\n            return b;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[double]perimeter()", "name": "perimeter", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double perimeter()", "original_string": "    @Override\n    public double perimeter() {\n        return 2 * (x2 - x1) + 2 * (y2 - y1);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[double]area()", "name": "area", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double area()", "original_string": "    @Override\n    public double area() {\n        return (x2 - x1) * (y2 - y1);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble.[boolean]isDoublePrecision()", "name": "isDoublePrecision", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "@Override\n    public boolean isDoublePrecision()", "original_string": "    @Override\n    public boolean isDoublePrecision() {\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java", "class_name": "RectangleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleDouble.java.RectangleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java.Vector.[Vector]create(double,double)", "name": "create", "arg_nums": 2, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}], "return_type": "Vector", "signature": "static Vector create(double x, double y)", "original_string": "    static Vector create(double x, double y) {\n        return new Vector(x, y);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java", "class_name": "Vector", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java.Vector", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "Vector", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java.Vector.[]Vector(double,double)", "name": "Vector", "arg_nums": 2, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}], "return_type": "", "signature": "Vector(double x, double y)", "original_string": "    Vector(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java", "class_name": "Vector", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java.Vector", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java.Vector.[double]dot(Vector)", "name": "dot", "arg_nums": 1, "params": [{"name": "v", "type": "Vector"}], "return_type": "double", "signature": "double dot(Vector v)", "original_string": "    double dot(Vector v) {\n        return x * v.x + y * v.y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java", "class_name": "Vector", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java.Vector", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java.Vector.[Vector]times(double)", "name": "times", "arg_nums": 1, "params": [{"name": "value", "type": "double"}], "return_type": "Vector", "signature": "Vector times(double value)", "original_string": "    Vector times(double value) {\n        return create(value * x, value * y);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java", "class_name": "Vector", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java.Vector", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Vector", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java.Vector.[Vector]minus(Vector)", "name": "minus", "arg_nums": 1, "params": [{"name": "v", "type": "Vector"}], "return_type": "Vector", "signature": "Vector minus(Vector v)", "original_string": "    Vector minus(Vector v) {\n        return create(x - v.x, y - v.y);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java", "class_name": "Vector", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java.Vector", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Vector", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java.Vector.[double]modulus()", "name": "modulus", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double modulus()", "original_string": "    double modulus() {\n        return Math.sqrt(modulusSquared());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java", "class_name": "Vector", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java.Vector", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java.Vector.[double]modulusSquared()", "name": "modulusSquared", "arg_nums": 0, "params": [], "return_type": "double", "signature": "double modulusSquared()", "original_string": "    double modulusSquared() {\n        return x * x + y * y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java", "class_name": "Vector", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/Vector.java.Vector", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil.[]GeometryUtil()", "name": "GeometryUtil", "arg_nums": 0, "params": [], "return_type": "", "signature": "private GeometryUtil()", "original_string": "    private GeometryUtil() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java", "class_name": "GeometryUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil.[double]distanceSquared(double,double,double,double)", "name": "distanceSquared", "arg_nums": 4, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "double", "signature": "public static double distanceSquared(double x1, double y1, double x2, double y2)", "original_string": "    public static double distanceSquared(double x1, double y1, double x2, double y2) {\n        double dx = x2 - x1;\n        double dy = y2 - y1;\n        return dx * dx + dy * dy;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java", "class_name": "GeometryUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil.[double]max(double,double)", "name": "max", "arg_nums": 2, "params": [{"name": "a", "type": "double"}, {"name": "b", "type": "double"}], "return_type": "double", "signature": "public static double max(double a, double b)", "original_string": "    public static double max(double a, double b) {\n        if (a < b)\n            return b;\n        else\n            return a;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java", "class_name": "GeometryUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil.[float]max(float,float)", "name": "max", "arg_nums": 2, "params": [{"name": "a", "type": "float"}, {"name": "b", "type": "float"}], "return_type": "float", "signature": "public static float max(float a, float b)", "original_string": "    public static float max(float a, float b) {\n        if (a < b)\n            return b;\n        else\n            return a;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java", "class_name": "GeometryUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil.[double]min(double,double)", "name": "min", "arg_nums": 2, "params": [{"name": "a", "type": "double"}, {"name": "b", "type": "double"}], "return_type": "double", "signature": "public static double min(double a, double b)", "original_string": "    public static double min(double a, double b) {\n        if (a < b)\n            return a;\n        else\n            return b;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java", "class_name": "GeometryUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil.[float]min(float,float)", "name": "min", "arg_nums": 2, "params": [{"name": "a", "type": "float"}, {"name": "b", "type": "float"}], "return_type": "float", "signature": "public static float min(float a, float b)", "original_string": "    public static float min(float a, float b) {\n        if (a < b)\n            return a;\n        else\n            return b;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java", "class_name": "GeometryUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil.[double]distance(double,double,Rectangle)", "name": "distance", "arg_nums": 3, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}, {"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "public static double distance(double x, double y, Rectangle r)", "original_string": "    public static double distance(double x, double y, Rectangle r) {\n        return distance(x, y, r.x1(), r.y1(), r.x2(), r.y2());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java", "class_name": "GeometryUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil.[double]distance(double,double,double,double,double,double)", "name": "distance", "arg_nums": 6, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}, {"name": "a1", "type": "double"}, {"name": "b1", "type": "double"}, {"name": "a2", "type": "double"}, {"name": "b2", "type": "double"}], "return_type": "double", "signature": "public static double distance(double x, double y, double a1, double b1, double a2, double b2)", "original_string": "    public static double distance(double x, double y, double a1, double b1, double a2, double b2) {\n        return distance(x, y, x, y, a1, b1, a2, b2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java", "class_name": "GeometryUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil.[double]distance(double,double,double,double,double,double,double,double)", "name": "distance", "arg_nums": 8, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}, {"name": "a1", "type": "double"}, {"name": "b1", "type": "double"}, {"name": "a2", "type": "double"}, {"name": "b2", "type": "double"}], "return_type": "double", "signature": "public static double distance(double x1, double y1, double x2, double y2, double a1, double b1,\n            double a2, double b2)", "original_string": "    public static double distance(double x1, double y1, double x2, double y2, double a1, double b1,\n            double a2, double b2) {\n        if (intersects(x1, y1, x2, y2, a1, b1, a2, b2)) {\n            return 0;\n        }\n        boolean xyMostLeft = x1 < a1;\n        double mostLeftX1 = xyMostLeft ? x1 : a1;\n        double mostRightX1 = xyMostLeft ? a1 : x1;\n        double mostLeftX2 = xyMostLeft ? x2 : a2;\n        double xDifference = max(0, mostLeftX1 == mostRightX1 ? 0 : mostRightX1 - mostLeftX2);\n\n        boolean xyMostDown = y1 < b1;\n        double mostDownY1 = xyMostDown ? y1 : b1;\n        double mostUpY1 = xyMostDown ? b1 : y1;\n        double mostDownY2 = xyMostDown ? y2 : b2;\n\n        double yDifference = max(0, mostDownY1 == mostUpY1 ? 0 : mostUpY1 - mostDownY2);\n\n        return Math.sqrt(xDifference * xDifference + yDifference * yDifference);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java", "class_name": "GeometryUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil.[boolean]intersects(double,double,double,double,double,double,double,double)", "name": "intersects", "arg_nums": 8, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}, {"name": "a1", "type": "double"}, {"name": "b1", "type": "double"}, {"name": "a2", "type": "double"}, {"name": "b2", "type": "double"}], "return_type": "boolean", "signature": "public static boolean intersects(double x1, double y1, double x2, double y2, double a1,\n            double b1, double a2, double b2)", "original_string": "    public static boolean intersects(double x1, double y1, double x2, double y2, double a1,\n            double b1, double a2, double b2) {\n        return x1 <= a2 && a1 <= x2 && y1 <= b2 && b1 <= y2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java", "class_name": "GeometryUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil.[boolean]lineIntersects(double,double,double,double,Circle)", "name": "lineIntersects", "arg_nums": 5, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}, {"name": "circle", "type": "Circle"}], "return_type": "boolean", "signature": "public static boolean lineIntersects(double x1, double y1, double x2, double y2, Circle circle)", "original_string": "    public static boolean lineIntersects(double x1, double y1, double x2, double y2, Circle circle) {\n\n        // using Vector Projection\n        // https://en.wikipedia.org/wiki/Vector_projection\n        Vector c = Vector.create(circle.x(), circle.y());\n        Vector a = Vector.create(x1, y1);\n        Vector cMinusA = c.minus(a);\n        double radiusSquared = circle.radius() * circle.radius();\n        if (x1 == x2 && y1 == y2) {\n            return cMinusA.modulusSquared() <= radiusSquared;\n        } else {\n            Vector b = Vector.create(x2, y2);\n            Vector bMinusA = b.minus(a);\n            double bMinusAModulus = bMinusA.modulus();\n            double lambda = cMinusA.dot(bMinusA) / bMinusAModulus;\n            // if projection is on the segment\n            if (lambda >= 0 && lambda <= bMinusAModulus) {\n                Vector dMinusA = bMinusA.times(lambda / bMinusAModulus);\n                // calculate distance to line from c using pythagoras' theorem\n                return cMinusA.modulusSquared() - dMinusA.modulusSquared() <= radiusSquared;\n            } else {\n                // return true if and only if an endpoint is within radius of\n                // centre\n                return cMinusA.modulusSquared() <= radiusSquared\n                        || c.minus(b).modulusSquared() <= radiusSquared;\n            }\n        }\n\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java", "class_name": "GeometryUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtil.java.GeometryUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[]CircleFloat(float,float,float)", "name": "CircleFloat", "arg_nums": 3, "params": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}, {"name": "radius", "type": "float"}], "return_type": "", "signature": "private CircleFloat(float x, float y, float radius)", "original_string": "    private CircleFloat(float x, float y, float radius) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.mbr = RectangleFloat.create(x - radius, y - radius, x + radius, y + radius);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[CircleFloat]create(float,float,float)", "name": "create", "arg_nums": 3, "params": [{"name": "x", "type": "float"}, {"name": "y", "type": "float"}, {"name": "radius", "type": "float"}], "return_type": "CircleFloat", "signature": "public static CircleFloat create(float x, float y, float radius)", "original_string": "    public static CircleFloat create(float x, float y, float radius) {\n        return new CircleFloat(x, y, radius);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "CircleFloat", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[double]x()", "name": "x", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x()", "original_string": "    @Override\n    public double x() {\n        return x;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[double]y()", "name": "y", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y()", "original_string": "    @Override\n    public double y() {\n        return y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[double]radius()", "name": "radius", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double radius()", "original_string": "    @Override\n    public double radius() {\n        return radius;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[Rectangle]mbr()", "name": "mbr", "arg_nums": 0, "params": [], "return_type": "Rectangle", "signature": "@Override\n    public Rectangle mbr()", "original_string": "    @Override\n    public Rectangle mbr() {\n        return mbr;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[double]distance(Rectangle)", "name": "distance", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "@Override\n    public double distance(Rectangle r)", "original_string": "    @Override\n    public double distance(Rectangle r) {\n        return Math.max(0, GeometryUtil.distance(x, y, r) - radius);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[boolean]intersects(Rectangle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Rectangle r)", "original_string": "    @Override\n    public boolean intersects(Rectangle r) {\n        return distance(r) == 0;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[boolean]intersects(Circle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "c", "type": "Circle"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Circle c)", "original_string": "    @Override\n    public boolean intersects(Circle c) {\n        double total = radius + c.radius();\n        return GeometryUtil.distanceSquared(x, y, c.x(), c.y()) <= total * total;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        return Objects.hash(x, y, radius);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "obj", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object obj)", "original_string": "    @Override\n    public boolean equals(Object obj) {\n        Optional<CircleFloat> other = ObjectsHelper.asClass(obj, CircleFloat.class);\n        if (other.isPresent()) {\n            return Objects.equals(x, other.get().x) && Objects.equals(y, other.get().y)\n                    && Objects.equals(radius, other.get().radius);\n        } else\n            return false;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[boolean]intersects(Point)", "name": "intersects", "arg_nums": 1, "params": [{"name": "point", "type": "Point"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Point point)", "original_string": "    @Override\n    public boolean intersects(Point point) {\n        return Math.sqrt(sqr(x - point.x()) + sqr(y - point.y())) <= radius;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[double]sqr(double)", "name": "sqr", "arg_nums": 1, "params": [{"name": "x", "type": "double"}], "return_type": "double", "signature": "private double sqr(double x)", "original_string": "    private double sqr(double x) {\n        return x * x;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[boolean]intersects(Line)", "name": "intersects", "arg_nums": 1, "params": [{"name": "line", "type": "Line"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Line line)", "original_string": "    @Override\n    public boolean intersects(Line line) {\n        return line.intersects(this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat.[boolean]isDoublePrecision()", "name": "isDoublePrecision", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "@Override\n    public boolean isDoublePrecision()", "original_string": "    @Override\n    public boolean isDoublePrecision() {\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java", "class_name": "CircleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleFloat.java.CircleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[]RectangleFloat(float,float,float,float)", "name": "RectangleFloat", "arg_nums": 4, "params": [{"name": "x1", "type": "float"}, {"name": "y1", "type": "float"}, {"name": "x2", "type": "float"}, {"name": "y2", "type": "float"}], "return_type": "", "signature": "private RectangleFloat(float x1, float y1, float x2, float y2)", "original_string": "    private RectangleFloat(float x1, float y1, float x2, float y2) {\n        Preconditions.checkArgument(x2 >= x1);\n        Preconditions.checkArgument(y2 >= y1);\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[Rectangle]create(float,float,float,float)", "name": "create", "arg_nums": 4, "params": [{"name": "x1", "type": "float"}, {"name": "y1", "type": "float"}, {"name": "x2", "type": "float"}, {"name": "y2", "type": "float"}], "return_type": "Rectangle", "signature": "public static Rectangle create(float x1, float y1, float x2, float y2)", "original_string": "    public static Rectangle create(float x1, float y1, float x2, float y2) {\n        return new RectangleFloat(x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[double]x1()", "name": "x1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x1()", "original_string": "    @Override\n    public double x1() {\n        return x1;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[double]y1()", "name": "y1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y1()", "original_string": "    @Override\n    public double y1() {\n        return y1;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[double]x2()", "name": "x2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x2()", "original_string": "    @Override\n    public double x2() {\n        return x2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[double]y2()", "name": "y2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y2()", "original_string": "    @Override\n    public double y2() {\n        return y2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[double]area()", "name": "area", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double area()", "original_string": "    @Override\n    public double area() {\n        return (x2 - x1) * (y2 - y1);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[Rectangle]add(Rectangle)", "name": "add", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "Rectangle", "signature": "@Override\n    public Rectangle add(Rectangle r)", "original_string": "    @Override\n    public Rectangle add(Rectangle r) {\n        if (r.isDoublePrecision()) {\n            return RectangleDouble.create(min(x1, r.x1()), min(y1, r.y1()), max(x2, r.x2()),\n                    max(y2, r.y2()));\n        } else if (r instanceof RectangleFloat) {\n            RectangleFloat rf = (RectangleFloat) r;\n            return RectangleFloat.create(min(x1, rf.x1), min(y1, rf.y1), max(x2, rf.x2),\n                    max(y2, rf.y2));\n        } else {\n            PointFloat rf = (PointFloat) r;\n            return RectangleFloat.create(min(x1, rf.xFloat()), min(y1, rf.yFloat()),\n                    max(x2, rf.xFloat()), max(y2, rf.yFloat()));\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[boolean]contains(double,double)", "name": "contains", "arg_nums": 2, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}], "return_type": "boolean", "signature": "@Override\n    public boolean contains(double x, double y)", "original_string": "    @Override\n    public boolean contains(double x, double y) {\n        return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[boolean]intersects(Rectangle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Rectangle r)", "original_string": "    @Override\n    public boolean intersects(Rectangle r) {\n        return GeometryUtil.intersects(x1, y1, x2, y2, r.x1(), r.y1(), r.x2(), r.y2());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[double]distance(Rectangle)", "name": "distance", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "@Override\n    public double distance(Rectangle r)", "original_string": "    @Override\n    public double distance(Rectangle r) {\n        return GeometryUtil.distance(x1, y1, x2, y2, r.x1(), r.y1(), r.x2(), r.y2());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[Rectangle]mbr()", "name": "mbr", "arg_nums": 0, "params": [], "return_type": "Rectangle", "signature": "@Override\n    public Rectangle mbr()", "original_string": "    @Override\n    public Rectangle mbr() {\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        return Objects.hash(x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "obj", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object obj)", "original_string": "    @Override\n    public boolean equals(Object obj) {\n        Optional<RectangleFloat> other = ObjectsHelper.asClass(obj, RectangleFloat.class);\n        if (other.isPresent()) {\n            return Objects.equals(x1, other.get().x1) && Objects.equals(x2, other.get().x2)\n                    && Objects.equals(y1, other.get().y1) && Objects.equals(y2, other.get().y2);\n        } else\n            return false;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[double]intersectionArea(Rectangle)", "name": "intersectionArea", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "@Override\n    public double intersectionArea(Rectangle r)", "original_string": "    @Override\n    public double intersectionArea(Rectangle r) {\n        if (!intersects(r))\n            return 0;\n        else\n            return RectangleDouble\n                    .create(max(x1, r.x1()), max(y1, r.y1()), min(x2, r.x2()), min(y2, r.y2()))\n                    .area();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[double]perimeter()", "name": "perimeter", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double perimeter()", "original_string": "    @Override\n    public double perimeter() {\n        return 2 * (x2 - x1) + 2 * (y2 - y1);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[Geometry]geometry()", "name": "geometry", "arg_nums": 0, "params": [], "return_type": "Geometry", "signature": "@Override\n    public Geometry geometry()", "original_string": "    @Override\n    public Geometry geometry() {\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Geometry", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[boolean]isDoublePrecision()", "name": "isDoublePrecision", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "@Override\n    public boolean isDoublePrecision()", "original_string": "    @Override\n    public boolean isDoublePrecision() {\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return \"Rectangle [x1=\" + x1 + \", y1=\" + y1 + \", x2=\" + x2 + \", y2=\" + y2 + \"]\";\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java", "class_name": "RectangleFloat", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/RectangleFloat.java.RectangleFloat", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[]CircleDouble(double,double,double)", "name": "CircleDouble", "arg_nums": 3, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}, {"name": "radius", "type": "double"}], "return_type": "", "signature": "private CircleDouble(double x, double y, double radius)", "original_string": "    private CircleDouble(double x, double y, double radius) {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n        this.mbr = RectangleDouble.create(x - radius, y - radius, x + radius, y + radius);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[CircleDouble]create(double,double,double)", "name": "create", "arg_nums": 3, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}, {"name": "radius", "type": "double"}], "return_type": "CircleDouble", "signature": "public static CircleDouble create(double x, double y, double radius)", "original_string": "    public static CircleDouble create(double x, double y, double radius) {\n        return new CircleDouble(x, y, radius);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "CircleDouble", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[double]x()", "name": "x", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x()", "original_string": "    @Override\n    public double x() {\n        return x;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[double]y()", "name": "y", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y()", "original_string": "    @Override\n    public double y() {\n        return y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[double]radius()", "name": "radius", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double radius()", "original_string": "    @Override\n    public double radius() {\n        return radius;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[Rectangle]mbr()", "name": "mbr", "arg_nums": 0, "params": [], "return_type": "Rectangle", "signature": "@Override\n    public Rectangle mbr()", "original_string": "    @Override\n    public Rectangle mbr() {\n        return mbr;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[double]distance(Rectangle)", "name": "distance", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "@Override\n    public double distance(Rectangle r)", "original_string": "    @Override\n    public double distance(Rectangle r) {\n        return Math.max(0, GeometryUtil.distance(x, y, r) - radius);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[boolean]intersects(Rectangle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Rectangle r)", "original_string": "    @Override\n    public boolean intersects(Rectangle r) {\n        return distance(r) == 0;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[boolean]intersects(Circle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "c", "type": "Circle"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Circle c)", "original_string": "    @Override\n    public boolean intersects(Circle c) {\n        double total = radius + c.radius();\n        return GeometryUtil.distanceSquared(x, y, c.x(), c.y()) <= total * total;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        return Objects.hash(x, y, radius);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "obj", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object obj)", "original_string": "    @Override\n    public boolean equals(Object obj) {\n        Optional<CircleDouble> other = ObjectsHelper.asClass(obj, CircleDouble.class);\n        if (other.isPresent()) {\n            return Objects.equals(x, other.get().x) && Objects.equals(y, other.get().y)\n                    && Objects.equals(radius, other.get().radius);\n        } else\n            return false;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[boolean]intersects(Point)", "name": "intersects", "arg_nums": 1, "params": [{"name": "point", "type": "Point"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Point point)", "original_string": "    @Override\n    public boolean intersects(Point point) {\n        return Math.sqrt(sqr(x - point.x()) + sqr(y - point.y())) <= radius;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[double]sqr(double)", "name": "sqr", "arg_nums": 1, "params": [{"name": "x", "type": "double"}], "return_type": "double", "signature": "private double sqr(double x)", "original_string": "    private double sqr(double x) {\n        return x * x;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[boolean]intersects(Line)", "name": "intersects", "arg_nums": 1, "params": [{"name": "line", "type": "Line"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Line line)", "original_string": "    @Override\n    public boolean intersects(Line line) {\n        return line.intersects(this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble.[boolean]isDoublePrecision()", "name": "isDoublePrecision", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "@Override\n    public boolean isDoublePrecision()", "original_string": "    @Override\n    public boolean isDoublePrecision() {\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java", "class_name": "CircleDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/CircleDouble.java.CircleDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[]LineDouble(double,double,double,double)", "name": "LineDouble", "arg_nums": 4, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "", "signature": "private LineDouble(double x1, double y1, double x2, double y2)", "original_string": "    private LineDouble(double x1, double y1, double x2, double y2) {\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[LineDouble]create(double,double,double,double)", "name": "create", "arg_nums": 4, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "LineDouble", "signature": "public static LineDouble create(double x1, double y1, double x2, double y2)", "original_string": "    public static LineDouble create(double x1, double y1, double x2, double y2) {\n        return new LineDouble(x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "LineDouble", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[double]distance(Rectangle)", "name": "distance", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "@Override\n    public double distance(Rectangle r)", "original_string": "    @Override\n    public double distance(Rectangle r) {\n        if (r.contains(x1, y1) || r.contains(x2, y2)) {\n            return 0;\n        } else {\n            double d1 = distance(r.x1(), r.y1(), r.x1(), r.y2());\n            if (d1 == 0)\n                return 0;\n            double d2 = distance(r.x1(), r.y2(), r.x2(), r.y2());\n            if (d2 == 0)\n                return 0;\n            double d3 = distance(r.x2(), r.y2(), r.x2(), r.y1());\n            double d4 = distance(r.x2(), r.y1(), r.x1(), r.y1());\n            return Math.min(d1, Math.min(d2, Math.min(d3, d4)));\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[double]distance(double,double,double,double)", "name": "distance", "arg_nums": 4, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "double", "signature": "private double distance(double x1, double y1, double x2, double y2)", "original_string": "    private double distance(double x1, double y1, double x2, double y2) {\n        Line2D line = new Line2D(x1, y1, x2, y2);\n        double d1 = line.ptSegDist(this.x1, this.y1);\n        double d2 = line.ptSegDist(this.x2, this.y2);\n        Line2D line2 = new Line2D(this.x1, this.y1, this.x2, this.y2);\n        double d3 = line2.ptSegDist(x1, y1);\n        if (d3 == 0)\n            return 0;\n        double d4 = line2.ptSegDist(x2, y2);\n        if (d4 == 0)\n            return 0;\n        else\n            return Math.min(d1, Math.min(d2, Math.min(d3, d4)));\n\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[Rectangle]mbr()", "name": "mbr", "arg_nums": 0, "params": [], "return_type": "Rectangle", "signature": "@Override\n    public Rectangle mbr()", "original_string": "    @Override\n    public Rectangle mbr() {\n        return Geometries.rectangle(Math.min(x1, x2), Math.min(y1, y2), Math.max(x1, x2),\n                Math.max(y1, y2));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[boolean]intersects(Rectangle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Rectangle r)", "original_string": "    @Override\n    public boolean intersects(Rectangle r) {\n        return RectangleUtil.rectangleIntersectsLine(r.x1(), r.y1(), r.x2() - r.x1(),\n                r.y2() - r.y1(), x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[double]x1()", "name": "x1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x1()", "original_string": "    @Override\n    public double x1() {\n        return x1;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[double]y1()", "name": "y1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y1()", "original_string": "    @Override\n    public double y1() {\n        return y1;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[double]x2()", "name": "x2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x2()", "original_string": "    @Override\n    public double x2() {\n        return x2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[double]y2()", "name": "y2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y2()", "original_string": "    @Override\n    public double y2() {\n        return y2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[boolean]intersects(Line)", "name": "intersects", "arg_nums": 1, "params": [{"name": "b", "type": "Line"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Line b)", "original_string": "    @Override\n    public boolean intersects(Line b) {\n        Line2D line1 = new Line2D(x1, y1, x2, y2);\n        Line2D line2 = new Line2D(b.x1(), b.y1(), b.x2(), b.y2());\n        return line2.intersectsLine(line1);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[boolean]intersects(Point)", "name": "intersects", "arg_nums": 1, "params": [{"name": "point", "type": "Point"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Point point)", "original_string": "    @Override\n    public boolean intersects(Point point) {\n        return intersects(point.mbr());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[boolean]intersects(Circle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "circle", "type": "Circle"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Circle circle)", "original_string": "    @Override\n    public boolean intersects(Circle circle) {\n        return GeometryUtil.lineIntersects(x1, y1, x2, y2, circle);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        return Objects.hash(x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "obj", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object obj)", "original_string": "    @Override\n    public boolean equals(Object obj) {\n        Optional<LineDouble> other = ObjectsHelper.asClass(obj, LineDouble.class);\n        if (other.isPresent()) {\n            return Objects.equals(x1, other.get().x1) && Objects.equals(x2, other.get().x2)\n                    && Objects.equals(y1, other.get().y1) && Objects.equals(y2, other.get().y2);\n        } else\n            return false;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble.[boolean]isDoublePrecision()", "name": "isDoublePrecision", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "@Override\n    public boolean isDoublePrecision()", "original_string": "    @Override\n    public boolean isDoublePrecision() {\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java", "class_name": "LineDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/LineDouble.java.LineDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[]PointDouble(double,double)", "name": "PointDouble", "arg_nums": 2, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}], "return_type": "", "signature": "private PointDouble(double x, double y)", "original_string": "    private PointDouble(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[PointDouble]create(double,double)", "name": "create", "arg_nums": 2, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}], "return_type": "PointDouble", "signature": "public static PointDouble create(double x, double y)", "original_string": "    public static PointDouble create(double x, double y) {\n        return new PointDouble(x, y);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "PointDouble", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[Rectangle]mbr()", "name": "mbr", "arg_nums": 0, "params": [], "return_type": "Rectangle", "signature": "@Override\n    public Rectangle mbr()", "original_string": "    @Override\n    public Rectangle mbr() {\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[double]distance(Rectangle)", "name": "distance", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "@Override\n    public double distance(Rectangle r)", "original_string": "    @Override\n    public double distance(Rectangle r) {\n        return GeometryUtil.distance(x, y, r);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[boolean]intersects(Rectangle)", "name": "intersects", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "boolean", "signature": "@Override\n    public boolean intersects(Rectangle r)", "original_string": "    @Override\n    public boolean intersects(Rectangle r) {\n        return r.x1() <= x && x <= r.x2() && r.y1() <= y && y <= r.y2();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[double]x()", "name": "x", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x()", "original_string": "    @Override\n    public double x() {\n        return x;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[double]y()", "name": "y", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y()", "original_string": "    @Override\n    public double y() {\n        return y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return \"Point [x=\" + x() + \", y=\" + y() + \"]\";\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[Geometry]geometry()", "name": "geometry", "arg_nums": 0, "params": [], "return_type": "Geometry", "signature": "@Override\n    public Geometry geometry()", "original_string": "    @Override\n    public Geometry geometry() {\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Geometry", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[double]x1()", "name": "x1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x1()", "original_string": "    @Override\n    public double x1() {\n        return x;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[double]y1()", "name": "y1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y1()", "original_string": "    @Override\n    public double y1() {\n        return y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[double]x2()", "name": "x2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double x2()", "original_string": "    @Override\n    public double x2() {\n        return x;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[double]y2()", "name": "y2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double y2()", "original_string": "    @Override\n    public double y2() {\n        return y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[double]area()", "name": "area", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double area()", "original_string": "    @Override\n    public double area() {\n        return 0;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[Rectangle]add(Rectangle)", "name": "add", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "Rectangle", "signature": "@Override\n    public Rectangle add(Rectangle r)", "original_string": "    @Override\n    public Rectangle add(Rectangle r) {\n        return Geometries.rectangle(Math.min(x, r.x1()), Math.min(y, r.y1()), Math.max(x, r.x2()),\n                Math.max(y, r.y2()));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[boolean]contains(double,double)", "name": "contains", "arg_nums": 2, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}], "return_type": "boolean", "signature": "@Override\n    public boolean contains(double x, double y)", "original_string": "    @Override\n    public boolean contains(double x, double y) {\n        return this.x == x && this.y == y;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[double]intersectionArea(Rectangle)", "name": "intersectionArea", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "double", "signature": "@Override\n    public double intersectionArea(Rectangle r)", "original_string": "    @Override\n    public double intersectionArea(Rectangle r) {\n        return 0;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[double]perimeter()", "name": "perimeter", "arg_nums": 0, "params": [], "return_type": "double", "signature": "@Override\n    public double perimeter()", "original_string": "    @Override\n    public double perimeter() {\n        return 0;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[boolean]isDoublePrecision()", "name": "isDoublePrecision", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "@Override\n    public boolean isDoublePrecision()", "original_string": "    @Override\n    public boolean isDoublePrecision() {\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        long temp;\n        temp = Double.doubleToLongBits(x);\n        result = prime * result + (int) (temp ^ (temp >>> 32));\n        temp = Double.doubleToLongBits(y);\n        result = prime * result + (int) (temp ^ (temp >>> 32));\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "obj", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object obj)", "original_string": "    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        PointDouble other = (PointDouble) obj;\n        if (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))\n            return false;\n        if (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))\n            return false;\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java", "class_name": "PointDouble", "class_uri": "src/main/java/com/github/davidmoten/rtree/geometry/internal/PointDouble.java.PointDouble", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/FactoryDefault.java.FactoryDefault.[Factory<T, S>]instance()", "name": "instance", "arg_nums": 0, "params": [], "return_type": "Factory<T, S>", "signature": "@SuppressWarnings(\"unchecked\")\n    public static <T, S extends Geometry> Factory<T, S> instance()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    public static <T, S extends Geometry> Factory<T, S> instance() {\n        return (Factory<T, S>) Holder.INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/FactoryDefault.java", "class_name": "FactoryDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/FactoryDefault.java.FactoryDefault", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    public static", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public", "static"], "comments": [], "return_type": "Factory<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/FactoryDefault.java.FactoryDefault.[Leaf<T, S>]createLeaf(List<Entry<T, S>>,Context<T, S>)", "name": "createLeaf", "arg_nums": 2, "params": [{"name": "entries", "type": "List<Entry<T, S>>"}, {"name": "context", "type": "Context<T, S>"}], "return_type": "Leaf<T, S>", "signature": "@Override\n    public Leaf<T, S> createLeaf(List<Entry<T, S>> entries, Context<T, S> context)", "original_string": "    @Override\n    public Leaf<T, S> createLeaf(List<Entry<T, S>> entries, Context<T, S> context) {\n        return new LeafDefault<>(entries, context);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/FactoryDefault.java", "class_name": "FactoryDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/FactoryDefault.java.FactoryDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Leaf<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/FactoryDefault.java.FactoryDefault.[NonLeaf<T, S>]createNonLeaf(List<? extends Node<T, S>>,Context<T, S>)", "name": "createNonLeaf", "arg_nums": 2, "params": [{"name": "children", "type": "List<? extends Node<T, S>>"}, {"name": "context", "type": "Context<T, S>"}], "return_type": "NonLeaf<T, S>", "signature": "@Override\n    public NonLeaf<T, S> createNonLeaf(List<? extends Node<T, S>> children, Context<T, S> context)", "original_string": "    @Override\n    public NonLeaf<T, S> createNonLeaf(List<? extends Node<T, S>> children, Context<T, S> context) {\n        return new NonLeafDefault<>(children, context);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/FactoryDefault.java", "class_name": "FactoryDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/FactoryDefault.java.FactoryDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "NonLeaf<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/FactoryDefault.java.FactoryDefault.[Entry<T, S>]createEntry(T,S)", "name": "createEntry", "arg_nums": 2, "params": [{"name": "value", "type": "T"}, {"name": "geometry", "type": "S"}], "return_type": "Entry<T, S>", "signature": "@Override\n    public Entry<T, S> createEntry(T value, S geometry)", "original_string": "    @Override\n    public Entry<T, S> createEntry(T value, S geometry) {\n        return Entries.entry(value, geometry);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/FactoryDefault.java", "class_name": "FactoryDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/FactoryDefault.java.FactoryDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Entry<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Util.java.Util.[]Util()", "name": "Util", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Util()", "original_string": "    private Util() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Util.java", "class_name": "Util", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Util.java.Util", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Util.java.Util.[Rectangle]mbr(Collection<? extends HasGeometry>)", "name": "mbr", "arg_nums": 1, "params": [{"name": "items", "type": "Collection<? extends HasGeometry>"}], "return_type": "Rectangle", "signature": "public static Rectangle mbr(Collection<? extends HasGeometry> items)", "original_string": "    public static Rectangle mbr(Collection<? extends HasGeometry> items) {\n        Preconditions.checkArgument(!items.isEmpty());\n        double minX1 = Double.MAX_VALUE;\n        double minY1 = Double.MAX_VALUE;\n        double maxX2 = -Double.MAX_VALUE;\n        double maxY2 = -Double.MAX_VALUE;\n        boolean isDoublePrecision = false;\n        for (final HasGeometry item : items) {\n            Rectangle r = item.geometry().mbr();\n            if (r.isDoublePrecision()) {\n                isDoublePrecision = true;\n            }\n            if (r.x1() < minX1)\n                minX1 = r.x1();\n            if (r.y1() < minY1)\n                minY1 = r.y1();\n            if (r.x2() > maxX2)\n                maxX2 = r.x2();\n            if (r.y2() > maxY2)\n                maxY2 = r.y2();\n        }\n        if (isDoublePrecision) {\n            return Geometries.rectangle(minX1, minY1, maxX2, maxY2);\n        } else {\n            return Geometries.rectangle((float) minX1, (float) minY1, (float) maxX2, (float) maxY2);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Util.java", "class_name": "Util", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Util.java.Util", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Rectangle", "classes": []}, "docstring": "\nReturns the minimum bounding rectangle of a number of items. Benchmarks below\nindicate that when the number of items is &gt;1 this method is more\nperformant than one using {@link Rectangle#add(Rectangle)}.\n\n<pre>\nBenchmark                             Mode  Samples         Score  Score error  Units\nc.g.d.r.BenchmarksMbr.mbrList1       thrpt       10  48450492.301   436127.960  ops/s\nc.g.d.r.BenchmarksMbr.mbrList2       thrpt       10  46658242.728   987901.581  ops/s\nc.g.d.r.BenchmarksMbr.mbrList3       thrpt       10  40357809.306   937827.660  ops/s\nc.g.d.r.BenchmarksMbr.mbrList4       thrpt       10  35930532.557   605535.237  ops/s\nc.g.d.r.BenchmarksMbr.mbrOldList1    thrpt       10  55848118.198  1342997.309  ops/s\nc.g.d.r.BenchmarksMbr.mbrOldList2    thrpt       10  25171873.903   395127.918  ops/s\nc.g.d.r.BenchmarksMbr.mbrOldList3    thrpt       10  19222116.139   246965.178  ops/s\nc.g.d.r.BenchmarksMbr.mbrOldList4    thrpt       10  14891862.638   198765.157  ops/s\n</pre>\n\n@param items\n           items to bound\n@return the minimum bounding rectangle containings items\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Util.java.Util.[List<T>]add(List<T>,T)", "name": "add", "arg_nums": 2, "params": [{"name": "list", "type": "List<T>"}, {"name": "element", "type": "T"}], "return_type": "List<T>", "signature": "public static <T> List<T> add(List<T> list, T element)", "original_string": "    public static <T> List<T> add(List<T> list, T element) {\n        final ArrayList<T> result = new ArrayList<T>(list.size() + 2);\n        result.addAll(list);\n        result.add(element);\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Util.java", "class_name": "Util", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Util.java.Util", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Util.java.Util.[List<T>]remove(List<? extends T>,List<? extends T>)", "name": "remove", "arg_nums": 2, "params": [{"name": "list", "type": "List<? extends T>"}, {"name": "elements", "type": "List<? extends T>"}], "return_type": "List<T>", "signature": "public static <T> List<T> remove(List<? extends T> list, List<? extends T> elements)", "original_string": "    public static <T> List<T> remove(List<? extends T> list, List<? extends T> elements) {\n        final ArrayList<T> result = new ArrayList<T>(list);\n        result.removeAll(elements);\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Util.java", "class_name": "Util", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Util.java.Util", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Util.java.Util.[List<? extends T>]replace(List<? extends T>,T,List<T>)", "name": "replace", "arg_nums": 3, "params": [{"name": "list", "type": "List<? extends T>"}, {"name": "element", "type": "T"}, {"name": "replacements", "type": "List<T>"}], "return_type": "List<? extends T>", "signature": "public static <T> List<? extends T> replace(List<? extends T> list, T element,\n            List<T> replacements)", "original_string": "    public static <T> List<? extends T> replace(List<? extends T> list, T element,\n            List<T> replacements) {\n        List<T> list2 = new ArrayList<T>(list.size() + replacements.size());\n        for (T node : list)\n            if (node != element)\n                list2.add(node);\n        list2.addAll(replacements);\n        return list2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Util.java", "class_name": "Util", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Util.java.Util", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "List<? extends T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Functions.java.Functions.[]Functions()", "name": "Functions", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Functions()", "original_string": "    private Functions() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Functions.java", "class_name": "Functions", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Functions.java.Functions", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Functions.java.Functions.[Func1<T, T>]identity()", "name": "identity", "arg_nums": 0, "params": [], "return_type": "Func1<T, T>", "signature": "public static <T> Func1<T, T> identity()", "original_string": "    public static <T> Func1<T, T> identity() {\n        return t -> t;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Functions.java", "class_name": "Functions", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Functions.java.Functions", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Func1<T, T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Functions.java.Functions.[Func1<T, Boolean>]alwaysTrue()", "name": "alwaysTrue", "arg_nums": 0, "params": [], "return_type": "Func1<T, Boolean>", "signature": "public static <T> Func1<T, Boolean> alwaysTrue()", "original_string": "    public static <T> Func1<T, Boolean> alwaysTrue() {\n        return t -> true;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Functions.java", "class_name": "Functions", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Functions.java.Functions", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Func1<T, Boolean>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Functions.java.Functions.[Func1<T, Boolean>]alwaysFalse()", "name": "alwaysFalse", "arg_nums": 0, "params": [], "return_type": "Func1<T, Boolean>", "signature": "public static <T> Func1<T, Boolean> alwaysFalse()", "original_string": "    public static <T> Func1<T, Boolean> alwaysFalse() {\n        return t -> false;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Functions.java", "class_name": "Functions", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Functions.java.Functions", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Func1<T, Boolean>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault.[]NonLeafDefault(List<? extends Node<T, S>>,Context<T, S>)", "name": "NonLeafDefault", "arg_nums": 2, "params": [{"name": "children", "type": "List<? extends Node<T, S>>"}, {"name": "context", "type": "Context<T, S>"}], "return_type": "", "signature": "public NonLeafDefault(List<? extends Node<T, S>> children, Context<T, S> context)", "original_string": "    public NonLeafDefault(List<? extends Node<T, S>> children, Context<T, S> context) {\n        Preconditions.checkArgument(!children.isEmpty());\n        this.context = context;\n        this.children = children;\n        this.mbr = Util.mbr(children);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java", "class_name": "NonLeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault.[Geometry]geometry()", "name": "geometry", "arg_nums": 0, "params": [], "return_type": "Geometry", "signature": "@Override\n    public Geometry geometry()", "original_string": "    @Override\n    public Geometry geometry() {\n        return mbr;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java", "class_name": "NonLeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Geometry", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault.[void]searchWithoutBackpressure(Func1<? super Geometry, Boolean>,Subscriber<? super Entry<T, S>>)", "name": "searchWithoutBackpressure", "arg_nums": 2, "params": [{"name": "criterion", "type": "Func1<? super Geometry, Boolean>"}, {"name": "subscriber", "type": "Subscriber<? super Entry<T, S>>"}], "return_type": "void", "signature": "@Override\n    public void searchWithoutBackpressure(Func1<? super Geometry, Boolean> criterion,\n            Subscriber<? super Entry<T, S>> subscriber)", "original_string": "    @Override\n    public void searchWithoutBackpressure(Func1<? super Geometry, Boolean> criterion,\n            Subscriber<? super Entry<T, S>> subscriber) {\n        NonLeafHelper.search(criterion, subscriber, this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java", "class_name": "NonLeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault.[int]count()", "name": "count", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int count()", "original_string": "    @Override\n    public int count() {\n        return children.size();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java", "class_name": "NonLeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault.[List<Node<T, S>>]add(Entry<? extends T, ? extends S>)", "name": "add", "arg_nums": 1, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}], "return_type": "List<Node<T, S>>", "signature": "@Override\n    public List<Node<T, S>> add(Entry<? extends T, ? extends S> entry)", "original_string": "    @Override\n    public List<Node<T, S>> add(Entry<? extends T, ? extends S> entry) {\n        return NonLeafHelper.add(entry, this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java", "class_name": "NonLeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Node<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault.[NodeAndEntries<T, S>]delete(Entry<? extends T, ? extends S>,boolean)", "name": "delete", "arg_nums": 2, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}, {"name": "all", "type": "boolean"}], "return_type": "NodeAndEntries<T, S>", "signature": "@Override\n    public NodeAndEntries<T, S> delete(Entry<? extends T, ? extends S> entry, boolean all)", "original_string": "    @Override\n    public NodeAndEntries<T, S> delete(Entry<? extends T, ? extends S> entry, boolean all) {\n        return NonLeafHelper.delete(entry, all, this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java", "class_name": "NonLeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "NodeAndEntries<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault.[Context<T, S>]context()", "name": "context", "arg_nums": 0, "params": [], "return_type": "Context<T, S>", "signature": "@Override\n    public Context<T, S> context()", "original_string": "    @Override\n    public Context<T, S> context() {\n        return context;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java", "class_name": "NonLeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Context<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault.[Node<T, S>]child(int)", "name": "child", "arg_nums": 1, "params": [{"name": "i", "type": "int"}], "return_type": "Node<T, S>", "signature": "@Override\n    public Node<T, S> child(int i)", "original_string": "    @Override\n    public Node<T, S> child(int i) {\n        return children.get(i);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java", "class_name": "NonLeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Node<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault.[List<Node<T, S>>]children()", "name": "children", "arg_nums": 0, "params": [], "return_type": "List<Node<T, S>>", "signature": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public List<Node<T, S>> children()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    public List<Node<T, S>> children() {\n        return (List<Node<T, S>>) children;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java", "class_name": "NonLeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafDefault.java.NonLeafDefault", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "List<Node<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault.[]LeafDefault(List<Entry<T, S>>,Context<T, S>)", "name": "LeafDefault", "arg_nums": 2, "params": [{"name": "entries", "type": "List<Entry<T, S>>"}, {"name": "context", "type": "Context<T, S>"}], "return_type": "", "signature": "public LeafDefault(List<Entry<T, S>> entries, Context<T, S> context)", "original_string": "    public LeafDefault(List<Entry<T, S>> entries, Context<T, S> context) {\n        this.entries = entries;\n        this.context = context;\n        this.mbr = Util.mbr(entries);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java", "class_name": "LeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault.[Geometry]geometry()", "name": "geometry", "arg_nums": 0, "params": [], "return_type": "Geometry", "signature": "@Override\n    public Geometry geometry()", "original_string": "    @Override\n    public Geometry geometry() {\n        return mbr;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java", "class_name": "LeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Geometry", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault.[List<Entry<T, S>>]entries()", "name": "entries", "arg_nums": 0, "params": [], "return_type": "List<Entry<T, S>>", "signature": "@Override\n    public List<Entry<T, S>> entries()", "original_string": "    @Override\n    public List<Entry<T, S>> entries() {\n        return entries;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java", "class_name": "LeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Entry<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault.[void]searchWithoutBackpressure(Func1<? super Geometry, Boolean>,Subscriber<? super Entry<T, S>>)", "name": "searchWithoutBackpressure", "arg_nums": 2, "params": [{"name": "condition", "type": "Func1<? super Geometry, Boolean>"}, {"name": "subscriber", "type": "Subscriber<? super Entry<T, S>>"}], "return_type": "void", "signature": "@Override\n    public void searchWithoutBackpressure(Func1<? super Geometry, Boolean> condition,\n            Subscriber<? super Entry<T, S>> subscriber)", "original_string": "    @Override\n    public void searchWithoutBackpressure(Func1<? super Geometry, Boolean> condition,\n            Subscriber<? super Entry<T, S>> subscriber) {\n        LeafHelper.search(condition, subscriber, this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java", "class_name": "LeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault.[int]count()", "name": "count", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int count()", "original_string": "    @Override\n    public int count() {\n        return entries.size();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java", "class_name": "LeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault.[List<Node<T, S>>]add(Entry<? extends T, ? extends S>)", "name": "add", "arg_nums": 1, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}], "return_type": "List<Node<T, S>>", "signature": "@Override\n    public List<Node<T, S>> add(Entry<? extends T, ? extends S> entry)", "original_string": "    @Override\n    public List<Node<T, S>> add(Entry<? extends T, ? extends S> entry) {\n        return LeafHelper.add(entry, this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java", "class_name": "LeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Node<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault.[NodeAndEntries<T, S>]delete(Entry<? extends T, ? extends S>,boolean)", "name": "delete", "arg_nums": 2, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}, {"name": "all", "type": "boolean"}], "return_type": "NodeAndEntries<T, S>", "signature": "@Override\n    public NodeAndEntries<T, S> delete(Entry<? extends T, ? extends S> entry, boolean all)", "original_string": "    @Override\n    public NodeAndEntries<T, S> delete(Entry<? extends T, ? extends S> entry, boolean all) {\n        return LeafHelper.delete(entry, all, this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java", "class_name": "LeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "NodeAndEntries<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault.[Context<T, S>]context()", "name": "context", "arg_nums": 0, "params": [], "return_type": "Context<T, S>", "signature": "@Override\n    public Context<T, S> context()", "original_string": "    @Override\n    public Context<T, S> context() {\n        return context;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java", "class_name": "LeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Context<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault.[Entry<T, S>]entry(int)", "name": "entry", "arg_nums": 1, "params": [{"name": "i", "type": "int"}], "return_type": "Entry<T, S>", "signature": "@Override\n    public Entry<T, S> entry(int i)", "original_string": "    @Override\n    public Entry<T, S> entry(int i) {\n        return entries.get(i);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java", "class_name": "LeafDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/LeafDefault.java.LeafDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Entry<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NodeAndEntries.java.NodeAndEntries.[]NodeAndEntries(Optional<? extends Node<T, S>>,List<Entry<T, S>>,int)", "name": "NodeAndEntries", "arg_nums": 3, "params": [{"name": "node", "type": "Optional<? extends Node<T, S>>"}, {"name": "entries", "type": "List<Entry<T, S>>"}, {"name": "countDeleted", "type": "int"}], "return_type": "", "signature": "public NodeAndEntries(Optional<? extends Node<T, S>> node, List<Entry<T, S>> entries,\n            int countDeleted)", "original_string": "    public NodeAndEntries(Optional<? extends Node<T, S>> node, List<Entry<T, S>> entries,\n            int countDeleted) {\n        this.node = node;\n        this.entries = entries;\n        this.count = countDeleted;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NodeAndEntries.java", "class_name": "NodeAndEntries", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NodeAndEntries.java.NodeAndEntries", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor.\n\n@param node\n           absent = whole node was deleted present = either an unchanged\n           node because of no removal or the newly created node without\n           the deleted entry\n@param entries\n           from nodes that dropped below minChildren in size and thus\n           their entries are to be redistributed (readded to the tree)\n@param countDeleted\n           count of the number of entries removed\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NodeAndEntries.java.NodeAndEntries.[Optional<? extends Node<T, S>>]node()", "name": "node", "arg_nums": 0, "params": [], "return_type": "Optional<? extends Node<T, S>>", "signature": "public Optional<? extends Node<T, S>> node()", "original_string": "    public Optional<? extends Node<T, S>> node() {\n        return node;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NodeAndEntries.java", "class_name": "NodeAndEntries", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NodeAndEntries.java.NodeAndEntries", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Optional<? extends Node<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NodeAndEntries.java.NodeAndEntries.[List<Entry<T, S>>]entriesToAdd()", "name": "entriesToAdd", "arg_nums": 0, "params": [], "return_type": "List<Entry<T, S>>", "signature": "public List<Entry<T, S>> entriesToAdd()", "original_string": "    public List<Entry<T, S>> entriesToAdd() {\n        return entries;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NodeAndEntries.java", "class_name": "NodeAndEntries", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NodeAndEntries.java.NodeAndEntries", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Entry<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NodeAndEntries.java.NodeAndEntries.[int]countDeleted()", "name": "countDeleted", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int countDeleted()", "original_string": "    public int countDeleted() {\n        return count;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NodeAndEntries.java", "class_name": "NodeAndEntries", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NodeAndEntries.java.NodeAndEntries", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D.[]Line2D(double,double,double,double)", "name": "Line2D", "arg_nums": 4, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "", "signature": "public Line2D(double x1, double y1, double x2, double y2)", "original_string": "    public Line2D(double x1, double y1, double x2, double y2) {\n        this.x1 = x1;\n        this.x2 = x2;\n        this.y1 = y1;\n        this.y2 = y2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java", "class_name": "Line2D", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D.[double]getX1()", "name": "getX1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double getX1()", "original_string": "    public double getX1() {\n        return x1;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java", "class_name": "Line2D", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D.[double]getX2()", "name": "getX2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double getX2()", "original_string": "    public double getX2() {\n        return x2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java", "class_name": "Line2D", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D.[double]getY1()", "name": "getY1", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double getY1()", "original_string": "    public double getY1() {\n        return y1;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java", "class_name": "Line2D", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D.[double]getY2()", "name": "getY2", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double getY2()", "original_string": "    public double getY2() {\n        return y2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java", "class_name": "Line2D", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D.[double]ptSegDist(double,double)", "name": "ptSegDist", "arg_nums": 2, "params": [{"name": "px", "type": "double"}, {"name": "py", "type": "double"}], "return_type": "double", "signature": "public double ptSegDist(double px, double py)", "original_string": "    public double ptSegDist(double px, double py) {\n        return ptSegDist(getX1(), getY1(), getX2(), getY2(), px, py);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java", "class_name": "Line2D", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": "\nReturns the distance from a point to this line segment. The distance measured\nis the distance between the specified point and the closest point between the\ncurrent line's end points. If the specified point intersects the line segment\nin between the end points, this method returns 0.0.\n\n@param px\n           the X coordinate of the specified point being measured against\n           this line segment\n@param py\n           the Y coordinate of the specified point being measured against\n           this line segment\n@return a double value that is the distance from the specified point to the\n        current line segment.\n@since 1.2\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D.[double]ptSegDist(double,double,double,double,double,double)", "name": "ptSegDist", "arg_nums": 6, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}, {"name": "px", "type": "double"}, {"name": "py", "type": "double"}], "return_type": "double", "signature": "public static double ptSegDist(double x1, double y1, double x2, double y2, double px,\n            double py)", "original_string": "    public static double ptSegDist(double x1, double y1, double x2, double y2, double px,\n            double py) {\n        return Math.sqrt(ptSegDistSq(x1, y1, x2, y2, px, py));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java", "class_name": "Line2D", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": "\nReturns the distance from a point to a line segment. The distance measured is\nthe distance between the specified point and the closest point between the\nspecified end points. If the specified point intersects the line segment in\nbetween the end points, this method returns 0.0.\n\n@param x1\n           the X coordinate of the start point of the specified line segment\n@param y1\n           the Y coordinate of the start point of the specified line segment\n@param x2\n           the X coordinate of the end point of the specified line segment\n@param y2\n           the Y coordinate of the end point of the specified line segment\n@param px\n           the X coordinate of the specified point being measured against the\n           specified line segment\n@param py\n           the Y coordinate of the specified point being measured against the\n           specified line segment\n@return a double value that is the distance from the specified point to the\n        specified line segment.\n@since 1.2\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D.[double]ptSegDistSq(double,double,double,double,double,double)", "name": "ptSegDistSq", "arg_nums": 6, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}, {"name": "px", "type": "double"}, {"name": "py", "type": "double"}], "return_type": "double", "signature": "public static double ptSegDistSq(double x1, double y1, double x2, double y2, double px,\n            double py)", "original_string": "    public static double ptSegDistSq(double x1, double y1, double x2, double y2, double px,\n            double py) {\n        // Adjust vectors relative to x1,y1\n        // x2,y2 becomes relative vector from x1,y1 to end of segment\n        x2 -= x1;\n        y2 -= y1;\n        // px,py becomes relative vector from x1,y1 to test point\n        px -= x1;\n        py -= y1;\n        double dotprod = px * x2 + py * y2;\n        double projlenSq;\n        if (dotprod <= 0.0) {\n            // px,py is on the side of x1,y1 away from x2,y2\n            // distance to segment is length of px,py vector\n            // \"length of its (clipped) projection\" is now 0.0\n            projlenSq = 0.0;\n        } else {\n            // switch to backwards vectors relative to x2,y2\n            // x2,y2 are already the negative of x1,y1=>x2,y2\n            // to get px,py to be the negative of px,py=>x2,y2\n            // the dot product of two negated vectors is the same\n            // as the dot product of the two normal vectors\n            px = x2 - px;\n            py = y2 - py;\n            dotprod = px * x2 + py * y2;\n            if (dotprod <= 0.0) {\n                // px,py is on the side of x2,y2 away from x1,y1\n                // distance to segment is length of (backwards) px,py vector\n                // \"length of its (clipped) projection\" is now 0.0\n                projlenSq = 0.0;\n            } else {\n                // px,py is between x1,y1 and x2,y2\n                // dotprod is the length of the px,py vector\n                // projected on the x2,y2=>x1,y1 vector times the\n                // length of the x2,y2=>x1,y1 vector\n                projlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);\n            }\n        }\n        // Distance to line is now the length of the relative point\n        // vector minus the length of its projection onto the line\n        // (which is zero if the projection falls outside the range\n        // of the line segment).\n        double lenSq = px * px + py * py - projlenSq;\n        if (lenSq < 0) {\n            lenSq = 0;\n        }\n        return lenSq;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java", "class_name": "Line2D", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": "\nReturns the square of the distance from a point to a line segment. The\ndistance measured is the distance between the specified point and the closest\npoint between the specified end points. If the specified point intersects the\nline segment in between the end points, this method returns 0.0.\n\n@param x1\n           the X coordinate of the start point of the specified line segment\n@param y1\n           the Y coordinate of the start point of the specified line segment\n@param x2\n           the X coordinate of the end point of the specified line segment\n@param y2\n           the Y coordinate of the end point of the specified line segment\n@param px\n           the X coordinate of the specified point being measured against the\n           specified line segment\n@param py\n           the Y coordinate of the specified point being measured against the\n           specified line segment\n@return a double value that is the square of the distance from the specified\n        point to the specified line segment.\n@since 1.2\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D.[boolean]intersectsLine(Line2D)", "name": "intersectsLine", "arg_nums": 1, "params": [{"name": "l", "type": "Line2D"}], "return_type": "boolean", "signature": "public boolean intersectsLine(Line2D l)", "original_string": "    public boolean intersectsLine(Line2D l) {\n        return linesIntersect(l.getX1(), l.getY1(), l.getX2(), l.getY2(), getX1(), getY1(), getX2(),\n                getY2());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java", "class_name": "Line2D", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests if the specified line segment intersects this line segment.\n\n@param l\n           the specified <code>Line2D</code>\n@return <code>true</code> if this line segment and the specified line segment\n        intersect each other; <code>false</code> otherwise.\n@since 1.2\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D.[boolean]linesIntersect(double,double,double,double,double,double,double,double)", "name": "linesIntersect", "arg_nums": 8, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}, {"name": "x3", "type": "double"}, {"name": "y3", "type": "double"}, {"name": "x4", "type": "double"}, {"name": "y4", "type": "double"}], "return_type": "boolean", "signature": "public static boolean linesIntersect(double x1, double y1, double x2, double y2, double x3,\n            double y3, double x4, double y4)", "original_string": "    public static boolean linesIntersect(double x1, double y1, double x2, double y2, double x3,\n            double y3, double x4, double y4) {\n        return ((relativeCCW(x1, y1, x2, y2, x3, y3) * relativeCCW(x1, y1, x2, y2, x4, y4) <= 0)\n                && (relativeCCW(x3, y3, x4, y4, x1, y1)\n                        * relativeCCW(x3, y3, x4, y4, x2, y2) <= 0));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java", "class_name": "Line2D", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests if the line segment from {@code (x1,y1)} to {@code (x2,y2)} intersects\nthe line segment from {@code (x3,y3)} to {@code (x4,y4)}.\n\n@param x1\n           the X coordinate of the start point of the first specified line\n           segment\n@param y1\n           the Y coordinate of the start point of the first specified line\n           segment\n@param x2\n           the X coordinate of the end point of the first specified line\n           segment\n@param y2\n           the Y coordinate of the end point of the first specified line\n           segment\n@param x3\n           the X coordinate of the start point of the second specified line\n           segment\n@param y3\n           the Y coordinate of the start point of the second specified line\n           segment\n@param x4\n           the X coordinate of the end point of the second specified line\n           segment\n@param y4\n           the Y coordinate of the end point of the second specified line\n           segment\n@return <code>true</code> if the first specified line segment and the second\n        specified line segment intersect each other; <code>false</code>\n        otherwise.\n@since 1.2\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D.[int]relativeCCW(double,double,double,double,double,double)", "name": "relativeCCW", "arg_nums": 6, "params": [{"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}, {"name": "px", "type": "double"}, {"name": "py", "type": "double"}], "return_type": "int", "signature": "private static int relativeCCW(double x1, double y1, double x2, double y2, double px,\n            double py)", "original_string": "    private static int relativeCCW(double x1, double y1, double x2, double y2, double px,\n            double py) {\n        x2 -= x1;\n        y2 -= y1;\n        px -= x1;\n        py -= y1;\n        double ccw = px * y2 - py * x2;\n        if (ccw == 0.0) {\n            // The point is colinear, classify based on which side of\n            // the segment the point falls on. We can calculate a\n            // relative value using the projection of px,py onto the\n            // segment - a negative value indicates the point projects\n            // outside of the segment in the direction of the particular\n            // endpoint used as the origin for the projection.\n            ccw = px * x2 + py * y2;\n            if (ccw > 0.0) {\n                // Reverse the projection to be relative to the original x2,y2\n                // x2 and y2 are simply negated.\n                // px and py need to have (x2 - x1) or (y2 - y1) subtracted\n                // from them (based on the original values)\n                // Since we really want to get a positive answer when the\n                // point is \"beyond (x2,y2)\", then we want to calculate\n                // the inverse anyway - thus we leave x2 & y2 negated.\n                px -= x2;\n                py -= y2;\n                ccw = px * x2 + py * y2;\n                if (ccw < 0.0) {\n                    ccw = 0.0;\n                }\n            }\n        }\n        return (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java", "class_name": "Line2D", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Line2D.java.Line2D", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nReturns an indicator of where the specified point {@code (px,py)} lies with\nrespect to the line segment from {@code (x1,y1)} to {@code (x2,y2)}. The\nreturn value can be either 1, -1, or 0 and indicates in which direction the\nspecified line must pivot around its first end point, {@code (x1,y1)}, in\norder to point at the specified point {@code (px,py)}.\n<p>\nA return value of 1 indicates that the line segment must turn in the\ndirection that takes the positive X axis towards the negative Y axis. In the\ndefault coordinate system used by Java 2D, this direction is\ncounterclockwise.\n<p>\nA return value of -1 indicates that the line segment must turn in the\ndirection that takes the positive X axis towards the positive Y axis. In the\ndefault coordinate system, this direction is clockwise.\n<p>\nA return value of 0 indicates that the point lies exactly on the line\nsegment. Note that an indicator value of 0 is rare and not useful for\ndetermining collinearity because of floating point rounding issues.\n<p>\nIf the point is colinear with the line segment, but not between the end\npoints, then the value will be -1 if the point lies \"beyond {@code (x1,y1)}\"\nor 1 if the point lies \"beyond {@code (x2,y2)}\".\n\n@param x1\n           the X coordinate of the start point of the specified line segment\n@param y1\n           the Y coordinate of the start point of the specified line segment\n@param x2\n           the X coordinate of the end point of the specified line segment\n@param y2\n           the Y coordinate of the end point of the specified line segment\n@param px\n           the X coordinate of the specified point to be compared with the\n           specified line segment\n@param py\n           the Y coordinate of the specified point to be compared with the\n           specified line segment\n@return an integer that indicates the position of the third specified\n        coordinates with respect to the line segment formed by the first two\n        specified coordinates.\n@since 1.2\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java.LeafHelper.[]LeafHelper()", "name": "LeafHelper", "arg_nums": 0, "params": [], "return_type": "", "signature": "private LeafHelper()", "original_string": "    private LeafHelper() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java", "class_name": "LeafHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java.LeafHelper", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java.LeafHelper.[NodeAndEntries<T, S>]delete(Entry<? extends T, ? extends S>,boolean,Leaf<T, S>)", "name": "delete", "arg_nums": 3, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}, {"name": "all", "type": "boolean"}, {"name": "leaf", "type": "Leaf<T, S>"}], "return_type": "NodeAndEntries<T, S>", "signature": "public static <T, S extends Geometry> NodeAndEntries<T, S> delete(\n            Entry<? extends T, ? extends S> entry, boolean all, Leaf<T, S> leaf)", "original_string": "    public static <T, S extends Geometry> NodeAndEntries<T, S> delete(\n            Entry<? extends T, ? extends S> entry, boolean all, Leaf<T, S> leaf) {\n        List<Entry<T, S>> entries = leaf.entries();\n        if (!entries.contains(entry)) {\n            return new NodeAndEntries<>(of(leaf), Collections.emptyList(), 0);\n        } else {\n            final List<Entry<T, S>> entries2 = new ArrayList<>(entries);\n            entries2.remove(entry);\n            int numDeleted = 1;\n            // keep deleting if all specified\n            while (all && entries2.remove(entry))\n                numDeleted += 1;\n\n            if (entries2.size() >= leaf.context().minChildren()) {\n                Leaf<T, S> node = leaf.context().factory().createLeaf(entries2, leaf.context());\n                return new NodeAndEntries<>(of(node), Collections.emptyList(),\n                        numDeleted);\n            } else {\n                return new NodeAndEntries<T, S>(Optional.empty(), entries2,\n                        numDeleted);\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java", "class_name": "LeafHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java.LeafHelper", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "NodeAndEntries<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java.LeafHelper.[List<Node<T, S>>]add(Entry<? extends T, ? extends S>,Leaf<T, S>)", "name": "add", "arg_nums": 2, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}, {"name": "leaf", "type": "Leaf<T, S>"}], "return_type": "List<Node<T, S>>", "signature": "public static <T, S extends Geometry> List<Node<T, S>> add(\n            Entry<? extends T, ? extends S> entry, Leaf<T, S> leaf)", "original_string": "    public static <T, S extends Geometry> List<Node<T, S>> add(\n            Entry<? extends T, ? extends S> entry, Leaf<T, S> leaf) {\n        List<Entry<T, S>> entries = leaf.entries();\n        Context<T, S> context = leaf.context();\n        @SuppressWarnings(\"unchecked\")\n        final List<Entry<T, S>> entries2 = Util.add(entries, (Entry<T, S>) entry);\n        if (entries2.size() <= context.maxChildren())\n            return Collections\n                    .singletonList((Node<T, S>) context.factory().createLeaf(entries2, context));\n        else {\n            ListPair<Entry<T, S>> pair = context.splitter().split(entries2, context.minChildren());\n            return makeLeaves(pair, context);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java", "class_name": "LeafHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java.LeafHelper", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "List<Node<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java.LeafHelper.[List<Node<T, S>>]makeLeaves(ListPair<Entry<T, S>>,Context<T, S>)", "name": "makeLeaves", "arg_nums": 2, "params": [{"name": "pair", "type": "ListPair<Entry<T, S>>"}, {"name": "context", "type": "Context<T, S>"}], "return_type": "List<Node<T, S>>", "signature": "private static <T, S extends Geometry> List<Node<T, S>> makeLeaves(ListPair<Entry<T, S>> pair,\n            Context<T, S> context)", "original_string": "    private static <T, S extends Geometry> List<Node<T, S>> makeLeaves(ListPair<Entry<T, S>> pair,\n            Context<T, S> context) {\n        List<Node<T, S>> list = new ArrayList<Node<T, S>>(2);\n        list.add(context.factory().createLeaf(pair.group1().list(), context));\n        list.add(context.factory().createLeaf(pair.group2().list(), context));\n        return list;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java", "class_name": "LeafHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java.LeafHelper", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "List<Node<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java.LeafHelper.[void]search(Func1<? super Geometry, Boolean>,Subscriber<? super Entry<T, S>>,Leaf<T, S>)", "name": "search", "arg_nums": 3, "params": [{"name": "condition", "type": "Func1<? super Geometry, Boolean>"}, {"name": "subscriber", "type": "Subscriber<? super Entry<T, S>>"}, {"name": "leaf", "type": "Leaf<T, S>"}], "return_type": "void", "signature": "public static <T, S extends Geometry> void search(Func1<? super Geometry, Boolean> condition,\n            Subscriber<? super Entry<T, S>> subscriber, Leaf<T, S> leaf)", "original_string": "    public static <T, S extends Geometry> void search(Func1<? super Geometry, Boolean> condition,\n            Subscriber<? super Entry<T, S>> subscriber, Leaf<T, S> leaf) {\n\n        if (!condition.call(leaf.geometry().mbr())) {\n            return;\n        }\n\n        for (int i = 0; i < leaf.count(); i++) {\n            Entry<T, S> entry = leaf.entry(i);\n            if (subscriber.isUnsubscribed()) {\n                return;\n            } else {\n                if (condition.call(entry.geometry())) {\n                    subscriber.onNext(entry);\n                }\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java", "class_name": "LeafHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/LeafHelper.java.LeafHelper", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java.Comparators.[]Comparators()", "name": "Comparators", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Comparators()", "original_string": "    private Comparators() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java", "class_name": "Comparators", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java.Comparators", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java.Comparators.[Comparator<HasGeometry>]overlapAreaThenAreaIncreaseThenAreaComparator(Rectangle,List<T>)", "name": "overlapAreaThenAreaIncreaseThenAreaComparator", "arg_nums": 2, "params": [{"name": "r", "type": "Rectangle"}, {"name": "list", "type": "List<T>"}], "return_type": "Comparator<HasGeometry>", "signature": "public static <T extends HasGeometry> Comparator<HasGeometry> overlapAreaThenAreaIncreaseThenAreaComparator(\n            final Rectangle r, final List<T> list)", "original_string": "    public static <T extends HasGeometry> Comparator<HasGeometry> overlapAreaThenAreaIncreaseThenAreaComparator(\n            final Rectangle r, final List<T> list) {\n        return new Comparator<HasGeometry>() {\n\n            @Override\n            public int compare(HasGeometry g1, HasGeometry g2) {\n                int value = Double.compare(overlapArea(r, list, g1), overlapArea(r, list, g2));\n                if (value == 0) {\n                    value = Double.compare(areaIncrease(r, g1), areaIncrease(r, g2));\n                    if (value == 0) {\n                        value = Double.compare(area(r, g1), area(r, g2));\n                    }\n                }\n                return value;\n            }\n        };\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java", "class_name": "Comparators", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java.Comparators", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Comparator<HasGeometry>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java.Comparators.[double]area(Rectangle,HasGeometry)", "name": "area", "arg_nums": 2, "params": [{"name": "r", "type": "Rectangle"}, {"name": "g1", "type": "HasGeometry"}], "return_type": "double", "signature": "private static double area(final Rectangle r, HasGeometry g1)", "original_string": "    private static double area(final Rectangle r, HasGeometry g1) {\n        return g1.geometry().mbr().add(r).area();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java", "class_name": "Comparators", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java.Comparators", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java.Comparators.[Comparator<HasGeometry>]areaIncreaseThenAreaComparator(Rectangle)", "name": "areaIncreaseThenAreaComparator", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "Comparator<HasGeometry>", "signature": "public static <T extends HasGeometry> Comparator<HasGeometry> areaIncreaseThenAreaComparator(\n            final Rectangle r)", "original_string": "    public static <T extends HasGeometry> Comparator<HasGeometry> areaIncreaseThenAreaComparator(\n            final Rectangle r) {\n        return new Comparator<HasGeometry>() {\n            @Override\n            public int compare(HasGeometry g1, HasGeometry g2) {\n                int value = Double.compare(areaIncrease(r, g1), areaIncrease(r, g2));\n                if (value == 0) {\n                    value = Double.compare(area(r, g1), area(r, g2));\n                }\n                return value;\n            }\n        };\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java", "class_name": "Comparators", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java.Comparators", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Comparator<HasGeometry>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java.Comparators.[float]overlapArea(Rectangle,List<? extends HasGeometry>,HasGeometry)", "name": "overlapArea", "arg_nums": 3, "params": [{"name": "r", "type": "Rectangle"}, {"name": "list", "type": "List<? extends HasGeometry>"}, {"name": "g", "type": "HasGeometry"}], "return_type": "float", "signature": "private static float overlapArea(Rectangle r, List<? extends HasGeometry> list, HasGeometry g)", "original_string": "    private static float overlapArea(Rectangle r, List<? extends HasGeometry> list, HasGeometry g) {\n        Rectangle gPlusR = g.geometry().mbr().add(r);\n        float m = 0;\n        for (HasGeometry other : list) {\n            if (other != g) {\n                m += gPlusR.intersectionArea(other.geometry().mbr());\n            }\n        }\n        return m;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java", "class_name": "Comparators", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java.Comparators", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java.Comparators.[double]areaIncrease(Rectangle,HasGeometry)", "name": "areaIncrease", "arg_nums": 2, "params": [{"name": "r", "type": "Rectangle"}, {"name": "g", "type": "HasGeometry"}], "return_type": "double", "signature": "private static double areaIncrease(Rectangle r, HasGeometry g)", "original_string": "    private static double areaIncrease(Rectangle r, HasGeometry g) {\n        Rectangle gPlusR = g.geometry().mbr().add(r);\n        return gPlusR.area() - g.geometry().mbr().area();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java", "class_name": "Comparators", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java.Comparators", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java.Comparators.[Comparator<Entry<T, S>>]ascendingDistance(Rectangle)", "name": "ascendingDistance", "arg_nums": 1, "params": [{"name": "r", "type": "Rectangle"}], "return_type": "Comparator<Entry<T, S>>", "signature": "public static <T, S extends Geometry> Comparator<Entry<T, S>> ascendingDistance(\n            final Rectangle r)", "original_string": "    public static <T, S extends Geometry> Comparator<Entry<T, S>> ascendingDistance(\n            final Rectangle r) {\n        return new Comparator<Entry<T, S>>() {\n            @Override\n            public int compare(Entry<T, S> e1, Entry<T, S> e2) {\n                return Double.compare(e1.geometry().distance(r), e2.geometry().distance(r));\n            }\n        };\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java", "class_name": "Comparators", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/Comparators.java.Comparators", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Comparator<Entry<T, S>>", "classes": []}, "docstring": "\n<p>\nReturns a comparator that can be used to sort entries returned by search\nmethods. For example:\n</p>\n<p>\n<code>search(100).toSortedList(ascendingDistance(r))</code>\n</p>\n\n@param <T>\n           the value type\n@param <S>\n           the entry type\n@param r\n           rectangle to measure distance to\n@return a comparator to sort by ascending distance from the rectangle\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java.NonLeafHelper.[]NonLeafHelper()", "name": "NonLeafHelper", "arg_nums": 0, "params": [], "return_type": "", "signature": "private NonLeafHelper()", "original_string": "    private NonLeafHelper() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java", "class_name": "NonLeafHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java.NonLeafHelper", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java.NonLeafHelper.[void]search(Func1<? super Geometry, Boolean>,Subscriber<? super Entry<T, S>>,NonLeaf<T, S>)", "name": "search", "arg_nums": 3, "params": [{"name": "criterion", "type": "Func1<? super Geometry, Boolean>"}, {"name": "subscriber", "type": "Subscriber<? super Entry<T, S>>"}, {"name": "node", "type": "NonLeaf<T, S>"}], "return_type": "void", "signature": "public static <T, S extends Geometry> void search(Func1<? super Geometry, Boolean> criterion,\n            Subscriber<? super Entry<T, S>> subscriber, NonLeaf<T, S> node)", "original_string": "    public static <T, S extends Geometry> void search(Func1<? super Geometry, Boolean> criterion,\n            Subscriber<? super Entry<T, S>> subscriber, NonLeaf<T, S> node) {\n        if (!criterion.call(node.geometry().mbr()))\n            return;\n\n        int numChildren = node.count();\n        for (int i = 0; i < numChildren; i++) {\n            if (subscriber.isUnsubscribed()) {\n                return;\n            } else {\n                Node<T, S> child = node.child(i);\n                child.searchWithoutBackpressure(criterion, subscriber);\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java", "class_name": "NonLeafHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java.NonLeafHelper", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java.NonLeafHelper.[List<Node<T, S>>]add(Entry<? extends T, ? extends S>,NonLeaf<T, S>)", "name": "add", "arg_nums": 2, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}, {"name": "node", "type": "NonLeaf<T, S>"}], "return_type": "List<Node<T, S>>", "signature": "public static <T, S extends Geometry> List<Node<T, S>> add(\n            Entry<? extends T, ? extends S> entry, NonLeaf<T, S> node)", "original_string": "    public static <T, S extends Geometry> List<Node<T, S>> add(\n            Entry<? extends T, ? extends S> entry, NonLeaf<T, S> node) {\n        Context<T, S> context = node.context();\n        List<Node<T, S>> children = node.children();\n        final Node<T, S> child = context.selector().select(entry.geometry().mbr(), children);\n        List<Node<T, S>> list = child.add(entry);\n        List<? extends Node<T, S>> children2 = Util.replace(children, child, list);\n        if (children2.size() <= context.maxChildren())\n            return Collections.singletonList(\n                    (Node<T, S>) context.factory().createNonLeaf(children2, context));\n        else {\n            ListPair<? extends Node<T, S>> pair = context.splitter().split(children2,\n                    context.minChildren());\n            return makeNonLeaves(pair, context);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java", "class_name": "NonLeafHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java.NonLeafHelper", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "List<Node<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java.NonLeafHelper.[List<Node<T, S>>]makeNonLeaves(ListPair<? extends Node<T, S>>,Context<T, S>)", "name": "makeNonLeaves", "arg_nums": 2, "params": [{"name": "pair", "type": "ListPair<? extends Node<T, S>>"}, {"name": "context", "type": "Context<T, S>"}], "return_type": "List<Node<T, S>>", "signature": "private static <T, S extends Geometry> List<Node<T, S>> makeNonLeaves(\n            ListPair<? extends Node<T, S>> pair, Context<T, S> context)", "original_string": "    private static <T, S extends Geometry> List<Node<T, S>> makeNonLeaves(\n            ListPair<? extends Node<T, S>> pair, Context<T, S> context) {\n        List<Node<T, S>> list = new ArrayList<Node<T, S>>();\n        list.add(context.factory().createNonLeaf(pair.group1().list(), context));\n        list.add(context.factory().createNonLeaf(pair.group2().list(), context));\n        return list;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java", "class_name": "NonLeafHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java.NonLeafHelper", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "List<Node<T, S>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java.NonLeafHelper.[NodeAndEntries<T, S>]delete(Entry<? extends T, ? extends S>,boolean,NonLeaf<T, S>)", "name": "delete", "arg_nums": 3, "params": [{"name": "entry", "type": "Entry<? extends T, ? extends S>"}, {"name": "all", "type": "boolean"}, {"name": "node", "type": "NonLeaf<T, S>"}], "return_type": "NodeAndEntries<T, S>", "signature": "public static <T, S extends Geometry> NodeAndEntries<T, S> delete(\n            Entry<? extends T, ? extends S> entry, boolean all, NonLeaf<T, S> node)", "original_string": "    public static <T, S extends Geometry> NodeAndEntries<T, S> delete(\n            Entry<? extends T, ? extends S> entry, boolean all, NonLeaf<T, S> node) {\n        // the result of performing a delete of the given entry from this node\n        // will be that zero or more entries will be needed to be added back to\n        // the root of the tree (because num entries of their node fell below\n        // minChildren),\n        // zero or more children will need to be removed from this node,\n        // zero or more nodes to be added as children to this node(because\n        // entries have been deleted from them and they still have enough\n        // members to be active)\n        List<Entry<T, S>> addTheseEntries = new ArrayList<Entry<T, S>>();\n        List<Node<T, S>> removeTheseNodes = new ArrayList<Node<T, S>>();\n        List<Node<T, S>> addTheseNodes = new ArrayList<Node<T, S>>();\n        int countDeleted = 0;\n        List<? extends Node<T, S>> children = node.children();\n        for (final Node<T, S> child : children) {\n            if (entry.geometry().intersects(child.geometry().mbr())) {\n                final NodeAndEntries<T, S> result = child.delete(entry, all);\n                if (result.node().isPresent()) {\n                    if (result.node().get() != child) {\n                        // deletion occurred and child is above minChildren so\n                        // we update it\n                        addTheseNodes.add(result.node().get());\n                        removeTheseNodes.add(child);\n                        addTheseEntries.addAll(result.entriesToAdd());\n                        countDeleted += result.countDeleted();\n                        if (!all)\n                            break;\n                    }\n                    // else nothing was deleted from that child\n                } else {\n                    // deletion occurred and brought child below minChildren\n                    // so we redistribute its entries\n                    removeTheseNodes.add(child);\n                    addTheseEntries.addAll(result.entriesToAdd());\n                    countDeleted += result.countDeleted();\n                    if (!all)\n                        break;\n                }\n            }\n        }\n        if (removeTheseNodes.isEmpty())\n            return new NodeAndEntries<>(of(node), Collections.emptyList(), 0);\n        else {\n            List<Node<T, S>> nodes = Util.remove(children, removeTheseNodes);\n            nodes.addAll(addTheseNodes);\n            if (nodes.isEmpty())\n                return new NodeAndEntries<>(Optional.empty(), addTheseEntries,\n                        countDeleted);\n            else {\n                NonLeaf<T, S> nd = node.context().factory().createNonLeaf(nodes, node.context());\n                return new NodeAndEntries<>(of(nd), addTheseEntries, countDeleted);\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java", "class_name": "NonLeafHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/NonLeafHelper.java.NonLeafHelper", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "NodeAndEntries<T, S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java.EntryDefault.[]EntryDefault(T,S)", "name": "EntryDefault", "arg_nums": 2, "params": [{"name": "value", "type": "T"}, {"name": "geometry", "type": "S"}], "return_type": "", "signature": "public EntryDefault(T value, S geometry)", "original_string": "    public EntryDefault(T value, S geometry) {\n        Preconditions.checkNotNull(geometry);\n        this.value = value;\n        this.geometry = geometry;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java", "class_name": "EntryDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java.EntryDefault", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor.\n\n@param value\n           the value of the entry\n@param geometry\n           the geometry of the value\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java.EntryDefault.[Entry<T, S>]entry(T,S)", "name": "entry", "arg_nums": 2, "params": [{"name": "value", "type": "T"}, {"name": "geometry", "type": "S"}], "return_type": "Entry<T, S>", "signature": "public static <T, S extends Geometry> Entry<T, S> entry(T value, S geometry)", "original_string": "    public static <T, S extends Geometry> Entry<T, S> entry(T value, S geometry) {\n        return new EntryDefault<T, S>(value, geometry);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java", "class_name": "EntryDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java.EntryDefault", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Entry<T, S>", "classes": []}, "docstring": "\nFactory method.\n\n@param <T>\n           type of value\n@param <S>\n           type of geometry\n@param value\n           object being given a spatial context\n@param geometry\n           geometry associated with the value\n@return entry wrapping value and associated geometry\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java.EntryDefault.[T]value()", "name": "value", "arg_nums": 0, "params": [], "return_type": "T", "signature": "@Override\n    public T value()", "original_string": "    @Override\n    public T value() {\n        return value;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java", "class_name": "EntryDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java.EntryDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nReturns the value wrapped by this {@link EntryDefault}.\n\n@return the entry value\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java.EntryDefault.[S]geometry()", "name": "geometry", "arg_nums": 0, "params": [], "return_type": "S", "signature": "@Override\n    public S geometry()", "original_string": "    @Override\n    public S geometry() {\n        return geometry;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java", "class_name": "EntryDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java.EntryDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "S", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java.EntryDefault.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        String builder = \"Entry [value=\" + value + \", geometry=\" + geometry + \"]\";\n        return builder;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java", "class_name": "EntryDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java.EntryDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java.EntryDefault.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        return Objects.hash(value, geometry);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java", "class_name": "EntryDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java.EntryDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java.EntryDefault.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "obj", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object obj)", "original_string": "    @Override\n    public boolean equals(Object obj) {\n        @SuppressWarnings(\"rawtypes\")\n        Optional<EntryDefault> other = ObjectsHelper.asClass(obj, EntryDefault.class);\n        if (other.isPresent()) {\n            return Objects.equals(value, other.get().value)\n                    && Objects.equals(geometry, other.get().geometry);\n        } else\n            return false;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java", "class_name": "EntryDefault", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/EntryDefault.java.EntryDefault", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java.RectangleUtil.[]RectangleUtil()", "name": "RectangleUtil", "arg_nums": 0, "params": [], "return_type": "", "signature": "private RectangleUtil()", "original_string": "    private RectangleUtil() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java", "class_name": "RectangleUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java.RectangleUtil", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java.RectangleUtil.[boolean]rectangleIntersectsLine(double,double,double,double,double,double,double,double)", "name": "rectangleIntersectsLine", "arg_nums": 8, "params": [{"name": "rectX", "type": "double"}, {"name": "rectY", "type": "double"}, {"name": "rectWidth", "type": "double"}, {"name": "rectHeight", "type": "double"}, {"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "boolean", "signature": "public static boolean rectangleIntersectsLine(double rectX, double rectY, double rectWidth, double rectHeight,\n            double x1, double y1, double x2, double y2)", "original_string": "    public static boolean rectangleIntersectsLine(double rectX, double rectY, double rectWidth, double rectHeight,\n            double x1, double y1, double x2, double y2) {\n        return _rectangleIntersectsLine(rectX, rectY, rectWidth, rectHeight, x1, y1, x2, y2)\n                || Line2D.linesIntersect(rectX, rectY, rectX + rectWidth, rectY + rectHeight, x1, y1, x2, y2);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java", "class_name": "RectangleUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java.RectangleUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java.RectangleUtil.[boolean]_rectangleIntersectsLine(double,double,double,double,double,double,double,double)", "name": "_rectangleIntersectsLine", "arg_nums": 8, "params": [{"name": "rectX", "type": "double"}, {"name": "rectY", "type": "double"}, {"name": "rectWidth", "type": "double"}, {"name": "rectHeight", "type": "double"}, {"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "boolean", "signature": "private static boolean _rectangleIntersectsLine(double rectX, double rectY, double rectWidth,\n            double rectHeight, double x1, double y1, double x2, double y2)", "original_string": "    private static boolean _rectangleIntersectsLine(double rectX, double rectY, double rectWidth,\n            double rectHeight, double x1, double y1, double x2, double y2) {\n        if (rectangleCornerOnSegment(rectX, rectY, rectWidth, rectHeight, x1, y1, x2, y2)) {\n            return true;\n        }\n        int out1, out2;\n        if ((out2 = outcode(rectX, rectY, rectWidth, rectHeight, x2, y2)) == 0) {\n            return true;\n        }\n        while ((out1 = outcode(rectX, rectY, rectWidth, rectHeight, x1, y1)) != 0) {\n            if ((out1 & out2) != 0) {\n                return false;\n            }\n            if ((out1 & (OUT_LEFT | OUT_RIGHT)) != 0) {\n                double x = rectX;\n                if ((out1 & OUT_RIGHT) != 0) {\n                    x += rectWidth;\n                }\n                y1 = y1 + (x - x1) * (y2 - y1) / (x2 - x1);\n                x1 = x;\n            } else {\n                double y = rectY;\n                if ((out1 & OUT_BOTTOM) != 0) {\n                    y += rectHeight;\n                }\n                x1 = x1 + (y - y1) * (x2 - x1) / (y2 - y1);\n                y1 = y;\n            }\n        }\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java", "class_name": "RectangleUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java.RectangleUtil", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java.RectangleUtil.[boolean]rectangleCornerOnSegment(double,double,double,double,double,double,double,double)", "name": "rectangleCornerOnSegment", "arg_nums": 8, "params": [{"name": "rectX", "type": "double"}, {"name": "rectY", "type": "double"}, {"name": "rectWidth", "type": "double"}, {"name": "rectHeight", "type": "double"}, {"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "boolean", "signature": "private static boolean rectangleCornerOnSegment(double rectX, double rectY, double rectWidth,\n            double rectHeight, double x1, double y1, double x2, double y2)", "original_string": "    private static boolean rectangleCornerOnSegment(double rectX, double rectY, double rectWidth,\n            double rectHeight, double x1, double y1, double x2, double y2) {\n        if (pointOnSegment(rectX, rectY, x1, y1, x2, y2)) {\n            return true;\n        } else if (pointOnSegment(rectX + rectWidth, rectY, x1, y1, x2, y2)) {\n            return true;\n        } else if (pointOnSegment(rectX, rectY + rectHeight, x1, y1, x2, y2)) {\n            return true;\n        } else if (pointOnSegment(rectX + rectWidth, rectY + rectHeight, x1, y1, x2, y2)) {\n            return true;\n        } else {\n            return false;\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java", "class_name": "RectangleUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java.RectangleUtil", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java.RectangleUtil.[boolean]pointOnSegment(double,double,double,double,double,double)", "name": "pointOnSegment", "arg_nums": 6, "params": [{"name": "x", "type": "double"}, {"name": "y", "type": "double"}, {"name": "x1", "type": "double"}, {"name": "y1", "type": "double"}, {"name": "x2", "type": "double"}, {"name": "y2", "type": "double"}], "return_type": "boolean", "signature": "private static boolean pointOnSegment(double x, double y, double x1, double y1, double x2,\n            double y2)", "original_string": "    private static boolean pointOnSegment(double x, double y, double x1, double y1, double x2,\n            double y2) {\n        if (x < x1 || x > x2 || y < y1 || y > y2) {\n            return false;\n        } else {\n            double v = (y2 - y1) * (x - x1) - (x2 - x1) * (y - y1);\n            return Math.abs(v) < PRECISION;\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java", "class_name": "RectangleUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java.RectangleUtil", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java.RectangleUtil.[int]outcode(double,double,double,double,double,double)", "name": "outcode", "arg_nums": 6, "params": [{"name": "rectX", "type": "double"}, {"name": "rectY", "type": "double"}, {"name": "rectWidth", "type": "double"}, {"name": "rectHeight", "type": "double"}, {"name": "x", "type": "double"}, {"name": "y", "type": "double"}], "return_type": "int", "signature": "private static int outcode(double rectX, double rectY, double rectWidth, double rectHeight,\n            double x, double y)", "original_string": "    private static int outcode(double rectX, double rectY, double rectWidth, double rectHeight,\n            double x, double y) {\n        int out = 0;\n        if (rectWidth <= 0) {\n            out |= OUT_LEFT | OUT_RIGHT;\n        } else if (x < rectX) {\n            out |= OUT_LEFT;\n        } else if (x > rectX + rectWidth) {\n            out |= OUT_RIGHT;\n        }\n        if (rectHeight <= 0) {\n            out |= OUT_TOP | OUT_BOTTOM;\n        } else if (y < rectY) {\n            out |= OUT_TOP;\n        } else if (y > rectY + rectHeight) {\n            out |= OUT_BOTTOM;\n        }\n        return out;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java", "class_name": "RectangleUtil", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/RectangleUtil.java.RectangleUtil", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/operators/OperatorBoundedPriorityQueue.java.OperatorBoundedPriorityQueue.[]OperatorBoundedPriorityQueue(int,Comparator<? super T>)", "name": "OperatorBoundedPriorityQueue", "arg_nums": 2, "params": [{"name": "maximumSize", "type": "int"}, {"name": "comparator", "type": "Comparator<? super T>"}], "return_type": "", "signature": "public OperatorBoundedPriorityQueue(int maximumSize, Comparator<? super T> comparator)", "original_string": "    public OperatorBoundedPriorityQueue(int maximumSize, Comparator<? super T> comparator) {\n        this.maximumSize = maximumSize;\n        this.comparator = comparator;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/operators/OperatorBoundedPriorityQueue.java", "class_name": "OperatorBoundedPriorityQueue", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/operators/OperatorBoundedPriorityQueue.java.OperatorBoundedPriorityQueue", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/operators/OperatorBoundedPriorityQueue.java.OperatorBoundedPriorityQueue.[Subscriber<? super T>]call(Subscriber<? super T>)", "name": "call", "arg_nums": 1, "params": [{"name": "child", "type": "Subscriber<? super T>"}], "return_type": "Subscriber<? super T>", "signature": "@Override\n    public Subscriber<? super T> call(final Subscriber<? super T> child)", "original_string": "    @Override\n    public Subscriber<? super T> call(final Subscriber<? super T> child) {\n        final BoundedPriorityQueue<T> q = new BoundedPriorityQueue<T>(maximumSize, comparator);\n        return new Subscriber<T>(child) {\n\n            @Override\n            public void onStart() {\n                request(Long.MAX_VALUE);\n            }\n\n            @Override\n            public void onCompleted() {\n                List<T> list = q.asOrderedList();\n                for (T t:list) {\n                    if (isUnsubscribed()) {\n                        return;\n                    } else {\n                        child.onNext(t);\n                    }\n                }\n                if (!isUnsubscribed()) {\n                    child.onCompleted();\n                }\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                if (!isUnsubscribed())\n                    child.onError(t);\n            }\n\n            @Override\n            public void onNext(T t) {\n                if (!isUnsubscribed())\n                    q.add(t);\n            }\n        };\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/operators/OperatorBoundedPriorityQueue.java", "class_name": "OperatorBoundedPriorityQueue", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/operators/OperatorBoundedPriorityQueue.java.OperatorBoundedPriorityQueue", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Subscriber<? super T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper.java.ObjectsHelper.[]ObjectsHelper()", "name": "ObjectsHelper", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ObjectsHelper()", "original_string": "    private ObjectsHelper() {\n        // prevent instantiation\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper.java", "class_name": "ObjectsHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper.java.ObjectsHelper", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper.java.ObjectsHelper.[void]instantiateForTestCoveragePurposesOnly()", "name": "instantiateForTestCoveragePurposesOnly", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@VisibleForTesting\n    static void instantiateForTestCoveragePurposesOnly()", "original_string": "    @VisibleForTesting\n    static void instantiateForTestCoveragePurposesOnly() {\n        new ObjectsHelper();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper.java", "class_name": "ObjectsHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper.java.ObjectsHelper", "attributes": {"modifiers": "@VisibleForTesting\n    static", "marker_annotations": ["@VisibleForTesting"], "non_marker_annotations": ["static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper.java.ObjectsHelper.[Optional<T>]asClass(Object,Class<T>)", "name": "asClass", "arg_nums": 2, "params": [{"name": "object", "type": "Object"}, {"name": "cls", "type": "Class<T>"}], "return_type": "Optional<T>", "signature": "@SuppressWarnings(\"unchecked\")\n    public static <T> Optional<T> asClass(Object object, Class<T> cls)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    public static <T> Optional<T> asClass(Object object, Class<T> cls) {\n        if (object == null) {\n            return Optional.empty();\n        } else if (object.getClass() != cls) {\n            return Optional.empty();\n        } else {\n            return Optional.of((T) object);\n        }\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper.java", "class_name": "ObjectsHelper", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper.java.ObjectsHelper", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    public static", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public", "static"], "comments": [], "return_type": "Optional<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/Pair.java.Pair.[]Pair(T,T)", "name": "Pair", "arg_nums": 2, "params": [{"name": "value1", "type": "T"}, {"name": "value2", "type": "T"}], "return_type": "", "signature": "public Pair(T value1, T value2)", "original_string": "    public Pair(T value1, T value2) {\n        this.value1 = value1;\n        this.value2 = value2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/Pair.java", "class_name": "Pair", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/Pair.java.Pair", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/Pair.java.Pair.[T]value1()", "name": "value1", "arg_nums": 0, "params": [], "return_type": "T", "signature": "public T value1()", "original_string": "    public T value1() {\n        return value1;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/Pair.java", "class_name": "Pair", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/Pair.java.Pair", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/Pair.java.Pair.[T]value2()", "name": "value2", "arg_nums": 0, "params": [], "return_type": "T", "signature": "public T value2()", "original_string": "    public T value2() {\n        return value2;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/Pair.java", "class_name": "Pair", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/Pair.java.Pair", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack.[]ImmutableStack(T,ImmutableStack<T>)", "name": "ImmutableStack", "arg_nums": 2, "params": [{"name": "head", "type": "T"}, {"name": "tail", "type": "ImmutableStack<T>"}], "return_type": "", "signature": "public ImmutableStack(final T head, final ImmutableStack<T> tail)", "original_string": "    public ImmutableStack(final T head, final ImmutableStack<T> tail) {\n        this(of(head), of(tail));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java", "class_name": "ImmutableStack", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack.[]ImmutableStack(Optional<T>,Optional<ImmutableStack<T>>)", "name": "ImmutableStack", "arg_nums": 2, "params": [{"name": "head", "type": "Optional<T>"}, {"name": "tail", "type": "Optional<ImmutableStack<T>>"}], "return_type": "", "signature": "private ImmutableStack(Optional<T> head, Optional<ImmutableStack<T>> tail)", "original_string": "    private ImmutableStack(Optional<T> head, Optional<ImmutableStack<T>> tail) {\n        this.head = head;\n        this.tail = tail;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java", "class_name": "ImmutableStack", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack.[ImmutableStack<T>]create(T)", "name": "create", "arg_nums": 1, "params": [{"name": "t", "type": "T"}], "return_type": "ImmutableStack<T>", "signature": "public static <T> ImmutableStack<T> create(T t)", "original_string": "    public static <T> ImmutableStack<T> create(T t) {\n        return new ImmutableStack<>(of(t), of(ImmutableStack.empty()));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java", "class_name": "ImmutableStack", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ImmutableStack<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack.[]ImmutableStack()", "name": "ImmutableStack", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ImmutableStack()", "original_string": "    public ImmutableStack() {\n        this(Optional.empty(), Optional.empty());\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java", "class_name": "ImmutableStack", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack.[ImmutableStack<S>]empty()", "name": "empty", "arg_nums": 0, "params": [], "return_type": "ImmutableStack<S>", "signature": "@SuppressWarnings(\"unchecked\")\n    public static <S> ImmutableStack<S> empty()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    public static <S> ImmutableStack<S> empty() {\n        return (ImmutableStack<S>) EMPTY;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java", "class_name": "ImmutableStack", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    public static", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public", "static"], "comments": [], "return_type": "ImmutableStack<S>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack.[boolean]isEmpty()", "name": "isEmpty", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isEmpty()", "original_string": "    public boolean isEmpty() {\n        return !head.isPresent();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java", "class_name": "ImmutableStack", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack.[T]peek()", "name": "peek", "arg_nums": 0, "params": [], "return_type": "T", "signature": "public T peek()", "original_string": "    public T peek() {\n        // if (isEmpty())\n        // throw new RuntimeException(\"cannot peek on empty stack\");\n        // else\n        return this.head.get();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java", "class_name": "ImmutableStack", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack.[ImmutableStack<T>]pop()", "name": "pop", "arg_nums": 0, "params": [], "return_type": "ImmutableStack<T>", "signature": "public ImmutableStack<T> pop()", "original_string": "    public ImmutableStack<T> pop() {\n        // if (isEmpty())\n        // throw new RuntimeException(\"cannot pop on empty stack\");\n        // else\n        return this.tail.get();\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java", "class_name": "ImmutableStack", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ImmutableStack<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack.[ImmutableStack<T>]push(T)", "name": "push", "arg_nums": 1, "params": [{"name": "value", "type": "T"}], "return_type": "ImmutableStack<T>", "signature": "public ImmutableStack<T> push(T value)", "original_string": "    public ImmutableStack<T> push(T value) {\n        return new ImmutableStack<T>(value, this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java", "class_name": "ImmutableStack", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ImmutableStack<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack.[Iterator<T>]iterator()", "name": "iterator", "arg_nums": 0, "params": [], "return_type": "Iterator<T>", "signature": "@Override\n    public Iterator<T> iterator()", "original_string": "    @Override\n    public Iterator<T> iterator() {\n        return new StackIterator<T>(this);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java", "class_name": "ImmutableStack", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/ImmutableStack.java.ImmutableStack", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Iterator<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java.BoundedPriorityQueue.[]BoundedPriorityQueue(int,Comparator<? super T>)", "name": "BoundedPriorityQueue", "arg_nums": 2, "params": [{"name": "maxSize", "type": "int"}, {"name": "comparator", "type": "Comparator<? super T>"}], "return_type": "", "signature": "public BoundedPriorityQueue(final int maxSize, final Comparator<? super T> comparator)", "original_string": "    public BoundedPriorityQueue(final int maxSize, final Comparator<? super T> comparator) {\n        Preconditions.checkArgument(maxSize > 0, \"maxSize must be > 0\");\n        Preconditions.checkNotNull(comparator, \"comparator cannot be null\");\n        this.queue = new PriorityQueue<T>(reverse(comparator));\n        this.comparator = comparator;\n        this.maxSize = maxSize;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java", "class_name": "BoundedPriorityQueue", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java.BoundedPriorityQueue", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a {@link BoundedPriorityQueue} with the specified\n{@code maxSize} and {@code comparator}.\n\n@param maxSize\n           - The maximum size the queue can reach, must be a positive\n           integer.\n@param comparator\n           - The comparator to be used to compare the elements in the\n           queue, must be non-null.\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java.BoundedPriorityQueue.[Comparator<T>]reverse(Comparator<T>)", "name": "reverse", "arg_nums": 1, "params": [{"name": "comparator", "type": "Comparator<T>"}], "return_type": "Comparator<T>", "signature": "private static <T> Comparator<T> reverse(final Comparator<T> comparator)", "original_string": "    private static <T> Comparator<T> reverse(final Comparator<T> comparator) {\n        return (o1, o2) -> comparator.compare(o2, o1);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java", "class_name": "BoundedPriorityQueue", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java.BoundedPriorityQueue", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Comparator<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java.BoundedPriorityQueue.[BoundedPriorityQueue<T>]create(int,Comparator<? super T>)", "name": "create", "arg_nums": 2, "params": [{"name": "maxSize", "type": "int"}, {"name": "comparator", "type": "Comparator<? super T>"}], "return_type": "BoundedPriorityQueue<T>", "signature": "public static <T> BoundedPriorityQueue<T> create(final int maxSize,\n            final Comparator<? super T> comparator)", "original_string": "    public static <T> BoundedPriorityQueue<T> create(final int maxSize,\n            final Comparator<? super T> comparator) {\n        return new BoundedPriorityQueue<T>(maxSize, comparator);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java", "class_name": "BoundedPriorityQueue", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java.BoundedPriorityQueue", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "BoundedPriorityQueue<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java.BoundedPriorityQueue.[void]add(T)", "name": "add", "arg_nums": 1, "params": [{"name": "t", "type": "T"}], "return_type": "void", "signature": "public void add(final T t)", "original_string": "    public void add(final T t) {\n        if (t == null) {\n            throw new NullPointerException(\"cannot add null to the queue\");\n        }\n        if (queue.size() >= maxSize) {\n            final T maxElement = queue.peek();\n            if (comparator.compare(maxElement, t) < 1) {\n                return;\n            } else {\n                queue.poll();\n            }\n        }\n        queue.add(t);\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java", "class_name": "BoundedPriorityQueue", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java.BoundedPriorityQueue", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdds an element to the queue. If the queue contains {@code maxSize}\nelements, {@code e} will be compared to the lowest element in the queue\nusing {@code comparator}. If {@code e} is greater than or equal to the\nlowest element, that element will be removed and {@code e} will be added\ninstead. Otherwise, the queue will not be modified and {@code e} will not\nbe added.\n\n@param t\n           - Element to be added, must be non-null.\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java.BoundedPriorityQueue.[List<T>]asList()", "name": "asList", "arg_nums": 0, "params": [], "return_type": "List<T>", "signature": "public List<T> asList()", "original_string": "    public List<T> asList() {\n        return Collections.unmodifiableList(new ArrayList<>(queue));\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java", "class_name": "BoundedPriorityQueue", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java.BoundedPriorityQueue", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": "\n@return Returns a view of the queue as a\n        {@link Collections#unmodifiableList(java.util.List)}\n        unmodifiableList sorted in reverse order.\n"}, {"uris": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java.BoundedPriorityQueue.[List<T>]asOrderedList()", "name": "asOrderedList", "arg_nums": 0, "params": [], "return_type": "List<T>", "signature": "public List<T> asOrderedList()", "original_string": "    public List<T> asOrderedList() {\n        List<T> list = new ArrayList<>(queue);\n        list.sort(comparator);\n        return list;\n    }", "default_arguments": null, "file": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java", "class_name": "BoundedPriorityQueue", "class_uri": "src/main/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue.java.BoundedPriorityQueue", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren004_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren004_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOfGreekDataPointsMaxChildren004_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren004_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren004_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren004_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren004_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOfGreekDataPointsMaxChildren004_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren004_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren004_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren004_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren004_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeSearchOfGreekDataPointsMaxChildren004_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren004\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren004_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren004_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren004_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren004_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeSearchOfGreekDataPointsMaxChildren004_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren004\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren004_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren004_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren032_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren032_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren032(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOf1000PointsMaxChildren032_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren032(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren032_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren032_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren032(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren032_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren032_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren032(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOf1000PointsMaxChildren032_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren032(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren032_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren032_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren032(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren032_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren032_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren032(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeSearchOf1000PointsMaxChildren032_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren032(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren032\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren032_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren032_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren032(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren032_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren032_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeSearchOf1000PointsMaxChildren032_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren032\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren032_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren032_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren032(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren004_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren004_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren004(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOf1000PointsMaxChildren004_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren004(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren004_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren004_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren004(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren004_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren004_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren004(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOf1000PointsMaxChildren004_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren004(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren004_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren004_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren004(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren004_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren004_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren004(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeSearchOf1000PointsMaxChildren004_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren004(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren004\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren004_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren004_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren004(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren004_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren004_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeSearchOf1000PointsMaxChildren004_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren004\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren004_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren004_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren004(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren128_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren128_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOfGreekDataPointsMaxChildren128_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren128_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren128_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren128_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren128_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOfGreekDataPointsMaxChildren128_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren128_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren128_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren128_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren128_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeSearchOfGreekDataPointsMaxChildren128_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren128\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren128_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren128_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren128_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren128_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeSearchOfGreekDataPointsMaxChildren128_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren128\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren128_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren128_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren032_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren032_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOfGreekDataPointsMaxChildren032_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren032_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren032_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren032_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren032_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOfGreekDataPointsMaxChildren032_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren032_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren032_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren032_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren032_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeSearchOfGreekDataPointsMaxChildren032_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren032\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren032_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren032_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren032_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren032_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeSearchOfGreekDataPointsMaxChildren032_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren032\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren032_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren032_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren128_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren128_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOfGreekDataPointsMaxChildren128_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren128_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren128_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren128_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren128_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOfGreekDataPointsMaxChildren128_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren128_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren128_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren128_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren128_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeSearchOfGreekDataPointsMaxChildren128_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren128\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren128_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren128_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren128_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren128_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeSearchOfGreekDataPointsMaxChildren128_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren128\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren128_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren128_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren128(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren128_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren128());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren128());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren128());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren128());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren128());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren128());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren128());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren128());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren128\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren128());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren128\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren128());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffersBackpressure_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren004_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren004_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOfGreekDataPointsMaxChildren004_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren004_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren004_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren004_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren004_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOfGreekDataPointsMaxChildren004_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren004_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren004_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren004_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren004_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeSearchOfGreekDataPointsMaxChildren004_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren004\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren004_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren004_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren004_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren004_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeSearchOfGreekDataPointsMaxChildren004_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren004\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren004_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren004_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren004(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren004_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren032_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren032_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOfGreekDataPointsMaxChildren032_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren032_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren032_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren032_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren032_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOfGreekDataPointsMaxChildren032_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren032_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren032_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren032_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren032_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeSearchOfGreekDataPointsMaxChildren032_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren032\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren032_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren032_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren032_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren032_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeSearchOfGreekDataPointsMaxChildren032_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren032\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren032_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren032_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren032(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren032_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest.[BenchmarkTaskResult]starRTreeCreation010_Throughput(InfraControl,ThreadParams)", "name": "starRTreeCreation010_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult starRTreeCreation010_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult starRTreeCreation010_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.starRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            starRTreeCreation010_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.starRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"starRTreeCreation010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_starRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest.[void]starRTreeCreation010_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "starRTreeCreation010_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void starRTreeCreation010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void starRTreeCreation010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.starRTreeCreation010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_starRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest.[BenchmarkTaskResult]starRTreeCreation010_AverageTime(InfraControl,ThreadParams)", "name": "starRTreeCreation010_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult starRTreeCreation010_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult starRTreeCreation010_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.starRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            starRTreeCreation010_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.starRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"starRTreeCreation010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_starRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest.[void]starRTreeCreation010_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "starRTreeCreation010_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void starRTreeCreation010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void starRTreeCreation010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.starRTreeCreation010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_starRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest.[BenchmarkTaskResult]starRTreeCreation010_SampleTime(InfraControl,ThreadParams)", "name": "starRTreeCreation010_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult starRTreeCreation010_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult starRTreeCreation010_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.starRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            starRTreeCreation010_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.starRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"starRTreeCreation010\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_starRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest.[void]starRTreeCreation010_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "starRTreeCreation010_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void starRTreeCreation010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void starRTreeCreation010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.starRTreeCreation010());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_starRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest.[BenchmarkTaskResult]starRTreeCreation010_SingleShotTime(InfraControl,ThreadParams)", "name": "starRTreeCreation010_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult starRTreeCreation010_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult starRTreeCreation010_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            starRTreeCreation010_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"starRTreeCreation010\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_starRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest.[void]starRTreeCreation010_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "starRTreeCreation010_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void starRTreeCreation010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void starRTreeCreation010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.starRTreeCreation010());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_starRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_starRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_starRTreeCreation010_jmhTest.java.BenchmarksRTree_starRTreeCreation010_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.[BenchmarkTaskResult]bulkLoadingRTreeCreation010_Throughput(InfraControl,ThreadParams)", "name": "bulkLoadingRTreeCreation010_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult bulkLoadingRTreeCreation010_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult bulkLoadingRTreeCreation010_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.bulkLoadingRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            bulkLoadingRTreeCreation010_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.bulkLoadingRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"bulkLoadingRTreeCreation010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.[void]bulkLoadingRTreeCreation010_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "bulkLoadingRTreeCreation010_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void bulkLoadingRTreeCreation010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void bulkLoadingRTreeCreation010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.bulkLoadingRTreeCreation010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.[BenchmarkTaskResult]bulkLoadingRTreeCreation010_AverageTime(InfraControl,ThreadParams)", "name": "bulkLoadingRTreeCreation010_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult bulkLoadingRTreeCreation010_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult bulkLoadingRTreeCreation010_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.bulkLoadingRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            bulkLoadingRTreeCreation010_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.bulkLoadingRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"bulkLoadingRTreeCreation010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.[void]bulkLoadingRTreeCreation010_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "bulkLoadingRTreeCreation010_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void bulkLoadingRTreeCreation010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void bulkLoadingRTreeCreation010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.bulkLoadingRTreeCreation010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.[BenchmarkTaskResult]bulkLoadingRTreeCreation010_SampleTime(InfraControl,ThreadParams)", "name": "bulkLoadingRTreeCreation010_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult bulkLoadingRTreeCreation010_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult bulkLoadingRTreeCreation010_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.bulkLoadingRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            bulkLoadingRTreeCreation010_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.bulkLoadingRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"bulkLoadingRTreeCreation010\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.[void]bulkLoadingRTreeCreation010_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "bulkLoadingRTreeCreation010_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void bulkLoadingRTreeCreation010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void bulkLoadingRTreeCreation010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.bulkLoadingRTreeCreation010());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.[BenchmarkTaskResult]bulkLoadingRTreeCreation010_SingleShotTime(InfraControl,ThreadParams)", "name": "bulkLoadingRTreeCreation010_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult bulkLoadingRTreeCreation010_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult bulkLoadingRTreeCreation010_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            bulkLoadingRTreeCreation010_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"bulkLoadingRTreeCreation010\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.[void]bulkLoadingRTreeCreation010_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "bulkLoadingRTreeCreation010_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void bulkLoadingRTreeCreation010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void bulkLoadingRTreeCreation010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.bulkLoadingRTreeCreation010());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingRTreeCreation010_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren010_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren010_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOfGreekDataPointsMaxChildren010_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren010_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren010_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren010_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren010_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOfGreekDataPointsMaxChildren010_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren010_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren010_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren010_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren010_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeSearchOfGreekDataPointsMaxChildren010_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren010\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren010_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren010_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOfGreekDataPointsMaxChildren010_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren010_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOfGreekDataPointsMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeSearchOfGreekDataPointsMaxChildren010_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeSearchOfGreekDataPointsMaxChildren010\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[void]defaultRTreeSearchOfGreekDataPointsMaxChildren010_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOfGreekDataPointsMaxChildren010_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOfGreekDataPointsMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOfGreekDataPointsMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.defaultRTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren004_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren004_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren004(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOf1000PointsMaxChildren004_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren004(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren004_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren004_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren004(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren004_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren004_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren004(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOf1000PointsMaxChildren004_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren004(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren004_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren004_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren004(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren004_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren004_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren004(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeSearchOf1000PointsMaxChildren004_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren004(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren004\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren004_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren004_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren004(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren004_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren004_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeSearchOf1000PointsMaxChildren004_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren004\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren004_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren004_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren004(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren004_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren032());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren032());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren032());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren032());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren032());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren032());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren032());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren032());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren032\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren032());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren032\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren032());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010FlatBuffers_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest.[BenchmarkTaskResult]searchNearestGreek_Throughput(InfraControl,ThreadParams)", "name": "searchNearestGreek_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult searchNearestGreek_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult searchNearestGreek_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.searchNearestGreek(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            searchNearestGreek_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.searchNearestGreek(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"searchNearestGreek\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java", "class_name": "BenchmarksRTree_searchNearestGreek_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest.[void]searchNearestGreek_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "searchNearestGreek_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void searchNearestGreek_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void searchNearestGreek_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.searchNearestGreek(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java", "class_name": "BenchmarksRTree_searchNearestGreek_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest.[BenchmarkTaskResult]searchNearestGreek_AverageTime(InfraControl,ThreadParams)", "name": "searchNearestGreek_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult searchNearestGreek_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult searchNearestGreek_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.searchNearestGreek(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            searchNearestGreek_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.searchNearestGreek(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"searchNearestGreek\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java", "class_name": "BenchmarksRTree_searchNearestGreek_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest.[void]searchNearestGreek_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "searchNearestGreek_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void searchNearestGreek_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void searchNearestGreek_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.searchNearestGreek(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java", "class_name": "BenchmarksRTree_searchNearestGreek_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest.[BenchmarkTaskResult]searchNearestGreek_SampleTime(InfraControl,ThreadParams)", "name": "searchNearestGreek_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult searchNearestGreek_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult searchNearestGreek_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.searchNearestGreek(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            searchNearestGreek_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.searchNearestGreek(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"searchNearestGreek\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java", "class_name": "BenchmarksRTree_searchNearestGreek_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest.[void]searchNearestGreek_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "searchNearestGreek_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void searchNearestGreek_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void searchNearestGreek_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.searchNearestGreek(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java", "class_name": "BenchmarksRTree_searchNearestGreek_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest.[BenchmarkTaskResult]searchNearestGreek_SingleShotTime(InfraControl,ThreadParams)", "name": "searchNearestGreek_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult searchNearestGreek_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult searchNearestGreek_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            searchNearestGreek_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"searchNearestGreek\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java", "class_name": "BenchmarksRTree_searchNearestGreek_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest.[void]searchNearestGreek_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "searchNearestGreek_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void searchNearestGreek_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void searchNearestGreek_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.searchNearestGreek(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java", "class_name": "BenchmarksRTree_searchNearestGreek_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java", "class_name": "BenchmarksRTree_searchNearestGreek_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_searchNearestGreek_jmhTest.java.BenchmarksRTree_searchNearestGreek_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010();\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010();\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.[void]rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010();\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010();\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010();\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.[void]rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010();\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010();\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010();\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.[void]rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010();\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.[void]rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010();\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest.java.BenchmarksRTree_rStarTreeDeleteOneEveryOccurrenceFromGreekDataChildren010_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOfGreekDataPointsMaxChildren010_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOfGreekDataPointsMaxChildren010_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeSearchOfGreekDataPointsMaxChildren010_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeSearchOfGreekDataPointsMaxChildren010_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren032_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren032_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren032(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOf1000PointsMaxChildren032_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren032(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren032_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren032_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren032(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren032_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren032_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren032(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOf1000PointsMaxChildren032_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren032(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren032_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren032_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren032(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren032_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren032_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren032(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeSearchOf1000PointsMaxChildren032_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren032(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren032\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren032_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren032_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren032(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren032_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren032_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeSearchOf1000PointsMaxChildren032_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren032\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren032_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren032_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren032(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren032_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.[BenchmarkTaskResult]bulkLoadingFullRTreeCreation010_Throughput(InfraControl,ThreadParams)", "name": "bulkLoadingFullRTreeCreation010_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult bulkLoadingFullRTreeCreation010_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult bulkLoadingFullRTreeCreation010_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.bulkLoadingFullRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            bulkLoadingFullRTreeCreation010_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.bulkLoadingFullRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"bulkLoadingFullRTreeCreation010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.[void]bulkLoadingFullRTreeCreation010_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "bulkLoadingFullRTreeCreation010_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void bulkLoadingFullRTreeCreation010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void bulkLoadingFullRTreeCreation010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.bulkLoadingFullRTreeCreation010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.[BenchmarkTaskResult]bulkLoadingFullRTreeCreation010_AverageTime(InfraControl,ThreadParams)", "name": "bulkLoadingFullRTreeCreation010_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult bulkLoadingFullRTreeCreation010_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult bulkLoadingFullRTreeCreation010_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.bulkLoadingFullRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            bulkLoadingFullRTreeCreation010_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.bulkLoadingFullRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"bulkLoadingFullRTreeCreation010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.[void]bulkLoadingFullRTreeCreation010_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "bulkLoadingFullRTreeCreation010_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void bulkLoadingFullRTreeCreation010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void bulkLoadingFullRTreeCreation010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.bulkLoadingFullRTreeCreation010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.[BenchmarkTaskResult]bulkLoadingFullRTreeCreation010_SampleTime(InfraControl,ThreadParams)", "name": "bulkLoadingFullRTreeCreation010_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult bulkLoadingFullRTreeCreation010_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult bulkLoadingFullRTreeCreation010_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.bulkLoadingFullRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            bulkLoadingFullRTreeCreation010_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.bulkLoadingFullRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"bulkLoadingFullRTreeCreation010\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.[void]bulkLoadingFullRTreeCreation010_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "bulkLoadingFullRTreeCreation010_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void bulkLoadingFullRTreeCreation010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void bulkLoadingFullRTreeCreation010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.bulkLoadingFullRTreeCreation010());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.[BenchmarkTaskResult]bulkLoadingFullRTreeCreation010_SingleShotTime(InfraControl,ThreadParams)", "name": "bulkLoadingFullRTreeCreation010_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult bulkLoadingFullRTreeCreation010_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult bulkLoadingFullRTreeCreation010_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            bulkLoadingFullRTreeCreation010_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"bulkLoadingFullRTreeCreation010\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.[void]bulkLoadingFullRTreeCreation010_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "bulkLoadingFullRTreeCreation010_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void bulkLoadingFullRTreeCreation010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void bulkLoadingFullRTreeCreation010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.bulkLoadingFullRTreeCreation010());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest.java.BenchmarksRTree_bulkLoadingFullRTreeCreation010_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[void]defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryIntoGreekDataEntriesMaxChildren128_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.[void]rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest.java.BenchmarksRTree_rStarTreeSearchOfGreekDataPointsMaxChildren010WithBackpressure_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren010\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren010());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren010\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren010());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren010_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren004());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren004());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren004());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren004());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren004());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren004\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren004());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren004());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren004());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren004\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren004());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryInto1000EntriesMaxChildren004\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[void]rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryInto1000EntriesMaxChildren004());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryInto1000EntriesMaxChildren004_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest.[BenchmarkTaskResult]defaultRTreeCreation010_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeCreation010_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeCreation010_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeCreation010_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeCreation010_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeCreation010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest.[void]defaultRTreeCreation010_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeCreation010_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeCreation010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeCreation010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeCreation010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest.[BenchmarkTaskResult]defaultRTreeCreation010_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeCreation010_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeCreation010_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeCreation010_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeCreation010_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeCreation010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest.[void]defaultRTreeCreation010_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeCreation010_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeCreation010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeCreation010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeCreation010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest.[BenchmarkTaskResult]defaultRTreeCreation010_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeCreation010_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeCreation010_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeCreation010_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeCreation010_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeCreation010\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest.[void]defaultRTreeCreation010_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeCreation010_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeCreation010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeCreation010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeCreation010());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest.[BenchmarkTaskResult]defaultRTreeCreation010_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeCreation010_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeCreation010_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeCreation010_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeCreation010_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeCreation010\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest.[void]defaultRTreeCreation010_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeCreation010_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeCreation010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeCreation010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeCreation010());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeCreation010_jmhTest.java.BenchmarksRTree_defaultRTreeCreation010_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren128_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren128_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren128(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOf1000PointsMaxChildren128_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren128(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren128_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren128_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren128(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren128_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren128_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren128(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOf1000PointsMaxChildren128_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren128(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren128_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren128_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren128(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren128_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren128_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren128(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeSearchOf1000PointsMaxChildren128_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren128(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren128\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren128_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren128_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren128(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren128_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren128_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeSearchOf1000PointsMaxChildren128_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren128\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren128_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren128_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren128(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.[BenchmarkTaskResult]flatBufferRTreeCreation010_Throughput(InfraControl,ThreadParams)", "name": "flatBufferRTreeCreation010_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult flatBufferRTreeCreation010_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult flatBufferRTreeCreation010_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.flatBufferRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            flatBufferRTreeCreation010_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.flatBufferRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"flatBufferRTreeCreation010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.[void]flatBufferRTreeCreation010_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "flatBufferRTreeCreation010_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void flatBufferRTreeCreation010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void flatBufferRTreeCreation010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.flatBufferRTreeCreation010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.[BenchmarkTaskResult]flatBufferRTreeCreation010_AverageTime(InfraControl,ThreadParams)", "name": "flatBufferRTreeCreation010_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult flatBufferRTreeCreation010_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult flatBufferRTreeCreation010_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.flatBufferRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            flatBufferRTreeCreation010_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.flatBufferRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"flatBufferRTreeCreation010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.[void]flatBufferRTreeCreation010_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "flatBufferRTreeCreation010_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void flatBufferRTreeCreation010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void flatBufferRTreeCreation010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.flatBufferRTreeCreation010());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.[BenchmarkTaskResult]flatBufferRTreeCreation010_SampleTime(InfraControl,ThreadParams)", "name": "flatBufferRTreeCreation010_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult flatBufferRTreeCreation010_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult flatBufferRTreeCreation010_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.flatBufferRTreeCreation010());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            flatBufferRTreeCreation010_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.flatBufferRTreeCreation010());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"flatBufferRTreeCreation010\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.[void]flatBufferRTreeCreation010_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "flatBufferRTreeCreation010_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void flatBufferRTreeCreation010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void flatBufferRTreeCreation010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.flatBufferRTreeCreation010());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.[BenchmarkTaskResult]flatBufferRTreeCreation010_SingleShotTime(InfraControl,ThreadParams)", "name": "flatBufferRTreeCreation010_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult flatBufferRTreeCreation010_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult flatBufferRTreeCreation010_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            flatBufferRTreeCreation010_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"flatBufferRTreeCreation010\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.[void]flatBufferRTreeCreation010_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "flatBufferRTreeCreation010_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void flatBufferRTreeCreation010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void flatBufferRTreeCreation010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.flatBufferRTreeCreation010());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java", "class_name": "BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_flatBufferRTreeCreation010_jmhTest.java.BenchmarksRTree_flatBufferRTreeCreation010_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren010_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren010_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren010(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOf1000PointsMaxChildren010_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren010(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren010_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren010_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren010(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren010_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren010_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren010(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeSearchOf1000PointsMaxChildren010_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren010(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren010_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren010_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren010(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren010_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren010_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren010(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeSearchOf1000PointsMaxChildren010_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren010(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren010\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren010_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren010_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren010(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.[BenchmarkTaskResult]defaultRTreeSearchOf1000PointsMaxChildren010_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeSearchOf1000PointsMaxChildren010_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeSearchOf1000PointsMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeSearchOf1000PointsMaxChildren010_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeSearchOf1000PointsMaxChildren010\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.[void]defaultRTreeSearchOf1000PointsMaxChildren010_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeSearchOf1000PointsMaxChildren010_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeSearchOf1000PointsMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeSearchOf1000PointsMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.defaultRTreeSearchOf1000PointsMaxChildren010(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_defaultRTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren128_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren128_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren128_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren128(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOf1000PointsMaxChildren128_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren128(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren128_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren128_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren128_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren128(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren128_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren128_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren128_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren128(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOf1000PointsMaxChildren128_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren128(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren128\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren128_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren128_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren128_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren128(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren128_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren128_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren128_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren128(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeSearchOf1000PointsMaxChildren128_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren128(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren128\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren128_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren128_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren128_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren128(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren128_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren128_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren128_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeSearchOf1000PointsMaxChildren128_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren128\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren128_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren128_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren128_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren128(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren128_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[void]rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest.java.BenchmarksRTree_rStarTreeInsertOneEntryIntoGreekDataEntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_Throughput(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_AverageTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032());\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_SampleTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032());\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032());\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032());\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[BenchmarkTaskResult]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_SingleShotTime(InfraControl,ThreadParams)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[void]defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            blackhole.consume(l_benchmarksrtree0_G.defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032());\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java", "class_name": "BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest.java.BenchmarksRTree_defaultRTreeInsertOneEntryInto1000EntriesMaxChildren032_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren010_Throughput(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren010_Throughput", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren010_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren010(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOf1000PointsMaxChildren010_thrpt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren010(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new ThroughputResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren010_thrpt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren010_thrpt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren010_thrpt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren010(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren010_AverageTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren010_AverageTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren010_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren010(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            rStarTreeSearchOf1000PointsMaxChildren010_avgt_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren010(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps;\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            res.measuredOps /= batchSize;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new AverageTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren010\", res.measuredOps, res.getTime(), benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren010_avgt_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren010_avgt_jmhStub", "arg_nums": 9, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren010_avgt_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long operations = 0;\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        do {\n            l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren010(blackhole);\n            operations++;\n        } while(!control.isDone);\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren010_SampleTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren010_SampleTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren010_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            RawResults res = new RawResults();\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            control.announceWarmupReady();\n            while (control.warmupShouldWait) {\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren010(blackhole);\n                if (control.shouldYield) Thread.yield();\n                res.allOps++;\n            }\n\n            notifyControl.startMeasurement = true;\n            int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond\n            int batchSize = iterationParams.getBatchSize();\n            int opsPerInv = benchmarkParams.getOpsPerInvocation();\n            SampleBuffer buffer = new SampleBuffer();\n            rStarTreeSearchOf1000PointsMaxChildren010_sample_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, buffer, targetSamples, opsPerInv, batchSize, l_benchmarksrtree0_G);\n            notifyControl.stopMeasurement = true;\n            control.announceWarmdownReady();\n            try {\n                while (control.warmdownShouldWait) {\n                    l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren010(blackhole);\n                    if (control.shouldYield) Thread.yield();\n                    res.allOps++;\n                }\n            } catch (Throwable e) {\n                if (!(e instanceof InterruptedException)) throw e;\n            }\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            res.allOps += res.measuredOps * batchSize;\n            res.allOps *= opsPerInv;\n            res.allOps /= batchSize;\n            res.measuredOps *= opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult((long)res.allOps, (long)res.measuredOps);\n            results.add(new SampleTimeResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren010\", buffer, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren010_sample_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,SampleBuffer,int,long,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren010_sample_jmhStub", "arg_nums": 13, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "buffer", "type": "SampleBuffer"}, {"name": "targetSamples", "type": "int"}, {"name": "opsPerInv", "type": "long"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren010_sample_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        long operations = 0;\n        int rnd = (int)System.nanoTime();\n        int rndMask = startRndMask;\n        long time = 0;\n        int currentStride = 0;\n        do {\n            rnd = (rnd * 1664525 + 1013904223);\n            boolean sample = (rnd & rndMask) == 0;\n            if (sample) {\n                time = System.nanoTime();\n            }\n            for (int b = 0; b < batchSize; b++) {\n                if (control.volatileSpoiler) return;\n                l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren010(blackhole);\n            }\n            if (sample) {\n                buffer.add((System.nanoTime() - time) / opsPerInv);\n                if (currentStride++ > targetSamples) {\n                    buffer.half();\n                    currentStride = 0;\n                    rndMask = (rndMask << 1) + 1;\n                }\n            }\n            operations++;\n        } while(!control.isDone);\n        startRndMask = Math.max(startRndMask, rndMask);\n        result.realTime = realTime;\n        result.measuredOps = operations;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.[BenchmarkTaskResult]rStarTreeSearchOf1000PointsMaxChildren010_SingleShotTime(InfraControl,ThreadParams)", "name": "rStarTreeSearchOf1000PointsMaxChildren010_SingleShotTime", "arg_nums": 2, "params": [{"name": "control", "type": "InfraControl"}, {"name": "threadParams", "type": "ThreadParams"}], "return_type": "BenchmarkTaskResult", "signature": "public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams)", "original_string": "    public BenchmarkTaskResult rStarTreeSearchOf1000PointsMaxChildren010_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {\n        this.benchmarkParams = control.benchmarkParams;\n        this.iterationParams = control.iterationParams;\n        this.threadParams    = threadParams;\n        this.notifyControl   = control.notifyControl;\n        if (this.blackhole == null) {\n            this.blackhole = new Blackhole(\"Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.\");\n        }\n        if (threadParams.getSubgroupIndex() == 0) {\n            BenchmarksRTree_jmhType l_benchmarksrtree0_G = _jmh_tryInit_f_benchmarksrtree0_G(control);\n\n            control.preSetup();\n\n\n            notifyControl.startMeasurement = true;\n            RawResults res = new RawResults();\n            int batchSize = iterationParams.getBatchSize();\n            rStarTreeSearchOf1000PointsMaxChildren010_ss_jmhStub(control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask, batchSize, l_benchmarksrtree0_G);\n            control.preTearDown();\n\n            if (control.isLastIteration()) {\n                synchronized(this.getClass()) {\n                    f_benchmarksrtree0_G = null;\n                }\n            }\n            int opsPerInv = control.benchmarkParams.getOpsPerInvocation();\n            long totalOps = opsPerInv;\n            BenchmarkTaskResult results = new BenchmarkTaskResult(totalOps, totalOps);\n            results.add(new SingleShotResult(ResultRole.PRIMARY, \"rStarTreeSearchOf1000PointsMaxChildren010\", res.getTime(), totalOps, benchmarkParams.getTimeUnit()));\n            this.blackhole.evaporate(\"Yes, I am Stephen Hawking, and know a thing or two about black holes.\");\n            return results;\n        } else\n            throw new IllegalStateException(\"Harness failed to distribute threads among groups properly\");\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BenchmarkTaskResult", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.[void]rStarTreeSearchOf1000PointsMaxChildren010_ss_jmhStub(InfraControl,RawResults,BenchmarkParams,IterationParams,ThreadParams,Blackhole,Control,int,int,BenchmarksRTree_jmhType)", "name": "rStarTreeSearchOf1000PointsMaxChildren010_ss_jmhStub", "arg_nums": 10, "params": [{"name": "control", "type": "InfraControl"}, {"name": "result", "type": "RawResults"}, {"name": "benchmarkParams", "type": "BenchmarkParams"}, {"name": "iterationParams", "type": "IterationParams"}, {"name": "threadParams", "type": "ThreadParams"}, {"name": "blackhole", "type": "Blackhole"}, {"name": "notifyControl", "type": "Control"}, {"name": "startRndMask", "type": "int"}, {"name": "batchSize", "type": "int"}, {"name": "l_benchmarksrtree0_G", "type": "BenchmarksRTree_jmhType"}], "return_type": "void", "signature": "public static void rStarTreeSearchOf1000PointsMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G)", "original_string": "    public static void rStarTreeSearchOf1000PointsMaxChildren010_ss_jmhStub(InfraControl control, RawResults result, BenchmarkParams benchmarkParams, IterationParams iterationParams, ThreadParams threadParams, Blackhole blackhole, Control notifyControl, int startRndMask, int batchSize, BenchmarksRTree_jmhType l_benchmarksrtree0_G) throws Throwable {\n        long realTime = 0;\n        result.startTime = System.nanoTime();\n        for (int b = 0; b < batchSize; b++) {\n            if (control.volatileSpoiler) return;\n            l_benchmarksrtree0_G.rStarTreeSearchOf1000PointsMaxChildren010(blackhole);\n        }\n        result.stopTime = System.nanoTime();\n        result.realTime = realTime;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.[BenchmarksRTree_jmhType]_jmh_tryInit_f_benchmarksrtree0_G(InfraControl)", "name": "_jmh_tryInit_f_benchmarksrtree0_G", "arg_nums": 1, "params": [{"name": "control", "type": "InfraControl"}], "return_type": "BenchmarksRTree_jmhType", "signature": "BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control)", "original_string": "    BenchmarksRTree_jmhType _jmh_tryInit_f_benchmarksrtree0_G(InfraControl control) throws Throwable {\n        BenchmarksRTree_jmhType val = f_benchmarksrtree0_G;\n        if (val != null) {\n            return val;\n        }\n        synchronized(this.getClass()) {\n            try {\n            if (control.isFailing) throw new FailureAssistException();\n            val = f_benchmarksrtree0_G;\n            if (val != null) {\n                return val;\n            }\n            val = new BenchmarksRTree_jmhType();\n            val.readyTrial = true;\n            f_benchmarksrtree0_G = val;\n            } catch (Throwable t) {\n                control.isFailing = true;\n                throw t;\n            }\n        }\n        return val;\n    }", "default_arguments": null, "file": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java", "class_name": "BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "class_uri": "target/generated-test-sources/test-annotations/com/github/davidmoten/rtree/jmh_generated/BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest.java.BenchmarksRTree_rStarTreeSearchOf1000PointsMaxChildren010_jmhTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "BenchmarksRTree_jmhType", "classes": []}, "docstring": ""}]