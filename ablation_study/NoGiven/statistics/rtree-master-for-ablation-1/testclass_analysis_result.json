[{"file_path": "src/test/java/com/github/davidmoten/rtree/FactoriesTest.java", "testclass_name": "FactoriesTest", "dependencies": ["package com.github.davidmoten.rtree;", "import org.junit.Test;", "import com.github.davidmoten.junit.Asserts;"], "name": "FactoriesTest", "description": "Test suite for verifying the utility class nature of Factories.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "isUtilityClass", "primary_tested": ["Asserts.assertIsUtilityClass(Class)"], "external_dependencies": {"modules": ["com.github.davidmoten.junit.Asserts", "com.github.davidmoten.rtree.Factories"]}, "category": "unit", "description": "Tests whether the Factories class is a utility class."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/ComparatorsTest.java", "testclass_name": "ComparatorsTest", "dependencies": ["package com.github.davidmoten.rtree;", "import org.junit.Test;", "import com.github.davidmoten.junit.Asserts;", "import com.github.davidmoten.rtree.internal.Comparators;"], "name": "ComparatorsTest", "description": "Unit tests for the Comparators class, focusing on verifying the utility class nature.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testConstructorIsPrivate", "primary_tested": ["Asserts.assertIsUtilityClass(Class)"], "external_dependencies": {"modules": ["Asserts", "Comparators"], "project_specific_resources": ["Asserts.assertIsUtilityClass(Class)"]}, "category": "unit", "description": "Tests that the Comparators class is a utility class by asserting that its constructor is private."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/NodePositionTest.java", "testclass_name": "NodePositionTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;", "import org.mockito.Mockito;", "import com.github.davidmoten.rtree.geometry.Rectangle;"], "name": "NodePositionTest", "description": "Unit tests for the NodePosition class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testToString", "primary_tested": ["NodePosition.toString()"], "external_dependencies": {"modules": ["Node", "Rectangle", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the toString method of the NodePosition class to ensure it starts with the expected string."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/SerializerHelperTest.java", "testclass_name": "SerializerHelperTest", "dependencies": ["package com.github.davidmoten.rtree;", "import org.junit.Test;", "import com.github.davidmoten.junit.Asserts;"], "name": "SerializerHelperTest", "description": "Test class for verifying that SerializerHelper is a utility class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "assertIsUtilityClass", "primary_tested": ["Asserts.assertIsUtilityClass(Class)"], "external_dependencies": {"modules": ["com.github.davidmoten.junit.Asserts", "com.github.davidmoten.rtree.SerializerHelper"], "project_specific_resources": ["Asserts.assertIsUtilityClass(Class)"]}, "category": "unit", "description": "Verifies that SerializerHelper is a utility class."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/fbs/FlatBuffersHelperTest.java", "testclass_name": "FlatBuffersHelperTest", "dependencies": ["package com.github.davidmoten.rtree.fbs;", "import org.junit.Test;", "import com.github.davidmoten.junit.Asserts;"], "name": "FlatBuffersHelperTest", "description": "Test suite for the FlatBuffersHelper class, focusing on verifying if it is a utility class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "isUtilityClass", "primary_tested": ["Asserts.assertIsUtilityClass(Class)"], "external_dependencies": {"modules": ["com.github.davidmoten.junit.Asserts", "com.github.davidmoten.rtree.fbs.FlatBuffersHelper"]}, "category": "unit", "description": "Tests whether the FlatBuffersHelper class is a utility class."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/LeafHelperTest.java", "testclass_name": "LeafHelperTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import org.junit.Test;", "import com.github.davidmoten.junit.Asserts;"], "name": "LeafHelperTest", "description": "Test class for verifying that LeafHelper is a utility class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "isUtilityClass", "primary_tested": ["Asserts.assertIsUtilityClass(Class)"], "external_dependencies": {"modules": ["com.github.davidmoten.junit.Asserts", "com.github.davidmoten.rtree.internal.LeafHelper"]}, "category": "unit", "description": "Verifies that LeafHelper is a utility class."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/RectangleUtilTest.java", "testclass_name": "RectangleUtilTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import org.junit.Test;", "import com.github.davidmoten.junit.Asserts;"], "name": "RectangleUtilTest", "description": "Test class for verifying that RectangleUtil is a utility class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "isUtilityClass", "primary_tested": ["Asserts.assertIsUtilityClass(Class)"], "external_dependencies": {"modules": ["com.github.davidmoten.junit.Asserts", "com.github.davidmoten.rtree.internal.RectangleUtil"]}, "category": "unit", "description": "Verifies that RectangleUtil is a utility class."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/geometry/internal/GeometryUtilTest.java", "testclass_name": "GeometryUtilTest", "dependencies": ["package com.github.davidmoten.rtree.geometry.internal;", "import org.junit.Test;", "import com.github.davidmoten.junit.Asserts;"], "name": "GeometryUtilTest", "description": "Test class for verifying that GeometryUtil is a utility class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "isUtilityClass", "primary_tested": ["Asserts.assertIsUtilityClass(Class)"], "external_dependencies": {"modules": ["com.github.davidmoten.junit.Asserts", "com.github.davidmoten.rtree.geometry.internal.GeometryUtil"]}, "category": "unit", "description": "Verifies that GeometryUtil is a utility class."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/NonLeafHelperTest.java", "testclass_name": "NonLeafHelperTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import org.junit.Test;", "import com.github.davidmoten.junit.Asserts;"], "name": "NonLeafHelperTest", "description": "Test class for verifying that NonLeafHelper is a utility class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "isUtilityClass", "primary_tested": ["Asserts.assertIsUtilityClass(Class)"], "external_dependencies": {"modules": ["com.github.davidmoten.junit.Asserts", "com.github.davidmoten.rtree.internal.NonLeafHelper"]}, "category": "unit", "description": "Verifies that NonLeafHelper is a utility class."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/NonLeafTest.java", "testclass_name": "NonLeafTest", "dependencies": ["package com.github.davidmoten.rtree;", "import java.util.Collections;", "import org.junit.Test;", "import com.github.davidmoten.rtree.geometry.Geometry;", "import com.github.davidmoten.rtree.internal.NonLeafDefault;"], "name": "NonLeafTest", "description": "Unit tests for the NonLeafDefault class, focusing on preconditions.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testNonLeafPrecondition", "primary_tested": ["NonLeafDefault.NonLeafDefault(List<? extends Node<Object,Geometry>>,Context<Object,Geometry>)"], "external_dependencies": {"modules": ["NonLeafDefault", "Geometry", "Node", "Context", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the precondition of the NonLeafDefault constructor, expecting an IllegalArgumentException when the context is null."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/UtilTest.java", "testclass_name": "UtilTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static org.junit.Assert.assertEquals;", "import java.util.Collections;", "import org.junit.Test;", "import com.github.davidmoten.junit.Asserts;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.Rectangle;", "import com.github.davidmoten.rtree.internal.Util;"], "name": "UtilTest", "description": "Unit tests for the Util class in the RTree library.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "coverPrivateConstructor", "primary_tested": ["Asserts.assertIsUtilityClass(Class)"], "external_dependencies": {"modules": ["com.github.davidmoten.junit.Asserts", "com.github.davidmoten.rtree.internal.Util"]}, "category": "unit", "description": "Tests that the Util class is correctly identified as a utility class."}, {"name": "testMbrWithNegativeValues", "primary_tested": ["Util.mbr(Collection<? extends HasGeometry>)"], "associated_methods": ["Geometries.rectangle(double,double,double,double)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries", "com.github.davidmoten.rtree.geometry.Rectangle", "com.github.davidmoten.rtree.internal.Util"]}, "category": "unit", "description": "Tests the minimum bounding rectangle (MBR) calculation with negative values."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/SplitterRStarTest.java", "testclass_name": "SplitterRStarTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static org.junit.Assert.assertEquals;", "import java.util.List;", "import org.junit.Test;", "import com.github.davidmoten.guavamini.Lists;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.HasGeometry;", "import com.github.davidmoten.rtree.geometry.ListPair;"], "name": "SplitterRStarTest", "description": "Unit tests for the SplitterRStar class, specifically focusing on the getPairs method.", "class_members": {"variables": [{"name": "minSize", "type": "int"}, {"name": "list", "type": "List<HasGeometry>"}]}, "fixtures": [], "test_cases": [{"name": "testGetPairs", "primary_tested": ["SplitterRStar.getPairs(int,List<HasGeometry>)"], "external_dependencies": {"modules": ["Geometries", "Lists", "SplitterRStar", "ListPair"], "class_members": [{"name": "minSize", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "description": "Tests the getPairs method of SplitterRStar to ensure it correctly splits the list of geometries into pairs."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/OnSubscribeSearchTest.java", "testclass_name": "OnSubscribeSearchTest", "dependencies": ["package com.github.davidmoten.rtree;", "import java.util.Collections;", "import org.junit.Test;", "import org.mockito.Mockito;", "import com.github.davidmoten.rtree.OnSubscribeSearch.SearchProducer;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.Geometry;", "import com.github.davidmoten.rtree.geometry.Point;", "import com.github.davidmoten.rtree.internal.LeafDefault;", "import rx.Subscriber;", "import rx.functions.Func1;"], "name": "OnSubscribeSearchTest", "description": "Unit tests for the OnSubscribeSearch class, focusing on exception handling in SearchProducer.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSearchProducerThrowsExceptionFromRequestAll", "primary_tested": ["Node.searchWithoutBackpressure(Func1,Subscriber)"], "external_dependencies": {"modules": ["Node", "Func1", "Subscriber", "OnSubscribeSearch.SearchProducer"], "class_members": []}, "category": "unit", "description": "Tests that the SearchProducer throws an exception when the request for all entries fails."}, {"name": "testSearchProducerThrowsExceptionFromRequestSome", "primary_tested": ["LeafDefault.searchWithoutBackpressure(Func1,Subscriber)"], "associated_methods": ["Geometries.point(double,double)"], "external_dependencies": {"modules": ["LeafDefault", "Func1", "Subscriber", "OnSubscribeSearch.SearchProducer", "Geometries"], "class_members": []}, "category": "unit", "description": "Tests that the SearchProducer throws an exception when the request for some entries fails."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/KryoSerializationTest.java", "testclass_name": "KryoSerializationTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static org.junit.Assert.assertEquals;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import org.junit.Ignore;", "import org.junit.Test;", "import com.esotericsoftware.kryo.Kryo;", "import com.esotericsoftware.kryo.io.Input;", "import com.esotericsoftware.kryo.io.Output;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.Point;"], "name": "KryoSerializationTest", "description": "Tests for serialization and deserialization using Kryo library.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "Boo", "description": "Internal class used for testing serialization."}]}, "fixtures": [], "test_cases": [{"name": "testRTree", "primary_tested": ["Kryo.writeObject(Output,Object)", "Kryo.readObject(Input,Class)"], "associated_methods": ["RTree.create()", "RTree.add(Entry)", "RTree.entries()", "RTree.count()", "RTree.toBlocking()", "RTree.single()"], "external_dependencies": {"modules": ["Kryo", "ByteArrayOutputStream", "Output", "RTree", "Entries", "Geometries", "Point", "Input", "ByteArrayInputStream"], "class_members": [], "project_specific_resources": ["Geometries.point(double,double)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the serialization and deserialization of an RTree object using Kryo."}, {"name": "testKryo", "primary_tested": ["Kryo.writeObject(Output,Object)", "Kryo.readObject(Input,Class)"], "associated_methods": [], "external_dependencies": {"modules": ["Kryo", "ByteArrayOutputStream", "Output", "Boo", "Input", "ByteArrayInputStream"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the serialization and deserialization of a custom Boo object using Kryo."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/HighPrecisionTest.java", "testclass_name": "HighPrecisionTest", "dependencies": ["package com.github.davidmoten.rtree;", "import java.math.BigDecimal;", "import java.math.MathContext;", "import java.math.RoundingMode;", "import org.junit.Test;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.Rectangle;"], "name": "HighPrecisionTest", "description": "Tests for high precision operations involving BigDecimal and RTree.", "class_members": {"variables": [{"name": "FLOOR", "type": "static final MathContext"}, {"name": "CEILING", "type": "static final MathContext"}]}, "fixtures": [], "test_cases": [{"name": "testForIssue72", "primary_tested": ["BigDecimal.floatValue()"], "associated_methods": ["BigDecimal.round(MathContext).floatValue()"], "external_dependencies": {"modules": ["BigDecimal", "MathContext", "RoundingMode"], "class_members": [{"name": "FLOOR", "type": "variable"}, {"name": "CEILING", "type": "variable"}]}, "category": "unit", "description": "Tests the conversion of long to BigDecimal and its rounding using MathContext."}, {"name": "testHighPrecision", "primary_tested": ["RTree.add(Integer,Rectangle)", "RTree.search(Rectangle)"], "associated_methods": ["Geometries.rectangle(double,double,double,double)"], "external_dependencies": {"modules": ["RTree", "Geometries", "Rectangle"]}, "category": "unit", "description": "Tests the high precision handling of RTree operations with Rectangle geometries."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/LeafTest.java", "testclass_name": "LeafTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static org.junit.Assert.assertEquals;", "import java.util.ArrayList;", "import java.util.Arrays;", "import org.junit.Test;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.Rectangle;", "import com.github.davidmoten.rtree.internal.LeafDefault;"], "name": "LeafTest", "description": "Unit tests for the LeafDefault class in the RTree library.", "class_members": {"variables": [{"name": "context", "type": "Context<Object, Rectangle>"}]}, "fixtures": [], "test_cases": [{"name": "testCannotHaveZeroChildren", "primary_tested": ["LeafDefault.LeafDefault(List<Entry<Object, Rectangle>>, Context<Object, Rectangle>)"], "external_dependencies": {"modules": ["LeafDefault", "ArrayList", "Entry", "Context", "IllegalArgumentException"], "class_members": [{"name": "context", "type": "variable"}]}, "category": "unit", "description": "Tests that creating a LeafDefault with zero children throws an IllegalArgumentException."}, {"name": "testMbr", "primary_tested": ["LeafDefault.geometry()"], "associated_methods": ["Rectangle.add(Rectangle)"], "external_dependencies": {"modules": ["LeafDefault", "Geometries", "Rectangle", "Entries", "Arrays", "List", "Entry", "Context"], "class_members": [{"name": "context", "type": "variable"}]}, "category": "unit", "description": "Tests the MBR (Minimum Bounding Rectangle) calculation for a LeafDefault object."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/ImageSaverTest.java", "testclass_name": "ImageSaverTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static org.junit.Assert.assertTrue;", "import java.io.IOException;", "import java.util.concurrent.Callable;", "import java.util.concurrent.atomic.AtomicBoolean;", "import org.junit.Test;", "import com.github.davidmoten.junit.Asserts;"], "name": "ImageSaverTest", "description": "Unit tests for the ImageSaver class, focusing on its run method and utility class assertion.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testSaveImageToNonExistentDirectoryThrowsRuntimeException", "primary_tested": ["Visualizer.save(String)"], "external_dependencies": {"modules": ["RTree", "Visualizer"]}, "category": "unit", "description": "Tests that saving an image to a non-existent directory throws a RuntimeException."}, {"name": "testRunThatThrows", "primary_tested": ["ImageSaver.run(Callable<Void>)"], "external_dependencies": {"modules": ["ImageSaver", "Callable"]}, "category": "unit", "description": "Tests that the run method of ImageSaver throws a RuntimeException when the Callable throws an IOException."}, {"name": "testRunThatDoesNotThrow", "primary_tested": ["ImageSaver.run(Callable<Void>)"], "associated_methods": ["AtomicBoolean.set(boolean)"], "external_dependencies": {"modules": ["ImageSaver", "Callable", "AtomicBoolean"]}, "category": "unit", "description": "Tests that the run method of ImageSaver does not throw an exception when the Callable does not throw an exception."}, {"name": "testIsUtilClass", "primary_tested": ["Asserts.assertIsUtilityClass(Class<?>)", "ImageSaver.class"], "external_dependencies": {"modules": ["Asserts", "ImageSaver"]}, "category": "unit", "description": "Tests that the ImageSaver class is correctly identified as a utility class."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelperTest.java", "testclass_name": "ObjectsHelperTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;"], "name": "ObjectsHelperTest", "description": "Unit tests for the ObjectsHelper class, focusing on the asClass method and private constructor coverage.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testAsClassIsAbsentIfNull", "primary_tested": ["ObjectsHelper.asClass(Object,Class)"], "external_dependencies": {"modules": ["ObjectsHelper", "Integer"]}, "category": "unit", "description": "Tests that the asClass method returns an absent Optional if the input object is null."}, {"name": "testAsClassIsAbsentIfDifferentClass", "primary_tested": ["ObjectsHelper.asClass(Object,Class)"], "external_dependencies": {"modules": ["ObjectsHelper", "Integer", "String"]}, "category": "unit", "description": "Tests that the asClass method returns an absent Optional if the input object is of a different class than the specified class."}, {"name": "testAsClassIsPresentIfSameTypeAndNotNull", "primary_tested": ["ObjectsHelper.asClass(Object,Class)"], "external_dependencies": {"modules": ["ObjectsHelper", "Integer"]}, "category": "unit", "description": "Tests that the asClass method returns a present Optional if the input object is of the same type as the specified class and is not null."}, {"name": "coverPrivateConstructor", "primary_tested": ["ObjectsHelper.instantiateForTestCoveragePurposesOnly()"], "external_dependencies": {"modules": ["ObjectsHelper"]}, "category": "unit", "description": "Tests the instantiation of the ObjectsHelper class for test coverage purposes only."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/geometry/IntersectsTest.java", "testclass_name": "IntersectsTest", "dependencies": ["package com.github.davidmoten.rtree.geometry;", "import static com.github.davidmoten.rtree.geometry.Geometries.circle;", "import static com.github.davidmoten.rtree.geometry.Geometries.rectangle;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;", "import com.github.davidmoten.junit.Asserts;"], "name": "IntersectsTest", "description": "Unit tests for the Intersects class, focusing on the intersection logic between rectangles and circles.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testConstructorIsPrivate", "primary_tested": ["Asserts.assertIsUtilityClass(Class)"], "external_dependencies": {"modules": ["com.github.davidmoten.junit.Asserts", "com.github.davidmoten.rtree.geometry.Intersects"], "project_specific_resources": ["Asserts.assertIsUtilityClass(Class)"]}, "category": "unit", "description": "Tests that the Intersects class constructor is private."}, {"name": "testRectangleIntersectsCircle", "primary_tested": ["Intersects.rectangleIntersectsCircle.call(Rectangle,Circle)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Intersects", "com.github.davidmoten.rtree.geometry.Geometries"], "project_specific_resources": ["Geometries.rectangle(double,double,double,double)", "Geometries.circle(double,double,double)"]}, "category": "unit", "description": "Tests that a rectangle intersects a circle when they are positioned such that they overlap."}, {"name": "testRectangleDoesNotIntersectCircle", "primary_tested": ["Intersects.rectangleIntersectsCircle.call(Rectangle,Circle)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Intersects", "com.github.davidmoten.rtree.geometry.Geometries"], "project_specific_resources": ["Geometries.rectangle(double,double,double,double)", "Geometries.circle(double,double,double)"]}, "category": "unit", "description": "Tests that a rectangle does not intersect a circle when they are positioned such that they do not overlap."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/EntriesTest.java", "testclass_name": "EntriesTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertNotEquals;", "import org.junit.Test;", "import com.github.davidmoten.junit.Asserts;", "import com.github.davidmoten.rtree.geometry.Geometries;"], "name": "EntriesTest", "description": "Unit tests for the Entries class, focusing on value, equality, and utility class assertions.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testValue", "primary_tested": ["Entries.value()"], "external_dependencies": {"modules": ["Entries", "Geometries"], "project_specific_resources": ["Geometries.point(double,double)"]}, "category": "unit", "description": "Tests the value method of the Entries class."}, {"name": "testEquality", "primary_tested": ["Entries.equals(Object)"], "external_dependencies": {"modules": ["Entries", "Geometries"], "project_specific_resources": ["Geometries.point(double,double)"]}, "category": "unit", "description": "Tests the equality of Entries instances with the same geometry."}, {"name": "testEqualityWithGeometry", "primary_tested": ["Entries.equals(Object)"], "external_dependencies": {"modules": ["Entries", "Geometries"], "project_specific_resources": ["Geometries.point(double,double)"]}, "category": "unit", "description": "Tests the equality of Entries instances with different geometries."}, {"name": "testInequality", "primary_tested": ["Entries.equals(Object)"], "external_dependencies": {"modules": ["Entries", "Geometries"], "project_specific_resources": ["Geometries.point(double,double)"]}, "category": "unit", "description": "Tests the inequality of Entries instances with different values."}, {"name": "testInequalityWithNull", "primary_tested": ["Entries.equals(Object)"], "external_dependencies": {"modules": ["Entries", "Geometries"], "project_specific_resources": ["Geometries.point(double,double)"]}, "category": "unit", "description": "Tests the inequality of Entries instances with null."}, {"name": "testIsUtilityClass", "primary_tested": ["Asserts.assertIsUtilityClass(Class)"], "external_dependencies": {"modules": ["Entries", "Asserts"]}, "category": "unit", "description": "Tests if the Entries class is a utility class."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/LatLongExampleTest.java", "testclass_name": "LatLongExampleTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static org.junit.Assert.assertEquals;", "import java.util.List;", "import org.junit.Test;", "import com.github.davidmoten.grumpy.core.Position;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.Point;", "import com.github.davidmoten.rtree.geometry.Rectangle;", "import rx.Observable;", "import rx.functions.Func1;"], "name": "LatLongExampleTest", "description": "Tests for demonstrating the usage of RTree for distance searches with Lat Long points and GeoCircleValue objects.", "class_members": {"variables": [{"name": "sydney", "type": "static final Point"}, {"name": "canberra", "type": "static final Point"}, {"name": "brisbane", "type": "static final Point"}, {"name": "bungendore", "type": "static final Point"}], "methods": [{"name": "search", "signature": "<T> Observable<Entry<T, Point>> search(RTree<T, Point> tree, Point lonLat, double distanceKm)"}, {"name": "createBounds", "signature": "static Rectangle createBounds(Position from, double distanceKm)"}, {"name": "createGeoCircleValue", "signature": "<T> GeoCircleValue<T> createGeoCircleValue(Point point, double radiusKm, T value)"}, {"name": "add", "signature": "<T> RTree<GeoCircleValue<T>, Rectangle> add(RTree<GeoCircleValue<T>, Rectangle> tree, GeoCircleValue<T> c)"}], "nested_classes": [{"name": "GeoCircleValue", "description": "Internal class representing a geographic circle with a value."}]}, "fixtures": [], "test_cases": [{"name": "testLatLongExample", "primary_tested": ["RTree.search(Rectangle)"], "associated_methods": ["LatLongExampleTest.search(RTree<String, Point>, Point, double)"], "external_dependencies": {"modules": ["RTree", "Geometries", "Point", "Entry", "Observable", "Func1", "Position"], "class_members": [{"name": "sydney", "type": "variable"}, {"name": "canberra", "type": "variable"}, {"name": "brisbane", "type": "variable"}, {"name": "search", "type": "method"}]}, "category": "unit", "description": "Demonstrates how to use RTree to find cities within a specified distance from a given point."}, {"name": "testSearchLatLongCircles", "primary_tested": ["RTree.search(Point)"], "associated_methods": ["LatLongExampleTest.createGeoCircleValue(Point, double, String)", "LatLongExampleTest.add(RTree<GeoCircleValue<String>, Rectangle>, GeoCircleValue<String>)"], "external_dependencies": {"modules": ["RTree", "GeoCircleValue", "Rectangle", "Point", "Entry", "Observable", "Func1", "Position"], "class_members": [{"name": "sydney", "type": "variable"}, {"name": "canberra", "type": "variable"}, {"name": "brisbane", "type": "variable"}, {"name": "bungendore", "type": "variable"}, {"name": "createGeoCircleValue", "type": "method"}, {"name": "add", "type": "method"}]}, "category": "unit", "description": "Tests the search functionality for GeoCircleValue objects within an RTree, filtering by exact distance from the center."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/ContextTest.java", "testclass_name": "ContextTest", "dependencies": ["package com.github.davidmoten.rtree;", "import org.junit.Test;", "import com.github.davidmoten.rtree.geometry.Geometry;"], "name": "ContextTest", "description": "Unit tests for the Context class, focusing on various illegal and legal configurations.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testContextIllegalMinChildren", "primary_tested": ["Context.Context(int,int,Selector,Splitter,Factory)"], "external_dependencies": {"modules": ["Context", "Geometry", "SelectorMinimalAreaIncrease", "SplitterQuadratic", "Factories"]}, "category": "unit", "description": "Tests that creating a Context with an illegal minimum number of children throws a RuntimeException."}, {"name": "testContextIllegalMaxChildren", "primary_tested": ["Context.Context(int,int,Selector,Splitter,Factory)"], "external_dependencies": {"modules": ["Context", "Geometry", "SelectorMinimalAreaIncrease", "SplitterQuadratic", "Factories"]}, "category": "unit", "description": "Tests that creating a Context with an illegal maximum number of children throws a RuntimeException."}, {"name": "testContextIllegalMinMaxChildren", "primary_tested": ["Context.Context(int,int,Selector,Splitter,Factory)"], "external_dependencies": {"modules": ["Context", "Geometry", "SelectorMinimalAreaIncrease", "SplitterQuadratic", "Factories"]}, "category": "unit", "description": "Tests that creating a Context with an illegal combination of minimum and maximum children throws a RuntimeException."}, {"name": "testContextLegalChildren", "primary_tested": ["Context.Context(int,int,Selector,Splitter,Factory)"], "external_dependencies": {"modules": ["Context", "Geometry", "SelectorMinimalAreaIncrease", "SplitterQuadratic", "Factories"]}, "category": "unit", "description": "Tests that creating a Context with legal children configurations does not throw an exception."}, {"name": "testContextSelectorNullThrowsNPE", "primary_tested": ["Context.Context(int,int,Selector,Splitter,Factory)"], "external_dependencies": {"modules": ["Context", "Geometry", "SplitterQuadratic", "Factories"]}, "category": "unit", "description": "Tests that creating a Context with a null selector throws a NullPointerException."}, {"name": "testContextSplitterNullThrowsNPE", "primary_tested": ["Context.Context(int,int,Selector,Splitter,Factory)"], "external_dependencies": {"modules": ["Context", "Geometry", "SelectorMinimalAreaIncrease", "Factories"]}, "category": "unit", "description": "Tests that creating a Context with a null splitter throws a NullPointerException."}, {"name": "testContextNodeFactoryNullThrowsNPE", "primary_tested": ["Context.Context(int,int,Selector,Splitter,Factory)"], "external_dependencies": {"modules": ["Context", "Geometry", "SelectorMinimalAreaIncrease", "SplitterQuadratic"]}, "category": "unit", "description": "Tests that creating a Context with a null node factory throws a NullPointerException."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/geometry/PointTest.java", "testclass_name": "PointTest", "dependencies": ["package com.github.davidmoten.rtree.geometry;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;"], "name": "PointTest", "description": "Unit tests for the Point class, focusing on coordinates, distance calculations, and equality checks.", "class_members": {"variables": [{"name": "PRECISION", "type": "static final double"}]}, "fixtures": [], "test_cases": [{"name": "testCoordinates", "primary_tested": ["Point.x()", "Point.y()"], "external_dependencies": {"modules": ["Geometries", "Point"]}, "category": "unit", "description": "Tests the retrieval of coordinates from a Point object."}, {"name": "testDistanceToRectangle", "primary_tested": ["Point.distance(Rectangle)"], "external_dependencies": {"modules": ["Geometries", "Point", "Rectangle"]}, "category": "unit", "description": "Tests the distance calculation between a Point and a Rectangle."}, {"name": "testDistanceToPoint", "primary_tested": ["Point.distance(Point)"], "external_dependencies": {"modules": ["Geometries", "Point"]}, "category": "unit", "description": "Tests the distance calculation between two Point objects."}, {"name": "testMbr", "primary_tested": ["Point.equals(Object)"], "external_dependencies": {"modules": ["Geometries", "Point"]}, "category": "unit", "description": "Tests the equality of two Point objects created with the same coordinates."}, {"name": "testPointIntersectsItself", "primary_tested": ["Point.distance(Rectangle)"], "external_dependencies": {"modules": ["Geometries", "Point"]}, "category": "unit", "description": "Tests that a Point intersects with its own Minimum Bounding Rectangle (MBR)."}, {"name": "testIntersectIsFalseWhenPointsDiffer", "primary_tested": ["Point.distance(Rectangle)"], "external_dependencies": {"modules": ["Geometries", "Point"]}, "category": "unit", "description": "Tests that two slightly different Points do not intersect."}, {"name": "testEquality", "primary_tested": ["Point.equals(Object)"], "external_dependencies": {"modules": ["Geometries", "Point"]}, "category": "unit", "description": "Tests the equality of two Point objects with the same coordinates."}, {"name": "testInequality", "primary_tested": ["Point.equals(Object)"], "external_dependencies": {"modules": ["Geometries", "Point"]}, "category": "unit", "description": "Tests the inequality of two Point objects with different y-coordinates."}, {"name": "testInequalityToNull", "primary_tested": ["Point.equals(Object)"], "external_dependencies": {"modules": ["Geometries", "Point"]}, "category": "unit", "description": "Tests that a Point object is not equal to null."}, {"name": "testHashCode", "primary_tested": ["Point.hashCode()"], "external_dependencies": {"modules": ["Geometries", "Point"]}, "category": "unit", "description": "Tests the hash code generation for a Point object."}, {"name": "testDoesNotContain", "primary_tested": ["Point.contains(double,double)"], "external_dependencies": {"modules": ["Geometries", "Point"]}, "category": "unit", "description": "Tests that a Point does not contain a different coordinate."}, {"name": "testContains", "primary_tested": ["Point.contains(double,double)"], "external_dependencies": {"modules": ["Geometries", "Point"]}, "category": "unit", "description": "Tests that a Point contains its own coordinates."}]}, {"file_path": "src/test/java/com/github/davidmoten/internal/operators/OperatorBoundedPriorityQueueTest.java", "testclass_name": "OperatorBoundedPriorityQueueTest", "dependencies": ["package com.github.davidmoten.internal.operators;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.List;", "import java.util.concurrent.atomic.AtomicBoolean;", "import org.junit.Test;", "import com.github.davidmoten.rtree.RTree;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.Line;", "import com.github.davidmoten.rtree.internal.operators.OperatorBoundedPriorityQueue;", "import rx.Observable;", "import rx.Observable.OnSubscribe;", "import rx.Subscriber;"], "name": "OperatorBoundedPriorityQueueTest", "description": "Unit tests for the OperatorBoundedPriorityQueue class, focusing on priority queue operations and subscription management.", "class_members": {"variables": [{"name": "integerComparator", "type": "static Comparator<Integer>"}], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPriority", "primary_tested": ["OperatorBoundedPriorityQueue.call(Subscriber)"], "external_dependencies": {"modules": ["Observable", "OperatorBoundedPriorityQueue", "Comparator", "Arrays"], "class_members": [{"name": "integerComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the priority queue functionality by ensuring the correct elements are retained based on the comparator."}, {"name": "testUnsubscribeAfterFirst", "primary_tested": ["OperatorBoundedPriorityQueue.call(Subscriber)"], "associated_methods": ["Subscriber.unsubscribe()"], "external_dependencies": {"modules": ["Observable", "OperatorBoundedPriorityQueue", "AtomicBoolean", "Subscriber"], "class_members": [{"name": "integerComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of unsubscribing after receiving the first element from the priority queue."}, {"name": "testUnsubscribeAfterLastButBeforeCompletedCalled", "primary_tested": ["OperatorBoundedPriorityQueue.call(Subscriber)"], "associated_methods": ["Subscriber.unsubscribe()"], "external_dependencies": {"modules": ["Observable", "OperatorBoundedPriorityQueue", "AtomicBoolean", "Subscriber"], "class_members": [{"name": "integerComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of unsubscribing after receiving the last element but before the completion callback is called."}, {"name": "testError", "primary_tested": ["OperatorBoundedPriorityQueue.call(Subscriber)"], "associated_methods": ["Subscriber.onError(Throwable)"], "external_dependencies": {"modules": ["Observable", "OperatorBoundedPriorityQueue", "AtomicBoolean", "Subscriber"], "class_members": [{"name": "integerComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the error handling mechanism of the priority queue when an error is emitted."}, {"name": "testErrorCalledJustAfterUnsubscribe", "primary_tested": ["OperatorBoundedPriorityQueue.call(Subscriber)"], "associated_methods": ["Subscriber.unsubscribe()", "Subscriber.onError(Throwable)"], "external_dependencies": {"modules": ["Observable", "OperatorBoundedPriorityQueue", "AtomicBoolean", "Subscriber", "OnSubscribe"], "class_members": [{"name": "integerComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of the priority queue when an error is emitted just after unsubscribing."}, {"name": "testUnsubscribeCalledAfterFirst", "primary_tested": ["OperatorBoundedPriorityQueue.call(Subscriber)"], "associated_methods": ["Subscriber.unsubscribe()"], "external_dependencies": {"modules": ["Observable", "OperatorBoundedPriorityQueue", "AtomicBoolean", "Subscriber", "OnSubscribe"], "class_members": [{"name": "integerComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of unsubscribing after receiving the first element from the priority queue."}, {"name": "testOperatorShouldRequestMaxFromUpstream", "primary_tested": ["RTree.nearest(Point,double,int)"], "associated_methods": ["RTree.add(String,Line)"], "external_dependencies": {"modules": ["RTree", "Geometries", "Line"], "class_members": []}, "category": "unit", "description": "Tests the operator's ability to request the maximum number of elements from the upstream source."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStackTest.java", "testclass_name": "ImmutableStackTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import java.util.Iterator;", "import org.junit.Test;"], "name": "ImmutableStackTest", "description": "Unit tests for the ImmutableStack class, focusing on its behavior with various operations like push, pop, peek, and iterator.", "class_members": {"variables": [{"name": "a", "type": "Object"}, {"name": "b", "type": "Object"}]}, "test_cases": [{"name": "testNewStackIsEmpty", "primary_tested": ["ImmutableStack.isEmpty()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests that a newly created stack is empty."}, {"name": "testPopOnEmptyStackThrowsException", "primary_tested": ["ImmutableStack.pop()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests that popping from an empty stack throws a RuntimeException."}, {"name": "testPeekOnEmptyStackThrowsException", "primary_tested": ["ImmutableStack.peek()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests that peeking from an empty stack throws a RuntimeException."}, {"name": "testRemoveThrowsException", "primary_tested": ["ImmutableStack.iterator().remove()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests that calling remove on the iterator of a stack throws a RuntimeException."}, {"name": "testStackIsEmptyAfterPushThenPop", "primary_tested": ["ImmutableStack.push(Object)", "ImmutableStack.pop()", "ImmutableStack.isEmpty()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests that a stack is empty after pushing an item and then popping it."}, {"name": "testPeekGivesLastPushed", "primary_tested": ["ImmutableStack.push(Object)", "ImmutableStack.peek()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests that peeking returns the last pushed item."}, {"name": "testPopPeekGivesSecondLastPushed", "primary_tested": ["ImmutableStack.push(Object)", "ImmutableStack.pop()", "ImmutableStack.peek()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests that after popping, peeking returns the second last pushed item."}, {"name": "testIteratorWhenEmpty", "primary_tested": ["ImmutableStack.iterator().hasNext()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests that the iterator of an empty stack has no next item."}, {"name": "testIteratorWhenHasOneItem", "primary_tested": ["ImmutableStack.push(Object)", "ImmutableStack.iterator().hasNext()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests that the iterator of a stack with one item has a next item."}, {"name": "testIteratorReturnsOneItem", "primary_tested": ["ImmutableStack.push(Object)", "ImmutableStack.iterator().next()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests that the iterator returns the pushed item."}, {"name": "testIteratorReturnsLastPushedFirst", "primary_tested": ["ImmutableStack.push(Object)", "ImmutableStack.iterator().next()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests that the iterator returns the last pushed item first."}, {"name": "testIteratorReturnsTwoItemsInOrderOfPop", "primary_tested": ["ImmutableStack.push(Object)", "ImmutableStack.iterator().next()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests that the iterator returns two items in the order they would be popped."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/QuadraticSplitterTest.java", "testclass_name": "QuadraticSplitterTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static org.junit.Assert.assertEquals;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import org.junit.Test;", "import com.github.davidmoten.guavamini.Sets;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.HasGeometry;", "import com.github.davidmoten.rtree.geometry.ListPair;", "import com.github.davidmoten.rtree.internal.Util;", "import com.github.davidmoten.rtree.internal.util.Pair;"], "name": "QuadraticSplitterTest", "description": "Unit tests for the QuadraticSplitter class, focusing on worst combination, best candidate for group, and split functionalities.", "class_members": {"methods": [{"name": "r", "signature": "private static Mbr r(int n)"}]}, "fixtures": [], "test_cases": [{"name": "testWorstCombinationOn3", "primary_tested": ["SplitterQuadratic.worstCombination(List<Mbr>)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "Pair"]}, "category": "unit", "description": "Tests the worst combination functionality with three MBRs."}, {"name": "testWorstCombinationOnTwoEntries", "primary_tested": ["SplitterQuadratic.worstCombination(List<Mbr>)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "Pair"]}, "category": "unit", "description": "Tests the worst combination functionality with two MBRs."}, {"name": "testWorstCombinationOn4", "primary_tested": ["SplitterQuadratic.worstCombination(List<Mbr>)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "Pair"]}, "category": "unit", "description": "Tests the worst combination functionality with four MBRs."}, {"name": "testGetBestCandidateForGroup1", "primary_tested": ["SplitterQuadratic.getBestCandidateForGroup(List<Mbr>, List<Mbr>, Rectangle)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "Util"]}, "category": "unit", "description": "Tests the best candidate for group functionality with one MBR in the list and one in the group."}, {"name": "testGetBestCandidateForGroup2", "primary_tested": ["SplitterQuadratic.getBestCandidateForGroup(List<Mbr>, List<Mbr>, Rectangle)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "Util"]}, "category": "unit", "description": "Tests the best candidate for group functionality with one MBR in the list and two in the group."}, {"name": "testGetBestCandidateForGroup3", "primary_tested": ["SplitterQuadratic.getBestCandidateForGroup(List<Mbr>, List<Mbr>, Rectangle)"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "Util"]}, "category": "unit", "description": "Tests the best candidate for group functionality with two MBRs in the list and one in the group."}, {"name": "testSplit", "primary_tested": ["SplitterQuadratic.split(List<Mbr>, int)"], "associated_methods": ["ListPair.group1()", "ListPair.group2()"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "ListPair", "Sets"]}, "category": "unit", "description": "Tests the split functionality with four MBRs."}, {"name": "testSplit2", "primary_tested": ["SplitterQuadratic.split(List<Mbr>, int)"], "associated_methods": ["ListPair.group1()", "ListPair.group2()"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "ListPair", "Sets"]}, "category": "unit", "description": "Tests the split functionality with five MBRs."}, {"name": "testSplit3", "primary_tested": ["SplitterQuadratic.split(List<Mbr>, int)"], "associated_methods": ["ListPair.group1()", "ListPair.group2()"], "external_dependencies": {"modules": ["Mbr", "SplitterQuadratic", "ListPair", "Sets"]}, "category": "unit", "description": "Tests the split functionality with six MBRs."}, {"name": "testExceptionForSplitEmptyList", "primary_tested": ["SplitterQuadratic.split(List<HasGeometry>, int)"], "external_dependencies": {"modules": ["SplitterQuadratic"]}, "category": "unit", "description": "Tests the exception handling for splitting an empty list."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/BackpressureTest.java", "testclass_name": "BackpressureTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static com.github.davidmoten.rtree.RTreeTest.e;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import org.junit.Test;", "import org.mockito.Mockito;", "import com.github.davidmoten.junit.Asserts;", "import com.github.davidmoten.rtree.geometry.Geometry;", "import com.github.davidmoten.rtree.geometry.Rectangle;", "import com.github.davidmoten.rtree.internal.util.ImmutableStack;", "import rx.Subscriber;", "import rx.Subscription;", "import rx.functions.Func1;"], "name": "BackpressureTest", "description": "Unit tests for the Backpressure class, focusing on various scenarios involving backpressure handling and search operations.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testConstructorIsPrivate", "primary_tested": ["Asserts.assertIsUtilityClass(Class)"], "external_dependencies": {"modules": ["Asserts"]}, "category": "unit", "description": "Tests that the Backpressure class is a utility class with a private constructor."}, {"name": "testBackpressureSearch", "primary_tested": ["Backpressure.search(Func1,Subscriber,ImmutableStack,int)"], "associated_methods": ["Subscriber.onNext(Object)"], "external_dependencies": {"modules": ["Backpressure", "Subscriber", "ImmutableStack", "Func1", "Mockito"]}, "category": "unit", "description": "Tests the backpressure search functionality with a mock subscriber and condition."}, {"name": "testBackpressureSearchNodeWithConditionThatAlwaysReturnsFalse", "primary_tested": ["RTree.search(Geometry)"], "associated_methods": ["RTree.add(Entry)", "Subscriber.onNext(Object)"], "external_dependencies": {"modules": ["RTree", "Entry", "Rectangle", "Geometry", "Subscriber"]}, "category": "unit", "description": "Tests the backpressure search functionality with a condition that always returns false."}, {"name": "testRequestZero", "primary_tested": ["Backpressure.search(Func1,Subscriber,ImmutableStack,int)"], "associated_methods": ["Subscriber.onNext(Object)", "Subscriber.add(Subscription)"], "external_dependencies": {"modules": ["Backpressure", "Subscriber", "ImmutableStack", "Func1", "Node", "NodePosition", "Geometry"]}, "category": "unit", "description": "Tests the backpressure search functionality with a request count of zero."}, {"name": "testRequestZeroWhenUnsubscribed", "primary_tested": ["Backpressure.search(Func1,Subscriber,ImmutableStack,int)"], "associated_methods": ["Subscriber.onNext(Object)", "Subscriber.add(Subscription)", "Subscriber.unsubscribe()"], "external_dependencies": {"modules": ["Backpressure", "Subscriber", "ImmutableStack", "Func1", "Node", "NodePosition", "Geometry"]}, "category": "unit", "description": "Tests the backpressure search functionality when the subscriber is unsubscribed."}, {"name": "testBackpressureIterateWhenNodeHasMaxChildrenAndIsRoot", "primary_tested": ["RTree.entries()"], "associated_methods": ["RTree.add(List)", "Subscriber.onNext(Object)"], "external_dependencies": {"modules": ["RTree", "Entry", "Rectangle", "Subscriber"]}, "category": "unit", "description": "Tests the backpressure iteration functionality when the node has the maximum number of children and is the root."}, {"name": "testBackpressureRequestZero", "primary_tested": ["RTree.entries()"], "associated_methods": ["RTree.add(List)", "Subscriber.onNext(Object)", "Subscriber.request(long)"], "external_dependencies": {"modules": ["RTree", "Entry", "Rectangle", "Subscriber"]}, "category": "unit", "description": "Tests the backpressure functionality with a request count of zero."}, {"name": "testBackpressureIterateWhenNodeHasMaxChildrenAndIsNotRoot", "primary_tested": ["RTree.entries()"], "associated_methods": ["RTree.add(List)", "Subscriber.onNext(Object)"], "external_dependencies": {"modules": ["RTree", "Entry", "Rectangle", "Subscriber"]}, "category": "unit", "description": "Tests the backpressure iteration functionality when the node has the maximum number of children and is not the root."}, {"name": "testBackpressureIterateWhenConditionFailsAgainstNonLeafNode", "primary_tested": ["RTree.entries()"], "associated_methods": ["RTree.add(List)", "Subscriber.onNext(Object)"], "external_dependencies": {"modules": ["RTree", "Entry", "Rectangle", "Subscriber"]}, "category": "unit", "description": "Tests the backpressure iteration functionality when the condition fails against a non-leaf node."}, {"name": "testBackpressureIterateWhenConditionFailsAgainstLeafNode", "primary_tested": ["RTree.search(Geometry)"], "associated_methods": ["RTree.add(Entry)", "Subscriber.onNext(Object)"], "external_dependencies": {"modules": ["RTree", "Entry", "Rectangle", "Geometry", "Subscriber"]}, "category": "unit", "description": "Tests the backpressure iteration functionality when the condition fails against a leaf node."}, {"name": "testBackpressureFastPathNotInitiatedTwice", "primary_tested": ["RTree.search(Geometry)"], "associated_methods": ["RTree.add(Entry)", "Subscriber.onNext(Object)", "Subscriber.request(long)"], "external_dependencies": {"modules": ["RTree", "Entry", "Rectangle", "Geometry", "Subscriber"]}, "category": "unit", "description": "Tests that the fast path is not initiated twice during backpressure handling."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/fbs/SerializerFlatBuffersTest.java", "testclass_name": "SerializerFlatBuffersTest", "dependencies": ["package com.github.davidmoten.rtree.fbs;", "import static org.junit.Assert.assertEquals;", "import java.io.ByteArrayInputStream;", "import java.io.File;", "import java.io.FileInputStream;", "import java.io.FileOutputStream;", "import java.io.IOException;", "import java.io.InputStream;", "import org.junit.Test;", "import com.github.davidmoten.rtree.Entry;", "import com.github.davidmoten.rtree.GreekEarthquakes;", "import com.github.davidmoten.rtree.InternalStructure;", "import com.github.davidmoten.rtree.Precision;", "import com.github.davidmoten.rtree.RTree;", "import com.github.davidmoten.rtree.Serializer;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.Point;", "import rx.Observable;", "import rx.functions.Func1;"], "name": "SerializerFlatBuffersTest", "description": "Tests for the SerializerFlatBuffers class, focusing on serialization and deserialization of RTree objects using FlatBuffers.", "class_members": {"variables": [{"name": "EMPTY", "type": "static final byte[]"}], "methods": [{"name": "roundTrip", "signature": "void roundTrip(InternalStructure structure, boolean backpressure) throws Exception"}, {"name": "createSerializer", "signature": "static Serializer<Object, Point> createSerializer()"}, {"name": "serialize", "signature": "static void serialize(RTree<Object, Point> tree, long t, File file, FileOutputStream os, Serializer<Object, Point> fbSerializer) throws IOException"}, {"name": "deserialize", "signature": "static void deserialize(InternalStructure structure, File file, Serializer<Object, Point> fbSerializer, boolean backpressure) throws Exception"}]}, "fixtures": [], "test_cases": [{"name": "testSerializeRoundTripToFlatBuffersSingleArray", "primary_tested": ["Serializer.write(RTree<Object, Point>, FileOutputStream)", "Serializer.read(InputStream, int, InternalStructure)"], "associated_methods": ["RTree.add(Iterable<Entry<Object, Point>>)", "RTree.search(Rectangle)"], "external_dependencies": {"modules": ["RTree", "GreekEarthquakes", "InternalStructure", "Precision", "Serializer", "Geometries", "File", "FileOutputStream", "FileInputStream", "InputStream"], "class_members": [{"name": "roundTrip", "type": "method"}, {"name": "createSerializer", "type": "method"}, {"name": "serialize", "type": "method"}, {"name": "deserialize", "type": "method"}]}, "category": "integration", "description": "Tests the serialization and deserialization of an RTree with a single array internal structure."}, {"name": "testSerializeRoundTripToDefaultStructure", "primary_tested": ["Serializer.write(RTree<Object, Point>, FileOutputStream)", "Serializer.read(InputStream, int, InternalStructure)"], "associated_methods": ["RTree.add(Iterable<Entry<Object, Point>>)", "RTree.search(Rectangle)"], "external_dependencies": {"modules": ["RTree", "GreekEarthquakes", "InternalStructure", "Precision", "Serializer", "Geometries", "File", "FileOutputStream", "FileInputStream", "InputStream"], "class_members": [{"name": "roundTrip", "type": "method"}, {"name": "createSerializer", "type": "method"}, {"name": "serialize", "type": "method"}, {"name": "deserialize", "type": "method"}]}, "category": "integration", "description": "Tests the serialization and deserialization of an RTree with the default internal structure."}, {"name": "testSerializeRoundTripToFlatBuffersSingleArrayBackpressure", "primary_tested": ["Serializer.write(RTree<Object, Point>, FileOutputStream)", "Serializer.read(InputStream, int, InternalStructure)"], "associated_methods": ["RTree.add(Iterable<Entry<Object, Point>>)", "RTree.search(Rectangle)"], "external_dependencies": {"modules": ["RTree", "GreekEarthquakes", "InternalStructure", "Precision", "Serializer", "Geometries", "File", "FileOutputStream", "FileInputStream", "InputStream"], "class_members": [{"name": "roundTrip", "type": "method"}, {"name": "createSerializer", "type": "method"}, {"name": "serialize", "type": "method"}, {"name": "deserialize", "type": "method"}]}, "category": "integration", "description": "Tests the serialization and deserialization of an RTree with a single array internal structure under backpressure conditions."}, {"name": "testSerializeRoundTripToDefaultStructureBackpressure", "primary_tested": ["Serializer.write(RTree<Object, Point>, FileOutputStream)", "Serializer.read(InputStream, int, InternalStructure)"], "associated_methods": ["RTree.add(Iterable<Entry<Object, Point>>)", "RTree.search(Rectangle)"], "external_dependencies": {"modules": ["RTree", "GreekEarthquakes", "InternalStructure", "Precision", "Serializer", "Geometries", "File", "FileOutputStream", "FileInputStream", "InputStream"], "class_members": [{"name": "roundTrip", "type": "method"}, {"name": "createSerializer", "type": "method"}, {"name": "serialize", "type": "method"}, {"name": "deserialize", "type": "method"}]}, "category": "integration", "description": "Tests the serialization and deserialization of an RTree with the default internal structure under backpressure conditions."}, {"name": "testInputStreamNotAsLongAsExpected", "primary_tested": ["SerializerFlatBuffers.readFully(InputStream, int)"], "external_dependencies": {"modules": ["ByteArrayInputStream", "IOException"]}, "category": "unit", "description": "Tests that a RuntimeException is thrown when the InputStream does not provide the expected number of bytes."}, {"name": "testInputStreamReturnsArrayInSmallChunks", "primary_tested": ["SerializerFlatBuffers.readFully(InputStream, int)"], "external_dependencies": {"modules": ["IOException"]}, "category": "unit", "description": "Tests that the InputStream returns an array in small chunks and verifies the length and content of the returned array."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/geometry/CircleTest.java", "testclass_name": "CircleTest", "dependencies": ["package com.github.davidmoten.rtree.geometry;", "import static com.github.davidmoten.rtree.geometry.Geometries.circle;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertNotEquals;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;"], "name": "CircleTest", "description": "Unit tests for the Circle class, focusing on its coordinates, distance, MBR, equality, and intersection functionalities.", "class_members": {"variables": [{"name": "PRECISION", "type": "static final double"}]}, "fixtures": [], "test_cases": [{"name": "testCoordinates", "primary_tested": ["Circle.x()", "Circle.y()"], "external_dependencies": {"modules": ["Circle", "Geometries"]}, "category": "unit", "description": "Tests the coordinates (x, y) of the Circle."}, {"name": "testDistance", "primary_tested": ["Circle.distance(Rectangle)"], "external_dependencies": {"modules": ["Circle", "Geometries", "Rectangle"]}, "category": "unit", "description": "Tests the distance calculation between a Circle and a Rectangle."}, {"name": "testMbr", "primary_tested": ["Circle.mbr()"], "external_dependencies": {"modules": ["Circle", "Geometries", "Rectangle"]}, "category": "unit", "description": "Tests the Minimum Bounding Rectangle (MBR) of the Circle."}, {"name": "testEquality", "primary_tested": ["Circle.equals(Object)"], "external_dependencies": {"modules": ["Circle"]}, "category": "unit", "description": "Tests the equality of two Circle objects with the same parameters."}, {"name": "testInequalityRadius", "primary_tested": ["Circle.equals(Object)"], "external_dependencies": {"modules": ["Circle"]}, "category": "unit", "description": "Tests the inequality of two Circle objects with different radii."}, {"name": "testInequalityX", "primary_tested": ["Circle.equals(Object)"], "external_dependencies": {"modules": ["Circle"]}, "category": "unit", "description": "Tests the inequality of two Circle objects with different x coordinates."}, {"name": "testInequalityY", "primary_tested": ["Circle.equals(Object)"], "external_dependencies": {"modules": ["Circle"]}, "category": "unit", "description": "Tests the inequality of two Circle objects with different y coordinates."}, {"name": "testInequalityWithNull", "primary_tested": ["Circle.equals(Object)"], "external_dependencies": {"modules": ["Circle"]}, "category": "unit", "description": "Tests the inequality of a Circle object with null."}, {"name": "testHashCode", "primary_tested": ["Circle.hashCode()"], "external_dependencies": {"modules": ["Circle"]}, "category": "unit", "description": "Tests the hash code of the Circle."}, {"name": "testDistanceIsZeroWhenIntersects", "primary_tested": ["Circle.distance(Rectangle)"], "external_dependencies": {"modules": ["Circle", "Geometries", "Rectangle"]}, "category": "unit", "description": "Tests that the distance is zero when a Circle intersects with a Rectangle."}, {"name": "testIntersects2", "primary_tested": ["Circle.distance(Rectangle)"], "external_dependencies": {"modules": ["Circle", "Geometries", "Rectangle"]}, "category": "unit", "description": "Tests that the distance is non-zero when a Circle does not intersect with a Rectangle."}, {"name": "testIntersects3", "primary_tested": ["Circle.distance(Rectangle)"], "external_dependencies": {"modules": ["Circle", "Geometries", "Rectangle"]}, "category": "unit", "description": "Tests that the distance is non-zero when a Circle does not intersect with a Rectangle."}, {"name": "testIntersectsReturnsTrue", "primary_tested": ["Circle.intersects(Rectangle)"], "external_dependencies": {"modules": ["Circle", "Geometries", "Rectangle"]}, "category": "unit", "description": "Tests that the intersects method returns true when a Circle intersects with a Rectangle."}, {"name": "testIntersectsReturnsFalse", "primary_tested": ["Circle.intersects(Rectangle)"], "external_dependencies": {"modules": ["Circle", "Geometries", "Rectangle"]}, "category": "unit", "description": "Tests that the intersects method returns false when a Circle does not intersect with a Rectangle."}, {"name": "testIntersects", "primary_tested": ["Intersects.circleIntersectsCircle.call(Circle,Circle)"], "external_dependencies": {"modules": ["Circle", "Intersects"]}, "category": "unit", "description": "Tests the intersection of two Circle objects."}, {"name": "testDoNotIntersect", "primary_tested": ["Intersects.circleIntersectsCircle.call(Circle,Circle)"], "external_dependencies": {"modules": ["Circle", "Intersects"]}, "category": "unit", "description": "Tests that two Circle objects do not intersect."}, {"name": "testIntersectsPoint", "primary_tested": ["Circle.intersects(Point)"], "external_dependencies": {"modules": ["Circle", "Geometries", "Point"]}, "category": "unit", "description": "Tests that a Circle intersects with a Point."}, {"name": "testDoesNotIntersectPoint", "primary_tested": ["Circle.intersects(Point)"], "external_dependencies": {"modules": ["Circle", "Geometries", "Point"]}, "category": "unit", "description": "Tests that a Circle does not intersect with a Point."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/SerializersTest.java", "testclass_name": "SerializersTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import org.junit.Test;", "import com.github.davidmoten.guavamini.Sets;", "import com.github.davidmoten.junit.Asserts;", "import com.github.davidmoten.rtree.geometry.Circle;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.Geometry;", "import com.github.davidmoten.rtree.geometry.Line;", "import com.github.davidmoten.rtree.geometry.Point;", "import com.github.davidmoten.rtree.geometry.Rectangle;"], "name": "SerializersTest", "description": "Test suite for Serializers class, focusing on various serialization scenarios for different geometries.", "class_members": {"variables": [], "methods": [{"name": "checkRoundTripPoint", "signature": "private static void checkRoundTripPoint(Serializer<String, Point> serializer) throws IOException"}, {"name": "check", "signature": "private static <S extends Geometry> void check(Serializer<String, S> serializer, Entry<String, S> a, Entry<String, S> b) throws IOException"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testJavaIoSerialization", "primary_tested": ["Serializers.flatBuffers().javaIo()"], "associated_methods": ["SerializersTest.checkRoundTripPoint(Serializer<String, Point>)"], "external_dependencies": {"modules": ["Serializer", "Point", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Java IO serialization for Point objects."}, {"name": "testStringPointSerialization", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": ["SerializersTest.checkRoundTripPoint(Serializer<String, Point>)"], "external_dependencies": {"modules": ["Serializer", "Point", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the UTF-8 serialization for Point objects."}, {"name": "testStringRectangleFloatSerialization", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": ["SerializersTest.check(Serializer<String, Rectangle>, Entry<String, Rectangle>, Entry<String, Rectangle>)"], "external_dependencies": {"modules": ["Serializer", "Rectangle", "Entries", "Geometries", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the UTF-8 serialization for Rectangle objects with float coordinates."}, {"name": "testStringRectangleDoubleSerialization", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": ["SerializersTest.check(Serializer<String, Rectangle>, Entry<String, Rectangle>, Entry<String, Rectangle>)"], "external_dependencies": {"modules": ["Serializer", "Rectangle", "Entries", "Geometries", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the UTF-8 serialization for Rectangle objects with double coordinates."}, {"name": "testStringCircleFloatSerialization", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": ["SerializersTest.check(Serializer<String, Circle>, Entry<String, Circle>, Entry<String, Circle>)"], "external_dependencies": {"modules": ["Serializer", "Circle", "Entries", "Geometries", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the UTF-8 serialization for Circle objects with float coordinates."}, {"name": "testStringCircleDoubleSerialization", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": ["SerializersTest.check(Serializer<String, Circle>, Entry<String, Circle>, Entry<String, Circle>)"], "external_dependencies": {"modules": ["Serializer", "Circle", "Entries", "Geometries", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the UTF-8 serialization for Circle objects with double coordinates."}, {"name": "testStringLineFloatSerialization", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": ["SerializersTest.check(Serializer<String, Line>, Entry<String, Line>, Entry<String, Line>)"], "external_dependencies": {"modules": ["Serializer", "Line", "Entries", "Geometries", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the UTF-8 serialization for Line objects with float coordinates."}, {"name": "testStringLineDoubleSerialization", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": ["SerializersTest.check(Serializer<String, Line>, Entry<String, Line>, Entry<String, Line>)"], "external_dependencies": {"modules": ["Serializer", "Line", "Entries", "Geometries", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the UTF-8 serialization for Line objects with double coordinates."}, {"name": "testAddToFlatBuffers", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": [], "external_dependencies": {"modules": ["RTree", "Entries", "Geometries", "Serializer", "ByteArrayOutputStream", "ByteArrayInputStream", "InternalStructure", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests adding entries to a tree serialized with FlatBuffers."}, {"name": "testDeleteFromFlatBuffers", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": [], "external_dependencies": {"modules": ["RTree", "Entries", "Geometries", "Serializer", "ByteArrayOutputStream", "ByteArrayInputStream", "InternalStructure", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests deleting entries from a tree serialized with FlatBuffers."}, {"name": "testAddToFlatBuffersWhenRootNodeIsNonLeaf", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": [], "external_dependencies": {"modules": ["RTree", "Entries", "Geometries", "Serializer", "ByteArrayOutputStream", "ByteArrayInputStream", "InternalStructure", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests adding entries to a tree serialized with FlatBuffers when the root node is non-leaf."}, {"name": "testDeleteFromFlatBuffersWhenRootNodeIsNonLeaf", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": [], "external_dependencies": {"modules": ["RTree", "Entries", "Geometries", "Serializer", "ByteArrayOutputStream", "ByteArrayInputStream", "InternalStructure", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests deleting entries from a tree serialized with FlatBuffers when the root node is non-leaf."}, {"name": "canRoundTripEmptyTree", "primary_tested": ["Serializers.flatBuffers().utf8()"], "associated_methods": [], "external_dependencies": {"modules": ["RTree", "Serializer", "ByteArrayOutputStream", "ByteArrayInputStream", "InternalStructure", "IOException"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the round-trip serialization of an empty tree."}, {"name": "isUtilityClass", "primary_tested": ["Asserts.assertIsUtilityClass(Class<?>)", "Serializers.class"], "associated_methods": [], "external_dependencies": {"modules": ["Asserts", "Serializers"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the Serializers class is a utility class."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/geometry/GeometriesTest.java", "testclass_name": "GeometriesTest", "dependencies": ["package com.github.davidmoten.rtree.geometry;", "import static org.junit.Assert.assertEquals;", "import org.junit.Test;", "import com.github.davidmoten.junit.Asserts;"], "name": "GeometriesTest", "description": "Unit tests for the Geometries class, focusing on normalization of longitude and creation of geographic rectangles and points.", "class_members": {"variables": [{"name": "PRECISION", "type": "static final double"}]}, "test_cases": [{"name": "testPrivateConstructorForCoverageOnly", "primary_tested": ["Asserts.assertIsUtilityClass(Class)"], "external_dependencies": {"modules": ["com.github.davidmoten.junit.Asserts", "com.github.davidmoten.rtree.geometry.Geometries"], "project_specific_resources": ["Asserts.assertIsUtilityClass(Class)"]}, "category": "unit", "description": "Tests the utility class assertion for Geometries."}, {"name": "testNormalizeLongitude", "primary_tested": ["Geometries.normalizeLongitude(double)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the normalization of longitude at 0 degrees."}, {"name": "testNormalizeLongitude2", "primary_tested": ["Geometries.normalizeLongitude(double)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the normalization of longitude at 89 degrees."}, {"name": "testNormalizeLongitude3", "primary_tested": ["Geometries.normalizeLongitude(double)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the normalization of longitude at 179 degrees."}, {"name": "testNormalizeLongitude3_1", "primary_tested": ["Geometries.normalizeLongitude(double)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the normalization of longitude at 180 degrees."}, {"name": "testNormalizeLongitude3_2", "primary_tested": ["Geometries.normalizeLongitude(double)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the normalization of longitude at -180 degrees."}, {"name": "testNormalizeLongitude3_3", "primary_tested": ["Geometries.normalizeLongitude(double)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the normalization of longitude at -179 degrees."}, {"name": "testNormalizeLongitude3_4", "primary_tested": ["Geometries.normalizeLongitude(double)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the normalization of longitude at -181 degrees."}, {"name": "testNormalizeLongitude4", "primary_tested": ["Geometries.normalizeLongitude(double)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the normalization of longitude at 181 degrees."}, {"name": "testNormalizeLongitude5", "primary_tested": ["Geometries.normalizeLongitude(double)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the normalization of longitude at 541 degrees."}, {"name": "testNormalizeLongitude2Neg", "primary_tested": ["Geometries.normalizeLongitude(double)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the normalization of longitude at -89 degrees."}, {"name": "testNormalizeLongitude3Neg", "primary_tested": ["Geometries.normalizeLongitude(double)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the normalization of longitude at -179 degrees."}, {"name": "testNormalizeLongitude4Neg", "primary_tested": ["Geometries.normalizeLongitude(double)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the normalization of longitude at -181 degrees."}, {"name": "testNormalizeLongitude5Neg", "primary_tested": ["Geometries.normalizeLongitude(double)"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the normalization of longitude at -541 degrees."}, {"name": "testRectangleLatLong", "primary_tested": ["Geometries.rectangleGeographic(double,double,double,double)"], "associated_methods": ["Rectangle.x1()", "Rectangle.x2()", "Rectangle.y1()", "Rectangle.y2()"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries", "com.github.davidmoten.rtree.geometry.Rectangle"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a geographic rectangle and its properties."}, {"name": "testRectangleLatLong2", "primary_tested": ["Geometries.rectangleGeographic(double,double,double,double)"], "associated_methods": ["Rectangle.x1()", "Rectangle.x2()"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries", "com.github.davidmoten.rtree.geometry.Rectangle"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of another geographic rectangle and its properties."}, {"name": "testPointLatLong", "primary_tested": ["Geometries.pointGeographic(double,double)"], "associated_methods": ["Point.x()", "Point.y()"], "external_dependencies": {"modules": ["com.github.davidmoten.rtree.geometry.Geometries", "com.github.davidmoten.rtree.geometry.Point"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the creation of a geographic point and its properties."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueueTest.java", "testclass_name": "BoundedPriorityQueueTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static com.github.davidmoten.rtree.internal.util.BoundedPriorityQueue.create;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import java.util.Comparator;", "import org.junit.Test;", "import com.github.davidmoten.guavamini.Sets;"], "name": "BoundedPriorityQueueTest", "description": "Unit tests for the BoundedPriorityQueue class, focusing on its behavior with different input scenarios and edge cases.", "class_members": {"variables": [{"name": "comparator", "type": "static final Comparator<Integer>"}]}, "fixtures": [], "test_cases": [{"name": "emptyQueueAsListIsEmpty", "primary_tested": ["BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that an empty queue returns an empty list."}, {"name": "singleItemReturnsSingleItem", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with a single item returns a list with that single item."}, {"name": "twoItemsReturnsSingleItemWhenMaxIsOne", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with two items and a max size of one returns a list with the smallest item."}, {"name": "twoItemsReturnsSingleItemWhenMaxIsOneInputOrderFlipped", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with two items and a max size of one returns a list with the smallest item, even when input order is flipped."}, {"name": "threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderFlipped", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of two returns a list with the two smallest items, even when input order is flipped."}, {"name": "threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderIncreasing", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of two returns a list with the two smallest items, even when input order is increasing."}, {"name": "threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderMixed", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of two returns a list with the two smallest items, even when input order is mixed."}, {"name": "threeItemsReturnsTwoItemsWhenMaxIsOneInputOrderMixed2", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of two returns a list with the two smallest items, even when input order is mixed."}, {"name": "threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderFlipped", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of ten returns a list with all three items, even when input order is flipped."}, {"name": "threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderIncreasing", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of ten returns a list with all three items, even when input order is increasing."}, {"name": "threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderMixed", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of ten returns a list with all three items, even when input order is mixed."}, {"name": "threeItemsReturnsThreeItemsWhenMaxIsOneInputOrderMixed2", "primary_tested": ["BoundedPriorityQueue.add(Integer)", "BoundedPriorityQueue.asList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator", "Sets"], "class_members": [{"name": "comparator", "type": "variable"}], "project_specific_resources": ["Sets.newHashSet(Integer)"]}, "category": "unit", "description": "Tests that a queue with three items and a max size of ten returns a list with all three items, even when input order is mixed."}, {"name": "testInstantiateWithNegativeSizeThrowsIAE", "primary_tested": ["BoundedPriorityQueue.create(int,Comparator)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that instantiating a queue with a negative size throws an IllegalArgumentException."}, {"name": "testInstantiateWithZeroSizeThrowsIAE", "primary_tested": ["BoundedPriorityQueue.create(int,Comparator)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that instantiating a queue with a size of zero throws an IllegalArgumentException."}, {"name": "testAddNullThrowsNPE", "primary_tested": ["BoundedPriorityQueue.add(Integer)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "Comparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "description": "Tests that adding a null item to the queue throws a NullPointerException."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/geometry/RectangleTest.java", "testclass_name": "RectangleTest", "dependencies": ["package com.github.davidmoten.rtree.geometry;", "import static com.github.davidmoten.rtree.geometry.Geometries.rectangle;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;"], "name": "RectangleTest", "description": "Unit tests for the Rectangle class, focusing on distance calculations, equality, intersection, and containment.", "class_members": {"variables": [{"name": "PRECISION", "type": "static final double"}]}, "fixtures": [], "test_cases": [{"name": "testDistanceToSelfIsZero", "primary_tested": ["Rectangle.distance(Rectangle)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests that the distance from a rectangle to itself is zero."}, {"name": "testXParametersWrongOrderThrowsException", "primary_tested": ["Geometries.rectangle(double,double,double,double)"], "external_dependencies": {"modules": ["Geometries"]}, "category": "unit", "description": "Tests that an IllegalArgumentException is thrown when the x parameters are in the wrong order."}, {"name": "testYParametersWrongOrderThrowsException", "primary_tested": ["Geometries.rectangle(double,double,double,double)"], "external_dependencies": {"modules": ["Geometries"]}, "category": "unit", "description": "Tests that an IllegalArgumentException is thrown when the y parameters are in the wrong order."}, {"name": "testDistanceToOverlapIsZero", "primary_tested": ["Rectangle.distance(Rectangle)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests that the distance between two overlapping rectangles is zero."}, {"name": "testDistanceWhenSeparatedByXOnly", "primary_tested": ["Rectangle.distance(Rectangle)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the distance between two rectangles separated only by the x-axis."}, {"name": "testDistanceWhenSeparatedByXOnlyAndOverlapOnY", "primary_tested": ["Rectangle.distance(Rectangle)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the distance between two rectangles separated only by the x-axis but overlapping on the y-axis."}, {"name": "testDistanceWhenSeparatedByDiagonally", "primary_tested": ["Rectangle.distance(Rectangle)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"], "class_members": [{"name": "PRECISION", "type": "variable"}]}, "category": "unit", "description": "Tests the distance between two rectangles separated diagonally."}, {"name": "testInequalityWithNull", "primary_tested": ["Rectangle.equals(Object)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests that a rectangle is not equal to null."}, {"name": "testSimpleEquality", "primary_tested": ["Rectangle.equals(Object)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests simple equality between two identical rectangles."}, {"name": "testSimpleInEquality1", "primary_tested": ["Rectangle.equals(Object)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests inequality between two rectangles with different y-max values."}, {"name": "testSimpleInEquality2", "primary_tested": ["Rectangle.equals(Object)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests inequality between two rectangles with different x-min values."}, {"name": "testSimpleInEquality3", "primary_tested": ["Rectangle.equals(Object)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests inequality between two rectangles with different y-min values."}, {"name": "testSimpleInEquality4", "primary_tested": ["Rectangle.equals(Object)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests inequality between two rectangles with different x-max values."}, {"name": "testGeometry", "primary_tested": ["Rectangle.geometry()"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests that the geometry method returns the same rectangle."}, {"name": "testIntersects", "primary_tested": ["Rectangle.intersects(Rectangle)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests that two intersecting rectangles return true for the intersects method."}, {"name": "testIntersectsNoRectangleContainsCornerOfAnother", "primary_tested": ["Rectangle.intersects(Rectangle)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests that two rectangles intersecting without containing each other's corners return true for the intersects method."}, {"name": "testIntersectsOneRectangleContainsTheOther", "primary_tested": ["Rectangle.intersects(Rectangle)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests that a rectangle containing another rectangle returns true for the intersects method."}, {"name": "testIntersectsOneRectangleReturnsTrueDespiteZeroArea", "primary_tested": ["Rectangle.intersects(Rectangle)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests that a rectangle intersecting another rectangle with zero area returns true for the intersects method."}, {"name": "testContains", "primary_tested": ["Rectangle.contains(double,double)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests that a point within a rectangle returns true for the contains method."}, {"name": "testContainsReturnsFalseWhenLessThanMinY", "primary_tested": ["Rectangle.contains(double,double)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests that a point with y less than the rectangle's min y returns false for the contains method."}, {"name": "testContainsReturnsFalseWhenGreaterThanMaxY", "primary_tested": ["Rectangle.contains(double,double)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests that a point with y greater than the rectangle's max y returns false for the contains method."}, {"name": "testContainsReturnsFalseWhenGreaterThanMaxX", "primary_tested": ["Rectangle.contains(double,double)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests that a point with x greater than the rectangle's max x returns false for the contains method."}, {"name": "testContainsReturnsFalseWhenLessThanMinX", "primary_tested": ["Rectangle.contains(double,double)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests that a point with x less than the rectangle's min x returns false for the contains method."}, {"name": "testIntersectionAreWhenEqual", "primary_tested": ["Rectangle.intersectionArea(Rectangle)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests the intersection area of two identical rectangles."}, {"name": "testIntersectionAreaWhenDontIntersect", "primary_tested": ["Rectangle.intersectionArea(Rectangle)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests the intersection area of two non-intersecting rectangles."}, {"name": "testIntersectionAreaCornerIntersect", "primary_tested": ["Rectangle.intersectionArea(Rectangle)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests the intersection area of two rectangles intersecting at a corner."}, {"name": "testIntersectionAreaTopIntersect", "primary_tested": ["Rectangle.intersectionArea(Rectangle)"], "external_dependencies": {"modules": ["Rectangle", "Geometries"]}, "category": "unit", "description": "Tests the intersection area of two rectangles intersecting at the top."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/geometry/LineTest.java", "testclass_name": "LineTest", "dependencies": ["package com.github.davidmoten.rtree.geometry;", "import static com.github.davidmoten.rtree.geometry.Geometries.point;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import java.awt.geom.Line2D;", "import org.junit.Test;"], "name": "LineTest", "description": "Unit tests for the Line class, focusing on intersection and distance calculations with other geometric shapes.", "class_members": {"variables": [{"name": "PRECISION", "type": "static final double"}]}, "fixtures": [], "test_cases": [{"name": "testDoesIntersectOtherLine", "primary_tested": ["Intersects.lineIntersectsLine(Line,Line)"], "external_dependencies": {"modules": ["Line", "Intersects"]}, "category": "unit", "description": "Tests if two lines intersect."}, {"name": "testDoesNotIntersectLine", "primary_tested": ["Intersects.lineIntersectsLine(Line,Line)"], "external_dependencies": {"modules": ["Line", "Intersects"]}, "category": "unit", "description": "Tests if two lines do not intersect."}, {"name": "testDoesIntersectRectangle", "primary_tested": ["Intersects.lineIntersectsRectangle(Line,Rectangle)"], "external_dependencies": {"modules": ["Line", "Rectangle", "Intersects"]}, "category": "unit", "description": "Tests if a line intersects a rectangle."}, {"name": "testDoesNotIntersectRectangle", "primary_tested": ["Intersects.lineIntersectsRectangle(Line,Rectangle)"], "external_dependencies": {"modules": ["Line", "Rectangle", "Intersects"]}, "category": "unit", "description": "Tests if a line does not intersect a rectangle."}, {"name": "testLineIntersectsCircle", "primary_tested": ["Intersects.lineIntersectsCircle(Line,Circle)"], "external_dependencies": {"modules": ["Line", "Circle", "Intersects"]}, "category": "unit", "description": "Tests if a line intersects a circle."}, {"name": "testLineDoesNotIntersectCircle", "primary_tested": ["Intersects.lineIntersectsCircle(Line,Circle)"], "external_dependencies": {"modules": ["Line", "Circle", "Intersects"]}, "category": "unit", "description": "Tests if a line does not intersect a circle."}, {"name": "testLineDoesNotIntersectCircleEast", "primary_tested": ["Intersects.lineIntersectsCircle(Line,Circle)"], "external_dependencies": {"modules": ["Line", "Circle", "Intersects"]}, "category": "unit", "description": "Tests if a line does not intersect a circle to the east."}, {"name": "testLineDoesIntersectCircleEast", "primary_tested": ["Intersects.lineIntersectsCircle(Line,Circle)"], "external_dependencies": {"modules": ["Line", "Circle", "Intersects"]}, "category": "unit", "description": "Tests if a line intersects a circle to the east."}, {"name": "testLineDoesNotIntersectCircleWest", "primary_tested": ["Intersects.lineIntersectsCircle(Line,Circle)"], "external_dependencies": {"modules": ["Line", "Circle", "Intersects"]}, "category": "unit", "description": "Tests if a line does not intersect a circle to the west."}, {"name": "testLineDoesIntersectCircleWest", "primary_tested": ["Intersects.lineIntersectsCircle(Line,Circle)"], "external_dependencies": {"modules": ["Line", "Circle", "Intersects"]}, "category": "unit", "description": "Tests if a line intersects a circle to the west."}, {"name": "testLineDoesNotIntersectCircleNorth", "primary_tested": ["Intersects.lineIntersectsCircle(Line,Circle)"], "external_dependencies": {"modules": ["Line", "Circle", "Intersects"]}, "category": "unit", "description": "Tests if a line does not intersect a circle to the north."}, {"name": "testLineDoesNotIntersectCircleSouth", "primary_tested": ["Intersects.lineIntersectsCircle(Line,Circle)"], "external_dependencies": {"modules": ["Line", "Circle", "Intersects"]}, "category": "unit", "description": "Tests if a line does not intersect a circle to the south."}, {"name": "testLineDoesIntersectCircleSouth", "primary_tested": ["Intersects.lineIntersectsCircle(Line,Circle)"], "external_dependencies": {"modules": ["Line", "Circle", "Intersects"]}, "category": "unit", "description": "Tests if a line intersects a circle to the south."}, {"name": "testLineMbr", "primary_tested": ["Line.mbr()"], "external_dependencies": {"modules": ["Line", "Rectangle"]}, "category": "unit", "description": "Tests the minimum bounding rectangle (MBR) of a line."}, {"name": "testLineSameXWithinCircle", "primary_tested": ["Intersects.lineIntersectsCircle(Line,Circle)"], "external_dependencies": {"modules": ["Line", "Circle", "Intersects"]}, "category": "unit", "description": "Tests if a line with the same X coordinates intersects a circle."}, {"name": "testLineIsPointWithinCircle", "primary_tested": ["Intersects.lineIntersectsCircle(Line,Circle)"], "external_dependencies": {"modules": ["Line", "Circle", "Intersects"]}, "category": "unit", "description": "Tests if a line that is a point intersects a circle."}, {"name": "testLineIsPointOutsideCircle", "primary_tested": ["Intersects.lineIntersectsCircle(Line,Circle)"], "external_dependencies": {"modules": ["Line", "Circle", "Intersects"]}, "category": "unit", "description": "Tests if a line that is a point does not intersect a circle."}, {"name": "testLineDistanceToRectangle", "primary_tested": ["Line.distance(Rectangle)"], "external_dependencies": {"modules": ["Line", "Rectangle"]}, "category": "unit", "description": "Tests the distance from a line to a rectangle."}, {"name": "testLineDistanceToRectangleIsZeroWhenOneEndIsInside", "primary_tested": ["Line.distance(Rectangle)"], "external_dependencies": {"modules": ["Line", "Rectangle"]}, "category": "unit", "description": "Tests if the distance from a line to a rectangle is zero when one end of the line is inside the rectangle."}, {"name": "testLineDistanceToRectangleIsZeroWhenOtherEndIsInside", "primary_tested": ["Line.distance(Rectangle)"], "external_dependencies": {"modules": ["Line", "Rectangle"]}, "category": "unit", "description": "Tests if the distance from a line to a rectangle is zero when the other end of the line is inside the rectangle."}, {"name": "testLineDistanceToRectangleIsZeroWhenContainsWestEdge", "primary_tested": ["Line.distance(Rectangle)"], "external_dependencies": {"modules": ["Line", "Rectangle"]}, "category": "unit", "description": "Tests if the distance from a line to a rectangle is zero when the line contains the west edge of the rectangle."}, {"name": "testLineDistanceToRectangleIsZeroWhenContainsNorthEdge", "primary_tested": ["Line.distance(Rectangle)"], "external_dependencies": {"modules": ["Line", "Rectangle"]}, "category": "unit", "description": "Tests if the distance from a line to a rectangle is zero when the line contains the north edge of the rectangle."}, {"name": "testLineDistanceToRectangleIsZeroWhenContainsSouthEdge", "primary_tested": ["Line.distance(Rectangle)"], "external_dependencies": {"modules": ["Line", "Rectangle"]}, "category": "unit", "description": "Tests if the distance from a line to a rectangle is zero when the line contains the south edge of the rectangle."}, {"name": "testLineDistanceToRectangleIsZeroWhenContainsEastEdge", "primary_tested": ["Line.distance(Rectangle)"], "external_dependencies": {"modules": ["Line", "Rectangle"]}, "category": "unit", "description": "Tests if the distance from a line to a rectangle is zero when the line contains the east edge of the rectangle."}, {"name": "testLineDoesNotIntersectsPoint", "primary_tested": ["Line.intersects(Point)"], "external_dependencies": {"modules": ["Line", "Point"]}, "category": "unit", "description": "Tests if a line does not intersect a point."}, {"name": "testLineDoesIntersectPoint", "primary_tested": ["Line.intersects(Point)"], "external_dependencies": {"modules": ["Line", "Point"]}, "category": "unit", "description": "Tests if a line intersects a point."}, {"name": "testLineDoubleIntersectsWithHorizontalLine", "primary_tested": ["Line2D.Double.intersectsLine(double,double,double,double)"], "associated_methods": ["Line.intersects(Rectangle)"], "external_dependencies": {"modules": ["Line", "Line2D"]}, "category": "unit", "description": "Tests if a line intersects a horizontal line using Line2D.Double."}, {"name": "testLineFloatIntersectsWithHorizontalLine", "primary_tested": ["Line2D.Float.intersectsLine(float,float,float,float)"], "associated_methods": ["Line.intersects(Rectangle)"], "external_dependencies": {"modules": ["Line", "Line2D"]}, "category": "unit", "description": "Tests if a line intersects a horizontal line using Line2D.Float."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/RTreeTest.java", "testclass_name": "RTreeTest", "dependencies": ["package com.github.davidmoten.rtree;", "import static com.github.davidmoten.rtree.Entries.entry;", "import static com.github.davidmoten.rtree.geometry.Geometries.circle;", "import static com.github.davidmoten.rtree.geometry.Geometries.line;", "import static com.github.davidmoten.rtree.geometry.Geometries.point;", "import static com.github.davidmoten.rtree.geometry.Geometries.rectangle;", "import static com.github.davidmoten.rtree.geometry.Intersects.pointIntersectsCircle;", "import static com.github.davidmoten.rtree.geometry.Intersects.rectangleIntersectsCircle;", "import static java.util.Arrays.asList;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertNotNull;", "import static org.junit.Assert.assertTrue;", "import java.io.File;", "import java.io.IOException;", "import java.io.RandomAccessFile;", "import java.nio.channels.FileLock;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Optional;", "import java.util.Set;", "import java.util.concurrent.atomic.AtomicBoolean;", "import java.util.concurrent.atomic.AtomicInteger;", "import org.junit.Test;", "import com.github.davidmoten.guavamini.Lists;", "import com.github.davidmoten.guavamini.Sets;", "import com.github.davidmoten.rtree.fbs.FactoryFlatBuffers;", "import com.github.davidmoten.rtree.geometry.Circle;", "import com.github.davidmoten.rtree.geometry.Geometries;", "import com.github.davidmoten.rtree.geometry.Geometry;", "import com.github.davidmoten.rtree.geometry.HasGeometry;", "import com.github.davidmoten.rtree.geometry.Intersects;", "import com.github.davidmoten.rtree.geometry.Point;", "import com.github.davidmoten.rtree.geometry.Rectangle;", "import com.github.davidmoten.rtree.internal.EntryDefault;", "import com.github.davidmoten.rtree.internal.Functions;", "import rx.Observable;", "import rx.Subscriber;", "import rx.functions.Action1;", "import rx.functions.Func1;", "import rx.functions.Func2;", "import rx.observables.GroupedObservable;"]}]