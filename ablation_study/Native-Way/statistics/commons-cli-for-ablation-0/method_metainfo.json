[{"uris": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java.Options_addRequiredOptionTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        options = new Options();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java", "class_name": "Options_addRequiredOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java.Options_addRequiredOptionTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatter_printOptionsTest.java.HelpFormatter_printOptionsTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        formatter = new HelpFormatter();\n        sw = new StringWriter();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatter_printOptionsTest.java", "class_name": "HelpFormatter_printOptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatter_printOptionsTest.java.HelpFormatter_printOptionsTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @BeforeEach\n    public void setUp()", "original_string": "    @Override\n    @BeforeEach\n    public void setUp() {\n        super.setUp();\n        parser = new DefaultParser();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DefaultParserTest.java", "class_name": "DefaultParserTest", "class_uri": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest", "attributes": {"modifiers": "@Override\n    @BeforeEach\n    public", "marker_annotations": ["@Override", "@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest.[Stream<Date>]createDateFixtures()", "name": "createDateFixtures", "arg_nums": 0, "params": [], "return_type": "Stream<Date>", "signature": "private static Stream<Date> createDateFixtures()", "original_string": "    private static Stream<Date> createDateFixtures() {\n        return Stream.of(Date.from(Instant.EPOCH), Date.from(Instant.ofEpochSecond(0)), Date.from(Instant.ofEpochSecond(40_000)));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "class_name": "TypeHandlerTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Date>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest.[Stream<Arguments>]createValueTestParameters()", "name": "createValueTestParameters", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> createValueTestParameters()", "original_string": "    private static Stream<Arguments> createValueTestParameters() throws MalformedURLException {\n        // force the PatternOptionBuilder to load / modify the TypeHandler table.\n        @SuppressWarnings(\"unused\")\n        final Class<?> loadStatic = PatternOptionBuilder.FILES_VALUE;\n        // reset the type handler table.\n        // TypeHandler.resetConverters();\n        final List<Arguments> list = new ArrayList<>();\n\n        /*\n         * Dates calculated from strings are dependent upon configuration and environment settings for the machine on which the test is running. To avoid this\n         * problem, convert the time into a string and then unparse that using the converter. This produces strings that always match the correct time zone.\n         */\n        final Date date = new Date(1023400137000L);\n        final DateFormat dateFormat = new SimpleDateFormat(\"EEE MMM dd HH:mm:ss zzz yyyy\");\n\n        list.add(Arguments.of(Instantiable.class.getName(), PatternOptionBuilder.CLASS_VALUE, Instantiable.class));\n        list.add(Arguments.of(\"what ever\", PatternOptionBuilder.CLASS_VALUE, ParseException.class));\n\n        list.add(Arguments.of(\"what ever\", PatternOptionBuilder.DATE_VALUE, ParseException.class));\n        list.add(Arguments.of(dateFormat.format(date), PatternOptionBuilder.DATE_VALUE, date));\n        list.add(Arguments.of(\"Jun 06 17:48:57 EDT 2002\", PatternOptionBuilder.DATE_VALUE, ParseException.class));\n\n        list.add(Arguments.of(\"non-existing.file\", PatternOptionBuilder.EXISTING_FILE_VALUE, ParseException.class));\n\n        list.add(Arguments.of(\"some-file.txt\", PatternOptionBuilder.FILE_VALUE, new File(\"some-file.txt\")));\n\n        list.add(Arguments.of(\"some-path.txt\", Path.class, new File(\"some-path.txt\").toPath()));\n\n        // the PatternOptionBuilder.FILES_VALUE is not registered so it should just return the string\n        list.add(Arguments.of(\"some.files\", PatternOptionBuilder.FILES_VALUE, \"some.files\"));\n\n        list.add(Arguments.of(\"just-a-string\", Integer.class, ParseException.class));\n        list.add(Arguments.of(\"5\", Integer.class, 5));\n        list.add(Arguments.of(\"5.5\", Integer.class, ParseException.class));\n        list.add(Arguments.of(Long.toString(Long.MAX_VALUE), Integer.class, ParseException.class));\n\n        list.add(Arguments.of(\"just-a-string\", Long.class, ParseException.class));\n        list.add(Arguments.of(\"5\", Long.class, 5L));\n        list.add(Arguments.of(\"5.5\", Long.class, ParseException.class));\n\n        list.add(Arguments.of(\"just-a-string\", Short.class, ParseException.class));\n        list.add(Arguments.of(\"5\", Short.class, (short) 5));\n        list.add(Arguments.of(\"5.5\", Short.class, ParseException.class));\n        list.add(Arguments.of(Integer.toString(Integer.MAX_VALUE), Short.class, ParseException.class));\n\n        list.add(Arguments.of(\"just-a-string\", Byte.class, ParseException.class));\n        list.add(Arguments.of(\"5\", Byte.class, (byte) 5));\n        list.add(Arguments.of(\"5.5\", Byte.class, ParseException.class));\n        list.add(Arguments.of(Short.toString(Short.MAX_VALUE), Byte.class, ParseException.class));\n\n        list.add(Arguments.of(\"just-a-string\", Character.class, 'j'));\n        list.add(Arguments.of(\"5\", Character.class, '5'));\n        list.add(Arguments.of(\"5.5\", Character.class, '5'));\n        list.add(Arguments.of(\"\\\\u0124\", Character.class, Character.toChars(0x0124)[0]));\n\n        list.add(Arguments.of(\"just-a-string\", Double.class, ParseException.class));\n        list.add(Arguments.of(\"5\", Double.class, 5d));\n        list.add(Arguments.of(\"5.5\", Double.class, 5.5));\n\n        list.add(Arguments.of(\"just-a-string\", Float.class, ParseException.class));\n        list.add(Arguments.of(\"5\", Float.class, 5f));\n        list.add(Arguments.of(\"5.5\", Float.class, 5.5f));\n        list.add(Arguments.of(Double.toString(Double.MAX_VALUE), Float.class, Float.POSITIVE_INFINITY));\n\n        list.add(Arguments.of(\"just-a-string\", BigInteger.class, ParseException.class));\n        list.add(Arguments.of(\"5\", BigInteger.class, new BigInteger(\"5\")));\n        list.add(Arguments.of(\"5.5\", BigInteger.class, ParseException.class));\n\n        list.add(Arguments.of(\"just-a-string\", BigDecimal.class, ParseException.class));\n        list.add(Arguments.of(\"5\", BigDecimal.class, new BigDecimal(\"5\")));\n        list.add(Arguments.of(\"5.5\", BigDecimal.class, new BigDecimal(5.5)));\n\n        list.add(Arguments.of(\"1.5\", PatternOptionBuilder.NUMBER_VALUE, Double.valueOf(1.5)));\n        list.add(Arguments.of(\"15\", PatternOptionBuilder.NUMBER_VALUE, Long.valueOf(15)));\n        list.add(Arguments.of(\"not a number\", PatternOptionBuilder.NUMBER_VALUE, ParseException.class));\n\n        list.add(Arguments.of(Instantiable.class.getName(), PatternOptionBuilder.OBJECT_VALUE, new Instantiable()));\n        list.add(Arguments.of(NotInstantiable.class.getName(), PatternOptionBuilder.OBJECT_VALUE, ParseException.class));\n        list.add(Arguments.of(\"unknown\", PatternOptionBuilder.OBJECT_VALUE, ParseException.class));\n\n        list.add(Arguments.of(\"String\", PatternOptionBuilder.STRING_VALUE, \"String\"));\n\n        final String urlString = \"https://commons.apache.org\";\n        list.add(Arguments.of(urlString, PatternOptionBuilder.URL_VALUE, new URL(urlString)));\n        list.add(Arguments.of(\"Malformed-url\", PatternOptionBuilder.URL_VALUE, ParseException.class));\n\n        return list.stream();\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "class_name": "TypeHandlerTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        option1 = Option.builder(\"o\").longOpt(\"option\").build();\n        option2 = Option.builder(\"o\").longOpt(\"option\").build();\n        option3 = Option.builder(\"p\").longOpt(\"anotherOption\").build();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_equalsTest.java", "class_name": "Option_equalsTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java.ArgumentIsOptionTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        options = new Options().addOption(\"p\", false, \"Option p\").addOption(\"attr\", true, \"Option accepts argument\");\n        parser = new PosixParser();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java", "class_name": "ArgumentIsOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java.ArgumentIsOptionTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/SolrCliTest.java.SolrCliTest.[String]getDefaultSolrUrl()", "name": "getDefaultSolrUrl", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public static String getDefaultSolrUrl()", "original_string": "    public static String getDefaultSolrUrl() {\n        final String scheme = \"http\";\n        final String host = \"localhost\";\n        final String port = \"8983\";\n        return String.format(Locale.ROOT, \"%s://%s:%s\", scheme.toLowerCase(Locale.ROOT), host, port);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/SolrCliTest.java", "class_name": "SolrCliTest", "class_uri": "src/test/java/org/apache/commons/cli/SolrCliTest.java.SolrCliTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": " @formatter:on"}, {"uris": "src/test/java/org/apache/commons/cli/Options_addOptionGroupTest.java.Options_addOptionGroupTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        options = new Options();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_addOptionGroupTest.java", "class_name": "Options_addOptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_addOptionGroupTest.java.Options_addOptionGroupTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/SolrCreateToolTest.java.SolrCreateToolTest.[List<Option>]getOptions()", "name": "getOptions", "arg_nums": 0, "params": [], "return_type": "List<Option>", "signature": "public List<Option> getOptions()", "original_string": "    public List<Option> getOptions() {\n        // @formatter:off\n        return Arrays.asList(\n            SolrCliTest.OPTION_ZKHOST,\n            SolrCliTest.OPTION_SOLRURL,\n            SolrCliTest.OPTION_ZKHOST_DEPRECATED,\n            SolrCliTest.OPTION_SOLRURL,\n            Option.builder(\"c\")\n                .longOpt(\"name\")\n                .argName(\"NAME\")\n                .hasArg()\n                .required(true)\n                .desc(\"Name of collection or core to create.\")\n                .build(),\n            Option.builder(\"s\")\n                .longOpt(\"shards\")\n                .argName(\"#\")\n                .hasArg()\n                .required(false)\n                .desc(\"Number of shards; default is 1.\")\n                .build(),\n            Option.builder(\"rf\")\n                .longOpt(\"replication-factor\")\n                .argName(\"#\")\n                .hasArg()\n                .required(false)\n                .desc(\"Number of copies of each document across the collection (replicas per shard); default is 1.\")\n                .build(),\n            Option.builder(\"d\")\n                .longOpt(\"confdir\")\n                .argName(\"NAME\")\n                .hasArg()\n                .required(false)\n                .desc(\"Configuration directory to copy when creating the new collection; default is \"\n                        + SolrCliTest.DEFAULT_CONFIG_SET\n                        + '.')\n                .build(),\n            Option.builder(\"n\")\n                .longOpt(\"confname\")\n                .argName(\"NAME\")\n                .hasArg()\n                .required(false)\n                .desc(\"Configuration name; default is the collection name.\")\n                .build(),\n            SolrCliTest.OPTION_CREDENTIALS);\n      // @formatter:on\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/SolrCreateToolTest.java", "class_name": "SolrCreateToolTest", "class_uri": "src/test/java/org/apache/commons/cli/SolrCreateToolTest.java.SolrCreateToolTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Option>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/SolrCreateToolTest.java.SolrCreateToolTest.[String]printHelp(HelpFormatter)", "name": "printHelp", "arg_nums": 1, "params": [{"name": "formatter", "type": "HelpFormatter"}], "return_type": "String", "signature": "private String printHelp(final HelpFormatter formatter)", "original_string": "    private String printHelp(final HelpFormatter formatter) {\n        final Options options = new Options();\n        getOptions().forEach(options::addOption);\n        final String cmdLineSyntax = getClass().getName();\n        final StringWriter out = new StringWriter();\n        final PrintWriter pw = new PrintWriter(out);\n        formatter.printHelp(pw, formatter.getWidth(), cmdLineSyntax, null, options, formatter.getLeftPadding(), formatter.getDescPadding(), null, false);\n        pw.flush();\n        final String actual = out.toString();\n        assertTrue(actual.contains(\"-z,--zk-host <HOST>              Zookeeper connection string; unnecessary\"));\n        return actual;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/SolrCreateToolTest.java", "class_name": "SolrCreateToolTest", "class_uri": "src/test/java/org/apache/commons/cli/SolrCreateToolTest.java.SolrCreateToolTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        final Option file = new Option(\"f\", \"file\", false, \"file to process\");\n        final Option dir = new Option(\"d\", \"directory\", false, \"directory to process\");\n        final OptionGroup group = new OptionGroup();\n        group.addOption(file);\n        group.addOption(dir);\n        options = new Options().addOptionGroup(group);\n\n        final Option section = new Option(\"s\", \"section\", false, \"section to process\");\n        final Option chapter = new Option(\"c\", \"chapter\", false, \"chapter to process\");\n        final OptionGroup group2 = new OptionGroup();\n        group2.addOption(section);\n        group2.addOption(chapter);\n\n        options.addOptionGroup(group2);\n\n        final Option importOpt = new Option(null, \"import\", false, \"section to process\");\n        final Option exportOpt = new Option(null, \"export\", false, \"chapter to process\");\n        final OptionGroup group3 = new OptionGroup();\n        group3.addOption(importOpt);\n        group3.addOption(exportOpt);\n        options.addOptionGroup(group3);\n\n        options.addOption(\"r\", \"revision\", false, \"revision number\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "class_name": "OptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[Stream<Arguments>]createHasOptionParameters()", "name": "createHasOptionParameters", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> createHasOptionParameters()", "original_string": "    private static Stream<Arguments> createHasOptionParameters() throws ParseException {\n        final List<Arguments> lst = new ArrayList<>();\n        final Option optT = Option.builder().option(\"T\").longOpt(\"tee\").deprecated().optionalArg(true).build();\n        final Option optU = Option.builder(\"U\").longOpt(\"you\").optionalArg(true).build();\n        final OptionGroup optionGroup = new OptionGroup().addOption(optT).addOption(optU);\n\n        final String[] foobar = { \"foo\", \"bar\" };\n        // T set\n        lst.add(Arguments.of(new String[] {\"-T\"}, optT, optionGroup, true, true, true, true, optT));\n        lst.add(Arguments.of(new String[] {\"-T\", \"foo\"}, optT, optionGroup, true, true, true, true, optT));\n        lst.add(Arguments.of(new String[] {\"--tee\"}, optT, optionGroup, true, true, true, true, optT));\n        lst.add(Arguments.of(new String[] {\"--tee\", \"foo\"}, optT, optionGroup, true, true, true, true, optT));\n\n        lst.add(Arguments.of(new String[] {\"-U\"}, optT, optionGroup, false, false, false, true, optU));\n        lst.add(Arguments.of(new String[] {\"-U\", \"foo\", \"bar\"}, optT, optionGroup, false, false, false, true, optU));\n        lst.add(Arguments.of(new String[] {\"--you\"}, optT, optionGroup, false, false, false, true, optU));\n        lst.add(Arguments.of(new String[] {\"--you\", \"foo\", \"bar\"}, optT, optionGroup, false, false, false, true, optU));\n\n\n        // U set\n        lst.add(Arguments.of(new String[] {\"-T\"}, optU, optionGroup, false, false, true, true, optT));\n        lst.add(Arguments.of(new String[] {\"-T\", \"foo\", \"bar\"}, optU, optionGroup, false, false, true, true, optT));\n        lst.add(Arguments.of(new String[] {\"--tee\"}, optU, optionGroup, false, false, true, true, optT));\n        lst.add(Arguments.of(new String[] {\"--tee\", \"foo\", \"bar\"}, optU, optionGroup, false, false, true, true, optT));\n\n        lst.add(Arguments.of(new String[] {\"-U\"}, optU, optionGroup, false, true, false, true, optU));\n        lst.add(Arguments.of(new String[] {\"-U\", \"foo\", \"bar\"}, optU, optionGroup, false, true, false, true, optU));\n        lst.add(Arguments.of(new String[] {\"--you\"}, optU, optionGroup, false, true, false, true, optU));\n        lst.add(Arguments.of(new String[] {\"--you\", \"foo\", \"bar\"},  optU, optionGroup, false, true, false, true, optU));\n\n        return lst.stream();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[Stream<Arguments>]createOptionValueParameters()", "name": "createOptionValueParameters", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> createOptionValueParameters()", "original_string": "    private static Stream<Arguments> createOptionValueParameters() throws ParseException {\n        final List<Arguments> lst = new ArrayList<>();\n        final Option optT = Option.builder().option(\"T\").longOpt(\"tee\").deprecated().optionalArg(true).build();\n        final Option optU = Option.builder(\"U\").longOpt(\"you\").optionalArg(true).build();\n        final OptionGroup optionGroup = new OptionGroup().addOption(optT).addOption(optU);\n\n        // T set\n        lst.add(Arguments.of(new String[] {\"-T\"}, optT, optionGroup, true, null, true, null, optT));\n        lst.add(Arguments.of(new String[] {\"-T\", \"foo\"}, optT, optionGroup, true, \"foo\", true, \"foo\", optT));\n        lst.add(Arguments.of(new String[] {\"--tee\"}, optT, optionGroup, true, null, true, null, optT));\n        lst.add(Arguments.of(new String[] {\"--tee\", \"foo\"}, optT, optionGroup, true, \"foo\", true, \"foo\", optT));\n\n        lst.add(Arguments.of(new String[] {\"-U\"}, optT, optionGroup, false, null, false, null, optU));\n        lst.add(Arguments.of(new String[] {\"-U\", \"foo\"}, optT, optionGroup, false, null, false, \"foo\", optU));\n        lst.add(Arguments.of(new String[] {\"--you\"}, optT, optionGroup, false, null, false, null, optU));\n        lst.add(Arguments.of(new String[] {\"--you\", \"foo\"}, optT, optionGroup, false, null, false, \"foo\", optU));\n\n\n        // U set\n        lst.add(Arguments.of(new String[] {\"-T\"}, optU, optionGroup, false, null, true, null, optT));\n        lst.add(Arguments.of(new String[] {\"-T\", \"foo\"}, optU, optionGroup, false, null, true, \"foo\", optT));\n        lst.add(Arguments.of(new String[] {\"--tee\"}, optU, optionGroup, false, null, true, null, optT));\n        lst.add(Arguments.of(new String[] {\"--tee\", \"foo\"}, optU, optionGroup, false, null, true, \"foo\", optT));\n\n        lst.add(Arguments.of(new String[] {\"-U\"}, optU, optionGroup, false, null, false, null, optU));\n        lst.add(Arguments.of(new String[] {\"-U\", \"foo\"}, optU, optionGroup, false, \"foo\", false, \"foo\", optU));\n        lst.add(Arguments.of(new String[] {\"--you\"}, optU, optionGroup, false, null, false, null, optU));\n        lst.add(Arguments.of(new String[] {\"--you\", \"foo\"},  optU, optionGroup, false, \"foo\", false, \"foo\", optU));\n\n        return lst.stream();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[Stream<Arguments>]createOptionValuesParameters()", "name": "createOptionValuesParameters", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> createOptionValuesParameters()", "original_string": "    private static Stream<Arguments> createOptionValuesParameters() throws ParseException {\n        final List<Arguments> lst = new ArrayList<>();\n        final Option optT = Option.builder().option(\"T\").longOpt(\"tee\").numberOfArgs(2).deprecated().optionalArg(true).build();\n        final Option optU = Option.builder(\"U\").longOpt(\"you\").numberOfArgs(2).optionalArg(true).build();\n        final OptionGroup optionGroup = new OptionGroup().addOption(optT).addOption(optU);\n\n        final String[] foobar = { \"foo\", \"bar\" };\n        // T set\n        lst.add(Arguments.of(new String[] {\"-T\"}, optT, optionGroup, true, null, true, null, optT));\n        lst.add(Arguments.of(new String[] {\"-T\", \"foo\", \"bar\"}, optT, optionGroup, true, foobar, true, foobar, optT));\n        lst.add(Arguments.of(new String[] {\"--tee\"}, optT, optionGroup, true, null, true, null, optT));\n        lst.add(Arguments.of(new String[] {\"--tee\", \"foo\", \"bar\"}, optT, optionGroup, true, foobar, true, foobar, optT));\n\n        lst.add(Arguments.of(new String[] {\"-U\"}, optT, optionGroup, false, null, false, null, optU));\n        lst.add(Arguments.of(new String[] {\"-U\", \"foo\", \"bar\"}, optT, optionGroup, false, null, false, foobar, optU));\n        lst.add(Arguments.of(new String[] {\"--you\"}, optT, optionGroup, false, null, false, null, optU));\n        lst.add(Arguments.of(new String[] {\"--you\", \"foo\", \"bar\"}, optT, optionGroup, false, null, false, foobar, optU));\n\n\n        // U set\n        lst.add(Arguments.of(new String[] {\"-T\"}, optU, optionGroup, false, null, true, null, optT));\n        lst.add(Arguments.of(new String[] {\"-T\", \"foo\", \"bar\"}, optU, optionGroup, false, null, true, foobar, optT));\n        lst.add(Arguments.of(new String[] {\"--tee\"}, optU, optionGroup, false, null, true, null, optT));\n        lst.add(Arguments.of(new String[] {\"--tee\", \"foo\", \"bar\"}, optU, optionGroup, false, null, true, foobar, optT));\n\n        lst.add(Arguments.of(new String[] {\"-U\"}, optU, optionGroup, false, null, false, null, optU));\n        lst.add(Arguments.of(new String[] {\"-U\", \"foo\", \"bar\"}, optU, optionGroup, false, foobar, false, foobar, optU));\n        lst.add(Arguments.of(new String[] {\"--you\"}, optU, optionGroup, false, null, false, null, optU));\n        lst.add(Arguments.of(new String[] {\"--you\", \"foo\", \"bar\"},  optU, optionGroup, false, foobar, false, foobar, optU));\n\n        return lst.stream();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[Stream<Arguments>]createParsedOptionValueParameters()", "name": "createParsedOptionValueParameters", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> createParsedOptionValueParameters()", "original_string": "    private static Stream<Arguments> createParsedOptionValueParameters() throws ParseException {\n        final List<Arguments> lst = new ArrayList<>();\n        final Option optT = Option.builder().option(\"T\").longOpt(\"tee\").deprecated().type(Integer.class).optionalArg(true).build();\n        final Option optU = Option.builder(\"U\").longOpt(\"you\").type(Integer.class).optionalArg(true).build();\n        final OptionGroup optionGroup = new OptionGroup().addOption(optT).addOption(optU);\n        final Integer expected = Integer.valueOf(1);\n\n        // T set\n        lst.add(Arguments.of(new String[] {\"-T\"}, optT, optionGroup, true, null, true, null, optT));\n        lst.add(Arguments.of(new String[] {\"-T\", \"1\"}, optT, optionGroup, true, expected, true, expected, optT));\n        lst.add(Arguments.of(new String[] {\"--tee\"}, optT, optionGroup, true, null, true, null, optT));\n        lst.add(Arguments.of(new String[] {\"--tee\", \"1\"}, optT, optionGroup, true, expected, true, expected, optT));\n\n        lst.add(Arguments.of(new String[] {\"-U\"}, optT, optionGroup, false, null, false, null, optU));\n        lst.add(Arguments.of(new String[] {\"-U\", \"1\"}, optT, optionGroup, false, null, false, expected, optU));\n        lst.add(Arguments.of(new String[] {\"--you\"}, optT, optionGroup, false, null, false, null, optU));\n        lst.add(Arguments.of(new String[] {\"--you\", \"1\"}, optT, optionGroup, false, null, false, expected, optU));\n\n\n        // U set\n        lst.add(Arguments.of(new String[] {\"-T\"}, optU, optionGroup, false, null, true, null, optT));\n        lst.add(Arguments.of(new String[] {\"-T\", \"1\"}, optU, optionGroup, false, null, true, expected, optT));\n        lst.add(Arguments.of(new String[] {\"--tee\"}, optU, optionGroup, false, null, true, null, optT));\n        lst.add(Arguments.of(new String[] {\"--tee\", \"1\"}, optU, optionGroup, false, null, true, expected, optT));\n\n        lst.add(Arguments.of(new String[] {\"-U\"}, optU, optionGroup, false, null, false, null, optU));\n        lst.add(Arguments.of(new String[] {\"-U\", \"1\"}, optU, optionGroup, false, expected, false, expected, optU));\n        lst.add(Arguments.of(new String[] {\"--you\"}, optU, optionGroup, false, null, false, null, optU));\n        lst.add(Arguments.of(new String[] {\"--you\", \"1\"},  optU, optionGroup, false, expected, false, expected, optU));\n\n        return lst.stream();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[char]asChar(Option)", "name": "asChar", "arg_nums": 1, "params": [{"name": "opt", "type": "Option"}], "return_type": "char", "signature": "char asChar(final Option opt)", "original_string": "    char asChar(final Option opt) {\n        return opt.getOpt().charAt(0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "char", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]assertWritten(boolean,ByteArrayOutputStream)", "name": "assertWritten", "arg_nums": 2, "params": [{"name": "optDep", "type": "boolean"}, {"name": "baos", "type": "ByteArrayOutputStream"}], "return_type": "void", "signature": "private void assertWritten(final boolean optDep, final ByteArrayOutputStream baos)", "original_string": "    private void assertWritten(final boolean optDep, final ByteArrayOutputStream baos) {\n        System.out.flush();\n        if (optDep) {\n            assertEquals(\"Option 'T''tee': Deprecated\", baos.toString().trim());\n        } else {\n            assertEquals(\"\", baos.toString());\n        }\n        baos.reset();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]checkHandler(boolean,List<Option>,Option)", "name": "checkHandler", "arg_nums": 3, "params": [{"name": "optDep", "type": "boolean"}, {"name": "handler", "type": "List<Option>"}, {"name": "opt", "type": "Option"}], "return_type": "void", "signature": "void checkHandler(final boolean optDep, final List<Option> handler, final Option opt)", "original_string": "    void checkHandler(final boolean optDep, final List<Option> handler, final Option opt) {\n        if (optDep) {\n            assertEquals(1, handler.size());\n            assertEquals(opt, handler.get(0));\n        } else {\n            assertEquals(0, handler.size());\n        }\n        handler.clear();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nverifies that the deprecation handler has been called only once or not at all.\n@param optDep {@code true} if the dependency should have been logged.\n@param handler The list that the deprecation is logged to.\n@param opt The option that triggered the logging. May be (@code null} if {@code optDep} is {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java.OptionGroup_toStringTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        optionGroup = new OptionGroup();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java", "class_name": "OptionGroup_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java.OptionGroup_toStringTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @BeforeEach\n    public void setUp()", "original_string": "    @Override\n    @BeforeEach\n    public void setUp() {\n        super.setUp();\n        parser = new BasicParser();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @BeforeEach\n    public", "marker_annotations": ["@Override", "@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java.Options_getOptionTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        options = new Options();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java", "class_name": "Options_getOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java.Options_getOptionTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java.OptionGroup_addOptionTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        optionGroup = new OptionGroup();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java", "class_name": "OptionGroup_addOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java.OptionGroup_addOptionTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @SuppressWarnings(\"deprecation\")\n    @BeforeEach\n    public void setUp()", "original_string": "    @Override\n    @SuppressWarnings(\"deprecation\")\n    @BeforeEach\n    public void setUp() {\n        super.setUp();\n        parser = new PosixParser();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PosixParserTest.java", "class_name": "PosixParserTest", "class_uri": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest", "attributes": {"modifiers": "@Override\n    @SuppressWarnings(\"deprecation\")\n    @BeforeEach\n    public", "marker_annotations": ["@Override", "@BeforeEach"], "non_marker_annotations": ["@SuppressWarnings(\"deprecation\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @BeforeEach\n    public void setUp()", "original_string": "    @Override\n    @BeforeEach\n    public void setUp() {\n        super.setUp();\n        parser = new GnuParser();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @BeforeEach\n    public", "marker_annotations": ["@Override", "@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionValidatorTest.java.OptionValidatorTest.[Stream<Arguments>]optionParameters()", "name": "optionParameters", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> optionParameters()", "original_string": "    private static Stream<Arguments> optionParameters() {\n\n        final List<Arguments> args = new ArrayList<>();\n\n        args.add(Arguments.of(\"CamelCase\", true, \"Camel case error\"));\n        args.add(Arguments.of(\"Snake_case\", true, \"Snake case error\"));\n        args.add(Arguments.of(\"_leadingUnderscore\", true, \"Leading underscore error\"));\n        args.add(Arguments.of(\"kabob-case\", true, \"Kabob case error\"));\n        args.add(Arguments.of(\"-leadingDash\", false, \"Leading dash error\"));\n        args.add(Arguments.of(\"lowercase\", true, \"Lower case error\"));\n        args.add(Arguments.of(\"UPPERCASE\", true, \"Upper case error\"));\n\n        // build passing test cases\n        for (final char c : firstChars.toCharArray()) {\n            final String s = String.format(\"%sMoreText\", c);\n            args.add(Arguments.of(s, true, String.format(\"testing: First character '%s'\", c)));\n        }\n\n        for (final char c : restChars.toCharArray()) {\n            final String s = String.format(\"Some%sText\", c);\n            args.add(Arguments.of(s, true, String.format(\"testing: Middle character '%s'\", c)));\n        }\n\n        // build failing test cases\n        for (final char c : notFirstChars.toCharArray()) {\n            final String s = String.format(\"%sMoreText\", c);\n            args.add(Arguments.of(s, false, String.format(\"testing: Bad first character '%s'\", c)));\n        }\n\n        for (final char c : notRestChars.toCharArray()) {\n            final String s = String.format(\"Some%sText\", c);\n            args.add(Arguments.of(s, false, String.format(\"testing: Bad middle character '%s'\", c)));\n        }\n\n        return args.stream();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionValidatorTest.java", "class_name": "OptionValidatorTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionValidatorTest.java.OptionValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionValidatorTest.java.OptionValidatorTest.[void]setup()", "name": "setup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeAll\n    public static void setup()", "original_string": "    @BeforeAll\n    public static void setup() {\n        StringBuilder sb = new StringBuilder();\n        final StringBuilder sb2 = new StringBuilder();\n        int idx;\n\n        for (final char c : PUNCTUATION.toCharArray()) {\n            if (Character.isJavaIdentifierPart(c)) {\n                sb.append(c);\n            } else {\n                sb2.append(c);\n            }\n        }\n        acceptablePunctuation = sb.toString();\n        notAcceptablePunctuation = sb2.toString();\n\n        sb = new StringBuilder();\n        for (final char c : OptionValidator.ADDITIONAL_LONG_CHARS) {\n            sb.append(c);\n        }\n        additionalLongChars = sb.toString();\n\n        sb = new StringBuilder();\n        for (final char c : OptionValidator.ADDITIONAL_OPTION_CHARS) {\n            sb.append(c);\n        }\n        additionalOptonChars = sb.toString();\n\n        final String javaIdentifierPart = LETTERS + DIGITS + CURRENCY + acceptablePunctuation + COMBINING_MARK\n                + NON_SPACING_MARK + IDENTIFIER_IGNORABLE;\n\n        firstChars = additionalOptonChars + javaIdentifierPart;\n\n        sb = new StringBuilder(notAcceptablePunctuation).append(additionalLongChars);\n        for (final char c : OptionValidator.ADDITIONAL_OPTION_CHARS) {\n            while ((idx = sb.indexOf(Character.toString(c))) > -1) {\n                sb.deleteCharAt(idx);\n            }\n        }\n        notFirstChars = sb.toString();\n\n        restChars = additionalLongChars + javaIdentifierPart;\n        sb = new StringBuilder(notAcceptablePunctuation).append(additionalOptonChars);\n        for (final char c : OptionValidator.ADDITIONAL_LONG_CHARS) {\n            while ((idx = sb.indexOf(Character.toString(c))) > -1) {\n                sb.deleteCharAt(idx);\n            }\n        }\n        notRestChars = sb.toString();\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionValidatorTest.java", "class_name": "OptionValidatorTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionValidatorTest.java.OptionValidatorTest", "attributes": {"modifiers": "@BeforeAll\n    public static", "marker_annotations": ["@BeforeAll"], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_toStringTest.java.Options_toStringTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        options = new Options();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_toStringTest.java", "class_name": "Options_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_toStringTest.java.Options_toStringTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java.HelpFormatter_printUsageTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        formatter = new HelpFormatter();\n        sw = new StringWriter();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java", "class_name": "HelpFormatter_printUsageTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java.HelpFormatter_printUsageTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[Stream<Arguments>]deprecatedOptionsProvider()", "name": "deprecatedOptionsProvider", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "static Stream<Arguments> deprecatedOptionsProvider()", "original_string": "    static Stream<Arguments> deprecatedOptionsProvider() {\n        final List<Arguments> lst = new ArrayList<>();\n        Option option = Option.builder(\"a\").longOpt(\"aaa\").desc(\"dddd dddd dddd\")\n                .deprecated(DeprecatedAttributes.builder().setForRemoval(true).setSince(\"now\")\n                        .setDescription(\"Why why why\").get())\n                .build();\n\n        HelpFormatter hf = HelpFormatter.builder().get();\n        lst.add(Arguments.of(hf, option, \"[Deprecated] dddd dddd dddd\"));\n\n\n        hf = HelpFormatter.builder().setShowDeprecated(false).get();\n        lst.add(Arguments.of(hf, option, \"dddd dddd dddd\"));\n\n        hf = HelpFormatter.builder().setShowDeprecated(true).get();\n        lst.add(Arguments.of(hf, option, \"[Deprecated] dddd dddd dddd\"));\n\n        hf = HelpFormatter.builder().setShowDeprecated(o -> String.format(\"%s [%s]\", HelpFormatter.getDescription(o), o.getDeprecated())).get();\n        lst.add(Arguments.of(hf, option, \"dddd dddd dddd [Deprecated for removal since now: Why why why]\"));\n\n        option = Option.builder(\"a\").longOpt(\"aaa\")\n                .deprecated(DeprecatedAttributes.builder().setForRemoval(true).setSince(\"now\")\n                        .setDescription(\"Why why why\").get())\n                .build();\n\n        hf = HelpFormatter.builder().get();\n        lst.add(Arguments.of(hf, option, \"[Deprecated]\"));\n\n        hf = HelpFormatter.builder().setShowDeprecated(false).get();\n        lst.add(Arguments.of(hf, option, \"\"));\n\n        hf = HelpFormatter.builder().setShowDeprecated(true).get();\n        lst.add(Arguments.of(hf, option, \"[Deprecated]\"));\n\n        hf = HelpFormatter.builder().setShowDeprecated(o -> String.format(\"%s [%s]\", HelpFormatter.getDescription(o), o.getDeprecated())).get();\n        lst.add(Arguments.of(hf, option, \"[Deprecated for removal since now: Why why why]\"));\n\n        return lst.stream();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_addValueTest.java.Option_addValueTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        option = new Option(\"f\", null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_addValueTest.java", "class_name": "Option_addValueTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_addValueTest.java.Option_addValueTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[Stream<CommandLineParser>]parsers()", "name": "parsers", "arg_nums": 0, "params": [], "return_type": "Stream<CommandLineParser>", "signature": "protected static Stream<CommandLineParser> parsers()", "original_string": "    protected static Stream<CommandLineParser> parsers() {\n        return Stream.of(new DefaultParser(), new PosixParser());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "protected static", "marker_annotations": [], "non_marker_annotations": ["protected", "static"], "comments": [], "return_type": "Stream<CommandLineParser>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() throws Exception {\n        opts.addOption(\"a\", false, \"toggle -a\");\n        opts.addOption(\"b\", true, \"set -b\");\n        opts.addOption(\"c\", \"c\", false, \"toggle -c\");\n        opts.addOption(\"d\", \"d\", true, \"set -d\");\n\n        opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\n        opts.addOption(OptionBuilder.hasOptionalArg().withLongOpt(\"fish\").create());\n        opts.addOption(OptionBuilder.hasOptionalArgs().withLongOpt(\"gravy\").create());\n        opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\"hide\").create());\n        opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\n        opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\n        opts.addOption(Option.builder().option(\"v\").hasArg().valueSeparator().build());\n\n        final String[] args = { \"-a\", \"-b\", \"foo\", \"--c\", \"--d\", \"bar\" };\n\n        cl = new PosixParser().parse(opts, args);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]checkOption(Option,String,String,String,int,String,boolean,boolean,char,Class<?>,String,Boolean,String)", "name": "checkOption", "arg_nums": 13, "params": [{"name": "option", "type": "Option"}, {"name": "opt", "type": "String"}, {"name": "description", "type": "String"}, {"name": "longOpt", "type": "String"}, {"name": "numArgs", "type": "int"}, {"name": "argName", "type": "String"}, {"name": "required", "type": "boolean"}, {"name": "optionalArg", "type": "boolean"}, {"name": "valueSeparator", "type": "char"}, {"name": "cls", "type": "Class<?>"}, {"name": "deprecatedDesc", "type": "String"}, {"name": "deprecatedForRemoval", "type": "Boolean"}, {"name": "deprecatedSince", "type": "String"}], "return_type": "void", "signature": "private static void checkOption(final Option option, final String opt, final String description, final String longOpt, final int numArgs,\n            final String argName, final boolean required, final boolean optionalArg, final char valueSeparator, final Class<?> cls, final String deprecatedDesc,\n            final Boolean deprecatedForRemoval, final String deprecatedSince)", "original_string": "    private static void checkOption(final Option option, final String opt, final String description, final String longOpt, final int numArgs,\n            final String argName, final boolean required, final boolean optionalArg, final char valueSeparator, final Class<?> cls, final String deprecatedDesc,\n            final Boolean deprecatedForRemoval, final String deprecatedSince) {\n        assertEquals(opt, option.getOpt());\n        assertEquals(description, option.getDescription());\n        assertEquals(longOpt, option.getLongOpt());\n        assertEquals(numArgs, option.getArgs());\n        assertEquals(argName, option.getArgName());\n        assertEquals(required, option.isRequired());\n\n        assertEquals(optionalArg, option.hasOptionalArg());\n        assertEquals(numArgs > 0, option.hasArg());\n        assertEquals(numArgs > 0, option.acceptsArg());\n        assertEquals(valueSeparator, option.getValueSeparator());\n        assertEquals(cls, option.getType());\n        if (deprecatedDesc != null) {\n            assertEquals(deprecatedDesc, option.getDeprecated().getDescription());\n        }\n        if (deprecatedForRemoval != null) {\n            assertEquals(deprecatedForRemoval, option.getDeprecated().isForRemoval());\n        }\n        if (deprecatedSince != null) {\n            assertEquals(deprecatedSince, option.getDeprecated().getSince());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[Option]roundTrip(Option)", "name": "roundTrip", "arg_nums": 1, "params": [{"name": "o", "type": "Option"}], "return_type": "Option", "signature": "private Option roundTrip(final Option o)", "original_string": "    private Option roundTrip(final Option o) throws IOException, ClassNotFoundException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(o);\n        final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n        final ObjectInputStream ois = new ObjectInputStream(bais);\n        return (Option) ois.readObject();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Option", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]assertToStrings(Option)", "name": "assertToStrings", "arg_nums": 1, "params": [{"name": "option", "type": "Option"}], "return_type": "void", "signature": "private void assertToStrings(final Option option)", "original_string": "    private void assertToStrings(final Option option) {\n        // Should never throw.\n        // Should return a String, not null.\n        assertNotNull(option.toString());\n        assertNotNull(option.toDeprecatedString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java.PatternOptionBuilder_parsePatternTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        // No setup required for static method\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java", "class_name": "PatternOptionBuilder_parsePatternTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java.PatternOptionBuilder_parsePatternTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ConverterTests.java.ConverterTests.[Stream<Arguments>]numberTestParameters()", "name": "numberTestParameters", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> numberTestParameters()", "original_string": "    private static Stream<Arguments> numberTestParameters() {\n        final List<Arguments> lst = new ArrayList<>();\n\n        lst.add(Arguments.of(\"123\", Long.valueOf(\"123\")));\n        lst.add(Arguments.of(\"12.3\", Double.valueOf(\"12.3\")));\n        lst.add(Arguments.of(\"-123\", Long.valueOf(\"-123\")));\n        lst.add(Arguments.of(\"-12.3\", Double.valueOf(\"-12.3\")));\n        lst.add(Arguments.of(\".3\", Double.valueOf(\"0.3\")));\n        lst.add(Arguments.of(\"-.3\", Double.valueOf(\"-0.3\")));\n        lst.add(Arguments.of(\"0x5F\", null));\n        lst.add(Arguments.of(\"2,3\", null));\n        lst.add(Arguments.of(\"1.2.3\", null));\n\n        return lst.stream();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ConverterTests.java", "class_name": "ConverterTests", "class_uri": "src/test/java/org/apache/commons/cli/ConverterTests.java.ConverterTests", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_cloneTest.java.Option_cloneTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        option = Option.builder(\"o\").hasArg().numberOfArgs(2).build();\n        option.processValue(\"value1\");\n        option.processValue(\"value2\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_cloneTest.java", "class_name": "Option_cloneTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_cloneTest.java.Option_cloneTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLine_getOptionObjectTest.java.CommandLine_getOptionObjectTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        commandLine = new CommandLine();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLine_getOptionObjectTest.java", "class_name": "CommandLine_getOptionObjectTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLine_getOptionObjectTest.java.CommandLine_getOptionObjectTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[CommandLine]parse(CommandLineParser,Options,String[],Properties)", "name": "parse", "arg_nums": 4, "params": [{"name": "parser", "type": "CommandLineParser"}, {"name": "options", "type": "Options"}, {"name": "args", "type": "String[]"}, {"name": "properties", "type": "Properties"}], "return_type": "CommandLine", "signature": "@SuppressWarnings(\"deprecation\")\n    private CommandLine parse(final CommandLineParser parser, final Options options, final String[] args, final Properties properties)", "original_string": "    @SuppressWarnings(\"deprecation\")\n    private CommandLine parse(final CommandLineParser parser, final Options options, final String[] args, final Properties properties) throws ParseException {\n        if (parser instanceof Parser) {\n            return ((Parser) parser).parse(options, args, properties);\n        }\n        if (parser instanceof DefaultParser) {\n            return ((DefaultParser) parser).parse(options, args, properties);\n        }\n        throw new UnsupportedOperationException(\"Default options not supported by this parser\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@SuppressWarnings(\"deprecation\")\n    private", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"deprecation\")", "private"], "comments": [], "return_type": "CommandLine", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        //@formatter:off\n        options = new Options()\n            .addOption(\"a\", \"enable-a\", false, \"turn [a] on or off\")\n            .addOption(\"b\", \"bfile\", true, \"set the value of [b]\")\n            .addOption(\"c\", \"copt\", false, \"turn [c] on or off\");\n        //@formatter:on\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testAmbiguousArgParsing()", "name": "testAmbiguousArgParsing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testAmbiguousArgParsing()", "original_string": "    public void testAmbiguousArgParsing() throws Exception {\n        final String[] args = { \"-=-\" };\n        final Options options = new Options();\n\n        assertThrows(UnrecognizedOptionException.class, () -> parser.parse(options, args));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLine_hasOptionTest.java.CommandLine_hasOptionTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() throws Exception {\n        final Options options = new Options();\n\n        options.addOption(\"a\", false, \"toggle -a\");\n        options.addOption(\"b\", true, \"set -b\");\n        options.addOption(\"c\", \"c\", false, \"toggle -c\");\n        options.addOption(\"d\", \"d\", true, \"set -d\");\n\n        options.addOption(OptionBuilder.withLongOpt(\"e\").hasArgs().withDescription(\"set -e \").create('e'));\n        options.addOption(\"f\", \"f\", false, \"jk\");\n        options.addOption(OptionBuilder.withLongOpt(\"g\").hasArgs(2).withDescription(\"set -g\").create('g'));\n        options.addOption(OptionBuilder.withLongOpt(\"h\").hasArg().withDescription(\"set -h\").create('h'));\n        options.addOption(OptionBuilder.withLongOpt(\"i\").withDescription(\"set -i\").create('i'));\n        options.addOption(OptionBuilder.withLongOpt(\"j\").hasArgs().withDescription(\"set -j\").withValueSeparator('=').create('j'));\n        options.addOption(OptionBuilder.withLongOpt(\"k\").hasArgs().withDescription(\"set -k\").withValueSeparator('=').create('k'));\n        options.addOption(OptionBuilder.withLongOpt(\"m\").hasArgs().withDescription(\"set -m\").withValueSeparator().create('m'));\n\n        final String[] args = {\n            \"-a\",\n            \"-b\", \"foo\",\n            \"--c\",\n            \"--d\", \"bar\",\n            \"-e\", \"one\", \"two\",\n            \"-f\",\n            \"arg1\", \"arg2\",\n            \"-g\", \"val1\", \"val2\", \"arg3\",\n            \"-h\", \"val1\", \"-i\",\n            \"-h\", \"val2\",\n            \"-jkey=value\",\n            \"-j\", \"key=value\",\n            \"-kkey1=value1\",\n            \"-kkey2=value2\",\n            \"-mkey=value\"\n        };\n\n        final CommandLineParser parser = new PosixParser();\n        cmd = parser.parse(options, args);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLine_hasOptionTest.java", "class_name": "CommandLine_hasOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLine_hasOptionTest.java.CommandLine_hasOptionTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java.DeprecatedAttributes_toStringTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        deprecatedAttributes = DeprecatedAttributes.builder()\n                .setDescription(\"Use Bar instead!\")\n                .setForRemoval(true)\n                .setSince(\"2.0\")\n                .get();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java", "class_name": "DeprecatedAttributes_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java.DeprecatedAttributes_toStringTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() throws Exception {\n        final Options options = new Options();\n\n        options.addOption(\"a\", false, \"toggle -a\");\n        options.addOption(\"b\", true, \"set -b\");\n        options.addOption(\"c\", \"c\", false, \"toggle -c\");\n        options.addOption(\"d\", \"d\", true, \"set -d\");\n\n        options.addOption(OptionBuilder.withLongOpt(\"e\").hasArgs().withDescription(\"set -e \").create('e'));\n        options.addOption(\"f\", \"f\", false, \"jk\");\n        options.addOption(OptionBuilder.withLongOpt(\"g\").hasArgs(2).withDescription(\"set -g\").create('g'));\n        options.addOption(OptionBuilder.withLongOpt(\"h\").hasArg().withDescription(\"set -h\").create('h'));\n        options.addOption(OptionBuilder.withLongOpt(\"i\").withDescription(\"set -i\").create('i'));\n        options.addOption(OptionBuilder.withLongOpt(\"j\").hasArgs().withDescription(\"set -j\").withValueSeparator('=').create('j'));\n        options.addOption(OptionBuilder.withLongOpt(\"k\").hasArgs().withDescription(\"set -k\").withValueSeparator('=').create('k'));\n        options.addOption(OptionBuilder.withLongOpt(\"m\").hasArgs().withDescription(\"set -m\").withValueSeparator().create('m'));\n\n        //@formatter:off\n        final String[] args = {\n            \"-a\",\n            \"-b\", \"foo\",\n            \"--c\",\n            \"--d\", \"bar\",\n            \"-e\", \"one\", \"two\",\n            \"-f\",\n            \"arg1\", \"arg2\",\n            \"-g\", \"val1\", \"val2\", \"arg3\",\n            \"-h\", \"val1\", \"-i\",\n            \"-h\", \"val2\",\n            \"-jkey=value\",\n            \"-j\", \"key=value\",\n            \"-kkey1=value1\",\n            \"-kkey2=value2\",\n            \"-mkey=value\"\n        };\n        //@formatter:on\n\n        final CommandLineParser parser = new PosixParser();\n\n        cmd = parser.parse(options, args);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValuesTest.java", "class_name": "ValuesTest", "class_uri": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java.BugCLI148Test.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() throws Exception {\n        options = new Options();\n        options.addOption(OptionBuilder.hasArg().create('t'));\n        options.addOption(OptionBuilder.hasArg().create('s'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java", "class_name": "BugCLI148Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java.BugCLI148Test", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java.BugCLI266Test.[void]buildOptionsGroup(Options)", "name": "buildOptionsGroup", "arg_nums": 1, "params": [{"name": "options", "type": "Options"}], "return_type": "void", "signature": "private void buildOptionsGroup(final Options options)", "original_string": "    private void buildOptionsGroup(final Options options) {\n        final OptionGroup firstGroup = new OptionGroup();\n        final OptionGroup secondGroup = new OptionGroup();\n        firstGroup.setRequired(true);\n        secondGroup.setRequired(true);\n\n        //@formatter:off\n        firstGroup.addOption(Option.builder(\"d\")\n                .longOpt(\"db\")\n                .hasArg()\n                .argName(\"table-name\")\n                .build());\n        firstGroup.addOption(Option.builder(\"f\")\n                .longOpt(\"flat-file\")\n                .hasArg()\n                .argName(\"input.csv\")\n                .build());\n        //@formatter:on\n        options.addOptionGroup(firstGroup);\n        //@formatter:off\n        secondGroup.addOption(Option.builder(\"x\")\n                .hasArg()\n                .argName(\"arg1\")\n                .build());\n        secondGroup.addOption(Option.builder(\"s\")\n                .build());\n        secondGroup.addOption(Option.builder(\"p\")\n                .hasArg()\n                .argName(\"arg1\")\n                .build());\n        //@formatter:on\n        options.addOptionGroup(secondGroup);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java", "class_name": "BugCLI266Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java.BugCLI266Test", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java.BugCLI266Test.[Options]getOptions()", "name": "getOptions", "arg_nums": 0, "params": [], "return_type": "Options", "signature": "private Options getOptions()", "original_string": "    private Options getOptions() {\n        final Options options = new Options();\n        //@formatter:off\n        final Option help = Option.builder(\"h\")\n                .longOpt(\"help\")\n                .desc(\"Prints this help message\")\n                .build();\n        //@formatter:on\n        options.addOption(help);\n\n        buildOptionsGroup(options);\n\n        //@formatter:off\n        final Option t = Option.builder(\"t\")\n                .required()\n                .hasArg()\n                .argName(\"file\")\n                .build();\n        final Option w = Option.builder(\"w\")\n                .required()\n                .hasArg()\n                .argName(\"word\")\n                .build();\n        final Option o = Option.builder(\"o\")\n                .hasArg()\n                .argName(\"directory\")\n                .build();\n        //@formatter:on\n        options.addOption(t);\n        options.addOption(w);\n        options.addOption(o);\n        return options;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java", "class_name": "BugCLI266Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java.BugCLI266Test", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Options", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java.BugCLI71Test.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        options = new Options();\n\n        final Option algorithm = new Option(\"a\", \"algo\", true, \"the algorithm which it to perform executing\");\n        algorithm.setArgName(\"algorithm name\");\n        options.addOption(algorithm);\n\n        final Option key = new Option(\"k\", \"key\", true, \"the key the setted algorithm uses to process\");\n        algorithm.setArgName(\"value\");\n        options.addOption(key);\n\n        parser = new PosixParser();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java", "class_name": "BugCLI71Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java.BugCLI71Test", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java.BugCLI265Test.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        parser = new DefaultParser();\n\n        final Option optionT1 = Option.builder(\"t1\").hasArg().numberOfArgs(1).optionalArg(true).argName(\"t1_path\").build();\n        final Option optionA = Option.builder(\"a\").hasArg(false).build();\n        final Option optionB = Option.builder(\"b\").hasArg(false).build();\n        final Option optionLast = Option.builder(\"last\").hasArg(false).build();\n\n        options = new Options().addOption(optionT1).addOption(optionA).addOption(optionB).addOption(optionLast);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java", "class_name": "BugCLI265Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java.BugCLI265Test", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java.BugCLI162Test.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        formatter = new HelpFormatter();\n        sw = new StringWriter();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java", "class_name": "BugCLI162Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java.BugCLI162Test", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI252Test.java.BugCLI252Test.[Options]getOptions()", "name": "getOptions", "arg_nums": 0, "params": [], "return_type": "Options", "signature": "private Options getOptions()", "original_string": "    private Options getOptions() {\n        final Options options = new Options();\n        options.addOption(Option.builder().longOpt(\"prefix\").build());\n        options.addOption(Option.builder().longOpt(\"prefixplusplus\").build());\n        return options;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI252Test.java", "class_name": "BugCLI252Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI252Test.java.BugCLI252Test", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Options", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/UnrecognizedOptionException.java.UnrecognizedOptionException.[]UnrecognizedOptionException(String)", "name": "UnrecognizedOptionException", "arg_nums": 1, "params": [{"name": "message", "type": "String"}], "return_type": "", "signature": "public UnrecognizedOptionException(final String message)", "original_string": "    public UnrecognizedOptionException(final String message) {\n        this(message, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/UnrecognizedOptionException.java", "class_name": "UnrecognizedOptionException", "class_uri": "src/main/java/org/apache/commons/cli/UnrecognizedOptionException.java.UnrecognizedOptionException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new {@code UnrecognizedArgumentException} with the specified detail message.\n\n@param message the detail message\n"}, {"uris": "src/main/java/org/apache/commons/cli/UnrecognizedOptionException.java.UnrecognizedOptionException.[]UnrecognizedOptionException(String,String)", "name": "UnrecognizedOptionException", "arg_nums": 2, "params": [{"name": "message", "type": "String"}, {"name": "option", "type": "String"}], "return_type": "", "signature": "public UnrecognizedOptionException(final String message, final String option)", "original_string": "    public UnrecognizedOptionException(final String message, final String option) {\n        super(message);\n        this.option = option;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/UnrecognizedOptionException.java", "class_name": "UnrecognizedOptionException", "class_uri": "src/main/java/org/apache/commons/cli/UnrecognizedOptionException.java.UnrecognizedOptionException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new {@code UnrecognizedArgumentException} with the specified option and detail message.\n\n@param message the detail message\n@param option the unrecognized option\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/cli/UnrecognizedOptionException.java.UnrecognizedOptionException.[String]getOption()", "name": "getOption", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getOption()", "original_string": "    public String getOption() {\n        return option;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/UnrecognizedOptionException.java", "class_name": "UnrecognizedOptionException", "class_uri": "src/main/java/org/apache/commons/cli/UnrecognizedOptionException.java.UnrecognizedOptionException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the unrecognized option.\n\n@return the related option\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[Builder]builder()", "name": "builder", "arg_nums": 0, "params": [], "return_type": "Builder", "signature": "public static Builder builder()", "original_string": "    public static Builder builder() {\n        return builder(null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Builder", "classes": []}, "docstring": "\nReturns a {@link Builder} to create an {@link Option} using descriptive methods.\n\n@return a new {@link Builder} instance.\n@since 1.3\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[Builder]builder(String)", "name": "builder", "arg_nums": 1, "params": [{"name": "option", "type": "String"}], "return_type": "Builder", "signature": "public static Builder builder(final String option)", "original_string": "    public static Builder builder(final String option) {\n        return new Builder(option);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Builder", "classes": []}, "docstring": "\nReturns a {@link Builder} to create an {@link Option} using descriptive methods.\n\n@param option short representation of the option.\n@return a new {@link Builder} instance.\n@throws IllegalArgumentException if there are any non valid Option characters in {@code opt}.\n@since 1.3\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[]Option(Builder)", "name": "Option", "arg_nums": 1, "params": [{"name": "builder", "type": "Builder"}], "return_type": "", "signature": "private Option(final Builder builder)", "original_string": "    private Option(final Builder builder) {\n        this.argName = builder.argName;\n        this.description = builder.description;\n        this.longOption = builder.longOption;\n        this.argCount = builder.argCount;\n        this.option = builder.option;\n        this.optionalArg = builder.optionalArg;\n        this.deprecated = builder.deprecated;\n        this.required = builder.required;\n        this.since = builder.since;\n        this.type = builder.type;\n        this.valueSeparator = builder.valueSeparator;\n        this.converter = builder.converter;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nPrivate constructor used by the nested Builder class.\n\n@param builder builder used to create this option.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[]Option(String,boolean,String)", "name": "Option", "arg_nums": 3, "params": [{"name": "option", "type": "String"}, {"name": "hasArg", "type": "boolean"}, {"name": "description", "type": "String"}], "return_type": "", "signature": "public Option(final String option, final boolean hasArg, final String description)", "original_string": "    public Option(final String option, final boolean hasArg, final String description) throws IllegalArgumentException {\n        this(option, null, hasArg, description);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates an Option using the specified parameters.\n\n@param option      short representation of the option.\n@param hasArg      specifies whether the Option takes an argument or not.\n@param description describes the function of the option.\n\n@throws IllegalArgumentException if there are any non valid Option characters in {@code opt}.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[]Option(String,String)", "name": "Option", "arg_nums": 2, "params": [{"name": "option", "type": "String"}, {"name": "description", "type": "String"}], "return_type": "", "signature": "public Option(final String option, final String description)", "original_string": "    public Option(final String option, final String description) throws IllegalArgumentException {\n        this(option, null, false, description);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates an Option using the specified parameters. The option does not take an argument.\n\n@param option      short representation of the option.\n@param description describes the function of the option.\n\n@throws IllegalArgumentException if there are any non valid Option characters in {@code opt}.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[]Option(String,String,boolean,String)", "name": "Option", "arg_nums": 4, "params": [{"name": "option", "type": "String"}, {"name": "longOption", "type": "String"}, {"name": "hasArg", "type": "boolean"}, {"name": "description", "type": "String"}], "return_type": "", "signature": "public Option(final String option, final String longOption, final boolean hasArg, final String description)", "original_string": "    public Option(final String option, final String longOption, final boolean hasArg, final String description) throws IllegalArgumentException {\n        // ensure that the option is valid\n        this.deprecated = null;\n        this.option = OptionValidator.validate(option);\n        this.longOption = longOption;\n        // if hasArg is set then the number of arguments is 1\n        if (hasArg) {\n            this.argCount = 1;\n        }\n        this.description = description;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates an Option using the specified parameters.\n\n@param option      short representation of the option.\n@param longOption  the long representation of the option.\n@param hasArg      specifies whether the Option takes an argument or not.\n@param description describes the function of the option.\n\n@throws IllegalArgumentException if there are any non valid Option characters in {@code opt}.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[boolean]acceptsArg()", "name": "acceptsArg", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "boolean acceptsArg()", "original_string": "    boolean acceptsArg() {\n        return (hasArg() || hasArgs() || hasOptionalArg()) && (argCount <= 0 || values.size() < argCount);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the option can accept more arguments.\n\n@return false if the maximum number of arguments is reached.\n@since 1.3\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[void]add(String)", "name": "add", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "void", "signature": "private void add(final String value)", "original_string": "    private void add(final String value) {\n        if (!acceptsArg()) {\n            throw new IllegalArgumentException(\"Cannot add value, list full.\");\n        }\n        // store value\n        values.add(value);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdds the value to this Option. If the number of arguments is greater than zero and there is enough space in the list then add the value. Otherwise, throw\na runtime exception.\n\n@param value The value to be added to this Option.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[boolean]addValue(String)", "name": "addValue", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "@Deprecated\n    public boolean addValue(final String value)", "original_string": "    @Deprecated\n    public boolean addValue(final String value) {\n        throw new UnsupportedOperationException(\n                \"The addValue method is not intended for client use. Subclasses should use the processValue method instead.\");\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nThis method is not intended to be used. It was a piece of internal API that was made public in 1.0. It currently throws an UnsupportedOperationException.\n\n@param value the value to add.\n@return always throws an {@link UnsupportedOperationException}.\n@throws UnsupportedOperationException always.\n@deprecated Unused.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[void]clearValues()", "name": "clearValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "void clearValues()", "original_string": "    void clearValues() {\n        values.clear();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nClears the Option values. After a parse is complete, these are left with data in them and they need clearing if another parse is done.\n\nSee: <a href=\"https://issues.apache.org/jira/browse/CLI-71\">CLI-71</a>\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[Object]clone()", "name": "clone", "arg_nums": 0, "params": [], "return_type": "Object", "signature": "@Override\n    public Object clone()", "original_string": "    @Override\n    public Object clone() {\n        try {\n            final Option option = (Option) super.clone();\n            option.values = new ArrayList<>(values);\n            return option;\n        } catch (final CloneNotSupportedException e) {\n            throw new UnsupportedOperationException(e.getMessage(), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nA rather odd clone method - due to incorrect code in 1.0 it is public and in 1.1 rather than throwing a CloneNotSupportedException it throws a\nRuntimeException so as to maintain backwards compatible at the API level.\n\nAfter calling this method, it is very likely you will want to call clearValues().\n\n@return a clone of this Option instance.\n@throws RuntimeException if a {@link CloneNotSupportedException} has been thrown by {@code super.clone()}.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "obj", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(final Object obj)", "original_string": "    @Override\n    public boolean equals(final Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof Option)) {\n            return false;\n        }\n        final Option other = (Option) obj;\n        return Objects.equals(longOption, other.longOption) && Objects.equals(option, other.option);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[String]getArgName()", "name": "getArgName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getArgName()", "original_string": "    public String getArgName() {\n        return argName;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the display name for the argument value.\n\n@return the display name for the argument value.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[int]getArgs()", "name": "getArgs", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getArgs()", "original_string": "    public int getArgs() {\n        return argCount;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGets the number of argument values this Option can take.\n\n<p>\nA value equal to the constant {@link #UNINITIALIZED} (= -1) indicates the number of arguments has not been specified. A value equal to the constant\n{@link #UNLIMITED_VALUES} (= -2) indicates that this options takes an unlimited amount of values.\n</p>\n\n@return num the number of argument values.\n@see #UNINITIALIZED\n@see #UNLIMITED_VALUES\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[Converter<?, ?>]getConverter()", "name": "getConverter", "arg_nums": 0, "params": [], "return_type": "Converter<?, ?>", "signature": "public Converter<?, ?> getConverter()", "original_string": "    public Converter<?, ?> getConverter() {\n        return converter == null ? TypeHandler.getDefault().getConverter(type) : converter;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Converter<?, ?>", "classes": []}, "docstring": "\nGets the value to type converter.\n\n@return the value to type converter.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[DeprecatedAttributes]getDeprecated()", "name": "getDeprecated", "arg_nums": 0, "params": [], "return_type": "DeprecatedAttributes", "signature": "public DeprecatedAttributes getDeprecated()", "original_string": "    public DeprecatedAttributes getDeprecated() {\n        return deprecated;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DeprecatedAttributes", "classes": []}, "docstring": "\nGets deprecated attributes if any.\n\n@return boolean deprecated attributes or null.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[String]getDescription()", "name": "getDescription", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getDescription()", "original_string": "    public String getDescription() {\n        return description;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the self-documenting description of this Option.\n\n@return The string description of this option.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[int]getId()", "name": "getId", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getId()", "original_string": "    public int getId() {\n        return getKey().charAt(0);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGets the id of this Option. This is only set when the Option shortOpt is a single character. This is used for switch statements.\n\n@return the id of this Option.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[String]getKey()", "name": "getKey", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getKey()", "original_string": "    public String getKey() {\n        // if 'opt' is null, then it is a 'long' option\n        return option == null ? longOption : option;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the 'unique' Option identifier. This is the option value if set or the long value if the options value is not set.\n\n@return the 'unique' Option identifier.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[String]getLongOpt()", "name": "getLongOpt", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getLongOpt()", "original_string": "    public String getLongOpt() {\n        return longOption;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the long name of this Option.\n\n@return Long name of this option, or null, if there is no long name.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[String]getOpt()", "name": "getOpt", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getOpt()", "original_string": "    public String getOpt() {\n        return option;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the name of this Option.\n\nIt is this String which can be used with {@link CommandLine#hasOption(String opt)} and {@link CommandLine#getOptionValue(String opt)} to check for\nexistence and argument.\n\n@return The name of this option.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[String]getSince()", "name": "getSince", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getSince()", "original_string": "    public String getSince() {\n        return since;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the version when this option was added.\n@return the version when this option was added, or {@code null} if not set.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[Object]getType()", "name": "getType", "arg_nums": 0, "params": [], "return_type": "Object", "signature": "public Object getType()", "original_string": "    public Object getType() {\n        return type;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nGets the type of this Option.\n\n@return The type of this option.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[String]getValue()", "name": "getValue", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getValue()", "original_string": "    public String getValue() {\n        return hasNoValues() ? null : values.get(0);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the specified value of this Option or {@code null} if there is no value.\n\n@return the value/first value of this Option or {@code null} if there is no value.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[String]getValue(int)", "name": "getValue", "arg_nums": 1, "params": [{"name": "index", "type": "int"}], "return_type": "String", "signature": "public String getValue(final int index)", "original_string": "    public String getValue(final int index) throws IndexOutOfBoundsException {\n        return hasNoValues() ? null : values.get(index);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the specified value of this Option or {@code null} if there is no value.\n\n@param index The index of the value to be returned.\n\n@return the specified value of this Option or {@code null} if there is no value.\n\n@throws IndexOutOfBoundsException if index is less than 1 or greater than the number of the values for this Option.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[String]getValue(String)", "name": "getValue", "arg_nums": 1, "params": [{"name": "defaultValue", "type": "String"}], "return_type": "String", "signature": "public String getValue(final String defaultValue)", "original_string": "    public String getValue(final String defaultValue) {\n        final String value = getValue();\n        return value != null ? value : defaultValue;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the value/first value of this Option or the {@code defaultValue} if there is no value.\n\n@param defaultValue The value to be returned if there is no value.\n\n@return the value/first value of this Option or the {@code defaultValue} if there are no values.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[String[]]getValues()", "name": "getValues", "arg_nums": 0, "params": [], "return_type": "String[]", "signature": "public String[] getValues()", "original_string": "    public String[] getValues() {\n        return hasNoValues() ? null : values.toArray(EMPTY_STRING_ARRAY);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\nGets the values of this Option as a String array or null if there are no values.\n\n@return the values of this Option as a String array or null if there are no values.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[char]getValueSeparator()", "name": "getValueSeparator", "arg_nums": 0, "params": [], "return_type": "char", "signature": "public char getValueSeparator()", "original_string": "    public char getValueSeparator() {\n        return valueSeparator;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "char", "classes": []}, "docstring": "\nGets the value separator character.\n\n@return the value separator character.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[List<String>]getValuesList()", "name": "getValuesList", "arg_nums": 0, "params": [], "return_type": "List<String>", "signature": "public List<String> getValuesList()", "original_string": "    public List<String> getValuesList() {\n        return values;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": "\nGets the values of this Option as a List or null if there are no values.\n\n@return the values of this Option as a List or null if there are no values.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[boolean]hasArg()", "name": "hasArg", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean hasArg()", "original_string": "    public boolean hasArg() {\n        return argCount > 0 || argCount == UNLIMITED_VALUES;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether this Option requires an argument.\n\n@return boolean flag indicating if an argument is required.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[boolean]hasArgName()", "name": "hasArgName", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean hasArgName()", "original_string": "    public boolean hasArgName() {\n        return argName != null && !argName.isEmpty();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the display name for the argument value has been set.\n\n@return if the display name for the argument value has been set.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[boolean]hasArgs()", "name": "hasArgs", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean hasArgs()", "original_string": "    public boolean hasArgs() {\n        return argCount > 1 || argCount == UNLIMITED_VALUES;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether this Option can take many values.\n\n@return boolean flag indicating if multiple values are allowed.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        return Objects.hash(longOption, option);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[boolean]hasLongOpt()", "name": "hasLongOpt", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean hasLongOpt()", "original_string": "    public boolean hasLongOpt() {\n        return longOption != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether this Option has a long name.\n\n@return boolean flag indicating existence of a long name.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[boolean]hasNoValues()", "name": "hasNoValues", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "private boolean hasNoValues()", "original_string": "    private boolean hasNoValues() {\n        return values.isEmpty();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether this Option has any values.\n\n@return whether this Option has any values.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[boolean]hasOptionalArg()", "name": "hasOptionalArg", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean hasOptionalArg()", "original_string": "    public boolean hasOptionalArg() {\n        return optionalArg;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether this Option can have an optional argument.\n\n@return whether this Option can have an optional argument.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[boolean]hasValueSeparator()", "name": "hasValueSeparator", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean hasValueSeparator()", "original_string": "    public boolean hasValueSeparator() {\n        return valueSeparator > 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether this Option has specified a value separator.\n\n@return whether this Option has specified a value separator.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[boolean]isDeprecated()", "name": "isDeprecated", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isDeprecated()", "original_string": "    public boolean isDeprecated() {\n        return deprecated != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether this Option is deprecated.\n\n@return boolean flag indicating whether this Option is deprecated.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[boolean]isRequired()", "name": "isRequired", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isRequired()", "original_string": "    public boolean isRequired() {\n        return required;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether this Option is required.\n\n@return boolean flag indicating whether this Option is required.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[void]processValue(String)", "name": "processValue", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "void", "signature": "void processValue(final String value)", "original_string": "    void processValue(final String value) {\n        if (argCount == UNINITIALIZED) {\n            throw new IllegalArgumentException(\"NO_ARGS_ALLOWED\");\n        }\n        String add = value;\n        // this Option has a separator character\n        if (hasValueSeparator()) {\n            // get the separator character\n            final char sep = getValueSeparator();\n            // store the index for the value separator\n            int index = add.indexOf(sep);\n            // while there are more value separators\n            while (index != -1) {\n                // next value to be added\n                if (values.size() == argCount - 1) {\n                    break;\n                }\n                // store\n                add(add.substring(0, index));\n                // parse\n                add = add.substring(index + 1);\n                // get new index\n                index = add.indexOf(sep);\n            }\n        }\n        // store the actual value or the last value that has been parsed\n        add(add);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nProcesses the value. If this Option has a value separator the value will have to be parsed into individual tokens. When n-1 tokens have been processed\nand there are more value separators in the value, parsing is ceased and the remaining characters are added as a single token.\n\n@param value The String to be processed.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[boolean]requiresArg()", "name": "requiresArg", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "boolean requiresArg()", "original_string": "    boolean requiresArg() {\n        if (optionalArg) {\n            return false;\n        }\n        if (argCount == UNLIMITED_VALUES) {\n            return values.isEmpty();\n        }\n        return acceptsArg();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the option requires more arguments to be valid.\n\n@return false if the option doesn't require more arguments.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[void]setArgName(String)", "name": "setArgName", "arg_nums": 1, "params": [{"name": "argName", "type": "String"}], "return_type": "void", "signature": "public void setArgName(final String argName)", "original_string": "    public void setArgName(final String argName) {\n        this.argName = argName;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the display name for the argument value.\n\n@param argName the display name for the argument value.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[void]setArgs(int)", "name": "setArgs", "arg_nums": 1, "params": [{"name": "num", "type": "int"}], "return_type": "void", "signature": "public void setArgs(final int num)", "original_string": "    public void setArgs(final int num) {\n        this.argCount = num;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the number of argument values this Option can take.\n\n@param num the number of argument values.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[void]setConverter(Converter<?, ?>)", "name": "setConverter", "arg_nums": 1, "params": [{"name": "converter", "type": "Converter<?, ?>"}], "return_type": "void", "signature": "public void setConverter(final Converter<?, ?> converter)", "original_string": "    public void setConverter(final Converter<?, ?> converter) {\n        this.converter = converter;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to type converter.\n\n@param converter The converter to convert the string value to the type.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[void]setDescription(String)", "name": "setDescription", "arg_nums": 1, "params": [{"name": "description", "type": "String"}], "return_type": "void", "signature": "public void setDescription(final String description)", "original_string": "    public void setDescription(final String description) {\n        this.description = description;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the self-documenting description of this Option.\n\n@param description The description of this option.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[void]setLongOpt(String)", "name": "setLongOpt", "arg_nums": 1, "params": [{"name": "longOpt", "type": "String"}], "return_type": "void", "signature": "public void setLongOpt(final String longOpt)", "original_string": "    public void setLongOpt(final String longOpt) {\n        this.longOption = longOpt;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the long name of this Option.\n\n@param longOpt the long name of this Option.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[void]setOptionalArg(boolean)", "name": "setOptionalArg", "arg_nums": 1, "params": [{"name": "optionalArg", "type": "boolean"}], "return_type": "void", "signature": "public void setOptionalArg(final boolean optionalArg)", "original_string": "    public void setOptionalArg(final boolean optionalArg) {\n        this.optionalArg = optionalArg;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets whether this Option can have an optional argument.\n\n@param optionalArg specifies whether the Option can have an optional argument.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[void]setRequired(boolean)", "name": "setRequired", "arg_nums": 1, "params": [{"name": "required", "type": "boolean"}], "return_type": "void", "signature": "public void setRequired(final boolean required)", "original_string": "    public void setRequired(final boolean required) {\n        this.required = required;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets whether this Option is mandatory.\n\n@param required specifies whether this Option is mandatory.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[void]setType(Class<?>)", "name": "setType", "arg_nums": 1, "params": [{"name": "type", "type": "Class<?>"}], "return_type": "void", "signature": "public void setType(final Class<?> type)", "original_string": "    public void setType(final Class<?> type) {\n        this.type = Builder.toType(type);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the type of this Option.\n\n@param type the type of this Option.\n@since 1.3\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[void]setType(Object)", "name": "setType", "arg_nums": 1, "params": [{"name": "type", "type": "Object"}], "return_type": "void", "signature": "@Deprecated\n    public void setType(final Object type)", "original_string": "    @Deprecated\n    public void setType(final Object type) {\n        setType((Class<?>) type);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the type of this Option.\n<p>\n<b>Note:</b> this method is kept for binary compatibility and the input type is supposed to be a {@link Class} object.\n</p>\n\n@param type the type of this Option.\n@deprecated since 1.3, use {@link #setType(Class)} instead.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[void]setValueSeparator(char)", "name": "setValueSeparator", "arg_nums": 1, "params": [{"name": "valueSeparator", "type": "char"}], "return_type": "void", "signature": "public void setValueSeparator(final char valueSeparator)", "original_string": "    public void setValueSeparator(final char valueSeparator) {\n        this.valueSeparator = valueSeparator;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value separator. For example if the argument value was a Java property, the value separator would be '='.\n\n@param valueSeparator The value separator.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[String]toDeprecatedString()", "name": "toDeprecatedString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "String toDeprecatedString()", "original_string": "    String toDeprecatedString() {\n        if (!isDeprecated()) {\n            return \"\";\n        }\n        // @formatter:off\n        final StringBuilder buf = new StringBuilder()\n                .append(\"Option '\")\n                .append(option)\n                .append(Char.APOS);\n        // @formatter:on\n        if (longOption != null) {\n            buf.append(Char.APOS).append(longOption).append(Char.APOS);\n        }\n        buf.append(\": \").append(deprecated);\n        return buf.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/Option.java.Option.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        final StringBuilder buf = new StringBuilder().append(\"[ \");\n        buf.append(\"Option \");\n        buf.append(option);\n        if (longOption != null) {\n            buf.append(Char.SP).append(longOption);\n        }\n        if (isDeprecated()) {\n            buf.append(Char.SP);\n            buf.append(deprecated.toString());\n        }\n        if (hasArgs()) {\n            buf.append(\"[ARG...]\");\n        } else if (hasArg()) {\n            buf.append(\" [ARG]\");\n        }\n        // @formatter:off\n        return buf.append(\" :: \")\n            .append(description)\n            .append(\" :: \")\n            .append(type)\n            .append(\" ]\")\n            .toString();\n        // @formatter:on\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Option.java", "class_name": "Option", "class_uri": "src/main/java/org/apache/commons/cli/Option.java.Option", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCreates a String suitable for debugging.\n\n@return a String suitable for debugging.\n"}, {"uris": "src/main/java/org/apache/commons/cli/MissingArgumentException.java.MissingArgumentException.[]MissingArgumentException(Option)", "name": "MissingArgumentException", "arg_nums": 1, "params": [{"name": "option", "type": "Option"}], "return_type": "", "signature": "public MissingArgumentException(final Option option)", "original_string": "    public MissingArgumentException(final Option option) {\n        this(\"Missing argument for option: \" + option.getKey());\n        this.option = option;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/MissingArgumentException.java", "class_name": "MissingArgumentException", "class_uri": "src/main/java/org/apache/commons/cli/MissingArgumentException.java.MissingArgumentException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new {@code MissingArgumentException} with the specified detail message.\n\n@param option the option requiring an argument\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/cli/MissingArgumentException.java.MissingArgumentException.[]MissingArgumentException(String)", "name": "MissingArgumentException", "arg_nums": 1, "params": [{"name": "message", "type": "String"}], "return_type": "", "signature": "public MissingArgumentException(final String message)", "original_string": "    public MissingArgumentException(final String message) {\n        super(message);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/MissingArgumentException.java", "class_name": "MissingArgumentException", "class_uri": "src/main/java/org/apache/commons/cli/MissingArgumentException.java.MissingArgumentException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new {@code MissingArgumentException} with the specified detail message.\n\n@param message the detail message\n"}, {"uris": "src/main/java/org/apache/commons/cli/MissingArgumentException.java.MissingArgumentException.[Option]getOption()", "name": "getOption", "arg_nums": 0, "params": [], "return_type": "Option", "signature": "public Option getOption()", "original_string": "    public Option getOption() {\n        return option;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/MissingArgumentException.java", "class_name": "MissingArgumentException", "class_uri": "src/main/java/org/apache/commons/cli/MissingArgumentException.java.MissingArgumentException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Option", "classes": []}, "docstring": "\nGets the option requiring an argument that wasn't provided on the command line.\n\n@return the related option\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/cli/Util.java.Util.[boolean]isEmpty(Object[])", "name": "isEmpty", "arg_nums": 1, "params": [{"name": "array", "type": "Object[]"}], "return_type": "boolean", "signature": "static boolean isEmpty(final Object[] array)", "original_string": "    static boolean isEmpty(final Object[] array) {\n        return array == null || array.length == 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Util.java", "class_name": "Util", "class_uri": "src/main/java/org/apache/commons/cli/Util.java.Util", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the given array is null or empty.\n\n@param array the array to test.\n@return the given array is null or empty.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Util.java.Util.[boolean]isEmpty(String)", "name": "isEmpty", "arg_nums": 1, "params": [{"name": "str", "type": "String"}], "return_type": "boolean", "signature": "static boolean isEmpty(final String str)", "original_string": "    static boolean isEmpty(final String str) {\n        return str == null || str.isEmpty();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Util.java", "class_name": "Util", "class_uri": "src/main/java/org/apache/commons/cli/Util.java.Util", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the given string is null or empty.\n\n@param str The string to test.\n@return Whether the given string is null or empty.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Util.java.Util.[String]stripLeadingAndTrailingQuotes(String)", "name": "stripLeadingAndTrailingQuotes", "arg_nums": 1, "params": [{"name": "str", "type": "String"}], "return_type": "String", "signature": "static String stripLeadingAndTrailingQuotes(final String str)", "original_string": "    static String stripLeadingAndTrailingQuotes(final String str) {\n        if (isEmpty(str)) {\n            return str;\n        }\n        final int length = str.length();\n        if (length > 1 && str.startsWith(\"\\\"\") && str.endsWith(\"\\\"\") && str.substring(1, length - 1).indexOf('\"') == -1) {\n            return str.substring(1, length - 1);\n        }\n        return str;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Util.java", "class_name": "Util", "class_uri": "src/main/java/org/apache/commons/cli/Util.java.Util", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRemoves the leading and trailing quotes from {@code str}. E.g. if str is '\"one two\"', then 'one two' is returned.\n\n@param str The string from which the leading and trailing quotes should be removed.\n@return The string without the leading and trailing quotes.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Util.java.Util.[String]stripLeadingHyphens(String)", "name": "stripLeadingHyphens", "arg_nums": 1, "params": [{"name": "str", "type": "String"}], "return_type": "String", "signature": "static String stripLeadingHyphens(final String str)", "original_string": "    static String stripLeadingHyphens(final String str) {\n        if (isEmpty(str)) {\n            return str;\n        }\n        if (str.startsWith(\"--\")) {\n            return str.substring(2);\n        }\n        if (str.startsWith(\"-\")) {\n            return str.substring(1);\n        }\n        return str;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Util.java", "class_name": "Util", "class_uri": "src/main/java/org/apache/commons/cli/Util.java.Util", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRemoves the hyphens from the beginning of {@code str} and return the new String.\n\n@param str The string from which the hyphens should be removed.\n@return the new String.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Util.java.Util.[]Util()", "name": "Util", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Util()", "original_string": "    private Util() {\n        // no instances\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Util.java", "class_name": "Util", "class_uri": "src/main/java/org/apache/commons/cli/Util.java.Util", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/BasicParser.java.BasicParser.[String[]]flatten(Options,String[],boolean)", "name": "flatten", "arg_nums": 3, "params": [{"name": "options", "type": "Options"}, {"name": "arguments", "type": "String[]"}, {"name": "stopAtNonOption", "type": "boolean"}], "return_type": "String[]", "signature": "@Override\n    protected String[] flatten(@SuppressWarnings(\"unused\") final Options options, final String[] arguments,\n        @SuppressWarnings(\"unused\") final boolean stopAtNonOption)", "original_string": "    @Override\n    protected String[] flatten(@SuppressWarnings(\"unused\") final Options options, final String[] arguments,\n        @SuppressWarnings(\"unused\") final boolean stopAtNonOption) {\n        // just echo the arguments\n        return arguments;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/BasicParser.java", "class_name": "BasicParser", "class_uri": "src/main/java/org/apache/commons/cli/BasicParser.java.BasicParser", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\n<p>\nA simple implementation of {@link Parser}'s abstract {@link Parser#flatten(Options, String[], boolean) flatten}\nmethod.\n</p>\n\n<p>\n<b>Note:</b> {@code options} and {@code stopAtNonOption} are not used in this {@code flatten} method.\n</p>\n\n@param options The command line {@link Options}\n@param arguments The command line arguments to be parsed\n@param stopAtNonOption Specifies whether to stop flattening when an non option is found.\n@return The {@code arguments} String array.\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup.[OptionGroup]addOption(Option)", "name": "addOption", "arg_nums": 1, "params": [{"name": "option", "type": "Option"}], "return_type": "OptionGroup", "signature": "public OptionGroup addOption(final Option option)", "original_string": "    public OptionGroup addOption(final Option option) {\n        // key - option name\n        // value - the option\n        optionMap.put(option.getKey(), option);\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionGroup.java", "class_name": "OptionGroup", "class_uri": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OptionGroup", "classes": []}, "docstring": "\nAdds the given {@code Option} to this group.\n\n@param option the option to add to this group\n@return this option group with the option added\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup.[Collection<String>]getNames()", "name": "getNames", "arg_nums": 0, "params": [], "return_type": "Collection<String>", "signature": "public Collection<String> getNames()", "original_string": "    public Collection<String> getNames() {\n        // the key set is the collection of names\n        return optionMap.keySet();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionGroup.java", "class_name": "OptionGroup", "class_uri": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Collection<String>", "classes": []}, "docstring": "\nGets the names of the options in this group as a {@code Collection}.\n\n@return the names of the options in this group as a {@code Collection}.\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup.[Collection<Option>]getOptions()", "name": "getOptions", "arg_nums": 0, "params": [], "return_type": "Collection<Option>", "signature": "public Collection<Option> getOptions()", "original_string": "    public Collection<Option> getOptions() {\n        // the values are the collection of options\n        return optionMap.values();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionGroup.java", "class_name": "OptionGroup", "class_uri": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Collection<Option>", "classes": []}, "docstring": "\nGets the options in this group as a {@code Collection}.\n\n@return the options in this group as a {@code Collection}.\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup.[String]getSelected()", "name": "getSelected", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getSelected()", "original_string": "    public String getSelected() {\n        return selected;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionGroup.java", "class_name": "OptionGroup", "class_uri": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the selected option name.\n\nIf the selected option is deprecated <em>no warning is logged</em>.\n@return the selected option name.\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup.[boolean]isRequired()", "name": "isRequired", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isRequired()", "original_string": "    public boolean isRequired() {\n        return required;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionGroup.java", "class_name": "OptionGroup", "class_uri": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether this option group is required.\n\n@return whether this option group is required\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup.[boolean]isSelected()", "name": "isSelected", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isSelected()", "original_string": "    public boolean isSelected() {\n        return selected != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionGroup.java", "class_name": "OptionGroup", "class_uri": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether an option is selected.\n\n If an option is selected and is deprecated <em>no warning is logged</em>.\n@return whether whether an option is selected.\n@since 1.9.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup.[void]setRequired(boolean)", "name": "setRequired", "arg_nums": 1, "params": [{"name": "required", "type": "boolean"}], "return_type": "void", "signature": "public void setRequired(final boolean required)", "original_string": "    public void setRequired(final boolean required) {\n        this.required = required;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionGroup.java", "class_name": "OptionGroup", "class_uri": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets whether this group is required.\n\n@param required whether this group is required.\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup.[void]setSelected(Option)", "name": "setSelected", "arg_nums": 1, "params": [{"name": "option", "type": "Option"}], "return_type": "void", "signature": "public void setSelected(final Option option)", "original_string": "    public void setSelected(final Option option) throws AlreadySelectedException {\n        if (option == null) {\n            // reset the option previously selected\n            selected = null;\n            return;\n        }\n        // if no option has already been selected or the\n        // same option is being reselected then set the\n        // selected member variable\n        if (selected != null && !selected.equals(option.getKey())) {\n            throw new AlreadySelectedException(this, option);\n        }\n        selected = option.getKey();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionGroup.java", "class_name": "OptionGroup", "class_uri": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the selected option of this group to {@code name}.\n\nIf the selected option is deprecated <em>no warning is logged</em>.\n@param option the option that is selected\n@throws AlreadySelectedException if an option from this group has already been selected.\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        final StringBuilder buff = new StringBuilder();\n        final Iterator<Option> iter = getOptions().iterator();\n        buff.append(\"[\");\n        while (iter.hasNext()) {\n            final Option option = iter.next();\n            if (option.getOpt() != null) {\n                buff.append(\"-\");\n                buff.append(option.getOpt());\n            } else {\n                buff.append(\"--\");\n                buff.append(option.getLongOpt());\n            }\n\n            if (option.getDescription() != null) {\n                buff.append(Char.SP);\n                buff.append(option.getDescription());\n            }\n\n            if (iter.hasNext()) {\n                buff.append(\", \");\n            }\n        }\n        buff.append(\"]\");\n        return buff.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionGroup.java", "class_name": "OptionGroup", "class_uri": "src/main/java/org/apache/commons/cli/OptionGroup.java.OptionGroup", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns the stringified version of this OptionGroup.\n\n@return the stringified representation of this group\n"}, {"uris": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java.AlreadySelectedException.[]AlreadySelectedException(OptionGroup,Option)", "name": "AlreadySelectedException", "arg_nums": 2, "params": [{"name": "group", "type": "OptionGroup"}, {"name": "option", "type": "Option"}], "return_type": "", "signature": "public AlreadySelectedException(final OptionGroup group, final Option option)", "original_string": "    public AlreadySelectedException(final OptionGroup group, final Option option) {\n        this(String.format(\"The option '%s' was specified but an option from this group has already been selected: '%s'\", option.getKey(), group.getSelected()),\n                group, option);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java", "class_name": "AlreadySelectedException", "class_uri": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java.AlreadySelectedException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new {@code AlreadySelectedException} for the specified option group.\n\n@param group the option group already selected\n@param option the option that triggered the exception\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java.AlreadySelectedException.[]AlreadySelectedException(String)", "name": "AlreadySelectedException", "arg_nums": 1, "params": [{"name": "message", "type": "String"}], "return_type": "", "signature": "public AlreadySelectedException(final String message)", "original_string": "    public AlreadySelectedException(final String message) {\n        this(message, null, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java", "class_name": "AlreadySelectedException", "class_uri": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java.AlreadySelectedException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new {@code AlreadySelectedException} with the specified detail message.\n\n@param message the detail message\n"}, {"uris": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java.AlreadySelectedException.[]AlreadySelectedException(String,OptionGroup,Option)", "name": "AlreadySelectedException", "arg_nums": 3, "params": [{"name": "message", "type": "String"}, {"name": "group", "type": "OptionGroup"}, {"name": "option", "type": "Option"}], "return_type": "", "signature": "private AlreadySelectedException(final String message, final OptionGroup group, final Option option)", "original_string": "    private AlreadySelectedException(final String message, final OptionGroup group, final Option option) {\n        super(message);\n        this.group = group;\n        this.option = option;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java", "class_name": "AlreadySelectedException", "class_uri": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java.AlreadySelectedException", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java.AlreadySelectedException.[Option]getOption()", "name": "getOption", "arg_nums": 0, "params": [], "return_type": "Option", "signature": "public Option getOption()", "original_string": "    public Option getOption() {\n        return option;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java", "class_name": "AlreadySelectedException", "class_uri": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java.AlreadySelectedException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Option", "classes": []}, "docstring": "\nGets the option that was added to the group and triggered the exception.\n\n@return the related option\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java.AlreadySelectedException.[OptionGroup]getOptionGroup()", "name": "getOptionGroup", "arg_nums": 0, "params": [], "return_type": "OptionGroup", "signature": "public OptionGroup getOptionGroup()", "original_string": "    public OptionGroup getOptionGroup() {\n        return group;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java", "class_name": "AlreadySelectedException", "class_uri": "src/main/java/org/apache/commons/cli/AlreadySelectedException.java.AlreadySelectedException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OptionGroup", "classes": []}, "docstring": "\nGets the option group where another option has been selected.\n\n@return the related option group\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[Builder]builder()", "name": "builder", "arg_nums": 0, "params": [], "return_type": "Builder", "signature": "public static Builder builder()", "original_string": "    public static Builder builder() {\n        return new Builder();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Builder", "classes": []}, "docstring": "\nCreates a new {@link Builder} to create an {@link DefaultParser} using descriptive\nmethods.\n\n@return a new {@link Builder} instance\n@since 1.5.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[int]indexOfEqual(String)", "name": "indexOfEqual", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "int", "signature": "static int indexOfEqual(final String token)", "original_string": "    static int indexOfEqual(final String token) {\n        return token.indexOf(Char.EQUAL);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[]DefaultParser()", "name": "DefaultParser", "arg_nums": 0, "params": [], "return_type": "", "signature": "public DefaultParser()", "original_string": "    public DefaultParser() {\n        this.allowPartialMatching = true;\n        this.stripLeadingAndTrailingQuotes = null;\n        this.deprecatedHandler = CommandLine.Builder.DEPRECATED_HANDLER;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new DefaultParser instance with partial matching enabled.\n\nBy \"partial matching\" we mean that given the following code:\n\n<pre>\n{\n    &#64;code\n    final Options options = new Options();\n    options.addOption(new Option(\"d\", \"debug\", false, \"Turn on debug.\"));\n    options.addOption(new Option(\"e\", \"extract\", false, \"Turn on extract.\"));\n    options.addOption(new Option(\"o\", \"option\", true, \"Turn on option with argument.\"));\n}\n</pre>\n\nwith \"partial matching\" turned on, {@code -de} only matches the {@code \"debug\"} option. However, with\n\"partial matching\" disabled, {@code -de} would enable both {@code debug} as well as {@code extract}\noptions.\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[]DefaultParser(boolean)", "name": "DefaultParser", "arg_nums": 1, "params": [{"name": "allowPartialMatching", "type": "boolean"}], "return_type": "", "signature": "public DefaultParser(final boolean allowPartialMatching)", "original_string": "    public DefaultParser(final boolean allowPartialMatching) {\n        this.allowPartialMatching = allowPartialMatching;\n        this.stripLeadingAndTrailingQuotes = null;\n        this.deprecatedHandler = CommandLine.Builder.DEPRECATED_HANDLER;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a new DefaultParser instance with the specified partial matching policy.\n\nBy \"partial matching\" we mean that given the following code:\n\n<pre>\n{\n    &#64;code\n    final Options options = new Options();\n    options.addOption(new Option(\"d\", \"debug\", false, \"Turn on debug.\"));\n    options.addOption(new Option(\"e\", \"extract\", false, \"Turn on extract.\"));\n    options.addOption(new Option(\"o\", \"option\", true, \"Turn on option with argument.\"));\n}\n</pre>\n\nwith \"partial matching\" turned on, {@code -de} only matches the {@code \"debug\"} option. However, with\n\"partial matching\" disabled, {@code -de} would enable both {@code debug} as well as {@code extract}\noptions.\n\n@param allowPartialMatching if partial matching of long options shall be enabled\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[]DefaultParser(boolean,Boolean,Consumer<Option>)", "name": "DefaultParser", "arg_nums": 3, "params": [{"name": "allowPartialMatching", "type": "boolean"}, {"name": "stripLeadingAndTrailingQuotes", "type": "Boolean"}, {"name": "deprecatedHandler", "type": "Consumer<Option>"}], "return_type": "", "signature": "private DefaultParser(final boolean allowPartialMatching, final Boolean stripLeadingAndTrailingQuotes, final Consumer<Option> deprecatedHandler)", "original_string": "    private DefaultParser(final boolean allowPartialMatching, final Boolean stripLeadingAndTrailingQuotes, final Consumer<Option> deprecatedHandler) {\n        this.allowPartialMatching = allowPartialMatching;\n        this.stripLeadingAndTrailingQuotes = stripLeadingAndTrailingQuotes;\n        this.deprecatedHandler = deprecatedHandler;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new DefaultParser instance with the specified partial matching and quote\nstripping policy.\n\n@param allowPartialMatching if partial matching of long options shall be enabled\n@param stripLeadingAndTrailingQuotes if balanced outer double quoutes should be stripped\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[void]checkRequiredArgs()", "name": "checkRequiredArgs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void checkRequiredArgs()", "original_string": "    private void checkRequiredArgs() throws ParseException {\n        if (currentOption != null && currentOption.requiresArg()) {\n            if (isJavaProperty(currentOption.getKey()) && currentOption.getValuesList().size() == 1) {\n                return;\n            }\n            throw new MissingArgumentException(currentOption);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nThrows a {@link MissingArgumentException} if the current option didn't receive the number of arguments expected.\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[void]checkRequiredOptions()", "name": "checkRequiredOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected void checkRequiredOptions()", "original_string": "    protected void checkRequiredOptions() throws MissingOptionException {\n        // if there are required options that have not been processed\n        if (!expectedOpts.isEmpty()) {\n            throw new MissingOptionException(expectedOpts);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nThrows a {@link MissingOptionException} if all of the required options are not present.\n\n@throws MissingOptionException if any of the required Options are not present.\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[String]getLongPrefix(String)", "name": "getLongPrefix", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "String", "signature": "private String getLongPrefix(final String token)", "original_string": "    private String getLongPrefix(final String token) {\n        final String t = Util.stripLeadingHyphens(token);\n        int i;\n        String opt = null;\n        for (i = t.length() - 2; i > 1; i--) {\n            final String prefix = t.substring(0, i);\n            if (options.hasLongOption(prefix)) {\n                opt = prefix;\n                break;\n            }\n        }\n        return opt;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nSearches for a prefix that is the long name of an option (-Xmx512m)\n\n@param token\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[List<String>]getMatchingLongOptions(String)", "name": "getMatchingLongOptions", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "List<String>", "signature": "private List<String> getMatchingLongOptions(final String token)", "original_string": "    private List<String> getMatchingLongOptions(final String token) {\n        if (allowPartialMatching) {\n            return options.getMatchingOptions(token);\n        }\n        final List<String> matches = new ArrayList<>(1);\n        if (options.hasLongOption(token)) {\n            matches.add(options.getOption(token).getLongOpt());\n        }\n        return matches;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": "\nGets a list of matching option strings for the given token, depending on the selected partial matching policy.\n\n@param token the token (may contain leading dashes)\n@return the list of matching option strings or an empty list if no matching option could be found\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[void]handleConcatenatedOptions(String)", "name": "handleConcatenatedOptions", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "void", "signature": "protected void handleConcatenatedOptions(final String token)", "original_string": "    protected void handleConcatenatedOptions(final String token) throws ParseException {\n        for (int i = 1; i < token.length(); i++) {\n            final String ch = String.valueOf(token.charAt(i));\n            if (!options.hasOption(ch)) {\n                handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);\n                break;\n            }\n            handleOption(options.getOption(ch));\n            if (currentOption != null && token.length() != i + 1) {\n                // add the trail as an argument of the option\n                currentOption.processValue(stripLeadingAndTrailingQuotesDefaultOff(token.substring(i + 1)));\n                break;\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nBreaks {@code token} into its constituent parts using the following algorithm.\n\n<ul>\n<li>ignore the first character (\"<b>-</b>\")</li>\n<li>for each remaining character check if an {@link Option} exists with that id.</li>\n<li>if an {@link Option} does exist then add that character prepended with \"<b>-</b>\" to the list of processed\ntokens.</li>\n<li>if the {@link Option} can have an argument value and there are remaining characters in the token then add the\nremaining characters as a token to the list of processed tokens.</li>\n<li>if an {@link Option} does <b>NOT</b> exist <b>AND</b> {@code stopAtNonOption} <b>IS</b> set then add the\nspecial token \"<b>--</b>\" followed by the remaining characters and also the remaining tokens directly to the\nprocessed tokens list.</li>\n<li>if an {@link Option} does <b>NOT</b> exist <b>AND</b> {@code stopAtNonOption} <b>IS NOT</b> set then add\nthat character prepended with \"<b>-</b>\".</li>\n</ul>\n\n@param token The current token to be <b>burst</b> at the first non-Option encountered.\n@throws ParseException if there are any problems encountered while parsing the command line token.\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[void]handleLongOption(String)", "name": "handleLongOption", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "void", "signature": "private void handleLongOption(final String token)", "original_string": "    private void handleLongOption(final String token) throws ParseException {\n        if (indexOfEqual(token) == -1) {\n            handleLongOptionWithoutEqual(token);\n        } else {\n            handleLongOptionWithEqual(token);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nHandles the following tokens:\n\n--L --L=V --L V --l\n\n@param token the command line token to handle\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[void]handleLongOptionWithEqual(String)", "name": "handleLongOptionWithEqual", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "void", "signature": "private void handleLongOptionWithEqual(final String token)", "original_string": "    private void handleLongOptionWithEqual(final String token) throws ParseException {\n        final int pos = indexOfEqual(token);\n        final String value = token.substring(pos + 1);\n        final String opt = token.substring(0, pos);\n        final List<String> matchingOpts = getMatchingLongOptions(opt);\n        if (matchingOpts.isEmpty()) {\n            handleUnknownToken(currentToken);\n        } else if (matchingOpts.size() > 1 && !options.hasLongOption(opt)) {\n            throw new AmbiguousOptionException(opt, matchingOpts);\n        } else {\n            final String key = options.hasLongOption(opt) ? opt : matchingOpts.get(0);\n            final Option option = options.getOption(key);\n            if (option.acceptsArg()) {\n                handleOption(option);\n                currentOption.processValue(stripLeadingAndTrailingQuotesDefaultOff(value));\n                currentOption = null;\n            } else {\n                handleUnknownToken(currentToken);\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nHandles the following tokens:\n\n--L=V -L=V --l=V -l=V\n\n@param token the command line token to handle\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[void]handleLongOptionWithoutEqual(String)", "name": "handleLongOptionWithoutEqual", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "void", "signature": "private void handleLongOptionWithoutEqual(final String token)", "original_string": "    private void handleLongOptionWithoutEqual(final String token) throws ParseException {\n        final List<String> matchingOpts = getMatchingLongOptions(token);\n        if (matchingOpts.isEmpty()) {\n            handleUnknownToken(currentToken);\n        } else if (matchingOpts.size() > 1 && !options.hasLongOption(token)) {\n            throw new AmbiguousOptionException(token, matchingOpts);\n        } else {\n            final String key = options.hasLongOption(token) ? token : matchingOpts.get(0);\n            handleOption(options.getOption(key));\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nHandles the following tokens:\n\n--L -L --l -l\n\n@param token the command line token to handle\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[void]handleOption(Option)", "name": "handleOption", "arg_nums": 1, "params": [{"name": "option", "type": "Option"}], "return_type": "void", "signature": "private void handleOption(final Option option)", "original_string": "    private void handleOption(final Option option) throws ParseException {\n        // check the previous option before handling the next one\n        checkRequiredArgs();\n        final Option copy = (Option) option.clone();\n        updateRequiredOptions(copy);\n        cmd.addOption(copy);\n        currentOption = copy.hasArg() ? copy : null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[void]handleProperties(Properties)", "name": "handleProperties", "arg_nums": 1, "params": [{"name": "properties", "type": "Properties"}], "return_type": "void", "signature": "private void handleProperties(final Properties properties)", "original_string": "    private void handleProperties(final Properties properties) throws ParseException {\n        if (properties == null) {\n            return;\n        }\n        for (final Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();) {\n            final String option = e.nextElement().toString();\n            final Option opt = options.getOption(option);\n            if (opt == null) {\n                throw new UnrecognizedOptionException(\"Default option wasn't defined\", option);\n            }\n            // if the option is part of a group, check if another option of the group has been selected\n            final OptionGroup group = options.getOptionGroup(opt);\n            final boolean selected = group != null && group.isSelected();\n            if (!cmd.hasOption(option) && !selected) {\n                // get the value from the properties\n                final String value = properties.getProperty(option);\n\n                if (opt.hasArg()) {\n                    if (Util.isEmpty(opt.getValues())) {\n                        opt.processValue(stripLeadingAndTrailingQuotesDefaultOff(value));\n                    }\n                } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) {\n                    // if the value is not yes, true or 1 then don't add the option to the CommandLine\n                    continue;\n                }\n                handleOption(opt);\n                currentOption = null;\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the values of Options using the values in {@code properties}.\n\n@param properties The value properties to be processed.\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[void]handleShortAndLongOption(String)", "name": "handleShortAndLongOption", "arg_nums": 1, "params": [{"name": "hyphenToken", "type": "String"}], "return_type": "void", "signature": "private void handleShortAndLongOption(final String hyphenToken)", "original_string": "    private void handleShortAndLongOption(final String hyphenToken) throws ParseException {\n        final String token = Util.stripLeadingHyphens(hyphenToken);\n        final int pos = indexOfEqual(token);\n        if (token.length() == 1) {\n            // -S\n            if (options.hasShortOption(token)) {\n                handleOption(options.getOption(token));\n            } else {\n                handleUnknownToken(hyphenToken);\n            }\n        } else if (pos == -1) {\n            // no equal sign found (-xxx)\n            if (options.hasShortOption(token)) {\n                handleOption(options.getOption(token));\n            } else if (!getMatchingLongOptions(token).isEmpty()) {\n                // -L or -l\n                handleLongOptionWithoutEqual(hyphenToken);\n            } else {\n                // look for a long prefix (-Xmx512m)\n                final String opt = getLongPrefix(token);\n\n                if (opt != null && options.getOption(opt).acceptsArg()) {\n                    handleOption(options.getOption(opt));\n                    currentOption.processValue(stripLeadingAndTrailingQuotesDefaultOff(token.substring(opt.length())));\n                    currentOption = null;\n                } else if (isJavaProperty(token)) {\n                    // -SV1 (-Dflag)\n                    handleOption(options.getOption(token.substring(0, 1)));\n                    currentOption.processValue(stripLeadingAndTrailingQuotesDefaultOff(token.substring(1)));\n                    currentOption = null;\n                } else {\n                    // -S1S2S3 or -S1S2V\n                    handleConcatenatedOptions(hyphenToken);\n                }\n            }\n        } else {\n            // equal sign found (-xxx=yyy)\n            final String opt = token.substring(0, pos);\n            final String value = token.substring(pos + 1);\n\n            if (opt.length() == 1) {\n                // -S=V\n                final Option option = options.getOption(opt);\n                if (option != null && option.acceptsArg()) {\n                    handleOption(option);\n                    currentOption.processValue(value);\n                    currentOption = null;\n                } else {\n                    handleUnknownToken(hyphenToken);\n                }\n            } else if (isJavaProperty(opt)) {\n                // -SV1=V2 (-Dkey=value)\n                handleOption(options.getOption(opt.substring(0, 1)));\n                currentOption.processValue(opt.substring(1));\n                currentOption.processValue(value);\n                currentOption = null;\n            } else {\n                // -L=V or -l=V\n                handleLongOptionWithEqual(hyphenToken);\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nHandles the following tokens:\n\n-S -SV -S V -S=V -S1S2 -S1S2 V -SV1=V2\n\n-L -LV -L V -L=V -l\n\n@param hyphenToken the command line token to handle\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[void]handleToken(String)", "name": "handleToken", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "void", "signature": "private void handleToken(final String token)", "original_string": "    private void handleToken(final String token) throws ParseException {\n        if (token != null) {\n            currentToken = token;\n            if (skipParsing) {\n                cmd.addArg(token);\n            } else if (\"--\".equals(token)) {\n                skipParsing = true;\n            } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) {\n                currentOption.processValue(stripLeadingAndTrailingQuotesDefaultOn(token));\n            } else if (token.startsWith(\"--\")) {\n                handleLongOption(token);\n            } else if (token.startsWith(\"-\") && !\"-\".equals(token)) {\n                handleShortAndLongOption(token);\n            } else {\n                handleUnknownToken(token);\n            }\n            if (currentOption != null && !currentOption.acceptsArg()) {\n                currentOption = null;\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nHandles any command line token.\n\n@param token the command line token to handle\n@throws ParseException\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[void]handleUnknownToken(String)", "name": "handleUnknownToken", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "void", "signature": "private void handleUnknownToken(final String token)", "original_string": "    private void handleUnknownToken(final String token) throws ParseException {\n        if (token.startsWith(\"-\") && token.length() > 1 && !stopAtNonOption) {\n            throw new UnrecognizedOptionException(\"Unrecognized option: \" + token, token);\n        }\n        cmd.addArg(token);\n        if (stopAtNonOption) {\n            skipParsing = true;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nHandles an unknown token. If the token starts with a dash an UnrecognizedOptionException is thrown. Otherwise the\ntoken is added to the arguments of the command line. If the stopAtNonOption flag is set, this stops the parsing and\nthe remaining tokens are added as-is in the arguments of the command line.\n\n@param token the command line token to handle\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[boolean]isArgument(String)", "name": "isArgument", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "boolean", "signature": "private boolean isArgument(final String token)", "original_string": "    private boolean isArgument(final String token) {\n        return !isOption(token) || isNegativeNumber(token);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests if the token is a valid argument.\n\n@param token\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[boolean]isJavaProperty(String)", "name": "isJavaProperty", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "boolean", "signature": "private boolean isJavaProperty(final String token)", "original_string": "    private boolean isJavaProperty(final String token) {\n        final String opt = token.isEmpty() ? null : token.substring(0, 1);\n        final Option option = options.getOption(opt);\n        return option != null && (option.getArgs() >= 2 || option.getArgs() == Option.UNLIMITED_VALUES);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests if the specified token is a Java-like property (-Dkey=value).\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[boolean]isLongOption(String)", "name": "isLongOption", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "boolean", "signature": "private boolean isLongOption(final String token)", "original_string": "    private boolean isLongOption(final String token) {\n        if (token == null || !token.startsWith(\"-\") || token.length() == 1) {\n            return false;\n        }\n        final int pos = indexOfEqual(token);\n        final String t = pos == -1 ? token : token.substring(0, pos);\n        if (!getMatchingLongOptions(t).isEmpty()) {\n            // long or partial long options (--L, -L, --L=V, -L=V, --l, --l=V)\n            return true;\n        }\n        if (getLongPrefix(token) != null && !token.startsWith(\"--\")) {\n            // -LV\n            return true;\n        }\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests if the token looks like a long option.\n\n@param token\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[boolean]isNegativeNumber(String)", "name": "isNegativeNumber", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "boolean", "signature": "private boolean isNegativeNumber(final String token)", "original_string": "    private boolean isNegativeNumber(final String token) {\n        try {\n            Double.parseDouble(token);\n            return true;\n        } catch (final NumberFormatException e) {\n            return false;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests if the token is a negative number.\n\n@param token\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[boolean]isOption(String)", "name": "isOption", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "boolean", "signature": "private boolean isOption(final String token)", "original_string": "    private boolean isOption(final String token) {\n        return isLongOption(token) || isShortOption(token);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests if the token looks like an option.\n\n@param token\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[boolean]isShortOption(String)", "name": "isShortOption", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "boolean", "signature": "private boolean isShortOption(final String token)", "original_string": "    private boolean isShortOption(final String token) {\n        // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)\n        if (token == null || !token.startsWith(\"-\") || token.length() == 1) {\n            return false;\n        }\n        // remove leading \"-\" and \"=value\"\n        final int pos = indexOfEqual(token);\n        final String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);\n        if (options.hasShortOption(optName)) {\n            return true;\n        }\n        // check for several concatenated short options\n        return !optName.isEmpty() && options.hasShortOption(String.valueOf(optName.charAt(0)));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests if the token looks like a short option.\n\n@param token\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[CommandLine]parse(Options,String[])", "name": "parse", "arg_nums": 2, "params": [{"name": "options", "type": "Options"}, {"name": "arguments", "type": "String[]"}], "return_type": "CommandLine", "signature": "@Override\n    public CommandLine parse(final Options options, final String[] arguments)", "original_string": "    @Override\n    public CommandLine parse(final Options options, final String[] arguments) throws ParseException {\n        return parse(options, arguments, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "CommandLine", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[CommandLine]parse(Options,String[],boolean)", "name": "parse", "arg_nums": 3, "params": [{"name": "options", "type": "Options"}, {"name": "arguments", "type": "String[]"}, {"name": "stopAtNonOption", "type": "boolean"}], "return_type": "CommandLine", "signature": "@Override\n    public CommandLine parse(final Options options, final String[] arguments, final boolean stopAtNonOption)", "original_string": "    @Override\n    public CommandLine parse(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\n        return parse(options, arguments, null, stopAtNonOption);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "CommandLine", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[CommandLine]parse(Options,String[],Properties)", "name": "parse", "arg_nums": 3, "params": [{"name": "options", "type": "Options"}, {"name": "arguments", "type": "String[]"}, {"name": "properties", "type": "Properties"}], "return_type": "CommandLine", "signature": "public CommandLine parse(final Options options, final String[] arguments, final Properties properties)", "original_string": "    public CommandLine parse(final Options options, final String[] arguments, final Properties properties) throws ParseException {\n        return parse(options, arguments, properties, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "CommandLine", "classes": []}, "docstring": "\nParses the arguments according to the specified options and properties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@return the list of atomic option and value tokens\n\n@throws ParseException if there are any problems encountered while parsing the command line tokens.\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[CommandLine]parse(Options,String[],Properties,boolean)", "name": "parse", "arg_nums": 4, "params": [{"name": "options", "type": "Options"}, {"name": "arguments", "type": "String[]"}, {"name": "properties", "type": "Properties"}, {"name": "stopAtNonOption", "type": "boolean"}], "return_type": "CommandLine", "signature": "public CommandLine parse(final Options options, final String[] arguments, final Properties properties, final boolean stopAtNonOption)", "original_string": "    public CommandLine parse(final Options options, final String[] arguments, final Properties properties, final boolean stopAtNonOption)\n        throws ParseException {\n        this.options = options;\n        this.stopAtNonOption = stopAtNonOption;\n        skipParsing = false;\n        currentOption = null;\n        expectedOpts = new ArrayList<>(options.getRequiredOptions());\n        // clear the data from the groups\n        for (final OptionGroup group : options.getOptionGroups()) {\n            group.setSelected(null);\n        }\n        cmd = CommandLine.builder().setDeprecatedHandler(deprecatedHandler).build();\n        if (arguments != null) {\n            for (final String argument : arguments) {\n                handleToken(argument);\n            }\n        }\n        // check the arguments of the last option\n        checkRequiredArgs();\n        // add the default options\n        handleProperties(properties);\n        checkRequiredOptions();\n        return cmd;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "CommandLine", "classes": []}, "docstring": "\nParses the arguments according to the specified options and properties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@param stopAtNonOption if {@code true} an unrecognized argument stops the parsing and the remaining arguments\n       are added to the {@link CommandLine}s args list. If {@code false} an unrecognized argument triggers a\n       ParseException.\n\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered while parsing the command line tokens.\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[String]stripLeadingAndTrailingQuotesDefaultOff(String)", "name": "stripLeadingAndTrailingQuotesDefaultOff", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "String", "signature": "private String stripLeadingAndTrailingQuotesDefaultOff(final String token)", "original_string": "    private String stripLeadingAndTrailingQuotesDefaultOff(final String token) {\n        if (stripLeadingAndTrailingQuotes != null && stripLeadingAndTrailingQuotes) {\n            return Util.stripLeadingAndTrailingQuotes(token);\n        }\n        return token;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nStrips balanced leading and trailing quotes if the stripLeadingAndTrailingQuotes is set\nIf stripLeadingAndTrailingQuotes is null, then do not strip\n\n@param token a string\n@return token with the quotes stripped (if set)\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[String]stripLeadingAndTrailingQuotesDefaultOn(String)", "name": "stripLeadingAndTrailingQuotesDefaultOn", "arg_nums": 1, "params": [{"name": "token", "type": "String"}], "return_type": "String", "signature": "private String stripLeadingAndTrailingQuotesDefaultOn(final String token)", "original_string": "    private String stripLeadingAndTrailingQuotesDefaultOn(final String token) {\n        if (stripLeadingAndTrailingQuotes == null || stripLeadingAndTrailingQuotes) {\n            return Util.stripLeadingAndTrailingQuotes(token);\n        }\n        return token;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nStrips balanced leading and trailing quotes if the stripLeadingAndTrailingQuotes is set\nIf stripLeadingAndTrailingQuotes is null, then do not strip\n\n@param token a string\n@return token with the quotes stripped (if set)\n"}, {"uris": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser.[void]updateRequiredOptions(Option)", "name": "updateRequiredOptions", "arg_nums": 1, "params": [{"name": "option", "type": "Option"}], "return_type": "void", "signature": "private void updateRequiredOptions(final Option option)", "original_string": "    private void updateRequiredOptions(final Option option) throws AlreadySelectedException {\n        if (option.isRequired()) {\n            expectedOpts.remove(option.getKey());\n        }\n\n        // if the option is in an OptionGroup make that option the selected option of the group\n        if (options.getOptionGroup(option) != null) {\n            final OptionGroup group = options.getOptionGroup(option);\n\n            if (group.isRequired()) {\n                expectedOpts.remove(group);\n            }\n\n            group.setSelected(option);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DefaultParser.java", "class_name": "DefaultParser", "class_uri": "src/main/java/org/apache/commons/cli/DefaultParser.java.DefaultParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nRemoves the option or its group from the list of expected elements.\n\n@param option\n"}, {"uris": "src/main/java/org/apache/commons/cli/ParseException.java.ParseException.[ParseException]wrap(Throwable)", "name": "wrap", "arg_nums": 1, "params": [{"name": "e", "type": "Throwable"}], "return_type": "ParseException", "signature": "public static ParseException wrap(final Throwable e)", "original_string": "    public static ParseException wrap(final Throwable e) throws UnsupportedOperationException {\n        if (e instanceof UnsupportedOperationException) {\n            throw (UnsupportedOperationException) e;\n        }\n\n        if (e instanceof ParseException) {\n            return (ParseException) e;\n        }\n        return new ParseException(e);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/ParseException.java", "class_name": "ParseException", "class_uri": "src/main/java/org/apache/commons/cli/ParseException.java.ParseException", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ParseException", "classes": []}, "docstring": "\nConverts any exception except {@code UnsupportedOperationException} to a {@code ParseException}.\nif {@code e} is an instance of {@code ParseException} it is returned, otherwise a {@code ParseException} is\ncreated that wraps it.\n<p>\nNote: {@code UnsupportedOperationException} are not wrapped.  This is to solve a legacy expected exception problem and will be\nremoved in the future.</p>\n@param e the exception to convert.\n@return the ParseException.\n@throws UnsupportedOperationException due to legacy expectations.  Will be removed in the future.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/ParseException.java.ParseException.[]ParseException(String)", "name": "ParseException", "arg_nums": 1, "params": [{"name": "message", "type": "String"}], "return_type": "", "signature": "public ParseException(final String message)", "original_string": "    public ParseException(final String message) {\n        super(message);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/ParseException.java", "class_name": "ParseException", "class_uri": "src/main/java/org/apache/commons/cli/ParseException.java.ParseException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new {@code ParseException} with the specified detail message.\n\n@param message the detail message\n"}, {"uris": "src/main/java/org/apache/commons/cli/ParseException.java.ParseException.[]ParseException(Throwable)", "name": "ParseException", "arg_nums": 1, "params": [{"name": "e", "type": "Throwable"}], "return_type": "", "signature": "public ParseException(final Throwable e)", "original_string": "    public ParseException(final Throwable e) {\n        super(e);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/ParseException.java", "class_name": "ParseException", "class_uri": "src/main/java/org/apache/commons/cli/ParseException.java.ParseException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new {@code ParseException} wrapping the specified exception.\n\n@param e the Exception to wrap.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Converter.java.Converter.[T]apply(String)", "name": "apply", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "T", "signature": "T apply(String string)", "original_string": "    T apply(String string) throws E;", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Converter.java", "class_name": "Converter", "class_uri": "src/main/java/org/apache/commons/cli/Converter.java.Converter", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nApplies the conversion function to the String argument.\n\n@param string the String to convert\n@return the Object from the conversion.\n@throws E on error.\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionValidator.java.OptionValidator.[boolean]isValidChar(char)", "name": "isValidChar", "arg_nums": 1, "params": [{"name": "c", "type": "char"}], "return_type": "boolean", "signature": "private static boolean isValidChar(final char c)", "original_string": "    private static boolean isValidChar(final char c) {\n        return Character.isJavaIdentifierPart(c) || search(ADDITIONAL_LONG_CHARS, c);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionValidator.java", "class_name": "OptionValidator", "class_uri": "src/main/java/org/apache/commons/cli/OptionValidator.java.OptionValidator", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns whether the specified character is a valid character.\nA character is valid if any of the following conditions are true:\n<ul>\n<li>it is a letter</li>\n<li>it is a currency symbol (such as '$')</li>\n<li>it is a connecting punctuation character (such as '_')</li>\n<li>it is a digit</li>\n<li>it is a numeric letter (such as a Roman numeral character)</li>\n<li>it is a combining mark</li>\n<li>it is a non-spacing mark</li>\n<li>isIdentifierIgnorable returns true for the character</li>\n<li>it is a hyphen/dash ('-')</li>\n</ul>\n@param c the character to validate\n@return true if {@code c} is a valid character letter.\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionValidator.java.OptionValidator.[boolean]isValidOpt(char)", "name": "isValidOpt", "arg_nums": 1, "params": [{"name": "c", "type": "char"}], "return_type": "boolean", "signature": "private static boolean isValidOpt(final char c)", "original_string": "    private static boolean isValidOpt(final char c) {\n        return Character.isJavaIdentifierPart(c) || search(ADDITIONAL_OPTION_CHARS, c);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionValidator.java", "class_name": "OptionValidator", "class_uri": "src/main/java/org/apache/commons/cli/OptionValidator.java.OptionValidator", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns whether the specified character is a valid Option.\nA character is valid if any of the following conditions are true:\n<ul>\n<li>it is a letter</li>\n<li>it is a currency symbol (such as '$')</li>\n<li>it is a connecting punctuation character (such as '_')</li>\n<li>it is a digit</li>\n<li>it is a numeric letter (such as a Roman numeral character)</li>\n<li>it is a combining mark</li>\n<li>it is a non-spacing mark</li>\n<li>isIdentifierIgnorable returns true for the character</li>\n<li>it is a question mark or 'at' sign ('?' or '@')</li>\n</ul>\n@param c the option to validate\n@return true if {@code c} is a letter, '?' or '@', otherwise false.\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionValidator.java.OptionValidator.[boolean]search(char[],char)", "name": "search", "arg_nums": 2, "params": [{"name": "chars", "type": "char[]"}, {"name": "c", "type": "char"}], "return_type": "boolean", "signature": "private static boolean search(final char[] chars, final char c)", "original_string": "    private static boolean search(final char[] chars, final char c) {\n        for (final char a : chars) {\n            if (a == c) {\n                return true;\n            }\n        }\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionValidator.java", "class_name": "OptionValidator", "class_uri": "src/main/java/org/apache/commons/cli/OptionValidator.java.OptionValidator", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks the char array for a matching char.\n@param chars the char array to search\n@param c the char to look for.\n@return {@code true} if {@code c} was in {@code ary}, {@code false} otherwise.\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionValidator.java.OptionValidator.[String]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "option", "type": "String"}], "return_type": "String", "signature": "static String validate(final String option)", "original_string": "    static String validate(final String option) throws IllegalArgumentException {\n        // if opt is null do not check further.\n        if (option == null) {\n            return null;\n        }\n        if (option.isEmpty()) {\n            throw new IllegalArgumentException(\"Empty option name.\");\n        }\n        final char[] chars = option.toCharArray();\n        final char ch0 = chars[0];\n        if (!isValidOpt(ch0)) {\n            throw new IllegalArgumentException(String.format(\"Illegal option name '%s'.\", ch0));\n        }\n        // handle the multi-character opt\n        if (option.length() > 1) {\n            for (int i = 1; i < chars.length; i++) {\n                final char ch = chars[i];\n                if (!isValidChar(ch)) {\n                    throw new IllegalArgumentException(String.format(\"The option '%s' contains an illegal \" + \"character : '%s'.\", option, ch));\n                }\n            }\n        }\n        return option;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionValidator.java", "class_name": "OptionValidator", "class_uri": "src/main/java/org/apache/commons/cli/OptionValidator.java.OptionValidator", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nValidates whether {@code opt} is a permissible Option shortOpt. The rules that specify if the {@code opt}\nis valid are:\n\n<ul>\n<li>a single character {@code opt} that is either Chars.SP(special case), '?', '@' or a letter</li>\n<li>a multi character {@code opt} that only contains valid characters</li>\n</ul>\n</p><p>\nA character is valid if any of the following conditions are true:\n<ul>\n<li>it is a letter</li>\n<li>it is a currency symbol (such as '$')</li>\n<li>it is a connecting punctuation character (such as '_')</li>\n<li>it is a digit</li>\n<li>it is a numeric letter (such as a Roman numeral character)</li>\n<li>it is a combining mark</li>\n<li>it is a non-spacing mark</li>\n<li>isIdentifierIgnorable returns true for the character</li>\n<li>it is a hyphen/dash ('-')</li>\n</ul>\n</p><p>\nIn case {@code opt} is {@code null} no further validation is performed.\n\n@param option The option string to validate, may be null\n@throws IllegalArgumentException if the Option is not valid.\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[Class<?>]createClass(String)", "name": "createClass", "arg_nums": 1, "params": [{"name": "className", "type": "String"}], "return_type": "Class<?>", "signature": "public static Class<?> createClass(final String className)", "original_string": "    public static Class<?> createClass(final String className) throws ParseException {\n        return createValue(className, Class.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Class<?>", "classes": []}, "docstring": "\nReturns the class whose name is {@code className}.\n\n@param className the class name\n@return The class if it is found\n@throws ParseException if the class could not be found\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[Date]createDate(String)", "name": "createDate", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "Date", "signature": "public static Date createDate(final String string)", "original_string": "    public static Date createDate(final String string) {\n        return createValueUnchecked(string, Date.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\nReturns the date represented by {@code string}.\n<p>\nThis method is not yet implemented and always throws an {@link UnsupportedOperationException}.\n</p>\n\n@param string the date string\n@return The date if {@code string} is a valid date string, otherwise return null.\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[Map<Class<?>, Converter<?, ? extends Throwable>>]createDefaultMap()", "name": "createDefaultMap", "arg_nums": 0, "params": [], "return_type": "Map<Class<?>, Converter<?, ? extends Throwable>>", "signature": "public static Map<Class<?>, Converter<?, ? extends Throwable>> createDefaultMap()", "original_string": "    public static Map<Class<?>, Converter<?, ? extends Throwable>> createDefaultMap() {\n        return putDefaultMap(new HashMap<>());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Map<Class<?>, Converter<?, ? extends Throwable>>", "classes": []}, "docstring": "\nCreates a default converter map.\n\n@return a default converter map.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[File]createFile(String)", "name": "createFile", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "File", "signature": "public static File createFile(final String string)", "original_string": "    public static File createFile(final String string) {\n        return createValueUnchecked(string, File.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "File", "classes": []}, "docstring": "\nReturns the File represented by {@code string}.\n\n@param string the File location\n@return The file represented by {@code string}.\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[File[]]createFiles(String)", "name": "createFiles", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "File[]", "signature": "@Deprecated // since 1.7.0\n    public static File[] createFiles(final String string)", "original_string": "    @Deprecated // since 1.7.0\n    public static File[] createFiles(final String string) {\n        // to implement/port:\n        // return FileW.findFiles(string);\n        throw new UnsupportedOperationException(\"Not yet implemented\");\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "@Deprecated // since 1.7.0\n    public static", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public", "static"], "comments": ["// since 1.7.0"], "return_type": "File[]", "classes": []}, "docstring": "\nCreates the File[] represented by {@code string}.\n\n<p>\nThis method is not yet implemented and always throws an {@link UnsupportedOperationException}.\n</p>\n\n@param string the paths to the files\n@return The File[] represented by {@code string}.\n@throws UnsupportedOperationException always\n@deprecated with no replacement\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[Number]createNumber(String)", "name": "createNumber", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "Number", "signature": "@Deprecated // since 1.7.0\n    public static Number createNumber(final String string)", "original_string": "    @Deprecated // since 1.7.0\n    public static Number createNumber(final String string) throws ParseException {\n        return createValue(string, Number.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "@Deprecated // since 1.7.0\n    public static", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public", "static"], "comments": ["// since 1.7.0"], "return_type": "Number", "classes": []}, "docstring": "\nCreates a number from a String. If a '.' is present, it creates a Double, otherwise a Long.\n\n@param string the value\n@return the number represented by {@code string}\n@throws ParseException if {@code string} is not a number\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[Object]createObject(String)", "name": "createObject", "arg_nums": 1, "params": [{"name": "className", "type": "String"}], "return_type": "Object", "signature": "@Deprecated // since 1.7.0\n    public static Object createObject(final String className)", "original_string": "    @Deprecated // since 1.7.0\n    public static Object createObject(final String className) throws ParseException {\n        return createValue(className, Object.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "@Deprecated // since 1.7.0\n    public static", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public", "static"], "comments": ["// since 1.7.0"], "return_type": "Object", "classes": []}, "docstring": "\nCreates an Object from the class name and empty constructor.\n\n@param className the argument value\n@return the initialized object\n@throws ParseException if the class could not be found or the object could not be created\n@deprecated use {@link #createValue(String, Class)}\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[URL]createURL(String)", "name": "createURL", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "URL", "signature": "public static URL createURL(final String string)", "original_string": "    public static URL createURL(final String string) throws ParseException {\n        return createValue(string, URL.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "URL", "classes": []}, "docstring": "\nCreates the URL represented by {@code string}.\n\n@param string the URL string\n@return The URL in {@code string} is well-formed\n@throws ParseException if the URL in {@code string} is not well-formed\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[T]createValue(String,Class<T>)", "name": "createValue", "arg_nums": 2, "params": [{"name": "string", "type": "String"}, {"name": "clazz", "type": "Class<T>"}], "return_type": "T", "signature": "public static <T> T createValue(final String string, final Class<T> clazz)", "original_string": "    public static <T> T createValue(final String string, final Class<T> clazz) throws ParseException {\n        try {\n            return getDefault().getConverter(clazz).apply(string);\n        } catch (final Throwable e) {\n            throw ParseException.wrap(e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nCreates the @code Object} of type {@code clazz} with the value of {@code string}.\n\n@param string the command line value\n@param clazz  the class representing the type of argument\n@param <T>    type of argument\n@return The instance of {@code clazz} initialized with the value of {@code string}.\n@throws ParseException if the value creation for the given class threw an exception.\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[Object]createValue(String,Object)", "name": "createValue", "arg_nums": 2, "params": [{"name": "string", "type": "String"}, {"name": "obj", "type": "Object"}], "return_type": "Object", "signature": "@Deprecated // since 1.7.0\n    public static Object createValue(final String string, final Object obj)", "original_string": "    @Deprecated // since 1.7.0\n    public static Object createValue(final String string, final Object obj) throws ParseException {\n        return createValue(string, (Class<?>) obj);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "@Deprecated // since 1.7.0\n    public static", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public", "static"], "comments": ["// since 1.7.0"], "return_type": "Object", "classes": []}, "docstring": "\nCreates the {@code Object} of type {@code obj} with the value of {@code string}.\n\n@param string the command line value\n@param obj    the type of argument\n@return The instance of {@code obj} initialized with the value of {@code string}.\n@throws ParseException if the value creation for the given object type failed\n@deprecated use {@link #createValue(String, Class)}\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[T]createValueUnchecked(String,Class<T>)", "name": "createValueUnchecked", "arg_nums": 2, "params": [{"name": "string", "type": "String"}, {"name": "clazz", "type": "Class<T>"}], "return_type": "T", "signature": "private static <T> T createValueUnchecked(final String string, final Class<T> clazz)", "original_string": "    private static <T> T createValueUnchecked(final String string, final Class<T> clazz) {\n        try {\n            return createValue(string, clazz);\n        } catch (final ParseException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nDelegates to {@link #createValue(String, Class)} throwing IllegalArgumentException instead of ParseException.\n\n@param string the command line value\n@param clazz  the class representing the type of argument\n@param <T>    type of argument\n@return The instance of {@code clazz} initialized with the value of {@code string}.\n@throws IllegalArgumentException if the value creation for the given class threw an exception.\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[TypeHandler]getDefault()", "name": "getDefault", "arg_nums": 0, "params": [], "return_type": "TypeHandler", "signature": "public static TypeHandler getDefault()", "original_string": "    public static TypeHandler getDefault() {\n        return DEFAULT;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "TypeHandler", "classes": []}, "docstring": "\nGets the default TypeHandler.\n\n@return the default TypeHandler.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[FileInputStream]openFile(String)", "name": "openFile", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "FileInputStream", "signature": "@Deprecated // since 1.7.0\n    public static FileInputStream openFile(final String string)", "original_string": "    @Deprecated // since 1.7.0\n    public static FileInputStream openFile(final String string) throws ParseException {\n        return createValue(string, FileInputStream.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "@Deprecated // since 1.7.0\n    public static", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public", "static"], "comments": ["// since 1.7.0"], "return_type": "FileInputStream", "classes": []}, "docstring": "\nReturns the opened FileInputStream represented by {@code string}.\n\n@param string the file location\n@return The file input stream represented by {@code string}.\n@throws ParseException if the file is not exist or not readable\n@deprecated use {@link #createValue(String, Class)}\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[Map<Class<?>, Converter<?, ? extends Throwable>>]putDefaultMap(Map<Class<?>, Converter<?, ? extends Throwable>>)", "name": "putDefaultMap", "arg_nums": 1, "params": [{"name": "map", "type": "Map<Class<?>, Converter<?, ? extends Throwable>>"}], "return_type": "Map<Class<?>, Converter<?, ? extends Throwable>>", "signature": "private static Map<Class<?>, Converter<?, ? extends Throwable>> putDefaultMap(final Map<Class<?>, Converter<?, ? extends Throwable>> map)", "original_string": "    private static Map<Class<?>, Converter<?, ? extends Throwable>> putDefaultMap(final Map<Class<?>, Converter<?, ? extends Throwable>> map) {\n        map.put(Object.class, Converter.OBJECT);\n        map.put(Class.class, Converter.CLASS);\n        map.put(Date.class, Converter.DATE);\n        map.put(File.class, Converter.FILE);\n        map.put(Path.class, Converter.PATH);\n        map.put(Number.class, Converter.NUMBER);\n        map.put(URL.class, Converter.URL);\n        map.put(FileInputStream.class, FileInputStream::new);\n        map.put(Long.class, Long::parseLong);\n        map.put(Integer.class, Integer::parseInt);\n        map.put(Short.class, Short::parseShort);\n        map.put(Byte.class, Byte::parseByte);\n        map.put(Character.class, s -> s.startsWith(\"\\\\u\") ? Character.toChars(Integer.parseInt(s.substring(2), HEX_RADIX))[0] : s.charAt(0));\n        map.put(Double.class, Double::parseDouble);\n        map.put(Float.class, Float::parseFloat);\n        map.put(BigInteger.class, BigInteger::new);\n        map.put(BigDecimal.class, BigDecimal::new);\n        return map;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Map<Class<?>, Converter<?, ? extends Throwable>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[]TypeHandler()", "name": "TypeHandler", "arg_nums": 0, "params": [], "return_type": "", "signature": "public TypeHandler()", "original_string": "    public TypeHandler() {\n        this(createDefaultMap());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a default initialized instance.\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[]TypeHandler(Map<Class<?>, Converter<?, ? extends Throwable>>)", "name": "TypeHandler", "arg_nums": 1, "params": [{"name": "converterMap", "type": "Map<Class<?>, Converter<?, ? extends Throwable>>"}], "return_type": "", "signature": "public TypeHandler(final Map<Class<?>, Converter<?, ? extends Throwable>> converterMap)", "original_string": "    public TypeHandler(final Map<Class<?>, Converter<?, ? extends Throwable>> converterMap) {\n        this.converterMap = Objects.requireNonNull(converterMap, \"converterMap\");\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a default initialized instance.\n<p>\nFor each entry, that Class' type must match the Converter's first type.\n</p>\n\n@param converterMap The converter map, not null.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler.[Converter<T, ?>]getConverter(Class<T>)", "name": "getConverter", "arg_nums": 1, "params": [{"name": "clazz", "type": "Class<T>"}], "return_type": "Converter<T, ?>", "signature": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\n    public <T> Converter<T, ?> getConverter(final Class<T> clazz)", "original_string": "    @SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\n    public <T> Converter<T, ?> getConverter(final Class<T> clazz) {\n        return (Converter<T, ?>) converterMap.getOrDefault(clazz, Converter.DEFAULT);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/TypeHandler.java", "class_name": "TypeHandler", "class_uri": "src/main/java/org/apache/commons/cli/TypeHandler.java.TypeHandler", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\") // returned value will have type T because it is fixed by clazz\n    public", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": ["// returned value will have type T because it is fixed by clazz"], "return_type": "Converter<T, ?>", "classes": []}, "docstring": "\nGets the registered converter for the the Class, or {@link Converter#DEFAULT} if absent.\n\n@param <T>   The Class parameter type.\n@param clazz The Class to get the Converter for.\n@return the registered converter if any, {@link Converter#DEFAULT} otherwise.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/Parser.java.Parser.[void]checkRequiredOptions()", "name": "checkRequiredOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected void checkRequiredOptions()", "original_string": "    protected void checkRequiredOptions() throws MissingOptionException {\n        // if there are required options that have not been processed\n        if (!getRequiredOptions().isEmpty()) {\n            throw new MissingOptionException(getRequiredOptions());\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Parser.java", "class_name": "Parser", "class_uri": "src/main/java/org/apache/commons/cli/Parser.java.Parser", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nThrows a {@link MissingOptionException} if all of the required options are not present.\n\n@throws MissingOptionException if any of the required Options are not present.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Parser.java.Parser.[String[]]flatten(Options,String[],boolean)", "name": "flatten", "arg_nums": 3, "params": [{"name": "opts", "type": "Options"}, {"name": "arguments", "type": "String[]"}, {"name": "stopAtNonOption", "type": "boolean"}], "return_type": "String[]", "signature": "protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption)", "original_string": "    protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Parser.java", "class_name": "Parser", "class_uri": "src/main/java/org/apache/commons/cli/Parser.java.Parser", "attributes": {"modifiers": "protected abstract", "marker_annotations": [], "non_marker_annotations": ["protected", "abstract"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\nSubclasses must implement this method to reduce the {@code arguments} that have been passed to the parse method.\n\n@param opts The Options to parse the arguments by.\n@param arguments The arguments that have to be flattened.\n@param stopAtNonOption specifies whether to stop flattening when a non option has been encountered\n@return a String array of the flattened arguments\n@throws ParseException if there are any problems encountered while parsing the command line tokens.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Parser.java.Parser.[Options]getOptions()", "name": "getOptions", "arg_nums": 0, "params": [], "return_type": "Options", "signature": "protected Options getOptions()", "original_string": "    protected Options getOptions() {\n        return options;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Parser.java", "class_name": "Parser", "class_uri": "src/main/java/org/apache/commons/cli/Parser.java.Parser", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Options", "classes": []}, "docstring": "\nGets the options.\n\n@return the options.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Parser.java.Parser.[List]getRequiredOptions()", "name": "getRequiredOptions", "arg_nums": 0, "params": [], "return_type": "List", "signature": "protected List getRequiredOptions()", "original_string": "    protected List getRequiredOptions() {\n        return requiredOptions;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Parser.java", "class_name": "Parser", "class_uri": "src/main/java/org/apache/commons/cli/Parser.java.Parser", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "List", "classes": []}, "docstring": "\nGets the required options.\n\n@return the required options.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Parser.java.Parser.[CommandLine]parse(Options,String[])", "name": "parse", "arg_nums": 2, "params": [{"name": "options", "type": "Options"}, {"name": "arguments", "type": "String[]"}], "return_type": "CommandLine", "signature": "@Override\n    public CommandLine parse(final Options options, final String[] arguments)", "original_string": "    @Override\n    public CommandLine parse(final Options options, final String[] arguments) throws ParseException {\n        return parse(options, arguments, null, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Parser.java", "class_name": "Parser", "class_uri": "src/main/java/org/apache/commons/cli/Parser.java.Parser", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "CommandLine", "classes": []}, "docstring": "\nParses the specified {@code arguments} based on the specified {@link Options}.\n\n@param options the {@code Options}\n@param arguments the {@code arguments}\n@return the {@code CommandLine}\n@throws ParseException if there are any problems encountered while parsing the command line tokens.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Parser.java.Parser.[CommandLine]parse(Options,String[],boolean)", "name": "parse", "arg_nums": 3, "params": [{"name": "options", "type": "Options"}, {"name": "arguments", "type": "String[]"}, {"name": "stopAtNonOption", "type": "boolean"}], "return_type": "CommandLine", "signature": "@Override\n    public CommandLine parse(final Options options, final String[] arguments, final boolean stopAtNonOption)", "original_string": "    @Override\n    public CommandLine parse(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\n        return parse(options, arguments, null, stopAtNonOption);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Parser.java", "class_name": "Parser", "class_uri": "src/main/java/org/apache/commons/cli/Parser.java.Parser", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "CommandLine", "classes": []}, "docstring": "\nParses the specified {@code arguments} based on the specified {@link Options}.\n\n@param options the {@code Options}\n@param arguments the {@code arguments}\n@param stopAtNonOption if {@code true} an unrecognized argument stops the parsing and the remaining arguments\n       are added to the {@link CommandLine}s args list. If {@code false} an unrecognized argument triggers a\n       ParseException.\n@return the {@code CommandLine}\n@throws ParseException if an error occurs when parsing the arguments.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Parser.java.Parser.[CommandLine]parse(Options,String[],Properties)", "name": "parse", "arg_nums": 3, "params": [{"name": "options", "type": "Options"}, {"name": "arguments", "type": "String[]"}, {"name": "properties", "type": "Properties"}], "return_type": "CommandLine", "signature": "public CommandLine parse(final Options options, final String[] arguments, final Properties properties)", "original_string": "    public CommandLine parse(final Options options, final String[] arguments, final Properties properties) throws ParseException {\n        return parse(options, arguments, properties, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Parser.java", "class_name": "Parser", "class_uri": "src/main/java/org/apache/commons/cli/Parser.java.Parser", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "CommandLine", "classes": []}, "docstring": "\nParse the arguments according to the specified options and properties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered while parsing the command line tokens.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/cli/Parser.java.Parser.[CommandLine]parse(Options,String[],Properties,boolean)", "name": "parse", "arg_nums": 4, "params": [{"name": "options", "type": "Options"}, {"name": "arguments", "type": "String[]"}, {"name": "properties", "type": "Properties"}, {"name": "stopAtNonOption", "type": "boolean"}], "return_type": "CommandLine", "signature": "public CommandLine parse(final Options options, final String[] arguments, final Properties properties, final boolean stopAtNonOption)", "original_string": "    public CommandLine parse(final Options options, final String[] arguments, final Properties properties, final boolean stopAtNonOption)\n            throws ParseException {\n        // clear out the data in options in case it's been used before (CLI-71)\n        for (final Option opt : options.helpOptions()) {\n            opt.clearValues();\n        }\n        // clear the data from the groups\n        for (final OptionGroup group : options.getOptionGroups()) {\n            group.setSelected(null);\n        }\n        // initialize members\n        setOptions(options);\n        cmd = CommandLine.builder().build();\n        boolean eatTheRest = false;\n        final List<String> tokenList = Arrays.asList(flatten(getOptions(), arguments == null ? new String[0] : arguments, stopAtNonOption));\n        final ListIterator<String> iterator = tokenList.listIterator();\n        // process each flattened token\n        while (iterator.hasNext()) {\n            final String token = iterator.next();\n            if (token != null) {\n                // the value is the double-dash\n                if (\"--\".equals(token)) {\n                    eatTheRest = true;\n                } else if (\"-\".equals(token)) {\n                    // the value is a single dash\n                    if (stopAtNonOption) {\n                        eatTheRest = true;\n                    } else {\n                        cmd.addArg(token);\n                    }\n                } else if (token.startsWith(\"-\")) {\n                    // the value is an option\n                    if (stopAtNonOption && !getOptions().hasOption(token)) {\n                        eatTheRest = true;\n                        cmd.addArg(token);\n                    } else {\n                        processOption(token, iterator);\n                    }\n                } else {\n                    // the value is an argument\n                    cmd.addArg(token);\n                    if (stopAtNonOption) {\n                        eatTheRest = true;\n                    }\n                }\n                // eat the remaining tokens\n                if (eatTheRest) {\n                    while (iterator.hasNext()) {\n                        final String str = iterator.next();\n                        // ensure only one double-dash is added\n                        if (!\"--\".equals(str)) {\n                            cmd.addArg(str);\n                        }\n                    }\n                }\n            }\n        }\n        processProperties(properties);\n        checkRequiredOptions();\n        return cmd;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Parser.java", "class_name": "Parser", "class_uri": "src/main/java/org/apache/commons/cli/Parser.java.Parser", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "CommandLine", "classes": []}, "docstring": "\nParse the arguments according to the specified options and properties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@param stopAtNonOption if {@code true} an unrecognized argument stops the parsing and the remaining arguments\n       are added to the {@link CommandLine}s args list. If {@code false} an unrecognized argument triggers a\n       ParseException.\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered while parsing the command line tokens.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/cli/Parser.java.Parser.[void]processArgs(Option,ListIterator<String>)", "name": "processArgs", "arg_nums": 2, "params": [{"name": "opt", "type": "Option"}, {"name": "iter", "type": "ListIterator<String>"}], "return_type": "void", "signature": "public void processArgs(final Option opt, final ListIterator<String> iter)", "original_string": "    public void processArgs(final Option opt, final ListIterator<String> iter) throws ParseException {\n        // loop until an option is found\n        while (iter.hasNext()) {\n            final String str = iter.next();\n            // found an Option, not an argument\n            if (getOptions().hasOption(str) && str.startsWith(\"-\")) {\n                iter.previous();\n                break;\n            }\n            // found a value\n            try {\n                opt.processValue(Util.stripLeadingAndTrailingQuotes(str));\n            } catch (final RuntimeException exp) {\n                iter.previous();\n                break;\n            }\n        }\n        if (opt.getValues() == null && !opt.hasOptionalArg()) {\n            throw new MissingArgumentException(opt);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Parser.java", "class_name": "Parser", "class_uri": "src/main/java/org/apache/commons/cli/Parser.java.Parser", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nProcess the argument values for the specified Option {@code opt} using the values retrieved from the specified\niterator {@code iter}.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line Options.\n@throws ParseException if an argument value is required and it is has not been found.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Parser.java.Parser.[void]processOption(String,ListIterator<String>)", "name": "processOption", "arg_nums": 2, "params": [{"name": "arg", "type": "String"}, {"name": "iter", "type": "ListIterator<String>"}], "return_type": "void", "signature": "protected void processOption(final String arg, final ListIterator<String> iter)", "original_string": "    protected void processOption(final String arg, final ListIterator<String> iter) throws ParseException {\n        final boolean hasOption = getOptions().hasOption(arg);\n        // if there is no option throw an UnrecognizedOptionException\n        if (!hasOption) {\n            throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\n        }\n        // get the option represented by arg\n        final Option opt = (Option) getOptions().getOption(arg).clone();\n        // update the required options and groups\n        updateRequiredOptions(opt);\n        // if the option takes an argument value\n        if (opt.hasArg()) {\n            processArgs(opt, iter);\n        }\n        // set the option on the command line\n        cmd.addOption(opt);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Parser.java", "class_name": "Parser", "class_uri": "src/main/java/org/apache/commons/cli/Parser.java.Parser", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nProcess the Option specified by {@code arg} using the values retrieved from the specified iterator\n{@code iter}.\n\n@param arg The String value representing an Option\n@param iter The iterator over the flattened command line arguments.\n@throws ParseException if {@code arg} does not represent an Option\n"}, {"uris": "src/main/java/org/apache/commons/cli/Parser.java.Parser.[void]processProperties(Properties)", "name": "processProperties", "arg_nums": 1, "params": [{"name": "properties", "type": "Properties"}], "return_type": "void", "signature": "protected void processProperties(final Properties properties)", "original_string": "    protected void processProperties(final Properties properties) throws ParseException {\n        if (properties == null) {\n            return;\n        }\n        for (final Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();) {\n            final String option = e.nextElement().toString();\n            final Option opt = options.getOption(option);\n            if (opt == null) {\n                throw new UnrecognizedOptionException(\"Default option wasn't defined\", option);\n            }\n            // if the option is part of a group, check if another option of the group has been selected\n            final OptionGroup group = options.getOptionGroup(opt);\n            final boolean selected = group != null && group.isSelected();\n            if (!cmd.hasOption(option) && !selected) {\n                // get the value from the properties instance\n                final String value = properties.getProperty(option);\n                if (opt.hasArg()) {\n                    if (Util.isEmpty(opt.getValues())) {\n                        try {\n                            opt.processValue(value);\n                        } catch (final RuntimeException exp) { // NOPMD\n                            // if we cannot add the value don't worry about it\n                        }\n                    }\n                } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) {\n                    // if the value is not yes, true or 1 then don't add the\n                    // option to the CommandLine\n                    continue;\n                }\n                cmd.addOption(opt);\n                updateRequiredOptions(opt);\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Parser.java", "class_name": "Parser", "class_uri": "src/main/java/org/apache/commons/cli/Parser.java.Parser", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the values of Options using the values in {@code properties}.\n\n@param properties The value properties to be processed.\n@throws ParseException if there are any problems encountered while processing the properties.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Parser.java.Parser.[void]setOptions(Options)", "name": "setOptions", "arg_nums": 1, "params": [{"name": "options", "type": "Options"}], "return_type": "void", "signature": "protected void setOptions(final Options options)", "original_string": "    protected void setOptions(final Options options) {\n        this.options = options;\n        this.requiredOptions = new ArrayList<>(options.getRequiredOptions());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Parser.java", "class_name": "Parser", "class_uri": "src/main/java/org/apache/commons/cli/Parser.java.Parser", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the options.\n\n@param options the options.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Parser.java.Parser.[void]updateRequiredOptions(Option)", "name": "updateRequiredOptions", "arg_nums": 1, "params": [{"name": "opt", "type": "Option"}], "return_type": "void", "signature": "private void updateRequiredOptions(final Option opt)", "original_string": "    private void updateRequiredOptions(final Option opt) throws ParseException {\n        // if the option is a required option remove the option from\n        // the requiredOptions list\n        if (opt.isRequired()) {\n            getRequiredOptions().remove(opt.getKey());\n        }\n        // if the option is in an OptionGroup make that option the selected\n        // option of the group\n        if (getOptions().getOptionGroup(opt) != null) {\n            final OptionGroup group = getOptions().getOptionGroup(opt);\n            if (group.isRequired()) {\n                getRequiredOptions().remove(group);\n            }\n            group.setSelected(opt);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Parser.java", "class_name": "Parser", "class_uri": "src/main/java/org/apache/commons/cli/Parser.java.Parser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nRemoves the option or its group from the list of expected elements.\n\n@param opt\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[Options]addOption(Option)", "name": "addOption", "arg_nums": 1, "params": [{"name": "opt", "type": "Option"}], "return_type": "Options", "signature": "public Options addOption(final Option opt)", "original_string": "    public Options addOption(final Option opt) {\n        final String key = opt.getKey();\n        // add it to the long option list\n        if (opt.hasLongOpt()) {\n            longOpts.put(opt.getLongOpt(), opt);\n        }\n        // if the option is required add it to the required list\n        if (opt.isRequired()) {\n            if (requiredOpts.contains(key)) {\n                requiredOpts.remove(requiredOpts.indexOf(key));\n            }\n            requiredOpts.add(key);\n        }\n        shortOpts.put(key, opt);\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Options", "classes": []}, "docstring": "\nAdds an option instance\n\n@param opt the option that is to be added\n@return the resulting Options instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[Options]addOption(String,boolean,String)", "name": "addOption", "arg_nums": 3, "params": [{"name": "opt", "type": "String"}, {"name": "hasArg", "type": "boolean"}, {"name": "description", "type": "String"}], "return_type": "Options", "signature": "public Options addOption(final String opt, final boolean hasArg, final String description)", "original_string": "    public Options addOption(final String opt, final boolean hasArg, final String description) {\n        addOption(opt, null, hasArg, description);\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Options", "classes": []}, "docstring": "\nAdds an option that only contains a short-name.\n<p>\nIt may be specified as requiring an argument.\n</p>\n\n@param opt Short single-character name of the option.\n@param hasArg flag signalling if an argument is required after this option\n@param description Self-documenting description\n@return the resulting Options instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[Options]addOption(String,String)", "name": "addOption", "arg_nums": 2, "params": [{"name": "opt", "type": "String"}, {"name": "description", "type": "String"}], "return_type": "Options", "signature": "public Options addOption(final String opt, final String description)", "original_string": "    public Options addOption(final String opt, final String description) {\n        addOption(opt, null, false, description);\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Options", "classes": []}, "docstring": "\nAdds an option that only contains a short name.\n<p>\nThe option does not take an argument.\n</p>\n\n@param opt Short single-character name of the option.\n@param description Self-documenting description\n@return the resulting Options instance\n@since 1.3\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[Options]addOption(String,String,boolean,String)", "name": "addOption", "arg_nums": 4, "params": [{"name": "opt", "type": "String"}, {"name": "longOpt", "type": "String"}, {"name": "hasArg", "type": "boolean"}, {"name": "description", "type": "String"}], "return_type": "Options", "signature": "public Options addOption(final String opt, final String longOpt, final boolean hasArg, final String description)", "original_string": "    public Options addOption(final String opt, final String longOpt, final boolean hasArg, final String description) {\n        addOption(new Option(opt, longOpt, hasArg, description));\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Options", "classes": []}, "docstring": "\nAdds an option that contains a short-name and a long-name.\n<p>\nIt may be specified as requiring an argument.\n</p>\n\n@param opt Short single-character name of the option.\n@param longOpt Long multi-character name of the option.\n@param hasArg flag signalling if an argument is required after this option\n@param description Self-documenting description\n@return the resulting Options instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[Options]addOptionGroup(OptionGroup)", "name": "addOptionGroup", "arg_nums": 1, "params": [{"name": "group", "type": "OptionGroup"}], "return_type": "Options", "signature": "public Options addOptionGroup(final OptionGroup group)", "original_string": "    public Options addOptionGroup(final OptionGroup group) {\n        if (group.isRequired()) {\n            requiredOpts.add(group);\n        }\n        for (final Option option : group.getOptions()) {\n            // an Option cannot be required if it is in an\n            // OptionGroup, either the group is required or\n            // nothing is required\n            option.setRequired(false);\n            addOption(option);\n            optionGroups.put(option.getKey(), group);\n        }\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Options", "classes": []}, "docstring": "\nAdds the specified option group.\n\n@param group the OptionGroup that is to be added\n@return the resulting Options instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[Options]addOptions(Options)", "name": "addOptions", "arg_nums": 1, "params": [{"name": "options", "type": "Options"}], "return_type": "Options", "signature": "public Options addOptions(final Options options)", "original_string": "    public Options addOptions(final Options options) {\n        for (final Option opt : options.getOptions()) {\n            if (hasOption(opt.getKey())) {\n                throw new IllegalArgumentException(\"Duplicate key: \" + opt.getKey());\n            }\n            addOption(opt);\n        }\n        options.getOptionGroups().forEach(this::addOptionGroup);\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Options", "classes": []}, "docstring": "\nAdds options to this option.  If any Option in {@code options} already exists\nin this Options an IllegalArgumentException is thrown\n\n@param options the options to add.\n@return The resulting Options instance.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[Options]addRequiredOption(String,String,boolean,String)", "name": "addRequiredOption", "arg_nums": 4, "params": [{"name": "opt", "type": "String"}, {"name": "longOpt", "type": "String"}, {"name": "hasArg", "type": "boolean"}, {"name": "description", "type": "String"}], "return_type": "Options", "signature": "public Options addRequiredOption(final String opt, final String longOpt, final boolean hasArg, final String description)", "original_string": "    public Options addRequiredOption(final String opt, final String longOpt, final boolean hasArg, final String description) {\n        final Option option = new Option(opt, longOpt, hasArg, description);\n        option.setRequired(true);\n        addOption(option);\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Options", "classes": []}, "docstring": "\nAdds an option that contains a short-name and a long-name.\n<p>\nThe added option is set as required. It may be specified as requiring an argument. This method is a shortcut for:\n</p>\n<pre>\n<code>\nOptions option = new Option(opt, longOpt, hasArg, description);\noption.setRequired(true);\noptions.add(option);\n</code>\n</pre>\n\n@param opt Short single-character name of the option.\n@param longOpt Long multi-character name of the option.\n@param hasArg flag signalling if an argument is required after this option\n@param description Self-documenting description\n@return the resulting Options instance\n@since 1.4\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[List<String>]getMatchingOptions(String)", "name": "getMatchingOptions", "arg_nums": 1, "params": [{"name": "opt", "type": "String"}], "return_type": "List<String>", "signature": "public List<String> getMatchingOptions(final String opt)", "original_string": "    public List<String> getMatchingOptions(final String opt) {\n        final String clean = Util.stripLeadingHyphens(opt);\n        final List<String> matchingOpts = new ArrayList<>();\n        // for a perfect match return the single option only\n        if (longOpts.containsKey(clean)) {\n            return Collections.singletonList(clean);\n        }\n        for (final String longOpt : longOpts.keySet()) {\n            if (longOpt.startsWith(clean)) {\n                matchingOpts.add(longOpt);\n            }\n        }\n        return matchingOpts;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": "\nGets the options with a long name starting with the name specified.\n\n@param opt the partial name of the option\n@return the options matching the partial name specified, or an empty list if none matches\n@since 1.3\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[Option]getOption(String)", "name": "getOption", "arg_nums": 1, "params": [{"name": "opt", "type": "String"}], "return_type": "Option", "signature": "public Option getOption(final String opt)", "original_string": "    public Option getOption(final String opt) {\n        final String clean = Util.stripLeadingHyphens(opt);\n        final Option option = shortOpts.get(clean);\n        return option != null ? option : longOpts.get(clean);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Option", "classes": []}, "docstring": "\nGets the {@link Option} matching the long or short name specified.\n<p>\nThe leading hyphens in the name are ignored (up to 2).\n</p>\n\n@param opt short or long name of the {@link Option}\n@return the option represented by opt\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[OptionGroup]getOptionGroup(Option)", "name": "getOptionGroup", "arg_nums": 1, "params": [{"name": "opt", "type": "Option"}], "return_type": "OptionGroup", "signature": "public OptionGroup getOptionGroup(final Option opt)", "original_string": "    public OptionGroup getOptionGroup(final Option opt) {\n        return optionGroups.get(opt.getKey());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "OptionGroup", "classes": []}, "docstring": "\nGets the OptionGroup the {@code opt} belongs to.\n\n@param opt the option whose OptionGroup is being queried.\n@return the OptionGroup if {@code opt} is part of an OptionGroup, otherwise return null\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[Collection<OptionGroup>]getOptionGroups()", "name": "getOptionGroups", "arg_nums": 0, "params": [], "return_type": "Collection<OptionGroup>", "signature": "Collection<OptionGroup> getOptionGroups()", "original_string": "    Collection<OptionGroup> getOptionGroups() {\n        /* The optionGroups map will have duplicates in the values() results.  We\n         * use the HashSet to filter out duplicates and return a collection of\n         * OpitonGroup.  The decision to return a Collection rather than a set\n         * was probably to keep symmetry with the getOptions() method.\n         */\n        return new HashSet<>(optionGroups.values());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Collection<OptionGroup>", "classes": []}, "docstring": "\nGets the OptionGroups that are members of this Options instance.\n\n@return a Collection of OptionGroup instances.\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[Collection<Option>]getOptions()", "name": "getOptions", "arg_nums": 0, "params": [], "return_type": "Collection<Option>", "signature": "public Collection<Option> getOptions()", "original_string": "    public Collection<Option> getOptions() {\n        return Collections.unmodifiableCollection(helpOptions());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Collection<Option>", "classes": []}, "docstring": "\nGets a read-only list of options in this set\n\n@return read-only Collection of {@link Option} objects in this descriptor\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[List<?>]getRequiredOptions()", "name": "getRequiredOptions", "arg_nums": 0, "params": [], "return_type": "List<?>", "signature": "public List<?> getRequiredOptions()", "original_string": "    public List<?> getRequiredOptions() {\n        return Collections.unmodifiableList(requiredOpts);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<?>", "classes": []}, "docstring": "\nGets the required options.\n\n@return read-only List of required options\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[boolean]hasLongOption(String)", "name": "hasLongOption", "arg_nums": 1, "params": [{"name": "opt", "type": "String"}], "return_type": "boolean", "signature": "public boolean hasLongOption(final String opt)", "original_string": "    public boolean hasLongOption(final String opt) {\n        return longOpts.containsKey(Util.stripLeadingHyphens(opt));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the named {@link Option} is a member of this {@link Options}.\n\n@param opt long name of the {@link Option}\n@return true if the named {@link Option} is a member of this {@link Options}\n@since 1.3\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[boolean]hasOption(String)", "name": "hasOption", "arg_nums": 1, "params": [{"name": "opt", "type": "String"}], "return_type": "boolean", "signature": "public boolean hasOption(final String opt)", "original_string": "    public boolean hasOption(final String opt) {\n        final String clean = Util.stripLeadingHyphens(opt);\n        return shortOpts.containsKey(clean) || longOpts.containsKey(clean);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the named {@link Option} is a member of this {@link Options}.\n\n@param opt short or long name of the {@link Option}\n@return true if the named {@link Option} is a member of this {@link Options}\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[boolean]hasShortOption(String)", "name": "hasShortOption", "arg_nums": 1, "params": [{"name": "opt", "type": "String"}], "return_type": "boolean", "signature": "public boolean hasShortOption(final String opt)", "original_string": "    public boolean hasShortOption(final String opt) {\n        final String clean = Util.stripLeadingHyphens(opt);\n        return shortOpts.containsKey(clean);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the named {@link Option} is a member of this {@link Options}.\n\n@param opt short name of the {@link Option}\n@return true if the named {@link Option} is a member of this {@link Options}\n@since 1.3\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[List<Option>]helpOptions()", "name": "helpOptions", "arg_nums": 0, "params": [], "return_type": "List<Option>", "signature": "List<Option> helpOptions()", "original_string": "    List<Option> helpOptions() {\n        return new ArrayList<>(shortOpts.values());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "List<Option>", "classes": []}, "docstring": "\nReturns the Options for use by the HelpFormatter.\n\n@return the List of Options\n"}, {"uris": "src/main/java/org/apache/commons/cli/Options.java.Options.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        final StringBuilder buf = new StringBuilder();\n        buf.append(\"[ Options: [ short \");\n        buf.append(shortOpts.toString());\n        buf.append(\" ] [ long \");\n        buf.append(longOpts);\n        buf.append(\" ]\");\n        return buf.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Options.java", "class_name": "Options", "class_uri": "src/main/java/org/apache/commons/cli/Options.java.Options", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nDump state, suitable for debugging.\n\n@return Stringified form of this object\n"}, {"uris": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java.PatternOptionBuilder.[Object]getValueClass(char)", "name": "getValueClass", "arg_nums": 1, "params": [{"name": "ch", "type": "char"}], "return_type": "Object", "signature": "@Deprecated // since=\"1.7.0\"\n    public static Object getValueClass(final char ch)", "original_string": "    @Deprecated // since=\"1.7.0\"\n    public static Object getValueClass(final char ch) {\n        return getValueType(ch);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java", "class_name": "PatternOptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java.PatternOptionBuilder", "attributes": {"modifiers": "@Deprecated // since=\"1.7.0\"\n    public static", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public", "static"], "comments": ["// since=\"1.7.0\""], "return_type": "Object", "classes": []}, "docstring": "\nRetrieve the class that {@code ch} represents.\n\n@param ch the specified character\n@return The class that {@code ch} represents\n@deprecated use {@link #getValueType(char)}\n"}, {"uris": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java.PatternOptionBuilder.[Class<?>]getValueType(char)", "name": "getValueType", "arg_nums": 1, "params": [{"name": "ch", "type": "char"}], "return_type": "Class<?>", "signature": "public static Class<?> getValueType(final char ch)", "original_string": "    public static Class<?> getValueType(final char ch) {\n        switch (ch) {\n        case '@':\n            return OBJECT_VALUE;\n        case ':':\n            return STRING_VALUE;\n        case '%':\n            return NUMBER_VALUE;\n        case '+':\n            return CLASS_VALUE;\n        case '#':\n            return DATE_VALUE;\n        case '<':\n            return EXISTING_FILE_VALUE;\n        case '>':\n            return FILE_VALUE;\n        case '*':\n            return FILES_VALUE;\n        case '/':\n            return URL_VALUE;\n        }\n\n        return null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java", "class_name": "PatternOptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java.PatternOptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Class<?>", "classes": []}, "docstring": "\nRetrieve the class that {@code ch} represents.\n\n@param ch the specified character\n@return The class that {@code ch} represents\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java.PatternOptionBuilder.[boolean]isValueCode(char)", "name": "isValueCode", "arg_nums": 1, "params": [{"name": "ch", "type": "char"}], "return_type": "boolean", "signature": "public static boolean isValueCode(final char ch)", "original_string": "    public static boolean isValueCode(final char ch) {\n        return ch == '@' || ch == ':' || ch == '%' || ch == '+' || ch == '#' || ch == '<' || ch == '>' || ch == '*' || ch == '/' || ch == '!';\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java", "class_name": "PatternOptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java.PatternOptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns whether {@code ch} is a value code, i.e. whether it represents a class in a pattern.\n\n@param ch the specified character\n@return true if {@code ch} is a value code, otherwise false.\n"}, {"uris": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java.PatternOptionBuilder.[Options]parsePattern(String)", "name": "parsePattern", "arg_nums": 1, "params": [{"name": "pattern", "type": "String"}], "return_type": "Options", "signature": "public static Options parsePattern(final String pattern)", "original_string": "    public static Options parsePattern(final String pattern) {\n        char opt = Char.SP;\n        boolean required = false;\n        Class<?> type = null;\n        Converter<?, ?> converter = Converter.DEFAULT;\n\n        final Options options = new Options();\n\n        for (int i = 0; i < pattern.length(); i++) {\n            final char ch = pattern.charAt(i);\n\n            // a value code comes after an option and specifies\n            // details about it\n            if (!isValueCode(ch)) {\n                if (opt != Char.SP) {\n                    // @formatter:off\n                    final Option option = Option.builder(String.valueOf(opt))\n                            .hasArg(type != null)\n                            .required(required)\n                            .type(type)\n                            .converter(converter)\n                            .build();\n                    // @formatter:on\n                    // we have a previous one to deal with\n                    options.addOption(option);\n                    required = false;\n                    type = null;\n                    converter = Converter.DEFAULT;\n                }\n\n                opt = ch;\n            } else if (ch == '!') {\n                required = true;\n            } else {\n                type = getValueType(ch);\n                final Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();\n                // Backward compatibility (probably).\n                map.put(FILES_VALUE, unsupported());\n                converter = new TypeHandler(map).getConverter(getValueType(ch));\n            }\n        }\n\n        if (opt != Char.SP) {\n            final Option option = Option.builder(String.valueOf(opt)).hasArg(type != null).required(required).type(type).build();\n\n            // we have a final one to deal with\n            options.addOption(option);\n        }\n\n        return options;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java", "class_name": "PatternOptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java.PatternOptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Options", "classes": []}, "docstring": "\nReturns the {@link Options} instance represented by {@code pattern}.\n\n@param pattern the pattern string\n@return The {@link Options} instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java.PatternOptionBuilder.[T]unsupported()", "name": "unsupported", "arg_nums": 0, "params": [], "return_type": "T", "signature": "@SuppressWarnings(\"unchecked\")\n    static <T> T unsupported()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    static <T> T unsupported() {\n        return (T) UNSUPPORTED;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java", "class_name": "PatternOptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/PatternOptionBuilder.java.PatternOptionBuilder", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    static", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "static"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/Char.java.Char.[]Char()", "name": "Char", "arg_nums": 0, "params": [], "return_type": "", "signature": "private Char()", "original_string": "    private Char() {\n        // empty\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/Char.java", "class_name": "Char", "class_uri": "src/main/java/org/apache/commons/cli/Char.java.Char", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[Builder]builder()", "name": "builder", "arg_nums": 0, "params": [], "return_type": "Builder", "signature": "public static Builder builder()", "original_string": "    public static Builder builder() {\n        return new Builder();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Builder", "classes": []}, "docstring": "\nCreates a new builder.\n\n@return a new builder.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[]CommandLine()", "name": "CommandLine", "arg_nums": 0, "params": [], "return_type": "", "signature": "protected CommandLine()", "original_string": "    protected CommandLine() {\n        this(new LinkedList<>(), new ArrayList<>(), Builder.DEPRECATED_HANDLER);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a command line.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[]CommandLine(List<String>,List<Option>,Consumer<Option>)", "name": "CommandLine", "arg_nums": 3, "params": [{"name": "args", "type": "List<String>"}, {"name": "options", "type": "List<Option>"}, {"name": "deprecatedHandler", "type": "Consumer<Option>"}], "return_type": "", "signature": "private CommandLine(final List<String> args, final List<Option> options, final Consumer<Option> deprecatedHandler)", "original_string": "    private CommandLine(final List<String> args, final List<Option> options, final Consumer<Option> deprecatedHandler) {\n        this.args = Objects.requireNonNull(args, \"args\");\n        this.options = Objects.requireNonNull(options, \"options\");\n        this.deprecatedHandler = deprecatedHandler;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a command line.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[void]addArg(String)", "name": "addArg", "arg_nums": 1, "params": [{"name": "arg", "type": "String"}], "return_type": "void", "signature": "protected void addArg(final String arg)", "original_string": "    protected void addArg(final String arg) {\n        if (arg != null) {\n            args.add(arg);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdds left-over unrecognized option/argument.\n\n@param arg the unrecognized option/argument.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[void]addOption(Option)", "name": "addOption", "arg_nums": 1, "params": [{"name": "opt", "type": "Option"}], "return_type": "void", "signature": "protected void addOption(final Option opt)", "original_string": "    protected void addOption(final Option opt) {\n        if (opt != null) {\n            options.add(opt);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdds an option to the command line. The values of the option are stored.\n\n@param opt the processed option.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[T]get(Supplier<T>)", "name": "get", "arg_nums": 1, "params": [{"name": "supplier", "type": "Supplier<T>"}], "return_type": "T", "signature": "private <T> T get(final Supplier<T> supplier)", "original_string": "    private <T> T get(final Supplier<T> supplier) {\n        return supplier == null ? null : supplier.get();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[List<String>]getArgList()", "name": "getArgList", "arg_nums": 0, "params": [], "return_type": "List<String>", "signature": "public List<String> getArgList()", "original_string": "    public List<String> getArgList() {\n        return args;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": "\nGets any left-over non-recognized options and arguments\n\n@return remaining items passed in but not parsed as a {@code List}.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String[]]getArgs()", "name": "getArgs", "arg_nums": 0, "params": [], "return_type": "String[]", "signature": "public String[] getArgs()", "original_string": "    public String[] getArgs() {\n        return args.toArray(Util.EMPTY_STRING_ARRAY);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\nGets any left-over non-recognized options and arguments\n\n@return remaining items passed in but not parsed as an array.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[Object]getOptionObject(char)", "name": "getOptionObject", "arg_nums": 1, "params": [{"name": "opt", "type": "char"}], "return_type": "Object", "signature": "@Deprecated\n    public Object getOptionObject(final char opt)", "original_string": "    @Deprecated\n    public Object getOptionObject(final char opt) {\n        return getOptionObject(String.valueOf(opt));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nGets the {@code Object} type of this {@code Option}.\n\n@deprecated due to System.err message. Instead use getParsedOptionValue(char)\n@param opt the name of the option.\n@return the type of opt.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[Object]getOptionObject(String)", "name": "getOptionObject", "arg_nums": 1, "params": [{"name": "opt", "type": "String"}], "return_type": "Object", "signature": "@Deprecated\n    public Object getOptionObject(final String opt)", "original_string": "    @Deprecated\n    public Object getOptionObject(final String opt) {\n        try {\n            return getParsedOptionValue(opt);\n        } catch (final ParseException pe) {\n            System.err.println(\"Exception found converting \" + opt + \" to desired type: \" + pe.getMessage());\n            return null;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nGets the {@code Object} type of this {@code Option}.\n\n@param opt the name of the option.\n@return the type of this {@code Option}.\n@deprecated due to System.err message. Instead use getParsedOptionValue(String)\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[Properties]getOptionProperties(Option)", "name": "getOptionProperties", "arg_nums": 1, "params": [{"name": "option", "type": "Option"}], "return_type": "Properties", "signature": "public Properties getOptionProperties(final Option option)", "original_string": "    public Properties getOptionProperties(final Option option) {\n        final Properties props = new Properties();\n        for (final Option processedOption : options) {\n            if (processedOption.equals(option)) {\n                processPropertiesFromValues(props, processedOption.getValuesList());\n            }\n        }\n        return props;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Properties", "classes": []}, "docstring": "\nGets the map of values associated to the option. This is convenient for options specifying Java properties like\n<code>-Dparam1=value1\n-Dparam2=value2</code>. All odd numbered values are property keys\nand even numbered values are property values.  If there are an odd number of values\nthe last value is assumed to be a boolean flag and the value is \"true\".\n\n@param option name of the option.\n@return The Properties mapped by the option, never {@code null} even if the option doesn't exists.\n@since 1.5.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[Properties]getOptionProperties(String)", "name": "getOptionProperties", "arg_nums": 1, "params": [{"name": "opt", "type": "String"}], "return_type": "Properties", "signature": "public Properties getOptionProperties(final String opt)", "original_string": "    public Properties getOptionProperties(final String opt) {\n        final Properties props = new Properties();\n        for (final Option option : options) {\n            if (opt.equals(option.getOpt()) || opt.equals(option.getLongOpt())) {\n                processPropertiesFromValues(props, option.getValuesList());\n            }\n        }\n        return props;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Properties", "classes": []}, "docstring": "\nGets the map of values associated to the option. This is convenient for options specifying Java properties like\n<code>-Dparam1=value1\n-Dparam2=value2</code>. The first argument of the option is the key, and the 2nd argument is the value. If the option\nhas only one argument ({@code -Dfoo}) it is considered as a boolean flag and the value is {@code \"true\"}.\n\n@param opt name of the option.\n@return The Properties mapped by the option, never {@code null} even if the option doesn't exists.\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[Option[]]getOptions()", "name": "getOptions", "arg_nums": 0, "params": [], "return_type": "Option[]", "signature": "public Option[] getOptions()", "original_string": "    public Option[] getOptions() {\n        return options.toArray(Option.EMPTY_ARRAY);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Option[]", "classes": []}, "docstring": "\nGets an array of the processed {@link Option}s.\n\n@return an array of the processed {@link Option}s.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String]getOptionValue(char)", "name": "getOptionValue", "arg_nums": 1, "params": [{"name": "opt", "type": "char"}], "return_type": "String", "signature": "public String getOptionValue(final char opt)", "original_string": "    public String getOptionValue(final char opt) {\n        return getOptionValue(String.valueOf(opt));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the first argument, if any, of this option.\n\n@param opt the character name of the option.\n@return Value of the argument if option is set, and has an argument, otherwise null.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String]getOptionValue(char,String)", "name": "getOptionValue", "arg_nums": 2, "params": [{"name": "opt", "type": "char"}, {"name": "defaultValue", "type": "String"}], "return_type": "String", "signature": "public String getOptionValue(final char opt, final String defaultValue)", "original_string": "    public String getOptionValue(final char opt, final String defaultValue) {\n        return getOptionValue(String.valueOf(opt), () -> defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the argument, if any, of an option.\n\n@param opt character name of the option\n@param defaultValue is the default value to be returned if the option is not specified.\n@return Value of the argument if option is set, and has an argument, otherwise {@code defaultValue}.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String]getOptionValue(char,Supplier<String>)", "name": "getOptionValue", "arg_nums": 2, "params": [{"name": "opt", "type": "char"}, {"name": "defaultValue", "type": "Supplier<String>"}], "return_type": "String", "signature": "public String getOptionValue(final char opt, final Supplier<String> defaultValue)", "original_string": "    public String getOptionValue(final char opt, final Supplier<String> defaultValue) {\n        return getOptionValue(String.valueOf(opt), defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the argument, if any, of an option.\n\n@param opt character name of the option\n@param defaultValue is a supplier for the default value to be returned if the option is not specified.\n@return Value of the argument if option is set, and has an argument, otherwise {@code defaultValue}.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String]getOptionValue(Option)", "name": "getOptionValue", "arg_nums": 1, "params": [{"name": "option", "type": "Option"}], "return_type": "String", "signature": "public String getOptionValue(final Option option)", "original_string": "    public String getOptionValue(final Option option) {\n        final String[] values = getOptionValues(option);\n        return values == null ? null : values[0];\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the first argument, if any, of this option.\n\n@param option the option.\n@return Value of the argument if option is set, and has an argument, otherwise null.\n@since 1.5.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String]getOptionValue(Option,String)", "name": "getOptionValue", "arg_nums": 2, "params": [{"name": "option", "type": "Option"}, {"name": "defaultValue", "type": "String"}], "return_type": "String", "signature": "public String getOptionValue(final Option option, final String defaultValue)", "original_string": "    public String getOptionValue(final Option option, final String defaultValue) {\n        return getOptionValue(option, () -> defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the first argument, if any, of an option.\n\n@param option the option.\n@param defaultValue is the default value to be returned if the option is not specified.\n@return Value of the argument if option is set, and has an argument, otherwise {@code defaultValue}.\n@since 1.5.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String]getOptionValue(Option,Supplier<String>)", "name": "getOptionValue", "arg_nums": 2, "params": [{"name": "option", "type": "Option"}, {"name": "defaultValue", "type": "Supplier<String>"}], "return_type": "String", "signature": "public String getOptionValue(final Option option, final Supplier<String> defaultValue)", "original_string": "    public String getOptionValue(final Option option, final Supplier<String> defaultValue) {\n        final String answer = getOptionValue(option);\n        return answer != null ? answer : get(defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the first argument, if any, of an option.\n\n@param option the option.\n@param defaultValue is a supplier for the default value to be returned if the option is not specified.\n@return Value of the argument if option is set, and has an argument, otherwise {@code defaultValue}.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String]getOptionValue(OptionGroup)", "name": "getOptionValue", "arg_nums": 1, "params": [{"name": "optionGroup", "type": "OptionGroup"}], "return_type": "String", "signature": "public String getOptionValue(final OptionGroup optionGroup)", "original_string": "    public String getOptionValue(final OptionGroup optionGroup) {\n        final String[] values = getOptionValues(optionGroup);\n        return values == null ? null : values[0];\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the first argument, if any, of this option group.\n\n@param optionGroup the option group.\n@return Value of the argument if option group is selected, and has an argument, otherwise null.\n@since 1.9.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String]getOptionValue(OptionGroup,String)", "name": "getOptionValue", "arg_nums": 2, "params": [{"name": "optionGroup", "type": "OptionGroup"}, {"name": "defaultValue", "type": "String"}], "return_type": "String", "signature": "public String getOptionValue(final OptionGroup optionGroup, final String defaultValue)", "original_string": "    public String getOptionValue(final OptionGroup optionGroup, final String defaultValue) {\n        return getOptionValue(optionGroup, () -> defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the first argument, if any, of an option group.\n\n@param optionGroup the option group.\n@param defaultValue is the default value to be returned if the option group is not selected.\n@return Value of the argument if option group is selected, and has an argument, otherwise {@code defaultValue}.\n@since 1.9.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String]getOptionValue(OptionGroup,Supplier<String>)", "name": "getOptionValue", "arg_nums": 2, "params": [{"name": "optionGroup", "type": "OptionGroup"}, {"name": "defaultValue", "type": "Supplier<String>"}], "return_type": "String", "signature": "public String getOptionValue(final OptionGroup optionGroup, final Supplier<String> defaultValue)", "original_string": "    public String getOptionValue(final OptionGroup optionGroup, final Supplier<String> defaultValue) {\n        final String answer = getOptionValue(optionGroup);\n        return answer != null ? answer : get(defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the first argument, if any, of an option group.\n\n@param optionGroup the option group.\n@param defaultValue is a supplier for the default value to be returned if the option group is not selected.\n@return Value of the argument if option group is selected, and has an argument, otherwise {@code defaultValue}.\n@since 1.9.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String]getOptionValue(String)", "name": "getOptionValue", "arg_nums": 1, "params": [{"name": "opt", "type": "String"}], "return_type": "String", "signature": "public String getOptionValue(final String opt)", "original_string": "    public String getOptionValue(final String opt) {\n        return getOptionValue(resolveOption(opt));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the first argument, if any, of this option.\n\n@param opt the name of the option.\n@return Value of the argument if option is set, and has an argument, otherwise null.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String]getOptionValue(String,String)", "name": "getOptionValue", "arg_nums": 2, "params": [{"name": "opt", "type": "String"}, {"name": "defaultValue", "type": "String"}], "return_type": "String", "signature": "public String getOptionValue(final String opt, final String defaultValue)", "original_string": "    public String getOptionValue(final String opt, final String defaultValue) {\n        return getOptionValue(resolveOption(opt), () -> defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the first argument, if any, of an option.\n\n@param opt name of the option.\n@param defaultValue is the default value to be returned if the option is not specified.\n@return Value of the argument if option is set, and has an argument, otherwise {@code defaultValue}.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String]getOptionValue(String,Supplier<String>)", "name": "getOptionValue", "arg_nums": 2, "params": [{"name": "opt", "type": "String"}, {"name": "defaultValue", "type": "Supplier<String>"}], "return_type": "String", "signature": "public String getOptionValue(final String opt, final Supplier<String> defaultValue)", "original_string": "    public String getOptionValue(final String opt, final Supplier<String> defaultValue) {\n        return getOptionValue(resolveOption(opt), defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the first argument, if any, of an option.\n\n@param opt name of the option.\n@param defaultValue is a supplier for the default value to be returned if the option is not specified.\n@return Value of the argument if option is set, and has an argument, otherwise {@code defaultValue}.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String[]]getOptionValues(char)", "name": "getOptionValues", "arg_nums": 1, "params": [{"name": "opt", "type": "char"}], "return_type": "String[]", "signature": "public String[] getOptionValues(final char opt)", "original_string": "    public String[] getOptionValues(final char opt) {\n        return getOptionValues(String.valueOf(opt));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\nGets the array of values, if any, of an option.\n\n@param opt character name of the option.\n@return Values of the argument if option is set, and has an argument, otherwise null.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String[]]getOptionValues(Option)", "name": "getOptionValues", "arg_nums": 1, "params": [{"name": "option", "type": "Option"}], "return_type": "String[]", "signature": "public String[] getOptionValues(final Option option)", "original_string": "    public String[] getOptionValues(final Option option) {\n        if (option == null) {\n            return null;\n        }\n        final List<String> values = new ArrayList<>();\n        for (final Option processedOption : options) {\n            if (processedOption.equals(option)) {\n                if (option.isDeprecated()) {\n                    handleDeprecated(option);\n                }\n                values.addAll(processedOption.getValuesList());\n            }\n        }\n        return values.isEmpty() ? null : values.toArray(Util.EMPTY_STRING_ARRAY);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\nGets the array of values, if any, of an option.\n\n@param option the option.\n@return Values of the argument if option is set, and has an argument, otherwise null.\n@since 1.5.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String[]]getOptionValues(OptionGroup)", "name": "getOptionValues", "arg_nums": 1, "params": [{"name": "optionGroup", "type": "OptionGroup"}], "return_type": "String[]", "signature": "public String[] getOptionValues(final OptionGroup optionGroup)", "original_string": "    public String[] getOptionValues(final OptionGroup optionGroup) {\n        if (optionGroup == null || !optionGroup.isSelected()) {\n            return null;\n        }\n        return getOptionValues(optionGroup.getSelected());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\nGets the array of values, if any, of an option group.\n\n@param optionGroup the option group.\n@return Values of the argument if option group is selected, and has an argument, otherwise null.\n@since 1.9.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[String[]]getOptionValues(String)", "name": "getOptionValues", "arg_nums": 1, "params": [{"name": "opt", "type": "String"}], "return_type": "String[]", "signature": "public String[] getOptionValues(final String opt)", "original_string": "    public String[] getOptionValues(final String opt) {\n        return getOptionValues(resolveOption(opt));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\nGets the array of values, if any, of an option.\n\n@param opt string name of the option.\n@return Values of the argument if option is set, and has an argument, otherwise null.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[T]getParsedOptionValue(char)", "name": "getParsedOptionValue", "arg_nums": 1, "params": [{"name": "opt", "type": "char"}], "return_type": "T", "signature": "public <T> T getParsedOptionValue(final char opt)", "original_string": "    public <T> T getParsedOptionValue(final char opt) throws ParseException {\n        return getParsedOptionValue(String.valueOf(opt));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGets a version of this {@code Option} converted to a particular type.\n\n@param opt the name of the option.\n@param <T> The return type for the method.\n@return the value parsed into a particular object.\n@throws ParseException if there are problems turning the option value into the desired type\n@see PatternOptionBuilder\n@since 1.5.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[T]getParsedOptionValue(char,Supplier<T>)", "name": "getParsedOptionValue", "arg_nums": 2, "params": [{"name": "opt", "type": "char"}, {"name": "defaultValue", "type": "Supplier<T>"}], "return_type": "T", "signature": "public <T> T getParsedOptionValue(final char opt, final Supplier<T> defaultValue)", "original_string": "    public <T> T getParsedOptionValue(final char opt, final Supplier<T> defaultValue) throws ParseException {\n        return getParsedOptionValue(String.valueOf(opt), defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGets a version of this {@code Option} converted to a particular type.\n\n@param opt the name of the option.\n@param defaultValue the default value to return if opt is not set.\n@param <T> The return type for the method.\n@return the value parsed into a particular object.\n@throws ParseException if there are problems turning the option value into the desired type\n@see PatternOptionBuilder\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[T]getParsedOptionValue(char,T)", "name": "getParsedOptionValue", "arg_nums": 2, "params": [{"name": "opt", "type": "char"}, {"name": "defaultValue", "type": "T"}], "return_type": "T", "signature": "public <T> T getParsedOptionValue(final char opt, final T defaultValue)", "original_string": "    public <T> T getParsedOptionValue(final char opt, final T defaultValue) throws ParseException {\n        return getParsedOptionValue(String.valueOf(opt), defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGets a version of this {@code Option} converted to a particular type.\n\n@param opt the name of the option.\n@param defaultValue the default value to return if opt is not set.\n@param <T> The return type for the method.\n@return the value parsed into a particular object.\n@throws ParseException if there are problems turning the option value into the desired type\n@see PatternOptionBuilder\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[T]getParsedOptionValue(Option)", "name": "getParsedOptionValue", "arg_nums": 1, "params": [{"name": "option", "type": "Option"}], "return_type": "T", "signature": "public <T> T getParsedOptionValue(final Option option)", "original_string": "    public <T> T getParsedOptionValue(final Option option) throws ParseException {\n        return getParsedOptionValue(option, () -> null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGets a version of this {@code Option} converted to a particular type.\n\n@param option the option.\n@param <T> The return type for the method.\n@return the value parsed into a particular object.\n@throws ParseException if there are problems turning the option value into the desired type\n@see PatternOptionBuilder\n@since 1.5.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[T]getParsedOptionValue(Option,Supplier<T>)", "name": "getParsedOptionValue", "arg_nums": 2, "params": [{"name": "option", "type": "Option"}, {"name": "defaultValue", "type": "Supplier<T>"}], "return_type": "T", "signature": "@SuppressWarnings(\"unchecked\")\n    public <T> T getParsedOptionValue(final Option option, final Supplier<T> defaultValue)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    public <T> T getParsedOptionValue(final Option option, final Supplier<T> defaultValue) throws ParseException {\n        if (option == null) {\n            return get(defaultValue);\n        }\n        final String res = getOptionValue(option);\n        try {\n            if (res == null) {\n                return get(defaultValue);\n            }\n            return (T) option.getConverter().apply(res);\n        } catch (final Throwable e) {\n            throw ParseException.wrap(e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGets a version of this {@code Option} converted to a particular type.\n\n@param option the option.\n@param defaultValue the default value to return if opt is not set.\n@param <T> The return type for the method.\n@return the value parsed into a particular object.\n@throws ParseException if there are problems turning the option value into the desired type\n@see PatternOptionBuilder\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[T]getParsedOptionValue(Option,T)", "name": "getParsedOptionValue", "arg_nums": 2, "params": [{"name": "option", "type": "Option"}, {"name": "defaultValue", "type": "T"}], "return_type": "T", "signature": "public <T> T getParsedOptionValue(final Option option, final T defaultValue)", "original_string": "    public <T> T getParsedOptionValue(final Option option, final T defaultValue) throws ParseException {\n        return getParsedOptionValue(option, () -> defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGets a version of this {@code Option} converted to a particular type.\n\n@param option the option.\n@param defaultValue the default value to return if opt is not set.\n@param <T> The return type for the method.\n@return the value parsed into a particular object.\n@throws ParseException if there are problems turning the option value into the desired type\n@see PatternOptionBuilder\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[T]getParsedOptionValue(OptionGroup)", "name": "getParsedOptionValue", "arg_nums": 1, "params": [{"name": "optionGroup", "type": "OptionGroup"}], "return_type": "T", "signature": "public <T> T getParsedOptionValue(final OptionGroup optionGroup)", "original_string": "    public <T> T getParsedOptionValue(final OptionGroup optionGroup) throws ParseException {\n        return getParsedOptionValue(optionGroup, () -> null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGets a version of this {@code OptionGroup} converted to a particular type.\n\n@param optionGroup the option group.\n@param <T> The return type for the method.\n@return the value parsed into a particular object.\n@throws ParseException if there are problems turning the selected option value into the desired type\n@see PatternOptionBuilder\n@since 1.9.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[T]getParsedOptionValue(OptionGroup,Supplier<T>)", "name": "getParsedOptionValue", "arg_nums": 2, "params": [{"name": "optionGroup", "type": "OptionGroup"}, {"name": "defaultValue", "type": "Supplier<T>"}], "return_type": "T", "signature": "public <T> T getParsedOptionValue(final OptionGroup optionGroup, final Supplier<T> defaultValue)", "original_string": "    public <T> T getParsedOptionValue(final OptionGroup optionGroup, final Supplier<T> defaultValue) throws ParseException {\n        if (optionGroup == null || !optionGroup.isSelected()) {\n            return get(defaultValue);\n        }\n        return getParsedOptionValue(optionGroup.getSelected(), defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGets a version of this {@code OptionGroup} converted to a particular type.\n\n@param optionGroup the option group.\n@param defaultValue the default value to return if opt is not set.\n@param <T> The return type for the method.\n@return the value parsed into a particular object.\n@throws ParseException if there are problems turning the selected option value into the desired type\n@see PatternOptionBuilder\n@since 1.9.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[T]getParsedOptionValue(OptionGroup,T)", "name": "getParsedOptionValue", "arg_nums": 2, "params": [{"name": "optionGroup", "type": "OptionGroup"}, {"name": "defaultValue", "type": "T"}], "return_type": "T", "signature": "public <T> T getParsedOptionValue(final OptionGroup optionGroup, final T defaultValue)", "original_string": "    public <T> T getParsedOptionValue(final OptionGroup optionGroup, final T defaultValue) throws ParseException {\n        return getParsedOptionValue(optionGroup, () -> defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGets a version of this {@code OptionGroup} converted to a particular type.\n\n@param optionGroup the option group.\n@param defaultValue the default value to return if an option is not selected.\n@param <T> The return type for the method.\n@return the value parsed into a particular object.\n@throws ParseException if there are problems turning the option value into the desired type\n@see PatternOptionBuilder\n@since 1.9.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[T]getParsedOptionValue(String)", "name": "getParsedOptionValue", "arg_nums": 1, "params": [{"name": "opt", "type": "String"}], "return_type": "T", "signature": "public <T> T getParsedOptionValue(final String opt)", "original_string": "    public <T> T getParsedOptionValue(final String opt) throws ParseException {\n        return getParsedOptionValue(resolveOption(opt));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGets a version of this {@code Option} converted to a particular type.\n\n@param opt the name of the option.\n@param <T> The return type for the method.\n@return the value parsed into a particular object.\n@throws ParseException if there are problems turning the option value into the desired type\n@see PatternOptionBuilder\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[T]getParsedOptionValue(String,Supplier<T>)", "name": "getParsedOptionValue", "arg_nums": 2, "params": [{"name": "opt", "type": "String"}, {"name": "defaultValue", "type": "Supplier<T>"}], "return_type": "T", "signature": "public <T> T getParsedOptionValue(final String opt, final Supplier<T> defaultValue)", "original_string": "    public <T> T getParsedOptionValue(final String opt, final Supplier<T> defaultValue) throws ParseException {\n        return getParsedOptionValue(resolveOption(opt), defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGets a version of this {@code Option} converted to a particular type.\n\n@param opt the name of the option.\n@param defaultValue the default value to return if opt is not set.\n@param <T> The return type for the method.\n@return the value parsed into a particular object.\n@throws ParseException if there are problems turning the option value into the desired type\n@see PatternOptionBuilder\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[T]getParsedOptionValue(String,T)", "name": "getParsedOptionValue", "arg_nums": 2, "params": [{"name": "opt", "type": "String"}, {"name": "defaultValue", "type": "T"}], "return_type": "T", "signature": "public <T> T getParsedOptionValue(final String opt, final T defaultValue)", "original_string": "    public <T> T getParsedOptionValue(final String opt, final T defaultValue) throws ParseException {\n        return getParsedOptionValue(resolveOption(opt), defaultValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGets a version of this {@code Option} converted to a particular type.\n\n@param opt the name of the option.\n@param defaultValue the default value to return if opt is not set.\n@param <T> The return type for the method.\n@return the value parsed into a particular object.\n@throws ParseException if there are problems turning the option value into the desired type\n@see PatternOptionBuilder\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[void]handleDeprecated(Option)", "name": "handleDeprecated", "arg_nums": 1, "params": [{"name": "option", "type": "Option"}], "return_type": "void", "signature": "private void handleDeprecated(final Option option)", "original_string": "    private void handleDeprecated(final Option option) {\n        if (deprecatedHandler != null) {\n            deprecatedHandler.accept(option);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nHandles deprecated options.\n\n@param option a deprecated option.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[boolean]hasOption(char)", "name": "hasOption", "arg_nums": 1, "params": [{"name": "opt", "type": "char"}], "return_type": "boolean", "signature": "public boolean hasOption(final char opt)", "original_string": "    public boolean hasOption(final char opt) {\n        return hasOption(String.valueOf(opt));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests to see if an option has been set.\n\n@param opt character name of the option.\n@return true if set, false if not.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[boolean]hasOption(Option)", "name": "hasOption", "arg_nums": 1, "params": [{"name": "opt", "type": "Option"}], "return_type": "boolean", "signature": "public boolean hasOption(final Option opt)", "original_string": "    public boolean hasOption(final Option opt) {\n        final boolean result = options.contains(opt);\n        if (result && opt.isDeprecated()) {\n            handleDeprecated(opt);\n        }\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests to see if an option has been set.\n\n@param opt the option to check.\n@return true if set, false if not.\n@since 1.5.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[boolean]hasOption(OptionGroup)", "name": "hasOption", "arg_nums": 1, "params": [{"name": "optionGroup", "type": "OptionGroup"}], "return_type": "boolean", "signature": "public boolean hasOption(final OptionGroup optionGroup)", "original_string": "    public boolean hasOption(final OptionGroup optionGroup) {\n        if (optionGroup == null || !optionGroup.isSelected()) {\n            return false;\n        }\n        return hasOption(optionGroup.getSelected());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests to see if an option has been set.\n\n@param optionGroup the option group to check.\n@return true if set, false if not.\n@since 1.9.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[boolean]hasOption(String)", "name": "hasOption", "arg_nums": 1, "params": [{"name": "opt", "type": "String"}], "return_type": "boolean", "signature": "public boolean hasOption(final String opt)", "original_string": "    public boolean hasOption(final String opt) {\n        return hasOption(resolveOption(opt));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests to see if an option has been set.\n\n@param opt Short name of the option.\n@return true if set, false if not.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[Iterator<Option>]iterator()", "name": "iterator", "arg_nums": 0, "params": [], "return_type": "Iterator<Option>", "signature": "public Iterator<Option> iterator()", "original_string": "    public Iterator<Option> iterator() {\n        return options.iterator();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Iterator<Option>", "classes": []}, "docstring": "\nReturns an iterator over the Option members of CommandLine.\n\n@return an {@code Iterator} over the processed {@link Option} members of this {@link CommandLine}.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[void]processPropertiesFromValues(Properties,List<String>)", "name": "processPropertiesFromValues", "arg_nums": 2, "params": [{"name": "props", "type": "Properties"}, {"name": "values", "type": "List<String>"}], "return_type": "void", "signature": "private void processPropertiesFromValues(final Properties props, final List<String> values)", "original_string": "    private void processPropertiesFromValues(final Properties props, final List<String> values) {\n        for (int i = 0; i < values.size(); i += 2) {\n            if (i + 1 < values.size()) {\n                props.put(values.get(i), values.get(i + 1));\n            } else {\n                props.put(values.get(i), \"true\");\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nParses a list of values as properties.  All odd numbered values are property keys\nand even numbered values are property values.  If there are an odd number of values\nthe last value is assumed to be a boolean with a value of \"true\".\n@param props the properties to update.\n@param values the list of values to parse.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine.[Option]resolveOption(String)", "name": "resolveOption", "arg_nums": 1, "params": [{"name": "opt", "type": "String"}], "return_type": "Option", "signature": "private Option resolveOption(final String opt)", "original_string": "    private Option resolveOption(final String opt) {\n        final String actual = Util.stripLeadingHyphens(opt);\n        if (actual != null) {\n            for (final Option option : options) {\n                if (actual.equals(option.getOpt()) || actual.equals(option.getLongOpt())) {\n                    return option;\n                }\n            }\n        }\n        return null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLine.java", "class_name": "CommandLine", "class_uri": "src/main/java/org/apache/commons/cli/CommandLine.java.CommandLine", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Option", "classes": []}, "docstring": "\nRetrieves the option object given the long or short option as a String\n\n@param opt short or long name of the option, may be null.\n@return Canonicalized option.\n"}, {"uris": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java.DeprecatedAttributes.[Builder]builder()", "name": "builder", "arg_nums": 0, "params": [], "return_type": "Builder", "signature": "public static Builder builder()", "original_string": "    public static Builder builder() {\n        return new Builder();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java", "class_name": "DeprecatedAttributes", "class_uri": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java.DeprecatedAttributes", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Builder", "classes": []}, "docstring": "\nCreates a new builder.\n\n@return a new builder.\n"}, {"uris": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java.DeprecatedAttributes.[]DeprecatedAttributes(String,String,boolean)", "name": "DeprecatedAttributes", "arg_nums": 3, "params": [{"name": "description", "type": "String"}, {"name": "since", "type": "String"}, {"name": "forRemoval", "type": "boolean"}], "return_type": "", "signature": "private DeprecatedAttributes(final String description, final String since, final boolean forRemoval)", "original_string": "    private DeprecatedAttributes(final String description, final String since, final boolean forRemoval) {\n        this.description = toEmpty(description);\n        this.since = toEmpty(since);\n        this.forRemoval = forRemoval;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java", "class_name": "DeprecatedAttributes", "class_uri": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java.DeprecatedAttributes", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new instance.\n\n@param description The description.\n@param since       The version label for removal.\n@param forRemoval  Whether this option will be removed.\n"}, {"uris": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java.DeprecatedAttributes.[String]getDescription()", "name": "getDescription", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getDescription()", "original_string": "    public String getDescription() {\n        return description;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java", "class_name": "DeprecatedAttributes", "class_uri": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java.DeprecatedAttributes", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the descriptions.\n\n@return the descriptions.\n"}, {"uris": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java.DeprecatedAttributes.[String]getSince()", "name": "getSince", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getSince()", "original_string": "    public String getSince() {\n        return since;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java", "class_name": "DeprecatedAttributes", "class_uri": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java.DeprecatedAttributes", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets version in which the option became deprecated.\n\n@return the version in which the option became deprecated.\n"}, {"uris": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java.DeprecatedAttributes.[boolean]isForRemoval()", "name": "isForRemoval", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isForRemoval()", "original_string": "    public boolean isForRemoval() {\n        return forRemoval;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java", "class_name": "DeprecatedAttributes", "class_uri": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java.DeprecatedAttributes", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether this option is subject to removal in a future version.\n\n@return whether this option is subject to removal in a future version.\n"}, {"uris": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java.DeprecatedAttributes.[String]toEmpty(String)", "name": "toEmpty", "arg_nums": 1, "params": [{"name": "since", "type": "String"}], "return_type": "String", "signature": "private String toEmpty(final String since)", "original_string": "    private String toEmpty(final String since) {\n        return since != null ? since : EMPTY_STRING;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java", "class_name": "DeprecatedAttributes", "class_uri": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java.DeprecatedAttributes", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java.DeprecatedAttributes.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        final StringBuilder builder = new StringBuilder(\"Deprecated\");\n        if (forRemoval) {\n            builder.append(\" for removal\");\n        }\n        if (!since.isEmpty()) {\n            builder.append(\" since \");\n            builder.append(since);\n        }\n        if (!description.isEmpty()) {\n            builder.append(\": \");\n            builder.append(description);\n        }\n        return builder.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java", "class_name": "DeprecatedAttributes", "class_uri": "src/main/java/org/apache/commons/cli/DeprecatedAttributes.java.DeprecatedAttributes", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[Option]create()", "name": "create", "arg_nums": 0, "params": [], "return_type": "Option", "signature": "public static Option create()", "original_string": "    public static Option create() throws IllegalArgumentException {\n        if (longOption == null) {\n            reset();\n            throw new IllegalArgumentException(\"must specify longopt\");\n        }\n\n        return create(null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Option", "classes": []}, "docstring": "\nCreates an Option using the current settings\n\n@return the Option instance\n@throws IllegalArgumentException if {@code longOpt} has not been set.\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[Option]create(char)", "name": "create", "arg_nums": 1, "params": [{"name": "opt", "type": "char"}], "return_type": "Option", "signature": "public static Option create(final char opt)", "original_string": "    public static Option create(final char opt) throws IllegalArgumentException {\n        return create(String.valueOf(opt));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Option", "classes": []}, "docstring": "\nCreates an Option using the current settings and with the specified Option {@code char}.\n\n@param opt the character representation of the Option\n@return the Option instance\n@throws IllegalArgumentException if {@code opt} is not a valid character. See Option.\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[Option]create(String)", "name": "create", "arg_nums": 1, "params": [{"name": "opt", "type": "String"}], "return_type": "Option", "signature": "public static Option create(final String opt)", "original_string": "    public static Option create(final String opt) throws IllegalArgumentException {\n        Option option;\n        try {\n            // create the option\n            option = new Option(opt, description);\n\n            // set the option properties\n            option.setLongOpt(longOption);\n            option.setRequired(required);\n            option.setOptionalArg(optionalArg);\n            option.setArgs(argCount);\n            option.setType(type);\n            option.setConverter(TypeHandler.getDefault().getConverter(type));\n            option.setValueSeparator(valueSeparator);\n            option.setArgName(argName);\n        } finally {\n            // reset the OptionBuilder properties\n            reset();\n        }\n\n        // return the Option instance\n        return option;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Option", "classes": []}, "docstring": "\nCreates an Option using the current settings and with the specified Option {@code char}.\n\n@param opt the {@code String} representation of the Option\n@return the Option instance\n@throws IllegalArgumentException if {@code opt} is not a valid character. See Option.\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]hasArg()", "name": "hasArg", "arg_nums": 0, "params": [], "return_type": "OptionBuilder", "signature": "public static OptionBuilder hasArg()", "original_string": "    public static OptionBuilder hasArg() {\n        argCount = 1;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option created will require an argument value.\n\n@return the OptionBuilder instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]hasArg(boolean)", "name": "hasArg", "arg_nums": 1, "params": [{"name": "hasArg", "type": "boolean"}], "return_type": "OptionBuilder", "signature": "public static OptionBuilder hasArg(final boolean hasArg)", "original_string": "    public static OptionBuilder hasArg(final boolean hasArg) {\n        argCount = hasArg ? 1 : Option.UNINITIALIZED;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option created will require an argument value if {@code hasArg} is true.\n\n@param hasArg if true then the Option has an argument value\n@return the OptionBuilder instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]hasArgs()", "name": "hasArgs", "arg_nums": 0, "params": [], "return_type": "OptionBuilder", "signature": "public static OptionBuilder hasArgs()", "original_string": "    public static OptionBuilder hasArgs() {\n        argCount = Option.UNLIMITED_VALUES;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option created can have unlimited argument values.\n\n@return the OptionBuilder instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]hasArgs(int)", "name": "hasArgs", "arg_nums": 1, "params": [{"name": "num", "type": "int"}], "return_type": "OptionBuilder", "signature": "public static OptionBuilder hasArgs(final int num)", "original_string": "    public static OptionBuilder hasArgs(final int num) {\n        argCount = num;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option created can have {@code num} argument values.\n\n@param num the number of args that the option can have\n@return the OptionBuilder instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]hasOptionalArg()", "name": "hasOptionalArg", "arg_nums": 0, "params": [], "return_type": "OptionBuilder", "signature": "public static OptionBuilder hasOptionalArg()", "original_string": "    public static OptionBuilder hasOptionalArg() {\n        argCount = 1;\n        optionalArg = true;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option can have an optional argument.\n\n@return the OptionBuilder instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]hasOptionalArgs()", "name": "hasOptionalArgs", "arg_nums": 0, "params": [], "return_type": "OptionBuilder", "signature": "public static OptionBuilder hasOptionalArgs()", "original_string": "    public static OptionBuilder hasOptionalArgs() {\n        argCount = Option.UNLIMITED_VALUES;\n        optionalArg = true;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option can have an unlimited number of optional arguments.\n\n@return the OptionBuilder instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]hasOptionalArgs(int)", "name": "hasOptionalArgs", "arg_nums": 1, "params": [{"name": "numArgs", "type": "int"}], "return_type": "OptionBuilder", "signature": "public static OptionBuilder hasOptionalArgs(final int numArgs)", "original_string": "    public static OptionBuilder hasOptionalArgs(final int numArgs) {\n        argCount = numArgs;\n        optionalArg = true;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option can have the specified number of optional arguments.\n\n@param numArgs   the maximum number of optional arguments the next Option created can have.\n@return the OptionBuilder instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]isRequired()", "name": "isRequired", "arg_nums": 0, "params": [], "return_type": "OptionBuilder", "signature": "public static OptionBuilder isRequired()", "original_string": "    public static OptionBuilder isRequired() {\n        required = true;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option created will be required.\n\n@return the OptionBuilder instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]isRequired(boolean)", "name": "isRequired", "arg_nums": 1, "params": [{"name": "newRequired", "type": "boolean"}], "return_type": "OptionBuilder", "signature": "public static OptionBuilder isRequired(final boolean newRequired)", "original_string": "    public static OptionBuilder isRequired(final boolean newRequired) {\n        required = newRequired;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option created will be required if {@code required} is true.\n\n@param newRequired if true then the Option is required\n@return the OptionBuilder instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[void]reset()", "name": "reset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private static void reset()", "original_string": "    private static void reset() {\n        description = null;\n        argName = null;\n        longOption = null;\n        type = String.class;\n        required = false;\n        argCount = Option.UNINITIALIZED;\n        optionalArg = false;\n        valueSeparator = (char) 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nResets the member variables to their default values.\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]withArgName(String)", "name": "withArgName", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "OptionBuilder", "signature": "public static OptionBuilder withArgName(final String name)", "original_string": "    public static OptionBuilder withArgName(final String name) {\n        argName = name;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option created will have the specified argument value name.\n\n@param name the name for the argument value\n@return the OptionBuilder instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]withDescription(String)", "name": "withDescription", "arg_nums": 1, "params": [{"name": "newDescription", "type": "String"}], "return_type": "OptionBuilder", "signature": "public static OptionBuilder withDescription(final String newDescription)", "original_string": "    public static OptionBuilder withDescription(final String newDescription) {\n        description = newDescription;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option created will have the specified description\n\n@param newDescription a description of the Option's purpose\n@return the OptionBuilder instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]withLongOpt(String)", "name": "withLongOpt", "arg_nums": 1, "params": [{"name": "newLongopt", "type": "String"}], "return_type": "OptionBuilder", "signature": "public static OptionBuilder withLongOpt(final String newLongopt)", "original_string": "    public static OptionBuilder withLongOpt(final String newLongopt) {\n        longOption = newLongopt;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option created will have the following long option value.\n\n@param newLongopt the long option value\n@return the OptionBuilder instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]withType(Class<?>)", "name": "withType", "arg_nums": 1, "params": [{"name": "newType", "type": "Class<?>"}], "return_type": "OptionBuilder", "signature": "public static OptionBuilder withType(final Class<?> newType)", "original_string": "    public static OptionBuilder withType(final Class<?> newType) {\n        type = newType;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option created will have a value that will be an instance of {@code type}.\n\n@param newType the type of the Options argument value\n@return the OptionBuilder instance\n@since 1.3\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]withType(Object)", "name": "withType", "arg_nums": 1, "params": [{"name": "newType", "type": "Object"}], "return_type": "OptionBuilder", "signature": "@Deprecated\n    public static OptionBuilder withType(final Object newType)", "original_string": "    @Deprecated\n    public static OptionBuilder withType(final Object newType) {\n        return withType((Class<?>) newType);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "@Deprecated\n    public static", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option created will have a value that will be an instance of {@code type}.\n<p>\n<b>Note:</b> this method is kept for binary compatibility and the input type is supposed to be a {@link Class}\nobject.\n\n@param newType the type of the Options argument value\n@return the OptionBuilder instance\n@deprecated since 1.3, use {@link #withType(Class)} instead\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]withValueSeparator()", "name": "withValueSeparator", "arg_nums": 0, "params": [], "return_type": "OptionBuilder", "signature": "public static OptionBuilder withValueSeparator()", "original_string": "    public static OptionBuilder withValueSeparator() {\n        valueSeparator = Char.EQUAL;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option created uses '{@code =}' as a means to separate argument values.\n\n<b>Example:</b>\n\n<pre>\nOption opt = withValueSeparator().create('D');\n\nCommandLine line = parser.parse(args);\nString propertyName = opt.getValue(0);\nString propertyValue = opt.getValue(1);\n</pre>\n\n@return the OptionBuilder instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[OptionBuilder]withValueSeparator(char)", "name": "withValueSeparator", "arg_nums": 1, "params": [{"name": "sep", "type": "char"}], "return_type": "OptionBuilder", "signature": "public static OptionBuilder withValueSeparator(final char sep)", "original_string": "    public static OptionBuilder withValueSeparator(final char sep) {\n        valueSeparator = sep;\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "OptionBuilder", "classes": []}, "docstring": "\nThe next Option created uses {@code sep} as a means to separate argument values.\n<p>\n<b>Example:</b>\n\n<pre>\nOption opt = OptionBuilder.withValueSeparator('=').create('D');\n\nString args = \"-Dkey=value\";\nCommandLine line = parser.parse(args);\nString propertyName = opt.getValue(0); // will be \"key\"\nString propertyValue = opt.getValue(1); // will be \"value\"\n</pre>\n\n@param sep The value separator to be used for the argument values.\n\n@return the OptionBuilder instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder.[]OptionBuilder()", "name": "OptionBuilder", "arg_nums": 0, "params": [], "return_type": "", "signature": "private OptionBuilder()", "original_string": "    private OptionBuilder() {\n        // hide the constructor\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/OptionBuilder.java", "class_name": "OptionBuilder", "class_uri": "src/main/java/org/apache/commons/cli/OptionBuilder.java.OptionBuilder", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nprivate constructor to prevent instances being created\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[Builder]builder()", "name": "builder", "arg_nums": 0, "params": [], "return_type": "Builder", "signature": "public static Builder builder()", "original_string": "    public static Builder builder() {\n        return new Builder();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Builder", "classes": []}, "docstring": "\nCreates a new builder.\n\n@return a new builder.\n@since 1.7.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[PrintWriter]createDefaultPrintWriter()", "name": "createDefaultPrintWriter", "arg_nums": 0, "params": [], "return_type": "PrintWriter", "signature": "private static PrintWriter createDefaultPrintWriter()", "original_string": "    private static PrintWriter createDefaultPrintWriter() {\n        return new PrintWriter(System.out);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "PrintWriter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[String]getDescription(Option)", "name": "getDescription", "arg_nums": 1, "params": [{"name": "option", "type": "Option"}], "return_type": "String", "signature": "public static String getDescription(final Option option)", "original_string": "    public static String getDescription(final Option option) {\n        final String desc = option.getDescription();\n        return desc == null ? \"\" : desc;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the option description or an empty string if the description is {@code null}.\n@param option The option to get the description from.\n@return the option description or an empty string if the description is {@code null}.\n@since 1.8.0\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[]HelpFormatter()", "name": "HelpFormatter", "arg_nums": 0, "params": [], "return_type": "", "signature": "public HelpFormatter()", "original_string": "    public HelpFormatter() {\n        this(null, createDefaultPrintWriter(), false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new instance.\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[]HelpFormatter(Function<Option, String>,PrintWriter,boolean)", "name": "HelpFormatter", "arg_nums": 3, "params": [{"name": "deprecatedFormatFunction", "type": "Function<Option, String>"}, {"name": "printWriter", "type": "PrintWriter"}, {"name": "showSince", "type": "boolean"}], "return_type": "", "signature": "private HelpFormatter(final Function<Option, String> deprecatedFormatFunction, final PrintWriter printWriter, final boolean showSince)", "original_string": "    private HelpFormatter(final Function<Option, String> deprecatedFormatFunction, final PrintWriter printWriter, final boolean showSince) {\n        // TODO All other instance HelpFormatter instance variables.\n        // Make HelpFormatter immutable for 2.0\n        this.deprecatedFormatFunction = deprecatedFormatFunction;\n        this.printWriter = printWriter;\n        this.showSince = showSince;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new instance.\n@param printWriter TODO\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]appendOption(StringBuilder,Option,boolean)", "name": "appendOption", "arg_nums": 3, "params": [{"name": "buff", "type": "StringBuilder"}, {"name": "option", "type": "Option"}, {"name": "required", "type": "boolean"}], "return_type": "void", "signature": "private void appendOption(final StringBuilder buff, final Option option, final boolean required)", "original_string": "    private void appendOption(final StringBuilder buff, final Option option, final boolean required) {\n        if (!required) {\n            buff.append(\"[\");\n        }\n        if (option.getOpt() != null) {\n            buff.append(\"-\").append(option.getOpt());\n        } else {\n            buff.append(\"--\").append(option.getLongOpt());\n        }\n        // if the Option has a value and a non blank argname\n        if (option.hasArg() && (option.getArgName() == null || !option.getArgName().isEmpty())) {\n            buff.append(option.getOpt() == null ? longOptSeparator : \" \");\n            buff.append(\"<\").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(\">\");\n        }\n        // if the Option is not a required option\n        if (!required) {\n            buff.append(\"]\");\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAppends the usage clause for an Option to a StringBuffer.\n\n@param buff the StringBuffer to append to\n@param option the Option to append\n@param required whether the Option is required or not\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]appendOptionGroup(StringBuilder,OptionGroup)", "name": "appendOptionGroup", "arg_nums": 2, "params": [{"name": "buff", "type": "StringBuilder"}, {"name": "group", "type": "OptionGroup"}], "return_type": "void", "signature": "private void appendOptionGroup(final StringBuilder buff, final OptionGroup group)", "original_string": "    private void appendOptionGroup(final StringBuilder buff, final OptionGroup group) {\n        if (!group.isRequired()) {\n            buff.append(\"[\");\n        }\n        final List<Option> optList = new ArrayList<>(group.getOptions());\n        if (getOptionComparator() != null) {\n            Collections.sort(optList, getOptionComparator());\n        }\n        // for each option in the OptionGroup\n        for (final Iterator<Option> it = optList.iterator(); it.hasNext();) {\n            // whether the option is required or not is handled at group level\n            appendOption(buff, it.next(), true);\n\n            if (it.hasNext()) {\n                buff.append(\" | \");\n            }\n        }\n        if (!group.isRequired()) {\n            buff.append(\"]\");\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAppends the usage clause for an OptionGroup to a StringBuffer. The clause is wrapped in square brackets if the group\nis required. The display of the options is handled by appendOption\n\n@param buff the StringBuilder to append to\n@param group the group to append\n@see #appendOption(StringBuilder,Option,boolean)\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[A]appendOptions(A,int,Options,int,int)", "name": "appendOptions", "arg_nums": 5, "params": [{"name": "sb", "type": "A"}, {"name": "width", "type": "int"}, {"name": "options", "type": "Options"}, {"name": "leftPad", "type": "int"}, {"name": "descPad", "type": "int"}], "return_type": "A", "signature": "<A extends Appendable> A appendOptions(final A sb, final int width, final Options options, final int leftPad, final int descPad)", "original_string": "    <A extends Appendable> A appendOptions(final A sb, final int width, final Options options, final int leftPad, final int descPad) throws IOException {\n        final String lpad = createPadding(leftPad);\n        final String dpad = createPadding(descPad);\n        // first create list containing only <lpad>-a,--aaa where\n        // -a is opt and --aaa is long opt; in parallel look for\n        // the longest opt string this list will be then used to\n        // sort options ascending\n        int max = 0;\n        final int maxSince = showSince ? determineMaxSinceLength(options) + leftPad : 0;\n        final List<StringBuilder> prefixList = new ArrayList<>();\n        final List<Option> optList = options.helpOptions();\n        if (getOptionComparator() != null) {\n            Collections.sort(optList, getOptionComparator());\n        }\n        for (final Option option : optList) {\n            final StringBuilder optBuf = new StringBuilder();\n            if (option.getOpt() == null) {\n                optBuf.append(lpad).append(\"   \").append(getLongOptPrefix()).append(option.getLongOpt());\n            } else {\n                optBuf.append(lpad).append(getOptPrefix()).append(option.getOpt());\n                if (option.hasLongOpt()) {\n                    optBuf.append(',').append(getLongOptPrefix()).append(option.getLongOpt());\n                }\n            }\n            if (option.hasArg()) {\n                final String argName = option.getArgName();\n                if (argName != null && argName.isEmpty()) {\n                    // if the option has a blank argname\n                    optBuf.append(' ');\n                } else {\n                    optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\n                    optBuf.append(\"<\").append(argName != null ? option.getArgName() : getArgName()).append(\">\");\n                }\n            }\n\n            prefixList.add(optBuf);\n            max = Math.max(optBuf.length() + maxSince, max);\n        }\n        final int nextLineTabStop = max + descPad;\n        if (showSince) {\n            final StringBuilder optHeader = new StringBuilder(HEADER_OPTIONS).append(createPadding(max - maxSince - HEADER_OPTIONS.length() + leftPad))\n                    .append(HEADER_SINCE);\n            optHeader.append(createPadding(max - optHeader.length())).append(lpad).append(HEADER_DESCRIPTION);\n            appendWrappedText(sb, width, nextLineTabStop, optHeader.toString());\n            sb.append(getNewLine());\n        }\n\n        int x = 0;\n        for (final Iterator<Option> it = optList.iterator(); it.hasNext();) {\n            final Option option = it.next();\n            final StringBuilder optBuf = new StringBuilder(prefixList.get(x++).toString());\n            if (optBuf.length() < max) {\n                optBuf.append(createPadding(max - maxSince - optBuf.length()));\n                if (showSince) {\n                    optBuf.append(lpad).append(option.getSince() == null ? \"-\" : option.getSince());\n                }\n                optBuf.append(createPadding(max - optBuf.length()));\n            }\n            optBuf.append(dpad);\n\n            if (deprecatedFormatFunction != null && option.isDeprecated()) {\n                optBuf.append(deprecatedFormatFunction.apply(option).trim());\n            } else if (option.getDescription() != null) {\n                optBuf.append(option.getDescription());\n            }\n            appendWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n            if (it.hasNext()) {\n                sb.append(getNewLine());\n            }\n        }\n        return sb;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "A", "classes": []}, "docstring": "\nRenders the specified Options and return the rendered Options in a StringBuffer.\n\n@param sb The StringBuffer to place the rendered Options into.\n@param width The number of characters to display per line\n@param options The command line Options\n@param leftPad the number of characters of padding to be prefixed to each line\n@param descPad the number of characters of padding to be prefixed to each description line\n@return the StringBuffer with the rendered Options contents.\n@throws IOException if an I/O error occurs.\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[A]appendWrappedText(A,int,int,String)", "name": "appendWrappedText", "arg_nums": 4, "params": [{"name": "appendable", "type": "A"}, {"name": "width", "type": "int"}, {"name": "nextLineTabStop", "type": "int"}, {"name": "text", "type": "String"}], "return_type": "A", "signature": "<A extends Appendable> A appendWrappedText(final A appendable, final int width, final int nextLineTabStop, final String text)", "original_string": "    <A extends Appendable> A appendWrappedText(final A appendable, final int width, final int nextLineTabStop, final String text) throws IOException {\n        String render = text;\n        int nextLineTabStopPos = nextLineTabStop;\n        int pos = findWrapPos(render, width, 0);\n        if (pos == -1) {\n            appendable.append(rtrim(render));\n            return appendable;\n        }\n        appendable.append(rtrim(render.substring(0, pos))).append(getNewLine());\n        if (nextLineTabStopPos >= width) {\n            // stops infinite loop happening\n            nextLineTabStopPos = 1;\n        }\n        // all following lines must be padded with nextLineTabStop space characters\n        final String padding = createPadding(nextLineTabStopPos);\n        while (true) {\n            render = padding + render.substring(pos).trim();\n            pos = findWrapPos(render, width, 0);\n            if (pos == -1) {\n                appendable.append(render);\n                return appendable;\n            }\n            if (render.length() > width && pos == nextLineTabStopPos - 1) {\n                pos = width;\n            }\n            appendable.append(rtrim(render.substring(0, pos))).append(getNewLine());\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "A", "classes": []}, "docstring": "\nRenders the specified text and return the rendered Options in a StringBuffer.\n\n@param <A> The Appendable implementation.\n@param appendable The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n@throws IOException if an I/O error occurs.\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[String]createPadding(int)", "name": "createPadding", "arg_nums": 1, "params": [{"name": "len", "type": "int"}], "return_type": "String", "signature": "protected String createPadding(final int len)", "original_string": "    protected String createPadding(final int len) {\n        final char[] padding = new char[len];\n        Arrays.fill(padding, ' ');\n        return new String(padding);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCreates a String of padding of length {@code len}.\n\n@param len The length of the String of padding to create.\n\n@return The String of padding\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[int]determineMaxSinceLength(Options)", "name": "determineMaxSinceLength", "arg_nums": 1, "params": [{"name": "options", "type": "Options"}], "return_type": "int", "signature": "private int determineMaxSinceLength(final Options options)", "original_string": "    private int determineMaxSinceLength(final Options options) {\n        final int minLen = HEADER_SINCE.length();\n        final int len = options.getOptions().stream().map(o -> o.getSince() == null ? minLen : o.getSince().length()).max(Integer::compareTo).orElse(minLen);\n        return len < minLen ? minLen : len;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[int]findWrapPos(String,int,int)", "name": "findWrapPos", "arg_nums": 3, "params": [{"name": "text", "type": "String"}, {"name": "width", "type": "int"}, {"name": "startPos", "type": "int"}], "return_type": "int", "signature": "protected int findWrapPos(final String text, final int width, final int startPos)", "original_string": "    protected int findWrapPos(final String text, final int width, final int startPos) {\n        // the line ends before the max wrap pos or a new line char found\n        int pos = text.indexOf(Char.LF, startPos);\n        if (pos != -1 && pos <= width) {\n            return pos + 1;\n        }\n        pos = text.indexOf(Char.TAB, startPos);\n        if (pos != -1 && pos <= width) {\n            return pos + 1;\n        }\n        if (startPos + width >= text.length()) {\n            return -1;\n        }\n        // look for the last whitespace character before startPos+width\n        for (pos = startPos + width; pos >= startPos; --pos) {\n            final char c = text.charAt(pos);\n            if (c == Char.SP || c == Char.LF || c == Char.CR) {\n                break;\n            }\n        }\n        // if we found it - just return\n        if (pos > startPos) {\n            return pos;\n        }\n        // if we didn't find one, simply chop at startPos+width\n        pos = startPos + width;\n        return pos == text.length() ? -1 : pos;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nFinds the next text wrap position after {@code startPos} for the text in {@code text} with the column width\n{@code width}. The wrap point is the last position before startPos+width having a whitespace character (space,\n\\n, \\r). If there is no whitespace character before startPos+width, it will return startPos+width.\n\n@param text The text being searched for the wrap position\n@param width width of the wrapped text\n@param startPos position from which to start the lookup whitespace character\n@return position on which the text must be wrapped or -1 if the wrap position is at the end of the text\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[String]getArgName()", "name": "getArgName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getArgName()", "original_string": "    public String getArgName() {\n        return defaultArgName;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the 'argName'.\n\n@return the 'argName'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[int]getDescPadding()", "name": "getDescPadding", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getDescPadding()", "original_string": "    public int getDescPadding() {\n        return defaultDescPad;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGets the 'descPadding'.\n\n@return the 'descPadding'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[int]getLeftPadding()", "name": "getLeftPadding", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getLeftPadding()", "original_string": "    public int getLeftPadding() {\n        return defaultLeftPad;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGets the 'leftPadding'.\n\n@return the 'leftPadding'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[String]getLongOptPrefix()", "name": "getLongOptPrefix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getLongOptPrefix()", "original_string": "    public String getLongOptPrefix() {\n        return defaultLongOptPrefix;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the 'longOptPrefix'.\n\n@return the 'longOptPrefix'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[String]getLongOptSeparator()", "name": "getLongOptSeparator", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getLongOptSeparator()", "original_string": "    public String getLongOptSeparator() {\n        return longOptSeparator;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the separator displayed between a long option and its value.\n\n@return the separator\n@since 1.3\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[String]getNewLine()", "name": "getNewLine", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getNewLine()", "original_string": "    public String getNewLine() {\n        return defaultNewLine;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the 'newLine'.\n\n@return the 'newLine'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[Comparator<Option>]getOptionComparator()", "name": "getOptionComparator", "arg_nums": 0, "params": [], "return_type": "Comparator<Option>", "signature": "public Comparator<Option> getOptionComparator()", "original_string": "    public Comparator<Option> getOptionComparator() {\n        return optionComparator;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Comparator<Option>", "classes": []}, "docstring": "\nComparator used to sort the options when they output in help text. Defaults to case-insensitive alphabetical sorting\nby option key.\n\n@return the {@link Comparator} currently in use to sort the options\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[String]getOptPrefix()", "name": "getOptPrefix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getOptPrefix()", "original_string": "    public String getOptPrefix() {\n        return defaultOptPrefix;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the 'optPrefix'.\n\n@return the 'optPrefix'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[String]getSyntaxPrefix()", "name": "getSyntaxPrefix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getSyntaxPrefix()", "original_string": "    public String getSyntaxPrefix() {\n        return defaultSyntaxPrefix;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the 'syntaxPrefix'.\n\n@return the 'syntaxPrefix'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[int]getWidth()", "name": "getWidth", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getWidth()", "original_string": "    public int getWidth() {\n        return defaultWidth;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGets the 'width'.\n\n@return the 'width'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]printHelp(int,String,String,Options,String)", "name": "printHelp", "arg_nums": 5, "params": [{"name": "width", "type": "int"}, {"name": "cmdLineSyntax", "type": "String"}, {"name": "header", "type": "String"}, {"name": "options", "type": "Options"}, {"name": "footer", "type": "String"}], "return_type": "void", "signature": "public void printHelp(final int width, final String cmdLineSyntax, final String header, final Options options, final String footer)", "original_string": "    public void printHelp(final int width, final String cmdLineSyntax, final String header, final Options options, final String footer) {\n        printHelp(width, cmdLineSyntax, header, options, footer, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrints the help for {@code options} with the specified command line syntax. This method prints help information\nto  {@link System#out}  by default.\n\n@param width the number of characters to be displayed on each line\n@param cmdLineSyntax the syntax for this application\n@param header the banner to display at the beginning of the help\n@param options the Options instance\n@param footer the banner to display at the end of the help\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]printHelp(int,String,String,Options,String,boolean)", "name": "printHelp", "arg_nums": 6, "params": [{"name": "width", "type": "int"}, {"name": "cmdLineSyntax", "type": "String"}, {"name": "header", "type": "String"}, {"name": "options", "type": "Options"}, {"name": "footer", "type": "String"}, {"name": "autoUsage", "type": "boolean"}], "return_type": "void", "signature": "public void printHelp(final int width, final String cmdLineSyntax, final String header, final Options options, final String footer,\n        final boolean autoUsage)", "original_string": "    public void printHelp(final int width, final String cmdLineSyntax, final String header, final Options options, final String footer,\n        final boolean autoUsage) {\n        final PrintWriter pw = new PrintWriter(printWriter);\n        printHelp(pw, width, cmdLineSyntax, header, options, getLeftPadding(), getDescPadding(), footer, autoUsage);\n        pw.flush();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrints the help for {@code options} with the specified command line syntax. This method prints help information\nto {@link System#out} by default.\n\n@param width the number of characters to be displayed on each line\n@param cmdLineSyntax the syntax for this application\n@param header the banner to display at the beginning of the help\n@param options the Options instance\n@param footer the banner to display at the end of the help\n@param autoUsage whether to print an automatically generated usage statement\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]printHelp(PrintWriter,int,String,String,Options,int,int,String)", "name": "printHelp", "arg_nums": 8, "params": [{"name": "pw", "type": "PrintWriter"}, {"name": "width", "type": "int"}, {"name": "cmdLineSyntax", "type": "String"}, {"name": "header", "type": "String"}, {"name": "options", "type": "Options"}, {"name": "leftPad", "type": "int"}, {"name": "descPad", "type": "int"}, {"name": "footer", "type": "String"}], "return_type": "void", "signature": "public void printHelp(final PrintWriter pw, final int width, final String cmdLineSyntax, final String header, final Options options, final int leftPad,\n        final int descPad, final String footer)", "original_string": "    public void printHelp(final PrintWriter pw, final int width, final String cmdLineSyntax, final String header, final Options options, final int leftPad,\n        final int descPad, final String footer) {\n        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrints the help for {@code options} with the specified command line syntax.\n\n@param pw the writer to which the help will be written\n@param width the number of characters to be displayed on each line\n@param cmdLineSyntax the syntax for this application\n@param header the banner to display at the beginning of the help\n@param options the Options instance\n@param leftPad the number of characters of padding to be prefixed to each line\n@param descPad the number of characters of padding to be prefixed to each description line\n@param footer the banner to display at the end of the help\n\n@throws IllegalStateException if there is no room to print a line\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]printHelp(PrintWriter,int,String,String,Options,int,int,String,boolean)", "name": "printHelp", "arg_nums": 9, "params": [{"name": "pw", "type": "PrintWriter"}, {"name": "width", "type": "int"}, {"name": "cmdLineSyntax", "type": "String"}, {"name": "header", "type": "String"}, {"name": "options", "type": "Options"}, {"name": "leftPad", "type": "int"}, {"name": "descPad", "type": "int"}, {"name": "footer", "type": "String"}, {"name": "autoUsage", "type": "boolean"}], "return_type": "void", "signature": "public void printHelp(final PrintWriter pw, final int width, final String cmdLineSyntax, final String header, final Options options, final int leftPad,\n        final int descPad, final String footer, final boolean autoUsage)", "original_string": "    public void printHelp(final PrintWriter pw, final int width, final String cmdLineSyntax, final String header, final Options options, final int leftPad,\n        final int descPad, final String footer, final boolean autoUsage) {\n        if (Util.isEmpty(cmdLineSyntax)) {\n            throw new IllegalArgumentException(\"cmdLineSyntax not provided\");\n        }\n        if (autoUsage) {\n            printUsage(pw, width, cmdLineSyntax, options);\n        } else {\n            printUsage(pw, width, cmdLineSyntax);\n        }\n        if (header != null && !header.isEmpty()) {\n            printWrapped(pw, width, header);\n        }\n        printOptions(pw, width, options, leftPad, descPad);\n        if (footer != null && !footer.isEmpty()) {\n            printWrapped(pw, width, footer);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrints the help for {@code options} with the specified command line syntax.\n\n@param pw the writer to which the help will be written\n@param width the number of characters to be displayed on each line\n@param cmdLineSyntax the syntax for this application\n@param header the banner to display at the beginning of the help\n@param options the Options instance\n@param leftPad the number of characters of padding to be prefixed to each line\n@param descPad the number of characters of padding to be prefixed to each description line\n@param footer the banner to display at the end of the help\n@param autoUsage whether to print an automatically generated usage statement\n@throws IllegalStateException if there is no room to print a line\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]printHelp(String,Options)", "name": "printHelp", "arg_nums": 2, "params": [{"name": "cmdLineSyntax", "type": "String"}, {"name": "options", "type": "Options"}], "return_type": "void", "signature": "public void printHelp(final String cmdLineSyntax, final Options options)", "original_string": "    public void printHelp(final String cmdLineSyntax, final Options options) {\n        printHelp(getWidth(), cmdLineSyntax, null, options, null, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrints the help for {@code options} with the specified command line syntax. This method prints help information\nto {@link System#out} by default.\n\n@param cmdLineSyntax the syntax for this application\n@param options the Options instance\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]printHelp(String,Options,boolean)", "name": "printHelp", "arg_nums": 3, "params": [{"name": "cmdLineSyntax", "type": "String"}, {"name": "options", "type": "Options"}, {"name": "autoUsage", "type": "boolean"}], "return_type": "void", "signature": "public void printHelp(final String cmdLineSyntax, final Options options, final boolean autoUsage)", "original_string": "    public void printHelp(final String cmdLineSyntax, final Options options, final boolean autoUsage) {\n        printHelp(getWidth(), cmdLineSyntax, null, options, null, autoUsage);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrints the help for {@code options} with the specified command line syntax. This method prints help information\nto {@link System#out} by default.\n\n@param cmdLineSyntax the syntax for this application\n@param options the Options instance\n@param autoUsage whether to print an automatically generated usage statement\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]printHelp(String,String,Options,String)", "name": "printHelp", "arg_nums": 4, "params": [{"name": "cmdLineSyntax", "type": "String"}, {"name": "header", "type": "String"}, {"name": "options", "type": "Options"}, {"name": "footer", "type": "String"}], "return_type": "void", "signature": "public void printHelp(final String cmdLineSyntax, final String header, final Options options, final String footer)", "original_string": "    public void printHelp(final String cmdLineSyntax, final String header, final Options options, final String footer) {\n        printHelp(cmdLineSyntax, header, options, footer, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrints the help for {@code options} with the specified command line syntax. This method prints help information\nto {@link System#out} by default.\n\n@param cmdLineSyntax the syntax for this application\n@param header the banner to display at the beginning of the help\n@param options the Options instance\n@param footer the banner to display at the end of the help\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]printHelp(String,String,Options,String,boolean)", "name": "printHelp", "arg_nums": 5, "params": [{"name": "cmdLineSyntax", "type": "String"}, {"name": "header", "type": "String"}, {"name": "options", "type": "Options"}, {"name": "footer", "type": "String"}, {"name": "autoUsage", "type": "boolean"}], "return_type": "void", "signature": "public void printHelp(final String cmdLineSyntax, final String header, final Options options, final String footer, final boolean autoUsage)", "original_string": "    public void printHelp(final String cmdLineSyntax, final String header, final Options options, final String footer, final boolean autoUsage) {\n        printHelp(getWidth(), cmdLineSyntax, header, options, footer, autoUsage);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrints the help for {@code options} with the specified command line syntax. This method prints help information\nto {@link System#out} by default.\n\n@param cmdLineSyntax the syntax for this application\n@param header the banner to display at the beginning of the help\n@param options the Options instance\n@param footer the banner to display at the end of the help\n@param autoUsage whether to print an automatically generated usage statement\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]printOptions(PrintWriter,int,Options,int,int)", "name": "printOptions", "arg_nums": 5, "params": [{"name": "pw", "type": "PrintWriter"}, {"name": "width", "type": "int"}, {"name": "options", "type": "Options"}, {"name": "leftPad", "type": "int"}, {"name": "descPad", "type": "int"}], "return_type": "void", "signature": "public void printOptions(final PrintWriter pw, final int width, final Options options, final int leftPad, final int descPad)", "original_string": "    public void printOptions(final PrintWriter pw, final int width, final Options options, final int leftPad, final int descPad) {\n        try {\n            pw.println(appendOptions(new StringBuilder(), width, options, leftPad, descPad));\n        } catch (final IOException e) {\n            // Cannot happen\n            throw new UncheckedIOException(e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrints the help for the specified Options to the specified writer, using the specified width, left padding and\ndescription padding.\n\n@param pw The printWriter to write the help to\n@param width The number of characters to display per line\n@param options The command line Options\n@param leftPad the number of characters of padding to be prefixed to each line\n@param descPad the number of characters of padding to be prefixed to each description line\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]printUsage(PrintWriter,int,String)", "name": "printUsage", "arg_nums": 3, "params": [{"name": "pw", "type": "PrintWriter"}, {"name": "width", "type": "int"}, {"name": "cmdLineSyntax", "type": "String"}], "return_type": "void", "signature": "public void printUsage(final PrintWriter pw, final int width, final String cmdLineSyntax)", "original_string": "    public void printUsage(final PrintWriter pw, final int width, final String cmdLineSyntax) {\n        final int argPos = cmdLineSyntax.indexOf(' ') + 1;\n        printWrapped(pw, width, getSyntaxPrefix().length() + argPos, getSyntaxPrefix() + cmdLineSyntax);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrints the cmdLineSyntax to the specified writer, using the specified width.\n\n@param pw The printWriter to write the help to\n@param width The number of characters per line for the usage statement.\n@param cmdLineSyntax The usage statement.\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]printUsage(PrintWriter,int,String,Options)", "name": "printUsage", "arg_nums": 4, "params": [{"name": "pw", "type": "PrintWriter"}, {"name": "width", "type": "int"}, {"name": "app", "type": "String"}, {"name": "options", "type": "Options"}], "return_type": "void", "signature": "public void printUsage(final PrintWriter pw, final int width, final String app, final Options options)", "original_string": "    public void printUsage(final PrintWriter pw, final int width, final String app, final Options options) {\n        // initialize the string buffer\n        final StringBuilder buff = new StringBuilder(getSyntaxPrefix()).append(app).append(Char.SP);\n        // create a list for processed option groups\n        final Collection<OptionGroup> processedGroups = new ArrayList<>();\n        final List<Option> optList = new ArrayList<>(options.getOptions());\n        if (getOptionComparator() != null) {\n            Collections.sort(optList, getOptionComparator());\n        }\n        // iterate over the options\n        for (final Iterator<Option> it = optList.iterator(); it.hasNext();) {\n            // get the next Option\n            final Option option = it.next();\n            // check if the option is part of an OptionGroup\n            final OptionGroup group = options.getOptionGroup(option);\n            // if the option is part of a group\n            if (group != null) {\n                // and if the group has not already been processed\n                if (!processedGroups.contains(group)) {\n                    // add the group to the processed list\n                    processedGroups.add(group);\n                    // add the usage clause\n                    appendOptionGroup(buff, group);\n                }\n                // otherwise the option was displayed in the group\n                // previously so ignore it.\n            }\n            // if the Option is not part of an OptionGroup\n            else {\n                appendOption(buff, option, option.isRequired());\n            }\n            if (it.hasNext()) {\n                buff.append(Char.SP);\n            }\n        }\n\n        // call printWrapped\n        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrints the usage statement for the specified application.\n\n@param pw The PrintWriter to print the usage statement\n@param width The number of characters to display per line\n@param app The application name\n@param options The command line Options\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]printWrapped(PrintWriter,int,int,String)", "name": "printWrapped", "arg_nums": 4, "params": [{"name": "pw", "type": "PrintWriter"}, {"name": "width", "type": "int"}, {"name": "nextLineTabStop", "type": "int"}, {"name": "text", "type": "String"}], "return_type": "void", "signature": "public void printWrapped(final PrintWriter pw, final int width, final int nextLineTabStop, final String text)", "original_string": "    public void printWrapped(final PrintWriter pw, final int width, final int nextLineTabStop, final String text) {\n        pw.println(renderWrappedTextBlock(new StringBuilder(text.length()), width, nextLineTabStop, text));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrints the specified text to the specified PrintWriter.\n\n@param pw The printWriter to write the help to\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be written to the PrintWriter\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]printWrapped(PrintWriter,int,String)", "name": "printWrapped", "arg_nums": 3, "params": [{"name": "pw", "type": "PrintWriter"}, {"name": "width", "type": "int"}, {"name": "text", "type": "String"}], "return_type": "void", "signature": "public void printWrapped(final PrintWriter pw, final int width, final String text)", "original_string": "    public void printWrapped(final PrintWriter pw, final int width, final String text) {\n        printWrapped(pw, width, 0, text);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrints the specified text to the specified PrintWriter.\n\n@param pw The printWriter to write the help to\n@param width The number of characters to display per line\n@param text The text to be written to the PrintWriter\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[StringBuffer]renderOptions(StringBuffer,int,Options,int,int)", "name": "renderOptions", "arg_nums": 5, "params": [{"name": "sb", "type": "StringBuffer"}, {"name": "width", "type": "int"}, {"name": "options", "type": "Options"}, {"name": "leftPad", "type": "int"}, {"name": "descPad", "type": "int"}], "return_type": "StringBuffer", "signature": "protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad)", "original_string": "    protected StringBuffer renderOptions(final StringBuffer sb, final int width, final Options options, final int leftPad, final int descPad) {\n        try {\n            return appendOptions(sb, width, options, leftPad, descPad);\n        } catch (final IOException e) {\n            // Cannot happen\n            throw new UncheckedIOException(e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "StringBuffer", "classes": []}, "docstring": "\nRenders the specified Options and return the rendered Options in a StringBuffer.\n\n@param sb The StringBuffer to place the rendered Options into.\n@param width The number of characters to display per line\n@param options The command line Options\n@param leftPad the number of characters of padding to be prefixed to each line\n@param descPad the number of characters of padding to be prefixed to each description line\n\n@return the StringBuffer with the rendered Options contents.\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[StringBuffer]renderWrappedText(StringBuffer,int,int,String)", "name": "renderWrappedText", "arg_nums": 4, "params": [{"name": "sb", "type": "StringBuffer"}, {"name": "width", "type": "int"}, {"name": "nextLineTabStop", "type": "int"}, {"name": "text", "type": "String"}], "return_type": "StringBuffer", "signature": "protected StringBuffer renderWrappedText(final StringBuffer sb, final int width, final int nextLineTabStop, final String text)", "original_string": "    protected StringBuffer renderWrappedText(final StringBuffer sb, final int width, final int nextLineTabStop, final String text) {\n        try {\n            return appendWrappedText(sb, width, nextLineTabStop, text);\n        } catch (final IOException e) {\n            // Cannot happen.\n            throw new UncheckedIOException(e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "StringBuffer", "classes": []}, "docstring": "\nRenders the specified text and return the rendered Options in a StringBuffer.\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n\n@return the StringBuffer with the rendered Options contents.\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[A]renderWrappedTextBlock(A,int,int,String)", "name": "renderWrappedTextBlock", "arg_nums": 4, "params": [{"name": "appendable", "type": "A"}, {"name": "width", "type": "int"}, {"name": "nextLineTabStop", "type": "int"}, {"name": "text", "type": "String"}], "return_type": "A", "signature": "private <A extends Appendable> A renderWrappedTextBlock(final A appendable, final int width, final int nextLineTabStop, final String text)", "original_string": "    private <A extends Appendable> A renderWrappedTextBlock(final A appendable, final int width, final int nextLineTabStop, final String text) {\n        try {\n            final BufferedReader in = new BufferedReader(new StringReader(text));\n            String line;\n            boolean firstLine = true;\n            while ((line = in.readLine()) != null) {\n                if (!firstLine) {\n                    appendable.append(getNewLine());\n                } else {\n                    firstLine = false;\n                }\n                appendWrappedText(appendable, width, nextLineTabStop, line);\n            }\n        } catch (final IOException e) { // NOPMD\n            // cannot happen\n        }\n        return appendable;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "A", "classes": []}, "docstring": "\nRenders the specified text width a maximum width. This method differs from renderWrappedText by not removing leading\nspaces after a new line.\n\n@param appendable The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[String]rtrim(String)", "name": "rtrim", "arg_nums": 1, "params": [{"name": "s", "type": "String"}], "return_type": "String", "signature": "protected String rtrim(final String s)", "original_string": "    protected String rtrim(final String s) {\n        if (Util.isEmpty(s)) {\n            return s;\n        }\n        int pos = s.length();\n        while (pos > 0 && Character.isWhitespace(s.charAt(pos - 1))) {\n            --pos;\n        }\n        return s.substring(0, pos);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRemoves the trailing whitespace from the specified String.\n\n@param s The String to remove the trailing padding from.\n@return The String of without the trailing padding\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]setArgName(String)", "name": "setArgName", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "void", "signature": "public void setArgName(final String name)", "original_string": "    public void setArgName(final String name) {\n        this.defaultArgName = name;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the 'argName'.\n\n@param name the new value of 'argName'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]setDescPadding(int)", "name": "setDescPadding", "arg_nums": 1, "params": [{"name": "padding", "type": "int"}], "return_type": "void", "signature": "public void setDescPadding(final int padding)", "original_string": "    public void setDescPadding(final int padding) {\n        this.defaultDescPad = padding;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the 'descPadding'.\n\n@param padding the new value of 'descPadding'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]setLeftPadding(int)", "name": "setLeftPadding", "arg_nums": 1, "params": [{"name": "padding", "type": "int"}], "return_type": "void", "signature": "public void setLeftPadding(final int padding)", "original_string": "    public void setLeftPadding(final int padding) {\n        this.defaultLeftPad = padding;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the 'leftPadding'.\n\n@param padding the new value of 'leftPadding'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]setLongOptPrefix(String)", "name": "setLongOptPrefix", "arg_nums": 1, "params": [{"name": "prefix", "type": "String"}], "return_type": "void", "signature": "public void setLongOptPrefix(final String prefix)", "original_string": "    public void setLongOptPrefix(final String prefix) {\n        this.defaultLongOptPrefix = prefix;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the 'longOptPrefix'.\n\n@param prefix the new value of 'longOptPrefix'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]setLongOptSeparator(String)", "name": "setLongOptSeparator", "arg_nums": 1, "params": [{"name": "longOptSeparator", "type": "String"}], "return_type": "void", "signature": "public void setLongOptSeparator(final String longOptSeparator)", "original_string": "    public void setLongOptSeparator(final String longOptSeparator) {\n        this.longOptSeparator = longOptSeparator;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the separator displayed between a long option and its value. Ensure that the separator specified is supported by\nthe parser used, typically ' ' or '='.\n\n@param longOptSeparator the separator, typically ' ' or '='.\n@since 1.3\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]setNewLine(String)", "name": "setNewLine", "arg_nums": 1, "params": [{"name": "newline", "type": "String"}], "return_type": "void", "signature": "public void setNewLine(final String newline)", "original_string": "    public void setNewLine(final String newline) {\n        this.defaultNewLine = newline;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the 'newLine'.\n\n@param newline the new value of 'newLine'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]setOptionComparator(Comparator<Option>)", "name": "setOptionComparator", "arg_nums": 1, "params": [{"name": "comparator", "type": "Comparator<Option>"}], "return_type": "void", "signature": "public void setOptionComparator(final Comparator<Option> comparator)", "original_string": "    public void setOptionComparator(final Comparator<Option> comparator) {\n        this.optionComparator = comparator;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the comparator used to sort the options when they output in help text. Passing in a null comparator will keep the\noptions in the order they were declared.\n\n@param comparator the {@link Comparator} to use for sorting the options\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]setOptPrefix(String)", "name": "setOptPrefix", "arg_nums": 1, "params": [{"name": "prefix", "type": "String"}], "return_type": "void", "signature": "public void setOptPrefix(final String prefix)", "original_string": "    public void setOptPrefix(final String prefix) {\n        this.defaultOptPrefix = prefix;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the 'optPrefix'.\n\n@param prefix the new value of 'optPrefix'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]setSyntaxPrefix(String)", "name": "setSyntaxPrefix", "arg_nums": 1, "params": [{"name": "prefix", "type": "String"}], "return_type": "void", "signature": "public void setSyntaxPrefix(final String prefix)", "original_string": "    public void setSyntaxPrefix(final String prefix) {\n        this.defaultSyntaxPrefix = prefix;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the 'syntaxPrefix'.\n\n@param prefix the new value of 'syntaxPrefix'\n"}, {"uris": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter.[void]setWidth(int)", "name": "setWidth", "arg_nums": 1, "params": [{"name": "width", "type": "int"}], "return_type": "void", "signature": "public void setWidth(final int width)", "original_string": "    public void setWidth(final int width) {\n        this.defaultWidth = width;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/HelpFormatter.java", "class_name": "HelpFormatter", "class_uri": "src/main/java/org/apache/commons/cli/HelpFormatter.java.HelpFormatter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the 'width'.\n\n@param width the new value of 'width'\n"}, {"uris": "src/main/java/org/apache/commons/cli/AmbiguousOptionException.java.AmbiguousOptionException.[String]createMessage(String,Collection<String>)", "name": "createMessage", "arg_nums": 2, "params": [{"name": "option", "type": "String"}, {"name": "matchingOptions", "type": "Collection<String>"}], "return_type": "String", "signature": "private static String createMessage(final String option, final Collection<String> matchingOptions)", "original_string": "    private static String createMessage(final String option, final Collection<String> matchingOptions) {\n        final StringBuilder buf = new StringBuilder(\"Ambiguous option: '\");\n        buf.append(option);\n        buf.append(\"'  (could be: \");\n\n        final Iterator<String> it = matchingOptions.iterator();\n        while (it.hasNext()) {\n            buf.append(Char.APOS);\n            buf.append(it.next());\n            buf.append(Char.APOS);\n            if (it.hasNext()) {\n                buf.append(\", \");\n            }\n        }\n        buf.append(\")\");\n\n        return buf.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/AmbiguousOptionException.java", "class_name": "AmbiguousOptionException", "class_uri": "src/main/java/org/apache/commons/cli/AmbiguousOptionException.java.AmbiguousOptionException", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nBuild the exception message from the specified list of options.\n\n@param option\n@param matchingOptions\n@return\n"}, {"uris": "src/main/java/org/apache/commons/cli/AmbiguousOptionException.java.AmbiguousOptionException.[]AmbiguousOptionException(String,Collection<String>)", "name": "AmbiguousOptionException", "arg_nums": 2, "params": [{"name": "option", "type": "String"}, {"name": "matchingOptions", "type": "Collection<String>"}], "return_type": "", "signature": "public AmbiguousOptionException(final String option, final Collection<String> matchingOptions)", "original_string": "    public AmbiguousOptionException(final String option, final Collection<String> matchingOptions) {\n        super(createMessage(option, matchingOptions), option);\n        this.matchingOptions = matchingOptions;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/AmbiguousOptionException.java", "class_name": "AmbiguousOptionException", "class_uri": "src/main/java/org/apache/commons/cli/AmbiguousOptionException.java.AmbiguousOptionException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new AmbiguousOptionException.\n\n@param option the partial option name\n@param matchingOptions the options matching the name\n"}, {"uris": "src/main/java/org/apache/commons/cli/AmbiguousOptionException.java.AmbiguousOptionException.[Collection<String>]getMatchingOptions()", "name": "getMatchingOptions", "arg_nums": 0, "params": [], "return_type": "Collection<String>", "signature": "public Collection<String> getMatchingOptions()", "original_string": "    public Collection<String> getMatchingOptions() {\n        return matchingOptions;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/AmbiguousOptionException.java", "class_name": "AmbiguousOptionException", "class_uri": "src/main/java/org/apache/commons/cli/AmbiguousOptionException.java.AmbiguousOptionException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Collection<String>", "classes": []}, "docstring": "\nGets the options matching the partial name.\n\n@return a collection of options matching the name\n"}, {"uris": "src/main/java/org/apache/commons/cli/PosixParser.java.PosixParser.[void]burstToken(String,boolean)", "name": "burstToken", "arg_nums": 2, "params": [{"name": "token", "type": "String"}, {"name": "stopAtNonOption", "type": "boolean"}], "return_type": "void", "signature": "protected void burstToken(final String token, final boolean stopAtNonOption)", "original_string": "    protected void burstToken(final String token, final boolean stopAtNonOption) {\n        for (int i = 1; i < token.length(); i++) {\n            final String ch = String.valueOf(token.charAt(i));\n\n            if (!options.hasOption(ch)) {\n                if (stopAtNonOption) {\n                    processNonOptionToken(token.substring(i), true);\n                } else {\n                    tokens.add(token);\n                }\n                break;\n            }\n            tokens.add(\"-\" + ch);\n            currentOption = options.getOption(ch);\n\n            if (currentOption.hasArg() && token.length() != i + 1) {\n                tokens.add(token.substring(i + 1));\n\n                break;\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/PosixParser.java", "class_name": "PosixParser", "class_uri": "src/main/java/org/apache/commons/cli/PosixParser.java.PosixParser", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nBreaks {@code token} into its constituent parts using the following algorithm.\n\n<ul>\n<li>ignore the first character (\"<b>-</b>\")</li>\n<li>for each remaining character check if an {@link Option} exists with that id.</li>\n<li>if an {@link Option} does exist then add that character prepended with \"<b>-</b>\" to the list of processed\ntokens.</li>\n<li>if the {@link Option} can have an argument value and there are remaining characters in the token then add the\nremaining characters as a token to the list of processed tokens.</li>\n<li>if an {@link Option} does <b>NOT</b> exist <b>AND</b> {@code stopAtNonOption} <b>IS</b> set then add the\nspecial token \"<b>--</b>\" followed by the remaining characters and also the remaining tokens directly to the\nprocessed tokens list.</li>\n<li>if an {@link Option} does <b>NOT</b> exist <b>AND</b> {@code stopAtNonOption} <b>IS NOT</b> set then add\nthat character prepended with \"<b>-</b>\".</li>\n</ul>\n\n@param token The current token to be <b>burst</b>\n@param stopAtNonOption Specifies whether to stop processing at the first non-Option encountered.\n"}, {"uris": "src/main/java/org/apache/commons/cli/PosixParser.java.PosixParser.[String[]]flatten(Options,String[],boolean)", "name": "flatten", "arg_nums": 3, "params": [{"name": "options", "type": "Options"}, {"name": "arguments", "type": "String[]"}, {"name": "stopAtNonOption", "type": "boolean"}], "return_type": "String[]", "signature": "@Override\n    protected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption)", "original_string": "    @Override\n    protected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) throws ParseException {\n        init();\n        this.options = options;\n        // an iterator for the command line tokens\n        final Iterator<String> iter = Arrays.asList(arguments).iterator();\n        // process each command line token\n        while (iter.hasNext()) {\n            // get the next command line token\n            final String token = iter.next();\n            if (token != null) {\n                // single or double hyphen\n                if (\"-\".equals(token) || \"--\".equals(token)) {\n                    tokens.add(token);\n                } else if (token.startsWith(\"--\")) {\n                    // handle long option --foo or --foo=bar\n                    final int pos = DefaultParser.indexOfEqual(token);\n                    final String opt = pos == -1 ? token : token.substring(0, pos); // --foo\n\n                    final List<String> matchingOpts = options.getMatchingOptions(opt);\n\n                    if (matchingOpts.isEmpty()) {\n                        processNonOptionToken(token, stopAtNonOption);\n                    } else if (matchingOpts.size() > 1) {\n                        throw new AmbiguousOptionException(opt, matchingOpts);\n                    } else {\n                        currentOption = options.getOption(matchingOpts.get(0));\n\n                        tokens.add(\"--\" + currentOption.getLongOpt());\n                        if (pos != -1) {\n                            tokens.add(token.substring(pos + 1));\n                        }\n                    }\n                } else if (token.startsWith(\"-\")) {\n                    if (token.length() == 2 || options.hasOption(token)) {\n                        processOptionToken(token, stopAtNonOption);\n                    } else if (!options.getMatchingOptions(token).isEmpty()) {\n                        final List<String> matchingOpts = options.getMatchingOptions(token);\n                        if (matchingOpts.size() > 1) {\n                            throw new AmbiguousOptionException(token, matchingOpts);\n                        }\n                        final Option opt = options.getOption(matchingOpts.get(0));\n                        processOptionToken(\"-\" + opt.getLongOpt(), stopAtNonOption);\n                    }\n                    // requires bursting\n                    else {\n                        burstToken(token, stopAtNonOption);\n                    }\n                } else {\n                    processNonOptionToken(token, stopAtNonOption);\n                }\n            }\n            gobble(iter);\n        }\n        return tokens.toArray(Util.EMPTY_STRING_ARRAY);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/PosixParser.java", "class_name": "PosixParser", "class_uri": "src/main/java/org/apache/commons/cli/PosixParser.java.PosixParser", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\n<p>\nAn implementation of {@link Parser}'s abstract {@link Parser#flatten(Options,String[],boolean) flatten} method.\n</p>\n\n<p>\nThe following are the rules used by this flatten method.\n</p>\n<ol>\n<li>if {@code stopAtNonOption} is <b>true</b> then do not burst anymore of {@code arguments} entries, just\nadd each successive entry without further processing. Otherwise, ignore {@code stopAtNonOption}.</li>\n<li>if the current {@code arguments} entry is \"<b>--</b>\" just add the entry to the list of processed\ntokens</li>\n<li>if the current {@code arguments} entry is \"<b>-</b>\" just add the entry to the list of processed tokens</li>\n<li>if the current {@code arguments} entry is two characters in length and the first character is \"<b>-</b>\"\nthen check if this is a valid {@link Option} id. If it is a valid id, then add the entry to the list of processed\ntokens and set the current {@link Option} member. If it is not a valid id and {@code stopAtNonOption} is true,\nthen the remaining entries are copied to the list of processed tokens. Otherwise, the current entry is ignored.</li>\n<li>if the current {@code arguments} entry is more than two characters in length and the first character is\n\"<b>-</b>\" then we need to burst the entry to determine its constituents. For more information on the bursting\nalgorithm see {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n<li>if the current {@code arguments} entry is not handled by any of the previous rules, then the entry is added\nto the list of processed tokens.</li>\n</ol>\n\n@param options The command line {@link Options}\n@param arguments The command line arguments to be parsed\n@param stopAtNonOption Specifies whether to stop flattening when an non option is found.\n@return The flattened {@code arguments} String array.\n"}, {"uris": "src/main/java/org/apache/commons/cli/PosixParser.java.PosixParser.[void]gobble(Iterator<String>)", "name": "gobble", "arg_nums": 1, "params": [{"name": "iter", "type": "Iterator<String>"}], "return_type": "void", "signature": "private void gobble(final Iterator<String> iter)", "original_string": "    private void gobble(final Iterator<String> iter) {\n        if (eatTheRest) {\n            while (iter.hasNext()) {\n                tokens.add(iter.next());\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/PosixParser.java", "class_name": "PosixParser", "class_uri": "src/main/java/org/apache/commons/cli/PosixParser.java.PosixParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdds the remaining tokens to the processed tokens list.\n\n@param iter An iterator over the remaining tokens\n"}, {"uris": "src/main/java/org/apache/commons/cli/PosixParser.java.PosixParser.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void init()", "original_string": "    private void init() {\n        eatTheRest = false;\n        tokens.clear();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/PosixParser.java", "class_name": "PosixParser", "class_uri": "src/main/java/org/apache/commons/cli/PosixParser.java.PosixParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nResets the members to their original state i.e. remove all of {@code tokens} entries and set\n{@code eatTheRest} to false.\n"}, {"uris": "src/main/java/org/apache/commons/cli/PosixParser.java.PosixParser.[void]processNonOptionToken(String,boolean)", "name": "processNonOptionToken", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "stopAtNonOption", "type": "boolean"}], "return_type": "void", "signature": "private void processNonOptionToken(final String value, final boolean stopAtNonOption)", "original_string": "    private void processNonOptionToken(final String value, final boolean stopAtNonOption) {\n        if (stopAtNonOption && (currentOption == null || !currentOption.hasArg())) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        }\n\n        tokens.add(value);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/PosixParser.java", "class_name": "PosixParser", "class_uri": "src/main/java/org/apache/commons/cli/PosixParser.java.PosixParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd the special token \"<b>--</b>\" and the current {@code value} to the processed tokens list. Then add all the\nremaining {@code argument} values to the processed tokens list.\n\n@param value The current token\n"}, {"uris": "src/main/java/org/apache/commons/cli/PosixParser.java.PosixParser.[void]processOptionToken(String,boolean)", "name": "processOptionToken", "arg_nums": 2, "params": [{"name": "token", "type": "String"}, {"name": "stopAtNonOption", "type": "boolean"}], "return_type": "void", "signature": "private void processOptionToken(final String token, final boolean stopAtNonOption)", "original_string": "    private void processOptionToken(final String token, final boolean stopAtNonOption) {\n        if (stopAtNonOption && !options.hasOption(token)) {\n            eatTheRest = true;\n        }\n\n        if (options.hasOption(token)) {\n            currentOption = options.getOption(token);\n        }\n\n        tokens.add(token);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/PosixParser.java", "class_name": "PosixParser", "class_uri": "src/main/java/org/apache/commons/cli/PosixParser.java.PosixParser", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n<p>\nIf an {@link Option} exists for {@code token} then add the token to the processed list.\n</p>\n\n<p>\nIf an {@link Option} does not exist and {@code stopAtNonOption} is set then add the remaining tokens to the\nprocessed tokens list directly.\n</p>\n\n@param token The current option token\n@param stopAtNonOption Specifies whether flattening should halt at the first non option.\n"}, {"uris": "src/main/java/org/apache/commons/cli/MissingOptionException.java.MissingOptionException.[String]createMessage(List<?>)", "name": "createMessage", "arg_nums": 1, "params": [{"name": "missingOptions", "type": "List<?>"}], "return_type": "String", "signature": "private static String createMessage(final List<?> missingOptions)", "original_string": "    private static String createMessage(final List<?> missingOptions) {\n        final StringBuilder buf = new StringBuilder(\"Missing required option\");\n        buf.append(missingOptions.size() == 1 ? \"\" : \"s\");\n        buf.append(\": \");\n\n        final Iterator<?> it = missingOptions.iterator();\n        while (it.hasNext()) {\n            buf.append(it.next());\n            if (it.hasNext()) {\n                buf.append(\", \");\n            }\n        }\n\n        return buf.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/MissingOptionException.java", "class_name": "MissingOptionException", "class_uri": "src/main/java/org/apache/commons/cli/MissingOptionException.java.MissingOptionException", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nBuild the exception message from the specified list of options.\n\n@param missingOptions the list of missing options and groups\n"}, {"uris": "src/main/java/org/apache/commons/cli/MissingOptionException.java.MissingOptionException.[]MissingOptionException(List)", "name": "MissingOptionException", "arg_nums": 1, "params": [{"name": "missingOptions", "type": "List"}], "return_type": "", "signature": "public MissingOptionException(final List missingOptions)", "original_string": "    public MissingOptionException(final List missingOptions) {\n        this(createMessage(missingOptions));\n        this.missingOptions = missingOptions;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/MissingOptionException.java", "class_name": "MissingOptionException", "class_uri": "src/main/java/org/apache/commons/cli/MissingOptionException.java.MissingOptionException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new {@code MissingSelectedException} with the specified list of missing options.\n\n@param missingOptions the list of missing options and groups\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/cli/MissingOptionException.java.MissingOptionException.[]MissingOptionException(String)", "name": "MissingOptionException", "arg_nums": 1, "params": [{"name": "message", "type": "String"}], "return_type": "", "signature": "public MissingOptionException(final String message)", "original_string": "    public MissingOptionException(final String message) {\n        super(message);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/MissingOptionException.java", "class_name": "MissingOptionException", "class_uri": "src/main/java/org/apache/commons/cli/MissingOptionException.java.MissingOptionException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new {@code MissingSelectedException} with the specified detail message.\n\n@param message the detail message\n"}, {"uris": "src/main/java/org/apache/commons/cli/MissingOptionException.java.MissingOptionException.[List]getMissingOptions()", "name": "getMissingOptions", "arg_nums": 0, "params": [], "return_type": "List", "signature": "public List getMissingOptions()", "original_string": "    public List getMissingOptions() {\n        return missingOptions;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/MissingOptionException.java", "class_name": "MissingOptionException", "class_uri": "src/main/java/org/apache/commons/cli/MissingOptionException.java.MissingOptionException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List", "classes": []}, "docstring": "\nGets the list of options or option groups missing in the command line parsed.\n\n@return the missing options, consisting of String instances for simple options, and OptionGroup instances for\n        required option groups.\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLineParser.java.CommandLineParser.[CommandLine]parse(Options,String[])", "name": "parse", "arg_nums": 2, "params": [{"name": "options", "type": "Options"}, {"name": "arguments", "type": "String[]"}], "return_type": "CommandLine", "signature": "CommandLine parse(Options options, String[] arguments)", "original_string": "    CommandLine parse(Options options, String[] arguments) throws ParseException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLineParser.java", "class_name": "CommandLineParser", "class_uri": "src/main/java/org/apache/commons/cli/CommandLineParser.java.CommandLineParser", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "CommandLine", "classes": []}, "docstring": "\nParses the arguments according to the specified options.\n\n@param options the specified Options\n@param arguments the command line arguments\n@return the list of atomic option and value tokens\n\n@throws ParseException if there are any problems encountered while parsing the command line tokens.\n"}, {"uris": "src/main/java/org/apache/commons/cli/CommandLineParser.java.CommandLineParser.[CommandLine]parse(Options,String[],boolean)", "name": "parse", "arg_nums": 3, "params": [{"name": "options", "type": "Options"}, {"name": "arguments", "type": "String[]"}, {"name": "stopAtNonOption", "type": "boolean"}], "return_type": "CommandLine", "signature": "CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption)", "original_string": "    CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/CommandLineParser.java", "class_name": "CommandLineParser", "class_uri": "src/main/java/org/apache/commons/cli/CommandLineParser.java.CommandLineParser", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "CommandLine", "classes": []}, "docstring": "\nParses the arguments according to the specified options.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param stopAtNonOption if {@code true} an unrecognized argument stops the parsing and the remaining arguments\n       are added to the {@link CommandLine}s args list. If {@code false} an unrecognized argument triggers a\n       ParseException.\n\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered while parsing the command line tokens.\n"}, {"uris": "src/main/java/org/apache/commons/cli/GnuParser.java.GnuParser.[String[]]flatten(Options,String[],boolean)", "name": "flatten", "arg_nums": 3, "params": [{"name": "options", "type": "Options"}, {"name": "arguments", "type": "String[]"}, {"name": "stopAtNonOption", "type": "boolean"}], "return_type": "String[]", "signature": "@Override\n    protected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption)", "original_string": "    @Override\n    protected String[] flatten(final Options options, final String[] arguments, final boolean stopAtNonOption) {\n        final List<String> tokens = new ArrayList<>();\n        boolean eatTheRest = false;\n        for (int i = 0; i < arguments.length; i++) {\n            final String arg = arguments[i];\n            if (arg != null) {\n                if (\"--\".equals(arg)) {\n                    eatTheRest = true;\n                    tokens.add(\"--\");\n                } else if (\"-\".equals(arg)) {\n                    tokens.add(\"-\");\n                } else if (arg.startsWith(\"-\")) {\n                    final String opt = Util.stripLeadingHyphens(arg);\n                    if (options.hasOption(opt)) {\n                        tokens.add(arg);\n                    } else {\n                        final int equalPos = DefaultParser.indexOfEqual(opt);\n                        if (equalPos != -1 && options.hasOption(opt.substring(0, equalPos))) {\n                            // the format is --foo=value or -foo=value\n                            tokens.add(arg.substring(0, arg.indexOf(Char.EQUAL))); // --foo\n                            tokens.add(arg.substring(arg.indexOf(Char.EQUAL) + 1)); // value\n                        } else if (options.hasOption(arg.substring(0, 2))) {\n                            // the format is a special properties option (-Dproperty=value)\n                            tokens.add(arg.substring(0, 2)); // -D\n                            tokens.add(arg.substring(2)); // property=value\n                        } else {\n                            eatTheRest = stopAtNonOption;\n                            tokens.add(arg);\n                        }\n                    }\n                } else {\n                    tokens.add(arg);\n                }\n\n                if (eatTheRest) {\n                    for (i++; i < arguments.length; i++) { // NOPMD\n                        tokens.add(arguments[i]);\n                    }\n                }\n            }\n        }\n\n        return tokens.toArray(Util.EMPTY_STRING_ARRAY);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/cli/GnuParser.java", "class_name": "GnuParser", "class_uri": "src/main/java/org/apache/commons/cli/GnuParser.java.GnuParser", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\nThis flatten method does so using the following rules:\n<ol>\n<li>If an {@link Option} exists for the first character of the {@code arguments} entry <b>AND</b> an\n{@link Option} does not exist for the whole {@code argument} then add the first character as an option to the\nprocessed tokens list e.g. \"-D\" and add the rest of the entry to the also.</li>\n<li>Otherwise just add the token to the processed tokens list.</li>\n</ol>\n\n@param options The Options to parse the arguments by.\n@param arguments The arguments that have to be flattened.\n@param stopAtNonOption specifies whether to stop flattening when a non option has been encountered\n@return a String array of the flattened arguments\n"}]