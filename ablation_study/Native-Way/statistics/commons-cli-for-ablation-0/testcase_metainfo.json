[{"uris": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java.Options_addRequiredOptionTest.[void]testAddRequiredOptionWithShortAndLongOpt()", "name": "testAddRequiredOptionWithShortAndLongOpt", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddRequiredOptionWithShortAndLongOpt()", "original_string": "    @Test\n    public void testAddRequiredOptionWithShortAndLongOpt() {\n        options.addRequiredOption(\"a\", \"alpha\", false, \"description\");\n        assertTrue(options.hasOption(\"a\"));\n        assertTrue(options.hasOption(\"alpha\"));\n        assertTrue(options.getOption(\"a\").isRequired());\n        assertEquals(\"description\", options.getOption(\"a\").getDescription());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java", "class_name": "Options_addRequiredOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java.Options_addRequiredOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java.Options_addRequiredOptionTest.[void]testAddRequiredOptionWithArgument()", "name": "testAddRequiredOptionWithArgument", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddRequiredOptionWithArgument()", "original_string": "    @Test\n    public void testAddRequiredOptionWithArgument() {\n        options.addRequiredOption(\"b\", \"beta\", true, \"description\");\n        assertTrue(options.hasOption(\"b\"));\n        assertTrue(options.hasOption(\"beta\"));\n        assertTrue(options.getOption(\"b\").isRequired());\n        assertTrue(options.getOption(\"b\").hasArg());\n        assertEquals(\"description\", options.getOption(\"b\").getDescription());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java", "class_name": "Options_addRequiredOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java.Options_addRequiredOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java.Options_addRequiredOptionTest.[void]testAddRequiredOptionWithoutArgument()", "name": "testAddRequiredOptionWithoutArgument", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddRequiredOptionWithoutArgument()", "original_string": "    @Test\n    public void testAddRequiredOptionWithoutArgument() {\n        options.addRequiredOption(\"c\", \"gamma\", false, \"description\");\n        assertTrue(options.hasOption(\"c\"));\n        assertTrue(options.hasOption(\"gamma\"));\n        assertTrue(options.getOption(\"c\").isRequired());\n        assertFalse(options.getOption(\"c\").hasArg());\n        assertEquals(\"description\", options.getOption(\"c\").getDescription());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java", "class_name": "Options_addRequiredOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java.Options_addRequiredOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java.Options_addRequiredOptionTest.[void]testAddRequiredOptionDuplicate()", "name": "testAddRequiredOptionDuplicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddRequiredOptionDuplicate()", "original_string": "    @Test\n    public void testAddRequiredOptionDuplicate() {\n        options.addRequiredOption(\"d\", \"delta\", false, \"description1\");\n        options.addRequiredOption(\"d\", \"delta\", false, \"description2\");\n        assertTrue(options.hasOption(\"d\"));\n        assertTrue(options.hasOption(\"delta\"));\n        assertTrue(options.getOption(\"d\").isRequired());\n        assertEquals(\"description2\", options.getOption(\"d\").getDescription());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java", "class_name": "Options_addRequiredOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_addRequiredOptionTest.java.Options_addRequiredOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ParseException_wrapTest.java.ParseException_wrapTest.[void]testWrapWithUnsupportedOperationException()", "name": "testWrapWithUnsupportedOperationException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testWrapWithUnsupportedOperationException()", "original_string": "    @Test\n    void testWrapWithUnsupportedOperationException() {\n        UnsupportedOperationException unsupportedOperationException = new UnsupportedOperationException(\"Test exception\");\n        assertThrows(UnsupportedOperationException.class, () -> ParseException.wrap(unsupportedOperationException));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ParseException_wrapTest.java", "class_name": "ParseException_wrapTest", "class_uri": "src/test/java/org/apache/commons/cli/ParseException_wrapTest.java.ParseException_wrapTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ParseException_wrapTest.java.ParseException_wrapTest.[void]testWrapWithParseException()", "name": "testWrapWithParseException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testWrapWithParseException()", "original_string": "    @Test\n    void testWrapWithParseException() {\n        ParseException parseException = new ParseException(\"Test exception\");\n        assertEquals(parseException, ParseException.wrap(parseException));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ParseException_wrapTest.java", "class_name": "ParseException_wrapTest", "class_uri": "src/test/java/org/apache/commons/cli/ParseException_wrapTest.java.ParseException_wrapTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ParseException_wrapTest.java.ParseException_wrapTest.[void]testWrapWithGenericException()", "name": "testWrapWithGenericException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testWrapWithGenericException()", "original_string": "    @Test\n    void testWrapWithGenericException() {\n        Exception genericException = new Exception(\"Test exception\");\n        ParseException wrappedException = ParseException.wrap(genericException);\n        assertEquals(genericException, wrappedException.getCause());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ParseException_wrapTest.java", "class_name": "ParseException_wrapTest", "class_uri": "src/test/java/org/apache/commons/cli/ParseException_wrapTest.java.ParseException_wrapTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatter_printOptionsTest.java.HelpFormatter_printOptionsTest.[void]testPrintOptions()", "name": "testPrintOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintOptions()", "original_string": "    @Test\n    public void testPrintOptions() {\n        Options options = new Options();\n        options.addOption(\"f\", \"file\", true, \"The file to be processed\");\n        options.addOption(\"v\", \"version\", false, \"Print the version of the application\");\n        options.addOption(\"h\", \"help\", false, \"Print this help message\");\n\n        formatter.printOptions(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD);\n\n        String expected = \" -f,--file <arg>   The file to be processed\\n\" +\n                          \" -h,--help         Print this help message\\n\" +\n                          \" -v,--version      Print the version of the application\\n\";\n\n        assertEquals(expected, sw.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatter_printOptionsTest.java", "class_name": "HelpFormatter_printOptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatter_printOptionsTest.java.HelpFormatter_printOptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatter_printOptionsTest.java.HelpFormatter_printOptionsTest.[void]testPrintOptionsWithEmptyOptions()", "name": "testPrintOptionsWithEmptyOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintOptionsWithEmptyOptions()", "original_string": "    @Test\n    public void testPrintOptionsWithEmptyOptions() {\n        Options options = new Options();\n\n        formatter.printOptions(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD);\n\n        assertEquals(\"\", sw.toString().trim());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatter_printOptionsTest.java", "class_name": "HelpFormatter_printOptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatter_printOptionsTest.java.HelpFormatter_printOptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ApplicationTest.java.ApplicationTest.[void]testAnt()", "name": "testAnt", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAnt()", "original_string": "    @Test\n    public void testAnt() throws Exception {\n        // use the GNU parser\n        final CommandLineParser parser = new GnuParser();\n        final Options options = new Options();\n        options.addOption(\"help\", false, \"print this message\");\n        options.addOption(\"projecthelp\", false, \"print project help information\");\n        options.addOption(\"version\", false, \"print the version information and exit\");\n        options.addOption(\"quiet\", false, \"be extra quiet\");\n        options.addOption(\"verbose\", false, \"be extra verbose\");\n        options.addOption(\"debug\", false, \"print debug information\");\n        options.addOption(\"logfile\", true, \"use given file for log\");\n        options.addOption(\"logger\", true, \"the class which is to perform the logging\");\n        options.addOption(\"listener\", true, \"add an instance of a class as a project listener\");\n        options.addOption(\"buildfile\", true, \"use given buildfile\");\n        //@formatter:off\n        options.addOption(OptionBuilder.withDescription(\"use value for given property\")\n                                        .hasArgs()\n                                        .withValueSeparator()\n                                        .create('D'));\n                           //, null, true, , false, true);\n        //@formatter:on\n        options.addOption(\"find\", true, \"search for buildfile towards the root of the filesystem and use it\");\n\n        final String[] args = {\"-buildfile\", \"mybuild.xml\", \"-Dproperty=value\", \"-Dproperty1=value1\", \"-projecthelp\"};\n\n        final CommandLine line = parser.parse(options, args);\n\n        // check multiple values\n        final String[] opts = line.getOptionValues(\"D\");\n        assertEquals(\"property\", opts[0]);\n        assertEquals(\"value\", opts[1]);\n        assertEquals(\"property1\", opts[2]);\n        assertEquals(\"value1\", opts[3]);\n\n        // check single value\n        assertEquals(line.getOptionValue(\"buildfile\"), \"mybuild.xml\");\n\n        // check option\n        assertTrue(line.hasOption(\"projecthelp\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ApplicationTest.java", "class_name": "ApplicationTest", "class_uri": "src/test/java/org/apache/commons/cli/ApplicationTest.java.ApplicationTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAnt test\n"}, {"uris": "src/test/java/org/apache/commons/cli/ApplicationTest.java.ApplicationTest.[void]testGroovy()", "name": "testGroovy", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGroovy()", "original_string": "    @Test\n    public void testGroovy() throws Exception {\n        final Options options = new Options();\n\n        //@formatter:off\n        options.addOption(\n            OptionBuilder.withLongOpt(\"define\").\n                withDescription(\"define a system property\").\n                hasArg(true).\n                withArgName(\"name=value\").\n                create('D'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n                .withDescription(\"usage information\")\n                .withLongOpt(\"help\")\n                .create('h'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n                .withDescription(\"debug mode will print out full stack traces\")\n                .withLongOpt(\"debug\")\n                .create('d'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n                .withDescription(\"display the Groovy and JVM versions\")\n                .withLongOpt(\"version\")\n                .create('v'));\n        options.addOption(\n            OptionBuilder.withArgName(\"charset\")\n                .hasArg()\n                .withDescription(\"specify the encoding of the files\")\n                .withLongOpt(\"encoding\")\n                .create('c'));\n        options.addOption(\n            OptionBuilder.withArgName(\"script\")\n                .hasArg()\n                .withDescription(\"specify a command line script\")\n                .create('e'));\n        options.addOption(\n            OptionBuilder.withArgName(\"extension\")\n                .hasOptionalArg()\n                .withDescription(\"modify files in place; create backup if extension is given (e.g. \\'.bak\\')\")\n                .create('i'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n                .withDescription(\"process files line by line using implicit 'line' variable\")\n                .create('n'));\n        options.addOption(\n            OptionBuilder.hasArg(false)\n                .withDescription(\"process files line by line and print result (see also -n)\")\n                .create('p'));\n        options.addOption(\n            OptionBuilder.withArgName(\"port\")\n                .hasOptionalArg()\n                .withDescription(\"listen on a port and process inbound lines\")\n                .create('l'));\n        options.addOption(\n            OptionBuilder.withArgName(\"splitPattern\")\n                .hasOptionalArg()\n                .withDescription(\"split lines using splitPattern (default '\\\\s') using implicit 'split' variable\")\n                .withLongOpt(\"autosplit\")\n                .create('a'));\n        //@formatter:on\n\n        final Parser parser = new PosixParser();\n        final CommandLine line = parser.parse(options, new String[] {\"-e\", \"println 'hello'\"}, true);\n\n        assertTrue(line.hasOption('e'));\n        assertEquals(\"println 'hello'\", line.getOptionValue('e'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ApplicationTest.java", "class_name": "ApplicationTest", "class_uri": "src/test/java/org/apache/commons/cli/ApplicationTest.java.ApplicationTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ApplicationTest.java.ApplicationTest.[void]testLs()", "name": "testLs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLs()", "original_string": "    @Test\n    public void testLs() throws Exception {\n        // create the command line parser\n        final CommandLineParser parser = new PosixParser();\n        final Options options = new Options();\n        options.addOption(\"a\", \"all\", false, \"do not hide entries starting with .\");\n        options.addOption(\"A\", \"almost-all\", false, \"do not list implied . and ..\");\n        options.addOption(\"b\", \"escape\", false, \"print octal escapes for nongraphic characters\");\n        //@formatter:off\n        options.addOption(OptionBuilder.withLongOpt(\"block-size\")\n                                        .withDescription(\"use SIZE-byte blocks\")\n                                        .hasArg()\n                                        .withArgName(\"SIZE\")\n                                        .create());\n        //@formatter:on\n        options.addOption(\"B\", \"ignore-backups\", false, \"do not list implied entried ending with ~\");\n        options.addOption(\"c\", false, \"with -lt: sort by, and show, ctime (time of last modification of file status information) with \"\n            + \"-l:show ctime and sort by name otherwise: sort by ctime\");\n        options.addOption(\"C\", false, \"list entries by columns\");\n\n        final String[] args = {\"--block-size=10\"};\n\n        final CommandLine line = parser.parse(options, args);\n        assertTrue(line.hasOption(\"block-size\"));\n        assertEquals(line.getOptionValue(\"block-size\"), \"10\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ApplicationTest.java", "class_name": "ApplicationTest", "class_uri": "src/test/java/org/apache/commons/cli/ApplicationTest.java.ApplicationTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ApplicationTest.java.ApplicationTest.[void]testMan()", "name": "testMan", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMan()", "original_string": "    @Test\n    public void testMan() {\n        final String cmdLine = \"man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath] [-Ppager] [-Slist] [-msystem] [-pstring] [-Llocale] [-eextension] [section]\"\n            + \" page ...\";\n        //@formatter:off\n        final Options options = new Options().\n                addOption(\"a\", \"all\", false, \"find all matching manual pages.\").\n                addOption(\"d\", \"debug\", false, \"emit debugging messages.\").\n                addOption(\"e\", \"extension\", false, \"limit search to extension type 'extension'.\").\n                addOption(\"f\", \"whatis\", false, \"equivalent to whatis.\").\n                addOption(\"k\", \"apropos\", false, \"equivalent to apropos.\").\n                addOption(\"w\", \"location\", false, \"print physical location of man page(s).\").\n                addOption(\"l\", \"local-file\", false, \"interpret 'page' argument(s) as local file name(s)\").\n                addOption(\"u\", \"update\", false, \"force a cache consistency check.\").\n                //FIXME - should generate -r,--prompt string\n                addOption(\"r\", \"prompt\", true, \"provide 'less' pager with prompt.\").\n                addOption(\"c\", \"catman\", false, \"used by catman to reformat out of date cat pages.\").\n                addOption(\"7\", \"ascii\", false, \"display ASCII translation or certain latin1 chars.\").\n                addOption(\"t\", \"troff\", false, \"use troff format pages.\").\n                //FIXME - should generate -T,--troff-device device\n                addOption(\"T\", \"troff-device\", true, \"use groff with selected device.\").\n                addOption(\"Z\", \"ditroff\", false, \"use groff with selected device.\").\n                addOption(\"D\", \"default\", false, \"reset all options to their default values.\").\n                //FIXME - should generate -M,--manpath path\n                addOption(\"M\", \"manpath\", true, \"set search path for manual pages to 'path'.\").\n                //FIXME - should generate -P,--pager pager\n                addOption(\"P\", \"pager\", true, \"use program 'pager' to display output.\").\n                //FIXME - should generate -S,--sections list\n                addOption(\"S\", \"sections\", true, \"use colon separated section list.\").\n                //FIXME - should generate -m,--systems system\n                addOption(\"m\", \"systems\", true, \"search for man pages from other UNIX system(s).\").\n                //FIXME - should generate -L,--locale locale\n                addOption(\"L\", \"locale\", true, \"define the locale for this particular man search.\").\n                //FIXME - should generate -p,--preprocessor string\n                addOption(\"p\", \"preprocessor\", true, \"string indicates which preprocessor to run.\\n\" +\n                         \" e - [n]eqn  p - pic     t - tbl\\n\" +\n                         \" g - grap    r - refer   v - vgrind\").\n                addOption(\"V\", \"version\", false, \"show version.\").\n                addOption(\"h\", \"help\", false, \"show this usage message.\");\n        //@formatter:on\n\n        final HelpFormatter hf = new HelpFormatter();\n        final String eol = System.lineSeparator();\n        final StringWriter out = new StringWriter();\n        hf.printHelp(new PrintWriter(out), 60, cmdLine, null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null, false);\n        //@formatter:off\n        assertEquals(\"usage: man [-c|-f|-k|-w|-tZT device] [-adlhu7V] [-Mpath]\" + eol +\n                        \"           [-Ppager] [-Slist] [-msystem] [-pstring]\" + eol +\n                        \"           [-Llocale] [-eextension] [section] page ...\" + eol +\n                        \" -7,--ascii                display ASCII translation or\" + eol +\n                        \"                           certain latin1 chars.\" + eol +\n                        \" -a,--all                  find all matching manual pages.\" + eol +\n                        \" -c,--catman               used by catman to reformat out of\" + eol +\n                        \"                           date cat pages.\" + eol +\n                        \" -d,--debug                emit debugging messages.\" + eol +\n                        \" -D,--default              reset all options to their\" + eol +\n                        \"                           default values.\" + eol +\n                        \" -e,--extension            limit search to extension type\" + eol +\n                        \"                           'extension'.\" + eol +\n                        \" -f,--whatis               equivalent to whatis.\" + eol +\n                        \" -h,--help                 show this usage message.\" + eol +\n                        \" -k,--apropos              equivalent to apropos.\" + eol +\n                        \" -l,--local-file           interpret 'page' argument(s) as\" + eol +\n                        \"                           local file name(s)\" + eol +\n                        \" -L,--locale <arg>         define the locale for this\" + eol +\n                        \"                           particular man search.\" + eol +\n                        \" -M,--manpath <arg>        set search path for manual pages\" + eol +\n                        \"                           to 'path'.\" + eol +\n                        \" -m,--systems <arg>        search for man pages from other\" + eol +\n                        \"                           UNIX system(s).\" + eol +\n                        \" -P,--pager <arg>          use program 'pager' to display\" + eol +\n                        \"                           output.\" + eol +\n                        \" -p,--preprocessor <arg>   string indicates which\" + eol +\n                        \"                           preprocessor to run.\" + eol +\n                        \"                           e - [n]eqn  p - pic     t - tbl\" + eol +\n                        \"                           g - grap    r - refer   v -\" + eol +\n                        \"                           vgrind\" + eol +\n                        \" -r,--prompt <arg>         provide 'less' pager with prompt.\" + eol +\n                        \" -S,--sections <arg>       use colon separated section list.\" + eol +\n                        \" -t,--troff                use troff format pages.\" + eol +\n                        \" -T,--troff-device <arg>   use groff with selected device.\" + eol +\n                        \" -u,--update               force a cache consistency check.\" + eol +\n                        \" -V,--version              show version.\" + eol +\n                        \" -w,--location             print physical location of man\" + eol +\n                        \"                           page(s).\" + eol +\n                        \" -Z,--ditroff              use groff with selected device.\" + eol,\n                out.toString());\n        //@formatter:on\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ApplicationTest.java", "class_name": "ApplicationTest", "class_uri": "src/test/java/org/apache/commons/cli/ApplicationTest.java.ApplicationTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nauthor Slawek Zachcial\n"}, {"uris": "src/test/java/org/apache/commons/cli/ApplicationTest.java.ApplicationTest.[void]testNLT()", "name": "testNLT", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNLT()", "original_string": "    @Test\n    public void testNLT() throws Exception {\n        final Option help = new Option(\"h\", \"help\", false, \"print this message\");\n        final Option version = new Option(\"v\", \"version\", false, \"print version information\");\n        final Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\n        final Option trackerRun = new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\n\n        //@formatter:off\n        final Option timeLimit = OptionBuilder.withLongOpt(\"limit\").hasArg()\n                                        .withValueSeparator()\n                                        .withDescription(\"Set time limit for execution, in minutes\")\n                                        .create(\"l\");\n\n        final Option age = OptionBuilder.withLongOpt(\"age\").hasArg()\n                                  .withValueSeparator()\n                                  .withDescription(\"Age (in days) of cache item before being recomputed\")\n                                  .create(\"a\");\n\n        final Option server = OptionBuilder.withLongOpt(\"server\").hasArg()\n                                     .withValueSeparator()\n                                     .withDescription(\"The NLT server address\")\n                                     .create(\"s\");\n\n        final Option numResults = OptionBuilder.withLongOpt(\"results\").hasArg()\n                                         .withValueSeparator()\n                                         .withDescription(\"Number of results per item\")\n                                         .create(\"r\");\n\n        final Option configFile = OptionBuilder.withLongOpt(\"file\").hasArg()\n                                         .withValueSeparator()\n                                         .withDescription(\"Use the specified configuration file\")\n                                         .create();\n        //@formatter:on\n\n        final Options options = new Options();\n        options.addOption(help);\n        options.addOption(version);\n        options.addOption(newRun);\n        options.addOption(trackerRun);\n        options.addOption(timeLimit);\n        options.addOption(age);\n        options.addOption(server);\n        options.addOption(numResults);\n        options.addOption(configFile);\n\n        // create the command line parser\n        final CommandLineParser parser = new PosixParser();\n\n        final String[] args = {\"-v\", \"-l\", \"10\", \"-age\", \"5\", \"-file\", \"filename\"};\n\n        final CommandLine line = parser.parse(options, args);\n        assertTrue(line.hasOption(\"v\"));\n        assertEquals(line.getOptionValue(\"l\"), \"10\");\n        assertEquals(line.getOptionValue(\"limit\"), \"10\");\n        assertEquals(line.getOptionValue(\"a\"), \"5\");\n        assertEquals(line.getOptionValue(\"age\"), \"5\");\n        assertEquals(line.getOptionValue(\"file\"), \"filename\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ApplicationTest.java", "class_name": "ApplicationTest", "class_uri": "src/test/java/org/apache/commons/cli/ApplicationTest.java.ApplicationTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nReal world test with long and short options.\n"}, {"uris": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest.[void]testBuilder()", "name": "testBuilder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilder()", "original_string": "    @Test\n    public void testBuilder() {\n        // @formatter:off\n        parser = DefaultParser.builder()\n                .setStripLeadingAndTrailingQuotes(false)\n                .setAllowPartialMatching(false)\n                .setDeprecatedHandler(null)\n                .build();\n        // @formatter:on\n        assertEquals(DefaultParser.class, parser.getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DefaultParserTest.java", "class_name": "DefaultParserTest", "class_uri": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest.[void]testDeprecated()", "name": "testDeprecated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeprecated()", "original_string": "    @Test\n    public void testDeprecated() throws ParseException {\n        final Set<Option> handler = new HashSet<>();\n        parser = DefaultParser.builder().setDeprecatedHandler(handler::add).build();\n        final Option opt1 = Option.builder().option(\"d1\").deprecated().build();\n        // @formatter:off\n        final Option opt2 = Option.builder().option(\"d2\").deprecated(DeprecatedAttributes.builder()\n                .setForRemoval(true)\n                .setSince(\"1.0\")\n                .setDescription(\"Do this instead.\").get()).build();\n        // @formatter:on\n        final Option opt3 = Option.builder().option(\"a\").build();\n        // @formatter:off\n        final CommandLine cl = parser.parse(new Options()\n                .addOption(opt1)\n                .addOption(opt2)\n                .addOption(opt3),\n                new String[] {\"-d1\", \"-d2\", \"-a\"});\n        // @formatter:on\n        // Trigger handler:\n        assertTrue(cl.hasOption(opt1.getOpt()));\n        assertTrue(cl.hasOption(opt2.getOpt()));\n        assertTrue(cl.hasOption(opt3.getOpt()));\n        // Assert handler was triggered\n        assertTrue(handler.contains(opt1));\n        assertTrue(handler.contains(opt2));\n        assertFalse(handler.contains(opt3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DefaultParserTest.java", "class_name": "DefaultParserTest", "class_uri": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest.[void]testLongOptionQuoteHandlingWithoutStrip()", "name": "testLongOptionQuoteHandlingWithoutStrip", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongOptionQuoteHandlingWithoutStrip()", "original_string": "    @Test\n    public void testLongOptionQuoteHandlingWithoutStrip() throws Exception {\n        parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(false).build();\n        final String[] args = {\"--bfile\", \"\\\"quoted string\\\"\"};\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertEquals(\"\\\"quoted string\\\"\", cl.getOptionValue(\"b\"), \"Confirm --bfile \\\"arg\\\" keeps quotes\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DefaultParserTest.java", "class_name": "DefaultParserTest", "class_uri": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest.[void]testLongOptionQuoteHandlingWithStrip()", "name": "testLongOptionQuoteHandlingWithStrip", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongOptionQuoteHandlingWithStrip()", "original_string": "    @Test\n    public void testLongOptionQuoteHandlingWithStrip() throws Exception {\n        parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(true).build();\n        final String[] args = {\"--bfile\", \"\\\"quoted string\\\"\"};\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertEquals(\"quoted string\", cl.getOptionValue(\"b\"), \"Confirm --bfile \\\"arg\\\" strips quotes\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DefaultParserTest.java", "class_name": "DefaultParserTest", "class_uri": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest.[void]testLongOptionWithEqualsQuoteHandling()", "name": "testLongOptionWithEqualsQuoteHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testLongOptionWithEqualsQuoteHandling()", "original_string": "    @Override\n    @Test\n    public void testLongOptionWithEqualsQuoteHandling() throws Exception {\n        final String[] args = {\"--bfile=\\\"quoted string\\\"\"};\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertEquals(\"\\\"quoted string\\\"\", cl.getOptionValue(\"b\"), \"Confirm --bfile=\\\"arg\\\" strips quotes\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DefaultParserTest.java", "class_name": "DefaultParserTest", "class_uri": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest.[void]testLongOptionWithEqualsQuoteHandlingWithoutStrip()", "name": "testLongOptionWithEqualsQuoteHandlingWithoutStrip", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongOptionWithEqualsQuoteHandlingWithoutStrip()", "original_string": "    @Test\n    public void testLongOptionWithEqualsQuoteHandlingWithoutStrip() throws Exception {\n        parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(false).build();\n        final String[] args = {\"--bfile=\\\"quoted string\\\"\"};\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertEquals(\"\\\"quoted string\\\"\", cl.getOptionValue(\"b\"), \"Confirm --bfile=\\\"arg\\\" keeps quotes\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DefaultParserTest.java", "class_name": "DefaultParserTest", "class_uri": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest.[void]testLongOptionWithEqualsQuoteHandlingWithStrip()", "name": "testLongOptionWithEqualsQuoteHandlingWithStrip", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongOptionWithEqualsQuoteHandlingWithStrip()", "original_string": "    @Test\n    public void testLongOptionWithEqualsQuoteHandlingWithStrip() throws Exception {\n        parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(true).build();\n        final String[] args = {\"--bfile=\\\"quoted string\\\"\"};\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertEquals(\"quoted string\", cl.getOptionValue(\"b\"), \"Confirm --bfile=\\\"arg\\\" strips quotes\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DefaultParserTest.java", "class_name": "DefaultParserTest", "class_uri": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest.[void]testShortOptionConcatenatedQuoteHandling()", "name": "testShortOptionConcatenatedQuoteHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testShortOptionConcatenatedQuoteHandling()", "original_string": "    @Override\n    @Test\n    public void testShortOptionConcatenatedQuoteHandling() throws Exception {\n        final String[] args = {\"-b\\\"quoted string\\\"\"};\n\n        final CommandLine cl = parser.parse(options, args);\n\n        //This is behavior is not consistent with the other parsers, but is required for backwards compatibility\n        assertEquals(\"\\\"quoted string\\\"\", cl.getOptionValue(\"b\"), \"Confirm -b\\\"arg\\\" keeps quotes\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DefaultParserTest.java", "class_name": "DefaultParserTest", "class_uri": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest.[void]testShortOptionQuoteHandlingWithoutStrip()", "name": "testShortOptionQuoteHandlingWithoutStrip", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortOptionQuoteHandlingWithoutStrip()", "original_string": "    @Test\n    public void testShortOptionQuoteHandlingWithoutStrip() throws Exception {\n        parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(false).build();\n        final String[] args = {\"-b\", \"\\\"quoted string\\\"\"};\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertEquals(\"\\\"quoted string\\\"\", cl.getOptionValue(\"b\"), \"Confirm -b \\\"arg\\\" keeps quotes\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DefaultParserTest.java", "class_name": "DefaultParserTest", "class_uri": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest.[void]testShortOptionQuoteHandlingWithStrip()", "name": "testShortOptionQuoteHandlingWithStrip", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortOptionQuoteHandlingWithStrip()", "original_string": "    @Test\n    public void testShortOptionQuoteHandlingWithStrip() throws Exception {\n        parser = DefaultParser.builder().setStripLeadingAndTrailingQuotes(true).build();\n        final String[] args = {\"-b\", \"\\\"quoted string\\\"\"};\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertEquals(\"quoted string\", cl.getOptionValue(\"b\"), \"Confirm -b \\\"arg\\\" strips quotes\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DefaultParserTest.java", "class_name": "DefaultParserTest", "class_uri": "src/test/java/org/apache/commons/cli/DefaultParserTest.java.DefaultParserTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest.[void]testCreateClass()", "name": "testCreateClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateClass()", "original_string": "    @Test\n    public void testCreateClass() throws ParseException {\n        final Class<?> cls = getClass();\n        assertEquals(cls, TypeHandler.createClass(cls.getName()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "class_name": "TypeHandlerTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest.[void]testCreateFile()", "name": "testCreateFile", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateFile()", "original_string": "    @Test\n    public void testCreateFile() {\n        final File file = new File(\"\").getAbsoluteFile();\n        assertEquals(file, TypeHandler.createFile(file.toString()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "class_name": "TypeHandlerTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " }"}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest.[void]testCreateFiles()", "name": "testCreateFiles", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateFiles()", "original_string": "    @Test\n    public void testCreateFiles() {\n        assertThrows(UnsupportedOperationException.class, () -> TypeHandler.createFiles(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "class_name": "TypeHandlerTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest.[void]testCreateNumber()", "name": "testCreateNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateNumber()", "original_string": "    @Test\n    public void testCreateNumber() throws ParseException {\n        assertEquals(0L, TypeHandler.createNumber(\"0\"));\n        assertEquals(0d, TypeHandler.createNumber(\"0.0\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "class_name": "TypeHandlerTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest.[void]testCreateObject()", "name": "testCreateObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateObject()", "original_string": "    @Test\n    public void testCreateObject() throws ParseException {\n        assertTrue(TypeHandler.createObject(Date.class.getName()) instanceof Date);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "class_name": "TypeHandlerTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest.[void]testCreateURL()", "name": "testCreateURL", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateURL()", "original_string": "    @Test\n    public void testCreateURL() throws ParseException, MalformedURLException {\n        final URL file = Paths.get(\"\").toAbsolutePath().toUri().toURL();\n        assertEquals(file, TypeHandler.createURL(file.toString()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "class_name": "TypeHandlerTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest.[void]testCreateValue(String,Class<?>,Object)", "name": "testCreateValue", "arg_nums": 3, "params": [{"name": "str", "type": "String"}, {"name": "type", "type": "Class<?>"}, {"name": "expected", "type": "Object"}], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @ParameterizedTest(name = \"{0} as {1}\")\n    @MethodSource(\"createValueTestParameters\")\n    public void testCreateValue(final String str, final Class<?> type, final Object expected)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @ParameterizedTest(name = \"{0} as {1}\")\n    @MethodSource(\"createValueTestParameters\")\n    public void testCreateValue(final String str, final Class<?> type, final Object expected) throws Exception {\n        @SuppressWarnings(\"cast\")\n        final Object objectApiTest = type; // KEEP this cast\n        if (expected instanceof Class<?> && Throwable.class.isAssignableFrom((Class<?>) expected)) {\n            assertThrows((Class<Throwable>) expected, () -> TypeHandler.createValue(str, type));\n            assertThrows((Class<Throwable>) expected, () -> TypeHandler.createValue(str, objectApiTest));\n        } else {\n            assertEquals(expected, TypeHandler.createValue(str, type));\n            assertEquals(expected, TypeHandler.createValue(str, objectApiTest));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "class_name": "TypeHandlerTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @ParameterizedTest(name = \"{0} as {1}\")\n    @MethodSource(\"createValueTestParameters\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "@ParameterizedTest(name = \"{0} as {1}\")", "@MethodSource(\"createValueTestParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest.[void]testCreateValueExistingFile()", "name": "testCreateValueExistingFile", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateValueExistingFile()", "original_string": "    @Test\n    public void testCreateValueExistingFile() throws Exception {\n        try (FileInputStream result = TypeHandler.createValue(\"src/test/resources/org/apache/commons/cli/existing-readable.file\",\n                PatternOptionBuilder.EXISTING_FILE_VALUE)) {\n            assertNotNull(result);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "class_name": "TypeHandlerTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest.[void]testnstantiableEquals()", "name": "testnstantiableEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testnstantiableEquals()", "original_string": "    @Test\n    public void testnstantiableEquals() {\n        assertEquals(new Instantiable(), new Instantiable());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "class_name": "TypeHandlerTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " proof of equality for later tests"}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest.[void]testOpenFile()", "name": "testOpenFile", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOpenFile()", "original_string": "    @Test\n    public void testOpenFile() throws ParseException, IOException {\n        try (FileInputStream fis = TypeHandler.openFile(\"src/test/resources/org/apache/commons/cli/existing-readable.file\")) {\n            IOUtils.consume(fis);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "class_name": "TypeHandlerTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest.[void]testRegister()", "name": "testRegister", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRegister()", "original_string": "    @Test\n    public void testRegister() {\n        final Map<Class<?>, Converter<?, ? extends Throwable>> map = TypeHandler.createDefaultMap();\n        final TypeHandler typeHandler = new TypeHandler(map);\n        assertEquals(Converter.PATH, typeHandler.getConverter(Path.class));\n        try {\n            map.put(Path.class, PATH_CONVERTER);\n            assertEquals(PATH_CONVERTER, typeHandler.getConverter(Path.class));\n        } finally {\n            map.remove(Path.class);\n            assertEquals(Converter.DEFAULT, typeHandler.getConverter(Path.class));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java", "class_name": "TypeHandlerTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandlerTest.java.TypeHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest.[void]testEqualsReflexive()", "name": "testEqualsReflexive", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsReflexive()", "original_string": "    @Test\n    public void testEqualsReflexive() {\n        assertTrue(option1.equals(option1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_equalsTest.java", "class_name": "Option_equalsTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest.[void]testEqualsSymmetric()", "name": "testEqualsSymmetric", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsSymmetric()", "original_string": "    @Test\n    public void testEqualsSymmetric() {\n        assertTrue(option1.equals(option2));\n        assertTrue(option2.equals(option1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_equalsTest.java", "class_name": "Option_equalsTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest.[void]testEqualsTransitive()", "name": "testEqualsTransitive", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsTransitive()", "original_string": "    @Test\n    public void testEqualsTransitive() {\n        assertTrue(option1.equals(option2));\n        assertTrue(option2.equals(option2)); // Fixed: Changed option3 to option2\n        assertTrue(option1.equals(option2)); // Fixed: Changed option3 to option2\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_equalsTest.java", "class_name": "Option_equalsTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest.[void]testEqualsConsistent()", "name": "testEqualsConsistent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsConsistent()", "original_string": "    @Test\n    public void testEqualsConsistent() {\n        for (int i = 0; i < 5; i++) {\n            assertTrue(option1.equals(option2));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_equalsTest.java", "class_name": "Option_equalsTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest.[void]testEqualsNull()", "name": "testEqualsNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsNull()", "original_string": "    @Test\n    public void testEqualsNull() {\n        assertFalse(option1.equals(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_equalsTest.java", "class_name": "Option_equalsTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest.[void]testEqualsDifferentClass()", "name": "testEqualsDifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsDifferentClass()", "original_string": "    @Test\n    public void testEqualsDifferentClass() {\n        assertFalse(option1.equals(\"notAnOption\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_equalsTest.java", "class_name": "Option_equalsTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest.[void]testEqualsDifferentOption()", "name": "testEqualsDifferentOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsDifferentOption()", "original_string": "    @Test\n    public void testEqualsDifferentOption() {\n        assertFalse(option1.equals(option3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_equalsTest.java", "class_name": "Option_equalsTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest.[void]testEqualsDifferentLongOption()", "name": "testEqualsDifferentLongOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsDifferentLongOption()", "original_string": "    @Test\n    public void testEqualsDifferentLongOption() {\n        Option option4 = Option.builder(\"o\").longOpt(\"differentOption\").build();\n        assertFalse(option1.equals(option4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_equalsTest.java", "class_name": "Option_equalsTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest.[void]testEqualsDifferentOptionAndLongOption()", "name": "testEqualsDifferentOptionAndLongOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsDifferentOptionAndLongOption()", "original_string": "    @Test\n    public void testEqualsDifferentOptionAndLongOption() {\n        Option option5 = Option.builder(\"q\").longOpt(\"differentOption\").build();\n        assertFalse(option1.equals(option5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_equalsTest.java", "class_name": "Option_equalsTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_equalsTest.java.Option_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java.ArgumentIsOptionTest.[void]testOption()", "name": "testOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOption()", "original_string": "    @Test\n    public void testOption() throws Exception {\n        final String[] args = {\"-p\"};\n\n        final CommandLine cl = parser.parse(options, args);\n        assertTrue(cl.hasOption(\"p\"), \"Confirm -p is set\");\n        assertFalse(cl.hasOption(\"attr\"), \"Confirm -attr is not set\");\n        assertEquals(0, cl.getArgs().length, \"Confirm all arguments recognized\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java", "class_name": "ArgumentIsOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java.ArgumentIsOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java.ArgumentIsOptionTest.[void]testOptionAndOptionWithArgument()", "name": "testOptionAndOptionWithArgument", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOptionAndOptionWithArgument()", "original_string": "    @Test\n    public void testOptionAndOptionWithArgument() throws Exception {\n        final String[] args = {\"-p\", \"-attr\", \"p\"};\n\n        final CommandLine cl = parser.parse(options, args);\n        assertTrue(cl.hasOption(\"p\"), \"Confirm -p is set\");\n        assertTrue(cl.hasOption(\"attr\"), \"Confirm -attr is set\");\n        assertEquals(\"p\", cl.getOptionValue(\"attr\"), \"Confirm arg of -attr\");\n        assertEquals(0, cl.getArgs().length, \"Confirm all arguments recognized\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java", "class_name": "ArgumentIsOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java.ArgumentIsOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java.ArgumentIsOptionTest.[void]testOptionWithArgument()", "name": "testOptionWithArgument", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOptionWithArgument()", "original_string": "    @Test\n    public void testOptionWithArgument() throws Exception {\n        final String[] args = {\"-attr\", \"p\"};\n\n        final CommandLine cl = parser.parse(options, args);\n        assertFalse(cl.hasOption(\"p\"), \"Confirm -p is set\");\n        assertTrue(cl.hasOption(\"attr\"), \"Confirm -attr is set\");\n        assertEquals(\"p\", cl.getOptionValue(\"attr\"), \"Confirm arg of -attr\");\n        assertEquals(0, cl.getArgs().length, \"Confirm all arguments recognized\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java", "class_name": "ArgumentIsOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/ArgumentIsOptionTest.java.ArgumentIsOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/SolrCliTest.java.SolrCliTest.[void]testOptions()", "name": "testOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOptions()", "original_string": "    @Test\n    public void testOptions() {\n        // sanity checks\n        assertNotNull(DEFAULT_CONFIG_SET);\n        assertNotNull(OPTION_CREDENTIALS);\n        assertNotNull(OPTION_HELP);\n        assertNotNull(OPTION_RECURSE);\n        assertNotNull(OPTION_SOLRURL);\n        assertNotNull(OPTION_SOLRURL_DEPRECATED);\n        assertNotNull(OPTION_VERBOSE);\n        assertNotNull(OPTION_ZKHOST);\n        assertNotNull(OPTION_ZKHOST_DEPRECATED);\n        assertNotNull(ZK_HOST);\n        assertNotNull(getDefaultSolrUrl());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/SolrCliTest.java", "class_name": "SolrCliTest", "class_uri": "src/test/java/org/apache/commons/cli/SolrCliTest.java.SolrCliTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_addOptionGroupTest.java.Options_addOptionGroupTest.[void]testAddOptionGroupRequired()", "name": "testAddOptionGroupRequired", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddOptionGroupRequired()", "original_string": "    @Test\n    public void testAddOptionGroupRequired() {\n        OptionGroup group = new OptionGroup();\n        group.setRequired(true);\n        Option option1 = Option.builder(\"a\").build();\n        Option option2 = Option.builder(\"b\").build();\n        group.addOption(option1);\n        group.addOption(option2);\n\n        options.addOptionGroup(group);\n\n        assertTrue(options.getRequiredOptions().contains(group));\n        assertFalse(option1.isRequired());\n        assertFalse(option2.isRequired());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_addOptionGroupTest.java", "class_name": "Options_addOptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_addOptionGroupTest.java.Options_addOptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_addOptionGroupTest.java.Options_addOptionGroupTest.[void]testAddOptionGroupNotRequired()", "name": "testAddOptionGroupNotRequired", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddOptionGroupNotRequired()", "original_string": "    @Test\n    public void testAddOptionGroupNotRequired() {\n        OptionGroup group = new OptionGroup();\n        group.setRequired(false);\n        Option option1 = Option.builder(\"a\").build();\n        Option option2 = Option.builder(\"b\").build();\n        group.addOption(option1);\n        group.addOption(option2);\n\n        options.addOptionGroup(group);\n\n        assertFalse(options.getRequiredOptions().contains(group));\n        assertFalse(option1.isRequired());\n        assertFalse(option2.isRequired());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_addOptionGroupTest.java", "class_name": "Options_addOptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_addOptionGroupTest.java.Options_addOptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_addOptionGroupTest.java.Options_addOptionGroupTest.[void]testAddOptionGroupOptionsAdded()", "name": "testAddOptionGroupOptionsAdded", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddOptionGroupOptionsAdded()", "original_string": "    @Test\n    public void testAddOptionGroupOptionsAdded() {\n        OptionGroup group = new OptionGroup();\n        Option option1 = Option.builder(\"a\").build();\n        Option option2 = Option.builder(\"b\").build();\n        group.addOption(option1);\n        group.addOption(option2);\n\n        options.addOptionGroup(group);\n\n        assertTrue(options.hasOption(\"a\"));\n        assertTrue(options.hasOption(\"b\"));\n        assertEquals(group, options.getOptionGroup(option1));\n        assertEquals(group, options.getOptionGroup(option2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_addOptionGroupTest.java", "class_name": "Options_addOptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_addOptionGroupTest.java.Options_addOptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/SolrCreateToolTest.java.SolrCreateToolTest.[void]testHelpFormatter()", "name": "testHelpFormatter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHelpFormatter()", "original_string": "    @Test\n    public void testHelpFormatter() {\n        final HelpFormatter formatter = new HelpFormatter();\n        final String actual = printHelp(formatter);\n        assertFalse(actual.contains(\"Deprecated\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/SolrCreateToolTest.java", "class_name": "SolrCreateToolTest", "class_uri": "src/test/java/org/apache/commons/cli/SolrCreateToolTest.java.SolrCreateToolTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/SolrCreateToolTest.java.SolrCreateToolTest.[void]testHelpFormatterDeprecated()", "name": "testHelpFormatterDeprecated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHelpFormatterDeprecated()", "original_string": "    @Test\n    public void testHelpFormatterDeprecated() {\n        final HelpFormatter formatter = HelpFormatter.builder().setShowDeprecated(true).get();\n        final String actual = printHelp(formatter);\n        assertTrue(actual.contains(\"-zkHost,--zkHost <HOST>          [Deprecated] Zookeeper connection\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/SolrCreateToolTest.java", "class_name": "SolrCreateToolTest", "class_uri": "src/test/java/org/apache/commons/cli/SolrCreateToolTest.java.SolrCreateToolTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest.[void]testClassPattern()", "name": "testClassPattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClassPattern()", "original_string": "    @Test\n    public void testClassPattern() throws Exception {\n        final Options options = PatternOptionBuilder.parsePattern(\"c+d+\");\n        final CommandLineParser parser = new PosixParser();\n        final CommandLine line = parser.parse(options, new String[] {\"-c\", \"java.util.Calendar\", \"-d\", \"System.DateTime\"});\n\n        assertEquals(Calendar.class, line.getOptionObject(\"c\"), \"c value\");\n        assertNull(line.getOptionObject(\"d\"), \"d value\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java", "class_name": "PatternOptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest.[void]testEmptyPattern()", "name": "testEmptyPattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyPattern()", "original_string": "    @Test\n    public void testEmptyPattern() {\n        final Options options = PatternOptionBuilder.parsePattern(\"\");\n        assertTrue(options.getOptions().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java", "class_name": "PatternOptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest.[void]testExistingFilePattern()", "name": "testExistingFilePattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExistingFilePattern()", "original_string": "    @Test\n    public void testExistingFilePattern() throws Exception {\n        final Options options = PatternOptionBuilder.parsePattern(\"g<\");\n        final CommandLineParser parser = new PosixParser();\n        final CommandLine line = parser.parse(options, new String[] {\"-g\", \"src/test/resources/org/apache/commons/cli/existing-readable.file\"});\n\n        final Object parsedReadableFileStream = line.getOptionObject(\"g\");\n\n        assertNotNull(parsedReadableFileStream, \"option g not parsed\");\n        assertInstanceOf(FileInputStream.class, parsedReadableFileStream, \"option g not FileInputStream\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java", "class_name": "PatternOptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest.[void]testExistingFilePatternFileNotExist()", "name": "testExistingFilePatternFileNotExist", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExistingFilePatternFileNotExist()", "original_string": "    @Test\n    public void testExistingFilePatternFileNotExist() throws Exception {\n        final Options options = PatternOptionBuilder.parsePattern(\"f<\");\n        final CommandLineParser parser = new PosixParser();\n        final CommandLine line = parser.parse(options, new String[] {\"-f\", \"non-existing.file\"});\n\n        assertNull(line.getOptionObject(\"f\"), \"option f parsed\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java", "class_name": "PatternOptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest.[void]testNumberPattern()", "name": "testNumberPattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNumberPattern()", "original_string": "    @Test\n    public void testNumberPattern() throws Exception {\n        final Options options = PatternOptionBuilder.parsePattern(\"n%d%x%\");\n        final CommandLineParser parser = new PosixParser();\n        // 3,5 fails validation.\n        //assertThrows(ParseException.class, () -> parser.parse(options, new String[] {\"-n\", \"1\", \"-d\", \"2.1\", \"-x\", \"3,5\"}));\n\n        final CommandLine line = parser.parse(options, new String[] {\"-n\", \"1\", \"-d\", \"2.1\", \"-x\", \"3,5\"});\n        assertEquals(Long.class, line.getOptionObject(\"n\").getClass(), \"n object class\");\n        assertEquals(Long.valueOf(1), line.getOptionObject(\"n\"), \"n value\");\n\n        assertEquals(Double.class, line.getOptionObject(\"d\").getClass(), \"d object class\");\n        assertEquals(Double.valueOf(2.1), line.getOptionObject(\"d\"), \"d value\");\n\n        assertNull(line.getOptionObject(\"x\"), \"x object\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java", "class_name": "PatternOptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest.[void]testObjectPattern()", "name": "testObjectPattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testObjectPattern()", "original_string": "    @Test\n    public void testObjectPattern() throws Exception {\n        final Options options = PatternOptionBuilder.parsePattern(\"o@i@n@\");\n        final CommandLineParser parser = new PosixParser();\n        final CommandLine line = parser.parse(options, new String[] {\"-o\", \"java.lang.String\", \"-i\", \"java.util.Calendar\", \"-n\", \"System.DateTime\"});\n\n        assertEquals(\"\", line.getOptionObject(\"o\"), \"o value\");\n        assertNull(line.getOptionObject(\"i\"), \"i value\");\n        assertNull(line.getOptionObject(\"n\"), \"n value\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java", "class_name": "PatternOptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest.[void]testRequiredOption()", "name": "testRequiredOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequiredOption()", "original_string": "    @Test\n    public void testRequiredOption() throws Exception {\n        final Options options = PatternOptionBuilder.parsePattern(\"!n%m%\");\n        final CommandLineParser parser = new PosixParser();\n\n        try {\n            parser.parse(options, new String[] {\"\"});\n            fail(\"MissingOptionException wasn't thrown\");\n        } catch (final MissingOptionException e) {\n            assertEquals(1, e.getMissingOptions().size());\n            assertTrue(e.getMissingOptions().contains(\"n\"));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java", "class_name": "PatternOptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest.[void]testSimplePattern()", "name": "testSimplePattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSimplePattern()", "original_string": "    @Test\n    public void testSimplePattern() throws Exception {\n        /*\n         * Dates calculated from strings are dependent upon configuration and environment settings for the\n         * machine on which the test is running.  To avoid this problem, convert the time into a string\n         * and then unparse that using the converter.  This produces strings that always match the correct\n         * time zone.\n         */\n        final Options options = PatternOptionBuilder.parsePattern(\"a:b@cde>f+n%t/m*z#\");\n        final Date expectedDate = new Date(1023400137000L);\n        final DateFormat dateFormat = new SimpleDateFormat(\"EEE MMM dd HH:mm:ss zzz yyyy\");\n        final String[] args = {\"-c\", \"-a\", \"foo\", \"-b\", \"java.util.Vector\", \"-e\", \"build.xml\", \"-f\", \"java.util.Calendar\", \"-n\", \"4.5\", \"-t\",\n            \"https://commons.apache.org\", \"-z\", dateFormat.format(expectedDate), \"-m\", \"test*\"};\n\n        final CommandLineParser parser = new PosixParser();\n        final CommandLine line = parser.parse(options, args);\n\n        assertEquals(\"foo\", line.getOptionValue(\"a\"), \"flag a\");\n        assertEquals(\"foo\", line.getOptionObject(\"a\"), \"string flag a\");\n        assertEquals(new Vector<>(), line.getOptionObject(\"b\"), \"object flag b\");\n        assertTrue(line.hasOption(\"c\"), \"boolean true flag c\");\n        assertFalse(line.hasOption(\"d\"), \"boolean false flag d\");\n        assertEquals(new File(\"build.xml\"), line.getOptionObject(\"e\"), \"file flag e\");\n        assertEquals(Calendar.class, line.getOptionObject(\"f\"), \"class flag f\");\n        assertEquals(Double.valueOf(4.5), line.getOptionObject(\"n\"), \"number flag n\");\n        assertEquals(new URL(\"https://commons.apache.org\"), line.getOptionObject(\"t\"), \"url flag t\");\n\n        // tests the char methods of CommandLine that delegate to the String methods\n        assertEquals(\"foo\", line.getOptionValue('a'), \"flag a\");\n        assertEquals(\"foo\", line.getOptionObject('a'), \"string flag a\");\n        assertEquals(new Vector<>(), line.getOptionObject('b'), \"object flag b\");\n        assertTrue(line.hasOption('c'), \"boolean true flag c\");\n        assertFalse(line.hasOption('d'), \"boolean false flag d\");\n        assertEquals(new File(\"build.xml\"), line.getOptionObject('e'), \"file flag e\");\n        assertEquals(Calendar.class, line.getOptionObject('f'), \"class flag f\");\n        assertEquals(Double.valueOf(4.5), line.getOptionObject('n'), \"number flag n\");\n        assertEquals(new URL(\"https://commons.apache.org\"), line.getOptionObject('t'), \"url flag t\");\n\n        // FILES NOT SUPPORTED YET\n        assertThrows(UnsupportedOperationException.class, () -> line.getOptionObject('m'));\n\n        assertEquals(expectedDate, line.getOptionObject('z'), \"date flag z\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java", "class_name": "PatternOptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest.[void]testUntypedPattern()", "name": "testUntypedPattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUntypedPattern()", "original_string": "    @Test\n    public void testUntypedPattern() throws Exception {\n        final Options options = PatternOptionBuilder.parsePattern(\"abc\");\n        final CommandLineParser parser = new PosixParser();\n        final CommandLine line = parser.parse(options, new String[] {\"-abc\"});\n\n        assertTrue(line.hasOption('a'));\n        assertNull(line.getOptionObject('a'), \"value a\");\n        assertTrue(line.hasOption('b'));\n        assertNull(line.getOptionObject('b'), \"value b\");\n        assertTrue(line.hasOption('c'));\n        assertNull(line.getOptionObject('c'), \"value c\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java", "class_name": "PatternOptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest.[void]testURLPattern()", "name": "testURLPattern", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testURLPattern()", "original_string": "    @Test\n    public void testURLPattern() throws Exception {\n        final Options options = PatternOptionBuilder.parsePattern(\"u/v/\");\n        final CommandLineParser parser = new PosixParser();\n        final CommandLine line = parser.parse(options, new String[] {\"-u\", \"https://commons.apache.org\", \"-v\", \"foo://commons.apache.org\"});\n\n        assertEquals(new URL(\"https://commons.apache.org\"), line.getOptionObject(\"u\"), \"u value\");\n        assertNull(line.getOptionObject(\"v\"), \"v value\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java", "class_name": "PatternOptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java.PatternOptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DeprecatedAttributesTest.java.DeprecatedAttributesTest.[void]testBuilderNonDefaults()", "name": "testBuilderNonDefaults", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilderNonDefaults()", "original_string": "    @Test\n    public void testBuilderNonDefaults() {\n        // @formatter:off\n        final DeprecatedAttributes value = DeprecatedAttributes.builder()\n                .setDescription(\"Use Bar instead!\")\n                .setForRemoval(true)\n                .setSince(\"2.0\")\n                .get();\n        // @formatter:on\n        assertEquals(\"Use Bar instead!\", value.getDescription());\n        assertEquals(\"2.0\", value.getSince());\n        assertEquals(true, value.isForRemoval());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DeprecatedAttributesTest.java", "class_name": "DeprecatedAttributesTest", "class_uri": "src/test/java/org/apache/commons/cli/DeprecatedAttributesTest.java.DeprecatedAttributesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DeprecatedAttributesTest.java.DeprecatedAttributesTest.[void]testBuilderNonDefaultsToString()", "name": "testBuilderNonDefaultsToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilderNonDefaultsToString()", "original_string": "    @Test\n    public void testBuilderNonDefaultsToString() {\n        // @formatter:off\n        assertEquals(\"Deprecated for removal since 2.0: Use Bar instead!\", DeprecatedAttributes.builder()\n                .setDescription(\"Use Bar instead!\")\n                .setForRemoval(true)\n                .setSince(\"2.0\")\n                .get().toString());\n        assertEquals(\"Deprecated for removal: Use Bar instead!\", DeprecatedAttributes.builder()\n                .setDescription(\"Use Bar instead!\")\n                .setForRemoval(true)\n                .get().toString());\n        assertEquals(\"Deprecated since 2.0: Use Bar instead!\",\n                DeprecatedAttributes.builder()\n                .setDescription(\"Use Bar instead!\")\n                .setSince(\"2.0\")\n                .get().toString());\n        assertEquals(\"Deprecated: Use Bar instead!\", DeprecatedAttributes.builder()\n                .setDescription(\"Use Bar instead!\")\n                .get().toString());\n        // @formatter:on\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DeprecatedAttributesTest.java", "class_name": "DeprecatedAttributesTest", "class_uri": "src/test/java/org/apache/commons/cli/DeprecatedAttributesTest.java.DeprecatedAttributesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DeprecatedAttributesTest.java.DeprecatedAttributesTest.[void]testDefaultBuilder()", "name": "testDefaultBuilder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDefaultBuilder()", "original_string": "    @Test\n    public void testDefaultBuilder() {\n        final DeprecatedAttributes defaultValue = DeprecatedAttributes.builder().get();\n        assertEquals(DeprecatedAttributes.DEFAULT.getDescription(), defaultValue.getDescription());\n        assertEquals(DeprecatedAttributes.DEFAULT.getSince(), defaultValue.getSince());\n        assertEquals(DeprecatedAttributes.DEFAULT.isForRemoval(), defaultValue.isForRemoval());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DeprecatedAttributesTest.java", "class_name": "DeprecatedAttributesTest", "class_uri": "src/test/java/org/apache/commons/cli/DeprecatedAttributesTest.java.DeprecatedAttributesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DeprecatedAttributesTest.java.DeprecatedAttributesTest.[void]testDefaultToString()", "name": "testDefaultToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDefaultToString()", "original_string": "    @Test\n    public void testDefaultToString() {\n        assertEquals(\"Deprecated\", DeprecatedAttributes.DEFAULT.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DeprecatedAttributesTest.java", "class_name": "DeprecatedAttributesTest", "class_uri": "src/test/java/org/apache/commons/cli/DeprecatedAttributesTest.java.DeprecatedAttributesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest.[void]testGetValueTypeObject()", "name": "testGetValueTypeObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueTypeObject()", "original_string": "    @Test\n    public void testGetValueTypeObject() {\n        assertEquals(PatternOptionBuilder.OBJECT_VALUE, PatternOptionBuilder.getValueType('@'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java", "class_name": "PatternOptionBuilder_getValueTypeTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest.[void]testGetValueTypeString()", "name": "testGetValueTypeString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueTypeString()", "original_string": "    @Test\n    public void testGetValueTypeString() {\n        assertEquals(PatternOptionBuilder.STRING_VALUE, PatternOptionBuilder.getValueType(':'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java", "class_name": "PatternOptionBuilder_getValueTypeTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest.[void]testGetValueTypeNumber()", "name": "testGetValueTypeNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueTypeNumber()", "original_string": "    @Test\n    public void testGetValueTypeNumber() {\n        assertEquals(PatternOptionBuilder.NUMBER_VALUE, PatternOptionBuilder.getValueType('%'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java", "class_name": "PatternOptionBuilder_getValueTypeTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest.[void]testGetValueTypeClass()", "name": "testGetValueTypeClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueTypeClass()", "original_string": "    @Test\n    public void testGetValueTypeClass() {\n        assertEquals(PatternOptionBuilder.CLASS_VALUE, PatternOptionBuilder.getValueType('+'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java", "class_name": "PatternOptionBuilder_getValueTypeTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest.[void]testGetValueTypeDate()", "name": "testGetValueTypeDate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueTypeDate()", "original_string": "    @Test\n    public void testGetValueTypeDate() {\n        assertEquals(PatternOptionBuilder.DATE_VALUE, PatternOptionBuilder.getValueType('#'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java", "class_name": "PatternOptionBuilder_getValueTypeTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest.[void]testGetValueTypeExistingFile()", "name": "testGetValueTypeExistingFile", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueTypeExistingFile()", "original_string": "    @Test\n    public void testGetValueTypeExistingFile() {\n        assertEquals(PatternOptionBuilder.EXISTING_FILE_VALUE, PatternOptionBuilder.getValueType('<'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java", "class_name": "PatternOptionBuilder_getValueTypeTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest.[void]testGetValueTypeFile()", "name": "testGetValueTypeFile", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueTypeFile()", "original_string": "    @Test\n    public void testGetValueTypeFile() {\n        assertEquals(PatternOptionBuilder.FILE_VALUE, PatternOptionBuilder.getValueType('>'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java", "class_name": "PatternOptionBuilder_getValueTypeTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest.[void]testGetValueTypeFiles()", "name": "testGetValueTypeFiles", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueTypeFiles()", "original_string": "    @Test\n    public void testGetValueTypeFiles() {\n        assertEquals(PatternOptionBuilder.FILES_VALUE, PatternOptionBuilder.getValueType('*'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java", "class_name": "PatternOptionBuilder_getValueTypeTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest.[void]testGetValueTypeURL()", "name": "testGetValueTypeURL", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueTypeURL()", "original_string": "    @Test\n    public void testGetValueTypeURL() {\n        assertEquals(PatternOptionBuilder.URL_VALUE, PatternOptionBuilder.getValueType('/'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java", "class_name": "PatternOptionBuilder_getValueTypeTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest.[void]testGetValueTypeNull()", "name": "testGetValueTypeNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueTypeNull()", "original_string": "    @Test\n    public void testGetValueTypeNull() {\n        assertNull(PatternOptionBuilder.getValueType('X'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java", "class_name": "PatternOptionBuilder_getValueTypeTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_getValueTypeTest.java.PatternOptionBuilder_getValueTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/UtilTest.java.UtilTest.[void]testStripLeadingAndTrailingQuotes()", "name": "testStripLeadingAndTrailingQuotes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStripLeadingAndTrailingQuotes()", "original_string": "    @Test\n    public void testStripLeadingAndTrailingQuotes() {\n        assertNull(Util.stripLeadingAndTrailingQuotes(null));\n        assertEquals(\"\", Util.stripLeadingAndTrailingQuotes(\"\"));\n        assertEquals(\"foo\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\"\"));\n        assertEquals(\"foo \\\"bar\\\"\", Util.stripLeadingAndTrailingQuotes(\"foo \\\"bar\\\"\"));\n        assertEquals(\"\\\"foo\\\" bar\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\" bar\"));\n        assertEquals(\"\\\"foo\\\" and \\\"bar\\\"\", Util.stripLeadingAndTrailingQuotes(\"\\\"foo\\\" and \\\"bar\\\"\"));\n        assertEquals(\"\\\"\", Util.stripLeadingAndTrailingQuotes(\"\\\"\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/UtilTest.java", "class_name": "UtilTest", "class_uri": "src/test/java/org/apache/commons/cli/UtilTest.java.UtilTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/UtilTest.java.UtilTest.[void]testStripLeadingHyphens()", "name": "testStripLeadingHyphens", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStripLeadingHyphens()", "original_string": "    @Test\n    public void testStripLeadingHyphens() {\n        assertEquals(\"f\", Util.stripLeadingHyphens(\"-f\"));\n        assertEquals(\"foo\", Util.stripLeadingHyphens(\"--foo\"));\n        assertEquals(\"-foo\", Util.stripLeadingHyphens(\"---foo\"));\n        assertNull(Util.stripLeadingHyphens(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/UtilTest.java", "class_name": "UtilTest", "class_uri": "src/test/java/org/apache/commons/cli/UtilTest.java.UtilTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest.[void]testGetNames()", "name": "testGetNames", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetNames()", "original_string": "    @Test\n    public void testGetNames() {\n        final OptionGroup group = new OptionGroup();\n        assertFalse(group.isSelected());\n\n        group.addOption(OptionBuilder.create('a'));\n        group.addOption(OptionBuilder.create('b'));\n\n        assertNotNull(group.getNames(), \"null names\");\n        assertEquals(2, group.getNames().size());\n        assertTrue(group.getNames().contains(\"a\"));\n        assertTrue(group.getNames().contains(\"b\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "class_name": "OptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest.[void]testNoOptionsExtraArgs()", "name": "testNoOptionsExtraArgs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoOptionsExtraArgs()", "original_string": "    @Test\n    public void testNoOptionsExtraArgs() throws Exception {\n        final String[] args = {\"arg1\", \"arg2\"};\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertFalse(cl.hasOption(\"r\"), \"Confirm -r is NOT set\");\n        assertFalse(cl.hasOption(\"f\"), \"Confirm -f is NOT set\");\n        assertFalse(cl.hasOption(\"d\"), \"Confirm -d is NOT set\");\n        assertFalse(cl.hasOption(\"s\"), \"Confirm -s is NOT set\");\n        assertFalse(cl.hasOption(\"c\"), \"Confirm -c is NOT set\");\n        assertEquals(2, cl.getArgList().size(), \"Confirm TWO extra args\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "class_name": "OptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest.[void]testSingleLongOption()", "name": "testSingleLongOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSingleLongOption()", "original_string": "    @Test\n    public void testSingleLongOption() throws Exception {\n        final String[] args = {\"--file\"};\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertFalse(cl.hasOption(\"r\"), \"Confirm -r is NOT set\");\n        assertTrue(cl.hasOption(\"f\"), \"Confirm -f is set\");\n        assertFalse(cl.hasOption(\"d\"), \"Confirm -d is NOT set\");\n        assertFalse(cl.hasOption(\"s\"), \"Confirm -s is NOT set\");\n        assertFalse(cl.hasOption(\"c\"), \"Confirm -c is NOT set\");\n        assertTrue(cl.getArgList().isEmpty(), \"Confirm no extra args\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "class_name": "OptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest.[void]testSingleOption()", "name": "testSingleOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSingleOption()", "original_string": "    @Test\n    public void testSingleOption() throws Exception {\n        final String[] args = {\"-r\"};\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertTrue(cl.hasOption(\"r\"), \"Confirm -r is set\");\n        assertFalse(cl.hasOption(\"f\"), \"Confirm -f is NOT set\");\n        assertFalse(cl.hasOption(\"d\"), \"Confirm -d is NOT set\");\n        assertFalse(cl.hasOption(\"s\"), \"Confirm -s is NOT set\");\n        assertFalse(cl.hasOption(\"c\"), \"Confirm -c is NOT set\");\n        assertTrue(cl.getArgList().isEmpty(), \"Confirm no extra args\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "class_name": "OptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest.[void]testSingleOptionFromGroup()", "name": "testSingleOptionFromGroup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSingleOptionFromGroup()", "original_string": "    @Test\n    public void testSingleOptionFromGroup() throws Exception {\n        final String[] args = {\"-f\"};\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertFalse(cl.hasOption(\"r\"), \"Confirm -r is NOT set\");\n        assertTrue(cl.hasOption(\"f\"), \"Confirm -f is set\");\n        assertFalse(cl.hasOption(\"d\"), \"Confirm -d is NOT set\");\n        assertFalse(cl.hasOption(\"s\"), \"Confirm -s is NOT set\");\n        assertFalse(cl.hasOption(\"c\"), \"Confirm -c is NOT set\");\n        assertTrue(cl.getArgList().isEmpty(), \"Confirm no extra args\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "class_name": "OptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        final OptionGroup group1 = new OptionGroup();\n        group1.addOption(new Option(null, \"foo\", false, \"Foo\"));\n        group1.addOption(new Option(null, \"bar\", false, \"Bar\"));\n\n        if (!\"[--bar Bar, --foo Foo]\".equals(group1.toString())) {\n            assertEquals(\"[--foo Foo, --bar Bar]\", group1.toString());\n        }\n\n        final OptionGroup group2 = new OptionGroup();\n        group2.addOption(new Option(\"f\", \"foo\", false, \"Foo\"));\n        group2.addOption(new Option(\"b\", \"bar\", false, \"Bar\"));\n\n        if (!\"[-b Bar, -f Foo]\".equals(group2.toString())) {\n            assertEquals(\"[-f Foo, -b Bar]\", group2.toString());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "class_name": "OptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest.[void]testTwoLongOptionsFromGroup()", "name": "testTwoLongOptionsFromGroup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTwoLongOptionsFromGroup()", "original_string": "    @Test\n    public void testTwoLongOptionsFromGroup() throws Exception {\n        final String[] args = {\"--file\", \"--directory\"};\n\n        try {\n            parser.parse(options, args);\n            fail(\"two arguments from group not allowed\");\n        } catch (final AlreadySelectedException e) {\n            assertNotNull(e.getOptionGroup(), \"null option group\");\n            assertTrue(e.getOptionGroup().isSelected());\n            assertEquals(\"f\", e.getOptionGroup().getSelected(), \"selected option\");\n            assertEquals(\"d\", e.getOption().getOpt(), \"option\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "class_name": "OptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest.[void]testTwoOptionsFromDifferentGroup()", "name": "testTwoOptionsFromDifferentGroup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTwoOptionsFromDifferentGroup()", "original_string": "    @Test\n    public void testTwoOptionsFromDifferentGroup() throws Exception {\n        final String[] args = {\"-f\", \"-s\"};\n\n        final CommandLine cl = parser.parse(options, args);\n        assertFalse(cl.hasOption(\"r\"), \"Confirm -r is NOT set\");\n        assertTrue(cl.hasOption(\"f\"), \"Confirm -f is set\");\n        assertFalse(cl.hasOption(\"d\"), \"Confirm -d is NOT set\");\n        assertTrue(cl.hasOption(\"s\"), \"Confirm -s is set\");\n        assertFalse(cl.hasOption(\"c\"), \"Confirm -c is NOT set\");\n        assertTrue(cl.getArgList().isEmpty(), \"Confirm NO extra args\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "class_name": "OptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest.[void]testTwoOptionsFromGroup()", "name": "testTwoOptionsFromGroup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTwoOptionsFromGroup()", "original_string": "    @Test\n    public void testTwoOptionsFromGroup() throws Exception {\n        final String[] args = {\"-f\", \"-d\"};\n\n        try {\n            parser.parse(options, args);\n            fail(\"two arguments from group not allowed\");\n        } catch (final AlreadySelectedException e) {\n            assertNotNull(e.getOptionGroup(), \"null option group\");\n            assertTrue(e.getOptionGroup().isSelected());\n            assertEquals(\"f\", e.getOptionGroup().getSelected(), \"selected option\");\n            assertEquals(\"d\", e.getOption().getOpt(), \"option\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "class_name": "OptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest.[void]testTwoOptionsFromGroupWithProperties()", "name": "testTwoOptionsFromGroupWithProperties", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTwoOptionsFromGroupWithProperties()", "original_string": "    @Test\n    public void testTwoOptionsFromGroupWithProperties() throws Exception {\n        final String[] args = {\"-f\"};\n\n        final Properties properties = new Properties();\n        properties.put(\"d\", \"true\");\n\n        final CommandLine cl = parser.parse(options, args, properties);\n        assertTrue(cl.hasOption(\"f\"));\n        assertFalse(cl.hasOption(\"d\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "class_name": "OptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest.[void]testTwoValidLongOptions()", "name": "testTwoValidLongOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTwoValidLongOptions()", "original_string": "    @Test\n    public void testTwoValidLongOptions() throws Exception {\n        final String[] args = {\"--revision\", \"--file\"};\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertTrue(cl.hasOption(\"r\"), \"Confirm -r is set\");\n        assertTrue(cl.hasOption(\"f\"), \"Confirm -f is set\");\n        assertFalse(cl.hasOption(\"d\"), \"Confirm -d is NOT set\");\n        assertFalse(cl.hasOption(\"s\"), \"Confirm -s is NOT set\");\n        assertFalse(cl.hasOption(\"c\"), \"Confirm -c is NOT set\");\n        assertTrue(cl.getArgList().isEmpty(), \"Confirm no extra args\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "class_name": "OptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest.[void]testTwoValidOptions()", "name": "testTwoValidOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTwoValidOptions()", "original_string": "    @Test\n    public void testTwoValidOptions() throws Exception {\n        final String[] args = {\"-r\", \"-f\"};\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertTrue(cl.hasOption(\"r\"), \"Confirm -r is set\");\n        assertTrue(cl.hasOption(\"f\"), \"Confirm -f is set\");\n        assertFalse(cl.hasOption(\"d\"), \"Confirm -d is NOT set\");\n        assertFalse(cl.hasOption(\"s\"), \"Confirm -s is NOT set\");\n        assertFalse(cl.hasOption(\"c\"), \"Confirm -c is NOT set\");\n        assertTrue(cl.getArgList().isEmpty(), \"Confirm no extra args\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "class_name": "OptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest.[void]testValidLongOnlyOptions()", "name": "testValidLongOnlyOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValidLongOnlyOptions()", "original_string": "    @Test\n    public void testValidLongOnlyOptions() throws Exception {\n        final CommandLine cl1 = parser.parse(options, new String[] {\"--export\"});\n        assertTrue(cl1.hasOption(\"export\"), \"Confirm --export is set\");\n\n        final CommandLine cl2 = parser.parse(options, new String[] {\"--import\"});\n        assertTrue(cl2.hasOption(\"import\"), \"Confirm --import is set\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroupTest.java", "class_name": "OptionGroupTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroupTest.java.OptionGroupTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]getOptionValuesTest(String[],Option,OptionGroup,boolean,String[],boolean,String[],Option)", "name": "getOptionValuesTest", "arg_nums": 8, "params": [{"name": "args", "type": "String[]"}, {"name": "opt", "type": "Option"}, {"name": "optionGroup", "type": "OptionGroup"}, {"name": "optDep", "type": "boolean"}, {"name": "optValue", "type": "String[]"}, {"name": "grpDep", "type": "boolean"}, {"name": "grpValue", "type": "String[]"}, {"name": "grpOpt", "type": "Option"}], "return_type": "void", "signature": "@ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createOptionValuesParameters\")\n    public void getOptionValuesTest(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep,\n                                    final String[] optValue, final boolean grpDep, final String[] grpValue, final Option grpOpt)", "original_string": "    @ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createOptionValuesParameters\")\n    public void getOptionValuesTest(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep,\n                                    final String[] optValue, final boolean grpDep, final String[] grpValue, final Option grpOpt) throws ParseException {\n        final Options options = new Options().addOptionGroup(optionGroup);\n        final List<Option> handler = new ArrayList<>();\n        final CommandLine commandLine = DefaultParser.builder().setDeprecatedHandler(handler::add).build().parse(options, args);\n        final OptionGroup otherGroup = new OptionGroup().addOption(Option.builder(\"o\").longOpt(\"other\").hasArg().build())\n                .addOption(Option.builder().option(\"p\").longOpt(\"part\").hasArg().build());\n        final OptionGroup nullGroup = null;\n\n        // test char option arg\n        assertArrayEquals(optValue, commandLine.getOptionValues(asChar(opt)));\n        checkHandler(optDep, handler, opt);\n\n        // test short option arg\n        assertArrayEquals(optValue, commandLine.getOptionValues(opt.getOpt()));\n        checkHandler(optDep, handler, opt);\n\n        // test long option arg\n        assertArrayEquals(optValue, commandLine.getOptionValues(opt.getLongOpt()));\n        checkHandler(optDep, handler, opt);\n\n        // test Option arg\n        assertArrayEquals(optValue, commandLine.getOptionValues(opt));\n        checkHandler(optDep, handler, opt);\n\n\n        // test OptionGroup arg\n        assertArrayEquals(grpValue, commandLine.getOptionValues(optionGroup));\n        checkHandler(grpDep, handler, grpOpt);\n\n        // test not an option\n        assertNull(commandLine.getOptionValues(\"Nope\"));\n        checkHandler(false, handler, opt);\n\n        // test other group arg\n        assertNull(commandLine.getOptionValues(otherGroup));\n        checkHandler(false, handler, grpOpt);\n\n        // test null group arg\n        assertNull(commandLine.getOptionValues(nullGroup));\n        checkHandler(false, handler, grpOpt);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createOptionValuesParameters\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@ParameterizedTest(name = \"{0}, {1}\")", "@MethodSource(\"createOptionValuesParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest for get option values with and without default values.  Verifies that deprecated options only report as\ndeprecated once.\n@param args the argument strings to parse.\n@param opt the option to check for values with.\n@param optionGroup the option group to check for values with.\n@param optDep {@code true} if the opt is deprecated.\n@param optValue  The value expected from opt.\n@param grpDep {@code true} if the group is deprecated.\n@param grpValue the value expected from the group.\n@param grpOpt the option that is expected to be processed by the group.\n@throws ParseException on parse error.\n"}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]getOptionValueTest(String[],Option,OptionGroup,boolean,String,boolean,String,Option)", "name": "getOptionValueTest", "arg_nums": 8, "params": [{"name": "args", "type": "String[]"}, {"name": "opt", "type": "Option"}, {"name": "optionGroup", "type": "OptionGroup"}, {"name": "optDep", "type": "boolean"}, {"name": "optValue", "type": "String"}, {"name": "grpDep", "type": "boolean"}, {"name": "grpValue", "type": "String"}, {"name": "grpOpt", "type": "Option"}], "return_type": "void", "signature": "@ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createOptionValueParameters\")\n    public void getOptionValueTest(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep,\n                                   final String optValue, final boolean grpDep, final String grpValue, final Option grpOpt)", "original_string": "    @ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createOptionValueParameters\")\n    public void getOptionValueTest(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep,\n                                   final String optValue, final boolean grpDep, final String grpValue, final Option grpOpt) throws ParseException {\n        final Options options = new Options().addOptionGroup(optionGroup);\n        final List<Option> handler = new ArrayList<>();\n        final CommandLine commandLine = DefaultParser.builder().setDeprecatedHandler(handler::add).build().parse(options, args);\n        final Supplier<String> thinger = () -> \"thing\";\n        final OptionGroup otherGroup = new OptionGroup().addOption(Option.builder(\"o\").longOpt(\"other\").hasArg().build())\n                .addOption(Option.builder().option(\"p\").longOpt(\"part\").hasArg().build());\n        final OptionGroup nullGroup = null;\n\n        // test char option\n        assertEquals(optValue, commandLine.getOptionValue(asChar(opt)));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(asChar(opt), \"thing\"));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(asChar(opt), thinger));\n        checkHandler(optDep, handler, opt);\n\n        // test short option arg\n        assertEquals(optValue, commandLine.getOptionValue(opt.getOpt()));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getOpt(), \"thing\"));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getOpt(), thinger));\n        checkHandler(optDep, handler, opt);\n\n        // test long option arg\n        assertEquals(optValue, commandLine.getOptionValue(opt.getLongOpt()));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getLongOpt(), \"thing\"));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getLongOpt(), thinger));\n        checkHandler(optDep, handler, opt);\n\n        // test Option arg\n        assertEquals(optValue, commandLine.getOptionValue(opt));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt, \"thing\"));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt, thinger));\n        checkHandler(optDep, handler, opt);\n\n        // test option group  arg\n        assertEquals(grpValue, commandLine.getOptionValue(optionGroup));\n        checkHandler(grpDep, handler, grpOpt);\n\n        assertEquals(grpValue == null ? \"thing\" : grpValue, commandLine.getOptionValue(optionGroup, \"thing\"));\n        checkHandler(grpDep, handler, grpOpt);\n\n        assertEquals(grpValue == null ? \"thing\" : grpValue, commandLine.getOptionValue(optionGroup, thinger));\n        checkHandler(grpDep, handler, grpOpt);\n\n        // test other group arg\n        assertNull(commandLine.getOptionValue(otherGroup));\n        checkHandler(false, handler, grpOpt);\n\n        assertEquals(\"thing\", commandLine.getOptionValue(otherGroup, \"thing\"));\n        checkHandler(false, handler, grpOpt);\n\n        assertEquals(\"thing\", commandLine.getOptionValue(otherGroup, thinger));\n        checkHandler(false, handler, grpOpt);\n\n        // test null Group arg\n        assertNull(commandLine.getOptionValue(nullGroup));\n        checkHandler(false, handler, grpOpt);\n\n        assertEquals(\"thing\", commandLine.getOptionValue(nullGroup, \"thing\"));\n        checkHandler(false, handler, grpOpt);\n\n        assertEquals(\"thing\", commandLine.getOptionValue(nullGroup, thinger));\n        checkHandler(false, handler, grpOpt);\n\n        // test not an option\n        assertNull(commandLine.getOptionValue(\"Nope\"));\n        checkHandler(false, handler, opt);\n\n        assertEquals(\"thing\", commandLine.getOptionValue(\"Nope\", \"thing\"));\n        checkHandler(false, handler, opt);\n\n        assertEquals(\"thing\", commandLine.getOptionValue(\"Nope\", thinger));\n        checkHandler(false, handler, opt);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createOptionValueParameters\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@ParameterizedTest(name = \"{0}, {1}\")", "@MethodSource(\"createOptionValueParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest for get option value with and without default values.  Verifies that deprecated options only report as\ndeprecated once.\n@param args the argument strings to parse.\n@param opt the option to check for values with.\n@param optionGroup the option group to check for values with.\n@param optDep {@code true} if the opt is deprecated.\n@param optValue  The value expected from opt.\n@param grpDep {@code true} if the group is deprecated.\n@param grpValue the value expected from the group.\n@param grpOpt the option that is expected to be processed by the group.\n@throws ParseException on parse error.\n"}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]getParsedOptionValueTest(String[],Option,OptionGroup,boolean,Integer,boolean,Integer,Option)", "name": "getParsedOptionValueTest", "arg_nums": 8, "params": [{"name": "args", "type": "String[]"}, {"name": "opt", "type": "Option"}, {"name": "optionGroup", "type": "OptionGroup"}, {"name": "optDep", "type": "boolean"}, {"name": "optValue", "type": "Integer"}, {"name": "grpDep", "type": "boolean"}, {"name": "grpValue", "type": "Integer"}, {"name": "grpOpt", "type": "Option"}], "return_type": "void", "signature": "@ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createParsedOptionValueParameters\")\n    public void getParsedOptionValueTest(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep,\n                                         final Integer optValue, final boolean grpDep, final Integer grpValue, final Option grpOpt)", "original_string": "    @ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createParsedOptionValueParameters\")\n    public void getParsedOptionValueTest(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep,\n                                         final Integer optValue, final boolean grpDep, final Integer grpValue, final Option grpOpt) throws ParseException {\n        final Options options = new Options().addOptionGroup(optionGroup);\n        final List<Option> handler = new ArrayList<>();\n        final CommandLine commandLine = DefaultParser.builder().setDeprecatedHandler(handler::add).build().parse(options, args);\n        final Supplier<Integer> thinger = () -> 2;\n        final OptionGroup otherGroup = new OptionGroup().addOption(Option.builder(\"o\").longOpt(\"other\").hasArg().build())\n                .addOption(Option.builder().option(\"p\").longOpt(\"part\").hasArg().build());\n        final OptionGroup nullGroup = null;\n        final Integer thing = 2;\n\n        // test char option arg\n        assertEquals(optValue, commandLine.getParsedOptionValue(asChar(opt)));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(asChar(opt), thing));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(asChar(opt), thinger));\n        checkHandler(optDep, handler, opt);\n\n        // test short option arg\n        assertEquals(optValue, commandLine.getParsedOptionValue(opt.getOpt()));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(opt.getOpt(), thing));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(opt.getOpt(), thinger));\n        checkHandler(optDep, handler, opt);\n\n        // test long option arg\n        assertEquals(optValue, commandLine.getParsedOptionValue(opt.getLongOpt()));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(opt.getLongOpt(), thing));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(opt.getLongOpt(), thinger));\n        checkHandler(optDep, handler, opt);\n\n\n        // test Option arg\n        assertEquals(optValue, commandLine.getParsedOptionValue(opt));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(opt, thing));\n        checkHandler(optDep, handler, opt);\n\n        assertEquals(optValue == null ? thing : optValue, commandLine.getParsedOptionValue(opt, thinger));\n        checkHandler(optDep, handler, opt);\n\n        // test OptionGroup arg\n        assertEquals(grpValue, commandLine.getParsedOptionValue(optionGroup));\n        checkHandler(grpDep, handler, grpOpt);\n\n        assertEquals(grpValue == null ? thing : grpValue, commandLine.getParsedOptionValue(optionGroup, thing));\n        checkHandler(grpDep, handler, grpOpt);\n\n        assertEquals(grpValue == null ? thing : grpValue, commandLine.getParsedOptionValue(optionGroup, thinger));\n        checkHandler(grpDep, handler, grpOpt);\n\n        // test other Group arg\n        assertNull(commandLine.getParsedOptionValue(otherGroup));\n        checkHandler(false, handler, grpOpt);\n\n        assertEquals(thing, commandLine.getParsedOptionValue(otherGroup, thing));\n        checkHandler(false, handler, grpOpt);\n\n        assertEquals(thing, commandLine.getParsedOptionValue(otherGroup, thinger));\n        checkHandler(false, handler, grpOpt);\n\n        // test null Group arg\n        assertNull(commandLine.getParsedOptionValue(nullGroup));\n        checkHandler(false, handler, grpOpt);\n\n        assertEquals(thing, commandLine.getParsedOptionValue(nullGroup, thing));\n        checkHandler(false, handler, grpOpt);\n\n        assertEquals(thing, commandLine.getParsedOptionValue(nullGroup, thinger));\n        checkHandler(false, handler, grpOpt);\n\n\n        // test not an option\n        assertNull(commandLine.getParsedOptionValue(\"Nope\"));\n        checkHandler(false, handler, opt);\n\n        assertEquals(thing, commandLine.getParsedOptionValue(\"Nope\", thing));\n        checkHandler(false, handler, opt);\n\n        assertEquals(thing, commandLine.getParsedOptionValue(\"Nope\", thinger));\n        checkHandler(false, handler, opt);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createParsedOptionValueParameters\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@ParameterizedTest(name = \"{0}, {1}\")", "@MethodSource(\"createParsedOptionValueParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]hasOptionNoDeprecationHandlerTest(String[],Option,OptionGroup,boolean,boolean,boolean,boolean,Option)", "name": "hasOptionNoDeprecationHandlerTest", "arg_nums": 8, "params": [{"name": "args", "type": "String[]"}, {"name": "opt", "type": "Option"}, {"name": "optionGroup", "type": "OptionGroup"}, {"name": "optDep", "type": "boolean"}, {"name": "has", "type": "boolean"}, {"name": "grpDep", "type": "boolean"}, {"name": "hasGrp", "type": "boolean"}, {"name": "grpOpt", "type": "Option"}], "return_type": "void", "signature": "@ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createHasOptionParameters\")\n    public void hasOptionNoDeprecationHandlerTest(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep,\n                              final boolean has, final boolean grpDep, final boolean hasGrp, final Option grpOpt)", "original_string": "    @ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createHasOptionParameters\")\n    public void hasOptionNoDeprecationHandlerTest(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep,\n                              final boolean has, final boolean grpDep, final boolean hasGrp, final Option grpOpt) throws ParseException {\n        final Options options = new Options().addOptionGroup(optionGroup);\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final CommandLine commandLine = DefaultParser.builder().build().parse(options, args);\n        final PrintStream ps = System.out;\n        try {\n            System.setOut(new PrintStream(baos));\n\n            // test char option arg\n            assertEquals(has, commandLine.hasOption(asChar(opt)));\n            assertWritten(optDep, baos);\n\n\n            // test short option arg\n            assertEquals(has, commandLine.hasOption(opt.getOpt()));\n            assertWritten(optDep, baos);\n\n            // test long option arg\n            assertEquals(has, commandLine.hasOption(opt.getLongOpt()));\n            assertWritten(optDep, baos);\n\n            // test Option arg\n            assertEquals(has, commandLine.hasOption(opt));\n            assertWritten(optDep, baos);\n\n            // test OptionGroup arg\n            assertEquals(hasGrp, commandLine.hasOption(optionGroup));\n            assertWritten(grpDep, baos);\n\n            // test not an option\n            assertFalse(commandLine.hasOption(\"Nope\"));\n            assertWritten(false, baos);\n        } finally {\n            System.setOut(ps);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createHasOptionParameters\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@ParameterizedTest(name = \"{0}, {1}\")", "@MethodSource(\"createHasOptionParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the hasOption calls.\n@param args the argument strings to parse.\n@param opt the option to check for values with.\n@param optionGroup the option group to check for values with.\n@param optDep {@code true} if the opt is deprecated.\n@param has {@code true} if the opt is present.\n@param grpDep {@code true} if the group is deprecated.\n@param hasGrp {@code true} if the group is present.\n@param grpOpt the option that is expected to be processed by the group.\n@throws ParseException on parsing error.\n"}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]hasOptionNullDeprecationHandlerTest(String[],Option,OptionGroup,boolean,boolean,boolean,boolean,Option)", "name": "hasOptionNullDeprecationHandlerTest", "arg_nums": 8, "params": [{"name": "args", "type": "String[]"}, {"name": "opt", "type": "Option"}, {"name": "optionGroup", "type": "OptionGroup"}, {"name": "optDep", "type": "boolean"}, {"name": "has", "type": "boolean"}, {"name": "grpDep", "type": "boolean"}, {"name": "hasGrp", "type": "boolean"}, {"name": "grpOpt", "type": "Option"}], "return_type": "void", "signature": "@ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createHasOptionParameters\")\n    public void hasOptionNullDeprecationHandlerTest(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep,\n                                                  final boolean has, final boolean grpDep, final boolean hasGrp, final Option grpOpt)", "original_string": "    @ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createHasOptionParameters\")\n    public void hasOptionNullDeprecationHandlerTest(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep,\n                                                  final boolean has, final boolean grpDep, final boolean hasGrp, final Option grpOpt) throws ParseException {\n        final Options options = new Options().addOptionGroup(optionGroup);\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final CommandLine commandLine = DefaultParser.builder().setDeprecatedHandler(null).build().parse(options, args);\n        final PrintStream ps = System.out;\n        try {\n            System.setOut(new PrintStream(baos));\n\n            // test char option arg\n            assertEquals(has, commandLine.hasOption(asChar(opt)));\n            assertWritten(false, baos);\n\n\n            // test short option arg\n            assertEquals(has, commandLine.hasOption(opt.getOpt()));\n            assertWritten(false, baos);\n\n            // test long option arg\n            assertEquals(has, commandLine.hasOption(opt.getLongOpt()));\n            assertWritten(false, baos);\n\n            // test Option arg\n            assertEquals(has, commandLine.hasOption(opt));\n            assertWritten(false, baos);\n\n            // test OptionGroup arg\n            assertEquals(hasGrp, commandLine.hasOption(optionGroup));\n            assertWritten(false, baos);\n\n            // test not an option\n            assertFalse(commandLine.hasOption(\"Nope\"));\n            assertWritten(false, baos);\n        } finally {\n            System.setOut(ps);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createHasOptionParameters\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@ParameterizedTest(name = \"{0}, {1}\")", "@MethodSource(\"createHasOptionParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the hasOption calls.\n@param args the argument strings to parse.\n@param opt the option to check for values with.\n@param optionGroup the option group to check for values with.\n@param optDep {@code true} if the opt is deprecated.\n@param has {@code true} if the opt is present.\n@param grpDep {@code true} if the group is deprecated.\n@param hasGrp {@code true} if the group is present.\n@param grpOpt the option that is expected to be processed by the group.\n@throws ParseException on parsing error.\n"}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]hasOptionTest(String[],Option,OptionGroup,boolean,boolean,boolean,boolean,Option)", "name": "hasOptionTest", "arg_nums": 8, "params": [{"name": "args", "type": "String[]"}, {"name": "opt", "type": "Option"}, {"name": "optionGroup", "type": "OptionGroup"}, {"name": "optDep", "type": "boolean"}, {"name": "has", "type": "boolean"}, {"name": "grpDep", "type": "boolean"}, {"name": "hasGrp", "type": "boolean"}, {"name": "grpOpt", "type": "Option"}], "return_type": "void", "signature": "@ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createHasOptionParameters\")\n    public void hasOptionTest(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep,\n                              final boolean has, final boolean grpDep, final boolean hasGrp, final Option grpOpt)", "original_string": "    @ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createHasOptionParameters\")\n    public void hasOptionTest(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep,\n                              final boolean has, final boolean grpDep, final boolean hasGrp, final Option grpOpt) throws ParseException {\n        final Options options = new Options().addOptionGroup(optionGroup);\n        final List<Option> handler = new ArrayList<>();\n        final CommandLine commandLine = DefaultParser.builder().setDeprecatedHandler(handler::add).build().parse(options, args);\n        final OptionGroup otherGroup = new OptionGroup().addOption(Option.builder(\"o\").longOpt(\"other\").hasArg().build())\n                .addOption(Option.builder().option(\"p\").longOpt(\"part\").hasArg().build());\n        final OptionGroup nullGroup = null;\n\n        // test char option arg\n        assertEquals(has, commandLine.hasOption(asChar(opt)));\n        checkHandler(optDep, handler, opt);\n\n        // test short option arg\n        assertEquals(has, commandLine.hasOption(opt.getOpt()));\n        checkHandler(optDep, handler, opt);\n\n        // test long option arg\n        assertEquals(has, commandLine.hasOption(opt.getLongOpt()));\n        checkHandler(optDep, handler, opt);\n\n        // test Option arg\n        assertEquals(has, commandLine.hasOption(opt));\n        checkHandler(optDep, handler, opt);\n\n        // test OptionGroup arg\n        assertEquals(hasGrp, commandLine.hasOption(optionGroup));\n        checkHandler(grpDep, handler, grpOpt);\n\n        // test other group arg\n        assertFalse(commandLine.hasOption(otherGroup));\n        checkHandler(false, handler, grpOpt);\n\n\n        // test null group arg\n        assertFalse(commandLine.hasOption(nullGroup));\n        checkHandler(false, handler, grpOpt);\n\n        // test not an option\n        assertFalse(commandLine.hasOption(\"Nope\"));\n        checkHandler(false, handler, opt);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createHasOptionParameters\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@ParameterizedTest(name = \"{0}, {1}\")", "@MethodSource(\"createHasOptionParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the hasOption calls.\n@param args the argument strings to parse.\n@param opt the option to check for values with.\n@param optionGroup the option group to check for values with.\n@param optDep {@code true} if the opt is deprecated.\n@param has {@code true} if the opt is present.\n@param grpDep {@code true} if the group is deprecated.\n@param hasGrp {@code true} if the group is present.\n@param grpOpt the option that is expected to be processed by the group.\n@throws ParseException on parsing error.\n"}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]noDeprecationHandlerTest(String[],Option,OptionGroup,boolean,String,boolean,String,Option)", "name": "noDeprecationHandlerTest", "arg_nums": 8, "params": [{"name": "args", "type": "String[]"}, {"name": "opt", "type": "Option"}, {"name": "optionGroup", "type": "OptionGroup"}, {"name": "optDep", "type": "boolean"}, {"name": "optValue", "type": "String"}, {"name": "grpDep", "type": "boolean"}, {"name": "grpValue", "type": "String"}, {"name": "grpOpt", "type": "Option"}], "return_type": "void", "signature": "@ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createOptionValueParameters\")\n    public void noDeprecationHandlerTest(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep,\n                                   final String optValue, final boolean grpDep, final String grpValue, final Option grpOpt)", "original_string": "    @ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createOptionValueParameters\")\n    public void noDeprecationHandlerTest(final String[] args, final Option opt, final OptionGroup optionGroup, final boolean optDep,\n                                   final String optValue, final boolean grpDep, final String grpValue, final Option grpOpt) throws ParseException {\n        final Options options = new Options().addOptionGroup(optionGroup);\n        final CommandLine commandLine = DefaultParser.builder().build().parse(options, args);\n        final Supplier<String> thinger = () -> \"thing\";\n        final Supplier<String> nullSupplier = null;\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final PrintStream ps = System.out;\n        try {\n            System.setOut(new PrintStream(baos));\n\n            final OptionGroup otherGroup = new OptionGroup().addOption(Option.builder(\"o\").longOpt(\"other\").hasArg().build())\n                    .addOption(Option.builder().option(\"p\").longOpt(\"part\").hasArg().build());\n            final OptionGroup nullGroup = null;\n\n            // test char option\n            assertEquals(optValue, commandLine.getOptionValue(asChar(opt)));\n            assertWritten(optDep, baos);\n\n            assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(asChar(opt), \"thing\"));\n            assertWritten(optDep, baos);\n\n            assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(asChar(opt), thinger));\n            assertWritten(optDep, baos);\n\n            assertEquals(optValue, commandLine.getOptionValue(asChar(opt), nullSupplier));\n            assertWritten(optDep, baos);\n\n            // test short option arg\n            assertEquals(optValue, commandLine.getOptionValue(opt.getOpt()));\n            assertWritten(optDep, baos);\n\n            assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getOpt(), \"thing\"));\n            assertWritten(optDep, baos);\n\n            assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getOpt(), thinger));\n            assertWritten(optDep, baos);\n\n            assertEquals(optValue, commandLine.getOptionValue(opt.getOpt(), nullSupplier));\n            assertWritten(optDep, baos);\n\n            // test long option arg\n            assertEquals(optValue, commandLine.getOptionValue(opt.getLongOpt()));\n            assertWritten(optDep, baos);\n\n            assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getLongOpt(), \"thing\"));\n            assertWritten(optDep, baos);\n\n            assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt.getLongOpt(), thinger));\n            assertWritten(optDep, baos);\n\n            assertEquals(optValue, commandLine.getOptionValue(opt.getLongOpt(), nullSupplier));\n            assertWritten(optDep, baos);\n\n            // test Option arg\n            assertEquals(optValue, commandLine.getOptionValue(opt));\n            assertWritten(optDep, baos);\n\n            assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt, \"thing\"));\n            assertWritten(optDep, baos);\n\n            assertEquals(optValue == null ? \"thing\" : optValue, commandLine.getOptionValue(opt, thinger));\n            assertWritten(optDep, baos);\n\n            assertEquals(optValue, commandLine.getOptionValue(opt, nullSupplier));\n            assertWritten(optDep, baos);\n\n            // test optionGroup  arg\n            assertEquals(grpValue, commandLine.getOptionValue(optionGroup));\n            assertWritten(grpDep, baos);\n\n            assertEquals(grpValue == null ? \"thing\" : grpValue, commandLine.getOptionValue(optionGroup, \"thing\"));\n            assertWritten(grpDep, baos);\n\n            assertEquals(grpValue == null ? \"thing\" : grpValue, commandLine.getOptionValue(optionGroup, thinger));\n            assertWritten(grpDep, baos);\n\n            assertEquals(grpValue, commandLine.getOptionValue(optionGroup, nullSupplier));\n            assertWritten(grpDep, baos);\n\n            // test other group arg\n            assertNull(commandLine.getOptionValue(otherGroup));\n            assertWritten(false, baos);\n\n            assertEquals(\"thing\", commandLine.getOptionValue(otherGroup, \"thing\"));\n            assertWritten(false, baos);\n\n            assertEquals(\"thing\", commandLine.getOptionValue(otherGroup, thinger));\n            assertWritten(false, baos);\n\n            assertNull(commandLine.getOptionValue(otherGroup, nullSupplier));\n            assertWritten(false, baos);\n\n            // test null Group arg\n            assertNull(commandLine.getOptionValue(nullGroup));\n            assertWritten(false, baos);\n\n            assertEquals(\"thing\", commandLine.getOptionValue(nullGroup, \"thing\"));\n            assertWritten(false, baos);\n\n            assertEquals(\"thing\", commandLine.getOptionValue(nullGroup, thinger));\n            assertWritten(false, baos);\n\n            assertNull(commandLine.getOptionValue(nullGroup, nullSupplier));\n            assertWritten(false, baos);\n\n            // test not an option\n            assertNull(commandLine.getOptionValue(\"Nope\"));\n            assertWritten(false, baos);\n\n            assertEquals(\"thing\", commandLine.getOptionValue(\"Nope\", \"thing\"));\n            assertWritten(false, baos);\n\n            assertEquals(\"thing\", commandLine.getOptionValue(\"Nope\", thinger));\n            assertWritten(false, baos);\n\n            assertNull(commandLine.getOptionValue(\"Nope\", nullSupplier));\n            assertWritten(false, baos);\n        } finally {\n            System.setOut(ps);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@ParameterizedTest(name = \"{0}, {1}\")\n    @MethodSource(\"createOptionValueParameters\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@ParameterizedTest(name = \"{0}, {1}\")", "@MethodSource(\"createOptionValueParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]testBadGetParsedOptionValue()", "name": "testBadGetParsedOptionValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBadGetParsedOptionValue()", "original_string": "    @Test\n    public void testBadGetParsedOptionValue() throws Exception {\n\n        final Options options = new Options();\n        options.addOption(Option.builder(\"i\").hasArg().type(Number.class).build());\n        options.addOption(Option.builder(\"c\").hasArg().converter(s -> Count.valueOf(s.toUpperCase())).build());\n\n\n        final CommandLineParser parser = new DefaultParser();\n        final CommandLine cmd = parser.parse(options, new String[] {\"-i\", \"foo\", \"-c\", \"bar\"});\n\n        assertEquals(NumberFormatException.class, assertThrows(ParseException.class, () -> cmd.getParsedOptionValue(\"i\")).getCause().getClass());\n        assertEquals(IllegalArgumentException.class, assertThrows(ParseException.class, () -> cmd.getParsedOptionValue(\"c\")).getCause().getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]testBuilder()", "name": "testBuilder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilder()", "original_string": "    @Test\n    public void testBuilder() {\n        final CommandLine.Builder builder = new CommandLine.Builder();\n        builder.addArg(\"foo\").addArg(\"bar\");\n        builder.addOption(Option.builder(\"T\").build());\n        final CommandLine cmd = builder.build();\n\n        assertEquals(\"foo\", cmd.getArgs()[0]);\n        assertEquals(\"bar\", cmd.getArgList().get(1));\n        assertEquals(\"T\", cmd.getOptions()[0].getOpt());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]testBuilderNullArgs()", "name": "testBuilderNullArgs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilderNullArgs()", "original_string": "    @Test\n    public void testBuilderNullArgs() {\n        final CommandLine.Builder builder = new CommandLine.Builder();\n        builder.addArg(null).addArg(null);\n        builder.addOption(Option.builder(\"T\").build());\n        final CommandLine cmd = builder.build();\n\n        assertEquals(0, cmd.getArgs().length);\n        assertEquals(\"T\", cmd.getOptions()[0].getOpt());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]testBuilderNullOption()", "name": "testBuilderNullOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilderNullOption()", "original_string": "    @Test\n    public void testBuilderNullOption() {\n        final CommandLine.Builder builder = new CommandLine.Builder();\n        builder.addArg(\"foo\").addArg(\"bar\");\n        builder.addOption(null);\n        builder.addOption(null);\n        builder.addOption(null);\n        final CommandLine cmd = builder.build();\n\n        assertEquals(\"foo\", cmd.getArgs()[0]);\n        assertEquals(\"bar\", cmd.getArgList().get(1));\n        assertEquals(0, cmd.getOptions().length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]testGetOptionProperties()", "name": "testGetOptionProperties", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOptionProperties()", "original_string": "    @Test\n    public void testGetOptionProperties() throws Exception {\n        final String[] args = {\"-Dparam1=value1\", \"-Dparam2=value2\", \"-Dparam3\", \"-Dparam4=value4\", \"-D\", \"--property\", \"foo=bar\"};\n\n        final Options options = new Options();\n        options.addOption(Option.builder(\"D\").valueSeparator().optionalArg(true).numberOfArgs(2).build());\n        options.addOption(Option.builder().valueSeparator().numberOfArgs(2).longOpt(\"property\").build());\n\n        final Parser parser = new GnuParser();\n        final CommandLine cl = parser.parse(options, args);\n\n        final Properties props = cl.getOptionProperties(\"D\");\n        assertNotNull(props, \"null properties\");\n        assertEquals(4, props.size(), \"number of properties in \" + props);\n        assertEquals(\"value1\", props.getProperty(\"param1\"), \"property 1\");\n        assertEquals(\"value2\", props.getProperty(\"param2\"), \"property 2\");\n        assertEquals(\"true\", props.getProperty(\"param3\"), \"property 3\");\n        assertEquals(\"value4\", props.getProperty(\"param4\"), \"property 4\");\n\n        assertEquals(\"bar\", cl.getOptionProperties(\"property\").getProperty(\"foo\"), \"property with long format\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]testGetOptionPropertiesWithOption()", "name": "testGetOptionPropertiesWithOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOptionPropertiesWithOption()", "original_string": "    @Test\n    public void testGetOptionPropertiesWithOption() throws Exception {\n        final String[] args = {\"-Dparam1=value1\", \"-Dparam2=value2\", \"-Dparam3\", \"-Dparam4=value4\", \"-D\", \"--property\", \"foo=bar\"};\n\n        final Options options = new Options();\n        final Option optionD = Option.builder(\"D\").valueSeparator().numberOfArgs(2).optionalArg(true).build();\n        final Option optionProperty = Option.builder().valueSeparator().numberOfArgs(2).longOpt(\"property\").build();\n        options.addOption(optionD);\n        options.addOption(optionProperty);\n\n        final Parser parser = new GnuParser();\n        final CommandLine cl = parser.parse(options, args);\n\n        final Properties props = cl.getOptionProperties(optionD);\n        assertNotNull(props, \"null properties\");\n        assertEquals(4, props.size(), \"number of properties in \" + props);\n        assertEquals(\"value1\", props.getProperty(\"param1\"), \"property 1\");\n        assertEquals(\"value2\", props.getProperty(\"param2\"), \"property 2\");\n        assertEquals(\"true\", props.getProperty(\"param3\"), \"property 3\");\n        assertEquals(\"value4\", props.getProperty(\"param4\"), \"property 4\");\n\n        assertEquals(\"bar\", cl.getOptionProperties(optionProperty).getProperty(\"foo\"), \"property with long format\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]testGetOptionsBuilder()", "name": "testGetOptionsBuilder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOptionsBuilder()", "original_string": "    @Test\n    public void testGetOptionsBuilder() {\n        final CommandLine cmd = CommandLine.builder().build();\n        assertNotNull(cmd.getOptions());\n        assertEquals(0, cmd.getOptions().length);\n\n        cmd.addOption(null);\n        cmd.addOption(new Option(\"a\", null));\n        cmd.addOption(new Option(\"b\", null));\n        cmd.addOption(new Option(\"c\", null));\n\n        assertEquals(3, cmd.getOptions().length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]testGetOptionsCtor()", "name": "testGetOptionsCtor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOptionsCtor()", "original_string": "    @Test\n    public void testGetOptionsCtor() {\n        final CommandLine cmd = new CommandLine();\n        assertNotNull(cmd.getOptions());\n        assertEquals(0, cmd.getOptions().length);\n\n        cmd.addOption(new Option(\"a\", null));\n        cmd.addOption(new Option(\"b\", null));\n        cmd.addOption(new Option(\"c\", null));\n        cmd.addOption(null);\n\n        assertEquals(3, cmd.getOptions().length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest.[void]testNullOption()", "name": "testNullOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullOption()", "original_string": "    @Test\n    public void testNullOption() throws Exception {\n        final Options options = new Options();\n        final Option optI = Option.builder(\"i\").hasArg().type(Number.class).build();\n        final Option optF = Option.builder(\"f\").hasArg().build();\n        options.addOption(optI);\n        options.addOption(optF);\n        final CommandLineParser parser = new DefaultParser();\n        final CommandLine cmd = parser.parse(options, new String[] {\"-i\", \"123\", \"-f\", \"foo\"});\n        assertNull(cmd.getOptionValue((Option) null));\n        assertNull(cmd.getParsedOptionValue((Option) null));\n        assertNull(cmd.getOptionValue((OptionGroup) null));\n        assertNull(cmd.getParsedOptionValue((OptionGroup) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLineTest.java", "class_name": "CommandLineTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLineTest.java.CommandLineTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java.OptionGroup_toStringTest.[void]testToStringWithShortOptions()", "name": "testToStringWithShortOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithShortOptions()", "original_string": "    @Test\n    public void testToStringWithShortOptions() {\n        optionGroup.addOption(new Option(\"f\", \"foo\", false, \"Foo\"));\n        optionGroup.addOption(new Option(\"b\", \"bar\", false, \"Bar\"));\n\n        assertEquals(\"[-f Foo, -b Bar]\", optionGroup.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java", "class_name": "OptionGroup_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java.OptionGroup_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java.OptionGroup_toStringTest.[void]testToStringWithLongOptions()", "name": "testToStringWithLongOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithLongOptions()", "original_string": "    @Test\n    public void testToStringWithLongOptions() {\n        optionGroup.addOption(new Option(null, \"foo\", false, \"Foo\"));\n        optionGroup.addOption(new Option(null, \"bar\", false, \"Bar\"));\n\n        assertEquals(\"[--foo Foo, --bar Bar]\", optionGroup.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java", "class_name": "OptionGroup_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java.OptionGroup_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java.OptionGroup_toStringTest.[void]testToStringWithMixedOptions()", "name": "testToStringWithMixedOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithMixedOptions()", "original_string": "    @Test\n    public void testToStringWithMixedOptions() {\n        optionGroup.addOption(new Option(\"f\", \"foo\", false, \"Foo\"));\n        optionGroup.addOption(new Option(null, \"bar\", false, \"Bar\"));\n\n        assertEquals(\"[-f Foo, --bar Bar]\", optionGroup.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java", "class_name": "OptionGroup_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java.OptionGroup_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java.OptionGroup_toStringTest.[void]testToStringWithNoDescription()", "name": "testToStringWithNoDescription", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithNoDescription()", "original_string": "    @Test\n    public void testToStringWithNoDescription() {\n        optionGroup.addOption(new Option(\"f\", \"foo\", false, null));\n        optionGroup.addOption(new Option(null, \"bar\", false, null));\n\n        assertEquals(\"[-f, --bar]\", optionGroup.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java", "class_name": "OptionGroup_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java.OptionGroup_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java.OptionGroup_toStringTest.[void]testToStringWithEmptyGroup()", "name": "testToStringWithEmptyGroup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithEmptyGroup()", "original_string": "    @Test\n    public void testToStringWithEmptyGroup() {\n        assertEquals(\"[]\", optionGroup.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java", "class_name": "OptionGroup_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroup_toStringTest.java.OptionGroup_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testAmbiguousLongWithoutEqualSingleDash()", "name": "testAmbiguousLongWithoutEqualSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testAmbiguousLongWithoutEqualSingleDash()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testAmbiguousLongWithoutEqualSingleDash2()", "name": "testAmbiguousLongWithoutEqualSingleDash2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testAmbiguousLongWithoutEqualSingleDash2()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testAmbiguousLongWithoutEqualSingleDash2() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testAmbiguousPartialLongOption1()", "name": "testAmbiguousPartialLongOption1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testAmbiguousPartialLongOption1()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testAmbiguousPartialLongOption1() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testAmbiguousPartialLongOption2()", "name": "testAmbiguousPartialLongOption2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testAmbiguousPartialLongOption2()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testAmbiguousPartialLongOption2() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testAmbiguousPartialLongOption3()", "name": "testAmbiguousPartialLongOption3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testAmbiguousPartialLongOption3()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testAmbiguousPartialLongOption3() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testAmbiguousPartialLongOption4()", "name": "testAmbiguousPartialLongOption4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testAmbiguousPartialLongOption4()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testAmbiguousPartialLongOption4() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testBursting()", "name": "testBursting", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testBursting()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testBursting() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testDoubleDash2()", "name": "testDoubleDash2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testDoubleDash2()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testDoubleDash2() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testLongOptionWithEqualsQuoteHandling()", "name": "testLongOptionWithEqualsQuoteHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testLongOptionWithEqualsQuoteHandling()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testLongOptionWithEqualsQuoteHandling() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testLongWithEqualDoubleDash()", "name": "testLongWithEqualDoubleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testLongWithEqualDoubleDash()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testLongWithEqualDoubleDash() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testLongWithEqualSingleDash()", "name": "testLongWithEqualSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testLongWithEqualSingleDash()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testLongWithEqualSingleDash() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testLongWithoutEqualSingleDash()", "name": "testLongWithoutEqualSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testLongWithoutEqualSingleDash()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testLongWithoutEqualSingleDash() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testMissingArgWithBursting()", "name": "testMissingArgWithBursting", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testMissingArgWithBursting()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testMissingArgWithBursting() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testNegativeOption()", "name": "testNegativeOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser (CLI-184)\")\n    public void testNegativeOption()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser (CLI-184)\")\n    public void testNegativeOption() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser (CLI-184)\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser (CLI-184)\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testPartialLongOptionSingleDash()", "name": "testPartialLongOptionSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testPartialLongOptionSingleDash()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testPartialLongOptionSingleDash() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testPropertiesOption1()", "name": "testPropertiesOption1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testPropertiesOption1()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testPropertiesOption1() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testPropertiesOption2()", "name": "testPropertiesOption2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testPropertiesOption2()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testPropertiesOption2() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testShortOptionConcatenatedQuoteHandling()", "name": "testShortOptionConcatenatedQuoteHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testShortOptionConcatenatedQuoteHandling()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testShortOptionConcatenatedQuoteHandling() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testShortWithEqual()", "name": "testShortWithEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testShortWithEqual()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testShortWithEqual() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testShortWithoutEqual()", "name": "testShortWithoutEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testShortWithoutEqual()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testShortWithoutEqual() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testStopBursting()", "name": "testStopBursting", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testStopBursting()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testStopBursting() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testStopBursting2()", "name": "testStopBursting2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testStopBursting2()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testStopBursting2() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testUnambiguousPartialLongOption1()", "name": "testUnambiguousPartialLongOption1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testUnambiguousPartialLongOption1()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testUnambiguousPartialLongOption1() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testUnambiguousPartialLongOption2()", "name": "testUnambiguousPartialLongOption2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testUnambiguousPartialLongOption2()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testUnambiguousPartialLongOption2() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testUnambiguousPartialLongOption3()", "name": "testUnambiguousPartialLongOption3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testUnambiguousPartialLongOption3()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testUnambiguousPartialLongOption3() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testUnambiguousPartialLongOption4()", "name": "testUnambiguousPartialLongOption4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testUnambiguousPartialLongOption4()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testUnambiguousPartialLongOption4() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest.[void]testUnrecognizedOptionWithBursting()", "name": "testUnrecognizedOptionWithBursting", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testUnrecognizedOptionWithBursting()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public void testUnrecognizedOptionWithBursting() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/BasicParserTest.java", "class_name": "BasicParserTest", "class_uri": "src/test/java/org/apache/commons/cli/BasicParserTest.java.BasicParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the BasicParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the BasicParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java.Options_getOptionTest.[void]testGetOptionShort()", "name": "testGetOptionShort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOptionShort()", "original_string": "    @Test\n    public void testGetOptionShort() {\n        options.addOption(\"s\", \"shortOpt\", false, \"Short option\");\n        Option option = options.getOption(\"s\");\n        assertNotNull(option);\n        assertEquals(\"s\", option.getOpt());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java", "class_name": "Options_getOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java.Options_getOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java.Options_getOptionTest.[void]testGetOptionLong()", "name": "testGetOptionLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOptionLong()", "original_string": "    @Test\n    public void testGetOptionLong() {\n        options.addOption(\"l\", \"longOpt\", false, \"Long option\");\n        Option option = options.getOption(\"longOpt\");\n        assertNotNull(option);\n        assertEquals(\"longOpt\", option.getLongOpt());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java", "class_name": "Options_getOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java.Options_getOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java.Options_getOptionTest.[void]testGetOptionNonexistent()", "name": "testGetOptionNonexistent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOptionNonexistent()", "original_string": "    @Test\n    public void testGetOptionNonexistent() {\n        Option option = options.getOption(\"nonexistent\");\n        assertNull(option);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java", "class_name": "Options_getOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java.Options_getOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java.Options_getOptionTest.[void]testGetOptionWithHyphens()", "name": "testGetOptionWithHyphens", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOptionWithHyphens()", "original_string": "    @Test\n    public void testGetOptionWithHyphens() {\n        options.addOption(\"h\", \"hyphenOpt\", false, \"Option with hyphens\");\n        Option option = options.getOption(\"--hyphenOpt\");\n        assertNotNull(option);\n        assertEquals(\"hyphenOpt\", option.getLongOpt());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java", "class_name": "Options_getOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java.Options_getOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java.Options_getOptionTest.[void]testGetOptionMixedCase()", "name": "testGetOptionMixedCase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOptionMixedCase()", "original_string": "    @Test\n    public void testGetOptionMixedCase() {\n        options.addOption(\"m\", \"mixedCaseOpt\", false, \"Mixed case option\");\n        Option option = options.getOption(\"mixedCaseOpt\"); // Fixed to match the added option\n        assertNotNull(option);\n        assertEquals(\"mixedCaseOpt\", option.getLongOpt());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java", "class_name": "Options_getOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_getOptionTest.java.Options_getOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java.OptionGroup_addOptionTest.[void]testAddOption()", "name": "testAddOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddOption()", "original_string": "    @Test\n    public void testAddOption() {\n        Option option = new Option(\"o\", \"option\", false, \"Option description\");\n        optionGroup.addOption(option);\n\n        Collection<Option> options = optionGroup.getOptions();\n        assertNotNull(options);\n        assertEquals(1, options.size());\n        assertTrue(options.contains(option));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java", "class_name": "OptionGroup_addOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java.OptionGroup_addOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java.OptionGroup_addOptionTest.[void]testAddMultipleOptions()", "name": "testAddMultipleOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddMultipleOptions()", "original_string": "    @Test\n    public void testAddMultipleOptions() {\n        Option option1 = new Option(\"o1\", \"option1\", false, \"Option 1 description\");\n        Option option2 = new Option(\"o2\", \"option2\", false, \"Option 2 description\");\n        optionGroup.addOption(option1);\n        optionGroup.addOption(option2);\n\n        Collection<Option> options = optionGroup.getOptions();\n        assertNotNull(options);\n        assertEquals(2, options.size());\n        assertTrue(options.contains(option1));\n        assertTrue(options.contains(option2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java", "class_name": "OptionGroup_addOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java.OptionGroup_addOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java.OptionGroup_addOptionTest.[void]testAddOptionWithNullKey()", "name": "testAddOptionWithNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddOptionWithNullKey()", "original_string": "    @Test\n    public void testAddOptionWithNullKey() {\n        Option option = new Option(null, \"option\", false, \"Option description\");\n        optionGroup.addOption(option);\n\n        Collection<Option> options = optionGroup.getOptions();\n        assertNotNull(options);\n        assertEquals(1, options.size());\n        assertTrue(options.contains(option));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java", "class_name": "OptionGroup_addOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java.OptionGroup_addOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java.OptionGroup_addOptionTest.[void]testAddOptionWithEmptyKey()", "name": "testAddOptionWithEmptyKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddOptionWithEmptyKey()", "original_string": "    @Test\n    public void testAddOptionWithEmptyKey() {\n        Option option = new Option(\"o\", \"option\", false, \"Option description\");\n        optionGroup.addOption(option);\n\n        Collection<Option> options = optionGroup.getOptions();\n        assertNotNull(options);\n        assertEquals(1, options.size());\n        assertTrue(options.contains(option));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java", "class_name": "OptionGroup_addOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionGroup_addOptionTest.java.OptionGroup_addOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest.[void]testAmbiguousLongWithoutEqualSingleDash()", "name": "testAmbiguousLongWithoutEqualSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testAmbiguousLongWithoutEqualSingleDash()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PosixParserTest.java", "class_name": "PosixParserTest", "class_uri": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the PosixParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest.[void]testAmbiguousLongWithoutEqualSingleDash2()", "name": "testAmbiguousLongWithoutEqualSingleDash2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testAmbiguousLongWithoutEqualSingleDash2()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testAmbiguousLongWithoutEqualSingleDash2() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PosixParserTest.java", "class_name": "PosixParserTest", "class_uri": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the PosixParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest.[void]testAmbiguousPartialLongOption4()", "name": "testAmbiguousPartialLongOption4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testAmbiguousPartialLongOption4()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testAmbiguousPartialLongOption4() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PosixParserTest.java", "class_name": "PosixParserTest", "class_uri": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the PosixParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest.[void]testDoubleDash2()", "name": "testDoubleDash2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testDoubleDash2()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testDoubleDash2() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PosixParserTest.java", "class_name": "PosixParserTest", "class_uri": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the PosixParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest.[void]testLongWithEqualSingleDash()", "name": "testLongWithEqualSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testLongWithEqualSingleDash()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testLongWithEqualSingleDash() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PosixParserTest.java", "class_name": "PosixParserTest", "class_uri": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the PosixParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest.[void]testLongWithoutEqualSingleDash()", "name": "testLongWithoutEqualSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testLongWithoutEqualSingleDash()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testLongWithoutEqualSingleDash() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PosixParserTest.java", "class_name": "PosixParserTest", "class_uri": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the PosixParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest.[void]testLongWithUnexpectedArgument1()", "name": "testLongWithUnexpectedArgument1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testLongWithUnexpectedArgument1()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testLongWithUnexpectedArgument1() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PosixParserTest.java", "class_name": "PosixParserTest", "class_uri": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the PosixParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest.[void]testNegativeOption()", "name": "testNegativeOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser (CLI-184)\")\n    public void testNegativeOption()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the PosixParser (CLI-184)\")\n    public void testNegativeOption() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PosixParserTest.java", "class_name": "PosixParserTest", "class_uri": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser (CLI-184)\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the PosixParser (CLI-184)\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest.[void]testShortWithEqual()", "name": "testShortWithEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testShortWithEqual()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testShortWithEqual() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PosixParserTest.java", "class_name": "PosixParserTest", "class_uri": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the PosixParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest.[void]testUnambiguousPartialLongOption4()", "name": "testUnambiguousPartialLongOption4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testUnambiguousPartialLongOption4()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public void testUnambiguousPartialLongOption4() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PosixParserTest.java", "class_name": "PosixParserTest", "class_uri": "src/test/java/org/apache/commons/cli/PosixParserTest.java.PosixParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the PosixParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the PosixParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testAmbiguousLongWithoutEqualSingleDash()", "name": "testAmbiguousLongWithoutEqualSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testAmbiguousLongWithoutEqualSingleDash()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testAmbiguousLongWithoutEqualSingleDash2()", "name": "testAmbiguousLongWithoutEqualSingleDash2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testAmbiguousLongWithoutEqualSingleDash2()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testAmbiguousLongWithoutEqualSingleDash2() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testAmbiguousPartialLongOption1()", "name": "testAmbiguousPartialLongOption1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testAmbiguousPartialLongOption1()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testAmbiguousPartialLongOption1() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testAmbiguousPartialLongOption2()", "name": "testAmbiguousPartialLongOption2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testAmbiguousPartialLongOption2()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testAmbiguousPartialLongOption2() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testAmbiguousPartialLongOption3()", "name": "testAmbiguousPartialLongOption3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testAmbiguousPartialLongOption3()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testAmbiguousPartialLongOption3() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testAmbiguousPartialLongOption4()", "name": "testAmbiguousPartialLongOption4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testAmbiguousPartialLongOption4()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testAmbiguousPartialLongOption4() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testBursting()", "name": "testBursting", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testBursting()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testBursting() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testDoubleDash2()", "name": "testDoubleDash2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testDoubleDash2()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testDoubleDash2() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testLongWithoutEqualSingleDash()", "name": "testLongWithoutEqualSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testLongWithoutEqualSingleDash()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testLongWithoutEqualSingleDash() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testLongWithUnexpectedArgument1()", "name": "testLongWithUnexpectedArgument1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testLongWithUnexpectedArgument1()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testLongWithUnexpectedArgument1() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testLongWithUnexpectedArgument2()", "name": "testLongWithUnexpectedArgument2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testLongWithUnexpectedArgument2()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testLongWithUnexpectedArgument2() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testMissingArgWithBursting()", "name": "testMissingArgWithBursting", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testMissingArgWithBursting()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testMissingArgWithBursting() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testNegativeOption()", "name": "testNegativeOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser (CLI-184)\")\n    public void testNegativeOption()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser (CLI-184)\")\n    public void testNegativeOption() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser (CLI-184)\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser (CLI-184)\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testPartialLongOptionSingleDash()", "name": "testPartialLongOptionSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testPartialLongOptionSingleDash()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testPartialLongOptionSingleDash() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testShortWithUnexpectedArgument()", "name": "testShortWithUnexpectedArgument", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testShortWithUnexpectedArgument()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testShortWithUnexpectedArgument() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testStopBursting()", "name": "testStopBursting", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testStopBursting()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testStopBursting() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testStopBursting2()", "name": "testStopBursting2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testStopBursting2()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testStopBursting2() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testUnambiguousPartialLongOption1()", "name": "testUnambiguousPartialLongOption1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testUnambiguousPartialLongOption1()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testUnambiguousPartialLongOption1() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testUnambiguousPartialLongOption2()", "name": "testUnambiguousPartialLongOption2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testUnambiguousPartialLongOption2()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testUnambiguousPartialLongOption2() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testUnambiguousPartialLongOption3()", "name": "testUnambiguousPartialLongOption3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testUnambiguousPartialLongOption3()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testUnambiguousPartialLongOption3() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testUnambiguousPartialLongOption4()", "name": "testUnambiguousPartialLongOption4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testUnambiguousPartialLongOption4()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testUnambiguousPartialLongOption4() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest.[void]testUnrecognizedOptionWithBursting()", "name": "testUnrecognizedOptionWithBursting", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testUnrecognizedOptionWithBursting()", "original_string": "    @Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public void testUnrecognizedOptionWithBursting() throws Exception {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/GnuParserTest.java", "class_name": "GnuParserTest", "class_uri": "src/test/java/org/apache/commons/cli/GnuParserTest.java.GnuParserTest", "attributes": {"modifiers": "@Override\n    @Test\n    @Disabled(\"not supported by the GnuParser\")\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@Disabled(\"not supported by the GnuParser\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java.TypeHandler_createValueTest.[void]testCreateValue_Class()", "name": "testCreateValue_Class", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateValue_Class()", "original_string": "    @Test\n    public void testCreateValue_Class() throws ParseException {\n        final Class<?> cls = getClass();\n        assertEquals(cls, TypeHandler.createValue(cls.getName(), Class.class));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java", "class_name": "TypeHandler_createValueTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java.TypeHandler_createValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java.TypeHandler_createValueTest.[void]testCreateValue_File()", "name": "testCreateValue_File", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateValue_File()", "original_string": "    @Test\n    public void testCreateValue_File() throws ParseException {\n        final File file = new File(\"test.txt\");\n        assertEquals(file, TypeHandler.createValue(file.getPath(), File.class));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java", "class_name": "TypeHandler_createValueTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java.TypeHandler_createValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java.TypeHandler_createValueTest.[void]testCreateValue_URL()", "name": "testCreateValue_URL", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateValue_URL()", "original_string": "    @Test\n    public void testCreateValue_URL() throws ParseException, MalformedURLException {\n        final URL url = new URL(\"http://example.com\");\n        assertEquals(url, TypeHandler.createValue(url.toString(), URL.class));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java", "class_name": "TypeHandler_createValueTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java.TypeHandler_createValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java.TypeHandler_createValueTest.[void]testCreateValue_BigInteger()", "name": "testCreateValue_BigInteger", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateValue_BigInteger()", "original_string": "    @Test\n    public void testCreateValue_BigInteger() throws ParseException {\n        final BigInteger bigInteger = new BigInteger(\"12345678901234567890\");\n        assertEquals(bigInteger, TypeHandler.createValue(bigInteger.toString(), BigInteger.class));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java", "class_name": "TypeHandler_createValueTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java.TypeHandler_createValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java.TypeHandler_createValueTest.[void]testCreateValue_BigDecimal()", "name": "testCreateValue_BigDecimal", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateValue_BigDecimal()", "original_string": "    @Test\n    public void testCreateValue_BigDecimal() throws ParseException {\n        final BigDecimal bigDecimal = new BigDecimal(\"1234567890.1234567890\");\n        assertEquals(bigDecimal, TypeHandler.createValue(bigDecimal.toString(), BigDecimal.class));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java", "class_name": "TypeHandler_createValueTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java.TypeHandler_createValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java.TypeHandler_createValueTest.[void]testCreateValue_InvalidInput()", "name": "testCreateValue_InvalidInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateValue_InvalidInput()", "original_string": "    @Test\n    public void testCreateValue_InvalidInput() {\n        assertThrows(ParseException.class, () -> {\n            TypeHandler.createValue(\"invalid\", URL.class);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java", "class_name": "TypeHandler_createValueTest", "class_uri": "src/test/java/org/apache/commons/cli/TypeHandler_createValueTest.java.TypeHandler_createValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionValidatorTest.java.OptionValidatorTest.[void]testExclusivity()", "name": "testExclusivity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExclusivity()", "original_string": "    @Test\n    public void testExclusivity() {\n        /* since we modify acceptable chars by add and removing ADDITIONAL* chars we must verify that they do not exist in the\n         * base javaIdentiferPart that is used in OptionValidator to validate basic characters  */\n        for (final char c : OptionValidator.ADDITIONAL_LONG_CHARS) {\n            assertFalse(Character.isJavaIdentifierPart(c), () -> String.format(\"'%s' should not be in 'ADDITIONAL_LONG_CHARS\", c));\n        }\n        for (final char c : OptionValidator.ADDITIONAL_OPTION_CHARS) {\n            assertFalse(Character.isJavaIdentifierPart(c), () -> String.format(\"'%s' should not be in 'ADDITIONAL_OPTION_CHARS\", c));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionValidatorTest.java", "class_name": "OptionValidatorTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionValidatorTest.java.OptionValidatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionValidatorTest.java.OptionValidatorTest.[void]validateTest(String,boolean,String)", "name": "validateTest", "arg_nums": 3, "params": [{"name": "str", "type": "String"}, {"name": "expected", "type": "boolean"}, {"name": "name", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest(name = \"{2}\")\n    @MethodSource(\"optionParameters\")\n    public void validateTest(final String str, final boolean expected, final String name)", "original_string": "    @ParameterizedTest(name = \"{2}\")\n    @MethodSource(\"optionParameters\")\n    public void validateTest(final String str, final boolean expected, final String name) {\n        if (expected) {\n            assertEquals(str, OptionValidator.validate(str));\n        } else {\n            assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(str));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionValidatorTest.java", "class_name": "OptionValidatorTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionValidatorTest.java.OptionValidatorTest", "attributes": {"modifiers": "@ParameterizedTest(name = \"{2}\")\n    @MethodSource(\"optionParameters\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@ParameterizedTest(name = \"{2}\")", "@MethodSource(\"optionParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_toStringTest.java.Options_toStringTest.[void]testToStringWithNoOptions()", "name": "testToStringWithNoOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithNoOptions()", "original_string": "    @Test\n    public void testToStringWithNoOptions() {\n        String expected = \"[ Options: [ short {} ] [ long {} ]\";\n        assertEquals(expected, options.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_toStringTest.java", "class_name": "Options_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_toStringTest.java.Options_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_toStringTest.java.Options_toStringTest.[void]testToStringWithShortOptions()", "name": "testToStringWithShortOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithShortOptions()", "original_string": "    @Test\n    public void testToStringWithShortOptions() {\n        options.addOption(\"a\", \"Option A\");\n        options.addOption(\"b\", \"Option B\");\n        String expected = \"[ Options: [ short {a=[ Option a :: Option A :: class java.lang.String ], b=[ Option b :: Option B :: class java.lang.String ]} ] [ long {} ]\";\n        assertEquals(expected, options.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_toStringTest.java", "class_name": "Options_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_toStringTest.java.Options_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_toStringTest.java.Options_toStringTest.[void]testToStringWithLongOptions()", "name": "testToStringWithLongOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithLongOptions()", "original_string": "    @Test\n    public void testToStringWithLongOptions() {\n        options.addOption(null, \"foo\", false, \"Foo\");\n        options.addOption(null, \"bar\", false, \"Bar\");\n        String expected = \"[ Options: [ short {foo=[ Option null foo :: Foo :: class java.lang.String ], bar=[ Option null bar :: Bar :: class java.lang.String ]} ] [ long {foo=[ Option null foo :: Foo :: class java.lang.String ], bar=[ Option null bar :: Bar :: class java.lang.String ]} ]\";\n        assertEquals(expected, options.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_toStringTest.java", "class_name": "Options_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_toStringTest.java.Options_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Options_toStringTest.java.Options_toStringTest.[void]testToStringWithBothShortAndLongOptions()", "name": "testToStringWithBothShortAndLongOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithBothShortAndLongOptions()", "original_string": "    @Test\n    public void testToStringWithBothShortAndLongOptions() {\n        options.addOption(\"a\", \"foo\", false, \"Foo\");\n        options.addOption(\"b\", \"bar\", false, \"Bar\");\n        String expected = \"[ Options: [ short {a=[ Option a foo :: Foo :: class java.lang.String ], b=[ Option b bar :: Bar :: class java.lang.String ]} ] [ long {foo=[ Option a foo :: Foo :: class java.lang.String ], bar=[ Option b bar :: Bar :: class java.lang.String ]} ]\";\n        assertEquals(expected, options.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Options_toStringTest.java", "class_name": "Options_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/Options_toStringTest.java.Options_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilder_createTest.java.OptionBuilder_createTest.[void]testCreateWithLongOpt()", "name": "testCreateWithLongOpt", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateWithLongOpt()", "original_string": "    @Test\n    public void testCreateWithLongOpt() {\n        OptionBuilder.withLongOpt(\"testLongOpt\");\n        Option option = OptionBuilder.create();\n        assertEquals(\"testLongOpt\", option.getLongOpt());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilder_createTest.java", "class_name": "OptionBuilder_createTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilder_createTest.java.OptionBuilder_createTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilder_createTest.java.OptionBuilder_createTest.[void]testCreateWithoutLongOpt()", "name": "testCreateWithoutLongOpt", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateWithoutLongOpt()", "original_string": "    @Test\n    public void testCreateWithoutLongOpt() {\n        try {\n            OptionBuilder.create();\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"must specify longopt\", e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilder_createTest.java", "class_name": "OptionBuilder_createTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilder_createTest.java.OptionBuilder_createTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilder_createTest.java.OptionBuilder_createTest.[void]testCreateWithAllProperties()", "name": "testCreateWithAllProperties", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateWithAllProperties()", "original_string": "    @Test\n    public void testCreateWithAllProperties() {\n        OptionBuilder.withLongOpt(\"testLongOpt\")\n                     .hasArg()\n                     .isRequired()\n                     .hasArgs()\n                     .withType(Float.class)\n                     .withDescription(\"this is a test option\")\n                     .withValueSeparator('=');\n\n        Option option = OptionBuilder.create();\n\n        assertEquals(\"testLongOpt\", option.getLongOpt());\n        assertEquals(\"this is a test option\", option.getDescription());\n        assertEquals(Float.class, option.getType());\n        assertTrue(option.hasArg());\n        assertTrue(option.isRequired());\n        assertTrue(option.hasArgs());\n        assertEquals('=', option.getValueSeparator());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilder_createTest.java", "class_name": "OptionBuilder_createTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilder_createTest.java.OptionBuilder_createTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilder_createTest.java.OptionBuilder_createTest.[void]testCreateWithReset()", "name": "testCreateWithReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateWithReset()", "original_string": "    @Test\n    public void testCreateWithReset() {\n        OptionBuilder.withLongOpt(\"testLongOpt\");\n        OptionBuilder.withLongOpt(null); // Simulate reset by setting longOpt to null\n        try {\n            OptionBuilder.create();\n            fail(\"Expected IllegalArgumentException\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"must specify longopt\", e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilder_createTest.java", "class_name": "OptionBuilder_createTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilder_createTest.java.OptionBuilder_createTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java.HelpFormatter_printUsageTest.[void]testPrintUsage()", "name": "testPrintUsage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintUsage()", "original_string": "    @Test\n    public void testPrintUsage() {\n        Options options = new Options();\n        options.addOption(Option.builder(\"f\").longOpt(\"file\").hasArg().argName(\"file\").desc(\"The file to be processed\").build());\n        options.addOption(\"v\", \"version\", false, \"Print the version of the application\");\n        options.addOption(\"h\", \"help\", false, \"Print this help message\");\n\n        formatter.printUsage(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, \"myapp\", options);\n\n        String expected = \"usage: myapp [-f <file>] [-h] [-v]\\n\";\n        assertEquals(expected, sw.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java", "class_name": "HelpFormatter_printUsageTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java.HelpFormatter_printUsageTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java.HelpFormatter_printUsageTest.[void]testPrintUsageWithOptionGroup()", "name": "testPrintUsageWithOptionGroup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintUsageWithOptionGroup()", "original_string": "    @Test\n    public void testPrintUsageWithOptionGroup() {\n        Options options = new Options();\n        OptionGroup group = new OptionGroup();\n        group.addOption(new Option(\"a\", \"optionA\", false, \"Option A\"));\n        group.addOption(new Option(\"b\", \"optionB\", false, \"Option B\"));\n        options.addOptionGroup(group);\n\n        formatter.printUsage(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, \"myapp\", options);\n\n        String expected = \"usage: myapp [-a | -b]\\n\";\n        assertEquals(expected, sw.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java", "class_name": "HelpFormatter_printUsageTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java.HelpFormatter_printUsageTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java.HelpFormatter_printUsageTest.[void]testPrintUsageWithRequiredOption()", "name": "testPrintUsageWithRequiredOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintUsageWithRequiredOption()", "original_string": "    @Test\n    public void testPrintUsageWithRequiredOption() {\n        Options options = new Options();\n        options.addOption(Option.builder(\"f\").longOpt(\"file\").hasArg().argName(\"file\").desc(\"The file to be processed\").required().build());\n\n        formatter.printUsage(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, \"myapp\", options);\n\n        String expected = \"usage: myapp -f <file>\\n\";\n        assertEquals(expected, sw.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java", "class_name": "HelpFormatter_printUsageTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java.HelpFormatter_printUsageTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java.HelpFormatter_printUsageTest.[void]testPrintUsageWithNoOptions()", "name": "testPrintUsageWithNoOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintUsageWithNoOptions()", "original_string": "    @Test\n    public void testPrintUsageWithNoOptions() {\n        Options options = new Options();\n\n        formatter.printUsage(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, \"myapp\", options);\n\n        String expected = \"usage: myapp\\n\";\n        assertEquals(expected, sw.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java", "class_name": "HelpFormatter_printUsageTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatter_printUsageTest.java.HelpFormatter_printUsageTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java.DisablePartialMatchingTest.[void]testDisablePartialMatching()", "name": "testDisablePartialMatching", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDisablePartialMatching()", "original_string": "    @Test\n    public void testDisablePartialMatching() throws Exception {\n        final CommandLineParser parser = new DefaultParser(false);\n\n        final Options options = new Options();\n\n        options.addOption(new Option(\"d\", \"debug\", false, \"Turn on debug.\"));\n        options.addOption(new Option(\"e\", \"extract\", false, \"Turn on extract.\"));\n        options.addOption(new Option(\"o\", \"option\", true, \"Turn on option with argument.\"));\n\n        final CommandLine line = parser.parse(options, new String[] {\"-de\", \"--option=foobar\"});\n\n        assertTrue(line.hasOption(\"debug\"), \"There should be an option debug in any case...\");\n        assertTrue(line.hasOption(\"extract\"), \"There should be an extract option because partial matching is off\");\n        assertTrue(line.hasOption(\"option\"), \"There should be an option option with a argument value\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java", "class_name": "DisablePartialMatchingTest", "class_uri": "src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java.DisablePartialMatchingTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java.DisablePartialMatchingTest.[void]testRegularPartialMatching()", "name": "testRegularPartialMatching", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRegularPartialMatching()", "original_string": "    @Test\n    public void testRegularPartialMatching() throws Exception {\n        final CommandLineParser parser = new DefaultParser();\n\n        final Options options = new Options();\n\n        options.addOption(new Option(\"d\", \"debug\", false, \"Turn on debug.\"));\n        options.addOption(new Option(\"e\", \"extract\", false, \"Turn on extract.\"));\n        options.addOption(new Option(\"o\", \"option\", true, \"Turn on option with argument.\"));\n\n        final CommandLine line = parser.parse(options, new String[] {\"-de\", \"--option=foobar\"});\n\n        assertTrue(line.hasOption(\"debug\"), \"There should be an option debug in any case...\");\n        assertFalse(line.hasOption(\"extract\"), \"There should not be an extract option because partial matching only selects debug\");\n        assertTrue(line.hasOption(\"option\"), \"There should be an option option with a argument value\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java", "class_name": "DisablePartialMatchingTest", "class_uri": "src/test/java/org/apache/commons/cli/DisablePartialMatchingTest.java.DisablePartialMatchingTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testAccessors()", "name": "testAccessors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAccessors()", "original_string": "    @Test\n    public void testAccessors() {\n        final HelpFormatter formatter = new HelpFormatter();\n\n        formatter.setArgName(\"argname\");\n        assertEquals(\"argname\", formatter.getArgName(), \"arg name\");\n\n        formatter.setDescPadding(3);\n        assertEquals(3, formatter.getDescPadding(), \"desc padding\");\n\n        formatter.setLeftPadding(7);\n        assertEquals(7, formatter.getLeftPadding(), \"left padding\");\n\n        formatter.setLongOptPrefix(\"~~\");\n        assertEquals(\"~~\", formatter.getLongOptPrefix(), \"long opt prefix\");\n\n        formatter.setNewLine(\"\\n\");\n        assertEquals(\"\\n\", formatter.getNewLine(), \"new line\");\n\n        formatter.setOptPrefix(\"~\");\n        assertEquals(\"~\", formatter.getOptPrefix(), \"opt prefix\");\n\n        formatter.setSyntaxPrefix(\"-> \");\n        assertEquals(\"-> \", formatter.getSyntaxPrefix(), \"syntax prefix\");\n\n        formatter.setWidth(80);\n        assertEquals(80, formatter.getWidth(), \"width\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testAutomaticUsage()", "name": "testAutomaticUsage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAutomaticUsage()", "original_string": "    @Test\n    public void testAutomaticUsage() {\n        final HelpFormatter hf = new HelpFormatter();\n        Options options;\n        String expected = \"usage: app [-a]\";\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintWriter pw = new PrintWriter(out);\n\n        options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n        hf.printUsage(pw, 60, \"app\", options);\n        pw.flush();\n        assertEquals(expected, out.toString().trim(), \"simple auto usage\");\n        out.reset();\n\n        expected = \"usage: app [-a] [-b]\";\n        options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\").addOption(\"b\", false, \"bbb\");\n        hf.printUsage(pw, 60, \"app\", options);\n        pw.flush();\n        assertEquals(expected, out.toString().trim(), \"simple auto usage\");\n        out.reset();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testDefaultArgName()", "name": "testDefaultArgName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDefaultArgName()", "original_string": "    @Test\n    public void testDefaultArgName() {\n        final Option option = Option.builder(\"f\").hasArg().required(true).build();\n\n        final Options options = new Options();\n        options.addOption(option);\n\n        final StringWriter out = new StringWriter();\n\n        final HelpFormatter formatter = new HelpFormatter();\n        formatter.setArgName(\"argument\");\n        formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n\n        assertEquals(\"usage: app -f <argument>\" + EOL, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testFindWrapPos()", "name": "testFindWrapPos", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFindWrapPos()", "original_string": "    @Test\n    public void testFindWrapPos() {\n        final HelpFormatter hf = new HelpFormatter();\n\n        String text = \"This is a test.\";\n        // text width should be max 8; the wrap position is 7\n        assertEquals(7, hf.findWrapPos(text, 8, 0), \"wrap position\");\n\n        // starting from 8 must give -1 - the wrap pos is after end\n        assertEquals(-1, hf.findWrapPos(text, 8, 8), \"wrap position 2\");\n\n        // words longer than the width are cut\n        text = \"aaaa aa\";\n        assertEquals(3, hf.findWrapPos(text, 3, 0), \"wrap position 3\");\n\n        // last word length is equal to the width\n        text = \"aaaaaa aaaaaa\";\n        assertEquals(6, hf.findWrapPos(text, 6, 0), \"wrap position 4\");\n        assertEquals(-1, hf.findWrapPos(text, 6, 7), \"wrap position 4\");\n\n        text = \"aaaaaa\\n aaaaaa\";\n        assertEquals(7, hf.findWrapPos(text, 6, 0), \"wrap position 5\");\n\n        text = \"aaaaaa\\t aaaaaa\";\n        assertEquals(7, hf.findWrapPos(text, 6, 0), \"wrap position 6\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testHeaderStartingWithLineSeparator0()", "name": "testHeaderStartingWithLineSeparator0", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHeaderStartingWithLineSeparator0()", "original_string": "    @Test\n    public void testHeaderStartingWithLineSeparator0() {\n        // related to Bugzilla #21215\n        final Options options = new Options();\n        final HelpFormatter formatter = new HelpFormatter();\n        final String header = EOL + \"Header\";\n        final String footer = \"Footer\";\n        final StringWriter out = new StringWriter();\n        formatter.printHelp(new PrintWriter(out), 80, \"foobar\", header, options, 2, 2, footer, true);\n        //@formatter:off\n        assertEquals(\n                \"usage: foobar\" + EOL +\n                EOL +\n                \"Header\" + EOL +\n                EOL +\n                \"Footer\" + EOL,\n                out.toString());\n        //@formatter:on\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testHeaderStartingWithLineSeparator1()", "name": "testHeaderStartingWithLineSeparator1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHeaderStartingWithLineSeparator1()", "original_string": "    @Test\n    public void testHeaderStartingWithLineSeparator1() {\n        // related to Bugzilla #21215\n        final Options options = new Options();\n        final String header = EOL + \"Header\";\n        final String footer = \"Footer\";\n        final Builder builder = HelpFormatter.builder();\n        StringWriter out = new StringWriter();\n        builder.setPrintWriter(new PrintWriter(out)).get().printHelp(new PrintWriter(out), 80, \"foobar\", header, options, 2, 2, footer, true);\n        //@formatter:off\n        assertEquals(\n                \"usage: foobar\" + EOL +\n                \"\" + EOL +\n                \"Header\" + EOL +\n                \"\" + EOL +\n                \"Footer\" + EOL,\n                out.toString());\n        //@formatter:on\n        out = new StringWriter();\n        builder.setPrintWriter(new PrintWriter(out)).get().printHelp(\"foobar\", header, options, footer);\n        //@formatter:off\n        assertEquals(\n                \"usage: foobar\" + EOL +\n                EOL +\n                \"Header\" + EOL +\n                EOL +\n                \"Footer\" + EOL,\n                out.toString());\n        //@formatter:on\n        out = new StringWriter();\n        builder.setPrintWriter(new PrintWriter(out)).get().printHelp(80, \"foobar\", header, options, footer);\n        //@formatter:off\n        assertEquals(\n                \"usage: foobar\" + EOL +\n                EOL +\n                \"Header\" + EOL +\n                EOL +\n                \"Footer\" + EOL,\n                out.toString());\n        //@formatter:on\n        out = new StringWriter();\n        builder.setPrintWriter(new PrintWriter(out)).get().printHelp(\"foobar\", header, options, footer, false);\n        //@formatter:off\n        assertEquals(\n                \"usage: foobar\" + EOL +\n                EOL +\n                \"Header\" + EOL +\n                EOL +\n                \"Footer\" + EOL,\n                out.toString());\n        //@formatter:on\n        out = new StringWriter();\n        builder.setPrintWriter(new PrintWriter(out)).get().printHelp(\"foobar\", header, options, footer, true);\n        //@formatter:off\n        assertEquals(\n                \"usage: foobar\" + EOL +\n                EOL +\n                \"Header\" + EOL +\n                EOL +\n                \"Footer\" + EOL,\n                out.toString());\n        //@formatter:on\n        out = new StringWriter();\n        builder.setPrintWriter(new PrintWriter(out)).get().printHelp(\"foobar\", options, false);\n        //@formatter:off\n        assertEquals(\n                \"usage: foobar\" + EOL +\n                \"\" + EOL,\n                out.toString());\n        //@formatter:on\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testHelpWithLongOptSeparator()", "name": "testHelpWithLongOptSeparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHelpWithLongOptSeparator()", "original_string": "    @Test\n    public void testHelpWithLongOptSeparator() {\n        final Options options = new Options();\n        options.addOption(\"f\", true, \"the file\");\n        options.addOption(Option.builder(\"s\").longOpt(\"size\").desc(\"the size\").hasArg().argName(\"SIZE\").build());\n        options.addOption(Option.builder().longOpt(\"age\").desc(\"the age\").hasArg().build());\n\n        final HelpFormatter formatter = new HelpFormatter();\n        assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR, formatter.getLongOptSeparator());\n        formatter.setLongOptSeparator(\"=\");\n        assertEquals(\"=\", formatter.getLongOptSeparator());\n\n        final StringWriter out = new StringWriter();\n\n        formatter.printHelp(new PrintWriter(out), 80, \"create\", \"header\", options, 2, 2, \"footer\");\n\n        //@formatter:off\n        assertEquals(\n                \"usage: create\" + EOL +\n                \"header\" + EOL +\n                \"     --age=<arg>    the age\" + EOL +\n                \"  -f <arg>          the file\" + EOL +\n                \"  -s,--size=<SIZE>  the size\" + EOL +\n                \"footer\" + EOL,\n                out.toString());\n        //@formatter:on\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testIndentedHeaderAndFooter()", "name": "testIndentedHeaderAndFooter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndentedHeaderAndFooter()", "original_string": "    @Test\n    public void testIndentedHeaderAndFooter() {\n        // related to CLI-207\n        final Options options = new Options();\n        final HelpFormatter formatter = new HelpFormatter();\n        final String header = \"  Header1\\n  Header2\";\n        final String footer = \"  Footer1\\n  Footer2\";\n        final StringWriter out = new StringWriter();\n        formatter.printHelp(new PrintWriter(out), 80, \"foobar\", header, options, 2, 2, footer, true);\n        //@formatter:off\n        assertEquals(\n                \"usage: foobar\" + EOL +\n                \"  Header1\" + EOL +\n                \"  Header2\" + EOL +\n                \"\" + EOL +\n                \"  Footer1\" + EOL +\n                \"  Footer2\" + EOL,\n                out.toString());\n        //@formatter:on\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testOptionWithoutShortFormat()", "name": "testOptionWithoutShortFormat", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOptionWithoutShortFormat()", "original_string": "    @Test\n    public void testOptionWithoutShortFormat() {\n        // related to Bugzilla #19383 (CLI-67)\n        final Options options = new Options();\n        options.addOption(new Option(\"a\", \"aaa\", false, \"aaaaaaa\"));\n        options.addOption(new Option(null, \"bbb\", false, \"bbbbbbb\"));\n        options.addOption(new Option(\"c\", null, false, \"ccccccc\"));\n\n        final HelpFormatter formatter = new HelpFormatter();\n        final StringWriter out = new StringWriter();\n        formatter.printHelp(new PrintWriter(out), 80, \"foobar\", \"\", options, 2, 2, \"\", true);\n        //@formatter:off\n        assertEquals(\n                \"usage: foobar [-a] [--bbb] [-c]\" + EOL +\n                \"  -a,--aaa  aaaaaaa\" + EOL +\n                \"     --bbb  bbbbbbb\" + EOL +\n                \"  -c        ccccccc\" + EOL,\n                out.toString());\n        //@formatter:on\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testOptionWithoutShortFormat2()", "name": "testOptionWithoutShortFormat2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOptionWithoutShortFormat2()", "original_string": "    @Test\n    public void testOptionWithoutShortFormat2() {\n        // related to Bugzilla #27635 (CLI-26)\n        final Option help = new Option(\"h\", \"help\", false, \"print this message\");\n        final Option version = new Option(\"v\", \"version\", false, \"print version information\");\n        final Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\n        final Option trackerRun = new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\n        //@formatter:off\n        final Option timeLimit = Option.builder(\"l\")\n                .longOpt(\"limit\")\n                .hasArg()\n                .valueSeparator()\n                .desc(\"Set time limit for execution, in mintues\")\n                .build();\n        final Option age = Option.builder(\"a\").longOpt(\"age\")\n                .hasArg()\n                .valueSeparator()\n                .desc(\"Age (in days) of cache item before being recomputed\")\n                .build();\n        final Option server = Option.builder(\"s\").longOpt(\"server\")\n                .hasArg()\n                .valueSeparator()\n                .desc(\"The NLT server address\")\n                .build();\n        final Option numResults = Option.builder(\"r\").longOpt(\"results\")\n                .hasArg()\n                .valueSeparator()\n                .desc(\"Number of results per item\")\n                .build();\n        final Option configFile = Option.builder().longOpt(\"config\")\n                .hasArg()\n                .valueSeparator()\n                .desc(\"Use the specified configuration file\")\n                .build();\n        //@formatter:on\n\n        final Options mOptions = new Options();\n        mOptions.addOption(help);\n        mOptions.addOption(version);\n        mOptions.addOption(newRun);\n        mOptions.addOption(trackerRun);\n        mOptions.addOption(timeLimit);\n        mOptions.addOption(age);\n        mOptions.addOption(server);\n        mOptions.addOption(numResults);\n        mOptions.addOption(configFile);\n\n        final HelpFormatter formatter = new HelpFormatter();\n        final String eol = System.lineSeparator();\n        final StringWriter out = new StringWriter();\n        formatter.printHelp(new PrintWriter(out), 80, \"commandline\", \"header\", mOptions, 2, 2, \"footer\", true);\n        //@formatter:off\n        assertEquals(\n                \"usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\" + eol +\n                \"       [-s <arg>] [-t] [-v]\" + eol +\n                \"header\" + eol +\n                \"  -a,--age <arg>      Age (in days) of cache item before being recomputed\" + eol +\n                \"     --config <arg>   Use the specified configuration file\" + eol +\n                \"  -h,--help           print this message\" + eol +\n                \"  -l,--limit <arg>    Set time limit for execution, in mintues\" + eol +\n                \"  -n,--new            Create NLT cache entries only for new items\" + eol +\n                \"  -r,--results <arg>  Number of results per item\" + eol +\n                \"  -s,--server <arg>   The NLT server address\" + eol +\n                \"  -t,--tracker        Create NLT cache entries only for tracker items\" + eol +\n                \"  -v,--version        print version information\" + eol +\n                \"footer\" + eol,\n                out.toString());\n        //@formatter:on\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testPrintDeprecatedOptions(HelpFormatter,Option,String)", "name": "testPrintDeprecatedOptions", "arg_nums": 3, "params": [{"name": "hf", "type": "HelpFormatter"}, {"name": "option", "type": "Option"}, {"name": "expectedTxt", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"deprecatedOptionsProvider\")\n    public void testPrintDeprecatedOptions(final HelpFormatter hf, final Option option, final String expectedTxt)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"deprecatedOptionsProvider\")\n    public void testPrintDeprecatedOptions(final HelpFormatter hf, final Option option, final String expectedTxt) {\n        final StringBuffer sb = new StringBuffer();\n\n        final int leftPad = 1;\n        final int descPad = 3;\n        final String lpad = hf.createPadding(leftPad);\n        final String dpad = hf.createPadding(descPad);\n        Options options;\n        final StringBuilder expected = new StringBuilder().append(lpad).append(\"-a,--aaa\");\n\n        options = new Options().addOption(option);\n        if (expectedTxt.length() > 0) {\n            expected.append(dpad).append(expectedTxt);\n        }\n        hf.renderOptions(sb, 160, options, leftPad, descPad);\n        assertEquals(expected.toString(), sb.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"deprecatedOptionsProvider\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"deprecatedOptionsProvider\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testPrintHelpNewlineFooter()", "name": "testPrintHelpNewlineFooter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintHelpNewlineFooter()", "original_string": "    @Test\n    public void testPrintHelpNewlineFooter() {\n        final HelpFormatter formatter = new HelpFormatter();\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintWriter pw = new PrintWriter(out);\n\n        final Options options = new Options();\n        options.addOption(\"a\", \"b\");\n\n        formatter.printHelp(\n            pw,\n            80,\n            \"test\" + EOL,\n            \"header\" + EOL,\n            options,\n            0,\n            0,\n            EOL\n        );\n        final String expected = \"usage: test\" + EOL +\n                          \"header\" + EOL +\n                          \"-ab\" + EOL +\n                          EOL;\n        pw.flush();\n        assertEquals(expected, out.toString(), \"footer newline\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testPrintHelpNewlineHeader()", "name": "testPrintHelpNewlineHeader", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintHelpNewlineHeader()", "original_string": "    @Test\n    public void testPrintHelpNewlineHeader() {\n        final HelpFormatter formatter = new HelpFormatter();\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintWriter pw = new PrintWriter(out);\n\n        final Options options = new Options();\n        options.addOption(\"a\", \"b\");\n\n        formatter.printHelp(\n            pw,\n            80,\n            \"test\" + EOL,\n            EOL,\n            options,\n            0,\n            0,\n            \"footer\" + EOL\n        );\n        final String expected = \"usage: test\" + EOL +\n                          EOL +\n                          \"-ab\" + EOL +\n                          \"footer\" + EOL;\n        pw.flush();\n        assertEquals(expected, out.toString(), \"header newline\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testPrintHelpWithEmptySyntax()", "name": "testPrintHelpWithEmptySyntax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintHelpWithEmptySyntax()", "original_string": "    @Test\n    public void testPrintHelpWithEmptySyntax() {\n        final HelpFormatter formatter = new HelpFormatter();\n        assertThrows(IllegalArgumentException.class, () -> formatter.printHelp(null, new Options()), \"null command line syntax should be rejected\");\n        assertThrows(IllegalArgumentException.class, () -> formatter.printHelp(null, new Options(), true), \"null command line syntax should be rejected\");\n        assertThrows(IllegalArgumentException.class, () -> formatter.printHelp(null, new Options(), false), \"null command line syntax should be rejected\");\n        assertThrows(IllegalArgumentException.class, () -> formatter.printHelp(\"\", new Options(), true), \"null command line syntax should be rejected\");\n        assertThrows(IllegalArgumentException.class, () -> formatter.printHelp(\"\", new Options(), false), \"null command line syntax should be rejected\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testPrintHelpWithSince()", "name": "testPrintHelpWithSince", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintHelpWithSince()", "original_string": "    @Test\n    public void testPrintHelpWithSince() {\n        final String [] expected = {\"usage: Command syntax\", \"Header\", \"Options            Since   Description\",\n                \"  -n,--no-since    -          Description for n\", \"  -W,--with-since  1.19.0     Descripton for W\", \"footer\"};\n        final Options options = new Options()\n                .addOption(Option.builder(\"W\").longOpt(\"with-since\").since(\"1.19.0\").desc(\"Descripton for W\").build())\n                .addOption(Option.builder(\"n\").longOpt(\"no-since\").desc(\"Description for n\").build());\n\n        final HelpFormatter formatter = HelpFormatter.builder().setShowSince(true).get();\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try (PrintWriter pw = new PrintWriter(new OutputStreamWriter(baos))) {\n            formatter.printHelp(pw, 80, \"Command syntax\", \"Header\", options, 2, 5, \"footer\", false);\n        }\n        assertArrayEquals(expected, baos.toString().split(System.lineSeparator()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testPrintOptionGroupUsage()", "name": "testPrintOptionGroupUsage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintOptionGroupUsage()", "original_string": "    @Test\n    public void testPrintOptionGroupUsage() {\n        final OptionGroup group = new OptionGroup();\n        group.addOption(Option.builder(\"a\").build());\n        group.addOption(Option.builder(\"b\").build());\n        group.addOption(Option.builder(\"c\").build());\n\n        final Options options = new Options();\n        options.addOptionGroup(group);\n\n        final StringWriter out = new StringWriter();\n\n        final HelpFormatter formatter = new HelpFormatter();\n        formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n\n        assertEquals(\"usage: app [-a | -b | -c]\" + EOL, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testPrintOptions()", "name": "testPrintOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintOptions()", "original_string": "    @Test\n    public void testPrintOptions() {\n        final StringBuffer sb = new StringBuffer();\n        final HelpFormatter hf = new HelpFormatter();\n        final int leftPad = 1;\n        final int descPad = 3;\n        final String lpad = hf.createPadding(leftPad);\n        final String dpad = hf.createPadding(descPad);\n        Options options;\n        String expected;\n\n        options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n        expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa aaaa aaaa\";\n        hf.renderOptions(sb, 60, options, leftPad, descPad);\n        assertEquals(expected, sb.toString(), \"simple non-wrapped option\");\n\n        int nextLineTabStop = leftPad + descPad + \"-a\".length();\n        expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa\" + EOL + hf.createPadding(nextLineTabStop) + \"aaaa aaaa\";\n        sb.setLength(0);\n        hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad);\n        assertEquals(expected, sb.toString(), \"simple wrapped option\");\n\n        options = new Options().addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\");\n        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd dddd dddd\";\n        sb.setLength(0);\n        hf.renderOptions(sb, 60, options, leftPad, descPad);\n        assertEquals(expected, sb.toString(), \"long non-wrapped option\");\n\n        nextLineTabStop = leftPad + descPad + \"-a,--aaa\".length();\n        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + EOL + hf.createPadding(nextLineTabStop) + \"dddd dddd\";\n        sb.setLength(0);\n        hf.renderOptions(sb, 25, options, leftPad, descPad);\n        assertEquals(expected, sb.toString(), \"long wrapped option\");\n\n        options = new Options().addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\").addOption(\"b\", false, \"feeee eeee eeee eeee\");\n        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + EOL + hf.createPadding(nextLineTabStop) + \"dddd dddd\" + EOL + lpad + \"-b      \" + dpad\n            + \"feeee eeee\" + EOL + hf.createPadding(nextLineTabStop) + \"eeee eeee\";\n        sb.setLength(0);\n        hf.renderOptions(sb, 25, options, leftPad, descPad);\n        assertEquals(expected, sb.toString(), \"multiple wrapped options\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testPrintOptionWithEmptyArgNameUsage()", "name": "testPrintOptionWithEmptyArgNameUsage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintOptionWithEmptyArgNameUsage()", "original_string": "    @Test\n    public void testPrintOptionWithEmptyArgNameUsage() {\n        final Option option = new Option(\"f\", true, null);\n        option.setArgName(\"\");\n        option.setRequired(true);\n\n        final Options options = new Options();\n        options.addOption(option);\n\n        final StringWriter out = new StringWriter();\n\n        final HelpFormatter formatter = new HelpFormatter();\n        formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n\n        assertEquals(\"usage: app -f\" + EOL, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testPrintRequiredOptionGroupUsage()", "name": "testPrintRequiredOptionGroupUsage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintRequiredOptionGroupUsage()", "original_string": "    @Test\n    public void testPrintRequiredOptionGroupUsage() {\n        final OptionGroup group = new OptionGroup();\n        group.addOption(Option.builder(\"a\").build());\n        group.addOption(Option.builder(\"b\").build());\n        group.addOption(Option.builder(\"c\").build());\n        group.setRequired(true);\n\n        final Options options = new Options();\n        options.addOptionGroup(group);\n\n        final StringWriter out = new StringWriter();\n\n        final HelpFormatter formatter = new HelpFormatter();\n        formatter.printUsage(new PrintWriter(out), 80, \"app\", options);\n\n        assertEquals(\"usage: app -a | -b | -c\" + EOL, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testPrintSortedUsage()", "name": "testPrintSortedUsage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintSortedUsage()", "original_string": "    @Test\n    public void testPrintSortedUsage() {\n        final Options opts = new Options();\n        opts.addOption(new Option(\"a\", \"first\"));\n        opts.addOption(new Option(\"b\", \"second\"));\n        opts.addOption(new Option(\"c\", \"third\"));\n\n        final HelpFormatter helpFormatter = new HelpFormatter();\n        helpFormatter.setOptionComparator((opt1, opt2) -> opt2.getKey().compareToIgnoreCase(opt1.getKey()));\n\n        final StringWriter out = new StringWriter();\n        helpFormatter.printUsage(new PrintWriter(out), 80, \"app\", opts);\n\n        assertEquals(\"usage: app [-c] [-b] [-a]\" + EOL, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " uses the test for CLI-131 to implement CLI-155"}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testPrintSortedUsageWithNullComparator()", "name": "testPrintSortedUsageWithNullComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintSortedUsageWithNullComparator()", "original_string": "    @Test\n    public void testPrintSortedUsageWithNullComparator() {\n        final Options opts = new Options();\n        opts.addOption(new Option(\"c\", \"first\"));\n        opts.addOption(new Option(\"b\", \"second\"));\n        opts.addOption(new Option(\"a\", \"third\"));\n\n        final HelpFormatter helpFormatter = new HelpFormatter();\n        helpFormatter.setOptionComparator(null);\n\n        final StringWriter out = new StringWriter();\n        helpFormatter.printUsage(new PrintWriter(out), 80, \"app\", opts);\n\n        assertEquals(\"usage: app [-c] [-b] [-a]\" + EOL, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testPrintUsage()", "name": "testPrintUsage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintUsage()", "original_string": "    @Test\n    public void testPrintUsage() {\n        final Option optionA = new Option(\"a\", \"first\");\n        final Option optionB = new Option(\"b\", \"second\");\n        final Option optionC = new Option(\"c\", \"third\");\n        final Options opts = new Options();\n        opts.addOption(optionA);\n        opts.addOption(optionB);\n        opts.addOption(optionC);\n        final HelpFormatter helpFormatter = new HelpFormatter();\n        final ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\n        try (PrintWriter printWriter = new PrintWriter(bytesOut)) {\n            helpFormatter.printUsage(printWriter, 80, \"app\", opts);\n        }\n        assertEquals(\"usage: app [-a] [-b] [-c]\" + EOL, bytesOut.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " See https://issues.apache.org/jira/browse/CLI-131"}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testRenderSince()", "name": "testRenderSince", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRenderSince()", "original_string": "    @Test\n    public void testRenderSince() throws IOException {\n        final String[] expected = {\"Options            Since   Description\", \"  -n,--no-since    -          Description for n\",\n            \"  -W,--with-since  1.19.0     Descripton for W\"};\n        final Options options = new Options()\n                .addOption(Option.builder(\"W\").longOpt(\"with-since\").since(\"1.19.0\").desc(\"Descripton for W\").build())\n                .addOption(Option.builder(\"n\").longOpt(\"no-since\").desc(\"Description for n\").build());\n        final HelpFormatter formatter = HelpFormatter.builder().setShowSince(true).get();\n\n        final StringBuffer sb = new StringBuffer();\n        formatter.renderOptions(sb, 50, options, 2, 5);\n        assertArrayEquals(expected, sb.toString().split(System.lineSeparator()));\n        // check internal exception handling for coverage\n        final HelpFormatter spy = spy(formatter);\n        when(spy.appendOptions(sb, 50, options, 2, 5)).thenThrow(IOException.class);\n        assertThrows(UncheckedIOException.class, () -> spy.renderOptions(sb, 50, options, 2, 5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testRenderWrappedTextMultiLine()", "name": "testRenderWrappedTextMultiLine", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRenderWrappedTextMultiLine()", "original_string": "    @Test\n    public void testRenderWrappedTextMultiLine() {\n        // multi line text\n        final int width = 16;\n        final int padding = 0;\n        //@formatter:off\n        final String expected = \"aaaa aaaa aaaa\" + EOL +\n                                \"aaaaaa\" + EOL +\n                                \"aaaaa\";\n        //@formatter:on\n\n        final StringBuffer sb = new StringBuffer();\n        new HelpFormatter().renderWrappedText(sb, width, padding, expected);\n        assertEquals(expected, sb.toString(), \"multi line text\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testRenderWrappedTextMultiLinePadded()", "name": "testRenderWrappedTextMultiLinePadded", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRenderWrappedTextMultiLinePadded()", "original_string": "    @Test\n    public void testRenderWrappedTextMultiLinePadded() {\n        // multi-line padded text\n        final int width = 16;\n        final int padding = 4;\n        //@formatter:off\n        final String text = \"aaaa aaaa aaaa\" + EOL +\n                      \"aaaaaa\" + EOL +\n                      \"aaaaa\";\n        final String expected = \"aaaa aaaa aaaa\" + EOL +\n                          \"    aaaaaa\" + EOL +\n                          \"    aaaaa\";\n        //@formatter:on\n\n        final StringBuffer sb = new StringBuffer();\n        new HelpFormatter().renderWrappedText(sb, width, padding, text);\n        assertEquals(expected, sb.toString(), \"multi-line padded text\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testRenderWrappedTextSingleLine()", "name": "testRenderWrappedTextSingleLine", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRenderWrappedTextSingleLine()", "original_string": "    @Test\n    public void testRenderWrappedTextSingleLine() throws IOException {\n        // single line text\n        final int width = 12;\n        final int padding = 0;\n        final String text = \"This is a test.\";\n        final String expected = \"This is a\" + EOL + \"test.\";\n\n        final StringBuffer sb = new StringBuffer();\n        new HelpFormatter().renderWrappedText(sb, width, padding, text);\n        assertEquals(expected, sb.toString(), \"single line text\");\n        // check internal exception handling for coverage\n        final HelpFormatter spy = spy(new HelpFormatter());\n        when(spy.appendWrappedText(sb, width, padding, text)).thenThrow(IOException.class);\n        assertThrows(UncheckedIOException.class, () -> spy.renderWrappedText(sb, width, padding, text));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testRenderWrappedTextSingleLinePadded()", "name": "testRenderWrappedTextSingleLinePadded", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRenderWrappedTextSingleLinePadded()", "original_string": "    @Test\n    public void testRenderWrappedTextSingleLinePadded() {\n        // single line padded text\n        final int width = 12;\n        final int padding = 4;\n        final String text = \"This is a test.\";\n        final String expected = \"This is a\" + EOL + \"    test.\";\n\n        final StringBuffer sb = new StringBuffer();\n        new HelpFormatter().renderWrappedText(sb, width, padding, text);\n        assertEquals(expected, sb.toString(), \"single line padded text\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testRenderWrappedTextSingleLinePadded2()", "name": "testRenderWrappedTextSingleLinePadded2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRenderWrappedTextSingleLinePadded2()", "original_string": "    @Test\n    public void testRenderWrappedTextSingleLinePadded2() {\n        // single line padded text 2\n        final int width = 53;\n        final int padding = 24;\n        //@formatter:off\n        final String text = \"  -p,--period <PERIOD>  PERIOD is time duration of form \" +\n                            \"DATE[-DATE] where DATE has form YYYY[MM[DD]]\";\n        final String expected = \"  -p,--period <PERIOD>  PERIOD is time duration of\" + EOL +\n                                \"                        form DATE[-DATE] where DATE\" + EOL +\n                                \"                        has form YYYY[MM[DD]]\";\n        //@formatter:on\n\n        final StringBuffer sb = new StringBuffer();\n        new HelpFormatter().renderWrappedText(sb, width, padding, text);\n        assertEquals(expected, sb.toString(), \"single line padded text 2\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testRenderWrappedTextWordCut()", "name": "testRenderWrappedTextWordCut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRenderWrappedTextWordCut()", "original_string": "    @Test\n    public void testRenderWrappedTextWordCut() {\n        final int width = 7;\n        final int padding = 0;\n        final String text = \"Thisisatest.\";\n        final String expected = \"Thisisa\" + EOL + \"test.\";\n\n        final StringBuffer sb = new StringBuffer();\n        new HelpFormatter().renderWrappedText(sb, width, padding, text);\n        assertEquals(expected, sb.toString(), \"cut and wrap\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testRtrim()", "name": "testRtrim", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRtrim()", "original_string": "    @Test\n    public void testRtrim() {\n        final HelpFormatter formatter = new HelpFormatter();\n\n        assertNull(formatter.rtrim(null));\n        assertEquals(\"\", formatter.rtrim(\"\"));\n        assertEquals(\"  foo\", formatter.rtrim(\"  foo  \"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest.[void]testUsageWithLongOptSeparator()", "name": "testUsageWithLongOptSeparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUsageWithLongOptSeparator()", "original_string": "    @Test\n    public void testUsageWithLongOptSeparator() {\n        final Options options = new Options();\n        options.addOption(\"f\", true, \"the file\");\n        options.addOption(Option.builder(\"s\").longOpt(\"size\").desc(\"the size\").hasArg().argName(\"SIZE\").build());\n        options.addOption(Option.builder().longOpt(\"age\").desc(\"the age\").hasArg().build());\n\n        final HelpFormatter formatter = new HelpFormatter();\n        formatter.setLongOptSeparator(\"=\");\n\n        final StringWriter out = new StringWriter();\n\n        formatter.printUsage(new PrintWriter(out), 80, \"create\", options);\n\n        assertEquals(\"usage: create [--age=<arg>] [-f <arg>] [-s <SIZE>]\", out.toString().trim());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java", "class_name": "HelpFormatterTest", "class_uri": "src/test/java/org/apache/commons/cli/HelpFormatterTest.java.HelpFormatterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_addValueTest.java.Option_addValueTest.[void]testAddValue()", "name": "testAddValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddValue()", "original_string": "    @Test\n    public void testAddValue() {\n        assertThrows(UnsupportedOperationException.class, () -> option.addValue(\"testValue\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_addValueTest.java", "class_name": "Option_addValueTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_addValueTest.java.Option_addValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testLongNoArg()", "name": "testLongNoArg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongNoArg()", "original_string": "    @Test\n    public void testLongNoArg() {\n        assertTrue(cl.hasOption(\"c\"));\n        assertNull(cl.getOptionValue(\"c\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testLongNoArgWithOption()", "name": "testLongNoArgWithOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongNoArgWithOption()", "original_string": "    @Test\n    public void testLongNoArgWithOption() {\n        assertTrue(cl.hasOption(opts.getOption(\"c\")));\n        assertNull(cl.getOptionValue(opts.getOption(\"c\")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testLongOptionalArgValue(CommandLineParser)", "name": "testLongOptionalArgValue", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalArgValue(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalArgValue(final CommandLineParser parser) throws Exception {\n        final String[] args = { \"--fish\", \"face\" };\n        final CommandLine cmd = parser.parse(opts, args);\n        assertTrue(cmd.hasOption(\"fish\"));\n        assertEquals(\"face\", cmd.getOptionValue(\"fish\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testLongOptionalArgValues(CommandLineParser)", "name": "testLongOptionalArgValues", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalArgValues(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalArgValues(final CommandLineParser parser) throws Exception {\n        final String[] args = { \"--gravy\", \"gold\", \"garden\" };\n        final CommandLine cmd = parser.parse(opts, args);\n        assertNull(cmd.getOptionValues(NULL_OPTION));\n        assertNull(cmd.getOptionValues(NULL_STRING));\n        assertTrue(cmd.hasOption(\"gravy\"));\n        assertEquals(\"gold\", cmd.getOptionValue(\"gravy\"));\n        assertEquals(\"gold\", cmd.getOptionValues(\"gravy\")[0]);\n        assertEquals(\"garden\", cmd.getOptionValues(\"gravy\")[1]);\n        assertEquals(cmd.getArgs().length, 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testLongOptionalArgValuesWithOption(CommandLineParser)", "name": "testLongOptionalArgValuesWithOption", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalArgValuesWithOption(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalArgValuesWithOption(final CommandLineParser parser) throws Exception {\n        final String[] args = { \"--gravy\", \"gold\", \"garden\" };\n        final CommandLine cmd = parser.parse(opts, args);\n        assertNull(cmd.getOptionValues(NULL_OPTION));\n        assertNull(cmd.getOptionValues(NULL_STRING));\n        assertTrue(cmd.hasOption(opts.getOption(\"gravy\")));\n        assertEquals(\"gold\", cmd.getOptionValue(opts.getOption(\"gravy\")));\n        assertEquals(\"gold\", cmd.getOptionValues(opts.getOption(\"gravy\"))[0]);\n        assertEquals(\"garden\", cmd.getOptionValues(opts.getOption(\"gravy\"))[1]);\n        assertEquals(cmd.getArgs().length, 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testLongOptionalArgValueWithOption(CommandLineParser)", "name": "testLongOptionalArgValueWithOption", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalArgValueWithOption(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalArgValueWithOption(final CommandLineParser parser) throws Exception {\n        final String[] args = { \"--fish\", \"face\" };\n        final CommandLine cmd = parser.parse(opts, args);\n        assertTrue(cmd.hasOption(opts.getOption(\"fish\")));\n        assertEquals(\"face\", cmd.getOptionValue(opts.getOption(\"fish\")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testLongOptionalNArgValues(CommandLineParser)", "name": "testLongOptionalNArgValues", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalNArgValues(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalNArgValues(final CommandLineParser parser) throws Exception {\n        final String[] args = { \"--hide\", \"house\", \"hair\", \"head\" };\n        final CommandLine cmd = parser.parse(opts, args);\n        assertTrue(cmd.hasOption(\"hide\"));\n        assertEquals(\"house\", cmd.getOptionValue(\"hide\"));\n        assertEquals(\"house\", cmd.getOptionValues(\"hide\")[0]);\n        assertEquals(\"hair\", cmd.getOptionValues(\"hide\")[1]);\n        assertEquals(cmd.getArgs().length, 1);\n        assertEquals(\"head\", cmd.getArgs()[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testLongOptionalNArgValuesWithOption(CommandLineParser)", "name": "testLongOptionalNArgValuesWithOption", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalNArgValuesWithOption(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalNArgValuesWithOption(final CommandLineParser parser) throws Exception {\n        final CommandLine cmd = parser.parse(opts, new String[] { \"--hide\", \"house\", \"hair\", \"head\" });\n        assertNull(cmd.getOptionValues(NULL_OPTION));\n        assertNull(cmd.getOptionValues(NULL_STRING));\n        assertTrue(cmd.hasOption(opts.getOption(\"hide\")));\n        assertEquals(\"house\", cmd.getOptionValue(opts.getOption(\"hide\")));\n        assertEquals(\"house\", cmd.getOptionValues(opts.getOption(\"hide\"))[0]);\n        assertEquals(\"hair\", cmd.getOptionValues(opts.getOption(\"hide\"))[1]);\n        assertEquals(cmd.getArgs().length, 1);\n        assertEquals(\"head\", cmd.getArgs()[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testLongOptionalNoValue(CommandLineParser)", "name": "testLongOptionalNoValue", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalNoValue(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalNoValue(final CommandLineParser parser) throws Exception {\n        final String[] args = { \"--fish\" };\n        final CommandLine cmd = parser.parse(opts, args);\n        assertTrue(cmd.hasOption(\"fish\"));\n        assertNull(cmd.getOptionValue(\"fish\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testLongOptionalNoValueWithOption(CommandLineParser)", "name": "testLongOptionalNoValueWithOption", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalNoValueWithOption(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testLongOptionalNoValueWithOption(final CommandLineParser parser) throws Exception {\n        final String[] args = { \"--fish\" };\n        final CommandLine cmd = parser.parse(opts, args);\n        assertTrue(cmd.hasOption(opts.getOption(\"fish\")));\n        assertNull(cmd.getOptionValue(opts.getOption(\"fish\")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testLongWithArg()", "name": "testLongWithArg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongWithArg()", "original_string": "    @Test\n    public void testLongWithArg() {\n        assertTrue(cl.hasOption(\"d\"));\n        assertNotNull(cl.getOptionValue(\"d\"));\n        assertEquals(cl.getOptionValue(\"d\"), \"bar\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testLongWithArgWithOption()", "name": "testLongWithArgWithOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongWithArgWithOption()", "original_string": "    @Test\n    public void testLongWithArgWithOption() {\n        assertTrue(cl.hasOption(opts.getOption(\"d\")));\n        assertNotNull(cl.getOptionValue(opts.getOption(\"d\")));\n        assertEquals(cl.getOptionValue(opts.getOption(\"d\")), \"bar\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testShortNoArg()", "name": "testShortNoArg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortNoArg()", "original_string": "    @Test\n    public void testShortNoArg() {\n        assertTrue(cl.hasOption(\"a\"));\n        assertNull(cl.getOptionValue(\"a\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testShortNoArgWithOption()", "name": "testShortNoArgWithOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortNoArgWithOption()", "original_string": "    @Test\n    public void testShortNoArgWithOption() {\n        assertTrue(cl.hasOption(opts.getOption(\"a\")));\n        assertNull(cl.getOptionValue(opts.getOption(\"a\")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testShortOptionalArgNoValue(CommandLineParser)", "name": "testShortOptionalArgNoValue", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testShortOptionalArgNoValue(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testShortOptionalArgNoValue(final CommandLineParser parser) throws Exception {\n        final String[] args = { \"-e\" };\n        final CommandLine cmd = parser.parse(opts, args);\n        assertTrue(cmd.hasOption(\"e\"));\n        assertNull(cmd.getOptionValue(\"e\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testShortOptionalArgNoValueWithOption(CommandLineParser)", "name": "testShortOptionalArgNoValueWithOption", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testShortOptionalArgNoValueWithOption(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testShortOptionalArgNoValueWithOption(final CommandLineParser parser) throws Exception {\n        final String[] args = { \"-e\" };\n        final CommandLine cmd = parser.parse(opts, args);\n        assertTrue(cmd.hasOption(opts.getOption(\"e\")));\n        assertNull(cmd.getOptionValue(opts.getOption(\"e\")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testShortOptionalArgValue(CommandLineParser)", "name": "testShortOptionalArgValue", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testShortOptionalArgValue(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testShortOptionalArgValue(final CommandLineParser parser) throws Exception {\n        final String[] args = { \"-e\", \"everything\" };\n        final CommandLine cmd = parser.parse(opts, args);\n        assertTrue(cmd.hasOption(\"e\"));\n        assertEquals(\"everything\", cmd.getOptionValue(\"e\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testShortOptionalArgValues(CommandLineParser)", "name": "testShortOptionalArgValues", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testShortOptionalArgValues(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testShortOptionalArgValues(final CommandLineParser parser) throws Exception {\n        final String[] args = { \"-j\", \"ink\", \"idea\" };\n        final CommandLine cmd = parser.parse(opts, args);\n        assertTrue(cmd.hasOption(\"j\"));\n        assertEquals(\"ink\", cmd.getOptionValue(\"j\"));\n        assertEquals(\"ink\", cmd.getOptionValues(\"j\")[0]);\n        assertEquals(\"idea\", cmd.getOptionValues(\"j\")[1]);\n        assertEquals(cmd.getArgs().length, 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testShortOptionalArgValuesWithOption(CommandLineParser)", "name": "testShortOptionalArgValuesWithOption", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testShortOptionalArgValuesWithOption(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testShortOptionalArgValuesWithOption(final CommandLineParser parser) throws Exception {\n        final String[] args = { \"-j\", \"ink\", \"idea\" };\n        final CommandLine cmd = parser.parse(opts, args);\n        assertNull(cmd.getOptionValues(NULL_OPTION));\n        assertNull(cmd.getOptionValues(NULL_STRING));\n        assertTrue(cmd.hasOption(opts.getOption(\"j\")));\n        assertEquals(\"ink\", cmd.getOptionValue(opts.getOption(\"j\")));\n        assertEquals(\"ink\", cmd.getOptionValues(opts.getOption(\"j\"))[0]);\n        assertEquals(\"idea\", cmd.getOptionValues(opts.getOption(\"j\"))[1]);\n        assertEquals(cmd.getArgs().length, 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testShortOptionalArgValueWithOption(CommandLineParser)", "name": "testShortOptionalArgValueWithOption", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testShortOptionalArgValueWithOption(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testShortOptionalArgValueWithOption(final CommandLineParser parser) throws Exception {\n        final String[] args = { \"-e\", \"everything\" };\n        final CommandLine cmd = parser.parse(opts, args);\n        assertNull(cmd.getOptionValues(NULL_OPTION));\n        assertNull(cmd.getOptionValues(NULL_STRING));\n        assertTrue(cmd.hasOption(opts.getOption(\"e\")));\n        assertEquals(\"everything\", cmd.getOptionValue(opts.getOption(\"e\")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testShortOptionalNArgValues(CommandLineParser)", "name": "testShortOptionalNArgValues", "arg_nums": 1, "params": [{"name": "parser", "type": "CommandLineParser"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testShortOptionalNArgValues(final CommandLineParser parser)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"parsers\")\n    public void testShortOptionalNArgValues(final CommandLineParser parser) throws Exception {\n        final String[] args = { \"-i\", \"ink\", \"idea\", \"isotope\", \"ice\" };\n        final CommandLine cmd = parser.parse(opts, args);\n        assertNull(cmd.getOptionValues(NULL_OPTION));\n        assertNull(cmd.getOptionValues(NULL_STRING));\n        assertTrue(cmd.hasOption(\"i\"));\n        assertEquals(\"ink\", cmd.getOptionValue(\"i\"));\n        assertEquals(\"ink\", cmd.getOptionValues(\"i\")[0]);\n        assertEquals(\"idea\", cmd.getOptionValues(\"i\")[1]);\n        assertEquals(cmd.getArgs().length, 2);\n        assertEquals(\"isotope\", cmd.getArgs()[0]);\n        assertEquals(\"ice\", cmd.getArgs()[1]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"parsers\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"parsers\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testShortOptionalNArgValuesSeparated()", "name": "testShortOptionalNArgValuesSeparated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortOptionalNArgValuesSeparated()", "original_string": "    @Test\n    public void testShortOptionalNArgValuesSeparated() throws Exception {\n        final String[] args = { \"-v=ink\", \"-v=idea\", \"-v=isotope\", \"-v=ice\" };\n        final CommandLineParser parser = new DefaultParser();\n        final CommandLine cmd = parser.parse(opts, args);\n        assertNull(cmd.getOptionValues(NULL_OPTION));\n        assertNull(cmd.getOptionValues(NULL_STRING));\n        assertTrue(cmd.hasOption(\"v\"));\n        assertEquals(\"ink\", cmd.getOptionValue(\"v\"));\n        assertEquals(\"ink\", cmd.getOptionValues(\"v\")[0]);\n        assertEquals(\"idea\", cmd.getOptionValues(\"v\")[1]);\n        assertEquals(\"isotope\", cmd.getOptionValues(\"v\")[2]);\n        assertEquals(\"ice\", cmd.getOptionValues(\"v\")[3]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testShortOptionalNArgValuesWithOption()", "name": "testShortOptionalNArgValuesWithOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortOptionalNArgValuesWithOption()", "original_string": "    @Test\n    public void testShortOptionalNArgValuesWithOption() throws Exception {\n        final String[] args = { \"-i\", \"ink\", \"idea\", \"isotope\", \"ice\" };\n        final CommandLineParser parser = new PosixParser();\n        final CommandLine cmd = parser.parse(opts, args);\n        assertNull(cmd.getOptionValues(NULL_OPTION));\n        assertNull(cmd.getOptionValues(NULL_STRING));\n        assertTrue(cmd.hasOption(\"i\"));\n        assertEquals(\"ink\", cmd.getOptionValue(opts.getOption(\"i\")));\n        assertEquals(\"ink\", cmd.getOptionValues(opts.getOption(\"i\"))[0]);\n        assertEquals(\"idea\", cmd.getOptionValues(opts.getOption(\"i\"))[1]);\n        assertEquals(cmd.getArgs().length, 2);\n        assertEquals(\"isotope\", cmd.getArgs()[0]);\n        assertEquals(\"ice\", cmd.getArgs()[1]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testShortWithArg()", "name": "testShortWithArg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortWithArg()", "original_string": "    @Test\n    public void testShortWithArg() {\n        assertTrue(cl.hasOption(\"b\"));\n        assertNotNull(cl.getOptionValue(\"b\"));\n        assertEquals(cl.getOptionValue(\"b\"), \"foo\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest.[void]testShortWithArgWithOption()", "name": "testShortWithArgWithOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortWithArgWithOption()", "original_string": "    @Test\n    public void testShortWithArgWithOption() {\n        assertTrue(cl.hasOption(opts.getOption(\"b\")));\n        assertNotNull(cl.getOptionValue(opts.getOption(\"b\")));\n        assertEquals(cl.getOptionValue(opts.getOption(\"b\")), \"foo\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValueTest.java", "class_name": "ValueTest", "class_uri": "src/test/java/org/apache/commons/cli/ValueTest.java.ValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testAddValue()", "name": "testAddValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddValue()", "original_string": "    @Test\n    public void testAddValue() {\n        final Option option = new Option(\"f\", null);\n        assertThrows(UnsupportedOperationException.class, () -> option.addValue(\"\"));\n        assertThrows(IllegalArgumentException.class, () -> option.processValue(\"\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testBuilderEmpty()", "name": "testBuilderEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilderEmpty()", "original_string": "    @Test\n    public void testBuilderEmpty() {\n        assertThrows(IllegalArgumentException.class, () -> Option.builder().build());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testBuilderInsufficientParams1()", "name": "testBuilderInsufficientParams1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilderInsufficientParams1()", "original_string": "    @Test\n    public void testBuilderInsufficientParams1() {\n        assertThrows(IllegalArgumentException.class, () -> Option.builder().desc(\"desc\").build());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testBuilderInsufficientParams2()", "name": "testBuilderInsufficientParams2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilderInsufficientParams2()", "original_string": "    @Test\n    public void testBuilderInsufficientParams2() {\n        assertThrows(IllegalArgumentException.class, () -> Option.builder(null).desc(\"desc\").build());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testBuilderInvalidOptionName0()", "name": "testBuilderInvalidOptionName0", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilderInvalidOptionName0()", "original_string": "    @Test\n    public void testBuilderInvalidOptionName0() {\n        assertThrows(IllegalArgumentException.class, () -> Option.builder().option(null).build());\n        assertThrows(IllegalArgumentException.class, () -> Option.builder().option(\"\"));\n        assertThrows(IllegalArgumentException.class, () -> Option.builder().option(\" \"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testBuilderInvalidOptionName1()", "name": "testBuilderInvalidOptionName1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilderInvalidOptionName1()", "original_string": "    @Test\n    public void testBuilderInvalidOptionName1() {\n        assertThrows(IllegalArgumentException.class, () -> Option.builder().option(\"invalid?\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testBuilderInvalidOptionName2()", "name": "testBuilderInvalidOptionName2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilderInvalidOptionName2()", "original_string": "    @Test\n    public void testBuilderInvalidOptionName2() {\n        assertThrows(IllegalArgumentException.class, () -> Option.builder().option(\"invalid@\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testBuilderInvalidOptionName3()", "name": "testBuilderInvalidOptionName3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilderInvalidOptionName3()", "original_string": "    @Test\n    public void testBuilderInvalidOptionName3() {\n        assertThrows(IllegalArgumentException.class, () -> Option.builder(\"invalid?\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testBuilderInvalidOptionName4()", "name": "testBuilderInvalidOptionName4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilderInvalidOptionName4()", "original_string": "    @Test\n    public void testBuilderInvalidOptionName4() {\n        assertThrows(IllegalArgumentException.class, () -> Option.builder(\"invalid@\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testBuilderMethods()", "name": "testBuilderMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilderMethods()", "original_string": "    @Test\n    public void testBuilderMethods() {\n        final char defaultSeparator = (char) 0;\n\n        checkOption(Option.builder(\"a\").desc(\"desc\").build(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class, null,\n                null, null);\n        checkOption(Option.builder(\"a\").desc(\"desc\").build(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, String.class, null,\n                null, null);\n        checkOption(Option.builder(\"a\").desc(\"desc\").longOpt(\"aaa\").build(), \"a\", \"desc\", \"aaa\", Option.UNINITIALIZED, null, false, false, defaultSeparator,\n                String.class, null, null, null);\n        checkOption(Option.builder(\"a\").desc(\"desc\").hasArg(true).build(), \"a\", \"desc\", null, 1, null, false, false, defaultSeparator, String.class, null, null,\n                null);\n        checkOption(Option.builder(\"a\").desc(\"desc\").hasArg(false).build(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator,\n                String.class, null, null, null);\n        checkOption(Option.builder(\"a\").desc(\"desc\").hasArg(true).build(), \"a\", \"desc\", null, 1, null, false, false, defaultSeparator, String.class, null, null,\n                null);\n        checkOption(Option.builder(\"a\").desc(\"desc\").numberOfArgs(3).build(), \"a\", \"desc\", null, 3, null, false, false, defaultSeparator, String.class, null,\n                null, null);\n        checkOption(Option.builder(\"a\").desc(\"desc\").required(true).build(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, true, false, defaultSeparator,\n                String.class, null, null, null);\n        checkOption(Option.builder(\"a\").desc(\"desc\").required(false).build(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator,\n                String.class, null, null, null);\n\n        checkOption(Option.builder(\"a\").desc(\"desc\").argName(\"arg1\").build(), \"a\", \"desc\", null, Option.UNINITIALIZED, \"arg1\", false, false, defaultSeparator,\n                String.class, null, null, null);\n        checkOption(Option.builder(\"a\").desc(\"desc\").optionalArg(false).build(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator,\n                String.class, null, null, null);\n        checkOption(Option.builder(\"a\").desc(\"desc\").optionalArg(true).build(), \"a\", \"desc\", null, 1, null, false, true, defaultSeparator, String.class, null,\n                null, null);\n        checkOption(Option.builder(\"a\").desc(\"desc\").valueSeparator(':').build(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, ':',\n                String.class, null, null, null);\n        checkOption(Option.builder(\"a\").desc(\"desc\").type(Integer.class).build(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator,\n                Integer.class, null, null, null);\n        checkOption(Option.builder(\"a\").desc(\"desc\").type(null).build(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator,\n                String.class, null, null, null);\n        checkOption(Option.builder().option(\"a\").desc(\"desc\").type(Integer.class).build(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false,\n                defaultSeparator, Integer.class, null, null, null);\n        // Deprecated\n        checkOption(Option.builder().option(\"a\").desc(\"desc\").type(Integer.class).deprecated().build(), \"a\", \"desc\", null, Option.UNINITIALIZED, null, false,\n                false, defaultSeparator, Integer.class, \"\", false, \"\");\n        checkOption(Option.builder().option(\"a\").desc(\"desc\").type(Integer.class).deprecated(DeprecatedAttributes.builder().get()).build(), \"a\", \"desc\", null,\n                Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class, \"\", false, \"\");\n        checkOption(Option.builder().option(\"a\").desc(\"desc\").type(Integer.class).deprecated(DeprecatedAttributes.builder().setDescription(\"X\").get()).build(),\n                \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class, \"X\", false, \"\");\n        checkOption(\n                Option.builder().option(\"a\").desc(\"desc\").type(Integer.class)\n                        .deprecated(DeprecatedAttributes.builder().setDescription(\"X\").setForRemoval(true).get()).build(),\n                \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class, \"X\", true, \"\");\n        checkOption(\n                Option.builder().option(\"a\").desc(\"desc\").type(Integer.class)\n                        .deprecated(DeprecatedAttributes.builder().setDescription(\"X\").setForRemoval(true).setSince(\"2.0\").get()).build(),\n                \"a\", \"desc\", null, Option.UNINITIALIZED, null, false, false, defaultSeparator, Integer.class, \"X\", true, \"2.0\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testClear()", "name": "testClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClear()", "original_string": "    @Test\n    public void testClear() {\n        final TestOption option = new TestOption(\"x\", true, \"\");\n        assertEquals(0, option.getValuesList().size());\n        option.addValue(\"a\");\n        assertEquals(1, option.getValuesList().size());\n        option.clearValues();\n        assertEquals(0, option.getValuesList().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testClone()", "name": "testClone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClone()", "original_string": "    @Test\n    public void testClone() {\n        final TestOption a = new TestOption(\"a\", true, \"\");\n        final TestOption b = (TestOption) a.clone();\n        assertEquals(a, b);\n        assertNotSame(a, b);\n        a.setDescription(\"a\");\n        assertEquals(\"\", b.getDescription());\n        b.setArgs(2);\n        b.addValue(\"b1\");\n        b.addValue(\"b2\");\n        assertEquals(1, a.getArgs());\n        assertEquals(0, a.getValuesList().size());\n        assertEquals(2, b.getValues().length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " See https://issues.apache.org/jira/browse/CLI-21"}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testEquals()", "name": "testEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals()", "original_string": "    @Test\n    public void testEquals() {\n        final Option option1a = new Option(\"1\", null);\n        final Option option1b = new Option(\"1\", null);\n        final Option option2 = new Option(\"2\", null);\n        assertEquals(option1a, option1a);\n        assertEquals(option1a, option1b);\n        assertEquals(option1b, option1a);\n        assertNotEquals(option1a, option2);\n        assertNotEquals(option1b, option2);\n        assertNotEquals(option2, option1a);\n        assertNotEquals(option2, \"\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testGetValue()", "name": "testGetValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValue()", "original_string": "    @Test\n    public void testGetValue() {\n        final Option option = new Option(\"f\", null);\n        option.setArgs(Option.UNLIMITED_VALUES);\n\n        assertEquals(\"default\", option.getValue(\"default\"));\n        assertNull(option.getValue(0));\n\n        option.processValue(\"foo\");\n\n        assertEquals(\"foo\", option.getValue());\n        assertEquals(\"foo\", option.getValue(0));\n        assertEquals(\"foo\", option.getValue(\"default\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testHasArgName()", "name": "testHasArgName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasArgName()", "original_string": "    @Test\n    public void testHasArgName() {\n        final Option option = new Option(\"f\", null);\n\n        option.setArgName(null);\n        assertFalse(option.hasArgName());\n\n        option.setArgName(\"\");\n        assertFalse(option.hasArgName());\n\n        option.setArgName(\"file\");\n        assertTrue(option.hasArgName());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testHasArgs()", "name": "testHasArgs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasArgs()", "original_string": "    @Test\n    public void testHasArgs() {\n        final Option option = new Option(\"f\", null);\n\n        option.setArgs(0);\n        assertFalse(option.hasArgs());\n\n        option.setArgs(1);\n        assertFalse(option.hasArgs());\n\n        option.setArgs(10);\n        assertTrue(option.hasArgs());\n\n        option.setArgs(Option.UNLIMITED_VALUES);\n        assertTrue(option.hasArgs());\n\n        option.setArgs(Option.UNINITIALIZED);\n        assertFalse(option.hasArgs());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCode()", "original_string": "    @Test\n    public void testHashCode() {\n        assertNotEquals(Option.builder(\"test\").build().hashCode(), Option.builder(\"test2\").build().hashCode());\n        assertNotEquals(Option.builder(\"test\").build().hashCode(), Option.builder().longOpt(\"test\").build().hashCode());\n        assertNotEquals(Option.builder(\"test\").build().hashCode(), Option.builder(\"test\").longOpt(\"long test\").build().hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testSerialization()", "name": "testSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSerialization()", "original_string": "    @Test\n    public void testSerialization() throws IOException, ClassNotFoundException {\n        final Option option = Option.builder(\"o\").type(TypeHandlerTest.Instantiable.class).build();\n        assertEquals(Converter.DEFAULT, option.getConverter());\n        Option roundtrip = roundTrip(option);\n        assertEquals(Converter.DEFAULT, roundtrip.getConverter());\n        // verify unregistered class converters and verifiers get reset to default.\n        // converters are NOT Serializable, use a serialization proxy if you want that.\n        option.setConverter(Converter.DATE);\n        roundtrip = roundTrip(option);\n        assertEquals(Converter.DEFAULT, roundtrip.getConverter());\n        // verify registered class converters and verifiers do not get reset to default.\n        // converters are NOT Serializable, use a serialization proxy if you want that.\n        // verify earlier values still set.\n        assertEquals(Converter.DATE, option.getConverter());\n        roundtrip = roundTrip(option);\n        assertEquals(Converter.DEFAULT, roundtrip.getConverter());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testSubclass()", "name": "testSubclass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubclass()", "original_string": "    @Test\n    public void testSubclass() {\n        final Option option = new DefaultOption(\"f\", \"file\", \"myfile.txt\");\n        final Option clone = (Option) option.clone();\n        assertEquals(\"myfile.txt\", clone.getValue());\n        assertEquals(DefaultOption.class, clone.getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testTypeClass()", "name": "testTypeClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTypeClass()", "original_string": "    @Test\n    public void testTypeClass() {\n        final Option option = new Option(\"f\", null);\n        assertEquals(String.class, option.getType());\n        option.setType(CharSequence.class);\n        assertEquals(CharSequence.class, option.getType());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest.[void]testTypeObject()", "name": "testTypeObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTypeObject()", "original_string": "    @Test\n    public void testTypeObject() {\n        final Option option = new Option(\"f\", null);\n        assertEquals(String.class, option.getType());\n        @SuppressWarnings(\"cast\")\n        final Object type = CharSequence.class; // Do NOT remove cast\n        option.setType(type);\n        assertEquals(CharSequence.class, option.getType());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionTest.java", "class_name": "OptionTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionTest.java.OptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testAddConflictingOptions()", "name": "testAddConflictingOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddConflictingOptions()", "original_string": "    @Test\n    public void testAddConflictingOptions() {\n        final Options options1 = new Options();\n        final OptionGroup group1 = new OptionGroup();\n        group1.addOption(Option.builder(\"a\").build());\n        group1.addOption(Option.builder(\"b\").build());\n        options1.addOptionGroup(group1);\n        options1.addOption(Option.builder(\"x\").build());\n        options1.addOption(Option.builder(\"y\").build());\n        final Options options2 = new Options();\n        final OptionGroup group2 = new OptionGroup();\n        group2.addOption(Option.builder(\"x\").type(Integer.class).build());\n        group2.addOption(Option.builder(\"b\").type(Integer.class).build());\n        options2.addOptionGroup(group2);\n        options2.addOption(Option.builder(\"c\").build());\n        assertThrows(IllegalArgumentException.class, () -> options1.addOptions(options2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testAddNonConflictingOptions()", "name": "testAddNonConflictingOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddNonConflictingOptions()", "original_string": "    @Test\n    public void testAddNonConflictingOptions() {\n        final Options options1 = new Options();\n        final OptionGroup group1 = new OptionGroup();\n        group1.addOption(Option.builder(\"a\").build());\n        group1.addOption(Option.builder(\"b\").build());\n        options1.addOptionGroup(group1);\n        options1.addOption(Option.builder(\"x\").build());\n        options1.addOption(Option.builder(\"y\").build());\n\n        final Options options2 = new Options();\n        final OptionGroup group2 = new OptionGroup();\n        group2.addOption(Option.builder(\"c\").type(Integer.class).build());\n        group2.addOption(Option.builder(\"d\").type(Integer.class).build());\n        options2.addOptionGroup(group2);\n        options1.addOption(Option.builder(\"e\").build());\n        options1.addOption(Option.builder(\"f\").build());\n\n        final Options underTest = new Options();\n        underTest.addOptions(options1);\n        underTest.addOptions(options2);\n\n        final List<OptionGroup> expected = Arrays.asList(group1, group2);\n        assertTrue(expected.size() == underTest.getOptionGroups().size() && expected.containsAll(underTest.getOptionGroups()));\n        final Set<Option> expectOpt = new HashSet<>(options1.getOptions());\n        expectOpt.addAll(options2.getOptions());\n        assertEquals(8, expectOpt.size());\n        assertTrue(expectOpt.size() == underTest.getOptions().size() && expectOpt.containsAll(underTest.getOptions()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testAddOptions()", "name": "testAddOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddOptions()", "original_string": "    @Test\n    public void testAddOptions() {\n        final Options options = new Options();\n\n        final OptionGroup group1 = new OptionGroup();\n        group1.addOption(Option.builder(\"a\").build());\n        group1.addOption(Option.builder(\"b\").build());\n\n        options.addOptionGroup(group1);\n\n        options.addOption(Option.builder(\"X\").build());\n        options.addOption(Option.builder(\"y\").build());\n\n        final Options underTest = new Options();\n        underTest.addOptions(options);\n\n        assertEquals(options.getOptionGroups(), underTest.getOptionGroups());\n        assertArrayEquals(options.getOptions().toArray(), underTest.getOptions().toArray());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testAddOptions2X()", "name": "testAddOptions2X", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddOptions2X()", "original_string": "    @Test\n    public void testAddOptions2X() {\n        final Options options = new Options();\n\n        final OptionGroup group1 = new OptionGroup();\n        group1.addOption(Option.builder(\"a\").build());\n        group1.addOption(Option.builder(\"b\").build());\n\n        options.addOptionGroup(group1);\n\n        options.addOption(Option.builder(\"X\").build());\n        options.addOption(Option.builder(\"y\").build());\n\n        assertThrows(IllegalArgumentException.class, () -> options.addOptions(options));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testDeprecated()", "name": "testDeprecated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeprecated()", "original_string": "    @Test\n    public void testDeprecated() {\n        final Options options = new Options();\n        options.addOption(Option.builder().option(\"a\").build());\n        options.addOption(Option.builder().option(\"b\").deprecated().build());\n        options.addOption(Option.builder().option(\"c\")\n                .deprecated(DeprecatedAttributes.builder().setForRemoval(true).setSince(\"2.0\").setDescription(\"Use X.\").get()).build());\n        options.addOption(Option.builder().option(\"d\").deprecated().longOpt(\"longD\").hasArgs().build());\n        // toString()\n        assertTrue(options.getOption(\"a\").toString().startsWith(\"[ Option a\"));\n        assertTrue(options.getOption(\"b\").toString().startsWith(\"[ Option b\"));\n        assertTrue(options.getOption(\"c\").toString().startsWith(\"[ Option c\"));\n        // toDeprecatedString()\n        assertFalse(options.getOption(\"a\").toDeprecatedString().startsWith(\"Option a\"));\n        assertEquals(\"Option 'b': Deprecated\", options.getOption(\"b\").toDeprecatedString());\n        assertEquals(\"Option 'c': Deprecated for removal since 2.0: Use X.\", options.getOption(\"c\").toDeprecatedString());\n        assertToStrings(options.getOption(\"a\"));\n        assertToStrings(options.getOption(\"b\"));\n        assertToStrings(options.getOption(\"c\"));\n        assertToStrings(options.getOption(\"d\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testDuplicateLong()", "name": "testDuplicateLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateLong()", "original_string": "    @Test\n    public void testDuplicateLong() {\n        final Options options = new Options();\n        options.addOption(\"a\", \"--a\", false, \"toggle -a\");\n        options.addOption(\"a\", \"--a\", false, \"toggle -a*\");\n        assertEquals(\"toggle -a*\", options.getOption(\"a\").getDescription(), \"last one in wins\");\n        assertToStrings(options.getOption(\"a\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testDuplicateSimple()", "name": "testDuplicateSimple", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateSimple()", "original_string": "    @Test\n    public void testDuplicateSimple() {\n        final Options options = new Options();\n        options.addOption(\"a\", false, \"toggle -a\");\n        assertToStrings(options.getOption(\"a\"));\n        options.addOption(\"a\", true, \"toggle -a*\");\n        assertEquals(\"toggle -a*\", options.getOption(\"a\").getDescription(), \"last one in wins\");\n        assertToStrings(options.getOption(\"a\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testGetMatchingOpts()", "name": "testGetMatchingOpts", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetMatchingOpts()", "original_string": "    @Test\n    public void testGetMatchingOpts() {\n        final Options options = new Options();\n        OptionBuilder.withLongOpt(\"version\");\n        options.addOption(OptionBuilder.create());\n        OptionBuilder.withLongOpt(\"verbose\");\n        options.addOption(OptionBuilder.create());\n        assertTrue(options.getMatchingOptions(\"foo\").isEmpty());\n        assertEquals(1, options.getMatchingOptions(\"version\").size());\n        assertEquals(2, options.getMatchingOptions(\"ver\").size());\n        assertToStrings(options.getOption(\"version\"));\n        assertToStrings(options.getOption(\"verbose\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testGetOptionsGroups()", "name": "testGetOptionsGroups", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOptionsGroups()", "original_string": "    @Test\n    public void testGetOptionsGroups() {\n        final Options options = new Options();\n\n        final OptionGroup group1 = new OptionGroup();\n        group1.addOption(OptionBuilder.create('a'));\n        group1.addOption(OptionBuilder.create('b'));\n\n        final OptionGroup group2 = new OptionGroup();\n        group2.addOption(OptionBuilder.create('x'));\n        group2.addOption(OptionBuilder.create('y'));\n\n        options.addOptionGroup(group1);\n        options.addOptionGroup(group2);\n\n        assertNotNull(options.getOptionGroups());\n        assertEquals(2, options.getOptionGroups().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testHelpOptions()", "name": "testHelpOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHelpOptions()", "original_string": "    @Test\n    public void testHelpOptions() {\n        OptionBuilder.withLongOpt(\"long-only1\");\n        final Option longOnly1 = OptionBuilder.create();\n        OptionBuilder.withLongOpt(\"long-only2\");\n        final Option longOnly2 = OptionBuilder.create();\n        final Option shortOnly1 = OptionBuilder.create(\"1\");\n        final Option shortOnly2 = OptionBuilder.create(\"2\");\n        OptionBuilder.withLongOpt(\"bothA\");\n        final Option bothA = OptionBuilder.create(\"a\");\n        OptionBuilder.withLongOpt(\"bothB\");\n        final Option bothB = OptionBuilder.create(\"b\");\n\n        final Options options = new Options();\n        options.addOption(longOnly1);\n        options.addOption(longOnly2);\n        options.addOption(shortOnly1);\n        options.addOption(shortOnly2);\n        options.addOption(bothA);\n        options.addOption(bothB);\n\n        final Collection<Option> allOptions = new ArrayList<>();\n        allOptions.add(longOnly1);\n        allOptions.add(longOnly2);\n        allOptions.add(shortOnly1);\n        allOptions.add(shortOnly2);\n        allOptions.add(bothA);\n        allOptions.add(bothB);\n\n        final Collection<Option> helpOptions = options.helpOptions();\n\n        assertTrue(helpOptions.containsAll(allOptions), \"Everything in all should be in help\");\n        assertTrue(allOptions.containsAll(helpOptions), \"Everything in help should be in all\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testLong()", "name": "testLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLong()", "original_string": "    @Test\n    public void testLong() {\n        final Options options = new Options();\n\n        options.addOption(\"a\", \"--a\", false, \"toggle -a\");\n        options.addOption(\"b\", \"--b\", true, \"set -b\");\n\n        assertTrue(options.hasOption(\"a\"));\n        assertTrue(options.hasOption(\"b\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testMissingOptionException()", "name": "testMissingOptionException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMissingOptionException()", "original_string": "    @Test\n    public void testMissingOptionException() throws ParseException {\n        final Options options = new Options();\n        OptionBuilder.isRequired();\n        options.addOption(OptionBuilder.create(\"f\"));\n        try {\n            new PosixParser().parse(options, new String[0]);\n            fail(\"Expected MissingOptionException to be thrown\");\n        } catch (final MissingOptionException e) {\n            assertEquals(\"Missing required option: f\", e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testMissingOptionsException()", "name": "testMissingOptionsException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMissingOptionsException()", "original_string": "    @Test\n    public void testMissingOptionsException() throws ParseException {\n        final Options options = new Options();\n        OptionBuilder.isRequired();\n        options.addOption(OptionBuilder.create(\"f\"));\n        OptionBuilder.isRequired();\n        options.addOption(OptionBuilder.create(\"x\"));\n        try {\n            new PosixParser().parse(options, new String[0]);\n            fail(\"Expected MissingOptionException to be thrown\");\n        } catch (final MissingOptionException e) {\n            assertEquals(\"Missing required options: f, x\", e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testSimple()", "name": "testSimple", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSimple()", "original_string": "    @Test\n    public void testSimple() {\n        final Options options = new Options();\n\n        options.addOption(\"a\", false, \"toggle -a\");\n        options.addOption(\"b\", true, \"toggle -b\");\n\n        assertTrue(options.hasOption(\"a\"));\n        assertTrue(options.hasOption(\"b\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        final Options options = new Options();\n        options.addOption(\"f\", \"foo\", true, \"Foo\");\n        options.addOption(\"b\", \"bar\", false, \"Bar\");\n\n        final String s = options.toString();\n        assertNotNull(s, \"null string returned\");\n        assertTrue(s.toLowerCase().contains(\"foo\"), \"foo option missing\");\n        assertTrue(s.toLowerCase().contains(\"bar\"), \"bar option missing\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionsTest.java", "class_name": "OptionsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionsTest.java.OptionsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/UnrecognizedOptionExceptionTest.java.UnrecognizedOptionExceptionTest.[void]testConstructor()", "name": "testConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructor()", "original_string": "    @Test\n    public void testConstructor() {\n        assertEquals(\"a\", new UnrecognizedOptionException(\"a\").getMessage());\n        assertEquals(\"a\", new UnrecognizedOptionException(\"a\", \"b\").getMessage());\n        assertEquals(\"b\", new UnrecognizedOptionException(\"a\", \"b\").getOption());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/UnrecognizedOptionExceptionTest.java", "class_name": "UnrecognizedOptionExceptionTest", "class_uri": "src/test/java/org/apache/commons/cli/UnrecognizedOptionExceptionTest.java.UnrecognizedOptionExceptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java.PatternOptionBuilder_parsePatternTest.[void]testParsePatternSingleOption()", "name": "testParsePatternSingleOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testParsePatternSingleOption()", "original_string": "    @Test\n    public void testParsePatternSingleOption() {\n        Options options = PatternOptionBuilder.parsePattern(\"a\");\n        assertNotNull(options);\n        assertTrue(options.hasOption(\"a\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java", "class_name": "PatternOptionBuilder_parsePatternTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java.PatternOptionBuilder_parsePatternTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java.PatternOptionBuilder_parsePatternTest.[void]testParsePatternOptionWithType()", "name": "testParsePatternOptionWithType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testParsePatternOptionWithType()", "original_string": "    @Test\n    public void testParsePatternOptionWithType() {\n        Options options = PatternOptionBuilder.parsePattern(\"a@\");\n        assertNotNull(options);\n        assertTrue(options.hasOption(\"a\"));\n        assertEquals(PatternOptionBuilder.OBJECT_VALUE, options.getOption(\"a\").getType());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java", "class_name": "PatternOptionBuilder_parsePatternTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java.PatternOptionBuilder_parsePatternTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java.PatternOptionBuilder_parsePatternTest.[void]testParsePatternOptionWithRequired()", "name": "testParsePatternOptionWithRequired", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testParsePatternOptionWithRequired()", "original_string": "    @Test\n    public void testParsePatternOptionWithRequired() {\n        Options options = PatternOptionBuilder.parsePattern(\"a!\");\n        assertNotNull(options);\n        assertTrue(options.hasOption(\"a\"));\n        assertTrue(options.getOption(\"a\").isRequired());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java", "class_name": "PatternOptionBuilder_parsePatternTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java.PatternOptionBuilder_parsePatternTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java.PatternOptionBuilder_parsePatternTest.[void]testParsePatternMultipleOptions()", "name": "testParsePatternMultipleOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testParsePatternMultipleOptions()", "original_string": "    @Test\n    public void testParsePatternMultipleOptions() {\n        Options options = PatternOptionBuilder.parsePattern(\"ab@c!\");\n        assertNotNull(options);\n        assertTrue(options.hasOption(\"a\"));\n        assertTrue(options.hasOption(\"b\"));\n        assertTrue(options.hasOption(\"c\"));\n        assertEquals(PatternOptionBuilder.OBJECT_VALUE, options.getOption(\"b\").getType());\n        assertTrue(options.getOption(\"c\").isRequired());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java", "class_name": "PatternOptionBuilder_parsePatternTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java.PatternOptionBuilder_parsePatternTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java.PatternOptionBuilder_parsePatternTest.[void]testParsePatternEmpty()", "name": "testParsePatternEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testParsePatternEmpty()", "original_string": "    @Test\n    public void testParsePatternEmpty() {\n        Options options = PatternOptionBuilder.parsePattern(\"\");\n        assertNotNull(options);\n        assertEquals(0, options.getOptions().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java", "class_name": "PatternOptionBuilder_parsePatternTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java.PatternOptionBuilder_parsePatternTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java.PatternOptionBuilder_parsePatternTest.[void]testParsePatternUnsupportedType()", "name": "testParsePatternUnsupportedType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testParsePatternUnsupportedType()", "original_string": "    @Test\n    public void testParsePatternUnsupportedType() {\n        Options options = PatternOptionBuilder.parsePattern(\"a*\");\n        assertNotNull(options);\n        assertTrue(options.hasOption(\"a\"));\n        assertEquals(PatternOptionBuilder.FILES_VALUE, options.getOption(\"a\").getType());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java", "class_name": "PatternOptionBuilder_parsePatternTest", "class_uri": "src/test/java/org/apache/commons/cli/PatternOptionBuilder_parsePatternTest.java.PatternOptionBuilder_parsePatternTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AlreadySelectedExceptionTest.java.AlreadySelectedExceptionTest.[void]testConstructor()", "name": "testConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructor()", "original_string": "    @Test\n    public void testConstructor() {\n        assertEquals(\"a\", new AlreadySelectedException(\"a\").getMessage());\n        assertNull(new AlreadySelectedException(\"a\").getOption());\n        final Option option = new Option(\"a\", \"d\");\n        final OptionGroup group = new OptionGroup();\n        assertNotNull(new AlreadySelectedException(group, option).getMessage());\n        assertEquals(option, new AlreadySelectedException(group, option).getOption());\n        assertEquals(group, new AlreadySelectedException(group, option).getOptionGroup());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AlreadySelectedExceptionTest.java", "class_name": "AlreadySelectedExceptionTest", "class_uri": "src/test/java/org/apache/commons/cli/AlreadySelectedExceptionTest.java.AlreadySelectedExceptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ConverterTests.java.ConverterTests.[void]classTests()", "name": "classTests", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void classTests()", "original_string": "    @Test\n    public void classTests() throws Exception {\n\n        assertNotNull(Converter.CLASS.apply(this.getClass().getName()), this.getClass().getName());\n        assertNotNull(Converter.CLASS.apply(this.getClass().getCanonicalName()), this.getClass().getCanonicalName());\n        assertThrows(ClassNotFoundException.class, () -> Converter.CLASS.apply(this.getClass().getSimpleName()),\n                this.getClass().getSimpleName());\n        assertNotNull(Converter.CLASS.apply(this.getClass().getTypeName()), this.getClass().getTypeName());\n\n        assertThrows(ClassNotFoundException.class, () -> Converter.CLASS.apply(\"foo.bar\"));\n        assertNotNull(Converter.CLASS.apply(AClassWithoutADefaultConstructor.class.getName()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ConverterTests.java", "class_name": "ConverterTests", "class_uri": "src/test/java/org/apache/commons/cli/ConverterTests.java.ConverterTests", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ConverterTests.java.ConverterTests.[void]dateTests()", "name": "dateTests", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void dateTests()", "original_string": "    @Test\n    public void dateTests() throws Exception {\n        assertThrows(java.text.ParseException.class, () -> Converter.DATE.apply(\"whatever\"));\n\n        /*\n         * Dates calculated from strings are dependent upon configuration and environment settings for the\n         * machine on which the test is running.  To avoid this problem, convert the time into a string\n         * and then unparse that using the converter.  This produces strings that always match the correct\n         * time zone.\n         */\n        final Date expected = new Date(1023400137000L);\n        final DateFormat dateFormat = new SimpleDateFormat(\"EEE MMM dd HH:mm:ss zzz yyyy\");\n        final String formatted = dateFormat.format(expected);\n        assertEquals(expected, Converter.DATE.apply(formatted));\n\n        assertThrows(java.text.ParseException.class, () -> Converter.DATE.apply(\"Jun 06 17:48:57 EDT 2002\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ConverterTests.java", "class_name": "ConverterTests", "class_uri": "src/test/java/org/apache/commons/cli/ConverterTests.java.ConverterTests", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ConverterTests.java.ConverterTests.[void]fileTests()", "name": "fileTests", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void fileTests()", "original_string": "    @Test\n    public void fileTests() throws Exception {\n        final URL url = this.getClass().getClassLoader().getResource(\"./org/apache/commons/cli/existing-readable.file\");\n        final String fileName = url.toString().substring(\"file:\".length());\n        assertNotNull(Converter.FILE.apply(fileName));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ConverterTests.java", "class_name": "ConverterTests", "class_uri": "src/test/java/org/apache/commons/cli/ConverterTests.java.ConverterTests", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ConverterTests.java.ConverterTests.[void]numberTests(String,Number)", "name": "numberTests", "arg_nums": 2, "params": [{"name": "str", "type": "String"}, {"name": "expected", "type": "Number"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"numberTestParameters\")\n    public void numberTests(final String str, final Number expected)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"numberTestParameters\")\n    public void numberTests(final String str, final Number expected) throws Exception {\n        if (expected != null) {\n            assertEquals(expected, Converter.NUMBER.apply(str));\n        } else {\n            assertThrows(NumberFormatException.class, () -> Converter.NUMBER.apply(str));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ConverterTests.java", "class_name": "ConverterTests", "class_uri": "src/test/java/org/apache/commons/cli/ConverterTests.java.ConverterTests", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"numberTestParameters\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"numberTestParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ConverterTests.java.ConverterTests.[void]objectTests()", "name": "objectTests", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void objectTests()", "original_string": "    @Test\n    public void objectTests() throws Exception {\n        assertNotNull(Converter.OBJECT.apply(this.getClass().getName()), this.getClass().getName());\n        assertNotNull(Converter.OBJECT.apply(this.getClass().getCanonicalName()), this.getClass().getCanonicalName());\n        assertThrows(ClassNotFoundException.class, () -> Converter.OBJECT.apply(this.getClass().getSimpleName()),\n                this.getClass().getSimpleName());\n        assertNotNull(Converter.OBJECT.apply(this.getClass().getTypeName()), this.getClass().getTypeName());\n\n        assertThrows(ClassNotFoundException.class, () -> Converter.OBJECT.apply(\"foo.bar\"));\n        assertThrows(NoSuchMethodException.class, () -> Converter.OBJECT.apply(AClassWithoutADefaultConstructor.class.getName()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ConverterTests.java", "class_name": "ConverterTests", "class_uri": "src/test/java/org/apache/commons/cli/ConverterTests.java.ConverterTests", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ConverterTests.java.ConverterTests.[void]urlTests()", "name": "urlTests", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void urlTests()", "original_string": "    @Test\n    public void urlTests() throws Exception {\n        assertEquals(new URL(\"http://apache.org\"), Converter.URL.apply(\"http://apache.org\"));\n        assertThrows(java.net.MalformedURLException.class, () -> Converter.URL.apply(\"foo.bar\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ConverterTests.java", "class_name": "ConverterTests", "class_uri": "src/test/java/org/apache/commons/cli/ConverterTests.java.ConverterTests", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_cloneTest.java.Option_cloneTest.[void]testClone()", "name": "testClone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClone()", "original_string": "    @Test\n    public void testClone() {\n        Option clonedOption = (Option) option.clone();\n\n        assertNotSame(option, clonedOption);\n        assertEquals(option.getOpt(), clonedOption.getOpt());\n        assertEquals(option.getDescription(), clonedOption.getDescription());\n        assertEquals(option.getValuesList(), clonedOption.getValuesList());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_cloneTest.java", "class_name": "Option_cloneTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_cloneTest.java.Option_cloneTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_cloneTest.java.Option_cloneTest.[void]testCloneWithEmptyValues()", "name": "testCloneWithEmptyValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloneWithEmptyValues()", "original_string": "    @Test\n    public void testCloneWithEmptyValues() {\n        option.clearValues();\n        Option clonedOption = (Option) option.clone();\n\n        assertNotSame(option, clonedOption);\n        assertEquals(option.getOpt(), clonedOption.getOpt());\n        assertEquals(option.getDescription(), clonedOption.getDescription());\n        assertTrue(clonedOption.getValuesList().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_cloneTest.java", "class_name": "Option_cloneTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_cloneTest.java.Option_cloneTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/Option_cloneTest.java.Option_cloneTest.[void]testCloneWithNullValues()", "name": "testCloneWithNullValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloneWithNullValues()", "original_string": "    @Test\n    public void testCloneWithNullValues() {\n        option.clearValues();\n        option.processValue(null);\n        Option clonedOption = (Option) option.clone();\n\n        assertNotSame(option, clonedOption);\n        assertEquals(option.getOpt(), clonedOption.getOpt());\n        assertEquals(option.getDescription(), clonedOption.getDescription());\n        assertEquals(1, clonedOption.getValuesList().size());\n        assertNull(clonedOption.getValuesList().get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/Option_cloneTest.java", "class_name": "Option_cloneTest", "class_uri": "src/test/java/org/apache/commons/cli/Option_cloneTest.java.Option_cloneTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilder_hasOptionalArgsTest.java.OptionBuilder_hasOptionalArgsTest.[void]testHasOptionalArgs()", "name": "testHasOptionalArgs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasOptionalArgs()", "original_string": "    @Test\n    public void testHasOptionalArgs() {\n        OptionBuilder.hasOptionalArgs();\n        Option option = OptionBuilder.create(\"test\");\n        assertEquals(Option.UNLIMITED_VALUES, option.getArgs());\n        assertTrue(option.hasOptionalArg());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilder_hasOptionalArgsTest.java", "class_name": "OptionBuilder_hasOptionalArgsTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilder_hasOptionalArgsTest.java.OptionBuilder_hasOptionalArgsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ParseExceptionTest.java.ParseExceptionTest.[void]testConstructor()", "name": "testConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructor()", "original_string": "    @Test\n    public void testConstructor() {\n        assertEquals(\"a\", new ParseException(\"a\").getMessage());\n        final Throwable t = new IOException();\n        assertEquals(t, new ParseException(t).getCause());\n        assertEquals(t, ParseException.wrap(t).getCause());\n        final ParseException pe = new ParseException(\"A\");\n        assertEquals(pe, ParseException.wrap(pe));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ParseExceptionTest.java", "class_name": "ParseExceptionTest", "class_uri": "src/test/java/org/apache/commons/cli/ParseExceptionTest.java.ParseExceptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLine_getOptionObjectTest.java.CommandLine_getOptionObjectTest.[void]testGetOptionObjectSuccess()", "name": "testGetOptionObjectSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOptionObjectSuccess()", "original_string": "    @Test\n    public void testGetOptionObjectSuccess() {\n        String opt = \"validOption\";\n        // Mocking the behavior of getParsedOptionValue to return a non-null object\n        commandLine = new CommandLine() {\n            @Override\n            public <T> T getParsedOptionValue(String opt) throws ParseException {\n                return (T) new Object();\n            }\n        };\n        assertNotNull(commandLine.getOptionObject(opt));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLine_getOptionObjectTest.java", "class_name": "CommandLine_getOptionObjectTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLine_getOptionObjectTest.java.CommandLine_getOptionObjectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLine_getOptionObjectTest.java.CommandLine_getOptionObjectTest.[void]testGetOptionObjectParseException()", "name": "testGetOptionObjectParseException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOptionObjectParseException()", "original_string": "    @Test\n    public void testGetOptionObjectParseException() {\n        String opt = \"invalidOption\";\n        // Mocking the behavior of getParsedOptionValue to throw ParseException\n        commandLine = new CommandLine() {\n            @Override\n            public <T> T getParsedOptionValue(String opt) throws ParseException {\n                throw new ParseException(\"Invalid option\");\n            }\n        };\n        assertNull(commandLine.getOptionObject(opt));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLine_getOptionObjectTest.java", "class_name": "CommandLine_getOptionObjectTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLine_getOptionObjectTest.java.CommandLine_getOptionObjectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest.[void]testBaseOptionCharOpt()", "name": "testBaseOptionCharOpt", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBaseOptionCharOpt()", "original_string": "    @Test\n    public void testBaseOptionCharOpt() {\n        final Option base = OptionBuilder.withDescription(\"option description\").create('o');\n\n        assertEquals(\"o\", base.getOpt());\n        assertEquals(\"option description\", base.getDescription());\n        assertFalse(base.hasArg());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java", "class_name": "OptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest.[void]testBaseOptionStringOpt()", "name": "testBaseOptionStringOpt", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBaseOptionStringOpt()", "original_string": "    @Test\n    public void testBaseOptionStringOpt() {\n        final Option base = OptionBuilder.withDescription(\"option description\").create(\"o\");\n\n        assertEquals(\"o\", base.getOpt());\n        assertEquals(\"option description\", base.getDescription());\n        assertFalse(base.hasArg());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java", "class_name": "OptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest.[void]testBuilderIsResettedAlways()", "name": "testBuilderIsResettedAlways", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilderIsResettedAlways()", "original_string": "    @Test\n    public void testBuilderIsResettedAlways() {\n        try {\n            OptionBuilder.withDescription(\"JUnit\").create('\"');\n            fail(\"IllegalArgumentException expected\");\n        } catch (final IllegalArgumentException e) {\n            // expected\n        }\n        assertNull(OptionBuilder.create('x').getDescription(), \"we inherited a description\");\n\n        try {\n            OptionBuilder.withDescription(\"JUnit\").create();\n            fail(\"IllegalArgumentException expected\");\n        } catch (final IllegalArgumentException e) {\n            // expected\n        }\n        assertNull(OptionBuilder.create('x').getDescription(), \"we inherited a description\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java", "class_name": "OptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest.[void]testCompleteOption()", "name": "testCompleteOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompleteOption()", "original_string": "    @Test\n    public void testCompleteOption() {\n        //@formatter:off\n        final Option simple = OptionBuilder.withLongOpt(\"simple option\")\n                                     .hasArg()\n                                     .isRequired()\n                                     .hasArgs()\n                                     .withType(Float.class)\n                                     .withDescription(\"this is a simple option\")\n                                     .create('s');\n        //@formatter:on\n\n        assertEquals(\"s\", simple.getOpt());\n        assertEquals(\"simple option\", simple.getLongOpt());\n        assertEquals(\"this is a simple option\", simple.getDescription());\n        assertEquals(simple.getType(), Float.class);\n        assertTrue(simple.hasArg());\n        assertTrue(simple.isRequired());\n        assertTrue(simple.hasArgs());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java", "class_name": "OptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest.[void]testCreateIncompleteOption()", "name": "testCreateIncompleteOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateIncompleteOption()", "original_string": "    @Test\n    public void testCreateIncompleteOption() {\n        try {\n            OptionBuilder.hasArg().create();\n            fail(\"Incomplete option should be rejected\");\n        } catch (final IllegalArgumentException e) {\n            // expected\n\n            // implicitly reset the builder\n            OptionBuilder.create(\"opt\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java", "class_name": "OptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest.[void]testIllegalOptions()", "name": "testIllegalOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIllegalOptions()", "original_string": "    @Test\n    public void testIllegalOptions() {\n        // bad single character option\n        try {\n            OptionBuilder.withDescription(\"option description\").create('\"');\n            fail(\"IllegalArgumentException not caught\");\n        } catch (final IllegalArgumentException exp) {\n            // success\n        }\n\n        // bad character in option string\n        try {\n            OptionBuilder.create(\"opt`\");\n            fail(\"IllegalArgumentException not caught\");\n        } catch (final IllegalArgumentException exp) {\n            // success\n        }\n\n        // valid option\n        try {\n            OptionBuilder.create(\"opt\");\n            // success\n        } catch (final IllegalArgumentException exp) {\n            fail(\"IllegalArgumentException caught\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java", "class_name": "OptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest.[void]testOptionArgNumbers()", "name": "testOptionArgNumbers", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOptionArgNumbers()", "original_string": "    @Test\n    public void testOptionArgNumbers() {\n        //@formatter:off\n        final Option opt = OptionBuilder.withDescription(\"option description\")\n                                  .hasArgs(2)\n                                  .create('o');\n        //@formatter:on\n        assertEquals(2, opt.getArgs());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java", "class_name": "OptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest.[void]testSpecialOptChars()", "name": "testSpecialOptChars", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSpecialOptChars()", "original_string": "    @Test\n    public void testSpecialOptChars() throws Exception {\n        // '?'\n        final Option opt1 = OptionBuilder.withDescription(\"help options\").create('?');\n        assertEquals(\"?\", opt1.getOpt());\n\n        // '@'\n        final Option opt2 = OptionBuilder.withDescription(\"read from stdin\").create('@');\n        assertEquals(\"@\", opt2.getOpt());\n\n        // ' '\n        try {\n            OptionBuilder.create(' ');\n            fail(\"IllegalArgumentException not caught\");\n        } catch (final IllegalArgumentException e) {\n            // success\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java", "class_name": "OptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest.[void]testTwoCompleteOptions()", "name": "testTwoCompleteOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTwoCompleteOptions()", "original_string": "    @Test\n    public void testTwoCompleteOptions() {\n        //@formatter:off\n        Option simple = OptionBuilder.withLongOpt(\"simple option\")\n                                     .hasArg()\n                                     .isRequired()\n                                     .hasArgs()\n                                     .withType(Float.class)\n                                     .withDescription(\"this is a simple option\")\n                                     .create('s');\n        //@formatter:on\n\n        assertEquals(\"s\", simple.getOpt());\n        assertEquals(\"simple option\", simple.getLongOpt());\n        assertEquals(\"this is a simple option\", simple.getDescription());\n        assertEquals(simple.getType(), Float.class);\n        assertTrue(simple.hasArg());\n        assertTrue(simple.isRequired());\n        assertTrue(simple.hasArgs());\n\n        //@formatter:off\n        simple = OptionBuilder.withLongOpt(\"dimple option\")\n                              .hasArg()\n                              .withDescription(\"this is a dimple option\")\n                              .create('d');\n        //@formatter:on\n\n        assertEquals(\"d\", simple.getOpt());\n        assertEquals(\"dimple option\", simple.getLongOpt());\n        assertEquals(\"this is a dimple option\", simple.getDescription());\n        assertEquals(String.class, simple.getType());\n        assertTrue(simple.hasArg());\n        assertFalse(simple.isRequired());\n        assertFalse(simple.hasArgs());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java", "class_name": "OptionBuilderTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilderTest.java.OptionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testAmbiguousLongWithoutEqualSingleDash()", "name": "testAmbiguousLongWithoutEqualSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAmbiguousLongWithoutEqualSingleDash()", "original_string": "    @Test\n    public void testAmbiguousLongWithoutEqualSingleDash() throws Exception {\n        final String[] args = { \"-b\", \"-foobar\" };\n\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasOptionalArg().create('f'));\n        options.addOption(OptionBuilder.withLongOpt(\"bar\").hasOptionalArg().create('b'));\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertTrue(cl.hasOption(\"b\"));\n        assertTrue(cl.hasOption(\"f\"));\n        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testAmbiguousLongWithoutEqualSingleDash2()", "name": "testAmbiguousLongWithoutEqualSingleDash2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAmbiguousLongWithoutEqualSingleDash2()", "original_string": "    @Test\n    public void testAmbiguousLongWithoutEqualSingleDash2() throws Exception {\n        final String[] args = { \"-b\", \"-foobar\" };\n\n        final Options options = new Options();\n        options.addOption(Option.builder().longOpt(\"foo\").option(\"f\").optionalArg(true).build());\n        options.addOption(Option.builder().longOpt(\"bar\").option(\"b\").optionalArg(false).build());\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertTrue(cl.hasOption(\"b\"));\n        assertTrue(cl.hasOption(\"f\"));\n        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testAmbiguousPartialLongOption1()", "name": "testAmbiguousPartialLongOption1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAmbiguousPartialLongOption1()", "original_string": "    @Test\n    public void testAmbiguousPartialLongOption1() throws Exception {\n        final String[] args = { \"--ver\" };\n\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n\n        boolean caught = false;\n\n        try {\n            parser.parse(options, args);\n        } catch (final AmbiguousOptionException e) {\n            caught = true;\n            assertEquals(\"--ver\", e.getOption(), \"Partial option\");\n            assertNotNull(e.getMatchingOptions(), \"Matching options null\");\n            assertEquals(2, e.getMatchingOptions().size(), \"Matching options size\");\n        }\n\n        assertTrue(caught, \"Confirm MissingArgumentException caught\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testAmbiguousPartialLongOption2()", "name": "testAmbiguousPartialLongOption2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAmbiguousPartialLongOption2()", "original_string": "    @Test\n    public void testAmbiguousPartialLongOption2() throws Exception {\n        final String[] args = { \"-ver\" };\n\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n\n        boolean caught = false;\n\n        try {\n            parser.parse(options, args);\n        } catch (final AmbiguousOptionException e) {\n            caught = true;\n            assertEquals(\"-ver\", e.getOption(), \"Partial option\");\n            assertNotNull(e.getMatchingOptions(), \"Matching options null\");\n            assertEquals(2, e.getMatchingOptions().size(), \"Matching options size\");\n        }\n\n        assertTrue(caught, \"Confirm MissingArgumentException caught\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testAmbiguousPartialLongOption3()", "name": "testAmbiguousPartialLongOption3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAmbiguousPartialLongOption3()", "original_string": "    @Test\n    public void testAmbiguousPartialLongOption3() throws Exception {\n        final String[] args = { \"--ver=1\" };\n\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n\n        boolean caught = false;\n\n        try {\n            parser.parse(options, args);\n        } catch (final AmbiguousOptionException e) {\n            caught = true;\n            assertEquals(\"--ver\", e.getOption(), \"Partial option\");\n            assertNotNull(e.getMatchingOptions(), \"Matching options null\");\n            assertEquals(2, e.getMatchingOptions().size(), \"Matching options size\");\n        }\n\n        assertTrue(caught, \"Confirm MissingArgumentException caught\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testAmbiguousPartialLongOption4()", "name": "testAmbiguousPartialLongOption4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAmbiguousPartialLongOption4()", "original_string": "    @Test\n    public void testAmbiguousPartialLongOption4() throws Exception {\n        final String[] args = { \"-ver=1\" };\n\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n\n        boolean caught = false;\n\n        try {\n            parser.parse(options, args);\n        } catch (final AmbiguousOptionException e) {\n            caught = true;\n            assertEquals(\"-ver\", e.getOption(), \"Partial option\");\n            assertNotNull(e.getMatchingOptions(), \"Matching options null\");\n            assertEquals(2, e.getMatchingOptions().size(), \"Matching options size\");\n        }\n\n        assertTrue(caught, \"Confirm MissingArgumentException caught\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testArgumentStartingWithHyphen()", "name": "testArgumentStartingWithHyphen", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testArgumentStartingWithHyphen()", "original_string": "    @Test\n    public void testArgumentStartingWithHyphen() throws Exception {\n        final String[] args = { \"-b\", \"-foo\" };\n\n        final CommandLine cl = parser.parse(options, args);\n        assertEquals(\"-foo\", cl.getOptionValue(\"b\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testBursting()", "name": "testBursting", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBursting()", "original_string": "    @Test\n    public void testBursting() throws Exception {\n        final String[] args = { \"-acbtoast\", \"foo\", \"bar\" };\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertTrue(cl.hasOption(\"a\"), \"Confirm -a is set\");\n        assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\n        assertTrue(cl.hasOption(\"c\"), \"Confirm -c is set\");\n        assertEquals(\"toast\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\n        assertEquals(2, cl.getArgList().size(), \"Confirm size of extra args\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testDoubleDash1()", "name": "testDoubleDash1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoubleDash1()", "original_string": "    @Test\n    public void testDoubleDash1() throws Exception {\n        final String[] args = { \"--copt\", \"--\", \"-b\", \"toast\" };\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertTrue(cl.hasOption(\"c\"), \"Confirm -c is set\");\n        assertFalse(cl.hasOption(\"b\"), \"Confirm -b is not set\");\n        assertEquals(2, cl.getArgList().size(), \"Confirm 2 extra args: \" + cl.getArgList().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testDoubleDash2()", "name": "testDoubleDash2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoubleDash2()", "original_string": "    @Test\n    public void testDoubleDash2() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.hasArg().create('n'));\n        options.addOption(OptionBuilder.create('m'));\n\n        try {\n            parser.parse(options, new String[] { \"-n\", \"--\", \"-m\" });\n            fail(\"MissingArgumentException not thrown for option -n\");\n        } catch (final MissingArgumentException e) {\n            assertNotNull(e.getOption(), \"option null\");\n            assertEquals(\"n\", e.getOption().getOpt());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testLongOptionQuoteHandling()", "name": "testLongOptionQuoteHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongOptionQuoteHandling()", "original_string": "    @Test\n    public void testLongOptionQuoteHandling() throws Exception {\n        final String[] args = { \"--bfile\", \"\\\"quoted string\\\"\" };\n        final CommandLine cl = parser.parse(options, args);\n        assertEquals(\"quoted string\", cl.getOptionValue(\"b\"), \"Confirm --bfile \\\"arg\\\" strips quotes\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testLongOptionWithEqualsQuoteHandling()", "name": "testLongOptionWithEqualsQuoteHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongOptionWithEqualsQuoteHandling()", "original_string": "    @Test\n    public void testLongOptionWithEqualsQuoteHandling() throws Exception {\n        final String[] args = { \"--bfile=\\\"quoted string\\\"\" };\n        final CommandLine cl = parser.parse(options, args);\n        assertEquals(\"quoted string\", cl.getOptionValue(\"b\"), \"Confirm --bfile=\\\"arg\\\" strips quotes\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testLongWithEqualDoubleDash()", "name": "testLongWithEqualDoubleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongWithEqualDoubleDash()", "original_string": "    @Test\n    public void testLongWithEqualDoubleDash() throws Exception {\n        final String[] args = { \"--foo=bar\" };\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n        final CommandLine cl = parser.parse(options, args);\n        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testLongWithEqualSingleDash()", "name": "testLongWithEqualSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongWithEqualSingleDash()", "original_string": "    @Test\n    public void testLongWithEqualSingleDash() throws Exception {\n        final String[] args = { \"-foo=bar\" };\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n        final CommandLine cl = parser.parse(options, args);\n        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testLongWithoutEqualDoubleDash()", "name": "testLongWithoutEqualDoubleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongWithoutEqualDoubleDash()", "original_string": "    @Test\n    public void testLongWithoutEqualDoubleDash() throws Exception {\n        final String[] args = { \"--foobar\" };\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n        final CommandLine cl = parser.parse(options, args, true);\n        assertFalse(cl.hasOption(\"foo\")); // foo isn't expected to be recognized with a double dash\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testLongWithoutEqualSingleDash()", "name": "testLongWithoutEqualSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongWithoutEqualSingleDash()", "original_string": "    @Test\n    public void testLongWithoutEqualSingleDash() throws Exception {\n        final String[] args = { \"-foobar\" };\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n        final CommandLine cl = parser.parse(options, args);\n        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testLongWithUnexpectedArgument1()", "name": "testLongWithUnexpectedArgument1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongWithUnexpectedArgument1()", "original_string": "    @Test\n    public void testLongWithUnexpectedArgument1() throws Exception {\n        final String[] args = { \"--foo=bar\" };\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\n        try {\n            parser.parse(options, args);\n        } catch (final UnrecognizedOptionException e) {\n            assertEquals(\"--foo=bar\", e.getOption());\n            return;\n        }\n        fail(\"UnrecognizedOptionException not thrown\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testLongWithUnexpectedArgument2()", "name": "testLongWithUnexpectedArgument2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongWithUnexpectedArgument2()", "original_string": "    @Test\n    public void testLongWithUnexpectedArgument2() throws Exception {\n        final String[] args = { \"-foobar\" };\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\n        try {\n            parser.parse(options, args);\n        } catch (final UnrecognizedOptionException e) {\n            assertEquals(\"-foobar\", e.getOption());\n            return;\n        }\n        fail(\"UnrecognizedOptionException not thrown\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testMissingArg()", "name": "testMissingArg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMissingArg()", "original_string": "    @Test\n    public void testMissingArg() throws Exception {\n        final String[] args = { \"-b\" };\n        boolean caught = false;\n        try {\n            parser.parse(options, args);\n        } catch (final MissingArgumentException e) {\n            caught = true;\n            assertEquals(\"b\", e.getOption().getOpt(), \"option missing an argument\");\n        }\n        assertTrue(caught, \"Confirm MissingArgumentException caught\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testMissingArgWithBursting()", "name": "testMissingArgWithBursting", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMissingArgWithBursting()", "original_string": "    @Test\n    public void testMissingArgWithBursting() throws Exception {\n        final String[] args = { \"-acb\" };\n        boolean caught = false;\n        try {\n            parser.parse(options, args);\n        } catch (final MissingArgumentException e) {\n            caught = true;\n            assertEquals(\"b\", e.getOption().getOpt(), \"option missing an argument\");\n        }\n        assertTrue(caught, \"Confirm MissingArgumentException caught\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testMissingRequiredGroup()", "name": "testMissingRequiredGroup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMissingRequiredGroup()", "original_string": "    @Test\n    public void testMissingRequiredGroup() throws Exception {\n        final OptionGroup group = new OptionGroup();\n        group.addOption(OptionBuilder.create(\"a\"));\n        group.addOption(OptionBuilder.create(\"b\"));\n        group.setRequired(true);\n\n        final Options options = new Options();\n        options.addOptionGroup(group);\n        options.addOption(OptionBuilder.isRequired().create(\"c\"));\n\n        try {\n            parser.parse(options, new String[] { \"-c\" });\n            fail(\"MissingOptionException not thrown\");\n        } catch (final MissingOptionException e) {\n            assertEquals(1, e.getMissingOptions().size());\n            assertTrue(e.getMissingOptions().get(0) instanceof OptionGroup);\n        } catch (final ParseException e) {\n            fail(\"Expected to catch MissingOptionException\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testMissingRequiredOption()", "name": "testMissingRequiredOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMissingRequiredOption()", "original_string": "    @Test\n    public void testMissingRequiredOption() {\n        final String[] args = { \"-a\" };\n\n        final Options options = new Options();\n        options.addOption(\"a\", \"enable-a\", false, null);\n        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n\n        try {\n            parser.parse(options, args);\n            fail(\"exception should have been thrown\");\n        } catch (final MissingOptionException e) {\n            assertEquals(\"Missing required option: b\", e.getMessage(), \"Incorrect exception message\");\n            assertTrue(e.getMissingOptions().contains(\"b\"));\n        } catch (final ParseException e) {\n            fail(\"expected to catch MissingOptionException\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testMissingRequiredOptions()", "name": "testMissingRequiredOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMissingRequiredOptions()", "original_string": "    @Test\n    public void testMissingRequiredOptions() {\n        final String[] args = { \"-a\" };\n\n        final Options options = new Options();\n        options.addOption(\"a\", \"enable-a\", false, null);\n        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n        options.addOption(OptionBuilder.withLongOpt(\"cfile\").hasArg().isRequired().create('c'));\n\n        try {\n            parser.parse(options, args);\n            fail(\"exception should have been thrown\");\n        } catch (final MissingOptionException e) {\n            assertEquals(\"Missing required options: b, c\", e.getMessage(), \"Incorrect exception message\");\n            assertTrue(e.getMissingOptions().contains(\"b\"));\n            assertTrue(e.getMissingOptions().contains(\"c\"));\n        } catch (final ParseException e) {\n            fail(\"expected to catch MissingOptionException\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testMultiple()", "name": "testMultiple", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultiple()", "original_string": "    @Test\n    public void testMultiple() throws Exception {\n        final String[] args = { \"-c\", \"foobar\", \"-b\", \"toast\" };\n\n        CommandLine cl = parser.parse(options, args, true);\n        assertTrue(cl.hasOption(\"c\"), \"Confirm -c is set\");\n        assertEquals(3, cl.getArgList().size(), \"Confirm  3 extra args: \" + cl.getArgList().size());\n\n        cl = parser.parse(options, cl.getArgs());\n\n        assertFalse(cl.hasOption(\"c\"), \"Confirm -c is not set\");\n        assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\n        assertEquals(\"toast\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\n        assertEquals(1, cl.getArgList().size(), \"Confirm  1 extra arg: \" + cl.getArgList().size());\n        assertEquals(\"foobar\", cl.getArgList().get(0), \"Confirm  value of extra arg: \" + cl.getArgList().get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testMultipleWithLong()", "name": "testMultipleWithLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultipleWithLong()", "original_string": "    @Test\n    public void testMultipleWithLong() throws Exception {\n        final String[] args = { \"--copt\", \"foobar\", \"--bfile\", \"toast\" };\n\n        CommandLine cl = parser.parse(options, args, true);\n        assertTrue(cl.hasOption(\"c\"), \"Confirm -c is set\");\n        assertEquals(3, cl.getArgList().size(), \"Confirm  3 extra args: \" + cl.getArgList().size());\n\n        cl = parser.parse(options, cl.getArgs());\n\n        assertFalse(cl.hasOption(\"c\"), \"Confirm -c is not set\");\n        assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\n        assertEquals(\"toast\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\n        assertEquals(1, cl.getArgList().size(), \"Confirm  1 extra arg: \" + cl.getArgList().size());\n        assertEquals(\"foobar\", cl.getArgList().get(0), \"Confirm  value of extra arg: \" + cl.getArgList().get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testMultipleWithNull()", "name": "testMultipleWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultipleWithNull()", "original_string": "    @Test\n    public void testMultipleWithNull() throws Exception {\n        final String[] args = { null, \"-c\", null, \"foobar\", null, \"-b\", null, \"toast\", null };\n\n        CommandLine cl = parser.parse(options, args, true);\n        assertTrue(cl.hasOption(\"c\"), \"Confirm -c is set\");\n        assertEquals(3, cl.getArgList().size(), \"Confirm  3 extra args: \" + cl.getArgList().size());\n\n        cl = parser.parse(options, cl.getArgs());\n\n        assertFalse(cl.hasOption(\"c\"), \"Confirm -c is not set\");\n        assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\n        assertEquals(\"toast\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\n        assertEquals(1, cl.getArgList().size(), \"Confirm  1 extra arg: \" + cl.getArgList().size());\n        assertEquals(\"foobar\", cl.getArgList().get(0), \"Confirm  value of extra arg: \" + cl.getArgList().get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testNegativeArgument()", "name": "testNegativeArgument", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNegativeArgument()", "original_string": "    @Test\n    public void testNegativeArgument() throws Exception {\n        final String[] args = { \"-b\", \"-1\" };\n\n        final CommandLine cl = parser.parse(options, args);\n        assertEquals(\"-1\", cl.getOptionValue(\"b\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testNegativeOption()", "name": "testNegativeOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNegativeOption()", "original_string": "    @Test\n    public void testNegativeOption() throws Exception {\n        final String[] args = { \"-b\", \"-1\" };\n\n        options.addOption(\"1\", false, null);\n\n        final CommandLine cl = parser.parse(options, args);\n        assertEquals(\"-1\", cl.getOptionValue(\"b\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testOptionalArgsOptionBuilder()", "name": "testOptionalArgsOptionBuilder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOptionalArgsOptionBuilder()", "original_string": "    @Test\n    public void testOptionalArgsOptionBuilder() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\n        final Properties properties = new Properties();\n\n        CommandLine cmd = parse(parser, options, new String[] { \"-i\" }, properties);\n        assertTrue(cmd.hasOption(\"i\"));\n        assertNull(cmd.getOptionValues(\"i\"));\n\n        cmd = parse(parser, options, new String[] { \"-i\", \"paper\" }, properties);\n        assertTrue(cmd.hasOption(\"i\"));\n        assertArrayEquals(new String[] { \"paper\" }, cmd.getOptionValues(\"i\"));\n\n        cmd = parse(parser, options, new String[] { \"-i\", \"paper\", \"scissors\" }, properties);\n        assertTrue(cmd.hasOption(\"i\"));\n        assertArrayEquals(new String[] { \"paper\", \"scissors\" }, cmd.getOptionValues(\"i\"));\n\n        cmd = parse(parser, options, new String[] { \"-i\", \"paper\", \"scissors\", \"rock\" }, properties);\n        assertTrue(cmd.hasOption(\"i\"));\n        assertArrayEquals(new String[] { \"paper\", \"scissors\" }, cmd.getOptionValues(\"i\"));\n        assertArrayEquals(new String[] { \"rock\" }, cmd.getArgs());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testOptionalArgsOptionDotBuilder()", "name": "testOptionalArgsOptionDotBuilder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOptionalArgsOptionDotBuilder()", "original_string": "    @Test\n    public void testOptionalArgsOptionDotBuilder() throws Exception {\n        final Options options = new Options();\n        options.addOption(Option.builder(\"i\").numberOfArgs(2).optionalArg(true).build());\n        final Properties properties = new Properties();\n\n        CommandLine cmd = parse(parser, options, new String[] { \"-i\" }, properties);\n        assertTrue(cmd.hasOption(\"i\"));\n        assertNull(cmd.getOptionValues(\"i\"));\n\n        cmd = parse(parser, options, new String[] { \"-i\", \"paper\" }, properties);\n        assertTrue(cmd.hasOption(\"i\"));\n        assertArrayEquals(new String[] { \"paper\" }, cmd.getOptionValues(\"i\"));\n\n        cmd = parse(parser, options, new String[] { \"-i\", \"paper\", \"scissors\" }, properties);\n        assertTrue(cmd.hasOption(\"i\"));\n        assertArrayEquals(new String[] { \"paper\", \"scissors\" }, cmd.getOptionValues(\"i\"));\n\n        cmd = parse(parser, options, new String[] { \"-i\", \"paper\", \"scissors\", \"rock\" }, properties);\n        assertTrue(cmd.hasOption(\"i\"));\n        assertArrayEquals(new String[] { \"paper\", \"scissors\" }, cmd.getOptionValues(\"i\"));\n        assertArrayEquals(new String[] { \"rock\" }, cmd.getArgs());\n\n        options.addOption(Option.builder(\"j\").numberOfArgs(3).optionalArg(true).build());\n        cmd = parse(parser, options, new String[] { \"-j\" }, properties);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testOptionAndRequiredOption()", "name": "testOptionAndRequiredOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOptionAndRequiredOption()", "original_string": "    @Test\n    public void testOptionAndRequiredOption() throws Exception {\n        final String[] args = { \"-a\", \"-b\", \"file\" };\n\n        final Options options = new Options();\n        options.addOption(\"a\", \"enable-a\", false, null);\n        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertTrue(cl.hasOption(\"a\"), \"Confirm -a is set\");\n        assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\n        assertEquals(\"file\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\n        assertTrue(cl.getArgList().isEmpty(), \"Confirm NO of extra args\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testOptionGroup()", "name": "testOptionGroup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOptionGroup()", "original_string": "    @Test\n    public void testOptionGroup() throws Exception {\n        final OptionGroup group = new OptionGroup();\n        assertFalse(group.isSelected());\n        group.addOption(OptionBuilder.create(\"a\"));\n        group.addOption(OptionBuilder.create(\"b\"));\n\n        final Options options = new Options();\n        options.addOptionGroup(group);\n\n        parser.parse(options, new String[] { \"-b\" });\n\n        assertTrue(group.isSelected());\n        assertEquals(\"b\", group.getSelected(), \"selected option\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testOptionGroupLong()", "name": "testOptionGroupLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOptionGroupLong()", "original_string": "    @Test\n    public void testOptionGroupLong() throws Exception {\n        final OptionGroup group = new OptionGroup();\n        group.addOption(OptionBuilder.withLongOpt(\"foo\").create());\n        group.addOption(OptionBuilder.withLongOpt(\"bar\").create());\n\n        final Options options = new Options();\n        options.addOptionGroup(group);\n\n        final CommandLine cl = parser.parse(options, new String[] { \"--bar\" });\n\n        assertTrue(cl.hasOption(\"bar\"));\n        assertTrue(group.isSelected());\n        assertEquals(\"bar\", group.getSelected(), \"selected option\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testPartialLongOptionSingleDash()", "name": "testPartialLongOptionSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPartialLongOptionSingleDash()", "original_string": "    @Test\n    public void testPartialLongOptionSingleDash() throws Exception {\n        final String[] args = { \"-ver\" };\n\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.hasArg().create('v'));\n\n        final CommandLine cl = parser.parse(options, args);\n\n        assertTrue(cl.hasOption(\"version\"), \"Confirm --version is set\");\n        assertFalse(cl.hasOption(\"v\"), \"Confirm -v is not set\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testPropertiesOption1()", "name": "testPropertiesOption1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPropertiesOption1()", "original_string": "    @Test\n    public void testPropertiesOption1() throws Exception {\n        final String[] args = { \"-Jsource=1.5\", \"-J\", \"target\", \"1.5\", \"foo\" };\n\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));\n\n        final CommandLine cl = parser.parse(options, args);\n\n        final List<String> values = Arrays.asList(cl.getOptionValues(\"J\"));\n        assertNotNull(values, \"null values\");\n        assertEquals(4, values.size(), \"number of values\");\n        assertEquals(\"source\", values.get(0), \"value 1\");\n        assertEquals(\"1.5\", values.get(1), \"value 2\");\n        assertEquals(\"target\", values.get(2), \"value 3\");\n        assertEquals(\"1.5\", values.get(3), \"value 4\");\n\n        final List<?> argsleft = cl.getArgList();\n        assertEquals(1, argsleft.size(), \"Should be 1 arg left\");\n        assertEquals(\"foo\", argsleft.get(0), \"Expecting foo\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testPropertiesOption2()", "name": "testPropertiesOption2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPropertiesOption2()", "original_string": "    @Test\n    public void testPropertiesOption2() throws Exception {\n        final String[] args = { \"-Dparam1\", \"-Dparam2=value2\", \"-D\" };\n\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));\n\n        final CommandLine cl = parser.parse(options, args);\n\n        final Properties props = cl.getOptionProperties(\"D\");\n        assertNotNull(props, \"null properties\");\n        assertEquals(2, props.size(), \"number of properties in \" + props);\n        assertEquals(\"true\", props.getProperty(\"param1\"), \"property 1\");\n        assertEquals(\"value2\", props.getProperty(\"param2\"), \"property 2\");\n\n        final List<?> argsleft = cl.getArgList();\n        assertEquals(0, argsleft.size(), \"Should be no arg left\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testPropertyOptionFlags()", "name": "testPropertyOptionFlags", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPropertyOptionFlags()", "original_string": "    @Test\n    public void testPropertyOptionFlags() throws Exception {\n        final Options options = new Options();\n        options.addOption(\"a\", false, \"toggle -a\");\n        options.addOption(\"c\", \"c\", false, \"toggle -c\");\n        options.addOption(OptionBuilder.hasOptionalArg().create('e'));\n\n        Properties properties = new Properties();\n        properties.setProperty(\"a\", \"true\");\n        properties.setProperty(\"c\", \"yes\");\n        properties.setProperty(\"e\", \"1\");\n\n        CommandLine cmd = parse(parser, options, null, properties);\n        assertTrue(cmd.hasOption(\"a\"));\n        assertTrue(cmd.hasOption(\"c\"));\n        assertTrue(cmd.hasOption(\"e\"));\n\n        properties = new Properties();\n        properties.setProperty(\"a\", \"false\");\n        properties.setProperty(\"c\", \"no\");\n        properties.setProperty(\"e\", \"0\");\n\n        cmd = parse(parser, options, null, properties);\n        assertFalse(cmd.hasOption(\"a\"));\n        assertFalse(cmd.hasOption(\"c\"));\n        assertTrue(cmd.hasOption(\"e\")); // this option accepts an argument\n\n        properties = new Properties();\n        properties.setProperty(\"a\", \"TRUE\");\n        properties.setProperty(\"c\", \"nO\");\n        properties.setProperty(\"e\", \"TrUe\");\n\n        cmd = parse(parser, options, null, properties);\n        assertTrue(cmd.hasOption(\"a\"));\n        assertFalse(cmd.hasOption(\"c\"));\n        assertTrue(cmd.hasOption(\"e\"));\n\n        properties = new Properties();\n        properties.setProperty(\"a\", \"just a string\");\n        properties.setProperty(\"e\", \"\");\n\n        cmd = parse(parser, options, null, properties);\n        assertFalse(cmd.hasOption(\"a\"));\n        assertFalse(cmd.hasOption(\"c\"));\n        assertTrue(cmd.hasOption(\"e\"));\n\n        properties = new Properties();\n        properties.setProperty(\"a\", \"0\");\n        properties.setProperty(\"c\", \"1\");\n\n        cmd = parse(parser, options, null, properties);\n        assertFalse(cmd.hasOption(\"a\"));\n        assertTrue(cmd.hasOption(\"c\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testPropertyOptionGroup()", "name": "testPropertyOptionGroup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPropertyOptionGroup()", "original_string": "    @Test\n    public void testPropertyOptionGroup() throws Exception {\n        final Options options = new Options();\n\n        final OptionGroup group1 = new OptionGroup();\n        group1.addOption(new Option(\"a\", null));\n        group1.addOption(new Option(\"b\", null));\n        options.addOptionGroup(group1);\n\n        final OptionGroup group2 = new OptionGroup();\n        group2.addOption(new Option(\"x\", null));\n        group2.addOption(new Option(\"y\", null));\n        options.addOptionGroup(group2);\n\n        final String[] args = { \"-a\" };\n\n        final Properties properties = new Properties();\n        properties.put(\"b\", \"true\");\n        properties.put(\"x\", \"true\");\n\n        final CommandLine cmd = parse(parser, options, args, properties);\n\n        assertTrue(cmd.hasOption(\"a\"));\n        assertFalse(cmd.hasOption(\"b\"));\n        assertTrue(cmd.hasOption(\"x\"));\n        assertFalse(cmd.hasOption(\"y\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testPropertyOptionMultipleValues()", "name": "testPropertyOptionMultipleValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPropertyOptionMultipleValues()", "original_string": "    @Test\n    public void testPropertyOptionMultipleValues() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\n\n        final Properties properties = new Properties();\n        properties.setProperty(\"k\", \"one,two\");\n\n        final CommandLine cmd = parse(parser, options, null, properties);\n        assertTrue(cmd.hasOption(\"k\"));\n        final String[] values = { \"one\", \"two\" };\n        assertArrayEquals(values, cmd.getOptionValues('k'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testPropertyOptionRequired()", "name": "testPropertyOptionRequired", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPropertyOptionRequired()", "original_string": "    @Test\n    public void testPropertyOptionRequired() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.isRequired().create(\"f\"));\n\n        final Properties properties = new Properties();\n        properties.setProperty(\"f\", \"true\");\n\n        final CommandLine cmd = parse(parser, options, null, properties);\n        assertTrue(cmd.hasOption(\"f\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testPropertyOptionSingularValue()", "name": "testPropertyOptionSingularValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPropertyOptionSingularValue()", "original_string": "    @Test\n    public void testPropertyOptionSingularValue() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\"hide\").create());\n\n        final Properties properties = new Properties();\n        properties.setProperty(\"hide\", \"seek\");\n\n        final CommandLine cmd = parse(parser, options, null, properties);\n        assertTrue(cmd.hasOption(\"hide\"));\n        assertEquals(\"seek\", cmd.getOptionValue(\"hide\"));\n        assertFalse(cmd.hasOption(\"fake\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testPropertyOptionUnexpected()", "name": "testPropertyOptionUnexpected", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPropertyOptionUnexpected()", "original_string": "    @Test\n    public void testPropertyOptionUnexpected() throws Exception {\n        final Options options = new Options();\n\n        final Properties properties = new Properties();\n        properties.setProperty(\"f\", \"true\");\n\n        try {\n            parse(parser, options, null, properties);\n            fail(\"UnrecognizedOptionException expected\");\n        } catch (final UnrecognizedOptionException e) {\n            // expected\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testPropertyOverrideValues()", "name": "testPropertyOverrideValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPropertyOverrideValues()", "original_string": "    @Test\n    public void testPropertyOverrideValues() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\n        options.addOption(OptionBuilder.hasOptionalArgs().create('j'));\n\n        final String[] args = { \"-j\", \"found\", \"-i\", \"ink\" };\n\n        final Properties properties = new Properties();\n        properties.setProperty(\"j\", \"seek\");\n\n        final CommandLine cmd = parse(parser, options, args, properties);\n        assertTrue(cmd.hasOption(\"j\"));\n        assertEquals(\"found\", cmd.getOptionValue(\"j\"));\n        assertTrue(cmd.hasOption(\"i\"));\n        assertEquals(\"ink\", cmd.getOptionValue(\"i\"));\n        assertFalse(cmd.hasOption(\"fake\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testReuseOptionsTwice()", "name": "testReuseOptionsTwice", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReuseOptionsTwice()", "original_string": "    @Test\n    public void testReuseOptionsTwice() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.isRequired().create('v'));\n        // first parsing\n        parser.parse(options, new String[] { \"-v\" });\n        try {\n            // second parsing, with the same Options instance and an invalid command line\n            parser.parse(options, new String[0]);\n            fail(\"MissingOptionException not thrown\");\n        } catch (final MissingOptionException e) {\n            // expected\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testShortOptionConcatenatedQuoteHandling()", "name": "testShortOptionConcatenatedQuoteHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortOptionConcatenatedQuoteHandling()", "original_string": "    @Test\n    public void testShortOptionConcatenatedQuoteHandling() throws Exception {\n        final CommandLine cl = parser.parse(options, new String[] { \"-b\\\"quoted string\\\"\" });\n        assertEquals(\"quoted string\", cl.getOptionValue(\"b\"), \"Confirm -b\\\"arg\\\" strips quotes\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testShortOptionQuoteHandling()", "name": "testShortOptionQuoteHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortOptionQuoteHandling()", "original_string": "    @Test\n    public void testShortOptionQuoteHandling() throws Exception {\n        final CommandLine cl = parser.parse(options, new String[] { \"-b\", \"\\\"quoted string\\\"\" });\n        assertEquals(\"quoted string\", cl.getOptionValue(\"b\"), \"Confirm -b \\\"arg\\\" strips quotes\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testShortWithEqual()", "name": "testShortWithEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortWithEqual()", "original_string": "    @Test\n    public void testShortWithEqual() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n        final CommandLine cl = parser.parse(options, new String[] { \"-f=bar\" });\n        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testShortWithoutEqual()", "name": "testShortWithoutEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortWithoutEqual()", "original_string": "    @Test\n    public void testShortWithoutEqual() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").hasArg().create('f'));\n        final CommandLine cl = parser.parse(options, new String[] { \"-fbar\" });\n        assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testShortWithUnexpectedArgument()", "name": "testShortWithUnexpectedArgument", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortWithUnexpectedArgument()", "original_string": "    @Test\n    public void testShortWithUnexpectedArgument() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"foo\").create('f'));\n        try {\n            parser.parse(options, new String[] { \"-f=bar\" });\n        } catch (final UnrecognizedOptionException e) {\n            assertEquals(\"-f=bar\", e.getOption());\n            return;\n        }\n        fail(\"UnrecognizedOptionException not thrown\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testSimpleLong()", "name": "testSimpleLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSimpleLong()", "original_string": "    @Test\n    public void testSimpleLong() throws Exception {\n        final CommandLine cl = parser.parse(options, new String[] { \"--enable-a\", \"--bfile\", \"toast\", \"foo\", \"bar\" });\n        assertTrue(cl.hasOption(\"a\"), \"Confirm -a is set\");\n        assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\n        assertEquals(\"toast\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\n        assertEquals(\"toast\", cl.getOptionValue(\"bfile\"), \"Confirm arg of --bfile\");\n        assertEquals(2, cl.getArgList().size(), \"Confirm size of extra args\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testSimpleShort()", "name": "testSimpleShort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSimpleShort()", "original_string": "    @Test\n    public void testSimpleShort() throws Exception {\n        final CommandLine cl = parser.parse(options, new String[] { \"-a\", \"-b\", \"toast\", \"foo\", \"bar\" });\n        assertTrue(cl.hasOption(\"a\"), \"Confirm -a is set\");\n        assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\n        assertEquals(\"toast\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\n        assertEquals(2, cl.getArgList().size(), \"Confirm size of extra args\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testSingleDash()", "name": "testSingleDash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSingleDash()", "original_string": "    @Test\n    public void testSingleDash() throws Exception {\n        final CommandLine cl = parser.parse(options, new String[] { \"--copt\", \"-b\", \"-\", \"-a\", \"-\" });\n        assertTrue(cl.hasOption(\"a\"), \"Confirm -a is set\");\n        assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\n        assertEquals(\"-\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\n        assertEquals(1, cl.getArgList().size(), \"Confirm 1 extra arg: \" + cl.getArgList().size());\n        assertEquals(\"-\", cl.getArgList().get(0), \"Confirm value of extra arg: \" + cl.getArgList().get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testStopAtExpectedArg()", "name": "testStopAtExpectedArg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStopAtExpectedArg()", "original_string": "    @Test\n    public void testStopAtExpectedArg() throws Exception {\n        final String[] args = { \"-b\", \"foo\" };\n        final CommandLine cl = parser.parse(options, args, true);\n        assertTrue(cl.hasOption('b'), \"Confirm -b is set\");\n        assertEquals(\"foo\", cl.getOptionValue('b'), \"Confirm -b is set\");\n        assertTrue(cl.getArgList().isEmpty(), \"Confirm no extra args: \" + cl.getArgList().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testStopAtNonOptionLong()", "name": "testStopAtNonOptionLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStopAtNonOptionLong()", "original_string": "    @Test\n    public void testStopAtNonOptionLong() throws Exception {\n        final String[] args = { \"--zop==1\", \"-abtoast\", \"--b=bar\" };\n        final CommandLine cl = parser.parse(options, args, true);\n        assertFalse(cl.hasOption(\"a\"), \"Confirm -a is not set\");\n        assertFalse(cl.hasOption(\"b\"), \"Confirm -b is not set\");\n        assertEquals(3, cl.getArgList().size(), \"Confirm  3 extra args: \" + cl.getArgList().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testStopAtNonOptionShort()", "name": "testStopAtNonOptionShort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStopAtNonOptionShort()", "original_string": "    @Test\n    public void testStopAtNonOptionShort() throws Exception {\n        final CommandLine cl = parser.parse(options, new String[] { \"-z\", \"-a\", \"-btoast\" }, true);\n        assertFalse(cl.hasOption(\"a\"), \"Confirm -a is not set\");\n        assertEquals(3, cl.getArgList().size(), \"Confirm  3 extra args: \" + cl.getArgList().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testStopAtUnexpectedArg()", "name": "testStopAtUnexpectedArg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStopAtUnexpectedArg()", "original_string": "    @Test\n    public void testStopAtUnexpectedArg() throws Exception {\n        final CommandLine cl = parser.parse(options, new String[] { \"-c\", \"foober\", \"-b\", \"toast\" }, true);\n        assertTrue(cl.hasOption(\"c\"), \"Confirm -c is set\");\n        assertEquals(3, cl.getArgList().size(), \"Confirm  3 extra args: \" + cl.getArgList().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testStopBursting()", "name": "testStopBursting", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStopBursting()", "original_string": "    @Test\n    public void testStopBursting() throws Exception {\n        final CommandLine cl = parser.parse(options, new String[] { \"-azc\" }, true);\n        assertTrue(cl.hasOption(\"a\"), \"Confirm -a is set\");\n        assertFalse(cl.hasOption(\"c\"), \"Confirm -c is not set\");\n        assertEquals(1, cl.getArgList().size(), \"Confirm  1 extra arg: \" + cl.getArgList().size());\n        assertTrue(cl.getArgList().contains(\"zc\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testStopBursting2()", "name": "testStopBursting2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStopBursting2()", "original_string": "    @Test\n    public void testStopBursting2() throws Exception {\n        CommandLine cl = parser.parse(options, new String[] { \"-c\", \"foobar\", \"-btoast\" }, true);\n        assertTrue(cl.hasOption(\"c\"), \"Confirm -c is set\");\n        assertEquals(2, cl.getArgList().size(), \"Confirm  2 extra args: \" + cl.getArgList().size());\n        cl = parser.parse(options, cl.getArgs());\n        assertFalse(cl.hasOption(\"c\"), \"Confirm -c is not set\");\n        assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\n        assertEquals(\"toast\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\n        assertEquals(1, cl.getArgList().size(), \"Confirm  1 extra arg: \" + cl.getArgList().size());\n        assertEquals(\"foobar\", cl.getArgList().get(0), \"Confirm  value of extra arg: \" + cl.getArgList().get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testUnambiguousPartialLongOption1()", "name": "testUnambiguousPartialLongOption1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnambiguousPartialLongOption1()", "original_string": "    @Test\n    public void testUnambiguousPartialLongOption1() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n        final CommandLine cl = parser.parse(options, new String[] { \"--ver\" });\n        assertTrue(cl.hasOption(\"version\"), \"Confirm --version is set\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testUnambiguousPartialLongOption2()", "name": "testUnambiguousPartialLongOption2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnambiguousPartialLongOption2()", "original_string": "    @Test\n    public void testUnambiguousPartialLongOption2() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n        final CommandLine cl = parser.parse(options, new String[] { \"-ver\" });\n        assertTrue(cl.hasOption(\"version\"), \"Confirm --version is set\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testUnambiguousPartialLongOption3()", "name": "testUnambiguousPartialLongOption3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnambiguousPartialLongOption3()", "original_string": "    @Test\n    public void testUnambiguousPartialLongOption3() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n        final CommandLine cl = parser.parse(options, new String[] { \"--ver=1\" });\n        assertTrue(cl.hasOption(\"verbose\"), \"Confirm --verbose is set\");\n        assertEquals(\"1\", cl.getOptionValue(\"verbose\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testUnambiguousPartialLongOption4()", "name": "testUnambiguousPartialLongOption4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnambiguousPartialLongOption4()", "original_string": "    @Test\n    public void testUnambiguousPartialLongOption4() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n        final CommandLine cl = parser.parse(options, new String[] { \"-ver=1\" });\n        assertTrue(cl.hasOption(\"verbose\"), \"Confirm --verbose is set\");\n        assertEquals(\"1\", cl.getOptionValue(\"verbose\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testUnlimitedArgs()", "name": "testUnlimitedArgs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnlimitedArgs()", "original_string": "    @Test\n    public void testUnlimitedArgs() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.hasArgs().create(\"e\"));\n        options.addOption(OptionBuilder.hasArgs().create(\"f\"));\n        final CommandLine cl = parser.parse(options, new String[] { \"-e\", \"one\", \"two\", \"-f\", \"alpha\" });\n        assertTrue(cl.hasOption(\"e\"), \"Confirm -e is set\");\n        assertEquals(2, cl.getOptionValues(\"e\").length, \"number of arg for -e\");\n        assertTrue(cl.hasOption(\"f\"), \"Confirm -f is set\");\n        assertEquals(1, cl.getOptionValues(\"f\").length, \"number of arg for -f\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testUnrecognizedOption()", "name": "testUnrecognizedOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnrecognizedOption()", "original_string": "    @Test\n    public void testUnrecognizedOption() throws Exception {\n        try {\n            parser.parse(options, new String[] { \"-a\", \"-d\", \"-b\", \"toast\", \"foo\", \"bar\" });\n            fail(\"UnrecognizedOptionException wasn't thrown\");\n        } catch (final UnrecognizedOptionException e) {\n            assertEquals(\"-d\", e.getOption());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testUnrecognizedOptionWithBursting()", "name": "testUnrecognizedOptionWithBursting", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnrecognizedOptionWithBursting()", "original_string": "    @Test\n    public void testUnrecognizedOptionWithBursting() throws Exception {\n        try {\n            parser.parse(options, new String[] { \"-adbtoast\", \"foo\", \"bar\" });\n            fail(\"UnrecognizedOptionException wasn't thrown\");\n        } catch (final UnrecognizedOptionException e) {\n            assertEquals(\"-adbtoast\", e.getOption());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase.[void]testWithRequiredOption()", "name": "testWithRequiredOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWithRequiredOption()", "original_string": "    @Test\n    public void testWithRequiredOption() throws Exception {\n        final String[] args = { \"-b\", \"file\" };\n        final Options options = new Options();\n        options.addOption(\"a\", \"enable-a\", false, null);\n        options.addOption(OptionBuilder.withLongOpt(\"bfile\").hasArg().isRequired().create('b'));\n        final CommandLine cl = parser.parse(options, args);\n        assertFalse(cl.hasOption(\"a\"), \"Confirm -a is NOT set\");\n        assertTrue(cl.hasOption(\"b\"), \"Confirm -b is set\");\n        assertEquals(\"file\", cl.getOptionValue(\"b\"), \"Confirm arg of -b\");\n        assertTrue(cl.getArgList().isEmpty(), \"Confirm NO of extra args\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java", "class_name": "AbstractParserTestCase", "class_uri": "src/test/java/org/apache/commons/cli/AbstractParserTestCase.java.AbstractParserTestCase", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLine_hasOptionTest.java.CommandLine_hasOptionTest.[void]testHasOptionWithExistingOption()", "name": "testHasOptionWithExistingOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasOptionWithExistingOption()", "original_string": "    @Test\n    public void testHasOptionWithExistingOption() {\n        Option option = new Option(\"a\", false, \"toggle -a\");\n        assertTrue(cmd.hasOption(option));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLine_hasOptionTest.java", "class_name": "CommandLine_hasOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLine_hasOptionTest.java.CommandLine_hasOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLine_hasOptionTest.java.CommandLine_hasOptionTest.[void]testHasOptionWithNonExistingOption()", "name": "testHasOptionWithNonExistingOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasOptionWithNonExistingOption()", "original_string": "    @Test\n    public void testHasOptionWithNonExistingOption() {\n        Option option = new Option(\"z\", false, \"non-existing option\");\n        assertFalse(cmd.hasOption(option));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLine_hasOptionTest.java", "class_name": "CommandLine_hasOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLine_hasOptionTest.java.CommandLine_hasOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/CommandLine_hasOptionTest.java.CommandLine_hasOptionTest.[void]testHasOptionWithDeprecatedOption()", "name": "testHasOptionWithDeprecatedOption", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasOptionWithDeprecatedOption()", "original_string": "    @Test\n    public void testHasOptionWithDeprecatedOption() {\n        Option option = new Option(\"a\", false, \"toggle -a\");\n        // Remove the call to setDeprecated as it does not exist in the Option class\n        assertTrue(cmd.hasOption(option));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/CommandLine_hasOptionTest.java", "class_name": "CommandLine_hasOptionTest", "class_uri": "src/test/java/org/apache/commons/cli/CommandLine_hasOptionTest.java.CommandLine_hasOptionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilder_hasOptionalArgTest.java.OptionBuilder_hasOptionalArgTest.[void]testHasOptionalArg()", "name": "testHasOptionalArg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasOptionalArg()", "original_string": "    @Test\n    public void testHasOptionalArg() {\n        OptionBuilder.hasOptionalArg();\n        Option option = OptionBuilder.create(\"o\");\n\n        assertEquals(\"o\", option.getOpt());\n        assertTrue(option.hasOptionalArg());\n        assertEquals(1, option.getArgs());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilder_hasOptionalArgTest.java", "class_name": "OptionBuilder_hasOptionalArgTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilder_hasOptionalArgTest.java.OptionBuilder_hasOptionalArgTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/OptionBuilder_hasOptionalArgTest.java.OptionBuilder_hasOptionalArgTest.[void]testHasOptionalArgWithReset()", "name": "testHasOptionalArgWithReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasOptionalArgWithReset()", "original_string": "    @Test\n    public void testHasOptionalArgWithReset() {\n        OptionBuilder.hasOptionalArg();\n        Option option = OptionBuilder.create(\"o\");\n\n        assertEquals(\"o\", option.getOpt());\n        assertTrue(option.hasOptionalArg());\n        assertEquals(1, option.getArgs());\n\n        // Ensure reset works correctly\n        OptionBuilder.hasOptionalArg(); // Use hasOptionalArg() instead of reset()\n        Option newOption = OptionBuilder.create(\"n\");\n        assertTrue(newOption.hasOptionalArg()); // Adjusted assertion\n        assertEquals(1, newOption.getArgs()); // Adjusted assertion\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/OptionBuilder_hasOptionalArgTest.java", "class_name": "OptionBuilder_hasOptionalArgTest", "class_uri": "src/test/java/org/apache/commons/cli/OptionBuilder_hasOptionalArgTest.java.OptionBuilder_hasOptionalArgTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java.DeprecatedAttributes_toStringTest.[void]testToStringForRemoval()", "name": "testToStringForRemoval", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringForRemoval()", "original_string": "    @Test\n    public void testToStringForRemoval() {\n        assertEquals(\"Deprecated for removal since 2.0: Use Bar instead!\", deprecatedAttributes.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java", "class_name": "DeprecatedAttributes_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java.DeprecatedAttributes_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java.DeprecatedAttributes_toStringTest.[void]testToStringNoForRemoval()", "name": "testToStringNoForRemoval", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringNoForRemoval()", "original_string": "    @Test\n    public void testToStringNoForRemoval() {\n        deprecatedAttributes = DeprecatedAttributes.builder()\n                .setDescription(\"Use Bar instead!\")\n                .setForRemoval(false)\n                .setSince(\"2.0\")\n                .get();\n        assertEquals(\"Deprecated since 2.0: Use Bar instead!\", deprecatedAttributes.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java", "class_name": "DeprecatedAttributes_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java.DeprecatedAttributes_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java.DeprecatedAttributes_toStringTest.[void]testToStringNoSince()", "name": "testToStringNoSince", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringNoSince()", "original_string": "    @Test\n    public void testToStringNoSince() {\n        deprecatedAttributes = DeprecatedAttributes.builder()\n                .setDescription(\"Use Bar instead!\")\n                .setForRemoval(true)\n                .setSince(\"\")\n                .get();\n        assertEquals(\"Deprecated for removal: Use Bar instead!\", deprecatedAttributes.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java", "class_name": "DeprecatedAttributes_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java.DeprecatedAttributes_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java.DeprecatedAttributes_toStringTest.[void]testToStringNoDescription()", "name": "testToStringNoDescription", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringNoDescription()", "original_string": "    @Test\n    public void testToStringNoDescription() {\n        deprecatedAttributes = DeprecatedAttributes.builder()\n                .setDescription(\"\")\n                .setForRemoval(true)\n                .setSince(\"2.0\")\n                .get();\n        assertEquals(\"Deprecated for removal since 2.0\", deprecatedAttributes.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java", "class_name": "DeprecatedAttributes_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java.DeprecatedAttributes_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java.DeprecatedAttributes_toStringTest.[void]testToStringNoAttributes()", "name": "testToStringNoAttributes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringNoAttributes()", "original_string": "    @Test\n    public void testToStringNoAttributes() {\n        deprecatedAttributes = DeprecatedAttributes.builder()\n                .setDescription(\"\")\n                .setForRemoval(false)\n                .setSince(\"\")\n                .get();\n        assertEquals(\"Deprecated\", deprecatedAttributes.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java", "class_name": "DeprecatedAttributes_toStringTest", "class_uri": "src/test/java/org/apache/commons/cli/DeprecatedAttributes_toStringTest.java.DeprecatedAttributes_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest.[void]testCharSeparator()", "name": "testCharSeparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCharSeparator()", "original_string": "    @Test\n    public void testCharSeparator() {\n        // tests the char methods of CommandLine that delegate to the String methods\n        assertTrue(cmd.hasOption(\"j\"), \"Option j is not set\");\n        assertTrue(cmd.hasOption('j'), \"Option j is not set\");\n        assertArrayEquals(new String[] {\"key\", \"value\", \"key\", \"value\"}, cmd.getOptionValues(\"j\"));\n        assertArrayEquals(new String[] {\"key\", \"value\", \"key\", \"value\"}, cmd.getOptionValues('j'));\n\n        assertTrue(cmd.hasOption(\"k\"), \"Option k is not set\");\n        assertTrue(cmd.hasOption('k'), \"Option k is not set\");\n        assertArrayEquals(new String[] {\"key1\", \"value1\", \"key2\", \"value2\"}, cmd.getOptionValues(\"k\"));\n        assertArrayEquals(new String[] {\"key1\", \"value1\", \"key2\", \"value2\"}, cmd.getOptionValues('k'));\n\n        assertTrue(cmd.hasOption(\"m\"), \"Option m is not set\");\n        assertTrue(cmd.hasOption('m'), \"Option m is not set\");\n        assertArrayEquals(new String[] {\"key\", \"value\"}, cmd.getOptionValues(\"m\"));\n        assertArrayEquals(new String[] {\"key\", \"value\"}, cmd.getOptionValues('m'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValuesTest.java", "class_name": "ValuesTest", "class_uri": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest.[void]testComplexValues()", "name": "testComplexValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComplexValues()", "original_string": "    @Test\n    public void testComplexValues() {\n        assertTrue(cmd.hasOption(\"i\"), \"Option i is not set\");\n        assertTrue(cmd.hasOption(\"h\"), \"Option h is not set\");\n        assertArrayEquals(new String[] {\"val1\", \"val2\"}, cmd.getOptionValues(\"h\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValuesTest.java", "class_name": "ValuesTest", "class_uri": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest.[void]testExtraArgs()", "name": "testExtraArgs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExtraArgs()", "original_string": "    @Test\n    public void testExtraArgs() {\n        assertArrayEquals(new String[] {\"arg1\", \"arg2\", \"arg3\"}, cmd.getArgs(), \"Extra args\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValuesTest.java", "class_name": "ValuesTest", "class_uri": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest.[void]testMultipleArgValues()", "name": "testMultipleArgValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultipleArgValues()", "original_string": "    @Test\n    public void testMultipleArgValues() {\n        assertTrue(cmd.hasOption(\"e\"), \"Option e is not set\");\n        assertArrayEquals(new String[] {\"one\", \"two\"}, cmd.getOptionValues(\"e\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValuesTest.java", "class_name": "ValuesTest", "class_uri": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest.[void]testShortArgs()", "name": "testShortArgs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortArgs()", "original_string": "    @Test\n    public void testShortArgs() {\n        assertTrue(cmd.hasOption(\"a\"), \"Option a is not set\");\n        assertTrue(cmd.hasOption(\"c\"), \"Option c is not set\");\n\n        assertNull(cmd.getOptionValues(\"a\"));\n        assertNull(cmd.getOptionValues(\"c\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValuesTest.java", "class_name": "ValuesTest", "class_uri": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest.[void]testShortArgsWithValue()", "name": "testShortArgsWithValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShortArgsWithValue()", "original_string": "    @Test\n    public void testShortArgsWithValue() {\n        assertTrue(cmd.hasOption(\"b\"), \"Option b is not set\");\n        assertEquals(\"foo\", cmd.getOptionValue(\"b\"));\n        assertEquals(1, cmd.getOptionValues(\"b\").length);\n\n        assertTrue(cmd.hasOption(\"b\"), \"Option b is not set\");\n        assertEquals(\"bar\", cmd.getOptionValue(\"d\"));\n        assertEquals(1, cmd.getOptionValues(\"d\").length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValuesTest.java", "class_name": "ValuesTest", "class_uri": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest.[void]testTwoArgValues()", "name": "testTwoArgValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTwoArgValues()", "original_string": "    @Test\n    public void testTwoArgValues() {\n        assertTrue(cmd.hasOption(\"g\"), \"Option g is not set\");\n        assertArrayEquals(new String[] {\"val1\", \"val2\"}, cmd.getOptionValues(\"g\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/ValuesTest.java", "class_name": "ValuesTest", "class_uri": "src/test/java/org/apache/commons/cli/ValuesTest.java.ValuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java.BugCLI148Test.[void]testWorkaround1()", "name": "testWorkaround1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWorkaround1()", "original_string": "    @Test\n    public void testWorkaround1() throws Exception {\n        final CommandLineParser parser = new PosixParser();\n        final String[] args = {\"-t-something\"};\n\n        final CommandLine commandLine = parser.parse(options, args);\n        assertEquals(\"-something\", commandLine.getOptionValue('t'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java", "class_name": "BugCLI148Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java.BugCLI148Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java.BugCLI148Test.[void]testWorkaround2()", "name": "testWorkaround2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWorkaround2()", "original_string": "    @Test\n    public void testWorkaround2() throws Exception {\n        final CommandLineParser parser = new PosixParser();\n        final String[] args = {\"-t\", \"\\\"-something\\\"\"};\n\n        final CommandLine commandLine = parser.parse(options, args);\n        assertEquals(\"-something\", commandLine.getOptionValue('t'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java", "class_name": "BugCLI148Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI148Test.java.BugCLI148Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI13Test.java.BugCLI13Test.[void]testCLI13()", "name": "testCLI13", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCLI13()", "original_string": "    @Test\n    public void testCLI13() throws ParseException {\n        final String debugOpt = \"debug\";\n        @SuppressWarnings(\"static-access\")\n        //@formatter:off\n        final Option debug = OptionBuilder\n            .withArgName(debugOpt)\n            .withDescription(\"turn on debugging\")\n            .withLongOpt(debugOpt)\n            .hasArg()\n            .create('d');\n        //@formatter:on\n        final Options options = new Options();\n        options.addOption(debug);\n        final CommandLine commandLine = new PosixParser().parse(options, new String[] {\"-d\", \"true\"});\n\n        assertEquals(\"true\", commandLine.getOptionValue(debugOpt));\n        assertEquals(\"true\", commandLine.getOptionValue('d'));\n        assertTrue(commandLine.hasOption('d'));\n        assertTrue(commandLine.hasOption(debugOpt));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI13Test.java", "class_name": "BugCLI13Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI13Test.java.BugCLI13Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java.BugCLI266Test.[void]testOptionComparatorDefaultOrder()", "name": "testOptionComparatorDefaultOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOptionComparatorDefaultOrder()", "original_string": "    @Test\n    public void testOptionComparatorDefaultOrder() {\n        final HelpFormatter formatter = new HelpFormatter();\n        final List<Option> options = new ArrayList<>(getOptions().getOptions());\n        Collections.sort(options, formatter.getOptionComparator());\n        int i = 0;\n        for (final Option o : options) {\n            assertEquals(o.getOpt(), sortOrder.get(i));\n            i++;\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java", "class_name": "BugCLI266Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java.BugCLI266Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java.BugCLI266Test.[void]testOptionComparatorInsertedOrder()", "name": "testOptionComparatorInsertedOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOptionComparatorInsertedOrder()", "original_string": "    @Test\n    public void testOptionComparatorInsertedOrder() {\n        final Collection<Option> options = getOptions().getOptions();\n        int i = 0;\n        for (final Option o : options) {\n            assertEquals(o.getOpt(), insertedOrder.get(i));\n            i++;\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java", "class_name": "BugCLI266Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java.BugCLI266Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest.[void]test11456()", "name": "test11456", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void test11456()", "original_string": "    @Test\n    public void test11456() throws Exception {\n        // POSIX\n        Options options = new Options();\n        options.addOption(OptionBuilder.hasOptionalArg().create('a'));\n        options.addOption(OptionBuilder.hasArg().create('b'));\n        String[] args = {\"-a\", \"-bvalue\"};\n\n        CommandLineParser parser = new PosixParser();\n\n        CommandLine cmd = parser.parse(options, args);\n        assertEquals(cmd.getOptionValue('b'), \"value\");\n\n        // GNU\n        options = new Options();\n        options.addOption(OptionBuilder.hasOptionalArg().create('a'));\n        options.addOption(OptionBuilder.hasArg().create('b'));\n        args = new String[] {\"-a\", \"-b\", \"value\"};\n\n        parser = new GnuParser();\n\n        cmd = parser.parse(options, args);\n        assertEquals(cmd.getOptionValue('b'), \"value\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "class_name": "BugsTest", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest.[void]test11457()", "name": "test11457", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void test11457()", "original_string": "    @Test\n    public void test11457() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n        final String[] args = {\"--verbose\"};\n\n        final CommandLineParser parser = new PosixParser();\n\n        final CommandLine cmd = parser.parse(options, args);\n        assertTrue(cmd.hasOption(\"verbose\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "class_name": "BugsTest", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest.[void]test11458()", "name": "test11458", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void test11458()", "original_string": "    @Test\n    public void test11458() throws Exception {\n        final Options options = new Options();\n        options.addOption(OptionBuilder.withValueSeparator('=').hasArgs().create('D'));\n        options.addOption(OptionBuilder.withValueSeparator(':').hasArgs().create('p'));\n        final String[] args = {\"-DJAVA_HOME=/opt/java\", \"-pfile1:file2:file3\"};\n\n        final CommandLineParser parser = new PosixParser();\n\n        final CommandLine cmd = parser.parse(options, args);\n\n        String[] values = cmd.getOptionValues('D');\n\n        assertEquals(values[0], \"JAVA_HOME\");\n        assertEquals(values[1], \"/opt/java\");\n\n        values = cmd.getOptionValues('p');\n\n        assertEquals(values[0], \"file1\");\n        assertEquals(values[1], \"file2\");\n        assertEquals(values[2], \"file3\");\n\n        final Iterator<Option> iter = cmd.iterator();\n        while (iter.hasNext()) {\n            final Option opt = iter.next();\n            switch (opt.getId()) {\n            case 'D':\n                assertEquals(opt.getValue(0), \"JAVA_HOME\");\n                assertEquals(opt.getValue(1), \"/opt/java\");\n                break;\n            case 'p':\n                assertEquals(opt.getValue(0), \"file1\");\n                assertEquals(opt.getValue(1), \"file2\");\n                assertEquals(opt.getValue(2), \"file3\");\n                break;\n            default:\n                fail(\"-D option not found\");\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "class_name": "BugsTest", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest.[void]test11680()", "name": "test11680", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void test11680()", "original_string": "    @Test\n    public void test11680() throws Exception {\n        final Options options = new Options();\n        final Option optionF = options.addOption(\"f\", true, \"foobar\").getOption(\"f\");\n        final Option optionM = options.addOption(\"m\", true, \"missing\").getOption(\"m\");\n        final String[] args = { \"-f\", \"foo\" };\n        final CommandLineParser parser = new PosixParser();\n        final CommandLine cmd = parser.parse(options, args);\n        // 1.7.0 API:\n        cmd.getOptionValue(optionF, () -> \"default f\");\n        cmd.getOptionValue(optionM, () -> \"default m\");\n        // 1.7.0 API:\n        cmd.getOptionValue('f', () -> \"default f\");\n        cmd.getOptionValue('m', () -> \"default m\");\n        // 1.5.0 API:\n        cmd.getOptionValue(optionF, \"default f\");\n        cmd.getOptionValue(optionM, \"default m\");\n        // Original API:\n        cmd.getOptionValue(\"f\", \"default f\");\n        cmd.getOptionValue(\"m\", \"default m\");\n        //\n        assertNull(cmd.getOptionValue((String) null, (String) null));\n        assertEquals(\"default\", cmd.getOptionValue((String) null, \"default\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "class_name": "BugsTest", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest.[void]test12210()", "name": "test12210", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void test12210()", "original_string": "    @Test\n    public void test12210() throws Exception {\n        // create the main options object which will handle the first parameter\n        final Options mainOptions = new Options();\n        // There can be 2 main exclusive options: -exec|-rep\n\n        // Therefore, place them in an option group\n\n        String[] argv = {\"-exec\", \"-exec_opt1\", \"-exec_opt2\"};\n        final OptionGroup grp = new OptionGroup();\n\n        grp.addOption(new Option(\"exec\", false, \"description for this option\"));\n\n        grp.addOption(new Option(\"rep\", false, \"description for this option\"));\n\n        mainOptions.addOptionGroup(grp);\n\n        // for the exec option, there are 2 options...\n        final Options execOptions = new Options();\n        execOptions.addOption(\"exec_opt1\", false, \" desc\");\n        execOptions.addOption(\"exec_opt2\", false, \" desc\");\n\n        // similarly, for rep there are 2 options...\n        final Options repOptions = new Options();\n        repOptions.addOption(\"repopto\", false, \"desc\");\n        repOptions.addOption(\"repoptt\", false, \"desc\");\n\n        // create the parser\n        final GnuParser parser = new GnuParser();\n\n        // finally, parse the arguments:\n\n        // first parse the main options to see what the user has specified\n        // We set stopAtNonOption to true so it does not touch the remaining\n        // options\n        CommandLine cmd = parser.parse(mainOptions, argv, true);\n        // get the remaining options...\n        argv = cmd.getArgs();\n\n        if (cmd.hasOption(\"exec\")) {\n            cmd = parser.parse(execOptions, argv, false);\n            // process the exec_op1 and exec_opt2...\n            assertTrue(cmd.hasOption(\"exec_opt1\"));\n            assertTrue(cmd.hasOption(\"exec_opt2\"));\n        } else if (cmd.hasOption(\"rep\")) {\n            cmd = parser.parse(repOptions, argv, false);\n            // process the rep_op1 and rep_opt2...\n        } else {\n            fail(\"exec option not found\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "class_name": "BugsTest", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest.[void]test13425()", "name": "test13425", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void test13425()", "original_string": "    @Test\n    public void test13425() throws Exception {\n        final Options options = new Options();\n        //@formatter:off\n        final Option oldpass = OptionBuilder.withLongOpt(\"old-password\")\n            .withDescription(\"Use this option to specify the old password\")\n            .hasArg()\n            .create('o');\n        final Option newpass = OptionBuilder.withLongOpt(\"new-password\")\n            .withDescription(\"Use this option to specify the new password\")\n            .hasArg()\n            .create('n');\n        //@formatter:on\n\n        final String[] args = {\"-o\", \"-n\", \"newpassword\"};\n\n        options.addOption(oldpass);\n        options.addOption(newpass);\n\n        final Parser parser = new PosixParser();\n\n        try {\n            parser.parse(options, args);\n            fail(\"MissingArgumentException not caught.\");\n        } catch (final MissingArgumentException expected) {\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "class_name": "BugsTest", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest.[void]test13666()", "name": "test13666", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void test13666()", "original_string": "    @Test\n    public void test13666() throws Exception {\n        final Options options = new Options();\n        final Option dirOption = OptionBuilder.withDescription(\"dir\").hasArg().create('d');\n        options.addOption(dirOption);\n        final PrintStream oldSystemOut = System.out;\n        try {\n            final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            final String eol = System.lineSeparator();\n            System.setOut(new PrintStream(baos));\n            final HelpFormatter formatter = new HelpFormatter();\n            formatter.printHelp(\"dir\", options);\n            assertEquals(\"usage: dir\" + eol + \" -d <arg>   dir\" + eol, baos.toString());\n        } finally {\n            System.setOut(oldSystemOut);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "class_name": "BugsTest", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest.[void]test13666_Builder()", "name": "test13666_Builder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void test13666_Builder()", "original_string": "    @Test\n    public void test13666_Builder() throws Exception {\n        final Options options = new Options();\n        final Option dirOption = OptionBuilder.withDescription(\"dir\").hasArg().create('d');\n        options.addOption(dirOption);\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final String eol = System.lineSeparator();\n        final HelpFormatter formatter = HelpFormatter.builder().setPrintWriter(new PrintWriter(baos)).get();\n        formatter.printHelp(\"dir\", options);\n        assertEquals(\"usage: dir\" + eol + \" -d <arg>   dir\" + eol, baos.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "class_name": "BugsTest", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest.[void]test13935()", "name": "test13935", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void test13935()", "original_string": "    @Test\n    public void test13935() throws Exception {\n        final OptionGroup directions = new OptionGroup();\n\n        final Option left = new Option(\"l\", \"left\", false, \"go left\");\n        final Option right = new Option(\"r\", \"right\", false, \"go right\");\n        final Option straight = new Option(\"s\", \"straight\", false, \"go straight\");\n        final Option forward = new Option(\"f\", \"forward\", false, \"go forward\");\n        forward.setRequired(true);\n\n        directions.addOption(left);\n        directions.addOption(right);\n        directions.setRequired(true);\n\n        final Options opts = new Options();\n        opts.addOptionGroup(directions);\n        opts.addOption(straight);\n\n        final CommandLineParser parser = new PosixParser();\n\n        String[] args = {};\n        try {\n            parser.parse(opts, args);\n            fail(\"Expected ParseException\");\n        } catch (final ParseException expected) {\n        }\n\n        args = new String[] {\"-s\"};\n        try {\n            parser.parse(opts, args);\n            fail(\"Expected ParseException\");\n        } catch (final ParseException expected) {\n        }\n\n        args = new String[] {\"-s\", \"-l\"};\n        CommandLine line = parser.parse(opts, args);\n        assertNotNull(line);\n\n        opts.addOption(forward);\n        args = new String[] {\"-s\", \"-l\", \"-f\"};\n        line = parser.parse(opts, args);\n        assertNotNull(line);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "class_name": "BugsTest", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest.[void]test14786()", "name": "test14786", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void test14786()", "original_string": "    @Test\n    public void test14786() throws Exception {\n        final Option o = OptionBuilder.isRequired().withDescription(\"test\").create(\"test\");\n        final Options opts = new Options();\n        opts.addOption(o);\n        opts.addOption(o);\n\n        final CommandLineParser parser = new GnuParser();\n\n        final String[] args = {\"-test\"};\n\n        final CommandLine line = parser.parse(opts, args);\n        assertTrue(line.hasOption(\"test\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "class_name": "BugsTest", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest.[void]test15046()", "name": "test15046", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void test15046()", "original_string": "    @Test\n    public void test15046() throws Exception {\n        final CommandLineParser parser = new PosixParser();\n        final String[] cliArgs = {\"-z\", \"c\"};\n\n        final Options options = new Options();\n        options.addOption(new Option(\"z\", \"timezone\", true, \"affected option\"));\n\n        parser.parse(options, cliArgs);\n\n        // now add conflicting option\n        options.addOption(\"c\", \"conflict\", true, \"conflict option\");\n        final CommandLine line = parser.parse(options, cliArgs);\n        assertEquals(line.getOptionValue('z'), \"c\");\n        assertFalse(line.hasOption(\"c\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "class_name": "BugsTest", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest.[void]test15648()", "name": "test15648", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void test15648()", "original_string": "    @Test\n    public void test15648() throws Exception {\n        final CommandLineParser parser = new PosixParser();\n        final String[] args = {\"-m\", \"\\\"Two Words\\\"\"};\n        final Option m = OptionBuilder.hasArgs().create(\"m\");\n        final Options options = new Options();\n        options.addOption(m);\n        final CommandLine line = parser.parse(options, args);\n        assertEquals(\"Two Words\", line.getOptionValue(\"m\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "class_name": "BugsTest", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest.[void]test31148()", "name": "test31148", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void test31148()", "original_string": "    @Test\n    public void test31148() throws ParseException {\n        final Option multiArgOption = new Option(\"o\", \"option with multiple args\");\n        multiArgOption.setArgs(1);\n\n        final Options options = new Options();\n        options.addOption(multiArgOption);\n\n        final Parser parser = new PosixParser();\n        final String[] args = {};\n        final Properties props = new Properties();\n        props.setProperty(\"o\", \"ovalue\");\n        final CommandLine cl = parser.parse(options, args, props);\n\n        assertTrue(cl.hasOption('o'));\n        assertEquals(\"ovalue\", cl.getOptionValue('o'));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugsTest.java", "class_name": "BugsTest", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugsTest.java.BugsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java.BugCLI71Test.[void]testBasic()", "name": "testBasic", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBasic()", "original_string": "    @Test\n    public void testBasic() throws Exception {\n        final String[] args = {\"-a\", \"Caesar\", \"-k\", \"A\"};\n        final CommandLine line = parser.parse(options, args);\n        assertEquals(\"Caesar\", line.getOptionValue(\"a\"));\n        assertEquals(\"A\", line.getOptionValue(\"k\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java", "class_name": "BugCLI71Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java.BugCLI71Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java.BugCLI71Test.[void]testGetsDefaultIfOptional()", "name": "testGetsDefaultIfOptional", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetsDefaultIfOptional()", "original_string": "    @Test\n    public void testGetsDefaultIfOptional() throws Exception {\n        final String[] args = {\"-k\", \"-a\", \"Caesar\"};\n        options.getOption(\"k\").setOptionalArg(true);\n        final CommandLine line = parser.parse(options, args);\n\n        assertEquals(\"Caesar\", line.getOptionValue(\"a\"));\n        assertEquals(\"a\", line.getOptionValue('k', \"a\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java", "class_name": "BugCLI71Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java.BugCLI71Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java.BugCLI71Test.[void]testLackOfError()", "name": "testLackOfError", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLackOfError()", "original_string": "    @Test\n    public void testLackOfError() throws Exception {\n        final String[] args = {\"-k\", \"-a\", \"Caesar\"};\n        try {\n            parser.parse(options, args);\n            fail(\"MissingArgumentException expected\");\n        } catch (final MissingArgumentException e) {\n            assertEquals(\"k\", e.getOption().getOpt(), \"option missing an argument\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java", "class_name": "BugCLI71Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java.BugCLI71Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java.BugCLI71Test.[void]testMistakenArgument()", "name": "testMistakenArgument", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMistakenArgument()", "original_string": "    @Test\n    public void testMistakenArgument() throws Exception {\n        String[] args = {\"-a\", \"Caesar\", \"-k\", \"A\"};\n        CommandLine line = parser.parse(options, args);\n        args = new String[] {\"-a\", \"Caesar\", \"-k\", \"a\"};\n        line = parser.parse(options, args);\n        assertEquals(\"Caesar\", line.getOptionValue(\"a\"));\n        assertEquals(\"a\", line.getOptionValue(\"k\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java", "class_name": "BugCLI71Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI71Test.java.BugCLI71Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI325Test.java.BugCLI325Test.[void]testCli325()", "name": "testCli325", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCli325()", "original_string": "    @Test\n    public void testCli325() throws ParseException {\n        // @formatter:off\n        final Option option = Option.builder(\"x\")\n                .hasArgs()\n                .valueSeparator()\n                .desc(\"Multiple arg option with value separator.\")\n                .build();\n        // @formatter:on\n        final String[] args = {\"-x\", \"A=a\", \"B=b\"};\n        final CommandLine cmdLine = DefaultParser.builder().build().parse(new Options().addOption(option), args);\n        final Properties props = cmdLine.getOptionProperties(option);\n        assertEquals(2, props.size());\n        assertEquals(\"a\", props.get(\"A\"));\n        assertEquals(\"b\", props.get(\"B\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI325Test.java", "class_name": "BugCLI325Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI325Test.java.BugCLI325Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java.BugCLI265Test.[void]testShouldParseConcatenatedShortOptions()", "name": "testShouldParseConcatenatedShortOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShouldParseConcatenatedShortOptions()", "original_string": "    @Test\n    public void testShouldParseConcatenatedShortOptions() throws Exception {\n        final String[] concatenatedShortOptions = {\"-t1\", \"-ab\"};\n\n        final CommandLine commandLine = parser.parse(options, concatenatedShortOptions);\n\n        assertTrue(commandLine.hasOption(\"t1\"));\n        assertNull(commandLine.getOptionValue(\"t1\"));\n        assertTrue(commandLine.hasOption(\"a\"));\n        assertTrue(commandLine.hasOption(\"b\"));\n        assertFalse(commandLine.hasOption(\"last\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java", "class_name": "BugCLI265Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java.BugCLI265Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java.BugCLI265Test.[void]testShouldParseShortOptionWithoutValue()", "name": "testShouldParseShortOptionWithoutValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShouldParseShortOptionWithoutValue()", "original_string": "    @Test\n    public void testShouldParseShortOptionWithoutValue() throws Exception {\n        final String[] twoShortOptions = {\"-t1\", \"-last\"};\n\n        final CommandLine commandLine = parser.parse(options, twoShortOptions);\n\n        assertTrue(commandLine.hasOption(\"t1\"));\n        assertNotEquals(commandLine.getOptionValue(\"t1\"), \"Second option has been used as value for first option\", \"-last\");\n        assertTrue(commandLine.hasOption(\"last\"), \"Second option has not been detected\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java", "class_name": "BugCLI265Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java.BugCLI265Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java.BugCLI265Test.[void]testShouldParseShortOptionWithValue()", "name": "testShouldParseShortOptionWithValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShouldParseShortOptionWithValue()", "original_string": "    @Test\n    public void testShouldParseShortOptionWithValue() throws Exception {\n        final String[] shortOptionWithValue = {\"-t1\", \"path/to/my/db\"};\n\n        final CommandLine commandLine = parser.parse(options, shortOptionWithValue);\n\n        assertEquals(\"path/to/my/db\", commandLine.getOptionValue(\"t1\"));\n        assertFalse(commandLine.hasOption(\"last\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java", "class_name": "BugCLI265Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java.BugCLI265Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI133Test.java.BugCLI133Test.[void]testOrder()", "name": "testOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOrder()", "original_string": "    @Test\n    public void testOrder() throws ParseException {\n        final Option optionA = new Option(\"a\", \"first\");\n        final Options opts = new Options();\n        opts.addOption(optionA);\n        final PosixParser posixParser = new PosixParser();\n        final CommandLine line = posixParser.parse(opts, null);\n        assertFalse(line.hasOption((String) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI133Test.java", "class_name": "BugCLI133Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI133Test.java.BugCLI133Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java.BugCLI162Test.[void]testInfiniteLoop()", "name": "testInfiniteLoop", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInfiniteLoop()", "original_string": "    @Test\n    public void testInfiniteLoop() {\n        final Options options = new Options();\n        options.addOption(\"h\", \"help\", false, \"This is a looooong description\");\n        // used to hang & crash\n        formatter.printHelp(new PrintWriter(sw), 20, \"app\", null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\n\n        //@formatter:off\n        final String expected = \"usage: app\" + CR +\n                \" -h,--help   This is\" + CR +\n                \"             a\" + CR +\n                \"             looooon\" + CR +\n                \"             g\" + CR +\n                \"             descrip\" + CR +\n                \"             tion\" + CR;\n        //@formatter:on\n        assertEquals(expected, sw.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java", "class_name": "BugCLI162Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java.BugCLI162Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java.BugCLI162Test.[void]testLongLineChunking()", "name": "testLongLineChunking", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongLineChunking()", "original_string": "    @Test\n    public void testLongLineChunking() {\n        final Options options = new Options();\n        //@formatter:off\n        options.addOption(\"x\", \"extralongarg\", false,\n                          \"This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns \" +\n                          \"and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob, \" +\n                          \"yes. \");\n        //@formatter:on\n        formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");\n        //@formatter:off\n        final String expected = \"usage:\" + CR +\n                          \"       org.apache.commons.cli.bug.B\" + CR +\n                          \"       ugCLI162Test\" + CR +\n                          \"Header\" + CR +\n                          \"-x,--extralongarg     This\" + CR +\n                          \"                      description\" + CR +\n                          \"                      has\" + CR +\n                          \"                      ReallyLongVal\" + CR +\n                          \"                      uesThatAreLon\" + CR +\n                          \"                      gerThanTheWid\" + CR +\n                          \"                      thOfTheColumn\" + CR +\n                          \"                      s and also\" + CR +\n                          \"                      other\" + CR +\n                          \"                      ReallyLongVal\" + CR +\n                          \"                      uesThatAreHug\" + CR +\n                          \"                      erAndBiggerTh\" + CR +\n                          \"                      anTheWidthOfT\" + CR +\n                          \"                      heColumnsBob,\" + CR +\n                          \"                      yes.\" + CR +\n                          \"Footer\" + CR;\n        //@formatter:on\n        assertEquals(expected, sw.toString(), \"Long arguments did not split as expected\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java", "class_name": "BugCLI162Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java.BugCLI162Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java.BugCLI162Test.[void]testLongLineChunkingIndentIgnored()", "name": "testLongLineChunkingIndentIgnored", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongLineChunkingIndentIgnored()", "original_string": "    @Test\n    public void testLongLineChunkingIndentIgnored() {\n        final Options options = new Options();\n        options.addOption(\"x\", \"extralongarg\", false, \"This description is Long.\");\n        formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");\n        //@formatter:off\n        final String expected = \"usage:\" + CR +\n                          \"       org.apache.comm\" + CR +\n                          \"       ons.cli.bug.Bug\" + CR +\n                          \"       CLI162Test\" + CR +\n                          \"Header\" + CR +\n                          \"-x,--extralongarg\" + CR +\n                          \" This description is\" + CR +\n                          \" Long.\" + CR +\n                          \"Footer\" + CR;\n        //@formatter:on\n        assertEquals(expected, sw.toString(), \"Long arguments did not split as expected\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java", "class_name": "BugCLI162Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java.BugCLI162Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java.BugCLI162Test.[void]testPrintHelpLongLines()", "name": "testPrintHelpLongLines", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrintHelpLongLines()", "original_string": "    @Test\n    public void testPrintHelpLongLines() {\n        // Options build\n        final Options commandLineOptions;\n        commandLineOptions = new Options();\n        commandLineOptions.addOption(OPT_HELP, OPT_HELP_LONG, false, \"Prints help and quits\");\n        commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\n        //@formatter:off\n        commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \"\n            + OPT\n            + OPT_CONNECTION\n            + \" is not specified, all drivers on the classpath are displayed.\");\n        //@formatter:on\n        commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\n        commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\n        //@formatter:off\n        commandLineOptions\n                .addOption(\n                        OPT_PASSWORD,\n                        OPT_PASSWORD_L,\n                        true,\n                        \"The database password for the user specified with the \"\n                            + OPT\n                            + OPT_USER\n                            + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password,\"\n                            + \" see https://docs.codehaus.org/display/JETTY/Securing+Passwords\");\n        //@formatter:on\n        commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\");\n        commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\n        commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\n        commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\n        commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\n        commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true,\n            \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\n        commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false,\n            \"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\");\n        commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\n        commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\n        commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\n        //@formatter:off\n        Option option = new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \"\n            + OPT\n            + OPT_COLUMN_NAMES\n            + \" \\\"cname1 cname2\\\"\");\n        //@formatter:on\n        commandLineOptions.addOption(option);\n        //@formatter:off\n        option = new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \"\n            + OPT\n            + OPT_PARAM_NAMES\n            + \" \\\"pname1 pname2\\\"\");\n        //@formatter:on\n        commandLineOptions.addOption(option);\n        //\n        final OptionGroup pOutTypesOptionGroup = new OptionGroup();\n        final String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\n        final String typesClassName = Types.class.getName();\n        //@formatter:off\n        option = new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \"\n            + typesClassName\n            + \". \"\n            + pOutTypesOptionGroupDoc\n            + \" Example: \"\n            + OPT\n            + OPT_PARAM_TYPES_INT\n            + \" \\\"-10 12\\\"\");\n        //@formatter:on\n        commandLineOptions.addOption(option);\n        //@formatter:off\n        option = new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \"\n            + typesClassName\n            + \" names. \"\n            + pOutTypesOptionGroupDoc\n            + \" Example: \"\n            + OPT\n            + OPT_PARAM_TYPES_NAME\n            + \" \\\"CURSOR VARCHAR\\\"\");\n        //@formatter:on\n        commandLineOptions.addOption(option);\n        commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\n        //\n        final OptionGroup modesOptionGroup = new OptionGroup();\n        final String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\n        //@formatter:off\n        option = new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\"\n            + ParameterMetaData.parameterModeIn\n            + \"=IN, \"\n            + ParameterMetaData.parameterModeInOut\n            + \"=INOUT, \"\n            + ParameterMetaData.parameterModeOut\n            + \"=OUT, \"\n            + ParameterMetaData.parameterModeUnknown\n            + \"=Unknown\"\n            + \"). \"\n            + modesOptionGroupDoc\n            + \" Example for 2 parameters, OUT and IN: \"\n            + OPT\n            + OPT_PARAM_MODES_INT\n            + \" \\\"\"\n            + ParameterMetaData.parameterModeOut\n            + \" \"\n            + ParameterMetaData.parameterModeIn\n            + \"\\\"\");\n        //@formatter:on\n        modesOptionGroup.addOption(option);\n        //@formatter:off\n        option = new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\"\n            + PMODES\n            + \"). \"\n            + modesOptionGroupDoc\n            + \" Example for 2 parameters, OUT and IN: \"\n            + OPT\n            + OPT_PARAM_MODES_NAME\n            + \" \\\"\"\n            + PMODE_OUT\n            + \" \"\n            + PMODE_IN\n            + \"\\\"\");\n        //@formatter:on\n        modesOptionGroup.addOption(option);\n        commandLineOptions.addOptionGroup(modesOptionGroup);\n        option = new Option(null, OPT_TRIM_L, true,\n            \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\n        option.setOptionalArg(true);\n        commandLineOptions.addOption(option);\n        option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true,\n            \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\n        option.setArgs(2);\n        commandLineOptions.addOption(option);\n\n        formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions,\n            HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\n        //@formatter:on\n        assertEquals(EXPECTED, sw.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java", "class_name": "BugCLI162Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java.BugCLI162Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI18Test.java.BugCLI18Test.[void]testCLI18()", "name": "testCLI18", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCLI18()", "original_string": "    @Test\n    public void testCLI18() {\n        final Options options = new Options();\n        options.addOption(new Option(\"a\", \"aaa\", false, \"aaaaaaa\"));\n        options.addOption(new Option(null, \"bbb\", false, \"bbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f\"));\n        options.addOption(new Option(\"c\", null, false, \"ccccccc\"));\n\n        final HelpFormatter formatter = new HelpFormatter();\n        final StringWriter out = new StringWriter();\n\n        formatter.printHelp(new PrintWriter(out), 80, \"foobar\",\n            \"dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s\", options, 2, 2,\n            \"blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh\" + '\\r' + '\\n' + \"rarrr\", true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI18Test.java", "class_name": "BugCLI18Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI18Test.java.BugCLI18Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI312Test.java.BugCLI312Test.[void]testNoOptionValues()", "name": "testNoOptionValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoOptionValues()", "original_string": "    @Test\n    public void testNoOptionValues() {\n        final Option o1 = Option.builder(\"A\").build();\n        final Option o2 = Option.builder().option(\"D\").longOpt(\"define\").numberOfArgs(2).valueSeparator('=').build();\n        final Options options = new Options().addOption(o1).addOption(o2);\n\n        final CommandLineParser parser = new DefaultParser();\n\n        assertThrows(MissingArgumentException.class, () -> parser.parse(options, \"-D -A\".split(\" \")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI312Test.java", "class_name": "BugCLI312Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI312Test.java.BugCLI312Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI312Test.java.BugCLI312Test.[void]testPropertyStyleOption_withGetOptionProperties()", "name": "testPropertyStyleOption_withGetOptionProperties", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPropertyStyleOption_withGetOptionProperties()", "original_string": "    @Test\n    public void testPropertyStyleOption_withGetOptionProperties() throws ParseException {\n        final Option o1 = Option.builder().option(\"D\").longOpt(\"define\").numberOfArgs(2).valueSeparator('=').build();\n\n        final Options options = new Options();\n        options.addOption(o1);\n\n        final CommandLineParser parser = new DefaultParser();\n\n        final CommandLine cl = parser.parse(options, \"-Dv -Dw=1 -D x=2 -D y -D z=3 other\".split(\" \"));\n        assertArrayEquals(new String[] {\"v\", \"w\", \"1\", \"x\", \"2\", \"y\", \"z\", \"3\"}, cl.getOptionValues('D'));\n\n        final Properties properties = cl.getOptionProperties(\"D\");\n        assertEquals(\"true\", properties.getProperty(\"v\"));\n        assertEquals(\"1\", properties.getProperty(\"w\"));\n        assertEquals(\"2\", properties.getProperty(\"x\"));\n        assertEquals(\"true\", properties.getProperty(\"y\"));\n        assertEquals(\"3\", properties.getProperty(\"z\"));\n        assertEquals(5, properties.size());\n        assertEquals(\"other\", cl.getArgList().get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI312Test.java", "class_name": "BugCLI312Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI312Test.java.BugCLI312Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI312Test.java.BugCLI312Test.[void]testPropertyStyleOption_withGetOptions()", "name": "testPropertyStyleOption_withGetOptions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPropertyStyleOption_withGetOptions()", "original_string": "    @Test\n    public void testPropertyStyleOption_withGetOptions() throws ParseException {\n        final Option o1 = Option.builder().option(\"D\").longOpt(\"define\").numberOfArgs(2).valueSeparator('=').build();\n\n        final Options options = new Options();\n        options.addOption(o1);\n\n        final CommandLineParser parser = new DefaultParser();\n\n        final CommandLine cl = parser.parse(options, \"-Dv -Dw=1 -D x=2 -D y -D z=3 other\".split(\" \"));\n        assertArrayEquals(new String[] {\"v\", \"w\", \"1\", \"x\", \"2\", \"y\", \"z\", \"3\"}, cl.getOptionValues('D'));\n\n        int defineOptionsFound = 0;\n        for (final Option o : cl.getOptions()) {\n            if (\"D\".equals(o.getOpt())) {\n                defineOptionsFound++;\n\n                switch (defineOptionsFound) {\n                case 1:\n                    assertArrayEquals(new String[] {\"v\"}, o.getValues());\n                    break;\n                case 2:\n                    assertArrayEquals(new String[] {\"w\", \"1\"}, o.getValues());\n                    break;\n                case 3:\n                    assertArrayEquals(new String[] {\"x\", \"2\"}, o.getValues());\n                    break;\n                case 4:\n                    assertArrayEquals(new String[] {\"y\"}, o.getValues());\n                    break;\n                case 5:\n                    assertArrayEquals(new String[] {\"z\", \"3\"}, o.getValues());\n                    break;\n                default:\n                    fail(\"Didn't expect \" + defineOptionsFound + \" occurrences of -D\");\n                    break;\n                }\n            }\n        }\n        assertEquals(\"other\", cl.getArgList().get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI312Test.java", "class_name": "BugCLI312Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI312Test.java.BugCLI312Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI252Test.java.BugCLI252Test.[void]testAmbiquousOptionName()", "name": "testAmbiquousOptionName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAmbiquousOptionName()", "original_string": "    @Test\n    public void testAmbiquousOptionName() {\n        assertThrows(AmbiguousOptionException.class, () ->\n                new DefaultParser().parse(getOptions(), new String[]{\"--pref\"})\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI252Test.java", "class_name": "BugCLI252Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI252Test.java.BugCLI252Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/cli/bug/BugCLI252Test.java.BugCLI252Test.[void]testExactOptionNameMatch()", "name": "testExactOptionNameMatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExactOptionNameMatch()", "original_string": "    @Test\n    public void testExactOptionNameMatch() throws ParseException {\n        new DefaultParser().parse(getOptions(), new String[] {\"--prefix\"});\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/cli/bug/BugCLI252Test.java", "class_name": "BugCLI252Test", "class_uri": "src/test/java/org/apache/commons/cli/bug/BugCLI252Test.java.BugCLI252Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}]