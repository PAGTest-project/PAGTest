[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DomainValidator_getInstanceTest {\n    private DomainValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        validator = DomainValidator.getInstance(false);\n    }\n\n    @Test\n    public void testGetInstanceWithLocalAllowed() {\n        DomainValidator localValidator = DomainValidator.getInstance(true);\n        assertNotNull(localValidator);\n        assertTrue(localValidator.isAllowLocal());\n    }\n\n    @Test\n    public void testGetInstanceWithLocalNotAllowed() {\n        DomainValidator nonLocalValidator = DomainValidator.getInstance(false);\n        assertNotNull(nonLocalValidator);\n        assertFalse(nonLocalValidator.isAllowLocal());\n    }\n\n    @Test\n    public void testGetInstanceWithLocalAllowedAndCustomTLDs() {\n        List<DomainValidator.Item> items = new ArrayList<>();\n        items.add(new DomainValidator.Item(DomainValidator.ArrayType.GENERIC_PLUS, \"local\", \"pvt\"));\n        DomainValidator customValidator = DomainValidator.getInstance(true, items);\n        assertNotNull(customValidator);\n        assertTrue(customValidator.isAllowLocal());\n        assertTrue(customValidator.isValidGenericTld(\"local\"));\n        assertTrue(customValidator.isValid(\"abc.local\"));\n        assertTrue(customValidator.isValidGenericTld(\"pvt\"));\n        assertTrue(customValidator.isValid(\"abc.pvt\"));\n    }\n\n    @Test\n    public void testGetInstanceWithLocalNotAllowedAndCustomTLDs() {\n        List<DomainValidator.Item> items = new ArrayList<>();\n        items.add(new DomainValidator.Item(DomainValidator.ArrayType.GENERIC_PLUS, \"local\", \"pvt\"));\n        DomainValidator customValidator = DomainValidator.getInstance(false, items);\n        assertNotNull(customValidator);\n        assertFalse(customValidator.isAllowLocal());\n        assertTrue(customValidator.isValidGenericTld(\"local\"));\n        assertTrue(customValidator.isValid(\"abc.local\"));\n        assertTrue(customValidator.isValidGenericTld(\"pvt\"));\n        assertTrue(customValidator.isValid(\"abc.pvt\"));\n    }\n\n    @Test\n    public void testGetTLDEntries() {\n        String[] genericTLDs = DomainValidator.getTLDEntries(DomainValidator.ArrayType.GENERIC_RO);\n        assertNotNull(genericTLDs);\n        assertTrue(genericTLDs.length > 0);\n\n        String[] countryCodeTLDs = DomainValidator.getTLDEntries(DomainValidator.ArrayType.COUNTRY_CODE_RO);\n        assertNotNull(countryCodeTLDs);\n        assertTrue(countryCodeTLDs.length > 0);\n    }\n\n    @Test\n    public void testUnicodeToASCII() {\n        String asciiDomain = DomainValidator.unicodeToASCII(\"\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444\");\n        assertEquals(\"xn--d1abbgf6aiiy.xn--p1ai\", asciiDomain);\n    }\n\n    @Test\n    public void testIsValidDomainSyntax() {\n        assertTrue(validator.isValidDomainSyntax(\"example.com\"));\n        assertFalse(validator.isValidDomainSyntax(\"example..com\"));\n    }\n\n    @Test\n    public void testIsValid() {\n        assertTrue(validator.isValid(\"example.com\"));\n        assertFalse(validator.isValid(\"example..com\"));\n    }\n}\n"}]