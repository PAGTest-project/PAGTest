[{"strategy": "generate", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DomainValidator_isValidTest {\n\n    private DomainValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        validator = DomainValidator.getInstance();\n    }\n\n    @Test\n    public void testIsValidWithNullDomain() {\n        assertFalse(validator.isValid(null), \"Null domain should not be valid\");\n    }\n\n    @Test\n    public void testIsValidWithEmptyDomain() {\n        assertFalse(validator.isValid(\"\"), \"Empty domain should not be valid\");\n    }\n\n    @Test\n    public void testIsValidWithValidDomain() {\n        assertTrue(validator.isValid(\"example.com\"), \"example.com should be valid\");\n    }\n\n    @Test\n    public void testIsValidWithInvalidDomain() {\n        assertFalse(validator.isValid(\"invalid..domain\"), \"Invalid domain should not be valid\");\n    }\n\n    @Test\n    public void testIsValidWithValidUnicodeDomain() {\n        assertTrue(validator.isValid(\"\u4f8b\u3048.\u30c6\u30b9\u30c8\"), \"Unicode domain should be valid\");\n    }\n\n    @Test\n    public void testIsValidWithInvalidUnicodeDomain() {\n        assertFalse(validator.isValid(\"\u4f8b\u3048..\u30c6\u30b9\u30c8\"), \"Invalid Unicode domain should not be valid\");\n    }\n\n    @Test\n    public void testIsValidWithValidCountryCodeTLD() {\n        assertTrue(validator.isValid(\"example.co.uk\"), \"example.co.uk should be valid\");\n    }\n\n    @Test\n    public void testIsValidWithInvalidCountryCodeTLD() {\n        assertFalse(validator.isValid(\"example.invalidcc\"), \"Invalid country code TLD should not be valid\");\n    }\n\n    @Test\n    public void testIsValidWithValidGenericTLD() {\n        assertTrue(validator.isValid(\"example.info\"), \"example.info should be valid\");\n    }\n\n    @Test\n    public void testIsValidWithInvalidGenericTLD() {\n        assertFalse(validator.isValid(\"example.invalidgtld\"), \"Invalid generic TLD should not be valid\");\n    }\n\n    @Test\n    public void testIsValidWithValidLocalTLD() {\n        assertTrue(validator.isValid(\"example.local\"), \"example.local should be valid\");\n    }\n\n    @Test\n    public void testIsValidWithInvalidLocalTLD() {\n        assertFalse(validator.isValid(\"example.invalidlocal\"), \"Invalid local TLD should not be valid\");\n    }\n\n    @Test\n    public void testIsValidWithValidInfrastructureTLD() {\n        assertTrue(validator.isValid(\"example.arpa\"), \"example.arpa should be valid\");\n    }\n\n    @Test\n    public void testIsValidWithInvalidInfrastructureTLD() {\n        assertFalse(validator.isValid(\"example.invalidinfra\"), \"Invalid infrastructure TLD should not be valid\");\n    }\n\n    @Test\n    public void testIsValidWithDomainExceedingMaxLength() {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < 254; i++) {\n            sb.append('a');\n        }\n        assertFalse(validator.isValid(sb.toString()), \"Domain exceeding max length should not be valid\");\n    }\n\n    @Test\n    public void testIsValidWithDomainAtMaxLength() {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < 253; i++) {\n            sb.append('a');\n        }\n        assertTrue(validator.isValid(sb.toString()), \"Domain at max length should be valid\");\n    }\n}\n"}]