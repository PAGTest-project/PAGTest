[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class UrlValidator_isValidTest {\n    private UrlValidator urlValidator;\n\n    @BeforeEach\n    public void setUp() {\n        urlValidator = new UrlValidator();\n    }\n\n    @Test\n    public void testIsValid_Null() {\n        assertFalse(urlValidator.isValid(null), \"Null value should be invalid\");\n    }\n\n    @Test\n    public void testIsValid_InvalidScheme() {\n        assertFalse(urlValidator.isValid(\"invalid://2001:db8:85a3:0:0:8a2e:370:7334\"), \"Invalid scheme should be invalid\");\n    }\n\n    @Test\n    public void testIsValid_ValidScheme() {\n        assertTrue(urlValidator.isValid(\"http://2001:db8:85a3:0:0:8a2e:370:7334\"), \"Valid scheme should be valid\");\n    }\n\n    @Test\n    public void testIsValid_EmptyAuthority() {\n        assertTrue(urlValidator.isValid(\"file:///path/to/file\"), \"Empty authority for file scheme should be valid\");\n    }\n\n    @Test\n    public void testIsValid_ColonInAuthority() {\n        assertFalse(urlValidator.isValid(\"file://user:pass@host:port/path\"), \"Colon in authority for file scheme should be invalid\");\n    }\n\n    @Test\n    public void testIsValid_InvalidAuthority() {\n        assertFalse(urlValidator.isValid(\"http://invalid-authority\"), \"Invalid authority should be invalid\");\n    }\n\n    @Test\n    public void testIsValid_InvalidPath() {\n        assertFalse(urlValidator.isValid(\"http://example.com/invalid/path/..\"), \"Invalid path should be invalid\");\n    }\n\n    @Test\n    public void testIsValid_InvalidQuery() {\n        assertFalse(urlValidator.isValid(\"http://example.com/?invalid query\"), \"Invalid query should be invalid\");\n    }\n\n    @Test\n    public void testIsValid_InvalidFragment() {\n        assertFalse(urlValidator.isValid(\"http://example.com/#invalid fragment\"), \"Invalid fragment should be invalid\");\n    }\n\n    @Test\n    public void testIsValid_ValidUrl() {\n        assertTrue(urlValidator.isValid(\"http://example.com\"), \"Valid URL should be valid\");\n    }\n\n    @Test\n    public void testIsValid_ValidUrlWithPath() {\n        assertTrue(urlValidator.isValid(\"http://example.com/path/to/resource\"), \"Valid URL with path should be valid\");\n    }\n\n    @Test\n    public void testIsValid_ValidUrlWithQuery() {\n        assertTrue(urlValidator.isValid(\"http://example.com/?query=param\"), \"Valid URL with query should be valid\");\n    }\n\n    @Test\n    public void testIsValid_ValidUrlWithFragment() {\n        assertTrue(urlValidator.isValid(\"http://example.com/#fragment\"), \"Valid URL with fragment should be valid\");\n    }\n\n    @Test\n    public void testIsValid_ValidUrlWithAllComponents() {\n        assertTrue(urlValidator.isValid(\"http://user:pass@example.com:8080/path/to/resource?query=param#fragment\"), \"Valid URL with all components should be valid\");\n    }\n\n    @Test\n    public void testIsValid_ValidIPv6Url() {\n        assertTrue(urlValidator.isValid(\"http://[2001:db8:85a3:0:0:8a2e:370:7334]\"), \"Valid IPv6 URL should be valid\");\n    }\n\n    @Test\n    public void testIsValid_ValidIPv6UrlWithPort() {\n        assertTrue(urlValidator.isValid(\"http://[2001:db8:85a3:0:0:8a2e:370:7334]:8080\"), \"Valid IPv6 URL with port should be valid\");\n    }\n\n    @Test\n    public void testIsValid_ValidIPv6UrlWithPath() {\n        assertTrue(urlValidator.isValid(\"http://[2001:db8:85a3:0:0:8a2e:370:7334]/path/to/resource\"), \"Valid IPv6 URL with path should be valid\");\n    }\n\n    @Test\n    public void testIsValid_ValidIPv6UrlWithQuery() {\n        assertTrue(urlValidator.isValid(\"http://[2001:db8:85a3:0:0:8a2e:370:7334]?query=param\"), \"Valid IPv6 URL with query should be valid\");\n    }\n\n    @Test\n    public void testIsValid_ValidIPv6UrlWithFragment() {\n        assertTrue(urlValidator.isValid(\"http://[2001:db8:85a3:0:0:8a2e:370:7334]#fragment\"), \"Valid IPv6 URL with fragment should be valid\");\n    }\n\n    @Test\n    public void testIsValid_ValidIPv6UrlWithAllComponents() {\n        assertTrue(urlValidator.isValid(\"http://user:pass@[2001:db8:85a3:0:0:8a2e:370:7334]:8080/path/to/resource?query=param#fragment\"), \"Valid IPv6 URL with all components should be valid\");\n    }\n}\n"}]