[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DomainValidator_isValidTldTest {\n    private DomainValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        validator = DomainValidator.getInstance(true); // Allow local domains\n    }\n\n    @Test\n    public void testIsValidTldValidCountryCode() {\n        assertTrue(validator.isValidTld(\"us\"));\n    }\n\n    @Test\n    public void testIsValidTldValidGeneric() {\n        assertTrue(validator.isValidTld(\"com\"));\n    }\n\n    @Test\n    public void testIsValidTldValidInfrastructure() {\n        assertTrue(validator.isValidTld(\"arpa\"));\n    }\n\n    @Test\n    public void testIsValidTldValidLocal() {\n        assertTrue(validator.isValidTld(\"localhost\"));\n    }\n\n    @Test\n    public void testIsValidTldInvalid() {\n        assertFalse(validator.isValidTld(\"invalid\"));\n    }\n\n    @Test\n    public void testIsValidTldNull() {\n        assertFalse(validator.isValidTld(null));\n    }\n\n    @Test\n    public void testIsValidTldEmpty() {\n        assertFalse(validator.isValidTld(\"\"));\n    }\n\n    @Test\n    public void testIsValidTldLeadingDot() {\n        assertTrue(validator.isValidTld(\".com\"));\n    }\n\n    @Test\n    public void testIsValidTldUnicodeToASCII() {\n        assertTrue(validator.isValidTld(\"\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444\"));\n    }\n\n    @Test\n    public void testIsValidTldMaxLength() {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < 253; i++) {\n            sb.append('a');\n        }\n        assertTrue(validator.isValid(sb.toString())); // Use isValid instead of isValidTld\n    }\n\n    @Test\n    public void testIsValidTldExceedMaxLength() {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < 254; i++) {\n            sb.append('a');\n        }\n        assertFalse(validator.isValid(sb.toString())); // Use isValid instead of isValidTld\n    }\n}\n"}]