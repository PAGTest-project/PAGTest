[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport org.apache.commons.validator.routines.checkdigit.CheckDigit;\nimport org.apache.commons.validator.routines.checkdigit.EAN13CheckDigit;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CodeValidator_validateTest {\n\n    private CodeValidator codeValidator;\n    private CheckDigit checkDigit;\n\n    @BeforeEach\n    public void setUp() {\n        checkDigit = EAN13CheckDigit.EAN13_CHECK_DIGIT;\n        codeValidator = new CodeValidator(\"^[0-9]*$\", 13, 13, checkDigit);\n    }\n\n    @Test\n    public void testValidateNullInput() {\n        assertNull(codeValidator.validate(null), \"Null input should return null\");\n    }\n\n    @Test\n    public void testValidateEmptyInput() {\n        assertNull(codeValidator.validate(\"\"), \"Empty input should return null\");\n    }\n\n    @Test\n    public void testValidateInvalidRegex() {\n        codeValidator = new CodeValidator(\"^[A-Z]*$\", 13, 13, checkDigit);\n        assertNull(codeValidator.validate(\"1234567890123\"), \"Input does not match regex should return null\");\n    }\n\n    @Test\n    public void testValidateInvalidLength() {\n        assertNull(codeValidator.validate(\"123456789012\"), \"Input length less than minLength should return null\");\n        assertNull(codeValidator.validate(\"12345678901234\"), \"Input length greater than maxLength should return null\");\n    }\n\n    @Test\n    public void testValidateInvalidCheckDigit() {\n        assertNull(codeValidator.validate(\"1234567890128\"), \"Invalid check digit should return null\");\n    }\n\n    @Test\n    public void testValidateValidInput() {\n        assertEquals(\"1234567890123\", codeValidator.validate(\"1234567890123\"), \"Valid input should return the input\");\n    }\n}\n"}]