[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class DomainValidator_updateTLDOverrideTest {\n\n    private DomainValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        // Ensure inUse is false before each test\n        DomainValidator.updateTLDOverride(DomainValidator.ArrayType.COUNTRY_CODE_MINUS, new String[]{});\n        validator = DomainValidator.getInstance();\n    }\n\n    @Test\n    public void testUpdateTLDOverride_CountryCodeMinus() {\n        String[] tlds = {\"com\", \"net\", \"org\"};\n        DomainValidator.updateTLDOverride(DomainValidator.ArrayType.COUNTRY_CODE_MINUS, tlds);\n        assertFalse(validator.isValidCountryCodeTld(\"com\"));\n        assertFalse(validator.isValidCountryCodeTld(\"net\"));\n        assertFalse(validator.isValidCountryCodeTld(\"org\"));\n    }\n\n    @Test\n    public void testUpdateTLDOverride_CountryCodePlus() {\n        String[] tlds = {\"com\", \"net\", \"org\"};\n        DomainValidator.updateTLDOverride(DomainValidator.ArrayType.COUNTRY_CODE_PLUS, tlds);\n        assertTrue(validator.isValidCountryCodeTld(\"com\"));\n        assertTrue(validator.isValidCountryCodeTld(\"net\"));\n        assertTrue(validator.isValidCountryCodeTld(\"org\"));\n    }\n\n    @Test\n    public void testUpdateTLDOverride_GenericMinus() {\n        String[] tlds = {\"com\", \"net\", \"org\"};\n        DomainValidator.updateTLDOverride(DomainValidator.ArrayType.GENERIC_MINUS, tlds);\n        assertFalse(validator.isValidGenericTld(\"com\"));\n        assertFalse(validator.isValidGenericTld(\"net\"));\n        assertFalse(validator.isValidGenericTld(\"org\"));\n    }\n\n    @Test\n    public void testUpdateTLDOverride_GenericPlus() {\n        String[] tlds = {\"com\", \"net\", \"org\"};\n        DomainValidator.updateTLDOverride(DomainValidator.ArrayType.GENERIC_PLUS, tlds);\n        assertTrue(validator.isValidGenericTld(\"com\"));\n        assertTrue(validator.isValidGenericTld(\"net\"));\n        assertTrue(validator.isValidGenericTld(\"org\"));\n    }\n\n    @Test\n    public void testUpdateTLDOverride_LocalMinus() {\n        String[] tlds = {\"localhost\", \"localdomain\"};\n        DomainValidator.updateTLDOverride(DomainValidator.ArrayType.LOCAL_MINUS, tlds);\n        assertFalse(validator.isValidLocalTld(\"localhost\"));\n        assertFalse(validator.isValidLocalTld(\"localdomain\"));\n    }\n\n    @Test\n    public void testUpdateTLDOverride_LocalPlus() {\n        String[] tlds = {\"localhost\", \"localdomain\"};\n        DomainValidator.updateTLDOverride(DomainValidator.ArrayType.LOCAL_PLUS, tlds);\n        assertTrue(validator.isValidLocalTld(\"localhost\"));\n        assertTrue(validator.isValidLocalTld(\"localdomain\"));\n    }\n\n    @Test\n    public void testUpdateTLDOverride_InvalidTable() {\n        String[] tlds = {\"com\", \"net\", \"org\"};\n        assertThrows(IllegalArgumentException.class, () -> {\n            DomainValidator.updateTLDOverride(DomainValidator.ArrayType.GENERIC_RO, tlds);\n        });\n    }\n\n    @Test\n    public void testUpdateTLDOverride_InUse() {\n        DomainValidator.getInstance(); // Ensure inUse is true\n        assertThrows(IllegalStateException.class, () -> {\n            DomainValidator.updateTLDOverride(DomainValidator.ArrayType.COUNTRY_CODE_MINUS, new String[]{\"com\"});\n        });\n    }\n}\n"}]