[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.apache.commons.validator.routines.checkdigit.CheckDigitException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ISBNValidator_convertToISBN13Test {\n\n    private ISBNValidator isbnValidator;\n\n    @BeforeEach\n    public void setUp() {\n        isbnValidator = new ISBNValidator();\n    }\n\n    @Test\n    public void testConvertToISBN13_NullInput() {\n        assertNull(isbnValidator.convertToISBN13(null));\n    }\n\n    @Test\n    public void testConvertToISBN13_InvalidLength() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            isbnValidator.convertToISBN13(\"123456789\");\n        });\n    }\n\n    @Test\n    public void testConvertToISBN13_ValidInput() {\n        String isbn13 = isbnValidator.convertToISBN13(\"1234567890\");\n        assertNotNull(isbn13);\n        assertEquals(13, isbn13.length());\n        assertTrue(isbn13.startsWith(\"978\"));\n    }\n\n    @Test\n    public void testConvertToISBN13_CheckDigitException() {\n        // Assuming the calculate method throws a CheckDigitException for this input\n        assertThrows(IllegalArgumentException.class, () -> {\n            isbnValidator.convertToISBN13(\"123456789X\");\n        });\n    }\n}\n"}]