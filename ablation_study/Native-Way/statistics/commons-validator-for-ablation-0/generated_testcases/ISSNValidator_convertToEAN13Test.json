[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.apache.commons.validator.routines.checkdigit.CheckDigitException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ISSNValidator_convertToEAN13Test {\n\n    private ISSNValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        validator = new ISSNValidator();\n    }\n\n    @Test\n    public void testConvertToEAN13Valid() {\n        String issn = \"1234-5679\";\n        String suffix = \"00\";\n        String expectedEAN13 = \"97712345670009\";\n        assertEquals(expectedEAN13, validator.convertToEAN13(issn, suffix));\n    }\n\n    @Test\n    public void testConvertToEAN13InvalidSuffix() {\n        String issn = \"1234-5679\";\n        String suffix = \"AB\";\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            validator.convertToEAN13(issn, suffix);\n        });\n        assertEquals(\"Suffix must be two digits: 'AB'\", exception.getMessage());\n    }\n\n    @Test\n    public void testConvertToEAN13NullSuffix() {\n        String issn = \"1234-5679\";\n        String suffix = null;\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            validator.convertToEAN13(issn, suffix);\n        });\n        assertEquals(\"Suffix must be two digits: 'null'\", exception.getMessage());\n    }\n\n    @Test\n    public void testConvertToEAN13InvalidISSN() {\n        String issn = \"1234-5678\"; // Invalid ISSN\n        String suffix = \"00\";\n        assertNull(validator.convertToEAN13(issn, suffix));\n    }\n\n    @Test\n    public void testConvertToEAN13CheckDigitException() {\n        String issn = \"1234-5679\";\n        String suffix = \"00\";\n        // Mocking a CheckDigitException scenario\n        ISSNValidator mockValidator = new ISSNValidator() {\n            @Override\n            public Object validate(final String code) {\n                return \"1234567\"; // Valid ISSN without check digit\n            }\n        };\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            mockValidator.convertToEAN13(issn, suffix);\n        });\n        assertTrue(exception.getMessage().contains(\"Check digit error for '9771234567000'\"));\n    }\n}\n"}]