[{"strategy": "retry", "code": "\npackage org.apache.commons.validator;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.io.InputStream;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class Form_toStringTest {\n\n    private static final String FORM_KEY = \"FORM_KEY\";\n    private static final String FORM_KEY2 = \"FORM_KEY2\";\n    private ValidatorResources resources;\n\n    @BeforeEach\n    protected void setUp() throws Exception {\n        // Load resources\n        try (InputStream in = this.getClass().getResourceAsStream(\"/org/apache/commons/validator/ExtensionTest-config.xml\")) {\n            resources = new ValidatorResources(in);\n        }\n    }\n\n    @Test\n    public void testToStringWithFields() {\n        final Form form = resources.getForm(ValidatorResources.defaultLocale, FORM_KEY);\n        assertNotNull(form, \"Form with key \" + FORM_KEY + \" should not be null.\");\n\n        String formString = form.toString();\n        assertNotNull(formString, \"toString() should not return null.\");\n        assertTrue(formString.contains(\"Form: \" + form.getName()), \"toString() should contain form name.\");\n\n        List<Field> fields = form.getFields();\n        for (Field field : fields) {\n            assertTrue(formString.contains(\"\\tField: \\n\" + field.toString()), \"toString() should contain each field.\");\n        }\n    }\n\n    @Test\n    public void testToStringWithoutFields() {\n        final Form form = new Form();\n        form.setName(\"TestForm\");\n\n        String formString = form.toString();\n        assertNotNull(formString, \"toString() should not return null.\");\n        assertEquals(\"Form: TestForm\\n\", formString, \"toString() should match expected format without fields.\");\n    }\n}\n"}]