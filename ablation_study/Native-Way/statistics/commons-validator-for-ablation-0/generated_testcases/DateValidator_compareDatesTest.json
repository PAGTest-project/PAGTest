[{"strategy": "generate", "code": "\npackage org.apache.commons.validator.routines;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.TimeZone;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class DateValidator_compareDatesTest {\n    private DateValidator dateValidator;\n    private static final TimeZone GMT = TimeZone.getTimeZone(\"GMT\");\n    private static final TimeZone EST = TimeZone.getTimeZone(\"EST\");\n\n    @BeforeEach\n    protected void setUp() {\n        dateValidator = new DateValidator();\n    }\n\n    @Test\n    public void testCompareDates() {\n        final int sameTime = 124522;\n        final int testDate = 20050823;\n        final Date diffHour = createDate(GMT, testDate, 115922); // same date, different time\n\n        final Date value = createDate(GMT, testDate, sameTime); // test value\n        final Date date20050824 = createDate(GMT, 20050824, sameTime); // +1 day\n        final Date date20050822 = createDate(GMT, 20050822, sameTime); // -1 day\n\n        assertEquals(-1, dateValidator.compareDates(value, date20050824, GMT), \"date LT\"); // +1 day\n        assertEquals(0, dateValidator.compareDates(value, diffHour, GMT), \"date EQ\"); // same day, diff hour\n        assertEquals(1, dateValidator.compareDates(value, date20050822, GMT), \"date GT\"); // -1 day\n\n        // Compare using alternative TimeZone\n        final Date sameDayTwoAm = createDate(GMT, testDate, 20000);\n        assertEquals(-1, dateValidator.compareDates(value, date20050824, EST), \"date LT\"); // +1 day\n        assertEquals(0, dateValidator.compareDates(value, diffHour, EST), \"date EQ\"); // same day, diff hour\n        assertEquals(1, dateValidator.compareDates(value, sameDayTwoAm, EST), \"date EQ\"); // same day, diff hour\n        assertEquals(1, dateValidator.compareDates(value, date20050822, EST), \"date GT\"); // -1 day\n    }\n\n    private Date createDate(TimeZone timeZone, int date, int time) {\n        Calendar calendar = Calendar.getInstance(timeZone);\n        calendar.set(Calendar.YEAR, date / 10000);\n        calendar.set(Calendar.MONTH, (date % 10000) / 100 - 1);\n        calendar.set(Calendar.DAY_OF_MONTH, date % 100);\n        calendar.set(Calendar.HOUR_OF_DAY, time / 10000);\n        calendar.set(Calendar.MINUTE, (time % 10000) / 100);\n        calendar.set(Calendar.SECOND, time % 100);\n        calendar.set(Calendar.MILLISECOND, 0);\n        return calendar.getTime();\n    }\n}\n"}]