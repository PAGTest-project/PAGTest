[{"file_path": "src/test/java/com/github/davidmoten/rtree/NodePosition_toStringTest.java", "testclass_name": "NodePosition_toStringTest", "dependencies": ["package com.github.davidmoten.rtree;", "import com.github.davidmoten.rtree.geometry.Geometry;", "import org.junit.Test;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;"], "name": "NodePosition_toStringTest", "description": "Unit test for the toString method of NodePosition class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testToString", "primary_tested": ["NodePosition.toString()"], "external_dependencies": {"modules": ["Node", "NodePosition", "Geometry", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the toString method of the NodePosition class, ensuring it returns the expected string representation."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_linesIntersectTest.java", "testclass_name": "Line2D_linesIntersectTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;"], "name": "Line2D_linesIntersectTest", "description": "Unit tests for the Line2D.linesIntersect method, which checks if two lines intersect.", "test_cases": [{"name": "testLinesIntersect_IntersectingLines", "primary_tested": ["Line2D.linesIntersect(int,int,int,int,int,int,int,int)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the linesIntersect method with intersecting lines."}, {"name": "testLinesIntersect_NonIntersectingLines", "primary_tested": ["Line2D.linesIntersect(int,int,int,int,int,int,int,int)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the linesIntersect method with non-intersecting lines."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_popTest.java", "testclass_name": "ImmutableStack_popTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import org.junit.Test;"], "name": "ImmutableStack_popTest", "description": "Unit tests for the pop functionality of the ImmutableStack class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testPopOnNonEmptyStack", "primary_tested": ["ImmutableStack.pop()"], "associated_methods": ["ImmutableStack.create(Integer)", "ImmutableStack.push(Integer)", "ImmutableStack.peek()"], "external_dependencies": {"modules": ["ImmutableStack", "Integer"]}, "category": "unit", "description": "Tests the pop functionality on a non-empty stack."}, {"name": "testPopOnSingleElementStack", "primary_tested": ["ImmutableStack.pop()"], "associated_methods": ["ImmutableStack.create(Integer)", "ImmutableStack.isEmpty()"], "external_dependencies": {"modules": ["ImmutableStack", "Integer"]}, "category": "unit", "description": "Tests the pop functionality on a stack with a single element."}, {"name": "testPopOnEmptyStack", "primary_tested": ["ImmutableStack.pop()"], "associated_methods": ["ImmutableStack.empty()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests the pop functionality on an empty stack, expecting a RuntimeException."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/ObjectsHelper_asClassTest.java", "testclass_name": "ObjectsHelper_asClassTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import java.util.Optional;", "import org.junit.Test;"], "name": "ObjectsHelper_asClassTest", "description": "Unit tests for the ObjectsHelper.asClass method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testAsClassWithNullObject", "primary_tested": ["ObjectsHelper.asClass(Object,Class)"], "external_dependencies": {"modules": ["ObjectsHelper", "Optional"]}, "category": "unit", "description": "Tests the asClass method with a null object."}, {"name": "testAsClassWithMatchingClass", "primary_tested": ["ObjectsHelper.asClass(Object,Class)"], "external_dependencies": {"modules": ["ObjectsHelper", "Optional"]}, "category": "unit", "description": "Tests the asClass method with an object matching the specified class."}, {"name": "testAsClassWithNonMatchingClass", "primary_tested": ["ObjectsHelper.asClass(Object,Class)"], "external_dependencies": {"modules": ["ObjectsHelper", "Optional"]}, "category": "unit", "description": "Tests the asClass method with an object not matching the specified class."}, {"name": "coverPrivateConstructor", "primary_tested": ["ObjectsHelper.instantiateForTestCoveragePurposesOnly()"], "external_dependencies": {"modules": ["ObjectsHelper"]}, "category": "unit", "description": "Tests the instantiation of ObjectsHelper for test coverage purposes."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/Line2D_ptSegDistSqTest.java", "testclass_name": "Line2D_ptSegDistSqTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import static org.junit.Assert.assertEquals;", "import org.junit.Test;"], "name": "Line2D_ptSegDistSqTest", "description": "Unit tests for the ptSegDistSq method in the Line2D class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testPtSegDistSqPointOnSideOfX1Y1", "primary_tested": ["Line2D.ptSegDistSq(double,double,double,double,double,double)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the ptSegDistSq method with a point on the side of (x1, y1)."}, {"name": "testPtSegDistSqPointOnSideOfX2Y2", "primary_tested": ["Line2D.ptSegDistSq(double,double,double,double,double,double)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the ptSegDistSq method with a point on the side of (x2, y2)."}, {"name": "testPtSegDistSqPointBetweenX1Y1AndX2Y2", "primary_tested": ["Line2D.ptSegDistSq(double,double,double,double,double,double)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the ptSegDistSq method with a point between (x1, y1) and (x2, y2)."}, {"name": "testPtSegDistSqPointExactlyOnLine", "primary_tested": ["Line2D.ptSegDistSq(double,double,double,double,double,double)"], "external_dependencies": {"modules": ["Line2D"]}, "category": "unit", "description": "Tests the ptSegDistSq method with a point exactly on the line."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/ImmutableStack_peekTest.java", "testclass_name": "ImmutableStack_peekTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import java.util.Iterator;", "import org.junit.Test;"], "name": "ImmutableStack_peekTest", "description": "Unit tests for the peek functionality of the ImmutableStack class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testPeekReturnsTopElement", "primary_tested": ["ImmutableStack.peek()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests that peek returns the top element of the stack."}, {"name": "testPeekOnEmptyStack", "primary_tested": ["ImmutableStack.peek()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests the behavior of peek on an empty stack."}, {"name": "testPeekAfterPushAndPop", "primary_tested": ["ImmutableStack.peek()"], "associated_methods": ["ImmutableStack.push(String)", "ImmutableStack.pop()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests peek after pushing and popping elements from the stack."}, {"name": "testPeekAfterMultiplePushes", "primary_tested": ["ImmutableStack.peek()"], "associated_methods": ["ImmutableStack.push(String)"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests peek after multiple pushes to the stack."}, {"name": "testPeekAfterMultiplePushesAndPops", "primary_tested": ["ImmutableStack.peek()"], "associated_methods": ["ImmutableStack.push(String)", "ImmutableStack.pop()"], "external_dependencies": {"modules": ["ImmutableStack"]}, "category": "unit", "description": "Tests peek after multiple pushes and pops to and from the stack."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/Util_addTest.java", "testclass_name": "Util_addTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import org.junit.Test;"], "name": "Util_addTest", "description": "Unit tests for the Util.add method, which adds an element to a list.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddWithEmptyList", "primary_tested": ["Util.add(List<String>,String)"], "external_dependencies": {"modules": ["java.util.ArrayList", "java.util.List", "com.github.davidmoten.rtree.internal.Util"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of an element to an empty list."}, {"name": "testAddWithNonEmptyList", "primary_tested": ["Util.add(List<String>,String)"], "external_dependencies": {"modules": ["java.util.ArrayList", "java.util.Arrays", "java.util.List", "com.github.davidmoten.rtree.internal.Util"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of an element to a non-empty list."}, {"name": "testAddWithNullElement", "primary_tested": ["Util.add(List<String>,String)"], "external_dependencies": {"modules": ["java.util.ArrayList", "java.util.Arrays", "java.util.List", "com.github.davidmoten.rtree.internal.Util"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of a null element to a list."}, {"name": "testAddWithNullList", "primary_tested": ["Util.add(List<String>,String)"], "external_dependencies": {"modules": ["java.util.List", "com.github.davidmoten.rtree.internal.Util"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the add method when the list is null, expecting a NullPointerException."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/Util_removeTest.java", "testclass_name": "Util_removeTest", "dependencies": ["package com.github.davidmoten.rtree.internal;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import org.junit.Test;"], "name": "Util_removeTest", "description": "Unit tests for the Util.remove method, which removes specified elements from a list.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testRemoveAllElements", "primary_tested": ["Util.remove(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "com.github.davidmoten.rtree.internal.Util"]}, "category": "unit", "description": "Tests the removal of all elements from a list."}, {"name": "testRemoveSomeElements", "primary_tested": ["Util.remove(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "com.github.davidmoten.rtree.internal.Util"]}, "category": "unit", "description": "Tests the removal of some elements from a list."}, {"name": "testRemoveNoElements", "primary_tested": ["Util.remove(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Collections", "java.util.List", "com.github.davidmoten.rtree.internal.Util"]}, "category": "unit", "description": "Tests the removal of no elements from a list."}, {"name": "testRemoveFromEmptyList", "primary_tested": ["Util.remove(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Collections", "java.util.List", "com.github.davidmoten.rtree.internal.Util"]}, "category": "unit", "description": "Tests the removal of elements from an empty list."}, {"name": "testRemoveNonExistentElements", "primary_tested": ["Util.remove(List<Integer>,List<Integer>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "com.github.davidmoten.rtree.internal.Util"]}, "category": "unit", "description": "Tests the removal of non-existent elements from a list."}]}, {"file_path": "src/test/java/com/github/davidmoten/rtree/internal/util/BoundedPriorityQueue_asOrderedListTest.java", "testclass_name": "BoundedPriorityQueue_asOrderedListTest", "dependencies": ["package com.github.davidmoten.rtree.internal.util;", "import static com.github.davidmoten.rtree.internal.util.BoundedPriorityQueue.create;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertTrue;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.List;", "import org.junit.Before;", "import org.junit.Test;"], "name": "BoundedPriorityQueue_asOrderedListTest", "description": "Unit tests for the asOrderedList method of BoundedPriorityQueue.", "class_members": {"variables": [{"name": "comparator", "type": "static final Comparator<Integer>"}, {"name": "queue", "type": "BoundedPriorityQueue<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAsOrderedListWithEmptyQueue", "primary_tested": ["BoundedPriorityQueue.asOrderedList()"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "List"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asOrderedList method when the queue is empty."}, {"name": "testAsOrderedListWithSingleElement", "primary_tested": ["BoundedPriorityQueue.asOrderedList()"], "associated_methods": ["BoundedPriorityQueue.add(Integer)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "List", "Arrays"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asOrderedList method when the queue contains a single element."}, {"name": "testAsOrderedListWithMultipleElements", "primary_tested": ["BoundedPriorityQueue.asOrderedList()"], "associated_methods": ["BoundedPriorityQueue.add(Integer)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "List", "Arrays"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asOrderedList method when the queue contains multiple elements."}, {"name": "testAsOrderedListWithMaxSizeElements", "primary_tested": ["BoundedPriorityQueue.asOrderedList()"], "associated_methods": ["BoundedPriorityQueue.add(Integer)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "List", "Arrays"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asOrderedList method when the queue contains elements up to its maximum size."}, {"name": "testAsOrderedListWithMixedOrder", "primary_tested": ["BoundedPriorityQueue.asOrderedList()"], "associated_methods": ["BoundedPriorityQueue.add(Integer)"], "external_dependencies": {"modules": ["BoundedPriorityQueue", "List", "Arrays"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the asOrderedList method when the queue contains elements in mixed order."}]}]