[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree;\n\nimport static org.junit.Assert.assertEquals;\nimport org.junit.Before;\nimport org.junit.Test;\nimport com.github.davidmoten.rtree.geometry.Geometries;\nimport com.github.davidmoten.rtree.geometry.Point;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\nimport rx.Observable;\nimport rx.functions.Func2;\n\npublic class RTree_searchTest {\n    private RTree<String, Point> tree;\n\n    @Before\n    public void setUp() {\n        tree = RTree.star().create();\n        tree = tree.add(\"Entry1\", Geometries.point(1, 1));\n        tree = tree.add(\"Entry2\", Geometries.point(2, 2));\n    }\n\n    @Test\n    public void testSearchWithPoint() {\n        Point point = Geometries.point(1.5, 1.5);\n        Observable<Entry<String, Point>> result = tree.search(point, 1.0);\n        assertEquals(2L, result.count().toBlocking().single().longValue());\n    }\n\n    @Test\n    public void testSearchWithRectangle() {\n        Rectangle rectangle = Geometries.rectangle(0, 0, 2, 2);\n        Observable<Entry<String, Point>> result = tree.search(rectangle, 1.0);\n        assertEquals(2L, result.count().toBlocking().single().longValue());\n    }\n\n    @Test\n    public void testSearchWithCustomDistanceFunction() {\n        Point point = Geometries.point(1.5, 1.5);\n        Func2<Point, Point, Double> distanceFunction = (p1, p2) -> Math.abs(p1.x() - p2.x()) + Math.abs(p1.y() - p2.y());\n        Observable<Entry<String, Point>> result = tree.search(point, 1.0, distanceFunction);\n        assertEquals(2L, result.count().toBlocking().single().longValue());\n    }\n}\n"}]