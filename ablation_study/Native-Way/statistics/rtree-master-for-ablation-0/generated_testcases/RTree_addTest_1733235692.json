[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport com.github.davidmoten.rtree.geometry.Geometry;\n\npublic class RTree_addTest {\n\n    @Mock\n    private Node<String, Geometry> mockNode;\n\n    @Mock\n    private Context<String, Geometry> mockContext;\n\n    @Mock\n    private Factory<String, Geometry> mockFactory;\n\n    @Mock\n    private Entry<String, Geometry> mockEntry;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        when(mockContext.factory()).thenReturn(mockFactory);\n    }\n\n    @Test\n    public void testAddWhenRootIsPresent() {\n        RTree<String, Geometry> tree = new RTree<>(Optional.of(mockNode), 1, mockContext);\n        List<Node<String, Geometry>> nodes = mock(List.class);\n        Node<String, Geometry> newNode = mock(Node.class);\n\n        when(mockNode.add(any(Entry.class))).thenReturn(nodes);\n        when(nodes.size()).thenReturn(1);\n        when(nodes.get(0)).thenReturn(newNode);\n\n        RTree<String, Geometry> result = tree.add(mockEntry);\n\n        assertEquals(2, result.size());\n        assertEquals(newNode, result.root().get());\n    }\n\n    @Test\n    public void testAddWhenRootIsNotPresent() {\n        RTree<String, Geometry> tree = new RTree<>(Optional.empty(), 0, mockContext);\n        Leaf<String, Geometry> leaf = mock(Leaf.class);\n\n        when(mockFactory.createLeaf(anyList(), eq(mockContext))).thenReturn(leaf);\n\n        RTree<String, Geometry> result = tree.add(mockEntry);\n\n        assertEquals(1, result.size());\n        assertEquals(leaf, result.root().get());\n    }\n}\n"}]