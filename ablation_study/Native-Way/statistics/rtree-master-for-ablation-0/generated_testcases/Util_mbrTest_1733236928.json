[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.internal;\n\nimport com.github.davidmoten.rtree.geometry.Geometries;\nimport com.github.davidmoten.rtree.geometry.HasGeometry;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.Collection;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class Util_mbrTest {\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testMbrWithEmptyCollection() {\n        Util.mbr(Arrays.asList());\n    }\n\n    @Test\n    public void testMbrWithSingleItem() {\n        Rectangle mockRectangle = mock(Rectangle.class);\n        when(mockRectangle.x1()).thenReturn(1.0);\n        when(mockRectangle.y1()).thenReturn(2.0);\n        when(mockRectangle.x2()).thenReturn(3.0);\n        when(mockRectangle.y2()).thenReturn(4.0);\n        when(mockRectangle.isDoublePrecision()).thenReturn(false);\n\n        HasGeometry mockItem = mock(HasGeometry.class);\n        when(mockItem.geometry()).thenReturn(mockRectangle);\n\n        Rectangle result = Util.mbr(Arrays.asList(mockItem));\n\n        assertEquals(1.0, result.x1(), 0.0);\n        assertEquals(2.0, result.y1(), 0.0);\n        assertEquals(3.0, result.x2(), 0.0);\n        assertEquals(4.0, result.y2(), 0.0);\n    }\n\n    @Test\n    public void testMbrWithMultipleItemsDoublePrecision() {\n        Rectangle mockRectangle1 = mock(Rectangle.class);\n        when(mockRectangle1.x1()).thenReturn(1.0);\n        when(mockRectangle1.y1()).thenReturn(2.0);\n        when(mockRectangle1.x2()).thenReturn(3.0);\n        when(mockRectangle1.y2()).thenReturn(4.0);\n        when(mockRectangle1.isDoublePrecision()).thenReturn(true);\n\n        Rectangle mockRectangle2 = mock(Rectangle.class);\n        when(mockRectangle2.x1()).thenReturn(0.0);\n        when(mockRectangle2.y1()).thenReturn(1.0);\n        when(mockRectangle2.x2()).thenReturn(2.0);\n        when(mockRectangle2.y2()).thenReturn(3.0);\n        when(mockRectangle2.isDoublePrecision()).thenReturn(false);\n\n        HasGeometry mockItem1 = mock(HasGeometry.class);\n        when(mockItem1.geometry()).thenReturn(mockRectangle1);\n\n        HasGeometry mockItem2 = mock(HasGeometry.class);\n        when(mockItem2.geometry()).thenReturn(mockRectangle2);\n\n        Rectangle result = Util.mbr(Arrays.asList(mockItem1, mockItem2));\n\n        assertEquals(0.0, result.x1(), 0.0);\n        assertEquals(1.0, result.y1(), 0.0);\n        assertEquals(3.0, result.x2(), 0.0);\n        assertEquals(4.0, result.y2(), 0.0);\n        assertTrue(result.isDoublePrecision());\n    }\n}\n"}]