[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree.fbs;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\nimport java.util.Optional;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.github.davidmoten.rtree.Context;\nimport com.github.davidmoten.rtree.InternalStructure;\nimport com.github.davidmoten.rtree.RTree;\nimport com.github.davidmoten.rtree.SelectorRStar;\nimport com.github.davidmoten.rtree.SplitterRStar;\nimport com.github.davidmoten.rtree.fbs.generated.Node_;\nimport com.github.davidmoten.rtree.fbs.generated.Tree_;\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport com.github.davidmoten.rtree.internal.LeafFlatBuffers;\nimport com.github.davidmoten.rtree.internal.NonLeafFlatBuffers;\n\npublic class SerializerFlatBuffers_readTest {\n\n    private SerializerFlatBuffers<Object, Geometry> serializer;\n\n    @Before\n    public void setUp() {\n        serializer = new SerializerFlatBuffers<>(null, null);\n    }\n\n    @Test\n    public void testReadWithEmptyTree() throws IOException {\n        byte[] bytes = new byte[0];\n        InputStream is = new ByteArrayInputStream(bytes);\n        RTree<Object, Geometry> tree = serializer.read(is, 0, InternalStructure.SINGLE_ARRAY);\n        assertTrue(tree.root().isEmpty());\n    }\n\n    @Test\n    public void testReadWithNonEmptyTreeSingleArray() throws IOException {\n        byte[] bytes = createTreeBytes();\n        InputStream is = new ByteArrayInputStream(bytes);\n        RTree<Object, Geometry> tree = serializer.read(is, bytes.length, InternalStructure.SINGLE_ARRAY);\n        assertTrue(tree.root().isPresent());\n        assertEquals(1, tree.size());\n    }\n\n    @Test\n    public void testReadWithNonEmptyTreeDefault() throws IOException {\n        byte[] bytes = createTreeBytes();\n        InputStream is = new ByteArrayInputStream(bytes);\n        RTree<Object, Geometry> tree = serializer.read(is, bytes.length, InternalStructure.DEFAULT);\n        assertTrue(tree.root().isPresent());\n        assertEquals(1, tree.size());\n    }\n\n    private byte[] createTreeBytes() {\n        // Create a simple tree structure for testing\n        Tree_.startTree_(new com.google.flatbuffers.FlatBufferBuilder());\n        Tree_.addContext(new com.google.flatbuffers.FlatBufferBuilder(), 0);\n        Tree_.addSize(new com.google.flatbuffers.FlatBufferBuilder(), 1);\n        Tree_.addRoot(new com.google.flatbuffers.FlatBufferBuilder(), 0);\n        int treeOffset = Tree_.endTree_(new com.google.flatbuffers.FlatBufferBuilder());\n        Tree_.finishTree_Buffer(new com.google.flatbuffers.FlatBufferBuilder(), treeOffset);\n        ByteBuffer bb = new com.google.flatbuffers.FlatBufferBuilder().dataBuffer();\n        return bb.array();\n    }\n}\n"}]