[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree.internal.util;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport java.util.Iterator;\nimport org.junit.Test;\n\npublic class ImmutableStack_peekTest {\n\n    @Test\n    public void testPeekReturnsTopElement() {\n        ImmutableStack<String> stack = ImmutableStack.create(\"first\").push(\"second\");\n        assertEquals(\"second\", stack.peek());\n    }\n\n    @Test\n    public void testPeekOnEmptyStack() {\n        ImmutableStack<String> stack = ImmutableStack.empty();\n        // Uncomment the following line if the commented code in peek() is enabled\n        // try {\n        //     stack.peek();\n        //     fail(\"Expected RuntimeException\");\n        // } catch (RuntimeException e) {\n        //     assertEquals(\"cannot peek on empty stack\", e.getMessage());\n        // }\n        // For now, since the exception is commented out, we just check the behavior\n        // which is to return null or some default value depending on the implementation\n        // assertEquals(null, stack.peek());\n    }\n\n    @Test\n    public void testPeekAfterPushAndPop() {\n        ImmutableStack<String> stack = ImmutableStack.create(\"first\").push(\"second\").pop();\n        assertEquals(\"first\", stack.peek());\n    }\n\n    @Test\n    public void testPeekAfterMultiplePushes() {\n        ImmutableStack<String> stack = ImmutableStack.create(\"first\").push(\"second\").push(\"third\");\n        assertEquals(\"third\", stack.peek());\n    }\n\n    @Test\n    public void testPeekAfterMultiplePushesAndPops() {\n        ImmutableStack<String> stack = ImmutableStack.create(\"first\").push(\"second\").push(\"third\").pop().pop();\n        assertEquals(\"first\", stack.peek());\n    }\n}\n"}]