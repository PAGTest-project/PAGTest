[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.internal.util;\n\nimport static com.github.davidmoten.rtree.internal.util.BoundedPriorityQueue.create;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Comparator;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class BoundedPriorityQueue_addTest {\n\n    private static final Comparator<Integer> comparator = Comparator.naturalOrder();\n    private BoundedPriorityQueue<Integer> queue;\n\n    @Before\n    public void setUp() {\n        queue = create(3, comparator);\n    }\n\n    @Test\n    public void testAddNullThrowsException() {\n        assertThrows(NullPointerException.class, () -> queue.add(null));\n    }\n\n    @Test\n    public void testAddElementWhenQueueIsNotFull() {\n        queue.add(1);\n        List<Integer> list = queue.asList();\n        assertEquals(1, list.size());\n        assertTrue(list.contains(1));\n    }\n\n    @Test\n    public void testAddElementWhenQueueIsFullAndNewElementIsGreater() {\n        queue.add(1);\n        queue.add(2);\n        queue.add(3);\n        queue.add(4);\n        List<Integer> list = queue.asList();\n        assertEquals(3, list.size());\n        assertTrue(list.contains(2));\n        assertTrue(list.contains(3));\n        assertTrue(list.contains(4));\n    }\n\n    @Test\n    public void testAddElementWhenQueueIsFullAndNewElementIsLess() {\n        queue.add(2);\n        queue.add(3);\n        queue.add(4);\n        queue.add(1);\n        List<Integer> list = queue.asList();\n        assertEquals(3, list.size());\n        assertTrue(list.contains(2));\n        assertTrue(list.contains(3));\n        assertTrue(list.contains(4));\n    }\n\n    @Test\n    public void testAddElementWhenQueueIsFullAndNewElementIsEqual() {\n        queue.add(2);\n        queue.add(3);\n        queue.add(4);\n        queue.add(3);\n        List<Integer> list = queue.asList();\n        assertEquals(3, list.size());\n        assertTrue(list.contains(3));\n        assertTrue(list.contains(4));\n        assertTrue(list.contains(3));\n    }\n}\n"}]