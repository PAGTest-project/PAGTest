[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.internal.operators;\n\nimport com.github.davidmoten.rtree.internal.util.BoundedPriorityQueue;\nimport org.junit.Test;\nimport rx.Subscriber;\n\nimport java.util.Comparator;\nimport java.util.List;\n\nimport static org.mockito.Mockito.*;\n\npublic class OperatorBoundedPriorityQueue_callTest {\n\n    @Test\n    public void testCall() {\n        // Given\n        int maximumSize = 5;\n        Comparator<Integer> comparator = Comparator.naturalOrder();\n        OperatorBoundedPriorityQueue<Integer> operator = new OperatorBoundedPriorityQueue<>(maximumSize, comparator);\n\n        Subscriber<Integer> child = mock(Subscriber.class);\n        BoundedPriorityQueue<Integer> q = new BoundedPriorityQueue<>(maximumSize, comparator);\n        List<Integer> list = List.of(1, 2, 3);\n\n        when(child.isUnsubscribed()).thenReturn(false);\n\n        Subscriber<? super Integer> subscriber = operator.call(child);\n\n        // When\n        subscriber.onNext(1);\n        subscriber.onNext(2);\n        subscriber.onNext(3);\n        subscriber.onCompleted();\n\n        // Then\n        verify(child).onNext(1);\n        verify(child).onNext(2);\n        verify(child).onNext(3);\n        verify(child).onCompleted();\n    }\n\n    @Test\n    public void testCallOnError() {\n        // Given\n        int maximumSize = 5;\n        Comparator<Integer> comparator = Comparator.naturalOrder();\n        OperatorBoundedPriorityQueue<Integer> operator = new OperatorBoundedPriorityQueue<>(maximumSize, comparator);\n\n        Subscriber<Integer> child = mock(Subscriber.class);\n        Subscriber<? super Integer> subscriber = operator.call(child);\n\n        Throwable error = new Throwable(\"Test error\");\n\n        // When\n        subscriber.onError(error);\n\n        // Then\n        verify(child).onError(error);\n    }\n}\n"}]