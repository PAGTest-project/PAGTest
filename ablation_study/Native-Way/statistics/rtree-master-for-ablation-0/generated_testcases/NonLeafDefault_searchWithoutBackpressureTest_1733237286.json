[{"strategy": "retry", "code": "\npackage com.github.davidmoten.rtree.internal;\n\nimport com.github.davidmoten.rtree.Context;\nimport com.github.davidmoten.rtree.Entry;\nimport com.github.davidmoten.rtree.Node;\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\nimport org.junit.Before;\nimport org.junit.Test;\nimport rx.Subscriber;\nimport rx.functions.Func1;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.mockito.Mockito.*;\n\npublic class NonLeafDefault_searchWithoutBackpressureTest {\n\n    private NonLeafDefault<String, Rectangle> nonLeafDefault;\n    private Context<String, Rectangle> context;\n    private List<? extends Node<String, Rectangle>> children;\n    private Subscriber<Entry<String, Rectangle>> subscriber;\n    private Func1<Geometry, Boolean> criterion;\n\n    @Before\n    public void setUp() {\n        context = new Context<>(1, 4, mock(Selector.class), mock(Splitter.class), mock(Factory.class));\n        children = Collections.singletonList(mock(Node.class));\n        nonLeafDefault = new NonLeafDefault<>(children, context);\n        subscriber = mock(Subscriber.class);\n        criterion = mock(Func1.class);\n    }\n\n    @Test\n    public void testSearchWithoutBackpressure() {\n        nonLeafDefault.searchWithoutBackpressure(criterion, subscriber);\n        verify(subscriber, never()).onNext(any());\n        verify(subscriber, never()).onCompleted();\n        verify(subscriber, never()).onError(any());\n    }\n}\n"}]