[{"uris": "src/main/java/io/cucumber/cucumberexpressions/PatternCompiler.java.PatternCompiler", "name": "PatternCompiler", "file_path": "src/main/java/io/cucumber/cucumberexpressions/PatternCompiler.java", "superclasses": [], "methods": ["[Pattern]compile(String,int)"], "method_uris": ["src/main/java/io/cucumber/cucumberexpressions/PatternCompiler.java.PatternCompiler.[Pattern]compile(String,int)"], "overrides": null, "attributes": null, "class_docstring": "\nAbstracts creation of new {@link Pattern}. In some platforms and Java versions some flags are not supported (e.g {@link Pattern#UNICODE_CHARACTER_CLASS} on Android) - clients for those platforms should provide resource {@code META-INF/services/io.cucumber.cucumberexpressions.PatternCompiler} pointing to implementation of this interface.\n\n@see DefaultPatternCompiler\n@see java.util.ServiceLoader\n", "original_string": "@API(status = API.Status.STABLE)\n@FunctionalInterface\npublic interface PatternCompiler {\n\n    /**\n     * @param regexp regular expression\n     * @param flags  additional flags (e.g. {@link Pattern#UNICODE_CHARACTER_CLASS})\n     * @return new {@link Pattern} instance from provided {@code regexp}\n     */\n    Pattern compile(String regexp, int flags);\n}"}, {"uris": "src/main/java/io/cucumber/cucumberexpressions/Expression.java.Expression", "name": "Expression", "file_path": "src/main/java/io/cucumber/cucumberexpressions/Expression.java", "superclasses": [], "methods": ["[List<Argument<?>>]match(String)", "[Pattern]getRegexp()", "[String]getSource()"], "method_uris": ["src/main/java/io/cucumber/cucumberexpressions/Expression.java.Expression.[List<Argument<?>>]match(String)", "src/main/java/io/cucumber/cucumberexpressions/Expression.java.Expression.[Pattern]getRegexp()", "src/main/java/io/cucumber/cucumberexpressions/Expression.java.Expression.[String]getSource()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "@API(status = API.Status.STABLE)\npublic interface Expression {\n    List<Argument<?>> match(String text, Type... typeHints);\n\n    Pattern getRegexp();\n\n    String getSource();\n}"}, {"uris": "src/main/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformer.java.ParameterByTypeTransformer", "name": "ParameterByTypeTransformer", "file_path": "src/main/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformer.java", "superclasses": [], "methods": ["[Object]transform(String,Type)"], "method_uris": ["src/main/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformer.java.ParameterByTypeTransformer.[Object]transform(String,Type)"], "overrides": null, "attributes": null, "class_docstring": "\nThe {@link ParameterTypeRegistry} uses the default transformer\nto execute all transforms for built-in parameter types and all\nanonymous types.\n", "original_string": "@API(status = API.Status.STABLE)\n@FunctionalInterface\npublic interface ParameterByTypeTransformer {\n\n    Object transform(String fromValue, Type toValueType) throws Throwable;\n}"}, {"uris": "src/main/java/io/cucumber/cucumberexpressions/Transformer.java.Transformer", "name": "Transformer", "file_path": "src/main/java/io/cucumber/cucumberexpressions/Transformer.java", "superclasses": [], "methods": ["[T]transform(String)"], "method_uris": ["src/main/java/io/cucumber/cucumberexpressions/Transformer.java.Transformer.[T]transform(String)"], "overrides": null, "attributes": null, "class_docstring": "\nTransformer for a @{@link ParameterType} with zero or one capture groups.\n\n@param <T> the type to transform to.\n", "original_string": "@FunctionalInterface\npublic interface Transformer<T> {\n    /**\n     * Transforms a string into to an object. The string is either taken\n     * from the sole capture group or matches the whole expression. Nested\n     * capture groups are ignored.\n     * <p>\n     * If the capture group is optional <code>arg</code> may be null.\n     *\n     * @param arg the value of the single capture group\n     * @return the transformed object\n     * @throws Throwable if transformation failed\n     */\n    T transform(String arg) throws Throwable;\n}"}, {"uris": "src/main/java/io/cucumber/cucumberexpressions/CaptureGroupTransformer.java.CaptureGroupTransformer", "name": "CaptureGroupTransformer", "file_path": "src/main/java/io/cucumber/cucumberexpressions/CaptureGroupTransformer.java", "superclasses": [], "methods": ["[T]transform(String[])"], "method_uris": ["src/main/java/io/cucumber/cucumberexpressions/CaptureGroupTransformer.java.CaptureGroupTransformer.[T]transform(String[])"], "overrides": null, "attributes": null, "class_docstring": "\nTransformer for a @{@link ParameterType} with (multiple) capture groups.\n\n@param <T> the type to transform to.\n", "original_string": "@API(status = API.Status.STABLE)\n@FunctionalInterface\npublic interface CaptureGroupTransformer<T> {\n    /**\n     * Transforms multiple strings into to an object. The strings are taken from\n     * the capture groups in the regular expressions in order. Nested capture\n     * groups are ignored. If a capture group is optional the corresponding element\n     * in the array may be null.\n     *\n     * @param args the values of the top level capture groups\n     * @return the transformed object\n     * @throws Throwable if transformation failed\n     */\n    T transform(String[] args) throws Throwable;\n}"}]