[{"uris": "src/main/java/io/cucumber/cucumberexpressions/TypeReference.java.TypeReference", "name": "TypeReference", "file_path": "src/main/java/io/cucumber/cucumberexpressions/TypeReference.java", "superclasses": "", "methods": ["[]TypeReference()", "[Type]getType()"], "method_uris": ["src/main/java/io/cucumber/cucumberexpressions/TypeReference.java.TypeReference.[]TypeReference()", "src/main/java/io/cucumber/cucumberexpressions/TypeReference.java.TypeReference.[Type]getType()"], "overrides": null, "attributes": [], "class_docstring": "", "original_string": "public abstract class TypeReference<T> {\n\n    private final Type type;\n\n    protected TypeReference() {\n        Type superclass = getClass().getGenericSuperclass();\n        if (superclass instanceof Class) {\n            throw new CucumberExpressionException(\"Missing type parameter: \" + superclass);\n        }\n        this.type = ((ParameterizedType) superclass).getActualTypeArguments()[0];\n    }\n\n    public Type getType() {\n        return this.type;\n    }\n}", "super_interfaces": [], "fields": [{"attribute_expression": "private final Type type;", "docstring": "", "modifiers": "private final", "marker_annotations": [], "non_marker_annotations": ["private", "final"], "comments": [], "type": "Type", "name": "type", "syntax_pass": true}]}]