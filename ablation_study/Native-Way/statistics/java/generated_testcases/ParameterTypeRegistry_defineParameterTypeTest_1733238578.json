[{"strategy": "retry", "code": "\npackage io.cucumber.cucumberexpressions;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.function.Executable;\n\nimport java.util.Locale;\nimport java.util.regex.Pattern;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ParameterTypeRegistry_defineParameterTypeTest {\n    private ParameterTypeRegistry parameterTypeRegistry;\n\n    @BeforeEach\n    public void setUp() {\n        parameterTypeRegistry = new ParameterTypeRegistry(Locale.ENGLISH);\n    }\n\n    @Test\n    public void testDefineParameterTypeWithValidName() {\n        ParameterType<String> parameterType = new ParameterType<>(\"testName\", \"testRegex\", String.class, (String s) -> s, false, false, false);\n        parameterTypeRegistry.defineParameterType(parameterType);\n        assertNotNull(parameterTypeRegistry.lookupByTypeName(\"testName\"));\n    }\n\n    @Test\n    public void testDefineParameterTypeWithDuplicateName() {\n        ParameterType<String> parameterType1 = new ParameterType<>(\"testName\", \"testRegex\", String.class, (String s) -> s, false, false, false);\n        ParameterType<String> parameterType2 = new ParameterType<>(\"testName\", \"testRegex\", String.class, (String s) -> s, false, false, false);\n        parameterTypeRegistry.defineParameterType(parameterType1);\n\n        final Executable testMethod = () -> parameterTypeRegistry.defineParameterType(parameterType2);\n        assertThrows(DuplicateTypeNameException.class, testMethod);\n    }\n\n    @Test\n    public void testDefineParameterTypeWithAnonymousName() {\n        ParameterType<String> parameterType = new ParameterType<>(\"\", \"testRegex\", String.class, (String s) -> s, false, false, false);\n        parameterTypeRegistry.defineParameterType(parameterType);\n        assertNull(parameterTypeRegistry.lookupByTypeName(\"\"));\n    }\n\n    @Test\n    public void testDefineParameterTypeWithPreferentialConflict() {\n        ParameterType<String> parameterType1 = new ParameterType<>(\"testName1\", \"testRegex\", String.class, (String s) -> s, false, true, false);\n        ParameterType<String> parameterType2 = new ParameterType<>(\"testName2\", \"testRegex\", String.class, (String s) -> s, false, true, false);\n        parameterTypeRegistry.defineParameterType(parameterType1);\n\n        final Executable testMethod = () -> parameterTypeRegistry.defineParameterType(parameterType2);\n        assertThrows(CucumberExpressionException.class, testMethod);\n    }\n\n    @Test\n    public void testDefineParameterTypeWithNonPreferentialConflict() {\n        ParameterType<String> parameterType1 = new ParameterType<>(\"testName1\", \"testRegex\", String.class, (String s) -> s, false, false, false);\n        ParameterType<String> parameterType2 = new ParameterType<>(\"testName2\", \"testRegex\", String.class, (String s) -> s, false, false, false);\n        parameterTypeRegistry.defineParameterType(parameterType1);\n        parameterTypeRegistry.defineParameterType(parameterType2);\n        assertNotNull(parameterTypeRegistry.lookupByRegexp(\"testRegex\", Pattern.compile(\"testRegex\"), \"testText\"));\n    }\n}\n"}]