[{"strategy": "generate", "code": "\npackage io.cucumber.cucumberexpressions;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Locale;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CucumberExpression_matchTest {\n\n    private CucumberExpression cucumberExpression;\n    private ParameterTypeRegistry parameterTypeRegistry;\n\n    @BeforeEach\n    public void setUp() {\n        parameterTypeRegistry = new ParameterTypeRegistry(Locale.ENGLISH);\n        cucumberExpression = new CucumberExpression(\"three (.*) mice\", parameterTypeRegistry);\n    }\n\n    @Test\n    public void testMatchSuccess() {\n        String text = \"three blind mice\";\n        Type[] typeHints = {String.class};\n        List<Argument<?>> arguments = cucumberExpression.match(text, typeHints);\n        assertNotNull(arguments);\n        assertEquals(1, arguments.size());\n        assertEquals(\"blind\", arguments.get(0).getGroup().getValue());\n    }\n\n    @Test\n    public void testMatchFailure() {\n        String text = \"three fast mice\";\n        Type[] typeHints = {Integer.class};\n        List<Argument<?>> arguments = cucumberExpression.match(text, typeHints);\n        assertNull(arguments);\n    }\n\n    @Test\n    public void testMatchWithAnonymousParameterType() {\n        String text = \"three blind mice\";\n        Type[] typeHints = {};\n        List<Argument<?>> arguments = cucumberExpression.match(text, typeHints);\n        assertNotNull(arguments);\n        assertEquals(1, arguments.size());\n        assertEquals(\"blind\", arguments.get(0).getGroup().getValue());\n    }\n}\n"}]