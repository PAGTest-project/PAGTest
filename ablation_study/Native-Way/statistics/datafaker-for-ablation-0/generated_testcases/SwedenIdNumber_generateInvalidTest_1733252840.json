[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.mockito.Mockito.*;\n\npublic class SwedenIdNumber_generateInvalidTest {\n\n    private SwedenIdNumber swedenIdNumber;\n    private BaseProviders mockBaseProviders;\n\n    @BeforeEach\n    public void setUp() {\n        swedenIdNumber = new SwedenIdNumber();\n        mockBaseProviders = mock(BaseProviders.class);\n    }\n\n    @Test\n    public void testGenerateInvalid_InvalidSsn() {\n        // Mock the behavior of isValidSwedishSsn to return false for a specific invalid SSN\n        when(mockBaseProviders.numerify(anyString())).thenReturn(\"121212-1212\");\n        when(mockBaseProviders.options()).thenReturn(new BaseProviders.Options() {\n            @Override\n            public String option(String[] options) {\n                return options[0];\n            }\n        });\n\n        String invalidSsn = swedenIdNumber.generateInvalid(mockBaseProviders);\n        assertFalse(SwedenIdNumber.isValidSwedishSsn(invalidSsn));\n    }\n\n    @Test\n    public void testGenerateInvalid_ValidSsn() {\n        // Mock the behavior of isValidSwedishSsn to return true for a specific valid SSN\n        when(mockBaseProviders.numerify(anyString())).thenReturn(\"670919-9530\");\n        when(mockBaseProviders.options()).thenReturn(new BaseProviders.Options() {\n            @Override\n            public String option(String[] options) {\n                return options[0];\n            }\n        });\n\n        String invalidSsn = swedenIdNumber.generateInvalid(mockBaseProviders);\n        assertFalse(SwedenIdNumber.isValidSwedishSsn(invalidSsn));\n    }\n}\n"}]