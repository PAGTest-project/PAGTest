[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.lang.reflect.Method;\n\npublic class ObjectMethods_executeMethodByReturnTypeTest {\n\n    private Person person;\n    private PersonName personName;\n\n    @BeforeEach\n    public void setUp() {\n        person = new Person();\n        personName = new PersonName();\n    }\n\n    @Test\n    void testExecuteMethodByReturnTypeSuccess() throws NoSuchMethodException {\n        Method expectedMethod = Person.class.getMethod(\"age\");\n        assertEquals(expectedMethod, ObjectMethods.getMethodByReturnType(person, \"int\"));\n        assertEquals(30, (int) ObjectMethods.executeMethodByReturnType(person, \"int\"));\n    }\n\n    @Test\n    void testExecuteMethodByReturnTypeMethodNotFound() {\n        assertNull(ObjectMethods.executeMethodByReturnType(person, \"nonexistentType\"));\n    }\n\n    @Test\n    void testExecuteMethodByReturnTypeException() {\n        assertThrows(RuntimeException.class, () -> {\n            ObjectMethods.executeMethodByReturnType(person, \"void\");\n        });\n    }\n\n    @Test\n    void testExecuteMethodByReturnTypeWithPersonName() throws NoSuchMethodException {\n        Method expectedMethod = PersonName.class.getMethod(\"firstName\");\n        assertEquals(expectedMethod, ObjectMethods.getMethodByReturnType(personName, \"String\"));\n        assertEquals(\"John\", ObjectMethods.executeMethodByReturnType(personName, \"String\"));\n    }\n\n    @Test\n    void testExecuteMethodByReturnTypeWithIgnoredMethods() {\n        assertNull(ObjectMethods.executeMethodByReturnType(person, \"toString\"));\n        assertNull(ObjectMethods.executeMethodByReturnType(person, \"hashCode\"));\n    }\n\n    private static class Person {\n        public int age() {\n            return 30;\n        }\n    }\n\n    private static class PersonName {\n        public String firstName() {\n            return \"John\";\n        }\n    }\n}\n"}]