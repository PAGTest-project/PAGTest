[{"strategy": "retry", "code": "\npackage net.datafaker.transformations;\n\nimport net.datafaker.sequence.FakeSequence;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\n\npublic class JsonTransformer_generateTest {\n\n    @Test\n    public void testGenerateFiniteSequence() {\n        JsonTransformer<Object> transformer = JsonTransformer.builder().build();\n        Iterable<String> input = Arrays.asList(\"item1\", \"item2\");\n        Schema<String, ?> schema = mock(Schema.class);\n        when(schema.getFields()).thenReturn(new Field[0]);\n\n        String result = transformer.generate(input, schema);\n        assertEquals(\"[\\nitem1,\\nitem2\\n]\", result);\n    }\n\n    @Test\n    public void testGenerateInfiniteSequence() {\n        JsonTransformer<Object> transformer = JsonTransformer.builder().build();\n        FakeSequence<String> fakeSequence = mock(FakeSequence.class);\n        when(fakeSequence.isInfinite()).thenReturn(true);\n\n        assertThrows(IllegalArgumentException.class, () -> {\n            transformer.generate(fakeSequence, mock(Schema.class));\n        });\n    }\n\n    @Test\n    public void testGenerateSingleItemSequence() {\n        JsonTransformer<Object> transformer = JsonTransformer.builder().build();\n        Iterable<String> input = Arrays.asList(\"item1\");\n        Schema<String, ?> schema = mock(Schema.class);\n        when(schema.getFields()).thenReturn(new Field[0]);\n\n        String result = transformer.generate(input, schema);\n        assertEquals(\"item1\", result);\n    }\n}\n"}]