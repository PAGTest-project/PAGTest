[{"strategy": "generate", "code": "\npackage net.datafaker.transformations.sql;\n\nimport net.datafaker.transformations.Schema;\nimport net.datafaker.transformations.SimpleField;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.stream.Stream;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class SqlTransformer_generateStreamTest {\n\n    @Test\n    public void testGenerateStreamWithEmptySchema() {\n        SqlTransformer<Object> transformer = SqlTransformer.<Object>builder().build();\n        Schema<Object, ?> schema = Schema.of();\n        Stream<CharSequence> result = transformer.generateStream(schema, 10);\n        assertTrue(result.findAny().isEmpty());\n    }\n\n    @Test\n    public void testGenerateStreamWithoutBatchMode() {\n        SqlTransformer<Object> transformer = SqlTransformer.<Object>builder().build();\n        Schema<Object, ?> schema = Schema.of(new SimpleField<>(\"field1\", o -> \"value1\"));\n        Stream<CharSequence> result = transformer.generateStream(schema, 2);\n        assertEquals(2, result.count());\n    }\n\n    @Test\n    public void testGenerateStreamWithBatchMode() {\n        SqlTransformer<Object> transformer = SqlTransformer.<Object>builder().batch(2).build();\n        Schema<Object, ?> schema = Schema.of(new SimpleField<>(\"field1\", o -> \"value1\"));\n        Stream<CharSequence> result = transformer.generateStream(schema, 3);\n        assertEquals(2, result.count());\n    }\n}\n"}]