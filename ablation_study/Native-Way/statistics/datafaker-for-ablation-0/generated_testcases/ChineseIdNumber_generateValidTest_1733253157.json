[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.service.RandomService;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class ChineseIdNumber_generateValidTest {\n\n    private BaseProviders faker;\n    private ChineseIdNumber chineseIdNumber;\n    private RandomService randomService;\n\n    @Before\n    public void setUp() {\n        faker = Mockito.mock(BaseProviders.class);\n        randomService = Mockito.mock(RandomService.class);\n        chineseIdNumber = new ChineseIdNumber();\n    }\n\n    @Test\n    public void testGenerateValid() {\n        // Mock the dependencies\n        when(faker.random()).thenReturn(randomService);\n        when(faker.options().option(ChineseIdNumber.LOCATIONS)).thenReturn(\"110000\");\n        when(randomService.nextInt(10)).thenReturn(1, 2, 3);\n        when(faker.date().birthday()).thenReturn(LocalDate.of(1990, 1, 1));\n\n        // Create a mock IdNumberRequest\n        IdNumberRequest request = Mockito.mock(IdNumberRequest.class);\n\n        // Call the method under test\n        PersonIdNumber result = chineseIdNumber.generateValid(faker, request);\n\n        // Verify the result\n        assertEquals(\"11000019900101123\", result.getIdNumber());\n    }\n\n    @Test\n    public void testIdNumberChecksum() {\n        char[] res = \"11000019900101123\".toCharArray();\n        String expected = \"110000199001011234\";\n        String actual = ChineseIdNumber.idNumber(res);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testFillBirthday() {\n        char[] res = new char[18];\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        chineseIdNumber.fillBirthday(res, 6, birthday);\n        String expected = \"19900101\";\n        String actual = new String(res, 6, 8);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGenerateInvalid() {\n        // Mock the dependencies\n        when(faker.random()).thenReturn(randomService);\n        when(faker.options().option(ChineseIdNumber.LOCATIONS)).thenReturn(\"110000\");\n        when(randomService.nextInt(10)).thenReturn(1, 2, 3);\n        when(faker.date().birthday()).thenReturn(LocalDate.of(1990, 1, 1));\n\n        // Call the method under test\n        String result = chineseIdNumber.generateInvalid(faker);\n\n        // Verify the result\n        assertEquals(\"1100001990010112342\", result);\n    }\n}\n"}]