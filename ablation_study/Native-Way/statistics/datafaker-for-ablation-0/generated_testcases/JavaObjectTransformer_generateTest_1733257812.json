[{"strategy": "retry", "code": "\npackage net.datafaker.transformations;\n\nimport net.datafaker.sequence.FakeSequence;\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.Collection;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass JavaObjectTransformer_generateTest {\n\n    @Test\n    void testGenerateWithFakeSequenceFinite() {\n        FakeSequence<Object> fakeSequence = mock(FakeSequence.class);\n        when(fakeSequence.isInfinite()).thenReturn(false);\n        when(fakeSequence.get()).thenReturn(Arrays.asList(\"item1\", \"item2\"));\n\n        Schema<Object, ?> schema = mock(Schema.class);\n        JavaObjectTransformer transformer = new JavaObjectTransformer();\n\n        Collection<Object> result = transformer.generate(fakeSequence, schema);\n\n        assertEquals(2, result.size());\n        assertTrue(result.contains(\"item1\"));\n        assertTrue(result.contains(\"item2\"));\n    }\n\n    @Test\n    void testGenerateWithFakeSequenceInfinite() {\n        FakeSequence<Object> fakeSequence = mock(FakeSequence.class);\n        when(fakeSequence.isInfinite()).thenReturn(true);\n\n        Schema<Object, ?> schema = mock(Schema.class);\n        JavaObjectTransformer transformer = new JavaObjectTransformer();\n\n        assertThrows(IllegalArgumentException.class, () -> {\n            transformer.generate(fakeSequence, schema);\n        });\n    }\n\n    @Test\n    void testGenerateWithIterable() {\n        Iterable<Object> iterable = Arrays.asList(\"item1\", \"item2\");\n        Schema<Object, ?> schema = mock(Schema.class);\n        JavaObjectTransformer transformer = new JavaObjectTransformer();\n\n        Collection<Object> result = transformer.generate(iterable, schema);\n\n        assertEquals(2, result.size());\n        assertTrue(result.contains(\"item1\"));\n        assertTrue(result.contains(\"item2\"));\n    }\n}\n"}]