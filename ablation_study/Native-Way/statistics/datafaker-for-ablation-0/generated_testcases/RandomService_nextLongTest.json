[{"strategy": "generate", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\n\nimport java.util.Random;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class RandomService_nextLongTest {\n    private RandomService randomService;\n\n    @BeforeEach\n    public void setUp() {\n        randomService = new RandomService(new Random());\n    }\n\n    @Test\n    public void testNextLongWithPositiveBound() {\n        long bound = 100L;\n        long result = randomService.nextLong(bound);\n        assertTrue(result >= 0 && result < bound);\n    }\n\n    @Test\n    public void testNextLongWithBoundOne() {\n        long bound = 1L;\n        long result = randomService.nextLong(bound);\n        assertEquals(0L, result);\n    }\n\n    @ParameterizedTest\n    @ValueSource(longs = {0L, -1L, -100L})\n    public void testNextLongWithNonPositiveBound(long bound) {\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            randomService.nextLong(bound);\n        });\n        assertEquals(\"bound must be positive: \" + bound, exception.getMessage());\n    }\n}\n"}]