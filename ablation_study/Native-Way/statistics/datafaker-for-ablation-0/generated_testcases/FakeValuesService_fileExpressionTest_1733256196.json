[{"strategy": "generate", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class FakeValuesService_fileExpressionTest {\n\n    private FakeValuesService fakeValuesService;\n    private BaseFaker baseFaker;\n    private FakerContext context;\n\n    @BeforeEach\n    public void setUp() {\n        fakeValuesService = new FakeValuesService();\n        baseFaker = new BaseFaker();\n        context = new FakerContext(Locale.ENGLISH, baseFaker.random());\n    }\n\n    @Test\n    public void testFileExpressionSuccess() {\n        Path path = Paths.get(\"src/test/resources/testfile.txt\");\n        String expected = \"Test expression\";\n        String result = fakeValuesService.fileExpression(path, baseFaker, context);\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testFileExpressionIOException() {\n        Path path = Paths.get(\"nonexistentfile.txt\");\n        RuntimeException exception = assertThrows(RuntimeException.class, () -> {\n            fakeValuesService.fileExpression(path, baseFaker, context);\n        });\n        assertEquals(\"Failed to read \\\"nonexistentfile.txt\\\"\", exception.getMessage());\n    }\n}\n"}]