[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.sql.Timestamp;\nimport java.util.concurrent.TimeUnit;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class DateAndTime_futureTest {\n    private DateAndTime dateAndTime;\n\n    @BeforeEach\n    public void setUp() {\n        BaseFaker faker = new BaseFaker();\n        dateAndTime = new DateAndTime(faker);\n    }\n\n    @Test\n    public void testFutureWithDays() {\n        int atMost = 10;\n        TimeUnit unit = TimeUnit.DAYS;\n        Timestamp referenceDate = new Timestamp(System.currentTimeMillis());\n        Timestamp futureDate = dateAndTime.future(atMost, unit, referenceDate);\n        assertTrue(futureDate.after(referenceDate));\n    }\n\n    @Test\n    public void testFutureWithHours() {\n        int atMost = 24;\n        TimeUnit unit = TimeUnit.HOURS;\n        Timestamp referenceDate = new Timestamp(System.currentTimeMillis());\n        Timestamp futureDate = dateAndTime.future(atMost, unit, referenceDate);\n        assertTrue(futureDate.after(referenceDate));\n    }\n\n    @Test\n    public void testFutureWithMinutes() {\n        int atMost = 60;\n        TimeUnit unit = TimeUnit.MINUTES;\n        Timestamp referenceDate = new Timestamp(System.currentTimeMillis());\n        Timestamp futureDate = dateAndTime.future(atMost, unit, referenceDate);\n        assertTrue(futureDate.after(referenceDate));\n    }\n\n    @Test\n    public void testFutureWithSeconds() {\n        int atMost = 3600;\n        TimeUnit unit = TimeUnit.SECONDS;\n        Timestamp referenceDate = new Timestamp(System.currentTimeMillis());\n        Timestamp futureDate = dateAndTime.future(atMost, unit, referenceDate);\n        assertTrue(futureDate.after(referenceDate));\n    }\n}\n"}]