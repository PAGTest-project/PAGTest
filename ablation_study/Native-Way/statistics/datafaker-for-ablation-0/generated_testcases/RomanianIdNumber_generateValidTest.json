[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class RomanianIdNumber_generateValidTest {\n    private RomanianIdNumber impl;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        impl = new RomanianIdNumber();\n        faker = mock(BaseProviders.class);\n    }\n\n    @Test\n    public void testGenerateValid() {\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        Gender gender = Gender.MALE;\n        String basePart = \"1900101012345\";\n        String expectedIdNumber = basePart + \"1\"; // Assuming checksum is 1 for simplicity\n\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.gender().gender()).thenReturn(gender);\n        when(faker.number().numberBetween(1, 47)).thenReturn(1);\n        when(faker.number().numberBetween(1, 1_000)).thenReturn(123);\n\n        IdNumberRequest request = new IdNumberRequest(1, 1, Gender.MALE);\n        PersonIdNumber result = impl.generateValid(faker, request);\n\n        assertEquals(expectedIdNumber, result.getIdNumber());\n        assertEquals(birthday, result.getBirthday());\n        assertEquals(gender, result.getGender());\n    }\n\n    @Test\n    public void testGenerateInvalid() {\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        Gender gender = Gender.MALE;\n        String basePart = \"1900101012345\";\n        String expectedInvalidIdNumber = basePart + \"2\"; // Assuming invalid checksum is 2 for simplicity\n\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.gender().gender()).thenReturn(gender);\n        when(faker.number().numberBetween(1, 47)).thenReturn(1);\n        when(faker.number().numberBetween(1, 1_000)).thenReturn(123);\n\n        String result = impl.generateInvalid(faker);\n\n        assertEquals(expectedInvalidIdNumber, result);\n    }\n}\n"}]