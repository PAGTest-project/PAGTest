[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.time.LocalDate;\n\npublic class MacedonianIdNumber_generateInvalidTest {\n    private MacedonianIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new MacedonianIdNumber();\n        faker = mock(BaseProviders.class);\n        when(faker.timeAndDate()).thenReturn(mock(BaseProviders.TimeAndDate.class));\n    }\n\n    @Test\n    void testGenerateInvalid() {\n        // Mocking dependencies\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.number().numberBetween(0, 2)).thenReturn(0); // Mocking gender selection\n\n        // Expected basePart and checksum\n        String basePart = \"010199041000\"; // Example basePart\n        int checksumValue = generator.checksum(basePart);\n        String expectedInvalidId = basePart + ((checksumValue + 1) % 10);\n\n        // Test\n        String result = generator.generateInvalid(faker);\n        assertEquals(expectedInvalidId, result);\n    }\n\n    @Test\n    void testChecksum() {\n        assertEquals(6, generator.checksum(\"010100650000\"));\n        assertEquals(4, generator.checksum(\"923456789012\"));\n    }\n}\n"}]