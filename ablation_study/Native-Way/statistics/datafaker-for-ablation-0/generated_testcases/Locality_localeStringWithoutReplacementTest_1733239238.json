[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport net.datafaker.Faker;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\nimport java.util.Random;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class Locality_localeStringWithoutReplacementTest {\n    private Locality locality;\n\n    @BeforeEach\n    public void setUp() {\n        Faker faker = new Faker();\n        locality = new Locality(faker.base());\n    }\n\n    @Test\n    void testLocaleStringWithoutReplacement() {\n        // Test that the method returns a locale from the shuffled list\n        Random random = new Random(12345L);\n        String locale1 = locality.localeStringWithoutReplacement(random);\n        String locale2 = locality.localeStringWithoutReplacement(random);\n\n        // Ensure that the locales are different\n        assertTrue(locality.allSupportedLocales().contains(locale1));\n        assertTrue(locality.allSupportedLocales().contains(locale2));\n        assertEquals(locality.allSupportedLocales().size(), 71); // Total number of locales\n    }\n\n    @Test\n    void testLocaleStringWithoutReplacementReset() {\n        // Test that the method resets the shuffled list when it is empty\n        Random random = new Random(12345L);\n        List<String> allLocales = locality.allSupportedLocales();\n        for (int i = 0; i < allLocales.size(); i++) {\n            locality.localeStringWithoutReplacement(random);\n        }\n\n        // After all locales are used, the list should reset\n        String localeAfterReset = locality.localeStringWithoutReplacement(random);\n        assertTrue(allLocales.contains(localeAfterReset));\n    }\n}\n"}]