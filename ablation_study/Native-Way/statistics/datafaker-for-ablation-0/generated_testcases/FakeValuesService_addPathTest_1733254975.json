[{"strategy": "generate", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.net.MalformedURLException;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Locale;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FakeValuesService_addPathTest {\n    private FakeValuesService fakeValuesService;\n\n    @BeforeEach\n    public void setUp() {\n        fakeValuesService = new FakeValuesService();\n    }\n\n    @Test\n    public void testAddPathValidFile() throws MalformedURLException {\n        Locale locale = Locale.ENGLISH;\n        Path path = Paths.get(\"src/test/resources/validfile.txt\");\n        assertDoesNotThrow(() -> fakeValuesService.addPath(locale, path));\n    }\n\n    @Test\n    public void testAddPathNullPath() {\n        Locale locale = Locale.ENGLISH;\n        Path path = null;\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> fakeValuesService.addPath(locale, path));\n        assertEquals(\"Path should be an existing readable file: \\\"null\\\"\", exception.getMessage());\n    }\n\n    @Test\n    public void testAddPathNonExistentFile() {\n        Locale locale = Locale.ENGLISH;\n        Path path = Paths.get(\"src/test/resources/nonexistentfile.txt\");\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> fakeValuesService.addPath(locale, path));\n        assertEquals(\"Path should be an existing readable file: \\\"%s\\\"\".formatted(path), exception.getMessage());\n    }\n\n    @Test\n    public void testAddPathDirectory() {\n        Locale locale = Locale.ENGLISH;\n        Path path = Paths.get(\"src/test/resources\");\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> fakeValuesService.addPath(locale, path));\n        assertEquals(\"Path should be an existing readable file: \\\"%s\\\"\".formatted(path), exception.getMessage());\n    }\n\n    @Test\n    public void testAddPathUnreadableFile() {\n        Locale locale = Locale.ENGLISH;\n        Path path = Paths.get(\"src/test/resources/unreadablefile.txt\");\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> fakeValuesService.addPath(locale, path));\n        assertEquals(\"Path should be an existing readable file: \\\"%s\\\"\".formatted(path), exception.getMessage());\n    }\n\n    @Test\n    public void testAddPathMalformedURL() {\n        Locale locale = Locale.ENGLISH;\n        Path path = Paths.get(\"src/test/resources/invalidurlfile.txt\");\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> fakeValuesService.addPath(locale, path));\n        assertTrue(exception.getMessage().startsWith(\"Failed to read \\\"%s\\\"\".formatted(path)));\n    }\n}\n"}]