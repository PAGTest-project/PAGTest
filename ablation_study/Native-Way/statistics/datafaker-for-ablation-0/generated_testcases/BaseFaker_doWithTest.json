[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Locale;\nimport java.util.concurrent.Callable;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\n\npublic class BaseFaker_doWithTest {\n    private BaseFaker baseFaker;\n\n    @BeforeEach\n    public void setUp() {\n        baseFaker = new BaseFaker();\n    }\n\n    @Test\n    public void testDoWithLocaleSuccess() throws Exception {\n        Callable<String> callable = () -> baseFaker.resolve(\"name.first_name\");\n        String result = baseFaker.doWith(callable, Locale.FRANCE);\n        assertThat(result).isNotNull();\n    }\n\n    @Test\n    public void testDoWithLocaleException() {\n        Callable<String> callable = () -> {\n            throw new Exception(\"Test exception\");\n        };\n        assertThatThrownBy(() -> baseFaker.doWith(callable, Locale.FRANCE))\n            .isInstanceOf(RuntimeException.class)\n            .hasCauseInstanceOf(Exception.class);\n    }\n\n    @Test\n    public void testDoWithLocaleFinallyBlock() throws Exception {\n        Locale initialLocale = baseFaker.getContext().getLocale();\n        Callable<String> callable = () -> baseFaker.resolve(\"name.first_name\");\n        baseFaker.doWith(callable, Locale.FRANCE);\n        assertThat(baseFaker.getContext().getLocale()).isEqualTo(initialLocale);\n    }\n}\n"}]