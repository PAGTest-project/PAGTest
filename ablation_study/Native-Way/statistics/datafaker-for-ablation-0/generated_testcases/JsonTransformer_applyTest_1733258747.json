[{"strategy": "retry", "code": "\npackage net.datafaker.transformations;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nclass JsonTransformer_applyTest {\n\n    @Test\n    void testApplyWithSimpleFields() {\n        // Given\n        JsonTransformer<Object> transformer = JsonTransformer.builder().build();\n        Schema<Object, ?> schema = mock(Schema.class);\n        Field<?, ?>[] fields = new Field<?, ?>[2];\n        fields[0] = new SimpleField(\"name\", (Object o) -> \"John\");\n        fields[1] = new SimpleField(\"age\", (Object o) -> 30);\n        when(schema.getFields()).thenReturn(fields);\n\n        // When\n        String result = transformer.apply(new Object(), schema);\n\n        // Then\n        assertEquals(\"{\\\"name\\\": \\\"John\\\", \\\"age\\\": 30}\", result);\n    }\n\n    @Test\n    void testApplyWithCompositeField() {\n        // Given\n        JsonTransformer<Object> transformer = JsonTransformer.builder().build();\n        Schema<Object, ?> schema = mock(Schema.class);\n        Field<?, ?>[] fields = new Field<?, ?>[1];\n        Field<?, ?>[] compositeFields = new Field<?, ?>[1];\n        compositeFields[0] = new SimpleField(\"address\", (Object o) -> \"123 Main St\");\n        fields[0] = new CompositeField(\"contact\", compositeFields);\n        when(schema.getFields()).thenReturn(fields);\n\n        // When\n        String result = transformer.apply(new Object(), schema);\n\n        // Then\n        assertEquals(\"{\\\"contact\\\": {\\\"address\\\": \\\"123 Main St\\\"}}\", result);\n    }\n}\n"}]