[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.time.Instant;\nimport java.util.concurrent.TimeUnit;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class TimeAndDate_futureTest {\n    private TimeAndDate timeAndDate;\n\n    @BeforeEach\n    public void setUp() {\n        timeAndDate = new TimeAndDate(new BaseProviders() {\n            @Override\n            public RandomService random() {\n                return new RandomService();\n            }\n        });\n    }\n\n    @Test\n    void futureTestWithSeconds() {\n        long atMost = 10;\n        TimeUnit unit = TimeUnit.SECONDS;\n        Instant referenceDate = Instant.now();\n        Instant futureDate = timeAndDate.future(atMost, unit, referenceDate);\n\n        assertThat(futureDate).isAfterOrEqualTo(referenceDate.plusMillis(1));\n        assertThat(futureDate).isBefore(referenceDate.plusMillis(unit.toMillis(atMost)));\n    }\n\n    @Test\n    void futureTestWithMinutes() {\n        long atMost = 5;\n        TimeUnit unit = TimeUnit.MINUTES;\n        Instant referenceDate = Instant.now();\n        Instant futureDate = timeAndDate.future(atMost, unit, referenceDate);\n\n        assertThat(futureDate).isAfterOrEqualTo(referenceDate.plusMillis(1));\n        assertThat(futureDate).isBefore(referenceDate.plusMillis(unit.toMillis(atMost)));\n    }\n\n    @Test\n    void futureTestWithHours() {\n        long atMost = 2;\n        TimeUnit unit = TimeUnit.HOURS;\n        Instant referenceDate = Instant.now();\n        Instant futureDate = timeAndDate.future(atMost, unit, referenceDate);\n\n        assertThat(futureDate).isAfterOrEqualTo(referenceDate.plusMillis(1));\n        assertThat(futureDate).isBefore(referenceDate.plusMillis(unit.toMillis(atMost)));\n    }\n\n    @Test\n    void futureTestWithDays() {\n        long atMost = 1;\n        TimeUnit unit = TimeUnit.DAYS;\n        Instant referenceDate = Instant.now();\n        Instant futureDate = timeAndDate.future(atMost, unit, referenceDate);\n\n        assertThat(futureDate).isAfterOrEqualTo(referenceDate.plusMillis(1));\n        assertThat(futureDate).isBefore(referenceDate.plusMillis(unit.toMillis(atMost)));\n    }\n}\n"}]