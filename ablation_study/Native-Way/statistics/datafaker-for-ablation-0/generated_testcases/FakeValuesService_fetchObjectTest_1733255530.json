[{"strategy": "generate", "code": "\npackage net.datafaker.service;\n\nimport net.datafaker.internal.helper.SingletonLocale;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nclass FakeValuesService_fetchObjectTest {\n\n    private FakeValuesService fakeValuesService;\n    private FakerContext context;\n    private Map<SingletonLocale, Map<String, Object>> key2fetchedObject;\n    private Map<SingletonLocale, FakeValuesInterface> fakeValuesInterfaceMap;\n\n    @BeforeEach\n    void setUp() {\n        fakeValuesService = new FakeValuesService();\n        context = mock(FakerContext.class);\n        key2fetchedObject = mock(Map.class);\n        fakeValuesInterfaceMap = mock(Map.class);\n\n        when(context.getLocaleChain()).thenReturn(List.of(SingletonLocale.get(Locale.ENGLISH)));\n        when(fakeValuesService.key2fetchedObject).thenReturn(key2fetchedObject);\n        when(fakeValuesService.fakeValuesInterfaceMap).thenReturn(fakeValuesInterfaceMap);\n    }\n\n    @Test\n    void testFetchObject_FoundInCache() {\n        String key = \"testKey\";\n        SingletonLocale locale = SingletonLocale.get(Locale.ENGLISH);\n        Map<String, Object> stringObjectMap = mock(Map.class);\n        Object expectedResult = new Object();\n\n        when(key2fetchedObject.get(locale)).thenReturn(stringObjectMap);\n        when(stringObjectMap.get(key)).thenReturn(expectedResult);\n\n        Object result = fakeValuesService.fetchObject(key, context);\n\n        assertEquals(expectedResult, result);\n    }\n\n    @Test\n    void testFetchObject_FoundInFakeValuesInterface() {\n        String key = \"testKey\";\n        SingletonLocale locale = SingletonLocale.get(Locale.ENGLISH);\n        Map<String, Object> stringObjectMap = mock(Map.class);\n        FakeValuesInterface fakeValuesInterface = mock(FakeValuesInterface.class);\n        Object expectedResult = new Object();\n\n        when(key2fetchedObject.get(locale)).thenReturn(stringObjectMap);\n        when(stringObjectMap.get(key)).thenReturn(null);\n        when(fakeValuesInterfaceMap.get(locale)).thenReturn(fakeValuesInterface);\n        when(fakeValuesInterface.get(anyString())).thenReturn(expectedResult);\n\n        Object result = fakeValuesService.fetchObject(key, context);\n\n        assertEquals(expectedResult, result);\n    }\n\n    @Test\n    void testFetchObject_NotFound() {\n        String key = \"testKey\";\n        SingletonLocale locale = SingletonLocale.get(Locale.ENGLISH);\n        Map<String, Object> stringObjectMap = mock(Map.class);\n        FakeValuesInterface fakeValuesInterface = mock(FakeValuesInterface.class);\n\n        when(key2fetchedObject.get(locale)).thenReturn(stringObjectMap);\n        when(stringObjectMap.get(key)).thenReturn(null);\n        when(fakeValuesInterfaceMap.get(locale)).thenReturn(fakeValuesInterface);\n        when(fakeValuesInterface.get(anyString())).thenReturn(null);\n\n        Object result = fakeValuesService.fetchObject(key, context);\n\n        assertEquals(null, result);\n    }\n\n    @Test\n    void testFetchObject_ListProcessing() {\n        String key = \"testKey\";\n        SingletonLocale locale = SingletonLocale.get(Locale.ENGLISH);\n        Map<String, Object> stringObjectMap = mock(Map.class);\n        FakeValuesInterface fakeValuesInterface = mock(FakeValuesInterface.class);\n        List<String> list = List.of(\"item1\", \"item2\");\n\n        when(key2fetchedObject.get(locale)).thenReturn(stringObjectMap);\n        when(stringObjectMap.get(key)).thenReturn(null);\n        when(fakeValuesInterfaceMap.get(locale)).thenReturn(fakeValuesInterface);\n        when(fakeValuesInterface.get(anyString())).thenReturn(list);\n\n        Object result = fakeValuesService.fetchObject(key, context);\n\n        assertEquals(list, result);\n    }\n}\n"}]