[{"strategy": "generate", "code": "\npackage net.datafaker.transformations.sql;\n\nimport net.datafaker.sequence.FakeSequence;\nimport net.datafaker.sequence.FakeStream;\nimport net.datafaker.transformations.Schema;\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Stream;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class SqlTransformer_generateTest {\n\n    @Test\n    public void testGenerateWithEmptySchema() {\n        SqlTransformer<String> transformer = new SqlTransformer.SqlTransformerBuilder<String>().build();\n        Schema<String, ?> schema = Schema.of();\n        Iterable<String> input = Arrays.asList(\"data1\", \"data2\");\n\n        String result = transformer.generate(input, schema);\n        assertEquals(SqlTransformer.EMPTY_RESULT, result);\n    }\n\n    @Test\n    public void testGenerateWithInfiniteFakeSequence() {\n        SqlTransformer<String> transformer = new SqlTransformer.SqlTransformerBuilder<String>().build();\n        Schema<String, ?> schema = Schema.of();\n        FakeSequence<String> infiniteSequence = new FakeSequence<String>(null, 0, 0, null, 0) {\n            @Override\n            public boolean isInfinite() {\n                return true;\n            }\n        };\n\n        assertThrows(IllegalArgumentException.class, () -> transformer.generate(infiniteSequence, schema));\n    }\n\n    @Test\n    public void testGenerateWithFakeStream() {\n        SqlTransformer<String> transformer = new SqlTransformer.SqlTransformerBuilder<String>().build();\n        Schema<String, ?> schema = Schema.of();\n        FakeStream<String> fakeStream = new FakeStream<String>(null, 0, 0, null, 0) {\n            @Override\n            public Stream<String> get() {\n                return Stream.of(\"data1\", \"data2\");\n            }\n        };\n\n        String result = transformer.generate(fakeStream, schema);\n        assertEquals(\"\", result); // Assuming generateSeparatedStatements returns empty string for simplicity\n    }\n\n    @Test\n    public void testGenerateWithList() {\n        SqlTransformer<String> transformer = new SqlTransformer.SqlTransformerBuilder<String>().build();\n        Schema<String, ?> schema = Schema.of();\n        List<String> input = Arrays.asList(\"data1\", \"data2\");\n\n        String result = transformer.generate(input, schema);\n        assertEquals(\"\", result); // Assuming generateSeparatedStatements returns empty string for simplicity\n    }\n\n    @Test\n    public void testGenerateWithBatchMode() {\n        SqlTransformer<String> transformer = new SqlTransformer.SqlTransformerBuilder<String>().batch().build();\n        Schema<String, ?> schema = Schema.of();\n        List<String> input = Arrays.asList(\"data1\", \"data2\");\n\n        String result = transformer.generate(input, schema);\n        assertEquals(\"\", result); // Assuming generateBatchModeStatements returns empty string for simplicity\n    }\n}\n"}]