[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseFaker;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class SouthAfricanIdNumber_generateValidTest {\n\n    private SouthAfricanIdNumber idNumberGenerator;\n    private BaseFaker faker;\n\n    @BeforeEach\n    public void setUp() {\n        idNumberGenerator = new SouthAfricanIdNumber();\n        faker = new BaseFaker();\n    }\n\n    @Test\n    public void testGenerateValidWithFemale() {\n        IdNumberRequest request = new IdNumberRequest() {\n            @Override\n            public LocalDate getBirthDate() {\n                return LocalDate.of(1990, 1, 1);\n            }\n\n            @Override\n            public Gender getGender() {\n                return Gender.FEMALE;\n            }\n        };\n\n        PersonIdNumber result = idNumberGenerator.generateValid(faker, request);\n        assertNotNull(result);\n        assertEquals(Gender.FEMALE, result.getGender());\n        assertEquals(LocalDate.of(1990, 1, 1), result.getBirthDate());\n    }\n\n    @Test\n    public void testGenerateValidWithMale() {\n        IdNumberRequest request = new IdNumberRequest() {\n            @Override\n            public LocalDate getBirthDate() {\n                return LocalDate.of(1985, 12, 31);\n            }\n\n            @Override\n            public Gender getGender() {\n                return Gender.MALE;\n            }\n        };\n\n        PersonIdNumber result = idNumberGenerator.generateValid(faker, request);\n        assertNotNull(result);\n        assertEquals(Gender.MALE, result.getGender());\n        assertEquals(LocalDate.of(1985, 12, 31), result.getBirthDate());\n    }\n\n    @Test\n    public void testGenerateValidChecksum() {\n        IdNumberRequest request = new IdNumberRequest() {\n            @Override\n            public LocalDate getBirthDate() {\n                return LocalDate.of(1995, 6, 15);\n            }\n\n            @Override\n            public Gender getGender() {\n                return Gender.FEMALE;\n            }\n        };\n\n        PersonIdNumber result = idNumberGenerator.generateValid(faker, request);\n        assertNotNull(result);\n        String basePart = idNumberGenerator.DATE_TIME_FORMATTER.format(request.getBirthDate())\n                + idNumberGenerator.sequentialNumber(faker, request.getGender())\n                + faker.options().option(idNumberGenerator.CODE_PATTERN);\n        int expectedChecksum = idNumberGenerator.calculateChecksum(basePart, 12);\n        int actualChecksum = Integer.parseInt(result.getIdNumber().substring(12));\n        assertEquals(expectedChecksum, actualChecksum);\n    }\n}\n"}]