[{"strategy": "generate", "code": "\npackage net.datafaker.transformations;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass XmlTransformer_generateTest {\n\n    @Test\n    void testGenerateFiniteSequence() {\n        XmlTransformer<String> transformer = new XmlTransformer<>(false);\n        Schema<String, ?> schema = mock(Schema.class);\n        Field<String, ?> field = mock(Field.class);\n        when(schema.getFields()).thenReturn(new Field[]{field});\n        when(field.transform(any())).thenReturn(\"value\");\n\n        List<String> input = Arrays.asList(\"item1\", \"item2\");\n        String result = transformer.generate(input, schema);\n\n        assertEquals(\"value\" + XmlTransformer.LINE_SEPARATOR + \"value\", result);\n    }\n\n    @Test\n    void testGenerateInfiniteSequence() {\n        XmlTransformer<String> transformer = new XmlTransformer<>(false);\n        FakeSequence<String> fakeSequence = mock(FakeSequence.class);\n        when(fakeSequence.isInfinite()).thenReturn(true);\n\n        assertThrows(IllegalArgumentException.class, () -> {\n            transformer.generate(fakeSequence, mock(Schema.class));\n        });\n    }\n}\n"}]