[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class Internet_macAddressTest {\n    private Internet internet;\n\n    @BeforeEach\n    public void setUp() {\n        BaseFaker faker = new BaseFaker();\n        internet = new Internet(faker);\n    }\n\n    @Test\n    public void testMacAddressWithPrefix() {\n        String prefix = \"00:1A:2B\";\n        String macAddress = internet.macAddress(prefix);\n        assertEquals(17, macAddress.length());\n        assertTrue(macAddress.startsWith(prefix));\n    }\n\n    @Test\n    public void testMacAddressWithoutPrefix() {\n        String macAddress = internet.macAddress(null);\n        assertEquals(17, macAddress.length());\n        assertTrue(macAddress.matches(\"([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}\"));\n    }\n\n    @Test\n    public void testMacAddressWithEmptyPrefix() {\n        String macAddress = internet.macAddress(\"\");\n        assertEquals(17, macAddress.length());\n        assertTrue(macAddress.matches(\"([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}\"));\n    }\n\n    @Test\n    public void testMacAddressWithInvalidPrefix() {\n        String prefix = \"00:1A:2B:3C:4D:5E:6F\";\n        String macAddress = internet.macAddress(prefix);\n        assertEquals(17, macAddress.length());\n        assertTrue(macAddress.startsWith(prefix.substring(0, 17)));\n    }\n}\n"}]