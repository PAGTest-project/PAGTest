[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.Faker;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.time.LocalDate;\nimport static net.datafaker.providers.base.PersonIdNumber.Gender.FEMALE;\nimport static net.datafaker.providers.base.PersonIdNumber.Gender.MALE;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\n\npublic class RomanianIdNumber_generateInvalidTest {\n    private RomanianIdNumber impl;\n    private Faker faker;\n\n    @BeforeEach\n    public void setUp() {\n        impl = new RomanianIdNumber();\n        faker = new Faker();\n    }\n\n    @Test\n    void testGenerateInvalid() {\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        Gender gender = MALE;\n        String basePart = impl.basePart(faker, birthday, gender);\n        int expectedChecksum = (impl.checksum(basePart) + 1) % 10;\n        String expectedInvalidId = basePart + expectedChecksum;\n\n        String actualInvalidId = impl.generateInvalid(faker);\n        assertEquals(expectedInvalidId, actualInvalidId);\n    }\n\n    @Test\n    void testGenerateInvalidWithFemale() {\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        Gender gender = FEMALE;\n        String basePart = impl.basePart(faker, birthday, gender);\n        int expectedChecksum = (impl.checksum(basePart) + 1) % 10;\n        String expectedInvalidId = basePart + expectedChecksum;\n\n        String actualInvalidId = impl.generateInvalid(faker);\n        assertEquals(expectedInvalidId, actualInvalidId);\n    }\n\n    @Test\n    void testGenerateInvalidWithDifferentBirthday() {\n        LocalDate birthday = LocalDate.of(1985, 12, 31);\n        Gender gender = MALE;\n        String basePart = impl.basePart(faker, birthday, gender);\n        int expectedChecksum = (impl.checksum(basePart) + 1) % 10;\n        String expectedInvalidId = basePart + expectedChecksum;\n\n        String actualInvalidId = impl.generateInvalid(faker);\n        assertEquals(expectedInvalidId, actualInvalidId);\n    }\n}\n"}]