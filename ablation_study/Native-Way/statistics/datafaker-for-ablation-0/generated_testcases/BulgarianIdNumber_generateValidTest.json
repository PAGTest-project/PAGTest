[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.time.LocalDate;\n\npublic class BulgarianIdNumber_generateValidTest {\n    private BulgarianIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new BulgarianIdNumber();\n        faker = mock(BaseProviders.class);\n    }\n\n    @Test\n    void testGenerateValid() {\n        LocalDate birthday = LocalDate.of(1980, 3, 20);\n        Gender gender = Gender.MALE;\n        String basePart = \"800320\";\n        String expectedIdNumber = basePart + \"1\";\n\n        when(faker.dateAndTime().birthday()).thenReturn(birthday);\n        when(faker.gender()).thenReturn(gender);\n        when(faker.number().digits(2)).thenReturn(\"00\");\n\n        IdNumberRequest request = new IdNumberRequest(0, 0, null);\n        PersonIdNumber result = generator.generateValid(faker, request);\n\n        assertEquals(expectedIdNumber, result.getIdNumber());\n        assertEquals(birthday, result.getBirthday());\n        assertEquals(gender, result.getGender());\n    }\n\n    @Test\n    void testGenerateInvalid() {\n        LocalDate birthday = LocalDate.of(1980, 3, 20);\n        Gender gender = Gender.MALE;\n        String basePart = \"800320\";\n        String expectedInvalidIdNumber = basePart + \"2\";\n\n        when(faker.dateAndTime().birthday()).thenReturn(birthday);\n        when(faker.gender()).thenReturn(gender);\n        when(faker.number().digits(2)).thenReturn(\"00\");\n\n        String result = generator.generateInvalid(faker);\n\n        assertEquals(expectedInvalidIdNumber, result);\n    }\n\n    @Test\n    void testChecksum() {\n        assertEquals(1, generator.checksum(\"803205603\"));\n        assertEquals(8, generator.checksum(\"800101000\"));\n        assertEquals(8, generator.checksum(\"750102001\"));\n        assertEquals(0, generator.checksum(\"820630876\"));\n        assertEquals(7, generator.checksum(\"560628204\"));\n        assertEquals(3, generator.checksum(\"752316926\"));\n        assertEquals(5, generator.checksum(\"755201000\"));\n        assertEquals(0, generator.checksum(\"754201103\"));\n    }\n}\n"}]