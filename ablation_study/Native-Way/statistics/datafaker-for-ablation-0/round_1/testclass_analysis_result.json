[{"file_path": "src/test/java/net/datafaker/providers/base/Internet_ipV6CidrTest.java", "testclass_name": "Internet_ipV6CidrTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Internet_ipV6CidrTest", "description": "Unit test for the IPv6 CIDR generation functionality in the Internet class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIpV6Cidr", "primary_tested": ["Internet.ipV6Cidr()"], "external_dependencies": {"modules": ["BaseFaker", "Internet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of an IPv6 CIDR and verifies its format using a regular expression."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Internet_uuidv7Test.java", "testclass_name": "Internet_uuidv7Test", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.mockito.Mockito.*;", "import java.util.UUID;", "import net.datafaker.service.RandomService;"], "name": "Internet_uuidv7Test", "description": "Unit tests for the uuidv7 method in the Internet class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUuidv7", "primary_tested": ["Internet.uuidv7()"], "associated_methods": ["RandomService.nextLong()"], "external_dependencies": {"modules": ["BaseProviders", "RandomService", "Internet", "UUID"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a UUIDv7 and verifies its version and variant."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Name_titleTest.java", "testclass_name": "Name_titleTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "Name_titleTest", "description": "Unit tests for the title generation functionality of the Name class.", "class_members": {"variables": [{"name": "name", "type": "Name"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testTitle", "primary_tested": ["Name.title()"], "external_dependencies": {"modules": ["Name", "BaseFaker"], "class_members": [{"name": "name", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the title generation functionality of the Name class."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Number_numberBetweenTest.java", "testclass_name": "Number_numberBetweenTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;", "import net.datafaker.service.RandomService;"], "name": "Number_numberBetweenTest", "description": "Unit tests for the numberBetween method in the Number class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testNumberBetweenWithEqualMinMax", "primary_tested": ["Number.numberBetween(int,int)"], "external_dependencies": {"modules": ["BaseProviders", "Number"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the numberBetween method when the minimum and maximum values are equal."}, {"name": "testNumberBetweenWithDifferentMinMax", "primary_tested": ["Number.numberBetween(int,int)"], "associated_methods": ["RandomService.nextInt(int)"], "external_dependencies": {"modules": ["BaseProviders", "Number", "RandomService"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the numberBetween method when the minimum and maximum values are different."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Internet_getPrivateIpV4AddressTest.java", "testclass_name": "Internet_getPrivateIpV4AddressTest", "dependencies": ["package net.datafaker.providers.base;", "import net.datafaker.service.RandomService;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.net.InetAddress;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.when;"], "name": "Internet_getPrivateIpV4AddressTest", "description": "Unit test for the getPrivateIpV4Address method in the Internet class.", "class_members": {"variables": [{"name": "PRIVATE_FIRST_OCTET", "type": "static final Byte[]"}, {"name": "PRIVATE_SECOND_OCTET_172", "type": "static final Byte[]"}]}, "fixtures": [], "test_cases": [{"name": "testGetPrivateIpV4Address", "primary_tested": ["Internet.getPrivateIpV4Address()"], "associated_methods": [], "external_dependencies": {"modules": ["BaseProviders", "RandomService", "Internet", "InetAddress"], "class_members": [{"name": "PRIVATE_FIRST_OCTET", "type": "variable"}, {"name": "PRIVATE_SECOND_OCTET_172", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the generation of a private IPv4 address using mocked RandomService and BaseProviders."}]}, {"file_path": "src/test/java/net/datafaker/service/FakeValuesService_csvTest.java", "testclass_name": "FakeValuesService_csvTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "FakeValuesService_csvTest", "description": "Unit tests for the csv method in FakeValuesService, focusing on scenarios with even and odd columns.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testCsvWithEvenColumns", "primary_tested": ["FakeValuesService.csv(String,char,boolean,int,String...)"], "external_dependencies": {"modules": ["FakeValuesService"], "class_members": []}, "category": "unit", "description": "Tests the csv method with an even number of columns, ensuring the result is not null."}, {"name": "testCsvWithOddColumns", "primary_tested": ["FakeValuesService.csv(String,char,boolean,int,String...)"], "external_dependencies": {"modules": ["FakeValuesService"], "class_members": []}, "category": "unit", "description": "Tests the csv method with an odd number of columns, expecting an IllegalArgumentException with a specific error message."}]}, {"file_path": "src/test/java/net/datafaker/service/FakeValuesService_jsonTest.java", "testclass_name": "FakeValuesService_jsonTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "FakeValuesService_jsonTest", "description": "Unit tests for the json method in FakeValuesService, focusing on the handling of even and odd numbers of fields.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testJson_evenNumberOfFields", "primary_tested": ["FakeValuesService.json(String,String,String,String)"], "external_dependencies": {"modules": ["FakeValuesService"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the json method with an even number of fields, ensuring the result is not null."}, {"name": "testJson_oddNumberOfFields", "primary_tested": ["FakeValuesService.json(String,String,String)"], "external_dependencies": {"modules": ["FakeValuesService"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the json method with an odd number of fields, expecting an IllegalArgumentException with a specific error message."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Locality_localeStringWithRandomTest.java", "testclass_name": "Locality_localeStringWithRandomTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Random;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Locality_localeStringWithRandomTest", "description": "Unit tests for the localeStringWithRandom method in the Locality class.", "class_members": {"variables": [{"name": "locality", "type": "Locality"}, {"name": "random", "type": "Random"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testLocaleStringWithRandom", "primary_tested": ["Locality.localeStringWithRandom(Random)"], "associated_methods": ["Locality.allSupportedLocales()"], "external_dependencies": {"modules": ["Locality", "Random"], "class_members": [{"name": "locality", "type": "variable"}, {"name": "random", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the localeStringWithRandom method to ensure it returns a non-null string that is contained within the list of all supported locales."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumber_generateInvalidTest.java", "testclass_name": "AlbanianIdNumber_generateInvalidTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.Faker;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;"], "name": "AlbanianIdNumber_generateInvalidTest", "description": "Unit tests for generating invalid Albanian ID numbers.", "class_members": {"variables": [{"name": "generator", "type": "AlbanianIdNumber"}, {"name": "faker", "type": "Faker"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGenerateInvalid", "primary_tested": ["AlbanianIdNumber.generateInvalid(Faker)"], "associated_methods": ["AlbanianIdNumber.generateValid(Faker)"], "external_dependencies": {"modules": ["AlbanianIdNumber", "Faker"], "class_members": [{"name": "generator", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of an invalid Albanian ID number and ensures it is different from a valid one."}]}, {"file_path": "src/test/java/net/datafaker/transformations/sql/SqlTransformer_generateStreamTest.java", "testclass_name": "SqlTransformer_generateStreamTest", "dependencies": ["package net.datafaker.transformations.sql;", "import net.datafaker.transformations.Schema;", "import net.datafaker.transformations.SimpleField;", "import org.junit.jupiter.api.Test;", "import java.util.stream.Stream;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "SqlTransformer_generateStreamTest", "description": "Unit tests for the generateStream method in the SqlTransformer class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testGenerateStreamWithEmptySchema", "primary_tested": ["SqlTransformer.generateStream(Schema,int)"], "external_dependencies": {"modules": ["SqlTransformer", "Schema"]}, "category": "unit", "description": "Tests the generateStream method with an empty schema."}, {"name": "testGenerateStreamWithoutBatchMode", "primary_tested": ["SqlTransformer.generateStream(Schema,int)"], "external_dependencies": {"modules": ["SqlTransformer", "Schema", "SimpleField"]}, "category": "unit", "description": "Tests the generateStream method without batch mode."}, {"name": "testGenerateStreamWithBatchMode", "primary_tested": ["SqlTransformer.generateStream(Schema,int)"], "external_dependencies": {"modules": ["SqlTransformer", "Schema", "SimpleField"]}, "category": "unit", "description": "Tests the generateStream method with batch mode enabled."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil_digitTest.java", "testclass_name": "IdNumberGeneratorPtBrUtil_digitTest", "dependencies": ["package net.datafaker.idnumbers.pt.br;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IdNumberGeneratorPtBrUtil_digitTest", "description": "Unit tests for the digit method in IdNumberGeneratorPtBrUtil.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testDigitWithRemainderZero", "primary_tested": ["IdNumberGeneratorPtBrUtil.digit(int)"], "external_dependencies": {"modules": ["IdNumberGeneratorPtBrUtil"]}, "category": "unit", "description": "Tests the digit method with a remainder of zero."}, {"name": "testDigitWithRemainderOne", "primary_tested": ["IdNumberGeneratorPtBrUtil.digit(int)"], "external_dependencies": {"modules": ["IdNumberGeneratorPtBrUtil"]}, "category": "unit", "description": "Tests the digit method with a remainder of one."}, {"name": "testDigitWithRemainderGreaterThanOne", "primary_tested": ["IdNumberGeneratorPtBrUtil.digit(int)"], "external_dependencies": {"modules": ["IdNumberGeneratorPtBrUtil"]}, "category": "unit", "description": "Tests the digit method with remainders greater than one."}]}, {"file_path": "src/test/java/net/datafaker/service/RandomService_hashCodeTest.java", "testclass_name": "RandomService_hashCodeTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.Test;", "import java.util.Random;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "RandomService_hashCodeTest", "description": "Unit tests for the hashCode method of the RandomService class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testHashCodeWithSharedRandom", "primary_tested": ["RandomService.hashCode()"], "external_dependencies": {"modules": ["RandomService"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of RandomService with the default shared Random instance."}, {"name": "testHashCodeWithCustomRandom", "primary_tested": ["RandomService.hashCode()"], "external_dependencies": {"modules": ["RandomService", "Random"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of RandomService with a custom Random instance."}, {"name": "testHashCodeWithNullRandom", "primary_tested": ["RandomService.hashCode()"], "external_dependencies": {"modules": ["RandomService"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of RandomService with a null Random instance."}]}, {"file_path": "src/test/java/net/datafaker/internal/helper/WordUtils_capitalizeTest.java", "testclass_name": "WordUtils_capitalizeTest", "dependencies": ["package net.datafaker.internal.helper;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "WordUtils_capitalizeTest", "description": "Unit tests for the WordUtils.capitalize method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCapitalize_nullInput", "primary_tested": ["WordUtils.capitalize(String)"], "external_dependencies": {"modules": ["WordUtils"]}, "category": "unit", "description": "Tests the capitalization functionality with a null input."}, {"name": "testCapitalize_emptyInput", "primary_tested": ["WordUtils.capitalize(String)"], "external_dependencies": {"modules": ["WordUtils"]}, "category": "unit", "description": "Tests the capitalization functionality with an empty input."}, {"name": "testCapitalize_alreadyCapitalized", "primary_tested": ["WordUtils.capitalize(String)"], "external_dependencies": {"modules": ["WordUtils"]}, "category": "unit", "description": "Tests the capitalization functionality with an already capitalized input."}, {"name": "testCapitalize_needsCapitalization", "primary_tested": ["WordUtils.capitalize(String)"], "external_dependencies": {"modules": ["WordUtils"]}, "category": "unit", "description": "Tests the capitalization functionality with an input that needs capitalization."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Lorem_maxLengthSentenceTest.java", "testclass_name": "Lorem_maxLengthSentenceTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Lorem_maxLengthSentenceTest", "description": "Unit tests for the maxLengthSentence method in the Lorem class.", "class_members": {"variables": [{"name": "lorem", "type": "Lorem"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testMaxLengthSentenceWithZeroLength", "primary_tested": ["Lorem.maxLengthSentence(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the maxLengthSentence method with a length of zero."}, {"name": "testMaxLengthSentenceWithPositiveLength", "primary_tested": ["Lorem.maxLengthSentence(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the maxLengthSentence method with a positive length."}, {"name": "testMaxLengthSentenceWithSpaceAtEnd", "primary_tested": ["Lorem.maxLengthSentence(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the maxLengthSentence method to ensure the result does not end with a space."}]}, {"file_path": "src/test/java/net/datafaker/transformations/YamlTransformer_applyTest.java", "testclass_name": "YamlTransformer_applyTest", "dependencies": ["package net.datafaker.transformations;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "YamlTransformer_applyTest", "description": "Unit tests for the YamlTransformer apply method.", "class_members": {"variables": [{"name": "transformer", "type": "YamlTransformer<Object>"}, {"name": "schema", "type": "Schema<Object, ?>"}, {"name": "field", "type": "Field<Object, ?>"}]}, "fixtures": [], "test_cases": [{"name": "testApplyWithEmptyFields", "primary_tested": ["YamlTransformer.apply(Object,Schema)"], "external_dependencies": {"modules": ["YamlTransformer", "Schema"], "class_members": [{"name": "transformer", "type": "variable"}, {"name": "schema", "type": "variable"}]}, "category": "unit", "description": "Tests the apply method of YamlTransformer with empty fields."}, {"name": "testApplyWithNonEmptyFields", "primary_tested": ["YamlTransformer.apply(Object,Schema)"], "associated_methods": ["Field.getName()", "Field.transform(Object)"], "external_dependencies": {"modules": ["YamlTransformer", "Schema", "Field"], "class_members": [{"name": "transformer", "type": "variable"}, {"name": "schema", "type": "variable"}, {"name": "field", "type": "variable"}]}, "category": "unit", "description": "Tests the apply method of YamlTransformer with non-empty fields."}]}, {"file_path": "src/test/java/net/datafaker/internal/helper/JavaNames_toJavaNamesTest.java", "testclass_name": "JavaNames_toJavaNamesTest", "dependencies": ["package net.datafaker.internal.helper;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "JavaNames_toJavaNamesTest", "description": "Unit tests for the toJavaNames method in the JavaNames class.", "fixtures": [], "test_cases": [{"name": "testToJavaNames_NullInput", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with a null input."}, {"name": "testToJavaNames_EmptyInput", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with an empty input."}, {"name": "testToJavaNames_MethodCase", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with method case conversion."}, {"name": "testToJavaNames_NonMethodCase", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with non-method case conversion."}, {"name": "testToJavaNames_MixedCase", "primary_tested": ["JavaNames.toJavaNames(String,boolean)"], "external_dependencies": {"modules": ["JavaNames"]}, "category": "unit", "description": "Tests the toJavaNames method with mixed case conversion."}]}, {"file_path": "src/test/java/net/datafaker/service/FakeValuesService_primitiveToWrapperTest.java", "testclass_name": "FakeValuesService_primitiveToWrapperTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "FakeValuesService_primitiveToWrapperTest", "description": "Unit tests for the primitiveToWrapper method in FakeValuesService.", "class_members": {"variables": [{"name": "fakeValuesService", "type": "FakeValuesService"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPrimitiveToWrapperWithNull", "primary_tested": ["FakeValuesService.primitiveToWrapper(Class<?>)"], "external_dependencies": {"modules": ["FakeValuesService"], "class_members": [{"name": "fakeValuesService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the primitiveToWrapper method with a null input."}, {"name": "testPrimitiveToWrapperWithPrimitive", "primary_tested": ["FakeValuesService.primitiveToWrapper(Class<?>)"], "external_dependencies": {"modules": ["FakeValuesService"], "class_members": [{"name": "fakeValuesService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the primitiveToWrapper method with a primitive type input."}, {"name": "testPrimitiveToWrapperWithNonPrimitive", "primary_tested": ["FakeValuesService.primitiveToWrapper(Class<?>)"], "external_dependencies": {"modules": ["FakeValuesService"], "class_members": [{"name": "fakeValuesService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the primitiveToWrapper method with a non-primitive type input."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DateAndTime_periodTest.java", "testclass_name": "DateAndTime_periodTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.time.Period;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "DateAndTime_periodTest", "description": "Unit tests for the period functionality in the DateAndTime class.", "class_members": {"variables": [{"name": "dateAndTime", "type": "DateAndTime"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeriodValidRange", "primary_tested": ["DateAndTime.period(Period,Period)"], "external_dependencies": {"modules": ["DateAndTime", "Period"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the period functionality with a valid range."}, {"name": "testPeriodInvalidRange", "primary_tested": ["DateAndTime.period(Period,Period)"], "external_dependencies": {"modules": ["DateAndTime", "Period"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the period functionality with an invalid range, expecting an IllegalArgumentException."}, {"name": "testPeriodEqualMinMax", "primary_tested": ["DateAndTime.period(Period,Period)"], "external_dependencies": {"modules": ["DateAndTime", "Period"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the period functionality with equal min and max values."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Lorem_wordsTest.java", "testclass_name": "Lorem_wordsTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "Lorem_wordsTest", "description": "Unit tests for the Lorem class's words method with different count values.", "class_members": {"variables": [{"name": "lorem", "type": "Lorem"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testWordsWithPositiveCount", "primary_tested": ["Lorem.words(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the words method of the Lorem class with a positive count, ensuring the returned list has the correct size."}, {"name": "testWordsWithZeroCount", "primary_tested": ["Lorem.words(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the words method of the Lorem class with a zero count, ensuring the returned list is empty."}, {"name": "testWordsWithNegativeCount", "primary_tested": ["Lorem.words(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the words method of the Lorem class with a negative count, ensuring the returned list is empty."}]}, {"file_path": "src/test/java/net/datafaker/service/RandomService_nextLongTest.java", "testclass_name": "RandomService_nextLongTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;", "import java.util.Random;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "RandomService_nextLongTest", "description": "Unit tests for the nextLong method of the RandomService class.", "class_members": {"variables": [{"name": "randomService", "type": "RandomService"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextLongWithPositiveBound", "primary_tested": ["RandomService.nextLong(long)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextLong method with a positive bound, ensuring the result is within the specified range."}, {"name": "testNextLongWithBoundOne", "primary_tested": ["RandomService.nextLong(long)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextLong method with a bound of 1, ensuring the result is 0."}, {"name": "testNextLongWithNonPositiveBound", "primary_tested": ["RandomService.nextLong(long)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextLong method with non-positive bounds, ensuring an IllegalArgumentException is thrown."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DateAndTime_betweenTest.java", "testclass_name": "DateAndTime_betweenTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.sql.Timestamp;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "DateAndTime_betweenTest", "description": "Unit tests for the DateAndTime class's between method.", "class_members": {"variables": [{"name": "dateAndTime", "type": "DateAndTime"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBetweenValidRange", "primary_tested": ["DateAndTime.between(Timestamp,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the between method with a valid range, ensuring the result is within the specified timestamps."}, {"name": "testBetweenEqualDates", "primary_tested": ["DateAndTime.between(Timestamp,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the between method with equal timestamps, ensuring the result is the same as the input timestamps."}, {"name": "testBetweenInvalidRange", "primary_tested": ["DateAndTime.between(Timestamp,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the between method with an invalid range, ensuring an IllegalArgumentException is thrown."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayTest.java", "testclass_name": "DateAndTime_birthdayTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.sql.Timestamp;", "import java.time.LocalDate;", "import java.time.LocalDateTime;", "import java.time.LocalTime;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "DateAndTime_birthdayTest", "description": "Unit tests for the birthday functionality in the DateAndTime class.", "class_members": {"variables": [{"name": "dateAndTime", "type": "DateAndTime"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBirthdayWithEqualAges", "primary_tested": ["DateAndTime.birthday(int,int)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "LocalDateTime", "LocalDate", "LocalTime"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the birthday functionality with equal minimum and maximum ages."}, {"name": "testBirthdayWithDifferentAges", "primary_tested": ["DateAndTime.birthday(int,int)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "LocalDate"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the birthday functionality with different minimum and maximum ages."}, {"name": "testBirthdayWithNegativeAges", "primary_tested": ["DateAndTime.birthday(int,int)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "LocalDate"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the birthday functionality with negative minimum and maximum ages."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayLocalDateTest.java", "testclass_name": "DateAndTime_birthdayLocalDateTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.time.LocalDate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "DateAndTime_birthdayLocalDateTest", "description": "Unit tests for the birthdayLocalDate method in the DateAndTime class.", "class_members": {"variables": [{"name": "dateAndTime", "type": "DateAndTime"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBirthdayLocalDateMinAgeEqualsMaxAge", "primary_tested": ["DateAndTime.birthdayLocalDate(int,int)"], "external_dependencies": {"modules": ["DateAndTime", "LocalDate"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the birthdayLocalDate method when minAge equals maxAge."}, {"name": "testBirthdayLocalDateMinAgeLessThanMaxAge", "primary_tested": ["DateAndTime.birthdayLocalDate(int,int)"], "external_dependencies": {"modules": ["DateAndTime", "LocalDate"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the birthdayLocalDate method when minAge is less than maxAge."}, {"name": "testBirthdayLocalDateNegativeAges", "primary_tested": ["DateAndTime.birthdayLocalDate(int,int)"], "external_dependencies": {"modules": ["DateAndTime", "LocalDate"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the birthdayLocalDate method with negative ages."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Lorem_paragraphsTest.java", "testclass_name": "Lorem_paragraphsTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.assertj.core.api.Assertions.assertThat;"], "name": "Lorem_paragraphsTest", "description": "Unit tests for the Lorem class's paragraphs method.", "class_members": {"variables": [{"name": "lorem", "type": "Lorem"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testParagraphsWithCount", "primary_tested": ["Lorem.paragraphs(int)"], "external_dependencies": {"modules": ["Lorem", "List", "String"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the paragraphs method with a positive count, ensuring the returned list has the correct size and each paragraph is not blank."}, {"name": "testParagraphsWithZeroCount", "primary_tested": ["Lorem.paragraphs(int)"], "external_dependencies": {"modules": ["Lorem", "List"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the paragraphs method with a zero count, ensuring the returned list is empty."}, {"name": "testParagraphsWithNegativeCount", "primary_tested": ["Lorem.paragraphs(int)"], "associated_methods": ["Math.max(int,int)"], "external_dependencies": {"modules": ["Lorem", "List", "Math"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the paragraphs method with a negative count, ensuring the returned list is empty after adjusting the count to zero using Math.max."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DateAndTime_pastTest.java", "testclass_name": "DateAndTime_pastTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.sql.Timestamp;", "import java.util.concurrent.TimeUnit;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "DateAndTime_pastTest", "description": "Unit tests for the DateAndTime class's past method with different time units.", "class_members": {"variables": [{"name": "dateAndTime", "type": "DateAndTime"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPastWithDays", "primary_tested": ["DateAndTime.past(int,TimeUnit,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "TimeUnit"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the past method of DateAndTime with TimeUnit.DAYS to ensure the generated date is within the specified number of days before the reference date."}, {"name": "testPastWithHours", "primary_tested": ["DateAndTime.past(int,TimeUnit,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "TimeUnit"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the past method of DateAndTime with TimeUnit.HOURS to ensure the generated date is within the specified number of hours before the reference date."}, {"name": "testPastWithMinutes", "primary_tested": ["DateAndTime.past(int,TimeUnit,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "TimeUnit"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the past method of DateAndTime with TimeUnit.MINUTES to ensure the generated date is within the specified number of minutes before the reference date."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Internet_slugTest.java", "testclass_name": "Internet_slugTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.List;"], "name": "Internet_slugTest", "description": "Unit tests for the slug generation functionality in the Internet class.", "class_members": {"variables": [{"name": "faker", "type": "BaseFaker"}]}, "test_cases": [{"name": "testSlugWithNullInputs", "primary_tested": ["Internet.slug(List<String>,String)"], "external_dependencies": {"modules": ["BaseFaker", "Internet"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the slug generation with null inputs for both words and glue."}, {"name": "testSlugWithNonNullInputs", "primary_tested": ["Internet.slug(List<String>,String)"], "external_dependencies": {"modules": ["BaseFaker", "Internet"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the slug generation with non-null inputs for both words and glue."}, {"name": "testSlugWithNonNullWordsAndNullGlue", "primary_tested": ["Internet.slug(List<String>,String)"], "external_dependencies": {"modules": ["BaseFaker", "Internet"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the slug generation with non-null words and null glue."}, {"name": "testSlugWithNullWordsAndNonNullGlue", "primary_tested": ["Internet.slug(List<String>,String)"], "external_dependencies": {"modules": ["BaseFaker", "Internet"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "description": "Tests the slug generation with null words and non-null glue."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/BaseFaker_doWithTest.java", "testclass_name": "BaseFaker_doWithTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import java.util.concurrent.Callable;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "BaseFaker_doWithTest", "description": "Unit tests for the doWith method in BaseFaker class, focusing on locale handling and exception scenarios.", "class_members": {"variables": [{"name": "baseFaker", "type": "BaseFaker"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDoWithLocaleSuccess", "primary_tested": ["BaseFaker.doWith(Callable<String>,Locale)"], "external_dependencies": {"modules": ["BaseFaker", "Callable", "Locale"], "class_members": [{"name": "baseFaker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful execution of the doWith method with a specific locale, ensuring the result is not null."}, {"name": "testDoWithLocaleException", "primary_tested": ["BaseFaker.doWith(Callable<String>,Locale)"], "external_dependencies": {"modules": ["BaseFaker", "Callable", "Locale"], "class_members": [{"name": "baseFaker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the handling of exceptions within the doWith method, ensuring the correct exception type is thrown and caught."}, {"name": "testDoWithLocaleFinallyBlock", "primary_tested": ["BaseFaker.doWith(Callable<String>,Locale)"], "associated_methods": ["BaseFaker.getContext().getLocale()"], "external_dependencies": {"modules": ["BaseFaker", "Callable", "Locale"], "class_members": [{"name": "baseFaker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the doWith method in a finally block, ensuring the locale is reset to its initial state after execution."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Lorem_fixedStringTest.java", "testclass_name": "Lorem_fixedStringTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Lorem_fixedStringTest", "description": "Unit tests for the fixedString method in the Lorem class.", "class_members": {"variables": [{"name": "lorem", "type": "Lorem"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFixedStringWithZeroLength", "primary_tested": ["Lorem.fixedString(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the fixedString method with a length of zero."}, {"name": "testFixedStringWithPositiveLength", "primary_tested": ["Lorem.fixedString(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the fixedString method with a positive length."}, {"name": "testFixedStringWithNegativeLength", "primary_tested": ["Lorem.fixedString(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the fixedString method with a negative length."}, {"name": "testFixedStringWithLengthGreaterThanSentence", "primary_tested": ["Lorem.fixedString(int)"], "external_dependencies": {"modules": ["Lorem"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the fixedString method with a length greater than a sentence."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Locality_displayNameTest.java", "testclass_name": "Locality_displayNameTest", "dependencies": ["package net.datafaker.providers.base;", "import net.datafaker.Faker;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "Locality_displayNameTest", "description": "Unit tests for the displayName method of the Locality class.", "class_members": {"variables": [{"name": "locality", "type": "Locality"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDisplayNameNotNull", "primary_tested": ["Locality.displayName()"], "external_dependencies": {"modules": ["Locality"], "class_members": [{"name": "locality", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the displayName method returns a non-null value."}, {"name": "testDisplayNameNotEmpty", "primary_tested": ["Locality.displayName()"], "external_dependencies": {"modules": ["Locality"], "class_members": [{"name": "locality", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the displayName method returns a non-empty string."}, {"name": "testDisplayNameWithCountry", "primary_tested": ["Locality.displayName()"], "external_dependencies": {"modules": ["Locality"], "class_members": [{"name": "locality", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the displayName method returns a string containing a country name if it includes parentheses."}, {"name": "testDisplayNameFallback", "primary_tested": ["Locality.displayName()"], "external_dependencies": {"modules": ["Locality", "Locale"], "class_members": [{"name": "locality", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the displayName method falls back to Locale.ENGLISH.getDisplayLanguage(Locale.ROOT) if the display language is empty."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Number_digitsTest.java", "testclass_name": "Number_digitsTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Number_digitsTest", "description": "Unit tests for the Number class's digits method with different count values.", "class_members": {"variables": [{"name": "number", "type": "Number"}, {"name": "faker", "type": "BaseFaker"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testDigitsWithPositiveCount", "primary_tested": ["Number.digits(int)"], "external_dependencies": {"modules": ["Number", "BaseFaker"], "class_members": [{"name": "number", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the digits method with a positive count, ensuring the result is a string of the specified length and contains only digits."}, {"name": "testDigitsWithZeroCount", "primary_tested": ["Number.digits(int)"], "external_dependencies": {"modules": ["Number", "BaseFaker"], "class_members": [{"name": "number", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the digits method with a zero count, ensuring the result is an empty string."}, {"name": "testDigitsWithNegativeCount", "primary_tested": ["Number.digits(int)"], "associated_methods": ["Math.max(int,int)"], "external_dependencies": {"modules": ["Number", "BaseFaker", "Math"], "class_members": [{"name": "number", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the digits method with a negative count, ensuring the result is an empty string after applying Math.max to ensure non-negative count."}]}, {"file_path": "src/test/java/net/datafaker/service/RandomService_hexTest.java", "testclass_name": "RandomService_hexTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "RandomService_hexTest", "description": "Unit tests for the hex method in the RandomService class.", "class_members": {"variables": [{"name": "randomService", "type": "RandomService"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHexWithZeroLength", "primary_tested": ["RandomService.hex(int,boolean)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hex method with a length of zero, both with uppercase and lowercase options."}, {"name": "testHexWithPositiveLengthUppercase", "primary_tested": ["RandomService.hex(int,boolean)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hex method with a positive length and uppercase option, ensuring the generated string is of the correct length and contains only valid uppercase hexadecimal characters."}, {"name": "testHexWithPositiveLengthLowercase", "primary_tested": ["RandomService.hex(int,boolean)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hex method with a positive length and lowercase option, ensuring the generated string is of the correct length and contains only valid lowercase hexadecimal characters."}, {"name": "testHexWithNegativeLength", "primary_tested": ["RandomService.hex(int,boolean)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hex method with a negative length, both with uppercase and lowercase options, ensuring an empty string is returned."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/DateAndTime_futureTest.java", "testclass_name": "DateAndTime_futureTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.sql.Timestamp;", "import java.util.concurrent.TimeUnit;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "DateAndTime_futureTest", "description": "Unit tests for the future date generation functionality of the DateAndTime class.", "class_members": {"variables": [{"name": "dateAndTime", "type": "DateAndTime"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFutureWithDays", "primary_tested": ["DateAndTime.future(int,TimeUnit,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "TimeUnit"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the future date generation with days as the time unit."}, {"name": "testFutureWithHours", "primary_tested": ["DateAndTime.future(int,TimeUnit,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "TimeUnit"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the future date generation with hours as the time unit."}, {"name": "testFutureWithMinutes", "primary_tested": ["DateAndTime.future(int,TimeUnit,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "TimeUnit"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the future date generation with minutes as the time unit."}, {"name": "testFutureWithSeconds", "primary_tested": ["DateAndTime.future(int,TimeUnit,Timestamp)"], "external_dependencies": {"modules": ["DateAndTime", "Timestamp", "TimeUnit"], "class_members": [{"name": "dateAndTime", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the future date generation with seconds as the time unit."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil_isCPFValidTest.java", "testclass_name": "IdNumberGeneratorPtBrUtil_isCPFValidTest", "dependencies": ["package net.datafaker.idnumbers.pt.br;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IdNumberGeneratorPtBrUtil_isCPFValidTest", "description": "Unit tests for the CPF validation functionality in IdNumberGeneratorPtBrUtil.", "class_members": {}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsCPFValid_ValidCPF", "primary_tested": ["IdNumberGeneratorPtBrUtil.isCPFValid(String)"], "external_dependencies": {"modules": ["IdNumberGeneratorPtBrUtil"]}, "category": "unit", "fixtures_used": [], "description": "Tests the validation of a valid CPF."}, {"name": "testIsCPFValid_InvalidCPF", "primary_tested": ["IdNumberGeneratorPtBrUtil.isCPFValid(String)"], "external_dependencies": {"modules": ["IdNumberGeneratorPtBrUtil"]}, "category": "unit", "fixtures_used": [], "description": "Tests the validation of an invalid CPF."}, {"name": "testIsCPFValid_FormattedCPF", "primary_tested": ["IdNumberGeneratorPtBrUtil.isCPFValid(String)"], "external_dependencies": {"modules": ["IdNumberGeneratorPtBrUtil"]}, "category": "unit", "fixtures_used": [], "description": "Tests the validation of a formatted valid CPF."}, {"name": "testIsCPFValid_InvalidFormattedCPF", "primary_tested": ["IdNumberGeneratorPtBrUtil.isCPFValid(String)"], "external_dependencies": {"modules": ["IdNumberGeneratorPtBrUtil"]}, "category": "unit", "fixtures_used": [], "description": "Tests the validation of a formatted invalid CPF."}, {"name": "testIsCPFValid_ShortCPF", "primary_tested": ["IdNumberGeneratorPtBrUtil.isCPFValid(String)"], "external_dependencies": {"modules": ["IdNumberGeneratorPtBrUtil"]}, "category": "unit", "fixtures_used": [], "description": "Tests the validation of a short CPF."}, {"name": "testIsCPFValid_LongCPF", "primary_tested": ["IdNumberGeneratorPtBrUtil.isCPFValid(String)"], "external_dependencies": {"modules": ["IdNumberGeneratorPtBrUtil"]}, "category": "unit", "fixtures_used": [], "description": "Tests the validation of a long CPF."}]}, {"file_path": "src/test/java/net/datafaker/service/FakeValuesService_addUrlTest.java", "testclass_name": "FakeValuesService_addUrlTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.net.MalformedURLException;", "import java.net.URL;", "import java.util.Locale;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "FakeValuesService_addUrlTest", "description": "Unit tests for the addUrl method of FakeValuesService, covering valid and invalid scenarios.", "class_members": {"variables": [{"name": "fakeValuesService", "type": "FakeValuesService"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddUrlValid", "primary_tested": ["FakeValuesService.addUrl(Locale,URL)"], "external_dependencies": {"modules": ["FakeValuesService", "Locale", "URL"], "class_members": [{"name": "fakeValuesService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a valid URL to the FakeValuesService."}, {"name": "testAddUrlNullUrl", "primary_tested": ["FakeValuesService.addUrl(Locale,URL)"], "external_dependencies": {"modules": ["FakeValuesService", "Locale"], "class_members": [{"name": "fakeValuesService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the addUrl method when a null URL is provided, expecting an IllegalArgumentException."}, {"name": "testAddUrlNullLocale", "primary_tested": ["FakeValuesService.addUrl(Locale,URL)"], "external_dependencies": {"modules": ["FakeValuesService", "URL"], "class_members": [{"name": "fakeValuesService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the addUrl method when a null Locale is provided, expecting a NullPointerException."}, {"name": "testAddUrlInvalidUrl", "primary_tested": ["FakeValuesService.addUrl(Locale,URL)"], "external_dependencies": {"modules": ["FakeValuesService", "Locale", "URL"], "class_members": [{"name": "fakeValuesService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the addUrl method when an invalid URL is provided, expecting a MalformedURLException."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Lorem_sentenceTest.java", "testclass_name": "Lorem_sentenceTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Lorem_sentenceTest", "description": "Unit tests for the Lorem sentence generation functionality.", "class_members": {"variables": [{"name": "lorem", "type": "Lorem"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSentenceWithFixedWordCount", "primary_tested": ["Lorem.sentence(int,int)"], "external_dependencies": {"modules": ["Lorem", "BaseProviders", "BaseFaker"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of a sentence with a fixed word count."}, {"name": "testSentenceWithRandomWordsAdded", "primary_tested": ["Lorem.sentence(int,int)"], "external_dependencies": {"modules": ["Lorem", "BaseProviders", "BaseFaker"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of a sentence with a fixed base word count and additional random words."}, {"name": "testSentenceWithZeroWordCount", "primary_tested": ["Lorem.sentence(int,int)"], "external_dependencies": {"modules": ["Lorem", "BaseProviders", "BaseFaker"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of a sentence with zero word count."}, {"name": "testSentenceWithNegativeWordCount", "primary_tested": ["Lorem.sentence(int,int)"], "external_dependencies": {"modules": ["Lorem", "BaseProviders", "BaseFaker"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of a sentence with a negative word count."}, {"name": "testSentenceWithRandomWordsAddedAndZeroBase", "primary_tested": ["Lorem.sentence(int,int)"], "external_dependencies": {"modules": ["Lorem", "BaseProviders", "BaseFaker"], "class_members": [{"name": "lorem", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of a sentence with zero base word count and additional random words."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Number_randomNumberTest.java", "testclass_name": "Number_randomNumberTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Number_randomNumberTest", "description": "Unit tests for the randomNumber method in the Number class.", "class_members": {"variables": [{"name": "number", "type": "Number"}, {"name": "faker", "type": "BaseProviders"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRandomNumberWithZeroDigits", "primary_tested": ["Number.randomNumber(int,boolean)"], "external_dependencies": {"modules": ["Number"], "class_members": [{"name": "number", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the randomNumber method with zero digits, expecting the result to be 0."}, {"name": "testRandomNumberWithNegativeDigits", "primary_tested": ["Number.randomNumber(int,boolean)"], "external_dependencies": {"modules": ["Number"], "class_members": [{"name": "number", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the randomNumber method with negative digits, expecting the result to be 0."}, {"name": "testRandomNumberStrictTrue", "primary_tested": ["Number.randomNumber(int,boolean)"], "external_dependencies": {"modules": ["Number"], "class_members": [{"name": "number", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the randomNumber method with strict mode enabled, expecting the result to be between 100 and 999."}, {"name": "testRandomNumberStrictFalse", "primary_tested": ["Number.randomNumber(int,boolean)"], "external_dependencies": {"modules": ["Number"], "class_members": [{"name": "number", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the randomNumber method with strict mode disabled, expecting the result to be between 0 and 999."}, {"name": "testRandomNumberNonStrict", "primary_tested": ["Number.randomNumber(int,boolean)"], "external_dependencies": {"modules": ["Number"], "class_members": [{"name": "number", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the randomNumber method with strict mode disabled and 5 digits, expecting the result to be between 0 and 99999."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumber_generateInvalidTest.java", "testclass_name": "SouthAfricanIdNumber_generateInvalidTest", "dependencies": ["package net.datafaker.idnumbers;", "import net.datafaker.providers.base.BaseFaker;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertFalse;"], "name": "SouthAfricanIdNumber_generateInvalidTest", "description": "Unit tests for generating invalid South African ID numbers.", "class_members": {"variables": [{"name": "southAfricanIdNumber", "type": "SouthAfricanIdNumber"}, {"name": "faker", "type": "BaseFaker"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGenerateInvalidSsn", "primary_tested": ["SouthAfricanIdNumber.generateInvalid(BaseFaker)"], "associated_methods": ["SouthAfricanIdNumber.isValidEnZASsn(String)"], "external_dependencies": {"modules": ["SouthAfricanIdNumber", "BaseFaker"], "class_members": [{"name": "southAfricanIdNumber", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of an invalid South African ID number and verifies it is not valid."}, {"name": "testGenerateInvalidSsnMultipleTimes", "primary_tested": ["SouthAfricanIdNumber.generateInvalid(BaseFaker)"], "associated_methods": ["SouthAfricanIdNumber.isValidEnZASsn(String)"], "external_dependencies": {"modules": ["SouthAfricanIdNumber", "BaseFaker"], "class_members": [{"name": "southAfricanIdNumber", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of invalid South African ID numbers multiple times and verifies they are not valid."}, {"name": "testGenerateInvalidSsnWithInvalidPattern", "primary_tested": ["SouthAfricanIdNumber.generateInvalid(BaseFaker)"], "associated_methods": [], "external_dependencies": {"modules": ["SouthAfricanIdNumber", "BaseFaker"], "class_members": [{"name": "southAfricanIdNumber", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of an invalid South African ID number and verifies it does not contain a specific invalid pattern."}, {"name": "testGenerateInvalidSsnWithValidPattern", "primary_tested": ["SouthAfricanIdNumber.generateInvalid(BaseFaker)"], "associated_methods": [], "external_dependencies": {"modules": ["SouthAfricanIdNumber", "BaseFaker"], "class_members": [{"name": "southAfricanIdNumber", "type": "variable"}, {"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of an invalid South African ID number and verifies it does not match a specific valid pattern."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil_cpfTest.java", "testclass_name": "IdNumberGeneratorPtBrUtil_cpfTest", "dependencies": ["package net.datafaker.idnumbers.pt.br;", "import net.datafaker.providers.base.BaseProviders;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import net.datafaker.service.RandomService;"], "name": "IdNumberGeneratorPtBrUtil_cpfTest", "description": "Unit tests for the CPF generation and validation functionality in IdNumberGeneratorPtBrUtil.", "class_members": {"variables": [{"name": "faker", "type": "BaseProviders"}, {"name": "randomService", "type": "RandomService"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCpfValidFormatted", "primary_tested": ["IdNumberGeneratorPtBrUtil.cpf(BaseProviders,boolean,boolean)"], "associated_methods": ["IdNumberGeneratorPtBrUtil.isCPFValid(String)"], "external_dependencies": {"modules": ["BaseProviders", "RandomService", "IdNumberGeneratorPtBrUtil"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of a valid formatted CPF."}, {"name": "testCpfValidUnformatted", "primary_tested": ["IdNumberGeneratorPtBrUtil.cpf(BaseProviders,boolean,boolean)"], "associated_methods": ["IdNumberGeneratorPtBrUtil.isCPFValid(String)"], "external_dependencies": {"modules": ["BaseProviders", "RandomService", "IdNumberGeneratorPtBrUtil"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of a valid unformatted CPF."}, {"name": "testCpfInvalidFormatted", "primary_tested": ["IdNumberGeneratorPtBrUtil.cpf(BaseProviders,boolean,boolean)"], "associated_methods": ["IdNumberGeneratorPtBrUtil.isCPFValid(String)"], "external_dependencies": {"modules": ["BaseProviders", "RandomService", "IdNumberGeneratorPtBrUtil"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of an invalid formatted CPF."}, {"name": "testCpfInvalidUnformatted", "primary_tested": ["IdNumberGeneratorPtBrUtil.cpf(BaseProviders,boolean,boolean)"], "associated_methods": ["IdNumberGeneratorPtBrUtil.isCPFValid(String)"], "external_dependencies": {"modules": ["BaseProviders", "RandomService", "IdNumberGeneratorPtBrUtil"], "class_members": [{"name": "faker", "type": "variable"}, {"name": "randomService", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of an invalid unformatted CPF."}]}, {"file_path": "src/test/java/net/datafaker/service/RandomService_equalsTest.java", "testclass_name": "RandomService_equalsTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Random;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "RandomService_equalsTest", "description": "Unit tests for the equals method in the RandomService class.", "class_members": {"variables": [{"name": "randomService1", "type": "RandomService"}, {"name": "randomService2", "type": "RandomService"}, {"name": "randomService3", "type": "RandomService"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameInstance", "primary_tested": ["RandomService.equals(Object)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same instance."}, {"name": "testEqualsDifferentInstancesSameRandom", "primary_tested": ["RandomService.equals(Object)"], "associated_methods": ["RandomService.getRandomInternal()"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing different instances with the same Random."}, {"name": "testEqualsDifferentInstancesDifferentRandom", "primary_tested": ["RandomService.equals(Object)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService1", "type": "variable"}, {"name": "randomService2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing different instances with different Random."}, {"name": "testEqualsNull", "primary_tested": ["RandomService.equals(Object)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with null."}, {"name": "testEqualsDifferentClass", "primary_tested": ["RandomService.equals(Object)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with an instance of a different class."}, {"name": "testEqualsWithNullRandom", "primary_tested": ["RandomService.equals(Object)"], "external_dependencies": {"modules": ["RandomService"], "class_members": [{"name": "randomService3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing instances with null Random."}]}, {"file_path": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java", "testclass_name": "FakeValues_equalsTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "FakeValues_equalsTest", "description": "Unit tests for the equals and hashCode methods of the FakeValues class.", "class_members": {"variables": [{"name": "fakeValues1", "type": "FakeValues"}, {"name": "fakeValues2", "type": "FakeValues"}, {"name": "fakeValues3", "type": "FakeValues"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameObject", "primary_tested": ["FakeValues.equals(Object)"], "external_dependencies": {"modules": ["FakeValues"], "class_members": [{"name": "fakeValues1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method for the same object."}, {"name": "testEqualsDifferentType", "primary_tested": ["FakeValues.equals(Object)"], "external_dependencies": {"modules": ["FakeValues"], "class_members": [{"name": "fakeValues1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method for different types."}, {"name": "testEqualsDifferentContext", "primary_tested": ["FakeValues.equals(Object)"], "external_dependencies": {"modules": ["FakeValues"], "class_members": [{"name": "fakeValues1", "type": "variable"}, {"name": "fakeValues3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method for different contexts."}, {"name": "testEqualsSameContext", "primary_tested": ["FakeValues.equals(Object)"], "external_dependencies": {"modules": ["FakeValues"], "class_members": [{"name": "fakeValues1", "type": "variable"}, {"name": "fakeValues2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method for the same context."}, {"name": "testHashCodeConsistency", "primary_tested": ["FakeValues.hashCode()"], "external_dependencies": {"modules": ["FakeValues"], "class_members": [{"name": "fakeValues1", "type": "variable"}, {"name": "fakeValues2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the consistency of the hashCode method for the same context."}, {"name": "testHashCodeDifference", "primary_tested": ["FakeValues.hashCode()"], "external_dependencies": {"modules": ["FakeValues"], "class_members": [{"name": "fakeValues1", "type": "variable"}, {"name": "fakeValues3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the difference in the hashCode method for different contexts."}]}, {"file_path": "src/test/java/net/datafaker/service/FakeValuesService_safeFetchTest.java", "testclass_name": "FakeValuesService_safeFetchTest", "dependencies": ["package net.datafaker.service;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "FakeValuesService_safeFetchTest", "description": "Unit tests for the safeFetch method in FakeValuesService.", "class_members": {"variables": [{"name": "fakeValuesService", "type": "FakeValuesService"}, {"name": "context", "type": "FakerContext"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSafeFetchWithNullObject", "primary_tested": ["FakeValuesService.safeFetch(String,FakerContext,String)"], "external_dependencies": {"modules": ["FakeValuesService", "FakerContext"], "class_members": [{"name": "fakeValuesService", "type": "variable"}, {"name": "context", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the safeFetch method when the key does not exist, expecting the default value."}, {"name": "testSafeFetchWithSingleString", "primary_tested": ["FakeValuesService.safeFetch(String,FakerContext,String)"], "external_dependencies": {"modules": ["FakeValuesService", "FakerContext"], "class_members": [{"name": "fakeValuesService", "type": "variable"}, {"name": "context", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the safeFetch method when the key maps to a single string, expecting a non-null result."}, {"name": "testSafeFetchWithListOfStrings", "primary_tested": ["FakeValuesService.safeFetch(String,FakerContext,String)"], "external_dependencies": {"modules": ["FakeValuesService", "FakerContext"], "class_members": [{"name": "fakeValuesService", "type": "variable"}, {"name": "context", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the safeFetch method when the key maps to a list of strings, expecting a non-null result."}, {"name": "testSafeFetchWithSlashDelimitedRegex", "primary_tested": ["FakeValuesService.safeFetch(String,FakerContext,String)"], "external_dependencies": {"modules": ["FakeValuesService", "FakerContext"], "class_members": [{"name": "fakeValuesService", "type": "variable"}, {"name": "context", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the safeFetch method when the key maps to a slash-delimited regex, expecting a non-null result."}, {"name": "testSafeFetchWithEmptyList", "primary_tested": ["FakeValuesService.safeFetch(String,FakerContext,String)"], "external_dependencies": {"modules": ["FakeValuesService", "FakerContext"], "class_members": [{"name": "fakeValuesService", "type": "variable"}, {"name": "context", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the safeFetch method when the key maps to an empty list, expecting the default value."}, {"name": "testSafeFetchWithNonStringObject", "primary_tested": ["FakeValuesService.safeFetch(String,FakerContext,String)"], "external_dependencies": {"modules": ["FakeValuesService", "FakerContext"], "class_members": [{"name": "fakeValuesService", "type": "variable"}, {"name": "context", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the safeFetch method when the key maps to a non-string object, expecting a non-null result."}]}, {"file_path": "src/test/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil_cnpjTest.java", "testclass_name": "IdNumberGeneratorPtBrUtil_cnpjTest", "dependencies": ["package net.datafaker.idnumbers.pt.br;", "import net.datafaker.providers.base.BaseProviders;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import static org.mockito.Mockito.doReturn;"], "name": "IdNumberGeneratorPtBrUtil_cnpjTest", "description": "Unit tests for the CNPJ generation and validation functionality in IdNumberGeneratorPtBrUtil.", "class_members": {"variables": [{"name": "faker", "type": "BaseProviders"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCnpjValidFormattedMultiBranch", "primary_tested": ["IdNumberGeneratorPtBrUtil.cnpj(BaseProviders,boolean,boolean,boolean)", "IdNumberGeneratorPtBrUtil.isCNPJValid(String)"], "associated_methods": [], "external_dependencies": {"modules": ["net.datafaker.service.RandomService", "IdNumberGeneratorPtBrUtil"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of a valid formatted CNPJ with multiple branches."}, {"name": "testCnpjValidUnformattedMultiBranch", "primary_tested": ["IdNumberGeneratorPtBrUtil.cnpj(BaseProviders,boolean,boolean,boolean)", "IdNumberGeneratorPtBrUtil.isCNPJValid(String)"], "associated_methods": [], "external_dependencies": {"modules": ["net.datafaker.service.RandomService", "IdNumberGeneratorPtBrUtil"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of a valid unformatted CNPJ with multiple branches."}, {"name": "testCnpjValidFormattedSingleBranch", "primary_tested": ["IdNumberGeneratorPtBrUtil.cnpj(BaseProviders,boolean,boolean,boolean)", "IdNumberGeneratorPtBrUtil.isCNPJValid(String)"], "associated_methods": [], "external_dependencies": {"modules": ["net.datafaker.service.RandomService", "IdNumberGeneratorPtBrUtil"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of a valid formatted CNPJ with a single branch."}, {"name": "testCnpjValidUnformattedSingleBranch", "primary_tested": ["IdNumberGeneratorPtBrUtil.cnpj(BaseProviders,boolean,boolean,boolean)", "IdNumberGeneratorPtBrUtil.isCNPJValid(String)"], "associated_methods": [], "external_dependencies": {"modules": ["net.datafaker.service.RandomService", "IdNumberGeneratorPtBrUtil"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of a valid unformatted CNPJ with a single branch."}, {"name": "testCnpjInvalidFormatted", "primary_tested": ["IdNumberGeneratorPtBrUtil.cnpj(BaseProviders,boolean,boolean,boolean)", "IdNumberGeneratorPtBrUtil.isCNPJValid(String)"], "associated_methods": [], "external_dependencies": {"modules": ["net.datafaker.service.RandomService", "IdNumberGeneratorPtBrUtil"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of an invalid formatted CNPJ."}, {"name": "testCnpjInvalidUnformatted", "primary_tested": ["IdNumberGeneratorPtBrUtil.cnpj(BaseProviders,boolean,boolean,boolean)", "IdNumberGeneratorPtBrUtil.isCNPJValid(String)"], "associated_methods": [], "external_dependencies": {"modules": ["net.datafaker.service.RandomService", "IdNumberGeneratorPtBrUtil"], "class_members": [{"name": "faker", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the generation of an invalid unformatted CNPJ."}]}, {"file_path": "src/test/java/net/datafaker/providers/base/Azure_subscriptionIdTest.java", "testclass_name": "Azure_subscriptionIdTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.assertj.core.api.Assertions.assertThat;"]}]