[{"uris": "src/test/java/net/datafaker/AbstractFakerTest.java.AbstractFakerTest.[Faker]getFaker()", "name": "getFaker", "arg_nums": 0, "params": [], "return_type": "Faker", "signature": "protected Faker getFaker()", "original_string": "    protected Faker getFaker() {\n        return new Faker();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/AbstractFakerTest.java", "class_name": "AbstractFakerTest", "class_uri": "src/test/java/net/datafaker/AbstractFakerTest.java.AbstractFakerTest", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Faker", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension.[void]beforeAll(ExtensionContext)", "name": "beforeAll", "arg_nums": 1, "params": [{"name": "context", "type": "ExtensionContext"}], "return_type": "void", "signature": "@Override\n  public void beforeAll(ExtensionContext context)", "original_string": "  @Override\n  public void beforeAll(ExtensionContext context) throws IOException, URISyntaxException {\n      String loggingConfig = new File(getClass().getResource(\"/logging.properties\").toURI()).getAbsolutePath();\n      System.setProperty(\"java.util.logging.config.file\", loggingConfig);\n      getLogManager().readConfiguration();\n\n      Logger.getLogger(context.getDisplayName()).info(() -> \"Starting tests (%s)\".formatted(memory()));\n  }", "default_arguments": null, "file": "src/test/java/net/datafaker/TestSetupExtension.java", "class_name": "TestSetupExtension", "class_uri": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension.[void]afterAll(ExtensionContext)", "name": "afterAll", "arg_nums": 1, "params": [{"name": "context", "type": "ExtensionContext"}], "return_type": "void", "signature": "@Override\n  public void afterAll(ExtensionContext context)", "original_string": "  @Override\n  public void afterAll(ExtensionContext context) {\n      Logger.getLogger(context.getDisplayName()).info(() -> \"Finished tests - %s (%s)\".formatted(verdict(context), memory()));\n  }", "default_arguments": null, "file": "src/test/java/net/datafaker/TestSetupExtension.java", "class_name": "TestSetupExtension", "class_uri": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension.[void]beforeEach(ExtensionContext)", "name": "beforeEach", "arg_nums": 1, "params": [{"name": "context", "type": "ExtensionContext"}], "return_type": "void", "signature": "@Override\n  public void beforeEach(ExtensionContext context)", "original_string": "  @Override\n  public void beforeEach(ExtensionContext context) {\n    TimeZone.setDefault(TimeZone.getTimeZone(\"Asia/Kaohsiung\"));\n    long testId = counter.incrementAndGet();\n    context.getStore(namespace).put(\"test-id\", testId);\n    context.getStore(namespace).put(\"original-thread-name\", Thread.currentThread().getName());\n\n    Thread.currentThread().setName(\"%s.%s#%d#\".formatted(context.getRequiredTestClass().getSimpleName(), context.getRequiredTestMethod().getName(), testId));\n\n    Logger.getLogger(context.getRequiredTestClass().getName()).info(() -> \"starting %s (%s)...\".formatted(context.getDisplayName(), memory()));\n    ThreadLocalLogHandler.start();\n  }", "default_arguments": null, "file": "src/test/java/net/datafaker/TestSetupExtension.java", "class_name": "TestSetupExtension", "class_uri": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension.[void]afterEach(ExtensionContext)", "name": "afterEach", "arg_nums": 1, "params": [{"name": "context", "type": "ExtensionContext"}], "return_type": "void", "signature": "@Override\n  public void afterEach(ExtensionContext context)", "original_string": "  @Override\n  public void afterEach(ExtensionContext context) {\n      ThreadLocalLogHandler.finish(context.getExecutionException().isPresent());\n\n      Logger.getLogger(context.getRequiredTestClass().getName())\n          .info(() -> \"finished %s - %s (%s)\".formatted(context.getDisplayName(), verdict(context), memory()));\n\n      String originalThreadName = context.getStore(namespace).remove(\"original-thread-name\", String.class);\n      Thread.currentThread().setName(originalThreadName);\n      context.getStore(namespace).remove(\"test-id\");\n      TimeZone.setDefault(TimeZone.getTimeZone(\"Asia/Kaohsiung\"));\n  }", "default_arguments": null, "file": "src/test/java/net/datafaker/TestSetupExtension.java", "class_name": "TestSetupExtension", "class_uri": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension", "attributes": {"modifiers": "@Override\n  public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension.[String]verdict(ExtensionContext)", "name": "verdict", "arg_nums": 1, "params": [{"name": "context", "type": "ExtensionContext"}], "return_type": "String", "signature": "private String verdict(ExtensionContext context)", "original_string": "  private String verdict(ExtensionContext context) {\n    return context.getExecutionException().isPresent() ?\n      (context.getExecutionException().get() instanceof TestAbortedException ? \"skipped\" : \"NOK\") :\n      \"OK\";\n  }", "default_arguments": null, "file": "src/test/java/net/datafaker/TestSetupExtension.java", "class_name": "TestSetupExtension", "class_uri": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension.[String]memory()", "name": "memory", "arg_nums": 0, "params": [], "return_type": "String", "signature": "private String memory()", "original_string": "  private String memory() {\n    long freeMemory = Runtime.getRuntime().freeMemory();\n    long maxMemory = Runtime.getRuntime().maxMemory();\n    long totalMemory = Runtime.getRuntime().totalMemory();\n    long usedMemory = totalMemory - freeMemory;\n    return \"memory used:\" + mb(usedMemory) + \", free:\" + mb(freeMemory) + \", total:\" + mb(totalMemory) + \", max:\" + mb(maxMemory);\n  }", "default_arguments": null, "file": "src/test/java/net/datafaker/TestSetupExtension.java", "class_name": "TestSetupExtension", "class_uri": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension.[long]mb(long)", "name": "mb", "arg_nums": 1, "params": [{"name": "bytes", "type": "long"}], "return_type": "long", "signature": "private long mb(long bytes)", "original_string": "  private long mb(long bytes) {\n    return bytes / 1024 / 1024;\n  }", "default_arguments": null, "file": "src/test/java/net/datafaker/TestSetupExtension.java", "class_name": "TestSetupExtension", "class_uri": "src/test/java/net/datafaker/TestSetupExtension.java.TestSetupExtension", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/LogFormatter.java.LogFormatter.[String]format(LogRecord)", "name": "format", "arg_nums": 1, "params": [{"name": "record", "type": "LogRecord"}], "return_type": "String", "signature": "@Override\n    public String format(LogRecord record)", "original_string": "    @Override\n    public String format(LogRecord record) {\n        return \"[%s] %s %s\".formatted(currentThread().getName(), time(record), super.format(record));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/LogFormatter.java", "class_name": "LogFormatter", "class_uri": "src/test/java/net/datafaker/LogFormatter.java.LogFormatter", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/LogFormatter.java.LogFormatter.[String]time(LogRecord)", "name": "time", "arg_nums": 1, "params": [{"name": "record", "type": "LogRecord"}], "return_type": "String", "signature": "private static String time(LogRecord record)", "original_string": "    private static String time(LogRecord record) {\n        return dt.format(record.getInstant().atZone(systemDefault()));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/LogFormatter.java", "class_name": "LogFormatter", "class_uri": "src/test/java/net/datafaker/LogFormatter.java.LogFormatter", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/Issue759Test.java.Issue759Test.[void]fakeSomeData(Faker)", "name": "fakeSomeData", "arg_nums": 1, "params": [{"name": "faker", "type": "Faker"}], "return_type": "void", "signature": "public static void fakeSomeData(Faker faker)", "original_string": "    public static void fakeSomeData(Faker faker) {\n        String state = faker.address().stateAbbr();\n        String zipCode = faker.address().zipCodeByState(state);\n        try {\n            String county = faker.address().countyByZipCode(zipCode);\n            assertThat(county).isNotEqualTo(zipCode);\n        } catch (RuntimeException expected) {\n            assertThat(expected).hasMessageStartingWith(\"County is not configured for postcode \" + zipCode);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/Issue759Test.java", "class_name": "Issue759Test", "class_uri": "src/test/java/net/datafaker/Issue759Test.java.Issue759Test", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler.[void]publish(LogRecord)", "name": "publish", "arg_nums": 1, "params": [{"name": "record", "type": "LogRecord"}], "return_type": "void", "signature": "@Override\n    public void publish(LogRecord record)", "original_string": "    @Override\n    public void publish(LogRecord record) {\n        if (logs.get() != null) {\n            logs.get().add(record);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/ThreadLocalLogHandler.java", "class_name": "ThreadLocalLogHandler", "class_uri": "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler.[void]flush()", "name": "flush", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    public void flush()", "original_string": "    @Override\n    public void flush() {\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/ThreadLocalLogHandler.java", "class_name": "ThreadLocalLogHandler", "class_uri": "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler.[void]close()", "name": "close", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    public void close()", "original_string": "    @Override\n    public void close() throws SecurityException {\n        logs.remove();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/ThreadLocalLogHandler.java", "class_name": "ThreadLocalLogHandler", "class_uri": "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler.[void]start()", "name": "start", "arg_nums": 0, "params": [], "return_type": "void", "signature": "static void start()", "original_string": "    static void start() {\n        logs.set(new ArrayList<>());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/ThreadLocalLogHandler.java", "class_name": "ThreadLocalLogHandler", "class_uri": "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler.[void]finish(boolean)", "name": "finish", "arg_nums": 1, "params": [{"name": "writeLogs", "type": "boolean"}], "return_type": "void", "signature": "static void finish(boolean writeLogs)", "original_string": "    static void finish(boolean writeLogs) {\n        if (writeLogs) {\n            List<LogRecord> threadLogs = logs.get();\n            if (!threadLogs.isEmpty()) {\n                consoleHandler.publish(summaryLog(threadLogs));\n                for (LogRecord log : threadLogs) {\n                    consoleHandler.publish(log);\n                }\n            }\n        }\n        logs.remove();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/ThreadLocalLogHandler.java", "class_name": "ThreadLocalLogHandler", "class_uri": "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler.[LogRecord]summaryLog(List<LogRecord>)", "name": "summaryLog", "arg_nums": 1, "params": [{"name": "logs", "type": "List<LogRecord>"}], "return_type": "LogRecord", "signature": "private static LogRecord summaryLog(List<LogRecord> logs)", "original_string": "    private static LogRecord summaryLog(List<LogRecord> logs) {\n        LogRecord record = new LogRecord(INFO, \"Written %d logs during the test:\".formatted(logs.size()));\n        record.setLoggerName(ThreadLocalLogHandler.class.getName());\n        return record;\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/ThreadLocalLogHandler.java", "class_name": "ThreadLocalLogHandler", "class_uri": "src/test/java/net/datafaker/ThreadLocalLogHandler.java.ThreadLocalLogHandler", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "LogRecord", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        ProvidersDocsGenerator providersDocsGenerator = new ProvidersDocsGenerator();\n        providersDocsGenerator.initSubtypes();\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(DESTINATION_PLACE_OF_PROVIDERS_FILE))) {\n            providersDocsGenerator.constructHeaderInProvidersFile(writer);\n            providersDocsGenerator.generateProvidersDocs(writer);\n            writer.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        System.out.println(\"Written documentation to \" + DESTINATION_PLACE_OF_PROVIDERS_FILE);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java", "class_name": "ProvidersDocsGenerator", "class_uri": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[void]initSubtypes()", "name": "initSubtypes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void initSubtypes()", "original_string": "    private void initSubtypes() {\n        subTypes.addAll(\n            reflections.get(SubTypes.of(AbstractProvider.class).asClass())\n                .stream()\n                .filter(t -> !providersToExcludeFromGeneration.contains(t.getSimpleName()))\n                .collect(Collectors.toSet()));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java", "class_name": "ProvidersDocsGenerator", "class_uri": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[void]generateProvidersDocs(BufferedWriter)", "name": "generateProvidersDocs", "arg_nums": 1, "params": [{"name": "writer", "type": "BufferedWriter"}], "return_type": "void", "signature": "void generateProvidersDocs(BufferedWriter writer)", "original_string": "    void generateProvidersDocs(BufferedWriter writer) throws IOException {\n        for (Class<?> clazz : subTypes) {\n            String groupName = extractGroupName(clazz);\n            String comment = extractCommentFromJavadoc(\"src/main/java/net/datafaker/providers/\" + groupName + \"/\" + clazz.getSimpleName() + \".java\");\n            writer.write(Column.generateRow(' ', clazz.getSimpleName(), comment, formatGroupName(groupName)));\n        }\n        System.out.println(\"Providers without '@since' tag: \" + fakersWithoutSinceTag);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java", "class_name": "ProvidersDocsGenerator", "class_uri": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[String]extractGroupName(Class<?>)", "name": "extractGroupName", "arg_nums": 1, "params": [{"name": "clazz", "type": "Class<?>"}], "return_type": "String", "signature": "private String extractGroupName(Class<?> clazz)", "original_string": "    private String extractGroupName(Class<?> clazz) {\n        // `packageName` should be such format: net.datafaker.providers.<groupName> (e.g. base, sport, movie)\n        String packageName = clazz.getPackage().getName();\n        // And just splitting by '.' we're getting groupName (e.g. base, sport, movie)\n        return packageName.split(\"\\\\.\")[3];\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java", "class_name": "ProvidersDocsGenerator", "class_uri": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[String]extractCommentFromJavadoc(String)", "name": "extractCommentFromJavadoc", "arg_nums": 1, "params": [{"name": "filePath", "type": "String"}], "return_type": "String", "signature": "private String extractCommentFromJavadoc(String filePath)", "original_string": "    private String extractCommentFromJavadoc(String filePath) {\n        try {\n            final File file = new File(filePath);\n\n            Optional<CommentsCollection> commentsCollection =\n                parser.parse(file).getCommentsCollection();\n\n            if (commentsCollection.isEmpty()) {\n                fakersWithoutSinceTag.add(filePath);\n                return \"\";\n            }\n\n            Optional<JavadocComment> javadocComments = commentsCollection.get().getJavadocComments()\n                .stream()\n                .findFirst();\n\n            if (javadocComments.isEmpty()) {\n                fakersWithoutSinceTag.add(filePath);\n                return \"\";\n            }\n\n            String comment = javadocComments.get().getContent();\n            boolean containsSinceTag = comment.contains(\"@since\");\n\n            if (!containsSinceTag) {\n                fakersWithoutSinceTag.add(filePath);\n            }\n\n            return comment;\n        } catch (FileNotFoundException e) {\n            throw new UncheckedIOException(e);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java", "class_name": "ProvidersDocsGenerator", "class_uri": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThe implementation assumes that the JavaDoc with the '@since' tag\nwill always be at the very beginning of a class.\n\n@param filePath              Path to the Faker(provider) to be searched\n@return Entire first JavaDoc in the class\n"}, {"uris": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[void]constructHeaderInProvidersFile(Writer)", "name": "constructHeaderInProvidersFile", "arg_nums": 1, "params": [{"name": "writer", "type": "Writer"}], "return_type": "void", "signature": "private void constructHeaderInProvidersFile(Writer writer)", "original_string": "    private void constructHeaderInProvidersFile(Writer writer) throws IOException {\n        final String header = TextBlock.HEADER.getText();\n        final String groupDescriptions = TextBlock.GROUP_DESCRIPTIONS.getText();\n        final String providersPerVersionTable = providersPerVersionTable();\n        final String totalProviders = \"\\nDatafaker comes with a total of \" + subTypes.size() + \" data providers:\" + \"\\n\\n\";\n\n        writer.write(header);\n        writer.write(groupDescriptions);\n        writer.write(providersPerVersionTable);\n        writer.write(totalProviders);\n        writer.write(Column.generateHeaderRow(' '));\n        writer.write(Column.generateEmptyRow('-'));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java", "class_name": "ProvidersDocsGenerator", "class_uri": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nWrites header and table header to new 'providers.md'\n"}, {"uris": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[String]providersPerVersionTable()", "name": "providersPerVersionTable", "arg_nums": 0, "params": [], "return_type": "String", "signature": "private String providersPerVersionTable()", "original_string": "    private String providersPerVersionTable() {\n        Map<String, Integer> providersPerVersion = extractProvidersPerVersion();\n\n        StringBuilder sb = new StringBuilder()\n            .append(\"\\nNumber of providers per Datafaker version\\n\")\n            .append(\"\\n| Version | Number of new providers | Total number of providers |\")\n            .append(\"\\n|---------|-------------------------|---------------------------|\\n\");\n\n        int cumulativeCountOfProvidersPerVersion = 0;\n        for (Map.Entry<String, Integer> entry : providersPerVersion.entrySet()) {\n            cumulativeCountOfProvidersPerVersion += entry.getValue();\n            sb.append(\"| \").append(entry.getKey()).append(\" | \")\n                .append(entry.getValue().toString()).append(\" | \")\n                .append(cumulativeCountOfProvidersPerVersion).append(\" |\\n\");\n        }\n\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java", "class_name": "ProvidersDocsGenerator", "class_uri": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[Map<String, Integer>]extractProvidersPerVersion()", "name": "extractProvidersPerVersion", "arg_nums": 0, "params": [], "return_type": "Map<String, Integer>", "signature": "private Map<String, Integer> extractProvidersPerVersion()", "original_string": "    private Map<String, Integer> extractProvidersPerVersion() {\n        Map<String, Integer> providersPerVersion = new TreeMap<>(Comparator.naturalOrder());\n\n        for (Class<?> clazz : subTypes) {\n            String groupName = extractGroupName(clazz);\n            String comment = extractCommentFromJavadoc(\"src/main/java/net/datafaker/providers/\" + groupName + \"/\" + clazz.getSimpleName() + \".java\");\n            String sinceTag = Column.SINCE.getValue(comment);\n\n            if (!providersPerVersion.containsKey(sinceTag)) {\n                providersPerVersion.put(sinceTag, 0);\n            }\n            providersPerVersion.computeIfPresent(sinceTag, (key, value) -> value + 1);\n        }\n\n        return providersPerVersion;\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java", "class_name": "ProvidersDocsGenerator", "class_uri": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Map<String, Integer>", "classes": []}, "docstring": "\nSearching through all providers {@link subTypes}, getting since tag, and building\n{@link TreeMap} with count of each since tag (version).\n@return {@link TreeMap} with count of providers per each version\n"}, {"uris": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator.[String]formatGroupName(String)", "name": "formatGroupName", "arg_nums": 1, "params": [{"name": "groupName", "type": "String"}], "return_type": "String", "signature": "private String formatGroupName(String groupName)", "original_string": "    private String formatGroupName(String groupName) {\n        return Character.toUpperCase(groupName.charAt(0)) + groupName.substring(1);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java", "class_name": "ProvidersDocsGenerator", "class_uri": "src/test/java/net/datafaker/script/ProvidersDocsGenerator.java.ProvidersDocsGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/script/RandomImageGenerator.java.RandomImageGenerator.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        Faker faker = new Faker();\n\n        System.out.println(\"PNG Image:\");\n        System.out.println(faker.image().base64PNG());\n        System.out.println(\"JPG Image:\");\n        System.out.println(faker.image().base64JPEG());\n        System.out.println(\"GIF Image:\");\n        System.out.println(faker.image().base64GIF());\n        System.out.println(\"SVG Image:\");\n        System.out.println(faker.image().base64SVG());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/RandomImageGenerator.java", "class_name": "RandomImageGenerator", "class_uri": "src/test/java/net/datafaker/script/RandomImageGenerator.java.RandomImageGenerator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) throws FileNotFoundException {\n        new ProviderGenerator().generateProvider();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProviderGenerator.java", "class_name": "ProviderGenerator", "class_uri": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator.[void]generateProvider()", "name": "generateProvider", "arg_nums": 0, "params": [], "return_type": "void", "signature": "void generateProvider()", "original_string": "    void generateProvider() throws FileNotFoundException {\n        File dir = new File(\"src/main/resources/en\");\n\n        File[] files = dir.listFiles((dir1, name) -> name.toLowerCase().contains(\"cowboy_bebop.yml\"));\n\n        List<File> fileList = Arrays.asList(files);\n        Collections.shuffle(fileList);\n        List<File> filesToProcess = fileList.stream().limit(5).toList();\n\n        System.out.println(files.length + \" files\");\n\n        for (File file : filesToProcess) {\n            final Map<String, Object> valuesMap = new Yaml().loadAs(new FileReader(file), Map.class);\n\n            Map<String, Object> en = (Map<String, Object>) valuesMap.get(\"en\");\n            Map<String, Object> faker = (Map<String, Object>) en.get(\"faker\");\n\n            System.out.println(file);\n            processFaker(file, faker);\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProviderGenerator.java", "class_name": "ProviderGenerator", "class_uri": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator.[void]processFaker(File,Map<String, Object>)", "name": "processFaker", "arg_nums": 2, "params": [{"name": "file", "type": "File"}, {"name": "faker", "type": "Map<String, Object>"}], "return_type": "void", "signature": "private void processFaker(File file, Map<String, Object> faker)", "original_string": "    private void processFaker(File file, Map<String, Object> faker) {\n        String key = (String) faker.keySet().toArray()[0];\n        Map<String, Object> subject = (Map<String, Object>) faker.get(key);\n\n        // Special case for games\n        if (\"games\".equals(key)) {\n            String key2 = subject.keySet().iterator().next();\n            subject = (Map<String, Object>) subject.get(key2);\n            key = key + \".\" + key2;\n        }\n\n        Set<String> strings = subject.keySet();\n\n        createCreator(file, key, strings, providerType);\n        createTest(file, strings, providerType);\n        createFakerRegistration(file);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProviderGenerator.java", "class_name": "ProviderGenerator", "class_uri": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator.[void]createFakerRegistration(File)", "name": "createFakerRegistration", "arg_nums": 1, "params": [{"name": "file", "type": "File"}], "return_type": "void", "signature": "private void createFakerRegistration(File file)", "original_string": "    private void createFakerRegistration(File file) {\n        String className = toJavaConvention(file.getName().substring(0, file.getName().indexOf(\".\")));\n        String methodName = StringUtils.uncapitalize(toJavaConvention(className));\n\n        System.out.println();\n        System.out.println(\"default \" + className + \" \" + methodName + \"() {\");\n        System.out.println(\"    return getProvider(\" + className + \".class, \" + className + \"::new);\");\n        System.out.println(\"}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProviderGenerator.java", "class_name": "ProviderGenerator", "class_uri": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator.[void]createCreator(File,String,Set<String>,ProviderType)", "name": "createCreator", "arg_nums": 4, "params": [{"name": "file", "type": "File"}, {"name": "key", "type": "String"}, {"name": "strings", "type": "Set<String>"}, {"name": "providerType", "type": "ProviderType"}], "return_type": "void", "signature": "private void createCreator(File file, String key, Set<String> strings, ProviderType providerType)", "original_string": "    private void createCreator(File file, String key, Set<String> strings, ProviderType providerType) {\n        String className = toJavaConvention(file.getName().substring(0, file.getName().indexOf(\".\")));\n\n        System.out.println(\"package \" + providerType.getPackageName() + \";\");\n        System.out.println();\n        System.out.println(\"import \" + AbstractProvider.class.getName() + \";\");\n        System.out.println();\n        System.out.println(\"/**\");\n        System.out.println(\" * @since 2.0.2\");\n        System.out.println(\" */\");\n        System.out.println(\"public class \" + className + \" extends \" + AbstractProvider.class.getSimpleName() + \"<\" + providerType.getProviderRegistrySimpleName() + \"> {\");\n        System.out.println();\n        System.out.println(\"    protected \" + className + \"(\" + providerType.getProviderRegistrySimpleName() + \" faker) {\");\n        System.out.println(\"        super(faker);\");\n        System.out.println(\"    }\");\n        System.out.println();\n\n        for (String string : strings) {\n            String methodName = StringUtils.uncapitalize(toJavaConvention(string));\n\n            System.out.println(\"    public String \" + methodName + \"() {\\n\" +\n                \"        return resolve(\\\"\" + key + \".\" + string + \"\\\");\\n\" +\n                \"    }\");\n            System.out.println();\n        }\n\n        System.out.println(\"}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProviderGenerator.java", "class_name": "ProviderGenerator", "class_uri": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator.[void]createTest(File,Set<String>,ProviderType)", "name": "createTest", "arg_nums": 3, "params": [{"name": "file", "type": "File"}, {"name": "strings", "type": "Set<String>"}, {"name": "providerType", "type": "ProviderType"}], "return_type": "void", "signature": "private void createTest(File file, Set<String> strings, ProviderType providerType)", "original_string": "    private void createTest(File file, Set<String> strings, ProviderType providerType) {\n        String className = toJavaConvention(file.getName().substring(0, file.getName().indexOf(\".\")));\n        // replace the first letter with a lowercase letter\n        String methodName = StringUtils.uncapitalize(toJavaConvention(className));\n\n        System.out.println(\"package \" + providerType.getPackageName() + \";\");\n        System.out.println();\n        System.out.println(\"import \" + Test.class.getName() + \";\");\n        System.out.println(\"import static \" + Assertions.class.getName() + \".assertThat;\");\n\n        System.out.println();\n        System.out.println(\"class \" + className + \"Test extends \" + providerType.getTestSuperclassSimpleName() + \" {\");\n        System.out.println();\n\n        for (String string : strings) {\n            String testMethodName = StringUtils.uncapitalize(toJavaConvention(string));\n\n            System.out.println(\"    @\" + Test.class.getSimpleName());\n            System.out.println(\"    void \" + testMethodName + \"() {\");\n            System.out.println(\"        assertThat(faker.\" + methodName + \"().\" + testMethodName + \"()).isNotEmpty();\");\n            System.out.println(\"    }\");\n            System.out.println();\n        }\n\n        System.out.println(\"}\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProviderGenerator.java", "class_name": "ProviderGenerator", "class_uri": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator.[String]toJavaConvention(String)", "name": "toJavaConvention", "arg_nums": 1, "params": [{"name": "baseName", "type": "String"}], "return_type": "String", "signature": "private String toJavaConvention(String baseName)", "original_string": "    private String toJavaConvention(String baseName) {\n\n        // replace underscores with spaces\n        String withoutUnderscore = baseName.replace(\"_\", \" \");\n        // for every word in the name, capitalize the first letter\n        String capitalizedWords = WordUtils.capitalize(withoutUnderscore);\n        // remove all spaces\n        return capitalizedWords.replace(\" \", \"\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/script/ProviderGenerator.java", "class_name": "ProviderGenerator", "class_uri": "src/test/java/net/datafaker/script/ProviderGenerator.java.ProviderGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.BloodPressure.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String name()", "original_string": "    @Override\n    public String name() {\n        return \"Mean Blood Pressure\";\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "BloodPressure", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.BloodPressure", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.BloodPressure.[String]value()", "name": "value", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String value()", "original_string": "    @Override\n    public String value() {\n        return new BaseFaker().random().nextInt(60, 180) + \"\";\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "BloodPressure", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.BloodPressure", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.BloodPressure.[String]range()", "name": "range", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String range()", "original_string": "    @Override\n    public String range() {\n        return \"\";\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "BloodPressure", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.BloodPressure", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.BloodPressure.[String]unit()", "name": "unit", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String unit()", "original_string": "    @Override\n    public String unit() {\n        return \"mm Hg\";\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "BloodPressure", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.BloodPressure", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.Glucose.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String name()", "original_string": "    @Override\n    public String name() {\n        return \"Glucose\";\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "Glucose", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.Glucose", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.Glucose.[String]value()", "name": "value", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String value()", "original_string": "    @Override\n    public String value() {\n        return \"%.1f\".formatted(new BaseFaker().random().nextDouble(3.2, 5.5));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "Glucose", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.Glucose", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.Glucose.[String]range()", "name": "range", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String range()", "original_string": "    @Override\n    public String range() {\n        return \"3.2-5.5\";\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "Glucose", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.Glucose", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.Glucose.[String]unit()", "name": "unit", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String unit()", "original_string": "    @Override\n    public String unit() {\n        return \"mmol/L\";\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "Glucose", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.Glucose", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.Temperature.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String name()", "original_string": "    @Override\n    public String name() {\n        return \"Temperature\";\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "Temperature", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.Temperature", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.Temperature.[String]value()", "name": "value", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String value()", "original_string": "    @Override\n    public String value() {\n        return new BaseFaker().random().nextInt(30, 50) + \"\";\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "Temperature", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.Temperature", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.Temperature.[String]range()", "name": "range", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String range()", "original_string": "    @Override\n    public String range() {\n        return \"\";\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "Temperature", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.Temperature", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.Temperature.[String]unit()", "name": "unit", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String unit()", "original_string": "    @Override\n    public String unit() {\n        return \"degrees C\";\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "Temperature", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.Temperature", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.Data.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "String name()", "original_string": "    String name();", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "Data", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.Data", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.Data.[String]value()", "name": "value", "arg_nums": 0, "params": [], "return_type": "String", "signature": "String value()", "original_string": "    String value();", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "Data", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.Data", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.Data.[String]range()", "name": "range", "arg_nums": 0, "params": [], "return_type": "String", "signature": "String range()", "original_string": "    String range();", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "Data", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.Data", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/sequence/Data.java.Data.[String]unit()", "name": "unit", "arg_nums": 0, "params": [], "return_type": "String", "signature": "String unit()", "original_string": "    String unit();", "default_arguments": null, "file": "src/test/java/net/datafaker/sequence/Data.java", "class_name": "Data", "class_uri": "src/test/java/net/datafaker/sequence/Data.java.Data", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RobinTest.java.RobinTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Robin robin = faker.robin();\n        return List.of(TestSpec.of(robin::quote, \"robin.quotes\", \"^(\\\\w+\\\\.?-?'?\\\\s?)+(\\\\(?)?(\\\\w+\\\\s?\\\\.?)+(\\\\))?$\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RobinTest.java", "class_name": "RobinTest", "class_uri": "src/test/java/net/datafaker/providers/base/RobinTest.java.RobinTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/HololiveTest.java.HololiveTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Hololive hl = faker.hololive();\n        return List.of(TestSpec.of(hl::talent, \"hololive.talent\", \"^[A-Za-z '+-]+$\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/HololiveTest.java", "class_name": "HololiveTest", "class_uri": "src/test/java/net/datafaker/providers/base/HololiveTest.java.HololiveTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NigeriaTest.java.NigeriaTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Nigeria nigeria = faker.nigeria();\n        return List.of(TestSpec.of(nigeria::places, \"nigeria.places\"),\n                TestSpec.of(nigeria::food, \"nigeria.food\"),\n                TestSpec.of(nigeria::name, \"nigeria.name\"),\n                TestSpec.of(nigeria::schools, \"nigeria.schools\"),\n                TestSpec.of(nigeria::celebrities, \"nigeria.celebrities\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NigeriaTest.java", "class_name": "NigeriaTest", "class_uri": "src/test/java/net/datafaker/providers/base/NigeriaTest.java.NigeriaTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/HipsterTest.java.HipsterTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Hipster hipster = faker.hipster();\n        return List.of(TestSpec.of(hipster::word, \"hipster.words\", \"^([\\\\w-+&']+ ?)+$\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/HipsterTest.java", "class_name": "HipsterTest", "class_uri": "src/test/java/net/datafaker/providers/base/HipsterTest.java.HipsterTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CompanyTest.java.CompanyTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(company::suffix, \"company.suffix\", \"[A-Za-z ]+\"),\n            TestSpec.of(company::industry, \"company.industry\", \"(\\\\w+([ ,&/-]{1,3})?){1,4}+\"),\n            TestSpec.of(company::profession, \"company.profession\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CompanyTest.java", "class_name": "CompanyTest", "class_uri": "src/test/java/net/datafaker/providers/base/CompanyTest.java.CompanyTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ConstructionTest.java.ConstructionTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Construction construction = faker.construction();\n        return List.of(TestSpec.of(construction::heavyEquipment, \"construction.heavy_equipment\"),\n                TestSpec.of(construction::materials, \"construction.materials\"),\n                TestSpec.of(construction::subcontractCategories, \"construction.subcontract_categories\"),\n                TestSpec.of(construction::roles, \"construction.roles\"),\n                TestSpec.of(construction::trades, \"construction.trades\"),\n                TestSpec.of(construction::standardCostCodes, \"construction.standard_cost_codes\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ConstructionTest.java", "class_name": "ConstructionTest", "class_uri": "src/test/java/net/datafaker/providers/base/ConstructionTest.java.ConstructionTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AustraliaTest.java.AustraliaTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Australia australia = faker.australia();\n        return List.of(TestSpec.of(australia::locations, \"australia.locations\"),\n            TestSpec.of(australia::animals, \"australia.animals\"),\n            TestSpec.of(australia::states, \"australia.states\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AustraliaTest.java", "class_name": "AustraliaTest", "class_uri": "src/test/java/net/datafaker/providers/base/AustraliaTest.java.AustraliaTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DogTest.java.DogTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Dog dog = faker.dog();\n        return List.of(TestSpec.of(dog::name, \"creature.dog.name\"),\n            TestSpec.of(dog::breed, \"creature.dog.breed\"),\n            TestSpec.of(dog::sound, \"creature.dog.sound\"),\n            TestSpec.of(dog::memePhrase, \"creature.dog.meme_phrase\"),\n            TestSpec.of(dog::age, \"creature.dog.age\"),\n            TestSpec.of(dog::gender, \"creature.dog.gender\"),\n            TestSpec.of(dog::coatLength, \"creature.dog.coat_length\"),\n            TestSpec.of(dog::size, \"creature.dog.size\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DogTest.java", "class_name": "DogTest", "class_uri": "src/test/java/net/datafaker/providers/base/DogTest.java.DogTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SuperheroTest.java.SuperheroTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Superhero superhero = faker.superhero();\n        return List.of(TestSpec.of(superhero::prefix, \"superhero.prefix\"),\n            TestSpec.of(superhero::suffix, \"superhero.suffix\"),\n            TestSpec.of(superhero::power, \"superhero.power\"),\n            TestSpec.of(superhero::descriptor, \"superhero.descriptor\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SuperheroTest.java", "class_name": "SuperheroTest", "class_uri": "src/test/java/net/datafaker/providers/base/SuperheroTest.java.SuperheroTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DeviceTest.java.DeviceTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Device device = faker.device();\n        return List.of(TestSpec.of(device::modelName, \"device.model_name\"),\n                TestSpec.of(device::platform, \"device.platform\"),\n                TestSpec.of(device::manufacturer, \"device.manufacturer\"),\n                TestSpec.of(device::serial, \"device.serial\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DeviceTest.java", "class_name": "DeviceTest", "class_uri": "src/test/java/net/datafaker/providers/base/DeviceTest.java.DeviceTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BusinessTest.java.BusinessTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(business::creditCardType, \"business.credit_card_types\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BusinessTest.java", "class_name": "BusinessTest", "class_uri": "src/test/java/net/datafaker/providers/base/BusinessTest.java.BusinessTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AnimalTest.java.AnimalTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(animal::name, \"creature.animal.name\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AnimalTest.java", "class_name": "AnimalTest", "class_uri": "src/test/java/net/datafaker/providers/base/AnimalTest.java.AnimalTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TireTest.java.TireTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(tire::code, \"tire.code\", CODE_PATTERN),\n                TestSpec.of(tire::vehicleType, \"tire.vehicle_type\", \"[A-Z]{1,2}\"),\n                TestSpec.of(tire::width, \"tire.width\", \"\\\\d{3}\"),\n                TestSpec.of(tire::aspectRatio, \"tire.aspect_ratio\", \"\\\\d{2}\"),\n                TestSpec.of(tire::construction, \"tire.construction\"),\n                TestSpec.of(tire::rimSize, \"tire.rim_size\", \"\\\\d{2}\\\\.?\\\\d?\"),\n                TestSpec.of(tire::loadIndex, \"tire.load_index\", \"\\\\d{2,3}\"),\n                TestSpec.of(tire::speedrating, \"tire.speed_rating\", \"\\\\(?[A-Z][\\\\d)]?\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TireTest.java", "class_name": "TireTest", "class_uri": "src/test/java/net/datafaker/providers/base/TireTest.java.TireTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ArtistTest.java.ArtistTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Artist artist = faker.artist();\n        return List.of(TestSpec.of(artist::name, \"artist.names\", \"(\\\\w+ ?){1,2}\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ArtistTest.java", "class_name": "ArtistTest", "class_uri": "src/test/java/net/datafaker/providers/base/ArtistTest.java.ArtistTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java.BaseFakerTest.[void]resetMocks()", "name": "resetMocks", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    @SuppressWarnings(\"EmptyTryBlock\")\n    final void resetMocks()", "original_string": "    @BeforeEach\n    @SuppressWarnings(\"EmptyTryBlock\")\n    final void resetMocks() throws Exception {\n        try (AutoCloseable ignored = MockitoAnnotations.openMocks(this)) {\n            // Need to reset all @Spy and @Mock fields\n            // because all test methods share the same test class instance due to @TestInstance(PER_CLASS)\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java", "class_name": "BaseFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java.BaseFakerTest", "attributes": {"modifiers": "@BeforeEach\n    @SuppressWarnings(\"EmptyTryBlock\")\n    final", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["@SuppressWarnings(\"EmptyTryBlock\")", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java.BaseFakerTest.[T]getFaker()", "name": "getFaker", "arg_nums": 0, "params": [], "return_type": "T", "signature": "@SuppressWarnings(\"unchecked\")\n    protected T getFaker()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    protected T getFaker() {\n        return (T) new BaseFaker();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java", "class_name": "BaseFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java.BaseFakerTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    protected", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "protected"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java.BaseFakerTest.[List<String>]getBaseList(String)", "name": "getBaseList", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "List<String>", "signature": "protected List<String> getBaseList(String key)", "original_string": "    protected List<String> getBaseList(String key) {\n        return faker.fakeValuesService().fetchObject(key, faker.getContext());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java", "class_name": "BaseFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java.BaseFakerTest", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java.BaseFakerTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "protected Collection<TestSpec> providerListTest()", "original_string": "    protected Collection<TestSpec> providerListTest() {\n        // dummy test since parameterized test requires non-empty collection\n        return Set.of(new TestSpec(null, null, null));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java", "class_name": "BaseFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/BaseFakerTest.java.BaseFakerTest", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Lorem_sentenceTest.java.Lorem_sentenceTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        BaseProviders faker = new BaseFaker();\n        lorem = new Lorem(faker);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Lorem_sentenceTest.java", "class_name": "Lorem_sentenceTest", "class_uri": "src/test/java/net/datafaker/providers/base/Lorem_sentenceTest.java.Lorem_sentenceTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CoinTest.java.CoinTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Coin coin = faker.coin();\n        return List.of(TestSpec.of(coin::flip, \"coin.flip\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CoinTest.java", "class_name": "CoinTest", "class_uri": "src/test/java/net/datafaker/providers/base/CoinTest.java.CoinTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AncientTest.java.AncientTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Ancient ancient = faker.ancient();\n        return List.of(TestSpec.of(ancient::god, \"ancient.god\"),\n            TestSpec.of(ancient::primordial, \"ancient.primordial\"),\n            TestSpec.of(ancient::titan, \"ancient.titan\"),\n            TestSpec.of(ancient::hero, \"ancient.hero\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AncientTest.java", "class_name": "AncientTest", "class_uri": "src/test/java/net/datafaker/providers/base/AncientTest.java.AncientTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CatTest.java.CatTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Cat cat = faker.cat();\n        return List.of(TestSpec.of(cat::name, \"creature.cat.name\"),\n            TestSpec.of(cat::breed, \"creature.cat.breed\"),\n            TestSpec.of(cat::registry, \"creature.cat.registry\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CatTest.java", "class_name": "CatTest", "class_uri": "src/test/java/net/datafaker/providers/base/CatTest.java.CatTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CosmereTest.java.CosmereTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Cosmere cosmere = faker.cosmere();\n        return List.of(TestSpec.of(cosmere::aons, \"cosmere.aons\"),\n                TestSpec.of(cosmere::shardWorlds, \"cosmere.shard_worlds\"),\n                TestSpec.of(cosmere::shards, \"cosmere.shards\"),\n                TestSpec.of(cosmere::surges, \"cosmere.surges\"),\n                TestSpec.of(cosmere::knightsRadiant, \"cosmere.knights_radiant\"),\n                TestSpec.of(cosmere::metals, \"cosmere.metals\"),\n                TestSpec.of(cosmere::allomancers, \"cosmere.allomancers\"),\n                TestSpec.of(cosmere::feruchemists, \"cosmere.feruchemists\"),\n                TestSpec.of(cosmere::heralds, \"cosmere.heralds\"),\n                TestSpec.of(cosmere::sprens, \"cosmere.sprens\")\n                );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CosmereTest.java", "class_name": "CosmereTest", "class_uri": "src/test/java/net/datafaker/providers/base/CosmereTest.java.CosmereTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MilitaryTest.java.MilitaryTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Military military = faker.military();\n        return List.of(TestSpec.of(military::armyRank, \"military.army_rank\"),\n                TestSpec.of(military::marinesRank, \"military.marines_rank\"),\n                TestSpec.of(military::navyRank, \"military.navy_rank\"),\n                TestSpec.of(military::airForceRank, \"military.air_force_rank\"),\n                TestSpec.of(military::dodPaygrade, \"military.dod_paygrade\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MilitaryTest.java", "class_name": "MilitaryTest", "class_uri": "src/test/java/net/datafaker/providers/base/MilitaryTest.java.MilitaryTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayTest.java.DateAndTime_birthdayTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        dateAndTime = new DateAndTime(new BaseFaker());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayTest.java", "class_name": "DateAndTime_birthdayTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayTest.java.DateAndTime_birthdayTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ApplianceTest.java.ApplianceTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Appliance appliance = faker.appliance();\n        return List.of(TestSpec.of(appliance::brand, \"appliance.brand\", \"[A-Za-z .-]+\"),\n                TestSpec.of(appliance::equipment, \"appliance.equipment\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ApplianceTest.java", "class_name": "ApplianceTest", "class_uri": "src/test/java/net/datafaker/providers/base/ApplianceTest.java.ApplianceTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MusicTest.java.MusicTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Music music = faker.music();\n        return List.of(TestSpec.of(music::instrument, \"music.instruments\", \"\\\\w+ ?\\\\w+\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MusicTest.java", "class_name": "MusicTest", "class_uri": "src/test/java/net/datafaker/providers/base/MusicTest.java.MusicTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CommerceTest.java.CommerceTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(commerce::material, \"commerce.product_name.material\"),\n            TestSpec.of(commerce::brand, \"commerce.brand\"),\n            TestSpec.of(commerce::vendor, \"commerce.vendor\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CommerceTest.java", "class_name": "CommerceTest", "class_uri": "src/test/java/net/datafaker/providers/base/CommerceTest.java.CommerceTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SubscriptionTest.java.SubscriptionTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Subscription subscription = faker.subscription();\n        return List.of(TestSpec.of(subscription::plans, \"subscription.plans\"),\n                TestSpec.of(subscription::statuses, \"subscription.statuses\"),\n                TestSpec.of(subscription::paymentMethods, \"subscription.payment_methods\"),\n                TestSpec.of(subscription::subscriptionTerms, \"subscription.subscription_terms\"),\n                TestSpec.of(subscription::paymentTerms, \"subscription.payment_terms\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SubscriptionTest.java", "class_name": "SubscriptionTest", "class_uri": "src/test/java/net/datafaker/providers/base/SubscriptionTest.java.SubscriptionTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/OlympicSportTest.java.OlympicSportTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        OlympicSport olympicSport = faker.olympicSport();\n        return List.of(TestSpec.of(olympicSport::summerOlympics, \"olympic_sport.summer_olympics\"),\n                TestSpec.of(olympicSport::winterOlympics, \"olympic_sport.winter_olympics\"),\n                TestSpec.of(olympicSport::summerParalympics, \"olympic_sport.summer_paralympics\"),\n                TestSpec.of(olympicSport::winterParalympics, \"olympic_sport.winter_paralympics\"),\n                TestSpec.of(olympicSport::ancientOlympics, \"olympic_sport.ancient_olympics\"),\n                TestSpec.of(olympicSport::unusual, \"olympic_sport.unusual\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/OlympicSportTest.java", "class_name": "OlympicSportTest", "class_uri": "src/test/java/net/datafaker/providers/base/OlympicSportTest.java.OlympicSportTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/HouseTest.java.HouseTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        House house = faker.house();\n        return List.of(TestSpec.of(house::furniture, \"house.furniture\"),\n            TestSpec.of(house::room, \"house.rooms\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/HouseTest.java", "class_name": "HouseTest", "class_uri": "src/test/java/net/datafaker/providers/base/HouseTest.java.HouseTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CryptoCoinTest.java.CryptoCoinTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        CryptoCoin cryptoCoin = faker.cryptoCoin();\n        return List.of(TestSpec.of(cryptoCoin::coin, \"crypto_coin.coin\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CryptoCoinTest.java", "class_name": "CryptoCoinTest", "class_uri": "src/test/java/net/datafaker/providers/base/CryptoCoinTest.java.CryptoCoinTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/StockTest.java.StockTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Stock stock = faker.stock();\n        return List.of(TestSpec.of(stock::nsdqSymbol, \"stock.symbol_nsdq\"),\n                TestSpec.of(stock::nyseSymbol, \"stock.symbol_nyse\"),\n                TestSpec.of(stock::nseSymbol, \"stock.symbol_nse\"),\n                TestSpec.of(stock::lseSymbol, \"stock.symbol_lse\"),\n                TestSpec.of(stock::exchanges, \"stock.exchanges\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/StockTest.java", "class_name": "StockTest", "class_uri": "src/test/java/net/datafaker/providers/base/StockTest.java.StockTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[Stream<Arguments>]canadianLocales()", "name": "canadianLocales", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private Stream<Arguments> canadianLocales()", "original_string": "    private Stream<Arguments> canadianLocales() {\n        return Stream.of(\n            Arguments.of(Locale.CANADA),\n            Arguments.of(new Locale(\"ca\", \"CA\"))\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[Phonenumber.PhoneNumber]parse(String,String)", "name": "parse", "arg_nums": 2, "params": [{"name": "generatedNumber", "type": "String"}, {"name": "countryCode", "type": "String"}], "return_type": "Phonenumber.PhoneNumber", "signature": "private Phonenumber.PhoneNumber parse(String generatedNumber, String countryCode)", "original_string": "    private Phonenumber.PhoneNumber parse(String generatedNumber, String countryCode) throws NumberParseException {\n        String normalizedNumber = \"IT\".equals(countryCode) || \"HU\".equals(countryCode) ? generatedNumber : generatedNumber.replaceFirst(\"^0(.+)\", \"$1\");\n        return util.parse(normalizedNumber, countryCode);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Phonenumber.PhoneNumber", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[Stream<Arguments>]locales()", "name": "locales", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> locales()", "original_string": "    private static Stream<Arguments> locales() {\n        return Stream.of(\n            locale(\"en\", \"US\"),\n            locale(\"en\", \"GB\"),\n            locale(\"en\", \"AU\"),\n            locale(\"en\", \"CA\"),\n            locale(\"en\", \"MS\"),\n            locale(\"en\", \"NG\"),\n            locale(\"en\", \"NZ\"),\n            locale(\"et\", \"EE\"),\n            locale(\"bg\", \"BG\"),\n            locale(\"by\", \"BY\"),\n            locale(\"ca\", \"CA\"),\n            locale(\"cs\", \"CZ\"),\n            locale(\"de\", \"DE\"),\n            locale(\"de\", \"AT\"),\n            locale(\"de\", \"CH\"),\n            locale(\"en\", \"IN\"),\n            locale(\"en\", \"NP\"),\n            locale(\"en\", \"PK\"),\n            locale(\"hu\", \"HU\"),\n            locale(\"fi\", \"FI\"),\n            locale(\"ko\", \"KR\"),\n            locale(\"ja\", \"JP\"),\n            locale(\"lv\", \"LV\"),\n            locale(\"mk\", \"MK\"),\n            locale(\"ca\", \"IT\"),\n            locale(\"nl\", \"NL\"),\n            locale(\"pl\", \"PL\"),\n            locale(\"pt\", \"PT\"),\n            locale(\"ro\", \"MD\"),\n            locale(\"sq\", \"AL\"),\n            locale(\"zh\", \"CN\"),\n            locale(\"zh\", \"TW\"),\n            locale(\"uk\", \"UA\"),\n            locale(\"tr\", \"TR\"),\n            locale(\"en\", \"SG\"),\n            locale(\"en\", \"PH\"),\n            locale(\"en\", \"UG\"),\n            locale(\"en\", \"ZA\"),\n            locale(\"sv\", \"SE\"),\n            locale(\"th\", \"TH\"),\n            locale(\"sk\", \"SK\"),\n            locale(\"ru\", \"RU\"),\n            locale(\"pt\", \"BR\"),\n            locale(\"es\", \"AR\"),\n            locale(\"es\", \"MX\"),\n            locale(\"es\", \"PY\"),\n            locale(\"es\", \"ES\"),\n            locale(\"fr\", \"CA\"),\n            locale(\"fr\", \"FR\"),\n            locale(\"he\", \"IL\"),\n            locale(\"hr\", \"HR\"),\n            locale(\"hy\", \"AM\"),\n            locale(\"id\", \"ID\"),\n            locale(\"nb\", \"NO\"),\n            locale(\"no\", \"NO\"),\n            locale(\"da\", \"DK\"),\n            locale(\"vi\", \"VI\"),\n            locale(\"fr\", \"CH\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": " `\"IN\"` in `new Locale(\"en\", \"IND\"), \"IN\")` is a PhoneNumberUtil's region"}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[Arguments]locale(String,String)", "name": "locale", "arg_nums": 2, "params": [{"name": "language", "type": "String"}, {"name": "country", "type": "String"}], "return_type": "Arguments", "signature": "private static Arguments locale(String language, String country)", "original_string": "    private static Arguments locale(String language, String country) {\n        return Arguments.of(new Locale(language, country));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Arguments", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[AbstractStringAssert<?>]assertThatPhone(String)", "name": "assertThatPhone", "arg_nums": 1, "params": [{"name": "phoneNumber", "type": "String"}], "return_type": "AbstractStringAssert<?>", "signature": "private static AbstractStringAssert<?> assertThatPhone(String phoneNumber)", "original_string": "    private static AbstractStringAssert<?> assertThatPhone(String phoneNumber) {\n        return assertThat(phoneNumber)\n            .as(() -> \"Phone: %s\".formatted(phoneNumber));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "AbstractStringAssert<?>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest.[String]noSpaces(String)", "name": "noSpaces", "arg_nums": 1, "params": [{"name": "phone", "type": "String"}], "return_type": "String", "signature": "private static String noSpaces(String phone)", "original_string": "    private static String noSpaces(String phone) {\n        return phone.replaceAll(\"\\\\s+\", \"\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java", "class_name": "PhoneNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberTest.java.PhoneNumberTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MountaineeringTest.java.MountaineeringTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Mountaineering mountaineering = faker.mountaineering();\n        return List.of(TestSpec.of(mountaineering::mountaineer, \"mountaineering.mountaineer\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MountaineeringTest.java", "class_name": "MountaineeringTest", "class_uri": "src/test/java/net/datafaker/providers/base/MountaineeringTest.java.MountaineeringTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BloodTypeTest.java.BloodTypeTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        BloodType bloodType = faker.bloodtype();\n        return List.of(TestSpec.of(bloodType::aboTypes, \"blood_type.abo_types\", \"[A-Za-z]+\"),\n            TestSpec.of(bloodType::rhTypes, \"blood_type.rh_types\", \"[A-Za-z+-]+\"),\n            TestSpec.of(bloodType::pTypes, \"blood_type.p_types\", \"[A-Za-z\\\\d]+\"),\n            TestSpec.of(bloodType::bloodGroup, \"blood_type.blood_group\", \"(A|B|AB|O)[+-]\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BloodTypeTest.java", "class_name": "BloodTypeTest", "class_uri": "src/test/java/net/datafaker/providers/base/BloodTypeTest.java.BloodTypeTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MatzTest.java.MatzTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Matz matz = faker.matz();\n        return List.of(TestSpec.of(matz::quote, \"matz.quotes\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MatzTest.java", "class_name": "MatzTest", "class_uri": "src/test/java/net/datafaker/providers/base/MatzTest.java.MatzTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_pastTest.java.DateAndTime_pastTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        BaseFaker faker = new BaseFaker();\n        dateAndTime = new DateAndTime(faker);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_pastTest.java", "class_name": "DateAndTime_pastTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_pastTest.java.DateAndTime_pastTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MountainTest.java.MountainTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Mountain mountain = faker.mountain();\n        return List.of(TestSpec.of(mountain::name, \"mountain.name\"),\n                TestSpec.of(mountain::range, \"mountain.range\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MountainTest.java", "class_name": "MountainTest", "class_uri": "src/test/java/net/datafaker/providers/base/MountainTest.java.MountainTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Locality_displayNameTest.java.Locality_displayNameTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        Faker faker = new Faker();\n        locality = new Locality(faker);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Locality_displayNameTest.java", "class_name": "Locality_displayNameTest", "class_uri": "src/test/java/net/datafaker/providers/base/Locality_displayNameTest.java.Locality_displayNameTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_futureTest.java.DateAndTime_futureTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        BaseFaker faker = new BaseFaker();\n        dateAndTime = new DateAndTime(faker);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_futureTest.java", "class_name": "DateAndTime_futureTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_futureTest.java.DateAndTime_futureTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/GenderTest.java.GenderTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Gender gender = faker.gender();\n        return List.of(TestSpec.of(gender::types, \"gender.types\", \"(\\\\w+ ?){1,2}\"),\n            TestSpec.of(gender::binaryTypes, \"gender.binary_types\"),\n            TestSpec.of(gender::shortBinaryTypes, \"gender.short_binary_types\", \"[fm]\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/GenderTest.java", "class_name": "GenderTest", "class_uri": "src/test/java/net/datafaker/providers/base/GenderTest.java.GenderTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NatoPhoneticAlphabetTest.java.NatoPhoneticAlphabetTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        NatoPhoneticAlphabet natoAlpha = faker.natoPhoneticAlphabet();\n        return List.of(TestSpec.of(natoAlpha::codeWord, \"nato_phonetic_alphabet.code_word\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NatoPhoneticAlphabetTest.java", "class_name": "NatoPhoneticAlphabetTest", "class_uri": "src/test/java/net/datafaker/providers/base/NatoPhoneticAlphabetTest.java.NatoPhoneticAlphabetTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_periodTest.java.DateAndTime_periodTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        BaseFaker faker = new BaseFaker();\n        dateAndTime = new DateAndTime(faker);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_periodTest.java", "class_name": "DateAndTime_periodTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_periodTest.java.DateAndTime_periodTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/KpopTest.java.KpopTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Kpop kpop = faker.kpop();\n        return List.of(TestSpec.of(kpop::iGroups, \"kpop.i_groups\"),\n                TestSpec.of(kpop::iiGroups, \"kpop.ii_groups\"),\n                TestSpec.of(kpop::iiiGroups, \"kpop.iii_groups\"),\n                TestSpec.of(kpop::girlGroups, \"kpop.girl_groups\"),\n                TestSpec.of(kpop::boyBands, \"kpop.boy_bands\"),\n                TestSpec.of(kpop::solo, \"kpop.solo\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/KpopTest.java", "class_name": "KpopTest", "class_uri": "src/test/java/net/datafaker/providers/base/KpopTest.java.KpopTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest.[Condition<String>]getCharacterCondition(char,int)", "name": "getCharacterCondition", "arg_nums": 2, "params": [{"name": "c", "type": "char"}, {"name": "expectedCnt", "type": "int"}], "return_type": "Condition<String>", "signature": "private Condition<String> getCharacterCondition(char c, int expectedCnt)", "original_string": "    private Condition<String> getCharacterCondition(char c, int expectedCnt) {\n        return new Condition<>(s -> {\n            int cnt = 0;\n            if (s.length() < expectedCnt) {\n                return false;\n            }\n            for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) == c) {\n                    cnt++;\n                }\n                if (cnt > expectedCnt) {\n                    return false;\n                }\n            }\n            return cnt == expectedCnt;\n        }, \"Expect \" + expectedCnt + \" colons\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/InternetTest.java", "class_name": "InternetTest", "class_uri": "src/test/java/net/datafaker/providers/base/InternetTest.java.InternetTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Condition<String>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[double]randomizationQualityTest(Function<Pair<Long, Long>, Double>)", "name": "randomizationQualityTest", "arg_nums": 1, "params": [{"name": "percentUniqueRunner", "type": "Function<Pair<Long, Long>, Double>"}], "return_type": "double", "signature": "private double randomizationQualityTest(final Function<Pair<Long, Long>, Double> percentUniqueRunner)", "original_string": "    private double randomizationQualityTest(final Function<Pair<Long, Long>, Double> percentUniqueRunner) {\n\n        final AtomicLong greaterThanThreshold = new AtomicLong();\n        final AtomicLong total = new AtomicLong();\n\n        for (long l = RANDOMIZATION_QUALITY_RANGE_START; l < RANDOMIZATION_QUALITY_RANGE_END; l += RANDOMIZATION_QUALITY_RANGE_STEP) {\n            final double percentUnique = percentUniqueRunner.apply(Pair.of(-l, l));\n            if (percentUnique > INDIVIDUAL_RUN_GT_PERCENT_UNIQUE) {\n                greaterThanThreshold.incrementAndGet();\n            }\n            total.incrementAndGet();\n        }\n\n        return (double) greaterThanThreshold.get() / (double) total.get();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "double", "classes": []}, "docstring": "\nOver the series of numbers identified from RANDOMIZATION_QUALITY_RANGE_START to\nRANDOMIZATION_QUALITY_RANGE_END, create a min/max range of -value/value and\nwith of those min/max values, call <em>percentUniqueRunner</em>.\n<p>\nCollect the number of calls to <em>percentUniqueRunner</em> that were\nabove the threshold and finally return that number divided by the total number of calls to\n<em>percentUniqueRunner</em>.\n\n@return percent of percentUniqueRunner's results greater than the threshold\n"}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[double]uniquePercentageOfResults(long,Supplier<T>)", "name": "uniquePercentageOfResults", "arg_nums": 2, "params": [{"name": "iterations", "type": "long"}, {"name": "callable", "type": "Supplier<T>"}], "return_type": "double", "signature": "private <T> double uniquePercentageOfResults(long iterations, Supplier<T> callable)", "original_string": "    private <T> double uniquePercentageOfResults(long iterations, Supplier<T> callable) {\n            Set<T> values = new HashSet<>();\n            for (long i = 0; i < iterations; i++) {\n                values.add(callable.get());\n            }\n            return (double) values.size() / (double) iterations;\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "double", "classes": []}, "docstring": "\nGiven a number of iterations, calls <em>callable</em> 'iterations' times and collects the results,\nthen calculates the number of results that were unique and returns the percentage that where unique.\n"}, {"uris": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest.[long]calculateNumbersToGet(long,long)", "name": "calculateNumbersToGet", "arg_nums": 2, "params": [{"name": "min", "type": "long"}, {"name": "max", "type": "long"}], "return_type": "long", "signature": "private long calculateNumbersToGet(long min, long max)", "original_string": "    private long calculateNumbersToGet(long min, long max) {\n        long numbersToGet = Math.min(max / 4 - min / 4, RANDOMIZATION_TESTS_MAX_NUMBERS_TO_GET);\n        if (numbersToGet == 0) numbersToGet = RANDOMIZATION_TESTS_MAX_NUMBERS_TO_GET;\n        return numbersToGet;\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/NumberTest.java", "class_name": "NumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/NumberTest.java.NumberTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\ngiven a range, what is the number of values to get within that range for the randomization quality tests.\n"}, {"uris": "src/test/java/net/datafaker/providers/base/CameraTest.java.CameraTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Camera camera = faker.camera();\n        return List.of(TestSpec.of(camera::brand, \"camera.brand\", \"^[a-zA-Z0-9 -]+$\"),\n            TestSpec.of(camera::model, \"camera.model\", \"^[a-zA-Z0-9 -]+$\"),\n            TestSpec.of(camera::brandWithModel, \"camera.brand_with_model\", \"^[a-zA-Z0-9 -]+$\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CameraTest.java", "class_name": "CameraTest", "class_uri": "src/test/java/net/datafaker/providers/base/CameraTest.java.CameraTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(drone::name, \"drone.name\"),\n                TestSpec.of(drone::batteryType, \"drone.battery_type\"),\n                TestSpec.of(drone::iso, \"drone.iso\"),\n                TestSpec.of(drone::photoFormat, \"drone.photo_format\"),\n                TestSpec.of(drone::videoFormat, \"drone.video_format\"),\n                TestSpec.of(drone::maxShutterSpeed, \"drone.max_shutter_speed\"),\n                TestSpec.of(drone::minShutterSpeed, \"drone.min_shutter_speed\"),\n                TestSpec.of(drone::shutterSpeedUnits, \"drone.shutter_speed_units\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DroneTest.java", "class_name": "DroneTest", "class_uri": "src/test/java/net/datafaker/providers/base/DroneTest.java.DroneTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FunnyNameTest.java.FunnyNameTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        FunnyName funnyName = faker.funnyName();\n        return List.of(TestSpec.of(funnyName::name, \"funny_name.name\", \"^(\\\\w+\\\\.?\\\\s?'?-?)+$\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FunnyNameTest.java", "class_name": "FunnyNameTest", "class_uri": "src/test/java/net/datafaker/providers/base/FunnyNameTest.java.FunnyNameTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(science::unit, \"science.unit\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ScienceTest.java", "class_name": "ScienceTest", "class_uri": "src/test/java/net/datafaker/providers/base/ScienceTest.java.ScienceTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest.[List<String>]findAllSupportedLocales(File)", "name": "findAllSupportedLocales", "arg_nums": 1, "params": [{"name": "resourceDirectory", "type": "File"}], "return_type": "List<String>", "signature": "private List<String> findAllSupportedLocales(File resourceDirectory)", "original_string": "    private List<String> findAllSupportedLocales(File resourceDirectory) {\n        File[] localeFiles = resourceDirectory.listFiles((dir, name) -> name.endsWith(\".yml\"));\n        assert localeFiles != null;\n        return Stream.of(localeFiles)\n            .peek(f -> assertThat(f).isFile())\n            .peek(f -> assertThat(f).isReadable())\n            .map(f -> f.getName().toLowerCase(ROOT).replace(\".yml\", \"\"))\n            .toList();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LocalityTest.java", "class_name": "LocalityTest", "class_uri": "src/test/java/net/datafaker/providers/base/LocalityTest.java.LocalityTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DcComicsTest.java.DcComicsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\nprotected Collection<TestSpec> providerListTest()", "original_string": "    @Override\nprotected Collection<TestSpec> providerListTest() { \n        DcComics dcComics = faker.dcComics();\n        return List.of(TestSpec.of(dcComics::hero, \"dc_comics.hero\"),\n                TestSpec.of(dcComics::heroine, \"dc_comics.heroine\"),\n                TestSpec.of(dcComics::villain, \"dc_comics.villain\"),\n                TestSpec.of(dcComics::name, \"dc_comics.name\"),\n                TestSpec.of(dcComics::title, \"dc_comics.title\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DcComicsTest.java", "class_name": "DcComicsTest", "class_uri": "src/test/java/net/datafaker/providers/base/DcComicsTest.java.DcComicsTest", "attributes": {"modifiers": "@Override\nprotected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RelationshipTest.java.RelationshipTest.[void]beforeEach()", "name": "beforeEach", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    final void beforeEach()", "original_string": "    @BeforeEach\n    final void beforeEach() {\n        reset(mockFaker, fakeValuesService);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RelationshipTest.java", "class_name": "RelationshipTest", "class_uri": "src/test/java/net/datafaker/providers/base/RelationshipTest.java.RelationshipTest", "attributes": {"modifiers": "@BeforeEach\n    final", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RelationshipTest.java.RelationshipTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(relationship::direct, \"relationship.familial.direct\"),\n                TestSpec.of(relationship::extended, \"relationship.familial.extended\"),\n                TestSpec.of(relationship::inLaw, \"relationship.in_law\"),\n                TestSpec.of(relationship::spouse, \"relationship.spouse\"),\n                TestSpec.of(relationship::parent, \"relationship.parent\"),\n                TestSpec.of(relationship::sibling, \"relationship.sibling\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RelationshipTest.java", "class_name": "RelationshipTest", "class_uri": "src/test/java/net/datafaker/providers/base/RelationshipTest.java.RelationshipTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IndustrySegmentsTest.java.IndustrySegmentsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        IndustrySegments industrySegment = faker.industrySegments();\n        return List.of(TestSpec.of(industrySegment::industry, \"industry_segments.industry\"),\n                TestSpec.of(industrySegment::superSector, \"industry_segments.super_sector\"),\n                TestSpec.of(industrySegment::sector, \"industry_segments.sector\"),\n                TestSpec.of(industrySegment::subSector, \"industry_segments.sub_sector\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IndustrySegmentsTest.java", "class_name": "IndustrySegmentsTest", "class_uri": "src/test/java/net/datafaker/providers/base/IndustrySegmentsTest.java.IndustrySegmentsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/HackerTest.java.HackerTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Hacker hacker = faker.hacker();\n        return List.of(TestSpec.of(hacker::abbreviation, \"hacker.abbreviation\", \"[A-Z]{2,4}\"),\n            TestSpec.of(hacker::adjective, \"hacker.adjective\", \"(?:\\\\w+[- ]?){1,2}\"),\n            TestSpec.of(hacker::noun, \"hacker.noun\"),\n            TestSpec.of(hacker::verb, \"hacker.verb\"),\n            TestSpec.of(hacker::ingverb, \"hacker.ingverb\", \"\\\\w+ing(?: \\\\w+)?\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/HackerTest.java", "class_name": "HackerTest", "class_uri": "src/test/java/net/datafaker/providers/base/HackerTest.java.HackerTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ZodiacTest.java.ZodiacTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Zodiac zodiac = faker.zodiac();\n        return List.of(TestSpec.of(zodiac::sign, \"zodiac.signs\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ZodiacTest.java", "class_name": "ZodiacTest", "class_uri": "src/test/java/net/datafaker/providers/base/ZodiacTest.java.ZodiacTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java.RandomFakerTest.[void]before()", "name": "before", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    final void before()", "original_string": "    @BeforeEach\n    final void before() {\n        random = new Random();\n        faker = new BaseFaker(random);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java", "class_name": "RandomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java.RandomFakerTest", "attributes": {"modifiers": "@BeforeEach\n    final", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java.RandomFakerTest.[void]resetRandomSeed()", "name": "resetRandomSeed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void resetRandomSeed()", "original_string": "    private void resetRandomSeed() {\n        random.setSeed(CONSTANT_SEED_VALUE);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java", "class_name": "RandomFakerTest", "class_uri": "src/test/java/net/datafaker/providers/base/RandomFakerTest.java.RandomFakerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DungeonsAndDragonsTest.java.DungeonsAndDragonsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        DungeonsAndDragons dnd = faker.dungeonsAndDragons();\n        return List.of(TestSpec.of(dnd::alignments, \"dnd.alignments\"),\n            TestSpec.of(dnd::backgrounds, \"dnd.backgrounds\"),\n            TestSpec.of(dnd::cities, \"dnd.cities\"),\n            TestSpec.of(dnd::klasses, \"dnd.klasses\"),\n            TestSpec.of(dnd::languages, \"dnd.languages\"),\n            TestSpec.of(dnd::meleeWeapons, \"dnd.melee_weapons\"),\n            TestSpec.of(dnd::monsters, \"dnd.monsters\"),\n            TestSpec.of(dnd::races, \"dnd.races\"),\n            TestSpec.of(dnd::rangedWeapons, \"dnd.ranged_weapons\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DungeonsAndDragonsTest.java", "class_name": "DungeonsAndDragonsTest", "class_uri": "src/test/java/net/datafaker/providers/base/DungeonsAndDragonsTest.java.DungeonsAndDragonsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CommunityTest.java.CommunityTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Community community = faker.community();\n        return List.of(TestSpec.of(community::character, \"community.characters\"),\n                TestSpec.of(community::quote, \"community.quotes\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CommunityTest.java", "class_name": "CommunityTest", "class_uri": "src/test/java/net/datafaker/providers/base/CommunityTest.java.CommunityTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SizeTest.java.SizeTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Size size = faker.size();\n        return List.of(TestSpec.of(size::adjective, \"size.adjective\", \"[a-zA-Z]+(-[a-zA-Z]+)?\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SizeTest.java", "class_name": "SizeTest", "class_uri": "src/test/java/net/datafaker/providers/base/SizeTest.java.SizeTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ComputerTest.java.ComputerTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(computer::type, \"computer.type\"),\n                TestSpec.of(computer::platform, \"computer.platform\"),\n                TestSpec.of(computer::linux, \"computer.os.linux\"),\n                TestSpec.of(computer::macos, \"computer.os.macos\"),\n                TestSpec.of(computer::windows, \"computer.os.windows\"),\n                TestSpec.of(computer::brand, \"computer.brand\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ComputerTest.java", "class_name": "ComputerTest", "class_uri": "src/test/java/net/datafaker/providers/base/ComputerTest.java.ComputerTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MarketingTest.java.MarketingTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Marketing marketing = faker.marketing();\n        return List.of(TestSpec.of(marketing::buzzwords, \"marketing.buzzwords\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MarketingTest.java", "class_name": "MarketingTest", "class_uri": "src/test/java/net/datafaker/providers/base/MarketingTest.java.MarketingTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TransportTest.java.TransportTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Transport transport = faker.transport();\n        return List.of(TestSpec.of(transport::type, \"transport.type\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TransportTest.java", "class_name": "TransportTest", "class_uri": "src/test/java/net/datafaker/providers/base/TransportTest.java.TransportTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ColorTest.java.ColorTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(color::name, \"color.name\", \"(\\\\w+ ?){1,2}\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ColorTest.java", "class_name": "ColorTest", "class_uri": "src/test/java/net/datafaker/providers/base/ColorTest.java.ColorTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n                TestSpec.of(lorem::word, \"lorem.words\"),\n                TestSpec.of(lorem::supplemental, \"lorem.supplemental\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LoremTest.java", "class_name": "LoremTest", "class_uri": "src/test/java/net/datafaker/providers/base/LoremTest.java.LoremTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CountryTest.java.CountryTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(country::countryCode2, \"country.code2\", \"[a-z]{2}\"),\n                TestSpec.of(country::countryCode3, \"country.code3\", \"[a-z]{3}\"),\n                TestSpec.of(country::capital, \"country.capital\", \"([\\\\p{L}0-9+,. '-])+\"),\n                TestSpec.of(country::name, \"country.name\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CountryTest.java", "class_name": "CountryTest", "class_uri": "src/test/java/net/datafaker/providers/base/CountryTest.java.CountryTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[Stream<Arguments>]generateDurationsWithMaxOnly()", "name": "generateDurationsWithMaxOnly", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateDurationsWithMaxOnly()", "original_string": "    private static Stream<Arguments> generateDurationsWithMaxOnly() {\n        return Stream.of(\n            Arguments.of(0, ChronoUnit.DAYS),\n            Arguments.of(100, ChronoUnit.DAYS),\n            Arguments.of(456, ChronoUnit.HOURS),\n            Arguments.of(43, ChronoUnit.MINUTES),\n            Arguments.of(78, ChronoUnit.SECONDS),\n            Arguments.of(786, ChronoUnit.MILLIS),\n            Arguments.of(786, ChronoUnit.MICROS),\n            Arguments.of(8729, ChronoUnit.NANOS)\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[Stream<Arguments>]generateDurationsWithMinMax()", "name": "generateDurationsWithMinMax", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateDurationsWithMinMax()", "original_string": "    private static Stream<Arguments> generateDurationsWithMinMax() {\n        return Stream.of(\n            Arguments.of(123, 123, ChronoUnit.DAYS),\n            Arguments.of(12, 123, ChronoUnit.HOURS),\n            Arguments.of(15, 400, ChronoUnit.MINUTES),\n            Arguments.of(65, 98, ChronoUnit.SECONDS),\n            Arguments.of(76, 100, ChronoUnit.MILLIS),\n            Arguments.of(879, 1030, ChronoUnit.MICROS),\n            Arguments.of(879, 1030, ChronoUnit.NANOS)\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest.[Stream<Arguments>]generatePeriod()", "name": "generatePeriod", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generatePeriod()", "original_string": "    private static Stream<Arguments> generatePeriod() {\n        return Stream.of(\n            Arguments.of(Period.of(1, 1, 1), Period.of(0, 1, 1)),\n            Arguments.of(Period.of(1, 1, 3), Period.of(1, 1, 2)),\n            Arguments.of(Period.of(1, 2, 1), Period.of(1, 1, 1))\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java", "class_name": "TimeAndDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/TimeAndDateTest.java.TimeAndDateTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/HorseTest.java.HorseTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Horse horse = faker.horse();\n        return List.of(TestSpec.of(horse::name, \"creature.horse.name\"),\n                TestSpec.of(horse::breed, \"creature.horse.breed\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/HorseTest.java", "class_name": "HorseTest", "class_uri": "src/test/java/net/datafaker/providers/base/HorseTest.java.HorseTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LocationTest.java.LocationTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Location location = faker.location();\n        return List.of(\n            TestSpec.of(location::building, \"location.building\"),\n            TestSpec.of(location::nature, \"location.nature\"),\n            TestSpec.of(location::otherworldly, \"location.otherworldly\"),\n            TestSpec.of(location::privateSpace, \"location.private_space\"),\n            TestSpec.of(location::publicSpace, \"location.public_space\"),\n            TestSpec.of(location::work, \"location.work\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LocationTest.java", "class_name": "LocationTest", "class_uri": "src/test/java/net/datafaker/providers/base/LocationTest.java.LocationTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BaseFaker_doWithTest.java.BaseFaker_doWithTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        baseFaker = new BaseFaker();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BaseFaker_doWithTest.java", "class_name": "BaseFaker_doWithTest", "class_uri": "src/test/java/net/datafaker/providers/base/BaseFaker_doWithTest.java.BaseFaker_doWithTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Azure_subscriptionIdTest.java.Azure_subscriptionIdTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        BaseFaker faker = new BaseFaker();\n        azure = new Azure(faker);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Azure_subscriptionIdTest.java", "class_name": "Azure_subscriptionIdTest", "class_uri": "src/test/java/net/datafaker/providers/base/Azure_subscriptionIdTest.java.Azure_subscriptionIdTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhotographyTest.java.PhotographyTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Photography photo = faker.photography();\n        return List.of(TestSpec.of(photo::aperture, \"photography.aperture\"),\n            TestSpec.of(photo::term, \"photography.term\"),\n            TestSpec.of(photo::brand, \"photography.brand\"),\n            TestSpec.of(photo::camera, \"photography.camera\"),\n            TestSpec.of(photo::lens, \"photography.lens\"),\n            TestSpec.of(photo::genre, \"photography.genre\"),\n            TestSpec.of(photo::imageTag, \"photography.imagetag\"),\n            TestSpec.of(photo::shutter, \"photography.shutter\", \"\\\\d+/?\\\\d*\"),\n            TestSpec.of(photo::iso, \"photography.iso\", \"\\\\d+\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhotographyTest.java", "class_name": "PhotographyTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhotographyTest.java.PhotographyTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Name_titleTest.java.Name_titleTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        BaseFaker faker = new BaseFaker();\n        name = new Name(faker);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Name_titleTest.java", "class_name": "Name_titleTest", "class_uri": "src/test/java/net/datafaker/providers/base/Name_titleTest.java.Name_titleTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LocalityExample.java.LocalityExample.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args) {\n        BaseFaker defaultFaker = new BaseFaker();\n\n        // EXAMPLE: GET LIST OF ALL SUPPORTED LOCALES\n        List<String> allLocales = defaultFaker.locality().allSupportedLocales();\n        System.out.println(\"All supported locales: \" + Arrays.toString(allLocales.toArray()));\n\n        // EXAMPLE: GET A FAKER OBJECT WITH A RANDOM LOCALE (SELECTED WITH REPLACEMENT)\n        // Instantiate a Faker object with a randomized locale\n        Locale pickedLocale = Locale.forLanguageTag(defaultFaker.locality().localeString());\n        BaseFaker faker = new BaseFaker(pickedLocale);\n\n        // Use Faker object to generate data in the randomly selected locale\n        String fullName = faker.name().fullName();\n        String streetAddress = faker.address().streetAddress();\n        String phoneNumber = faker.phoneNumber().phoneNumber();\n\n        System.out.println(\"EXAMPLE: SELECT A RANDOM LOCALE (WITH REPLACEMENT)\");\n        System.out.println(\"Random Locale: \" + pickedLocale.toString());\n        System.out.println(\"  Full Name: \" + fullName);\n        System.out.println(\"  Street Address: \" + streetAddress);\n        System.out.println(\"  Phone Number: \" + phoneNumber);\n\n        // EXAMPLE: ROTATE THROUGH ALL SUPPORTED LOCALES TO GENERATE USER DATA\n        //   LOCALES PICKED AT RANDOM (SELECTED WITHOUT REPLACEMENT)\n        System.out.println(\"EXAMPLE: ROTATE THROUGH ALL LOCALES AT RANDOM (WITHOUT REPLACEMENT)\");\n        BaseFaker currentFaker;\n\n        int numSupportedLocales = allLocales.size();\n        for (int i = 0; i < numSupportedLocales; i++) {\n            Locale currentLocale = Locale.forLanguageTag(defaultFaker.locality().localeStringWithoutReplacement());\n            System.out.println(\"Random Locale: \" + currentLocale.toString());\n            currentFaker = new BaseFaker(currentLocale);\n            System.out.println(\"  First Name: \" + currentFaker.name().firstName());\n            System.out.println(\"  Last Name: \" + currentFaker.name().lastName());\n            System.out.println(\"  Street Address: \" + currentFaker.address().streetAddress());\n            System.out.println(\"  Phone Number: \" + currentFaker.phoneNumber().phoneNumber());\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LocalityExample.java", "class_name": "LocalityExample", "class_uri": "src/test/java/net/datafaker/providers/base/LocalityExample.java.LocalityExample", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nExample to illustrate use of Locality to randomly select\nlocales (language and geographical/political/cultural region) when using Faker\n\n@param args Command-line arguments\n"}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[void]assertCardLuhnDigit(String)", "name": "assertCardLuhnDigit", "arg_nums": 1, "params": [{"name": "creditCard", "type": "String"}], "return_type": "void", "signature": "private void assertCardLuhnDigit(String creditCard)", "original_string": "    private void assertCardLuhnDigit(String creditCard) {\n        final String creditCardStripped = creditCard.replace(\"-\", \"\");\n        assertThat(LuhnCheckDigit.LUHN_CHECK_DIGIT.isValid(creditCardStripped)).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(finance::stockMarket, \"finance.stock_market\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/FinanceTest.java", "class_name": "FinanceTest", "class_uri": "src/test/java/net/datafaker/providers/base/FinanceTest.java.FinanceTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java.PhoneNumberValidityFinderTest.[Phonenumber.PhoneNumber]parse(String,String)", "name": "parse", "arg_nums": 2, "params": [{"name": "generatedNumber", "type": "String"}, {"name": "countryCode", "type": "String"}], "return_type": "Phonenumber.PhoneNumber", "signature": "private Phonenumber.PhoneNumber parse(String generatedNumber, String countryCode)", "original_string": "    private Phonenumber.PhoneNumber parse(String generatedNumber, String countryCode) throws NumberParseException {\n        String normalizedNumber = \"IT\".equals(countryCode) || \"HU\".equals(countryCode) ? generatedNumber : generatedNumber.replaceFirst(\"^0(.+)\", \"$1\");\n        return util.parse(normalizedNumber, countryCode);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java", "class_name": "PhoneNumberValidityFinderTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java.PhoneNumberValidityFinderTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Phonenumber.PhoneNumber", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java.PhoneNumberValidityFinderTest.[Stream<Arguments>]allSupportedLocales()", "name": "allSupportedLocales", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "public Stream<Arguments> allSupportedLocales()", "original_string": "    public Stream<Arguments> allSupportedLocales() {\n        return faker.locality().allSupportedLocales().stream()\n            .map(rawLocale -> Arguments.of(createLocale(rawLocale)));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java", "class_name": "PhoneNumberValidityFinderTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java.PhoneNumberValidityFinderTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java.PhoneNumberValidityFinderTest.[Locale]createLocale(String)", "name": "createLocale", "arg_nums": 1, "params": [{"name": "locale", "type": "String"}], "return_type": "Locale", "signature": "private static Locale createLocale(String locale)", "original_string": "    private static Locale createLocale(String locale) {\n        if (locale.startsWith(\"_\")) {\n            return new Locale(\"en\", locale.substring(1).toUpperCase(ROOT));\n        }\n        if (locale.contains(\"-\")) {\n            String[] parts = locale.split(\"-\");\n            return new Locale(parts[0], parts[1]);\n        }\n        return new Locale(locale, \"\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java", "class_name": "PhoneNumberValidityFinderTest", "class_uri": "src/test/java/net/datafaker/providers/base/PhoneNumberValidityFinderTest.java.PhoneNumberValidityFinderTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Locale", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MeasurementTest.java.MeasurementTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Measurement measurement = faker.measurement();\n        return List.of(TestSpec.of(measurement::height, \"measurement.height\"),\n            TestSpec.of(measurement::length, \"measurement.length\"),\n            TestSpec.of(measurement::volume, \"measurement.volume\"),\n            TestSpec.of(measurement::weight, \"measurement.weight\"),\n            TestSpec.of(measurement::metricLength, \"measurement.metric_length\"),\n            TestSpec.of(measurement::metricHeight, \"measurement.metric_height\"),\n            TestSpec.of(measurement::metricVolume, \"measurement.metric_volume\"),\n            TestSpec.of(measurement::metricWeight, \"measurement.metric_weight\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MeasurementTest.java", "class_name": "MeasurementTest", "class_uri": "src/test/java/net/datafaker/providers/base/MeasurementTest.java.MeasurementTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]assertIsValidISBN10(String,ISBNValidator)", "name": "assertIsValidISBN10", "arg_nums": 2, "params": [{"name": "isbn10", "type": "String"}, {"name": "isbnValidator", "type": "ISBNValidator"}], "return_type": "void", "signature": "private void assertIsValidISBN10(String isbn10, ISBNValidator isbnValidator)", "original_string": "    private void assertIsValidISBN10(String isbn10, ISBNValidator isbnValidator) {\n        assertThat(isbnValidator.isValidISBN10(isbn10)).describedAs(isbn10 + \" is valid\").isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest.[void]assertIsValidISBN13(String,ISBNValidator)", "name": "assertIsValidISBN13", "arg_nums": 2, "params": [{"name": "isbn13", "type": "String"}, {"name": "isbnValidator", "type": "ISBNValidator"}], "return_type": "void", "signature": "private void assertIsValidISBN13(String isbn13, ISBNValidator isbnValidator)", "original_string": "    private void assertIsValidISBN13(String isbn13, ISBNValidator isbnValidator) {\n        assertThat(isbnValidator.isValidISBN13(isbn13)).describedAs(isbn13 + \" is valid\").isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CodeTest.java", "class_name": "CodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/CodeTest.java.CodeTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Number_randomNumberTest.java.Number_randomNumberTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        faker = new BaseFaker();\n        number = new Number(faker);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Number_randomNumberTest.java", "class_name": "Number_randomNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/Number_randomNumberTest.java.Number_randomNumberTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Aws aws = faker.aws();\n        return List.of(TestSpec.of(aws::service, \"aws.services\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AwsTest.java", "class_name": "AwsTest", "class_uri": "src/test/java/net/datafaker/providers/base/AwsTest.java.AwsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/LargeLanguageModelTest.java.LargeLanguageModelTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(llm::textModel, \"largelanguagemodel.text_models\"),\n            TestSpec.of(llm::embeddingModel, \"largelanguagemodel.embeddings\"),\n            TestSpec.of(llm::tokenizer, \"largelanguagemodel.tokenizers\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/LargeLanguageModelTest.java", "class_name": "LargeLanguageModelTest", "class_uri": "src/test/java/net/datafaker/providers/base/LargeLanguageModelTest.java.LargeLanguageModelTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/TeamTest.java.TeamTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(team::creature, \"team.creature\"),\n            TestSpec.of(team::sport, \"team.sport\", \"(?:\\\\p{L}|\\\\s)+\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/TeamTest.java", "class_name": "TeamTest", "class_uri": "src/test/java/net/datafaker/providers/base/TeamTest.java.TeamTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Lorem_maxLengthSentenceTest.java.Lorem_maxLengthSentenceTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        BaseProviders faker = new BaseFaker();\n        lorem = new Lorem(faker);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Lorem_maxLengthSentenceTest.java", "class_name": "Lorem_maxLengthSentenceTest", "class_uri": "src/test/java/net/datafaker/providers/base/Lorem_maxLengthSentenceTest.java.Lorem_maxLengthSentenceTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest.[boolean]isBarcodeValid(long)", "name": "isBarcodeValid", "arg_nums": 1, "params": [{"name": "barcode", "type": "long"}], "return_type": "boolean", "signature": "private static boolean isBarcodeValid(long barcode)", "original_string": "    private static boolean isBarcodeValid(long barcode) {\n        char[] array = String.valueOf(barcode).toCharArray();\n        int sum = 0;\n        for (int i = 0; i < array.length; i++) {\n            int digit = Integer.parseInt(String.valueOf(array[i]));\n            if ((i + 1) % 2 == 0)\n                sum += digit;\n            else\n                sum = sum + (digit * 3);\n        }\n        return String.valueOf(sum).endsWith(\"0\");\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BarcodeTest.java", "class_name": "BarcodeTest", "class_uri": "src/test/java/net/datafaker/providers/base/BarcodeTest.java.BarcodeTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MoodTest.java.MoodTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Mood mood = faker.mood();\n        return List.of(TestSpec.of(mood::feeling, \"mood.feeling\"),\n            TestSpec.of(mood::emotion, \"mood.emotion\"),\n            TestSpec.of(mood::tone, \"mood.tone\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MoodTest.java", "class_name": "MoodTest", "class_uri": "src/test/java/net/datafaker/providers/base/MoodTest.java.MoodTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[Stream<Arguments>]generateDurationsFromStringWithMaxOnly()", "name": "generateDurationsFromStringWithMaxOnly", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateDurationsFromStringWithMaxOnly()", "original_string": "    private static Stream<Arguments> generateDurationsFromStringWithMaxOnly() {\n        return Stream.of(\n            Arguments.of(0, \"days\"),\n            Arguments.of(100, \"days\"),\n            Arguments.of(123, \"DAY\"),\n            Arguments.of(456, \"HOUR\"),\n            Arguments.of(1234, \"hours\"),\n            Arguments.of(43, \"minutes\"),\n            Arguments.of(78, \"minute\"),\n            Arguments.of(56, \"seconds\"),\n            Arguments.of(34, \"second\"),\n            Arguments.of(786, \"millis\"),\n            Arguments.of(879, \"milli\"),\n            Arguments.of(8729, \"nano\"),\n            Arguments.of(8739, \"nanos\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[Stream<Arguments>]generateDurationsFromStringWithMinMax()", "name": "generateDurationsFromStringWithMinMax", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateDurationsFromStringWithMinMax()", "original_string": "    private static Stream<Arguments> generateDurationsFromStringWithMinMax() {\n        return Stream.of(\n            Arguments.of(123, 123, \"days\"),\n            Arguments.of(12, 123, \"days\"),\n            Arguments.of(21, 32, \"DAY\"),\n            Arguments.of(45, 100, \"HOUR\"),\n            Arguments.of(23, 100, \"hours\"),\n            Arguments.of(15, 400, \"minutes\"),\n            Arguments.of(14, 500, \"minute\"),\n            Arguments.of(32, 54, \"seconds\"),\n            Arguments.of(65, 98, \"second\"),\n            Arguments.of(76, 100, \"millis\"),\n            Arguments.of(87, 100, \"milli\"),\n            Arguments.of(76, 100, \"micros\"),\n            Arguments.of(87, 100, \"micro\"),\n            Arguments.of(874, 1300, \"nano\"),\n            Arguments.of(879, 1030, \"nanos\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[Stream<Arguments>]generateDurationsWithMaxOnly()", "name": "generateDurationsWithMaxOnly", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateDurationsWithMaxOnly()", "original_string": "    private static Stream<Arguments> generateDurationsWithMaxOnly() {\n        return Stream.of(\n            Arguments.of(0, ChronoUnit.DAYS),\n            Arguments.of(100, ChronoUnit.DAYS),\n            Arguments.of(456, ChronoUnit.HOURS),\n            Arguments.of(43, ChronoUnit.MINUTES),\n            Arguments.of(78, ChronoUnit.SECONDS),\n            Arguments.of(786, ChronoUnit.MILLIS),\n            Arguments.of(786, ChronoUnit.MICROS),\n            Arguments.of(8729, ChronoUnit.NANOS)\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[Stream<Arguments>]generateDurationsWithMinMax()", "name": "generateDurationsWithMinMax", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateDurationsWithMinMax()", "original_string": "    private static Stream<Arguments> generateDurationsWithMinMax() {\n        return Stream.of(\n            Arguments.of(123, 123, ChronoUnit.DAYS),\n            Arguments.of(12, 123, ChronoUnit.HOURS),\n            Arguments.of(15, 400, ChronoUnit.MINUTES),\n            Arguments.of(65, 98, ChronoUnit.SECONDS),\n            Arguments.of(76, 100, ChronoUnit.MILLIS),\n            Arguments.of(879, 1030, ChronoUnit.MICROS),\n            Arguments.of(879, 1030, ChronoUnit.NANOS)\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest.[Stream<Arguments>]generatePeriod()", "name": "generatePeriod", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generatePeriod()", "original_string": "    private static Stream<Arguments> generatePeriod() {\n        return Stream.of(\n            Arguments.of(Period.of(1, 1, 1), Period.of(0, 1, 1)),\n            Arguments.of(Period.of(1, 1, 3), Period.of(1, 1, 2)),\n            Arguments.of(Period.of(1, 2, 1), Period.of(1, 1, 1))\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java", "class_name": "DateAndTimeTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTimeTest.java.DateAndTimeTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DemographicTest.java.DemographicTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Demographic demographic = faker.demographic();\n        return List.of(TestSpec.of(demographic::race, \"demographic.race\", \"(\\\\w+ ?)+\"),\n            TestSpec.of(demographic::educationalAttainment, \"demographic.educational_attainment\", \"(?U)([\\\\w'-]+ ?)+\"),\n            TestSpec.of(demographic::demonym, \"demographic.demonym\", \"(?U)([\\\\w'-]+ ?)+\"),\n            TestSpec.of(demographic::maritalStatus, \"demographic.marital_status\", \"(\\\\w+ ?)+\"),\n            TestSpec.of(demographic::sex, \"demographic.sex\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DemographicTest.java", "class_name": "DemographicTest", "class_uri": "src/test/java/net/datafaker/providers/base/DemographicTest.java.DemographicTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PronounsTest.java.PronounsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(pronouns::subjective, \"pronouns.subjective\"),\n            TestSpec.of(pronouns::objective, \"pronouns.objective\"),\n            TestSpec.of(pronouns::possessive, \"pronouns.possessive\"),\n            TestSpec.of(pronouns::reflexive, \"pronouns.reflexive\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PronounsTest.java", "class_name": "PronounsTest", "class_uri": "src/test/java/net/datafaker/providers/base/PronounsTest.java.PronounsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/WordTest.java.WordTest.[Collection<BaseFakerTest.TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<BaseFakerTest.TestSpec>", "signature": "@Override\n    protected Collection<BaseFakerTest.TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<BaseFakerTest.TestSpec> providerListTest() {\n        return List.of(\n            BaseFakerTest.TestSpec.of(word::adjective, \"words.adjective\"),\n            BaseFakerTest.TestSpec.of(word::adverb, \"words.adverb\"),\n            BaseFakerTest.TestSpec.of(word::conjunction, \"words.conjunction\"),\n            BaseFakerTest.TestSpec.of(word::interjection, \"words.interjection\"),\n            BaseFakerTest.TestSpec.of(word::noun, \"words.noun\"),\n            BaseFakerTest.TestSpec.of(word::preposition, \"words.preposition\"),\n            BaseFakerTest.TestSpec.of(word::verb, \"words.verb\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/WordTest.java", "class_name": "WordTest", "class_uri": "src/test/java/net/datafaker/providers/base/WordTest.java.WordTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<BaseFakerTest.TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RestaurantTest.java.RestaurantTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(restaurant::nameSuffix, \"restaurant.name_suffix\"),\n                TestSpec.of(restaurant::type, \"restaurant.type\"),\n                TestSpec.of(restaurant::description, \"restaurant.description\"),\n                TestSpec.of(restaurant::review, \"restaurant.review\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RestaurantTest.java", "class_name": "RestaurantTest", "class_uri": "src/test/java/net/datafaker/providers/base/RestaurantTest.java.RestaurantTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/WeatherTest.java.WeatherTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(weather::description, \"weather.description\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/WeatherTest.java", "class_name": "WeatherTest", "class_uri": "src/test/java/net/datafaker/providers/base/WeatherTest.java.WeatherTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/HobbyTest.java.HobbyTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Hobby hobby = faker.hobby();\n        return List.of(TestSpec.of(hobby::activity, \"hobby.activity\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/HobbyTest.java", "class_name": "HobbyTest", "class_uri": "src/test/java/net/datafaker/providers/base/HobbyTest.java.HobbyTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest.[AbstractStringAssert<?>]assertThatPin(String)", "name": "assertThatPin", "arg_nums": 1, "params": [{"name": "pin", "type": "String"}], "return_type": "AbstractStringAssert<?>", "signature": "private static AbstractStringAssert<?> assertThatPin(String pin)", "original_string": "    private static AbstractStringAssert<?> assertThatPin(String pin) {\n        return assertThat(pin)\n            .as(() -> \"PIN: %s\".formatted(pin));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/IdNumberTest.java", "class_name": "IdNumberTest", "class_uri": "src/test/java/net/datafaker/providers/base/IdNumberTest.java.IdNumberTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "AbstractStringAssert<?>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/GarmentSizeTest.java.GarmentSizeTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        GarmentSize garmetSize = faker.garmentSize();\n        return List.of(TestSpec.of(garmetSize::size, \"garments_sizes.sizes\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/GarmentSizeTest.java", "class_name": "GarmentSizeTest", "class_uri": "src/test/java/net/datafaker/providers/base/GarmentSizeTest.java.GarmentSizeTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CultureSeriesTest.java.CultureSeriesTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        CultureSeries cultureSeries = faker.cultureSeries();\n        return List.of(TestSpec.of(cultureSeries::books, \"culture_series.books\"),\n                TestSpec.of(cultureSeries::cultureShips, \"culture_series.culture_ships\"),\n                TestSpec.of(cultureSeries::cultureShipClasses, \"culture_series.culture_ship_classes\"),\n                TestSpec.of(cultureSeries::cultureShipClassAbvs, \"culture_series.culture_ship_class_abvs\"),\n                TestSpec.of(cultureSeries::civs, \"culture_series.civs\"),\n                TestSpec.of(cultureSeries::planets, \"culture_series.planets\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CultureSeriesTest.java", "class_name": "CultureSeriesTest", "class_uri": "src/test/java/net/datafaker/providers/base/CultureSeriesTest.java.CultureSeriesTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Lorem_wordsTest.java.Lorem_wordsTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        BaseProviders faker = new BaseFaker();\n        lorem = new Lorem(faker);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Lorem_wordsTest.java", "class_name": "Lorem_wordsTest", "class_uri": "src/test/java/net/datafaker/providers/base/Lorem_wordsTest.java.Lorem_wordsTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/EmojiTest.java.EmojiTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Emoji emoji = faker.emoji();\n        \n        return List.of(TestSpec.of(emoji::smiley, \"emoji.smileys\"),\n            TestSpec.of(emoji::cat, \"emoji.cats\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/EmojiTest.java", "class_name": "EmojiTest", "class_uri": "src/test/java/net/datafaker/providers/base/EmojiTest.java.EmojiTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CurrencyTest.java.CurrencyTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Currency currency = faker.currency();\n        return List.of(TestSpec.of(currency::name, \"currency.name\", \"[\\\\w'.\\\\-() ]+\"),\n            TestSpec.of(currency::code, \"currency.code\", \"[A-Z]{3}\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CurrencyTest.java", "class_name": "CurrencyTest", "class_uri": "src/test/java/net/datafaker/providers/base/CurrencyTest.java.CurrencyTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BrandTest.java.BrandTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Brand brand = faker.brand();\n        return List.of(\n            TestSpec.of(brand::sport, \"brand.sport\"),\n            TestSpec.of(brand::car, \"vehicle.makes\"),\n            TestSpec.of(brand::watch, \"brand.watch\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BrandTest.java", "class_name": "BrandTest", "class_uri": "src/test/java/net/datafaker/providers/base/BrandTest.java.BrandTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ProgrammingLanguageTest.java.ProgrammingLanguageTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        ProgrammingLanguage lang = faker.programmingLanguage();\n        return List.of(TestSpec.of(lang::name, \"programming_language.name\", \"[A-Za-z\\\\d :,.+*()#/\u2013\\\\-@\u03c0\u00e9\u00f6\u00fc'\u2032!]+\"),\n            TestSpec.of(lang::creator, \"programming_language.creator\", \"[A-Za-z .,\\\\-]+\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ProgrammingLanguageTest.java", "class_name": "ProgrammingLanguageTest", "class_uri": "src/test/java/net/datafaker/providers/base/ProgrammingLanguageTest.java.ProgrammingLanguageTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Lorem_fixedStringTest.java.Lorem_fixedStringTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        BaseProviders faker = new BaseFaker();\n        lorem = new Lorem(faker);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Lorem_fixedStringTest.java", "class_name": "Lorem_fixedStringTest", "class_uri": "src/test/java/net/datafaker/providers/base/Lorem_fixedStringTest.java.Lorem_fixedStringTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_betweenTest.java.DateAndTime_betweenTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        dateAndTime = new DateAndTime(new BaseFaker());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_betweenTest.java", "class_name": "DateAndTime_betweenTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_betweenTest.java.DateAndTime_betweenTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/BookTest.java.BookTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(() -> faker.book().title(), \"book.title\", \"([\\\\p{L}'\\\\-?]+[!,]? ?){2,9}\"),\n            TestSpec.of(() -> faker.book().publisher(), \"book.publisher\", \"([\\\\p{L}'&\\\\-]+[,.]? ?){1,5}\"),\n            TestSpec.of(() -> faker.book().genre(), \"book.genre\", \"([\\\\w/]+ ?){2,4}\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/BookTest.java", "class_name": "BookTest", "class_uri": "src/test/java/net/datafaker/providers/base/BookTest.java.BookTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/SpaceTest.java.SpaceTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Space space = faker.space();\n        return List.of(TestSpec.of(space::planet, \"space.planet\", SPACE_REGEX),\n            TestSpec.of(space::moon, \"space.moon\", SPACE_REGEX),\n            TestSpec.of(space::galaxy, \"space.galaxy\", SPACE_REGEX),\n            TestSpec.of(space::nebula, \"space.nebula\", SPACE_REGEX),\n            TestSpec.of(space::starCluster, \"space.star_cluster\", \"(?:\\\\w+[ -]?){1,3}\"),\n            TestSpec.of(space::constellation, \"space.constellation\", SPACE_REGEX),\n            TestSpec.of(space::star, \"space.star\", \"(\\\\w+[ -]?){2,3}\"),\n            TestSpec.of(space::agency, \"space.agency\", \"(?:\\\\w+ ?){2,5}\"),\n            TestSpec.of(space::agencyAbbreviation, \"space.agency_abv\", SPACE_REGEX),\n            TestSpec.of(space::nasaSpaceCraft, \"space.nasa_space_craft\", SPACE_REGEX),\n            TestSpec.of(space::company, \"space.company\", \"(?:(?:\\\\w|')+ ?){2,4}\"),\n            TestSpec.of(space::meteorite, \"space.meteorite\", \"(?U)(?:[\\\\w()]+[ -\u2013]?){1,4}\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/SpaceTest.java", "class_name": "SpaceTest", "class_uri": "src/test/java/net/datafaker/providers/base/SpaceTest.java.SpaceTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/CannabisTest.java.CannabisTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Cannabis cannabis = faker.cannabis();\n        return List.of(TestSpec.of(cannabis::strains, \"cannabis.strains\"),\n                TestSpec.of(cannabis::cannabinoidAbbreviations, \"cannabis.cannabinoid_abbreviations\"),\n                TestSpec.of(cannabis::cannabinoids, \"cannabis.cannabinoids\"),\n                TestSpec.of(cannabis::terpenes, \"cannabis.terpenes\"),\n                TestSpec.of(cannabis::medicalUses, \"cannabis.medical_uses\"),\n                TestSpec.of(cannabis::healthBenefits, \"cannabis.health_benefits\"),\n                TestSpec.of(cannabis::categories, \"cannabis.categories\"),\n                TestSpec.of(cannabis::types, \"cannabis.types\"),\n                TestSpec.of(cannabis::buzzwords, \"cannabis.buzzwords\"),\n                TestSpec.of(cannabis::brands, \"cannabis.brands\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/CannabisTest.java", "class_name": "CannabisTest", "class_uri": "src/test/java/net/datafaker/providers/base/CannabisTest.java.CannabisTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/UniversityTest.java.UniversityTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(university::prefix, \"university.prefix\"),\n            TestSpec.of(university::suffix, \"university.suffix\"),\n            TestSpec.of(university::degree, \"university.degree\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/UniversityTest.java", "class_name": "UniversityTest", "class_uri": "src/test/java/net/datafaker/providers/base/UniversityTest.java.UniversityTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AviationTest.java.AviationTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(aviation::airport, \"aviation.airport\", \"\\\\w{4}\"),\n            TestSpec.of(aviation::airportName, \"aviation.airport_name\"),\n            TestSpec.of(aviation::airplane, \"aviation.aircraft.airplane\"),\n            TestSpec.of(aviation::warplane, \"aviation.aircraft.warplane\"),\n            TestSpec.of(aviation::general, \"aviation.aircraft.general\"),\n            TestSpec.of(aviation::cargo, \"aviation.aircraft.cargo\"),\n            TestSpec.of(aviation::civilHelicopter, \"aviation.aircraft.civil_helicopter\"),\n            TestSpec.of(aviation::armyHelicopter, \"aviation.aircraft.army_helicopter\"),\n            TestSpec.of(aviation::METAR, \"aviation.metar\"),\n            TestSpec.of(aviation::manufacturer, \"aviation.manufacturer\"),\n            TestSpec.of(aviation::specialTypeDesignator, \"aviation.aircraft_type_special_designator\"),\n            TestSpec.of(aviation::engineType, \"aviation.engine_type\"),\n            TestSpec.of(aviation::flightStatus, \"aviation.flight_status\"),\n            TestSpec.of(aviation::airline, \"aviation.airline\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AviationTest.java", "class_name": "AviationTest", "class_uri": "src/test/java/net/datafaker/providers/base/AviationTest.java.AviationTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/MedicalTest.java.MedicalTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Medical medical = faker.medical();\n        return List.of(TestSpec.of(medical::medicineName, \"medical.medicine_name\"),\n                TestSpec.of(medical::diseaseName, \"medical.disease_name\"),\n                TestSpec.of(medical::hospitalName, \"medical.hospital_name\"),\n                TestSpec.of(medical::symptoms, \"medical.symptoms\"),\n                TestSpec.of(medical::medicalProfession, \"medical.medical_professions\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/MedicalTest.java", "class_name": "MedicalTest", "class_uri": "src/test/java/net/datafaker/providers/base/MedicalTest.java.MedicalTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayLocalDateTest.java.DateAndTime_birthdayLocalDateTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        dateAndTime = new DateAndTime(new BaseFaker());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayLocalDateTest.java", "class_name": "DateAndTime_birthdayLocalDateTest", "class_uri": "src/test/java/net/datafaker/providers/base/DateAndTime_birthdayLocalDateTest.java.DateAndTime_birthdayLocalDateTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/JobTest.java.JobTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Job job = faker.job();\n        return List.of(TestSpec.of(job::field, \"job.field\"),\n            TestSpec.of(job::seniority, \"job.seniority\"),\n            TestSpec.of(job::position, \"job.position\"),\n            TestSpec.of(job::keySkills, \"job.key_skills\", \"(?:[A-Za-z-]+ ?){1,3}\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/JobTest.java", "class_name": "JobTest", "class_uri": "src/test/java/net/datafaker/providers/base/JobTest.java.JobTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Lorem_paragraphsTest.java.Lorem_paragraphsTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        BaseProviders faker = new BaseFaker();\n        lorem = new Lorem(faker);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Lorem_paragraphsTest.java", "class_name": "Lorem_paragraphsTest", "class_uri": "src/test/java/net/datafaker/providers/base/Lorem_paragraphsTest.java.Lorem_paragraphsTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ElectricalComponentsTest.java.ElectricalComponentsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        ElectricalComponents electricalComponents = faker.electricalComponents();\n        return List.of(TestSpec.of(electricalComponents::active, \"electrical_components.active\"),\n            TestSpec.of(electricalComponents::passive, \"electrical_components.passive\"),\n            TestSpec.of(electricalComponents::electromechanical, \"electrical_components.electromechanical\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ElectricalComponentsTest.java", "class_name": "ElectricalComponentsTest", "class_uri": "src/test/java/net/datafaker/providers/base/ElectricalComponentsTest.java.ElectricalComponentsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/YodaTest.java.YodaTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Yoda yoda = faker.yoda();\n        return List.of(TestSpec.of(yoda::quote, \"yoda.quotes\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/YodaTest.java", "class_name": "YodaTest", "class_uri": "src/test/java/net/datafaker/providers/base/YodaTest.java.YodaTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n                TestSpec.of(planet::name, \"planet.name\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/PlanetTest.java", "class_name": "PlanetTest", "class_uri": "src/test/java/net/datafaker/providers/base/PlanetTest.java.PlanetTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Locality_localeStringWithRandomTest.java.Locality_localeStringWithRandomTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        locality = new Locality(new net.datafaker.Faker());\n        random = new Random();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Locality_localeStringWithRandomTest.java", "class_name": "Locality_localeStringWithRandomTest", "class_uri": "src/test/java/net/datafaker/providers/base/Locality_localeStringWithRandomTest.java.Locality_localeStringWithRandomTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/ChiquitoTest.java.ChiquitoTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        Chiquito chiquito = faker.chiquito();\n        return List.of(TestSpec.of(chiquito::expressions, \"chiquito.expressions\"),\n            TestSpec.of(chiquito::terms, \"chiquito.terms\"),\n            TestSpec.of(chiquito::sentences, \"chiquito.sentences\"),\n            TestSpec.of(chiquito::jokes, \"chiquito.jokes\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/ChiquitoTest.java", "class_name": "ChiquitoTest", "class_uri": "src/test/java/net/datafaker/providers/base/ChiquitoTest.java.ChiquitoTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/RockBandTest.java.RockBandTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        RockBand band = faker.rockBand();\n        return List.of(TestSpec.of(band::name, \"rock_band.name\", \"([\\\\w'/.,&]+ ?)+\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/RockBandTest.java", "class_name": "RockBandTest", "class_uri": "src/test/java/net/datafaker/providers/base/RockBandTest.java.RockBandTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/AppTest.java.AppTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(app::name, \"app.name\", \"([\\\\w-]+ ?)+\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/AppTest.java", "class_name": "AppTest", "class_uri": "src/test/java/net/datafaker/providers/base/AppTest.java.AppTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/base/Number_digitsTest.java.Number_digitsTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        faker = new BaseFaker();\n        number = new Number(faker);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/base/Number_digitsTest.java", "class_name": "Number_digitsTest", "class_uri": "src/test/java/net/datafaker/providers/base/Number_digitsTest.java.Number_digitsTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/foods/TeaTest.java.TeaTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(tea::type, \"tea.type\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/foods/TeaTest.java", "class_name": "TeaTest", "class_uri": "src/test/java/net/datafaker/providers/foods/TeaTest.java.TeaTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/foods/HebrewFoodTest.java.HebrewFoodTest.[void]before()", "name": "before", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    final void before()", "original_string": "    @BeforeEach\n    final void before() {\n        food = getFaker().food();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/foods/HebrewFoodTest.java", "class_name": "HebrewFoodTest", "class_uri": "src/test/java/net/datafaker/providers/foods/HebrewFoodTest.java.HebrewFoodTest", "attributes": {"modifiers": "@BeforeEach\n    final", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/foods/HebrewFoodTest.java.HebrewFoodTest.[FoodFaker]getFaker()", "name": "getFaker", "arg_nums": 0, "params": [], "return_type": "FoodFaker", "signature": "protected FoodFaker getFaker()", "original_string": "    protected FoodFaker getFaker() {\n        return new FoodFaker(new Locale(\"he\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/foods/HebrewFoodTest.java", "class_name": "HebrewFoodTest", "class_uri": "src/test/java/net/datafaker/providers/foods/HebrewFoodTest.java.HebrewFoodTest", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "FoodFaker", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/foods/HebrewFoodTest.java.HebrewFoodTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(food::dish, \"food.dish\"),\n            TestSpec.of(food::fruit, \"food.fruits\"),\n            TestSpec.of(food::ingredient, \"food.ingredients\"),\n            TestSpec.of(food::spice, \"food.spices\"),\n            TestSpec.of(food::sushi, \"food.sushi\"),\n            TestSpec.of(food::vegetable, \"food.vegetables\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/foods/HebrewFoodTest.java", "class_name": "HebrewFoodTest", "class_uri": "src/test/java/net/datafaker/providers/foods/HebrewFoodTest.java.HebrewFoodTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/foods/BeerTest.java.BeerTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(beer::brand, \"beer.brand\"),\n            TestSpec.of(beer::hop, \"beer.hop\"),\n            TestSpec.of(beer::malt, \"beer.malt\"),\n            TestSpec.of(beer::name, \"beer.name\"),\n            TestSpec.of(beer::style, \"beer.style\"),\n            TestSpec.of(beer::yeast, \"beer.yeast\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/foods/BeerTest.java", "class_name": "BeerTest", "class_uri": "src/test/java/net/datafaker/providers/foods/BeerTest.java.BeerTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/foods/CoffeeTest.java.CoffeeTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(coffee::body, \"coffee.body\"),\n            TestSpec.of(coffee::country, \"coffee.country\"),\n            TestSpec.of(coffee::descriptor, \"coffee.descriptor\"),\n            TestSpec.of(coffee::intensifier, \"coffee.intensifier\"),\n            TestSpec.of(coffee::name1, \"coffee.name_1\"),\n            TestSpec.of(coffee::name2, \"coffee.name_2\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.BRAZIL), \"coffee.regions.brazil\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.BURUNDI), \"coffee.regions.burundi\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.COLOMBIA), \"coffee.regions.colombia\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.COSTA_RICA), \"coffee.regions.costa_rica\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.EL_SALVADOR), \"coffee.regions.el_salvador\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.ETHIOPIA), \"coffee.regions.ethiopia\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.GUATEMALA), \"coffee.regions.guatemala\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.HONDURAS), \"coffee.regions.honduras\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.INDIA), \"coffee.regions.india\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.KENYA), \"coffee.regions.kenya\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.MEXICO), \"coffee.regions.mexico\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.NICARAGUA), \"coffee.regions.nicaragua\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.PANAMA), \"coffee.regions.panama\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.RWANDA), \"coffee.regions.rwanda\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.SUMATRA), \"coffee.regions.sumatra\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.TANZANIA), \"coffee.regions.tanzania\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.UGANDA), \"coffee.regions.uganda\"),\n            TestSpec.of(() -> coffee.region(Coffee.Country.YEMEN), \"coffee.regions.yemen\"),\n            TestSpec.of(coffee::variety, \"coffee.variety\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/foods/CoffeeTest.java", "class_name": "CoffeeTest", "class_uri": "src/test/java/net/datafaker/providers/foods/CoffeeTest.java.CoffeeTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/foods/DessertTest.java.DessertTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(dessert::flavor, \"dessert.flavor\"),\n            TestSpec.of(dessert::topping, \"dessert.topping\"),\n            TestSpec.of(dessert::variety, \"dessert.variety\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/foods/DessertTest.java", "class_name": "DessertTest", "class_uri": "src/test/java/net/datafaker/providers/foods/DessertTest.java.DessertTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/foods/FoodFakerTest.java.FoodFakerTest.[FoodFaker]getFaker()", "name": "getFaker", "arg_nums": 0, "params": [], "return_type": "FoodFaker", "signature": "@Override\n    protected FoodFaker getFaker()", "original_string": "    @Override\n    protected FoodFaker getFaker() {\n        return new FoodFaker();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/foods/FoodFakerTest.java", "class_name": "FoodFakerTest", "class_uri": "src/test/java/net/datafaker/providers/foods/FoodFakerTest.java.FoodFakerTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "FoodFaker", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/foods/FoodTest.java.FoodTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(food::allergen, \"food.allergens\"),\n            TestSpec.of(food::dish, \"food.dish\"),\n            TestSpec.of(food::fruit, \"food.fruits\"),\n            TestSpec.of(food::ingredient, \"food.ingredients\"),\n            TestSpec.of(food::spice, \"food.spices\"),\n            TestSpec.of(food::sushi, \"food.sushi\"),\n            TestSpec.of(food::vegetable, \"food.vegetables\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/foods/FoodTest.java", "class_name": "FoodTest", "class_uri": "src/test/java/net/datafaker/providers/foods/FoodTest.java.FoodTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/sport/Formula1Test.java.Formula1Test.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(formula1::circuit, \"formula1.circuit\"),\n            TestSpec.of(formula1::driver, \"formula1.driver\"),\n            TestSpec.of(formula1::grandPrix, \"formula1.grand_prix\"),\n            TestSpec.of(formula1::team, \"formula1.team\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/sport/Formula1Test.java", "class_name": "Formula1Test", "class_uri": "src/test/java/net/datafaker/providers/sport/Formula1Test.java.Formula1Test", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/sport/EnglandFootBallTest.java.EnglandFootBallTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(englandFootBall::league, \"englandfootball.leagues\"),\n            TestSpec.of(englandFootBall::team, \"englandfootball.teams\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/sport/EnglandFootBallTest.java", "class_name": "EnglandFootBallTest", "class_uri": "src/test/java/net/datafaker/providers/sport/EnglandFootBallTest.java.EnglandFootBallTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/sport/VolleyballTest.java.VolleyballTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(volleyball::coach, \"volleyball.coach\"),\n            TestSpec.of(volleyball::formation, \"volleyball.formation\"),\n            TestSpec.of(volleyball::player, \"volleyball.player\"),\n            TestSpec.of(volleyball::position, \"volleyball.position\"),\n            TestSpec.of(volleyball::team, \"volleyball.team\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/sport/VolleyballTest.java", "class_name": "VolleyballTest", "class_uri": "src/test/java/net/datafaker/providers/sport/VolleyballTest.java.VolleyballTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/sport/ChessTest.java.ChessTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(chess::opening, \"chess.openings\"),\n            TestSpec.of(chess::player, \"chess.players\"),\n            TestSpec.of(chess::title, \"chess.titles\"),\n            TestSpec.of(chess::tournament, \"chess.tournaments\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/sport/ChessTest.java", "class_name": "ChessTest", "class_uri": "src/test/java/net/datafaker/providers/sport/ChessTest.java.ChessTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/sport/BaseballTest.java.BaseballTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(baseball::coaches, \"baseball.coaches\"),\n            TestSpec.of(baseball::players, \"baseball.players\"),\n            TestSpec.of(baseball::positions, \"baseball.positions\"),\n            TestSpec.of(baseball::teams, \"baseball.teams\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/sport/BaseballTest.java", "class_name": "BaseballTest", "class_uri": "src/test/java/net/datafaker/providers/sport/BaseballTest.java.BaseballTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/sport/FootballTest.java.FootballTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(football::coaches, \"football.coaches\"),\n            TestSpec.of(football::competitions, \"football.competitions\"),\n            TestSpec.of(football::players, \"football.players\"),\n            TestSpec.of(football::positions, \"football.positions\"),\n            TestSpec.of(football::teams, \"football.teams\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/sport/FootballTest.java", "class_name": "FootballTest", "class_uri": "src/test/java/net/datafaker/providers/sport/FootballTest.java.FootballTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/sport/BasketballTest.java.BasketballTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(basketball::coaches, \"basketball.coaches\"),\n            TestSpec.of(basketball::players, \"basketball.players\"),\n            TestSpec.of(basketball::positions, \"basketball.positions\"),\n            TestSpec.of(basketball::teams, \"basketball.teams\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/sport/BasketballTest.java", "class_name": "BasketballTest", "class_uri": "src/test/java/net/datafaker/providers/sport/BasketballTest.java.BasketballTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/sport/SportFakerTest.java.SportFakerTest.[SportFaker]getFaker()", "name": "getFaker", "arg_nums": 0, "params": [], "return_type": "SportFaker", "signature": "@Override\n    protected SportFaker getFaker()", "original_string": "    @Override\n    protected SportFaker getFaker() {\n        return new SportFaker();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/sport/SportFakerTest.java", "class_name": "SportFakerTest", "class_uri": "src/test/java/net/datafaker/providers/sport/SportFakerTest.java.SportFakerTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "SportFaker", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/sport/CricketTest.java.CricketTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(cricket::formats, \"cricket.formats\"),\n            TestSpec.of(cricket::players, \"cricket.players\"),\n            TestSpec.of(cricket::teams, \"cricket.teams\"),\n            TestSpec.of(cricket::tournaments, \"cricket.tournaments\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/sport/CricketTest.java", "class_name": "CricketTest", "class_uri": "src/test/java/net/datafaker/providers/sport/CricketTest.java.CricketTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/ClashOfClansTest.java.ClashOfClansTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(clashOfClans::defensiveBuilding, \"clash_of_clans.defensive_buildings\"),\n            TestSpec.of(clashOfClans::rank, \"clash_of_clans.ranks\"),\n            TestSpec.of(clashOfClans::troop, \"clash_of_clans.troops\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/ClashOfClansTest.java", "class_name": "ClashOfClansTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/ClashOfClansTest.java.ClashOfClansTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/DarkSoulsTest.java.DarkSoulsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(darkSouls::classes, \"dark_souls.classes\"),\n            TestSpec.of(darkSouls::covenants, \"dark_souls.covenants\"),\n            TestSpec.of(darkSouls::shield, \"dark_souls.shield\"),\n            TestSpec.of(darkSouls::stats, \"dark_souls.stats\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/DarkSoulsTest.java", "class_name": "DarkSoulsTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/DarkSoulsTest.java.DarkSoulsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/HearthstoneTest.java.HearthstoneTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(hearthstone::mainCharacter, \"games.hearthstone.characters\"),\n            TestSpec.of(hearthstone::mainPattern, \"games.hearthstone.patterns\"),\n            TestSpec.of(hearthstone::mainProfession, \"games.hearthstone.professions\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/HearthstoneTest.java", "class_name": "HearthstoneTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/HearthstoneTest.java.HearthstoneTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/WorldOfWarcraftTest.java.WorldOfWarcraftTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(worldOfWarcraft::hero, \"games.world_of_warcraft.hero\"),\n            TestSpec.of(worldOfWarcraft::quotes, \"games.world_of_warcraft.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/WorldOfWarcraftTest.java", "class_name": "WorldOfWarcraftTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/WorldOfWarcraftTest.java.WorldOfWarcraftTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/Battlefield1Test.java.Battlefield1Test.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(battlefield1::classes, \"battlefield1.classes\"),\n            TestSpec.of(battlefield1::faction, \"battlefield1.faction\"),\n            TestSpec.of(battlefield1::map, \"battlefield1.map\"),\n            TestSpec.of(battlefield1::vehicle, \"battlefield1.vehicle\"),\n            TestSpec.of(battlefield1::weapon, \"battlefield1.weapon\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/Battlefield1Test.java", "class_name": "Battlefield1Test", "class_uri": "src/test/java/net/datafaker/providers/videogame/Battlefield1Test.java.Battlefield1Test", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/RedDeadRedemption2Test.java.RedDeadRedemption2Test.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(redDeadRedemption2::protagonist, \"red_dead_redemption2.protagonists\"),\n            TestSpec.of(redDeadRedemption2::gangMember, \"red_dead_redemption2.gang_members\"),\n            TestSpec.of(redDeadRedemption2::majorCharacter, \"red_dead_redemption2.major_characters\"),\n            TestSpec.of(redDeadRedemption2::animal, \"red_dead_redemption2.animals\"),\n            TestSpec.of(redDeadRedemption2::state, \"red_dead_redemption2.states\"),\n            TestSpec.of(redDeadRedemption2::region, \"red_dead_redemption2.regions\"),\n            TestSpec.of(redDeadRedemption2::settlement, \"red_dead_redemption2.settlements\"),\n            TestSpec.of(redDeadRedemption2::quote, \"red_dead_redemption2.quotes\"),\n            TestSpec.of(redDeadRedemption2::weapon, \"red_dead_redemption2.weapons\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/RedDeadRedemption2Test.java", "class_name": "RedDeadRedemption2Test", "class_uri": "src/test/java/net/datafaker/providers/videogame/RedDeadRedemption2Test.java.RedDeadRedemption2Test", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/HalfLifeTest.java.HalfLifeTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(halfLife::character, \"games.half_life.character\"),\n            TestSpec.of(halfLife::enemy, \"games.half_life.enemy\"),\n            TestSpec.of(halfLife::location, \"games.half_life.location\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/HalfLifeTest.java", "class_name": "HalfLifeTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/HalfLifeTest.java.HalfLifeTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/LeagueOfLegendsTest.java.LeagueOfLegendsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(leagueOfLegends::champion, \"games.league_of_legends.champion\"),\n            TestSpec.of(leagueOfLegends::location, \"games.league_of_legends.location\"),\n            TestSpec.of(leagueOfLegends::masteries, \"games.league_of_legends.masteries\"),\n            TestSpec.of(leagueOfLegends::quote, \"games.league_of_legends.quote\"),\n            TestSpec.of(leagueOfLegends::rank, \"games.league_of_legends.rank\"),\n            TestSpec.of(leagueOfLegends::summonerSpell, \"games.league_of_legends.summoner_spell\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/LeagueOfLegendsTest.java", "class_name": "LeagueOfLegendsTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/LeagueOfLegendsTest.java.LeagueOfLegendsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/EldenRingTest.java.EldenRingTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(eldenRing::location, \"elden_ring.location\"),\n            TestSpec.of(eldenRing::npc, \"elden_ring.npc\"),\n            TestSpec.of(eldenRing::skill, \"elden_ring.skill\"),\n            TestSpec.of(eldenRing::spell, \"elden_ring.spell\"),\n            TestSpec.of(eldenRing::weapon, \"elden_ring.weapon\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/EldenRingTest.java", "class_name": "EldenRingTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/EldenRingTest.java.EldenRingTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/VideoGameFakerTest.java.VideoGameFakerTest.[VideoGameFaker]getFaker()", "name": "getFaker", "arg_nums": 0, "params": [], "return_type": "VideoGameFaker", "signature": "@Override\n    protected VideoGameFaker getFaker()", "original_string": "    @Override\n    protected VideoGameFaker getFaker() {\n        return new VideoGameFaker();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/VideoGameFakerTest.java", "class_name": "VideoGameFakerTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/VideoGameFakerTest.java.VideoGameFakerTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "VideoGameFaker", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/HeroesOfTheStormTest.java.HeroesOfTheStormTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(heroesOfTheStorm::battleground, \"heroes_of_the_storm.battlegrounds\"),\n            TestSpec.of(heroesOfTheStorm::hero, \"heroes_of_the_storm.heroes\"),\n            TestSpec.of(heroesOfTheStorm::heroClass, \"heroes_of_the_storm.classes\"),\n            TestSpec.of(heroesOfTheStorm::quote, \"heroes_of_the_storm.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/HeroesOfTheStormTest.java", "class_name": "HeroesOfTheStormTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/HeroesOfTheStormTest.java.HeroesOfTheStormTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/SonicTheHedgehogTest.java.SonicTheHedgehogTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(sonicTheHedgehog::character, \"games.sonic_the_hedgehog.character\"),\n            TestSpec.of(sonicTheHedgehog::game, \"games.sonic_the_hedgehog.game\"),\n            TestSpec.of(sonicTheHedgehog::zone, \"games.sonic_the_hedgehog.zone\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/SonicTheHedgehogTest.java", "class_name": "SonicTheHedgehogTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/SonicTheHedgehogTest.java.SonicTheHedgehogTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/SuperMarioTest.java.SuperMarioTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(superMario::characters, \"games.super_mario.characters\"),\n            TestSpec.of(superMario::games, \"games.super_mario.games\"),\n            TestSpec.of(superMario::locations, \"games.super_mario.locations\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/SuperMarioTest.java", "class_name": "SuperMarioTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/SuperMarioTest.java.SuperMarioTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/EsportsTest.java.EsportsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(esports::event, \"esport.events\"),\n            TestSpec.of(esports::game, \"esport.games\"),\n            TestSpec.of(esports::league, \"esport.leagues\"),\n            TestSpec.of(esports::player, \"esport.players\"),\n            TestSpec.of(esports::team, \"esport.teams\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/EsportsTest.java", "class_name": "EsportsTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/EsportsTest.java.EsportsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/MinecraftTest.java.MinecraftTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(minecraft::animalName, \"minecraft.animal_name\"),\n            TestSpec.of(minecraft::entityName, \"minecraft.entity_name\"),\n            TestSpec.of(minecraft::itemName, \"minecraft.item_name\"),\n            TestSpec.of(minecraft::monsterName, \"minecraft.monster_name\"),\n            TestSpec.of(minecraft::tileName, \"minecraft.tile_name\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/MinecraftTest.java", "class_name": "MinecraftTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/MinecraftTest.java.MinecraftTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/ZeldaTest.java.ZeldaTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(zelda::character, \"games.zelda.characters\"),\n            TestSpec.of(zelda::game, \"games.zelda.games\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/ZeldaTest.java", "class_name": "ZeldaTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/ZeldaTest.java.ZeldaTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/VideoGameTest.java.VideoGameTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(videoGame::genre, \"video_game.genre\"),\n            TestSpec.of(videoGame::platform, \"video_game.platform\"),\n            TestSpec.of(videoGame::title, \"video_game.title\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/VideoGameTest.java", "class_name": "VideoGameTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/VideoGameTest.java.VideoGameTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/MarvelSnapTest.java.MarvelSnapTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(marvelSnap::character, \"games.marvel_snap.characters\"),\n            TestSpec.of(marvelSnap::event, \"games.marvel_snap.events\"),\n            TestSpec.of(marvelSnap::rank, \"games.marvel_snap.rank\"),\n            TestSpec.of(marvelSnap::zone, \"games.marvel_snap.zones\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/MarvelSnapTest.java", "class_name": "MarvelSnapTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/MarvelSnapTest.java.MarvelSnapTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/FalloutTest.java.FalloutTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(fallout::character, \"fallout.characters\"),\n            TestSpec.of(fallout::faction, \"fallout.factions\"),\n            TestSpec.of(fallout::location, \"fallout.locations\"),\n            TestSpec.of(fallout::quote, \"fallout.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/FalloutTest.java", "class_name": "FalloutTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/FalloutTest.java.FalloutTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/MystTest.java.MystTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(myst::ages, \"games.myst.ages\"),\n            TestSpec.of(myst::characters, \"games.myst.characters\"),\n            TestSpec.of(myst::creatures, \"games.myst.creatures\"),\n            TestSpec.of(myst::games, \"games.myst.games\"),\n            TestSpec.of(myst::quotes, \"games.myst.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/MystTest.java", "class_name": "MystTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/MystTest.java.MystTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/MassEffectTest.java.MassEffectTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(massEffect::character, \"mass_effect.characters\"),\n            TestSpec.of(massEffect::cluster, \"mass_effect.cluster\"),\n            TestSpec.of(massEffect::planet, \"mass_effect.planets\"),\n            TestSpec.of(massEffect::quote, \"mass_effect.quotes\"),\n            TestSpec.of(massEffect::specie, \"mass_effect.species\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/MassEffectTest.java", "class_name": "MassEffectTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/MassEffectTest.java.MassEffectTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/ControlTest.java.ControlTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(control::alteredItem, \"control.altered_item\"),\n            TestSpec.of(control::alteredWorldEvent, \"control.altered_world_event\"),\n            TestSpec.of(control::character, \"control.character\"),\n            TestSpec.of(control::hiss, \"control.hiss\"),\n            TestSpec.of(control::location, \"control.location\"),\n            TestSpec.of(control::objectOfPower, \"control.object_of_power\"),\n            TestSpec.of(control::quote, \"control.quote\"),\n            TestSpec.of(control::theBoard, \"control.the_board\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/ControlTest.java", "class_name": "ControlTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/ControlTest.java.ControlTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/TouhouTest.java.TouhouTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(touhou::characterFirstName, \"touhou.first_name\"),\n            TestSpec.of(touhou::characterLastName, \"touhou.last_name\"),\n            TestSpec.of(touhou::characterName, \"touhou.full_name\"),\n            TestSpec.of(touhou::gameName, \"touhou.game_name\"),\n            TestSpec.of(touhou::trackName, \"touhou.track_name\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/TouhouTest.java", "class_name": "TouhouTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/TouhouTest.java.TouhouTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/StreetFighterTest.java.StreetFighterTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(streetFighter::characters, \"games.street_fighter.characters\"),\n            TestSpec.of(streetFighter::moves, \"games.street_fighter.moves\"),\n            TestSpec.of(streetFighter::stages, \"games.street_fighter.stages\"),\n            TestSpec.of(streetFighter::quotes, \"games.street_fighter.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/StreetFighterTest.java", "class_name": "StreetFighterTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/StreetFighterTest.java.StreetFighterTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/Dota2Test.java.Dota2Test.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(dota2::faction, \"games.dota2.faction\"),\n            TestSpec.of(dota2::rank, \"games.dota2.rank\"),\n            TestSpec.of(dota2::attribute, \"games.dota2.attribute\"),\n            TestSpec.of(dota2::building, \"games.dota2.building\"),\n            TestSpec.of(dota2::hero, \"games.dota2.hero\"),\n            TestSpec.of(dota2::item, \"games.dota2.item\"),\n            TestSpec.of(dota2::neutralItem, \"games.dota2.neutral_item\"),\n            TestSpec.of(dota2::team, \"games.dota2.team\"),\n            TestSpec.of(dota2::tier, \"games.dota2.tier\"),\n            TestSpec.of(dota2::player, \"games.dota2.player\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/Dota2Test.java", "class_name": "Dota2Test", "class_uri": "src/test/java/net/datafaker/providers/videogame/Dota2Test.java.Dota2Test", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/StarCraftTest.java.StarCraftTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(starCraft::building, \"starcraft.buildings\"),\n            TestSpec.of(starCraft::character, \"starcraft.characters\"),\n            TestSpec.of(starCraft::planet, \"starcraft.planets\"),\n            TestSpec.of(starCraft::unit, \"starcraft.units\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/StarCraftTest.java", "class_name": "StarCraftTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/StarCraftTest.java.StarCraftTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/ElderScrollsTest.java.ElderScrollsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(elderScrolls::city, \"games.elder_scrolls.city\"),\n            TestSpec.of(elderScrolls::creature, \"games.elder_scrolls.creature\"),\n            TestSpec.of(elderScrolls::dragon, \"games.elder_scrolls.dragon\"),\n            TestSpec.of(elderScrolls::firstName, \"games.elder_scrolls.first_name\"),\n            TestSpec.of(elderScrolls::lastName, \"games.elder_scrolls.last_name\"),\n            TestSpec.of(elderScrolls::quote, \"games.elder_scrolls.quote\"),\n            TestSpec.of(elderScrolls::race, \"games.elder_scrolls.race\"),\n            TestSpec.of(elderScrolls::region, \"games.elder_scrolls.region\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/ElderScrollsTest.java", "class_name": "ElderScrollsTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/ElderScrollsTest.java.ElderScrollsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/WarhammerFantasyTest.java.WarhammerFantasyTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(warhammerFantasy::creatures, \"games.warhammer_fantasy.creatures\"),\n            TestSpec.of(warhammerFantasy::factions, \"games.warhammer_fantasy.factions\"),\n            TestSpec.of(warhammerFantasy::heros, \"games.warhammer_fantasy.heros\"),\n            TestSpec.of(warhammerFantasy::locations, \"games.warhammer_fantasy.locations\"),\n            TestSpec.of(warhammerFantasy::quotes, \"games.warhammer_fantasy.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/WarhammerFantasyTest.java", "class_name": "WarhammerFantasyTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/WarhammerFantasyTest.java.WarhammerFantasyTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/OverwatchTest.java.OverwatchTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(overwatch::hero, \"games.overwatch.heroes\"),\n            TestSpec.of(overwatch::location, \"games.overwatch.locations\"),\n            TestSpec.of(overwatch::quote, \"games.overwatch.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/OverwatchTest.java", "class_name": "OverwatchTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/OverwatchTest.java.OverwatchTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/SoulKnightTest.java.SoulKnightTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(soulKnight::bosses, \"soul_knight.bosses\"),\n            TestSpec.of(soulKnight::buffs, \"soul_knight.buffs\"),\n            TestSpec.of(soulKnight::enemies, \"soul_knight.enemies\"),\n            TestSpec.of(soulKnight::statues, \"soul_knight.statues\"),\n            TestSpec.of(soulKnight::weapons, \"soul_knight.weapons\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/SoulKnightTest.java", "class_name": "SoulKnightTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/SoulKnightTest.java.SoulKnightTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/SuperSmashBrosTest.java.SuperSmashBrosTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(superSmashBros::fighter, \"games.super_smash_bros.fighter\"),\n            TestSpec.of(superSmashBros::stage, \"games.super_smash_bros.stage\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/SuperSmashBrosTest.java", "class_name": "SuperSmashBrosTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/SuperSmashBrosTest.java.SuperSmashBrosTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/videogame/FinalFantasyXIVTest.java.FinalFantasyXIVTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(finalFantasyXIV::character, \"final_fantasy_xiv.characters\"),\n            TestSpec.of(finalFantasyXIV::job, \"final_fantasy_xiv.jobs\"),\n            TestSpec.of(finalFantasyXIV::race, \"final_fantasy_xiv.races\"),\n            TestSpec.of(finalFantasyXIV::dataCenter, \"final_fantasy_xiv.data_centers\"),\n            TestSpec.of(finalFantasyXIV::zone, \"final_fantasy_xiv.zones\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/videogame/FinalFantasyXIVTest.java", "class_name": "FinalFantasyXIVTest", "class_uri": "src/test/java/net/datafaker/providers/videogame/FinalFantasyXIVTest.java.FinalFantasyXIVTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/healthcare/MedicationTest.java.MedicationTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(medication::drugName, \"healthcare.medication.drug_name\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/healthcare/MedicationTest.java", "class_name": "MedicationTest", "class_uri": "src/test/java/net/datafaker/providers/healthcare/MedicationTest.java.MedicationTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/healthcare/HealthcareFakerTest.java.HealthcareFakerTest.[HealthcareFaker]getFaker()", "name": "getFaker", "arg_nums": 0, "params": [], "return_type": "HealthcareFaker", "signature": "@Override\n    protected HealthcareFaker getFaker()", "original_string": "    @Override\n    protected HealthcareFaker getFaker() {\n        return new HealthcareFaker();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/healthcare/HealthcareFakerTest.java", "class_name": "HealthcareFakerTest", "class_uri": "src/test/java/net/datafaker/providers/healthcare/HealthcareFakerTest.java.HealthcareFakerTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "HealthcareFaker", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/healthcare/ObservationTest.java.ObservationTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(observation::symptom, \"healthcare.observation.symptom\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/healthcare/ObservationTest.java", "class_name": "ObservationTest", "class_uri": "src/test/java/net/datafaker/providers/healthcare/ObservationTest.java.ObservationTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/healthcare/CareProviderTest.java.CareProviderTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(careProvider::hospitalName, \"healthcare.care_provider.hospital_name\"),\n            TestSpec.of(careProvider::medicalProfession, \"healthcare.care_provider.medical_profession\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/healthcare/CareProviderTest.java", "class_name": "CareProviderTest", "class_uri": "src/test/java/net/datafaker/providers/healthcare/CareProviderTest.java.CareProviderTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/healthcare/DiseaseTest.java.DiseaseTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(disease::internalDisease, INTERNAL_DISEASE_KEY.yamlKey),\n            TestSpec.of(disease::neurology, NEUROLOGICAL_DISEASE_KEY.yamlKey),\n            TestSpec.of(disease::surgery, SURGICAL_DISEASE_KEY.yamlKey),\n            TestSpec.of(disease::paediatrics, PAEDIATRIC_DISEASE_KEY.yamlKey),\n            TestSpec.of(disease::gynecologyAndObstetrics, GYNECOLOGY_AND_OBSTETRICS_DISEASE_KEY.yamlKey),\n            TestSpec.of(disease::ophthalmologyAndOtorhinolaryngology, OPHTHALMOLOGY_AND_OTORHINOLARYNGOLOGY_DISEASE_KEY.yamlKey),\n            TestSpec.of(disease::dermatology, DERMATOLOGY_DISEASE_KEY.yamlKey));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/healthcare/DiseaseTest.java", "class_name": "DiseaseTest", "class_uri": "src/test/java/net/datafaker/providers/healthcare/DiseaseTest.java.DiseaseTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAirTest.java.FreshPrinceOfBelAirTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(freshPrinceOfBelAir::characters, \"fresh_prince_of_bel_air.characters\"),\n            TestSpec.of(freshPrinceOfBelAir::celebrities, \"fresh_prince_of_bel_air.celebrities\"),\n            TestSpec.of(freshPrinceOfBelAir::quotes, \"fresh_prince_of_bel_air.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAirTest.java", "class_name": "FreshPrinceOfBelAirTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAirTest.java.FreshPrinceOfBelAirTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/KaamelottTest.java.KaamelottTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(kaamelott::character, \"kaamelott.characters\"),\n            TestSpec.of(kaamelott::quote, \"kaamelott.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/KaamelottTest.java", "class_name": "KaamelottTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/KaamelottTest.java.KaamelottTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/LordOfTheRingsTest.java.LordOfTheRingsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(lordOfTheRings::character, \"lord_of_the_rings.characters\"),\n            TestSpec.of(lordOfTheRings::location, \"lord_of_the_rings.locations\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/LordOfTheRingsTest.java", "class_name": "LordOfTheRingsTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/LordOfTheRingsTest.java.LordOfTheRingsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/DragonBallTest.java.DragonBallTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(dragonBall::character, \"dragon_ball.characters\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/DragonBallTest.java", "class_name": "DragonBallTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/DragonBallTest.java.DragonBallTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/DoctorWhoTest.java.DoctorWhoTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(doctorWho::character, \"dr_who.character\"),\n            TestSpec.of(doctorWho::doctor, \"dr_who.the_doctors\"),\n            TestSpec.of(doctorWho::actor, \"dr_who.actors\"),\n            TestSpec.of(doctorWho::catchPhrase, \"dr_who.catch_phrases\"),\n            TestSpec.of(doctorWho::quote, \"dr_who.quotes\"),\n            TestSpec.of(doctorWho::villain, \"dr_who.villains\"),\n            TestSpec.of(doctorWho::species, \"dr_who.species\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/DoctorWhoTest.java", "class_name": "DoctorWhoTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/DoctorWhoTest.java.DoctorWhoTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SiliconValleyTest.java.SiliconValleyTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(siliconValley::app, \"silicon_valley.apps\"),\n            TestSpec.of(siliconValley::character, \"silicon_valley.characters\"),\n            TestSpec.of(siliconValley::company, \"silicon_valley.companies\"),\n            TestSpec.of(siliconValley::email, \"silicon_valley.email\"),\n            TestSpec.of(siliconValley::invention, \"silicon_valley.inventions\"),\n            TestSpec.of(siliconValley::motto, \"silicon_valley.mottos\"),\n            TestSpec.of(siliconValley::quote, \"silicon_valley.quotes\"),\n            TestSpec.of(siliconValley::url, \"silicon_valley.urls\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/SiliconValleyTest.java", "class_name": "SiliconValleyTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/SiliconValleyTest.java.SiliconValleyTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/GameOfThronesTest.java.GameOfThronesTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(gameOfThrones::character, \"game_of_thrones.characters\"),\n            TestSpec.of(gameOfThrones::city, \"game_of_thrones.cities\"),\n            TestSpec.of(gameOfThrones::dragon, \"game_of_thrones.dragons\"),\n            TestSpec.of(gameOfThrones::house, \"game_of_thrones.houses\"),\n            TestSpec.of(gameOfThrones::quote, \"game_of_thrones.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/GameOfThronesTest.java", "class_name": "GameOfThronesTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/GameOfThronesTest.java.GameOfThronesTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxyTest.java.HitchhikersGuideToTheGalaxyTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(hitchhikersGuideToTheGalaxy::character, \"hitchhikers_guide_to_the_galaxy.characters\"),\n            TestSpec.of(hitchhikersGuideToTheGalaxy::location, \"hitchhikers_guide_to_the_galaxy.locations\"),\n            TestSpec.of(hitchhikersGuideToTheGalaxy::marvinQuote, \"hitchhikers_guide_to_the_galaxy.marvin_quote\"),\n            TestSpec.of(hitchhikersGuideToTheGalaxy::planet, \"hitchhikers_guide_to_the_galaxy.planets\"),\n            TestSpec.of(hitchhikersGuideToTheGalaxy::species, \"hitchhikers_guide_to_the_galaxy.species\"),\n            TestSpec.of(hitchhikersGuideToTheGalaxy::starship, \"hitchhikers_guide_to_the_galaxy.starships\"),\n            TestSpec.of(hitchhikersGuideToTheGalaxy::quote, \"hitchhikers_guide_to_the_galaxy.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxyTest.java", "class_name": "HitchhikersGuideToTheGalaxyTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxyTest.java.HitchhikersGuideToTheGalaxyTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BossaNovaTest.java.BossaNovaTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(bossaNova::artist, \"bossa_nova.artists\"),\n            TestSpec.of(bossaNova::song, \"bossa_nova.songs\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/BossaNovaTest.java", "class_name": "BossaNovaTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/BossaNovaTest.java.BossaNovaTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/Babylon5Test.java.Babylon5Test.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(babylon5::character, \"babylon5.characters\"),\n            TestSpec.of(babylon5::quote, \"babylon5.quotes\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/Babylon5Test.java", "class_name": "Babylon5Test", "class_uri": "src/test/java/net/datafaker/providers/entertainment/Babylon5Test.java.Babylon5Test", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/ChuckNorrisTest.java.ChuckNorrisTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(chuckNorris::fact, \"chuck_norris.fact\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/ChuckNorrisTest.java", "class_name": "ChuckNorrisTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/ChuckNorrisTest.java.ChuckNorrisTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/EntertainmentTest.java.EntertainmentTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(show::adultMusical, \"show.adult_musical\"),\n            TestSpec.of(show::play, \"show.play\"),\n            TestSpec.of(show::kidsMusical, \"show.kids_musical\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/EntertainmentTest.java", "class_name": "EntertainmentTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/EntertainmentTest.java.EntertainmentTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TheVentureBrosTest.java.TheVentureBrosTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(theVentureBros::character, \"the_venture_bros.character\"),\n            TestSpec.of(theVentureBros::organization, \"the_venture_bros.organization\"),\n            TestSpec.of(theVentureBros::quote, \"the_venture_bros.quote\"),\n            TestSpec.of(theVentureBros::vehicle, \"the_venture_bros.vehicle\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/TheVentureBrosTest.java", "class_name": "TheVentureBrosTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/TheVentureBrosTest.java.TheVentureBrosTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/MovieTest.java.MovieTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(movie::quote, \"movie.quote\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/MovieTest.java", "class_name": "MovieTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/MovieTest.java.MovieTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/DumbAndDumberTest.java.DumbAndDumberTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(dumbAndDumber::actor, \"dumb_and_dumber.actors\"),\n            TestSpec.of(dumbAndDumber::character, \"dumb_and_dumber.characters\"),\n            TestSpec.of(dumbAndDumber::quote, \"dumb_and_dumber.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/DumbAndDumberTest.java", "class_name": "DumbAndDumberTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/DumbAndDumberTest.java.DumbAndDumberTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/FinalSpaceTest.java.FinalSpaceTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(finalSpace::character, \"final_space.characters\"),\n            TestSpec.of(finalSpace::quote, \"final_space.quotes\"),\n            TestSpec.of(finalSpace::vehicle, \"final_space.vehicles\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/FinalSpaceTest.java", "class_name": "FinalSpaceTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/FinalSpaceTest.java.FinalSpaceTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/FamilyGuyTest.java.FamilyGuyTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(familyGuy::character, \"family_guy.character\"),\n            TestSpec.of(familyGuy::location, \"family_guy.location\"),\n            TestSpec.of(familyGuy::quote, \"family_guy.quote\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/FamilyGuyTest.java", "class_name": "FamilyGuyTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/FamilyGuyTest.java.FamilyGuyTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/StargateTest.java.StargateTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(stargate::characters, \"stargate.characters\"),\n            TestSpec.of(stargate::planets, \"stargate.planets\"),\n            TestSpec.of(stargate::quotes, \"stargate.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/StargateTest.java", "class_name": "StargateTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/StargateTest.java.StargateTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SouthParkTest.java.SouthParkTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(southPark::characters, \"south_park.characters\"),\n            TestSpec.of(southPark::quotes, \"south_park.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/SouthParkTest.java", "class_name": "SouthParkTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/SouthParkTest.java.SouthParkTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SpongebobTest.java.SpongebobTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(spongebob::characters, \"spongebob.characters\"),\n            TestSpec.of(spongebob::episodes, \"spongebob.episodes\"),\n            TestSpec.of(spongebob::quotes, \"spongebob.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/SpongebobTest.java", "class_name": "SpongebobTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/SpongebobTest.java.SpongebobTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/DepartedTest.java.DepartedTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(departed::actor, \"departed.actors\"),\n            TestSpec.of(departed::character, \"departed.characters\"),\n            TestSpec.of(departed::quote, \"departed.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/DepartedTest.java", "class_name": "DepartedTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/DepartedTest.java.DepartedTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/WitcherTest.java.WitcherTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(witcher::book, \"games.witcher.books\"),\n            TestSpec.of(witcher::character, \"games.witcher.characters\"),\n            TestSpec.of(witcher::location, \"games.witcher.locations\"),\n            TestSpec.of(witcher::monster, \"games.witcher.monsters\"),\n            TestSpec.of(witcher::potion, \"games.witcher.potions\"),\n            TestSpec.of(witcher::quote, \"games.witcher.quotes\"),\n            TestSpec.of(witcher::sign, \"games.witcher.signs\"),\n            TestSpec.of(witcher::school, \"games.witcher.schools\"),\n            TestSpec.of(witcher::witcher, \"games.witcher.witchers\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/WitcherTest.java", "class_name": "WitcherTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/WitcherTest.java.WitcherTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/CowboyBebopTest.java.CowboyBebopTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(cowboyBebop::character, \"cowboy_bebop.character\"),\n            TestSpec.of(cowboyBebop::episode, \"cowboy_bebop.episode\"),\n            TestSpec.of(cowboyBebop::song, \"cowboy_bebop.song\"),\n            TestSpec.of(cowboyBebop::quote, \"cowboy_bebop.quote\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/CowboyBebopTest.java", "class_name": "CowboyBebopTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/CowboyBebopTest.java.CowboyBebopTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/DuneTest.java.DuneTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(dune::character, \"dune.characters\"),\n            TestSpec.of(dune::title, \"dune.titles\"),\n            TestSpec.of(dune::planet, \"dune.planets\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.ALIA), \"dune.quotes.alia\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.DUNCAN), \"dune.quotes.duncan\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.EMPEROR), \"dune.quotes.emperor\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.GURNEY), \"dune.quotes.gurney\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.IRULAN), \"dune.quotes.irulan\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.LETO), \"dune.quotes.leto\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.JESSICA), \"dune.quotes.jessica\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.BARON_HARKONNEN), \"dune.quotes.baron_harkonnen\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.GUILD_NAVIGATOR), \"dune.quotes.guild_navigator\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.LIET_KYNES), \"dune.quotes.liet_kynes\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.MAPES), \"dune.quotes.mapes\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.MOHIAM), \"dune.quotes.mohiam\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.PARDOT_KYNES), \"dune.quotes.pardot_kynes\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.PAUL), \"dune.quotes.paul\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.PITER), \"dune.quotes.piter\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.STILGAR), \"dune.quotes.stilgar\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.THUFIR), \"dune.quotes.thufir\"),\n            TestSpec.of(() -> dune.quote(Dune.Quote.YUEH), \"dune.quotes.yueh\"),\n            TestSpec.of(() -> dune.saying(Dune.Saying.BENE_GESSERIT), \"dune.sayings.bene_gesserit\"),\n            TestSpec.of(() -> dune.saying(Dune.Saying.MENTAT), \"dune.sayings.mentat\"),\n            TestSpec.of(() -> dune.saying(Dune.Saying.FREMEN), \"dune.sayings.fremen\"),\n            TestSpec.of(() -> dune.saying(Dune.Saying.MUADDIB), \"dune.sayings.muaddib\"),\n            TestSpec.of(() -> dune.saying(Dune.Saying.ORANGE_CATHOLIC_BIBLE), \"dune.sayings.orange_catholic_bible\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/DuneTest.java", "class_name": "DuneTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/DuneTest.java.DuneTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/PokemonTest.java.PokemonTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(pokemon::location, \"games.pokemon.locations\"),\n            TestSpec.of(pokemon::move, \"games.pokemon.moves\"),\n            TestSpec.of(pokemon::name, \"games.pokemon.names\"),\n            TestSpec.of(pokemon::type, \"games.pokemon.types\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/PokemonTest.java", "class_name": "PokemonTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/PokemonTest.java.PokemonTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TheExpanseTest.java.TheExpanseTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(theExpanse::characters, \"the_expanse.characters\"),\n            TestSpec.of(theExpanse::locations, \"the_expanse.locations\"),\n            TestSpec.of(theExpanse::quotes, \"the_expanse.quotes\"),\n            TestSpec.of(theExpanse::ships, \"the_expanse.ships\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/TheExpanseTest.java", "class_name": "TheExpanseTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/TheExpanseTest.java.TheExpanseTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/GratefulDeadTest.java.GratefulDeadTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(gratefulDead::players, \"grateful_dead.players\"),\n            TestSpec.of(gratefulDead::songs, \"grateful_dead.songs\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/GratefulDeadTest.java", "class_name": "GratefulDeadTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/GratefulDeadTest.java.GratefulDeadTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BojackHorsemanTest.java.BojackHorsemanTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(bojackHorseman::characters, \"bojack_horseman.characters\"),\n            TestSpec.of(bojackHorseman::quotes, \"bojack_horseman.quotes\"),\n            TestSpec.of(bojackHorseman::tongueTwisters, \"bojack_horseman.tongue_twisters\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/BojackHorsemanTest.java", "class_name": "BojackHorsemanTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/BojackHorsemanTest.java.BojackHorsemanTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/StarWarsTest.java.StarWarsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(starWars::character, \"star_wars.characters\"),\n            TestSpec.of(starWars::droids, \"star_wars.droids\"),\n            TestSpec.of(starWars::planets, \"star_wars.planets\"),\n            TestSpec.of(starWars::species, \"star_wars.species\"),\n            TestSpec.of(starWars::vehicles, \"star_wars.vehicles\"),\n            TestSpec.of(starWars::wookieWords, \"star_wars.wookiee_words\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/StarWarsTest.java", "class_name": "StarWarsTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/StarWarsTest.java.StarWarsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SuitsTest.java.SuitsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(suits::characters, \"suits.characters\"),\n            TestSpec.of(suits::quotes, \"suits.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/SuitsTest.java", "class_name": "SuitsTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/SuitsTest.java.SuitsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/HowToTrainYourDragonTest.java.HowToTrainYourDragonTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(howToTrainYourDragon::characters, \"how_to_train_your_dragon.characters\"),\n            TestSpec.of(howToTrainYourDragon::dragons, \"how_to_train_your_dragon.dragons\"),\n            TestSpec.of(howToTrainYourDragon::locations, \"how_to_train_your_dragon.locations\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/HowToTrainYourDragonTest.java", "class_name": "HowToTrainYourDragonTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/HowToTrainYourDragonTest.java.HowToTrainYourDragonTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TwinPeaksTest.java.TwinPeaksTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(twinPeaks::character, \"twin_peaks.characters\"),\n            TestSpec.of(twinPeaks::location, \"twin_peaks.locations\"),\n            TestSpec.of(twinPeaks::quote, \"twin_peaks.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/TwinPeaksTest.java", "class_name": "TwinPeaksTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/TwinPeaksTest.java.TwinPeaksTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/VForVendettaTest.java.VForVendettaTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(vForVendetta::characters, \"v_for_vendetta.characters\"),\n            TestSpec.of(vForVendetta::quotes, \"v_for_vendetta.quotes\"),\n            TestSpec.of(vForVendetta::speeches, \"v_for_vendetta.speeches\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/VForVendettaTest.java", "class_name": "VForVendettaTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/VForVendettaTest.java.VForVendettaTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/RuPaulDragRaceTest.java.RuPaulDragRaceTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(ruPaulDragRace::queen, \"rupaul.queens\"),\n            TestSpec.of(ruPaulDragRace::quote, \"rupaul.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/RuPaulDragRaceTest.java", "class_name": "RuPaulDragRaceTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/RuPaulDragRaceTest.java.RuPaulDragRaceTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/MoneyHeistTest.java.MoneyHeistTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(moneyHeist::character, \"money_heist.characters\"),\n            TestSpec.of(moneyHeist::heist, \"money_heist.heists\"),\n            TestSpec.of(moneyHeist::quote, \"money_heist.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/MoneyHeistTest.java", "class_name": "MoneyHeistTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/MoneyHeistTest.java.MoneyHeistTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BreakingBadTest.java.BreakingBadTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(breakingBad::character, \"breaking_bad.characters\"),\n            TestSpec.of(breakingBad::episode, \"breaking_bad.episodes\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/BreakingBadTest.java", "class_name": "BreakingBadTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/BreakingBadTest.java.BreakingBadTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BackToTheFutureTest.java.BackToTheFutureTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(backToTheFuture::character, \"back_to_the_future.characters\"),\n            TestSpec.of(backToTheFuture::date, \"back_to_the_future.dates\"),\n            TestSpec.of(backToTheFuture::quote, \"back_to_the_future.quotes\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/BackToTheFutureTest.java", "class_name": "BackToTheFutureTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/BackToTheFutureTest.java.BackToTheFutureTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/FullmetalAlchemistTest.java.FullmetalAlchemistTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(fullmetalAlchemist::character, \"fma_brotherhood.characters\"),\n            TestSpec.of(fullmetalAlchemist::city, \"fma_brotherhood.cities\"),\n            TestSpec.of(fullmetalAlchemist::country, \"fma_brotherhood.countries\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/FullmetalAlchemistTest.java", "class_name": "FullmetalAlchemistTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/FullmetalAlchemistTest.java.FullmetalAlchemistTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/NewGirlTest.java.NewGirlTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(newGirl::characters, \"new_girl.characters\"),\n            TestSpec.of(newGirl::quotes, \"new_girl.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/NewGirlTest.java", "class_name": "NewGirlTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/NewGirlTest.java.NewGirlTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/FriendsTest.java.FriendsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(friends::character, \"friends.characters\"),\n            TestSpec.of(friends::quote, \"friends.quotes\"),\n            TestSpec.of(friends::location, \"friends.locations\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/FriendsTest.java", "class_name": "FriendsTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/FriendsTest.java.FriendsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/HowIMetYourMotherTest.java.HowIMetYourMotherTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(howIMetYourMother::catchPhrase, \"how_i_met_your_mother.catch_phrase\"),\n            TestSpec.of(howIMetYourMother::character, \"how_i_met_your_mother.character\"),\n            TestSpec.of(howIMetYourMother::highFive, \"how_i_met_your_mother.high_five\"),\n            TestSpec.of(howIMetYourMother::quote, \"how_i_met_your_mother.quote\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/HowIMetYourMotherTest.java", "class_name": "HowIMetYourMotherTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/HowIMetYourMotherTest.java.HowIMetYourMotherTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SwordArtOnlineTest.java.SwordArtOnlineTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(swordArtOnline::gameName, \"sword_art_online.game_name\"),\n            TestSpec.of(swordArtOnline::item, \"sword_art_online.item\"),\n            TestSpec.of(swordArtOnline::location, \"sword_art_online.location\"),\n            TestSpec.of(swordArtOnline::realName, \"sword_art_online.real_name\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/SwordArtOnlineTest.java", "class_name": "SwordArtOnlineTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/SwordArtOnlineTest.java.SwordArtOnlineTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/AquaTeenHungerForceTest.java.AquaTeenHungerForceTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(aquaTeenHungerForce::character, \"aqua_teen_hunger_force.character\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/AquaTeenHungerForceTest.java", "class_name": "AquaTeenHungerForceTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/AquaTeenHungerForceTest.java.AquaTeenHungerForceTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/LebowskiTest.java.LebowskiTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(lebowski::actor, \"lebowski.actors\"),\n            TestSpec.of(lebowski::character, \"lebowski.characters\"),\n            TestSpec.of(lebowski::quote, \"lebowski.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/LebowskiTest.java", "class_name": "LebowskiTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/LebowskiTest.java.LebowskiTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/EntertainmentFakerTest.java.EntertainmentFakerTest.[EntertainmentFaker]getFaker()", "name": "getFaker", "arg_nums": 0, "params": [], "return_type": "EntertainmentFaker", "signature": "@Override\n    protected EntertainmentFaker getFaker()", "original_string": "    @Override\n    protected EntertainmentFaker getFaker() {\n        return new EntertainmentFaker();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/EntertainmentFakerTest.java", "class_name": "EntertainmentFakerTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/EntertainmentFakerTest.java.EntertainmentFakerTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "EntertainmentFaker", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TheKingkillerChronicleTest.java.TheKingkillerChronicleTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(theKingkillerChronicle::book, \"the_kingkiller_chronicle.books\"),\n            TestSpec.of(theKingkillerChronicle::character, \"the_kingkiller_chronicle.characters\"),\n            TestSpec.of(theKingkillerChronicle::creature, \"the_kingkiller_chronicle.creatures\"),\n            TestSpec.of(theKingkillerChronicle::location, \"the_kingkiller_chronicle.locations\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/TheKingkillerChronicleTest.java", "class_name": "TheKingkillerChronicleTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/TheKingkillerChronicleTest.java.TheKingkillerChronicleTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/ResidentEvilTest.java.ResidentEvilTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(residentEvil::biologicalAgent, \"games.resident_evil.biological-agents\"),\n            TestSpec.of(residentEvil::character, \"games.resident_evil.characters\"),\n            TestSpec.of(residentEvil::creature, \"games.resident_evil.creatures\"),\n            TestSpec.of(residentEvil::equipment, \"games.resident_evil.equipments\"),\n            TestSpec.of(residentEvil::location, \"games.resident_evil.locations\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/ResidentEvilTest.java", "class_name": "ResidentEvilTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/ResidentEvilTest.java.ResidentEvilTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SeinfeldTest.java.SeinfeldTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(seinfeld::business, \"seinfeld.business\"),\n            TestSpec.of(seinfeld::character, \"seinfeld.character\"),\n            TestSpec.of(seinfeld::quote, \"seinfeld.quote\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/SeinfeldTest.java", "class_name": "SeinfeldTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/SeinfeldTest.java.SeinfeldTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/DetectiveConanTest.java.DetectiveConanTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(detectiveConan::characters, \"detective_conan.characters\"),\n            TestSpec.of(detectiveConan::gadgets, \"detective_conan.gadgets\"),\n            TestSpec.of(detectiveConan::vehicles, \"detective_conan.vehicles\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/DetectiveConanTest.java", "class_name": "DetectiveConanTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/DetectiveConanTest.java.DetectiveConanTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BrooklynNineNineTest.java.BrooklynNineNineTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(brooklynNineNine::characters, \"brooklyn_nine_nine.characters\"),\n            TestSpec.of(brooklynNineNine::quotes, \"brooklyn_nine_nine.quotes\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/BrooklynNineNineTest.java", "class_name": "BrooklynNineNineTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/BrooklynNineNineTest.java.BrooklynNineNineTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/DoraemonTest.java.DoraemonTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(doraemon::character, \"doraemon.characters\"),\n            TestSpec.of(doraemon::gadget, \"doraemon.gadgets\"),\n            TestSpec.of(doraemon::location, \"doraemon.locations\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/DoraemonTest.java", "class_name": "DoraemonTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/DoraemonTest.java.DoraemonTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TheRoomTest.java.TheRoomTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(theRoom::actors, \"the_room.actors\"),\n            TestSpec.of(theRoom::characters, \"the_room.characters\"),\n            TestSpec.of(theRoom::locations, \"the_room.locations\"),\n            TestSpec.of(theRoom::quotes, \"the_room.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/TheRoomTest.java", "class_name": "TheRoomTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/TheRoomTest.java.TheRoomTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/NarutoTest.java.NarutoTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(naruto::character, \"naruto.characters\"),\n            TestSpec.of(naruto::demon, \"naruto.demons\"),\n            TestSpec.of(naruto::eye, \"naruto.eyes\"),\n            TestSpec.of(naruto::village, \"naruto.villages\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/NarutoTest.java", "class_name": "NarutoTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/NarutoTest.java.NarutoTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TheThickOfItTest.java.TheThickOfItTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(theThickOfIt::characters, \"the_thick_of_it.characters\"),\n            TestSpec.of(theThickOfIt::departments, \"the_thick_of_it.departments\"),\n            TestSpec.of(theThickOfIt::positions, \"the_thick_of_it.positions\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/TheThickOfItTest.java", "class_name": "TheThickOfItTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/TheThickOfItTest.java.TheThickOfItTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/HobbitTest.java.HobbitTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(hobbit::character, \"hobbit.character\"),\n            TestSpec.of(hobbit::location, \"hobbit.location\"),\n            TestSpec.of(hobbit::thorinsCompany, \"hobbit.thorins_company\"),\n            TestSpec.of(hobbit::quote, \"hobbit.quote\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/HobbitTest.java", "class_name": "HobbitTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/HobbitTest.java.HobbitTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/OnePieceTest.java.OnePieceTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(onePiece::akumasNoMi, \"one_piece.akumas_no_mi\"),\n            TestSpec.of(onePiece::character, \"one_piece.characters\"),\n            TestSpec.of(onePiece::island, \"one_piece.islands\"),\n            TestSpec.of(onePiece::location, \"one_piece.locations\"),\n            TestSpec.of(onePiece::quote, \"one_piece.quotes\"),\n            TestSpec.of(onePiece::sea, \"one_piece.seas\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/OnePieceTest.java", "class_name": "OnePieceTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/OnePieceTest.java.OnePieceTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SimpsonsTest.java.SimpsonsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(simpsons::character, \"simpsons.characters\"),\n            TestSpec.of(simpsons::location, \"simpsons.locations\"),\n            TestSpec.of(simpsons::quote, \"simpsons.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/SimpsonsTest.java", "class_name": "SimpsonsTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/SimpsonsTest.java.SimpsonsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TheItCrowdTest.java.TheItCrowdTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(theItCrowd::actors, \"the_it_crowd.actors\"),\n            TestSpec.of(theItCrowd::characters, \"the_it_crowd.characters\"),\n            TestSpec.of(theItCrowd::emails, \"the_it_crowd.emails\"),\n            TestSpec.of(theItCrowd::quotes, \"the_it_crowd.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/TheItCrowdTest.java", "class_name": "TheItCrowdTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/TheItCrowdTest.java.TheItCrowdTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/JokeTest.java.JokeTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(joke::pun, \"joke.puns\"),\n            TestSpec.of(joke::knockKnock, \"joke.knock_knocks\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/JokeTest.java", "class_name": "JokeTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/JokeTest.java.JokeTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BoardgameTest.java.BoardgameTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(TestSpec.of(boardgame::name, \"boardgame.name\"),\n            TestSpec.of(boardgame::category, \"boardgame.category\"),\n            TestSpec.of(boardgame::mechanic, \"boardgame.mechanic\"),\n            TestSpec.of(boardgame::subdomain, \"boardgame.subdomain\"),\n            TestSpec.of(boardgame::designer, \"boardgame.designer\"),\n            TestSpec.of(boardgame::artist, \"boardgame.artist\"),\n            TestSpec.of(boardgame::publisher, \"boardgame.publisher\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/BoardgameTest.java", "class_name": "BoardgameTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/BoardgameTest.java.BoardgameTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/FuturamaTest.java.FuturamaTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(futurama::character, \"futurama.characters\"),\n            TestSpec.of(futurama::location, \"futurama.locations\"),\n            TestSpec.of(futurama::hermesCatchPhrase, \"futurama.hermes_catchphrases\"),\n            TestSpec.of(futurama::quote, \"futurama.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/FuturamaTest.java", "class_name": "FuturamaTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/FuturamaTest.java.FuturamaTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/StrangerThingsTest.java.StrangerThingsTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(strangerThings::character, \"stranger_things.character\"),\n            TestSpec.of(strangerThings::quote, \"stranger_things.quote\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/StrangerThingsTest.java", "class_name": "StrangerThingsTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/StrangerThingsTest.java.StrangerThingsTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/StarTrekTest.java.StarTrekTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(starTrek::character, \"star_trek.character\"),\n            TestSpec.of(starTrek::location, \"star_trek.location\"),\n            TestSpec.of(starTrek::klingon, \"star_trek.klingon\"),\n            TestSpec.of(starTrek::species, \"star_trek.species\"),\n            TestSpec.of(starTrek::villain, \"star_trek.villain\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/StarTrekTest.java", "class_name": "StarTrekTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/StarTrekTest.java.StarTrekTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BigBangTheoryTest.java.BigBangTheoryTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(bigBangTheory::character, \"big_bang_theory.characters\"),\n            TestSpec.of(bigBangTheory::quote, \"big_bang_theory.quotes\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/BigBangTheoryTest.java", "class_name": "BigBangTheoryTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/BigBangTheoryTest.java.BigBangTheoryTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/StudioGhibliTest.java.StudioGhibliTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(studioGhibli::character, \"studio_ghibli.characters\"),\n            TestSpec.of(studioGhibli::movie, \"studio_ghibli.movies\"),\n            TestSpec.of(studioGhibli::quote, \"studio_ghibli.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/StudioGhibliTest.java", "class_name": "StudioGhibliTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/StudioGhibliTest.java.StudioGhibliTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/GhostbustersTest.java.GhostbustersTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(ghostbusters::actor, \"ghostbusters.actors\"),\n            TestSpec.of(ghostbusters::character, \"ghostbusters.characters\"),\n            TestSpec.of(ghostbusters::quote, \"ghostbusters.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/GhostbustersTest.java", "class_name": "GhostbustersTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/GhostbustersTest.java.GhostbustersTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/BuffyTest.java.BuffyTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(buffy::characters, \"buffy.characters\"),\n            TestSpec.of(buffy::quotes, \"buffy.quotes\"),\n            TestSpec.of(buffy::celebrities, \"buffy.celebrities\"),\n            TestSpec.of(buffy::bigBads, \"buffy.big_bads\"),\n            TestSpec.of(buffy::episodes, \"buffy.episodes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/BuffyTest.java", "class_name": "BuffyTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/BuffyTest.java.BuffyTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/TronTest.java.TronTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.ALAN_BRADLEY), \"tron.alternate_character_spellings.alan_bradley\"),\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.CLU), \"tron.alternate_character_spellings.clu\"),\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.DR_LORA_BAINES), \"tron.alternate_character_spellings.dr_lora_baines\"),\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.DR_WALTER_GIBBS), \"tron.alternate_character_spellings.dr_walter_gibbs\"),\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.ED_DILLINGER), \"tron.alternate_character_spellings.ed_dillinger\"),\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.KEVIN_FLYNN), \"tron.alternate_character_spellings.kevin_flynn\"),\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.MCP), \"tron.alternate_character_spellings.mcp\"),\n            TestSpec.of(() -> tron.alternateCharacterSpelling(Tron.AlternateCharacterSpelling.ROY_KLEINBERG), \"tron.alternate_character_spellings.roy_kleinberg\"),\n            TestSpec.of(() -> tron.character(Tron.Character.OTHER), \"tron.characters.other\"),\n            TestSpec.of(() -> tron.character(Tron.Character.PROGRAM), \"tron.characters.programs\"),\n            TestSpec.of(() -> tron.character(Tron.Character.USER), \"tron.characters.users\"),\n            TestSpec.of(tron::game, \"tron.games\"),\n            TestSpec.of(tron::location, \"tron.locations\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.ALAN_BRADLEY), \"tron.quotes.alan_bradley\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.BIT), \"tron.quotes.bit\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.CLU), \"tron.quotes.clu\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.CROM), \"tron.quotes.crom\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.DR_LORA_BAINES), \"tron.quotes.dr_lora_baines\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.DR_WALTER_GIBBS), \"tron.quotes.dr_walter_gibbs\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.DUMONT), \"tron.quotes.dumont\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.ED_DILLINGER), \"tron.quotes.ed_dillinger\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.KEVIN_FLYNN), \"tron.quotes.kevin_flynn\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.MCP), \"tron.quotes.mcp\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.PROGRAM), \"tron.quotes.program\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.RAM), \"tron.quotes.ram\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.SARK), \"tron.quotes.sark\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.TRON), \"tron.quotes.tron\"),\n            TestSpec.of(() -> tron.quote(Tron.Quote.YORI), \"tron.quotes.yori\"),\n            TestSpec.of(tron::tagline, \"tron.taglines\"),\n            TestSpec.of(tron::vehicle, \"tron.vehicles\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/TronTest.java", "class_name": "TronTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/TronTest.java.TronTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/SupernaturalTest.java.SupernaturalTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(supernatural::character, \"supernatural.character\"),\n            TestSpec.of(supernatural::creature, \"supernatural.creature\"),\n            TestSpec.of(supernatural::weapon, \"supernatural.weapon\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/SupernaturalTest.java", "class_name": "SupernaturalTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/SupernaturalTest.java.SupernaturalTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/HarryPotterTest.java.HarryPotterTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(harryPotter::book, \"harry_potter.books\"),\n            TestSpec.of(harryPotter::character, \"harry_potter.characters\"),\n            TestSpec.of(harryPotter::house, \"harry_potter.houses\"),\n            TestSpec.of(harryPotter::location, \"harry_potter.locations\"),\n            TestSpec.of(harryPotter::quote, \"harry_potter.quotes\"),\n            TestSpec.of(harryPotter::spell, \"harry_potter.spells\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/HarryPotterTest.java", "class_name": "HarryPotterTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/HarryPotterTest.java.HarryPotterTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/HeyArnoldTest.java.HeyArnoldTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(heyArnold::characters, \"hey_arnold.characters\"),\n            TestSpec.of(heyArnold::locations, \"hey_arnold.locations\"),\n            TestSpec.of(heyArnold::quotes, \"hey_arnold.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/HeyArnoldTest.java", "class_name": "HeyArnoldTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/HeyArnoldTest.java.HeyArnoldTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/PrincessBrideTest.java.PrincessBrideTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(princessBride::character, \"princess_bride.characters\"),\n            TestSpec.of(princessBride::quote, \"princess_bride.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/PrincessBrideTest.java", "class_name": "PrincessBrideTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/PrincessBrideTest.java.PrincessBrideTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/providers/entertainment/RickAndMortyTest.java.RickAndMortyTest.[Collection<TestSpec>]providerListTest()", "name": "providerListTest", "arg_nums": 0, "params": [], "return_type": "Collection<TestSpec>", "signature": "@Override\n    protected Collection<TestSpec> providerListTest()", "original_string": "    @Override\n    protected Collection<TestSpec> providerListTest() {\n        return List.of(\n            TestSpec.of(rickAndMorty::character, \"rick_and_morty.characters\"),\n            TestSpec.of(rickAndMorty::location, \"rick_and_morty.locations\"),\n            TestSpec.of(rickAndMorty::quote, \"rick_and_morty.quotes\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/providers/entertainment/RickAndMortyTest.java", "class_name": "RickAndMortyTest", "class_uri": "src/test/java/net/datafaker/providers/entertainment/RickAndMortyTest.java.RickAndMortyTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Collection<TestSpec>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java.FakerIntegrationTest.[Faker]init(Locale,Random)", "name": "init", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "random", "type": "Random"}], "return_type": "Faker", "signature": "private Faker init(Locale locale, Random random)", "original_string": "    private Faker init(Locale locale, Random random) {\n        if (locale != null && random != null) {\n            return new Faker(locale, random);\n        } else if (locale != null) {\n            return new Faker(locale);\n        } else if (random != null) {\n            return new Faker(random);\n        } else {\n            return new Faker();\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java", "class_name": "FakerIntegrationTest", "class_uri": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java.FakerIntegrationTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Faker", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java.FakerIntegrationTest.[void]testAllMethodsThatReturnStringsActuallyReturnStrings(AbstractProvider<?>)", "name": "testAllMethodsThatReturnStringsActuallyReturnStrings", "arg_nums": 1, "params": [{"name": "provider", "type": "AbstractProvider<?>"}], "return_type": "void", "signature": "private void testAllMethodsThatReturnStringsActuallyReturnStrings(AbstractProvider<?> provider)", "original_string": "    private void testAllMethodsThatReturnStringsActuallyReturnStrings(AbstractProvider<?> provider) {\n        final Locale locale = provider.getFaker().getContext().getLocale();\n        @SuppressWarnings(\"unchecked\")\n        Set<Method> methodsThatReturnStrings = getAllMethods(provider.getClass(),\n            withModifier(Modifier.PUBLIC),\n            withReturnType(String.class),\n            withParametersCount(0));\n\n        for (Method method : methodsThatReturnStrings) {\n            if (isExcepted(provider, method, locale)) {\n                continue;\n            }\n            final Object returnValue;\n            try {\n                log.fine(() -> \"        (%s), method: %s.%s()\".formatted(locale, method.getDeclaringClass(), method.getName()));\n                returnValue = method.invoke(provider);\n            } catch (Exception e) {\n                throw new RuntimeException(\"Test for method %s and object %s was failed for locale %s [thread: %s]\".formatted(\n                    method, provider, locale, currentThread().getName()), e);\n            }\n            Supplier<String> description = () -> \"For method %s.%s(), value is '%s'\".formatted(provider.getClass().getSimpleName(), method.getName(), returnValue);\n            assertThat(returnValue).as(description).isInstanceOf(String.class);\n            assertThat((String) returnValue).as(description).isNotEmpty();\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java", "class_name": "FakerIntegrationTest", "class_uri": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java.FakerIntegrationTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java.FakerIntegrationTest.[boolean]isExcepted(Object,Method,Locale)", "name": "isExcepted", "arg_nums": 3, "params": [{"name": "object", "type": "Object"}, {"name": "method", "type": "Method"}, {"name": "locale", "type": "Locale"}], "return_type": "boolean", "signature": "private boolean isExcepted(Object object, Method method, Locale locale)", "original_string": "    private boolean isExcepted(Object object, Method method, Locale locale) {\n        if (exceptions.containsKey(locale) && exceptions.get(locale).class2methodNames.containsKey(object.getClass())) {\n            return exceptions.get(locale).class2methodNames.get(object.getClass()).contains(method.getName());\n        }\n        return false;\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java", "class_name": "FakerIntegrationTest", "class_uri": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java.FakerIntegrationTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java.FakerIntegrationTest.[Stream<Arguments>]dataParameters()", "name": "dataParameters", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> dataParameters()", "original_string": "    private static Stream<Arguments> dataParameters() {\n        List<Arguments> arguments = new ArrayList<>();\n        arguments.add(Arguments.of(Locale.ENGLISH, new Random()));\n        arguments.add(Arguments.of(new Locale(\"en\", \"US\"), new Random()));\n        arguments.add(Arguments.of(new Locale(\"en\", \"GB\"), new Random()));\n        arguments.add(Arguments.of(new Locale(\"pt\", \"BR\"), null));\n        arguments.add(Arguments.of(new Locale(\"pt\", \"br\"), null));\n        arguments.add(Arguments.of(new Locale(\"Pt\", \"br\"), null));\n        arguments.add(Arguments.of(new Locale(\"pt\", \"Br\", \"x2\"), null));\n        arguments.add(Arguments.of(null, new Random()));\n        arguments.add(Arguments.of(null, null));\n\n        String[] ymlFiles = new File(\"./src/main/resources\").list();\n        for (String ymlFileName : ymlFiles) {\n            if (ymlFileName.endsWith(\".yml\")) {\n                String locale = substringBefore(ymlFileName, \".\").replace(\"-\", \"_\");\n                arguments.add(Arguments.of(new Locale(locale), null));\n            }\n        }\n\n        return arguments.stream();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java", "class_name": "FakerIntegrationTest", "class_uri": "src/test/java/net/datafaker/integration/FakerIntegrationTest.java.FakerIntegrationTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/integration/FakerRepeatabilityIntegrationTest.java.FakerRepeatabilityIntegrationTest.[Map<String, String>]buildReport(Faker)", "name": "buildReport", "arg_nums": 1, "params": [{"name": "faker", "type": "Faker"}], "return_type": "Map<String, String>", "signature": "private static Map<String, String> buildReport(Faker faker)", "original_string": "    private static Map<String, String> buildReport(Faker faker) throws IllegalAccessException, InvocationTargetException {\n        Map<String, String> result = new HashMap<>();\n\n        // Need to sort the methods since they are sometimes returned in a different order\n        Method[] methods = faker.getClass().getMethods();\n        List<Method> providerList = Arrays.asList(methods);\n        providerList.sort(Comparator.comparing(Method::getName));\n\n        for (Method provider : providerList) {\n\n            if (AbstractProvider.class.isAssignableFrom(provider.getReturnType()) && provider.getParameterCount() == 0) {\n                AbstractProvider providerImpl = (AbstractProvider) provider.invoke(faker);\n\n                Method[] generatorMethods = providerImpl.getClass().getDeclaredMethods();\n\n                List<Method> generatorMethodList = Arrays.asList(generatorMethods);\n                generatorMethodList.sort(Comparator.comparing(Method::getName));\n\n                for (Method generatorMethod : generatorMethodList) {\n\n                    if (!Instant.class.isAssignableFrom(generatorMethod.getReturnType()) &&\n                        !byte[].class.isAssignableFrom(generatorMethod.getReturnType())\n                        && generatorMethod.getParameterCount() == 0 && Modifier.isPublic(generatorMethod.getModifiers())) {\n                        result.put(provider.getName() + \".\" + generatorMethod.getName(), generatorMethod.invoke(providerImpl).toString());\n                    }\n                }\n            }\n        }\n\n        return result;\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/FakerRepeatabilityIntegrationTest.java", "class_name": "FakerRepeatabilityIntegrationTest", "class_uri": "src/test/java/net/datafaker/integration/FakerRepeatabilityIntegrationTest.java.FakerRepeatabilityIntegrationTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Map<String, String>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/integration/MostSpecificLocaleTest.java.MostSpecificLocaleTest.[FakeValuesService]fakeValuesService(FakerContext)", "name": "fakeValuesService", "arg_nums": 1, "params": [{"name": "context", "type": "FakerContext"}], "return_type": "FakeValuesService", "signature": "private static FakeValuesService fakeValuesService(FakerContext context)", "original_string": "    private static FakeValuesService fakeValuesService(FakerContext context) {\n        FakeValuesService service = new FakeValuesService();\n        service.updateFakeValuesInterfaceMap(context.getLocaleChain());\n        return service;\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/integration/MostSpecificLocaleTest.java", "class_name": "MostSpecificLocaleTest", "class_uri": "src/test/java/net/datafaker/integration/MostSpecificLocaleTest.java.MostSpecificLocaleTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "FakeValuesService", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[Stream<Arguments>]generateTestSchema()", "name": "generateTestSchema", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateTestSchema()", "original_string": "    private static Stream<Arguments> generateTestSchema() {\n        return Stream.of(\n            of(Schema.of(), \"{}\"),\n            of(\n                Schema.of(compositeField(\"key\", new Field[]{field(\"key\", () -> \"value\")})),\n                \"{\\\"key\\\": {\\\"key\\\": \\\"value\\\"}}\"),\n            of(Schema.of(field(\"key\", () -> \"value\")), \"{\\\"key\\\": \\\"value\\\"}\"),\n            of(Schema.of(field(\"number\", () -> 123)), \"{\\\"number\\\": 123}\"),\n            of(Schema.of(field(\"number\", () -> 123.0)), \"{\\\"number\\\": 123.0}\"),\n            of(Schema.of(field(\"number\", () -> 123.123)), \"{\\\"number\\\": \\\"123.123\\\"}\"),\n            of(Schema.of(field(\"boolean\", () -> true)), \"{\\\"boolean\\\": true}\"),\n            of(Schema.of(field(\"nullValue\", () -> null)), \"{\\\"nullValue\\\": null}\"),\n            of(\n                Schema.of(field(\"array\", () -> new String[]{null, \"test\", \"123\"})),\n                \"{\\\"array\\\": [null, \\\"test\\\", \\\"123\\\"]}\"),\n            of(\n                Schema.of(field(\"array\", () -> new Integer[]{123, 456, 789})),\n                \"{\\\"array\\\": [123, 456, 789]}\"),\n            of(\n                Schema.of(field(\"array\", () -> new Object[]{\"test\", 456, true})),\n                \"{\\\"array\\\": [\\\"test\\\", 456, true]}\"),\n            of(Schema.of(field(\"emptyarray\", () -> new Long[]{})), \"{\\\"emptyarray\\\": []}\"),\n            of(Schema.of(field(\"emptyarray\", Collections::emptyList)), \"{\\\"emptyarray\\\": []}\"),\n            of(\n                Schema.of(field(\"es\\\"ca\\\"ped\", () -> \"va\\\"lu\\\"e\")),\n                \"{\\\"es\\\\\\\"ca\\\\\\\"ped\\\": \\\"va\\\\\\\"lu\\\\\\\"e\\\"}\"),\n            of(\n                Schema.of(\n                    field(\"key\", () -> \"value\"),\n                    compositeField(\"nested\", new Field[]{field(\"nestedkey\", () -> \"nestedvalue\")})),\n                \"{\\\"key\\\": \\\"value\\\", \\\"nested\\\": {\\\"nestedkey\\\": \\\"nestedvalue\\\"}}\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[Map.Entry<Supplier<String>, Supplier<Object>>]entry(Supplier<String>,Supplier<Object>)", "name": "entry", "arg_nums": 2, "params": [{"name": "key", "type": "Supplier<String>"}, {"name": "value", "type": "Supplier<Object>"}], "return_type": "Map.Entry<Supplier<String>, Supplier<Object>>", "signature": "private static Map.Entry<Supplier<String>, Supplier<Object>> entry(\n        Supplier<String> key, Supplier<Object> value)", "original_string": "    private static Map.Entry<Supplier<String>, Supplier<Object>> entry(\n        Supplier<String> key, Supplier<Object> value) {\n        return new AbstractMap.SimpleEntry<>(key, value);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Map.Entry<Supplier<String>, Supplier<Object>>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest.[Map<Supplier<String>, Supplier<Object>>]map()", "name": "map", "arg_nums": 0, "params": [], "return_type": "Map<Supplier<String>, Supplier<Object>>", "signature": "@SafeVarargs\n    private static Map<Supplier<String>, Supplier<Object>> map(\n        Map.Entry<Supplier<String>, Supplier<Object>>... entries)", "original_string": "    @SafeVarargs\n    private static Map<Supplier<String>, Supplier<Object>> map(\n        Map.Entry<Supplier<String>, Supplier<Object>>... entries) {\n        Map<Supplier<String>, Supplier<Object>> map = new LinkedHashMap<>();\n        for (Map.Entry<Supplier<String>, Supplier<Object>> entry : entries) {\n            map.put(entry.getKey(), entry.getValue());\n        }\n        return map;\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/JsonTest.java", "class_name": "JsonTest", "class_uri": "src/test/java/net/datafaker/formats/JsonTest.java.JsonTest", "attributes": {"modifiers": "@SafeVarargs\n    private static", "marker_annotations": ["@SafeVarargs"], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Map<Supplier<String>, Supplier<Object>>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[Stream<Arguments>]generateTestSchema()", "name": "generateTestSchema", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateTestSchema()", "original_string": "    private static Stream<Arguments> generateTestSchema() {\n        return Stream.of(\n            of(Schema.of(), null, \"\"),\n            of(Schema.of(field(\"key\", () -> \"value\")), \"\", \"INSERT INTO MY_TABLE (`key`) VALUES ('value');\"),\n            of(Schema.of(field(\"number\", () -> 123)), \"\", \"INSERT INTO MY_TABLE (`number`) VALUES (123);\"),\n            of(Schema.of(field(\"number\", () -> 123.0)), null, \"INSERT INTO MY_TABLE (`number`) VALUES (123.0);\"),\n            of(Schema.of(field(\"number\", () -> 123.123)), null, \"INSERT INTO MY_TABLE (`number`) VALUES (123.123);\"),\n            of(Schema.of(field(\"boolean\", () -> true)), \"\", \"INSERT INTO MY_TABLE (`boolean`) VALUES (true);\"),\n            of(Schema.of(field(\"nullValue\", () -> null)), null, \"INSERT INTO MY_TABLE (`nullValue`) VALUES (null);\"),\n            of(Schema.of(field(\"nullValue\", () -> null)), \"My.SCHEMA\", \"INSERT INTO `My.SCHEMA`.MY_TABLE (`nullValue`) VALUES (null);\"),\n            of(Schema.of(field(\"nullValue\", () -> null)), \"MY_SCHEMA\", \"INSERT INTO MY_SCHEMA.MY_TABLE (`nullValue`) VALUES (null);\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[Stream<Arguments>]generateTestSchemaForOracle()", "name": "generateTestSchemaForOracle", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateTestSchemaForOracle()", "original_string": "    private static Stream<Arguments> generateTestSchemaForOracle() {\n        return Stream.of(\n            of(Schema.of(), null, \"\"),\n            of(Schema.of(field(\"key\", () -> \"value\")), \"\", \"INSERT INTO \\\"MyTable\\\" (\\\"key\\\") VALUES ('value');\"),\n            of(Schema.of(field(\"number\", () -> 123)), null, \"INSERT INTO \\\"MyTable\\\" (\\\"number\\\") VALUES (123);\"),\n            of(Schema.of(field(\"number\", () -> 123.0)), null, \"INSERT INTO \\\"MyTable\\\" (\\\"number\\\") VALUES (123.0);\"),\n            of(Schema.of(field(\"number\", () -> 123.123)), \"\", \"INSERT INTO \\\"MyTable\\\" (\\\"number\\\") VALUES (123.123);\"),\n            of(Schema.of(field(\"boolean\", () -> true)), null, \"INSERT INTO \\\"MyTable\\\" (\\\"boolean\\\") VALUES (true);\"),\n            of(Schema.of(field(\"nullValue\", () -> null)), null, \"INSERT INTO \\\"MyTable\\\" (\\\"nullValue\\\") VALUES (null);\"),\n            of(Schema.of(field(\"nullValue\", () -> null)), \"MySchema\", \"INSERT INTO \\\"MySchema\\\".\\\"MyTable\\\" (\\\"nullValue\\\") VALUES (null);\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[Stream<Arguments>]generateTestSchemaForPostgres()", "name": "generateTestSchemaForPostgres", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateTestSchemaForPostgres()", "original_string": "    private static Stream<Arguments> generateTestSchemaForPostgres() {\n        return Stream.of(\n            of(Schema.of(), null, \"\"),\n            of(Schema.of(field(\"key\", () -> \"value\")), \"\", \"INSERT INTO \\\"MyTable\\\" (\\\"key\\\") VALUES ('value');\"),\n            of(Schema.of(field(\"number\", () -> 123)), null, \"INSERT INTO \\\"MyTable\\\" (\\\"number\\\") VALUES (123);\"),\n            of(Schema.of(field(\"number\", () -> 123.0)), null, \"INSERT INTO \\\"MyTable\\\" (\\\"number\\\") VALUES (123.0);\"),\n            of(Schema.of(field(\"number\", () -> 123.123)), \"\", \"INSERT INTO \\\"MyTable\\\" (\\\"number\\\") VALUES (123.123);\"),\n            of(Schema.of(field(\"boolean\", () -> true)), null, \"INSERT INTO \\\"MyTable\\\" (\\\"boolean\\\") VALUES (true);\"),\n            of(Schema.of(field(\"nullValue\", () -> null)), null, \"INSERT INTO \\\"MyTable\\\" (\\\"nullValue\\\") VALUES (null);\"),\n            of(Schema.of(field(\"nullValue\", () -> null)), \"MySchema\", \"INSERT INTO \\\"MySchema\\\".\\\"MyTable\\\" (\\\"nullValue\\\") VALUES (null);\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[Stream<Arguments>]generateTestSchemaForMSSQL()", "name": "generateTestSchemaForMSSQL", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateTestSchemaForMSSQL()", "original_string": "    private static Stream<Arguments> generateTestSchemaForMSSQL() {\n        return Stream.of(\n            of(Schema.of(), null, \"\"),\n            of(Schema.of(field(\"key\", () -> \"value\")), \"\", \"INSERT INTO [MyTable] ([key]) VALUES ('value');\"),\n            of(Schema.of(field(\"number\", () -> 123)), null, \"INSERT INTO [MyTable] ([number]) VALUES (123);\"),\n            of(Schema.of(field(\"number\", () -> 123.0)), null, \"INSERT INTO [MyTable] ([number]) VALUES (123.0);\"),\n            of(Schema.of(field(\"number\", () -> 123.123)), \"\", \"INSERT INTO [MyTable] ([number]) VALUES (123.123);\"),\n            of(Schema.of(field(\"boolean\", () -> true)), \"\", \"INSERT INTO [MyTable] ([boolean]) VALUES (true);\"),\n            of(Schema.of(field(\"nullValue\", () -> null)), null, \"INSERT INTO [MyTable] ([nullValue]) VALUES (null);\"),\n            of(Schema.of(field(\"nullValue\", () -> null)), \"MySchema\", \"INSERT INTO [MySchema].[MyTable] ([nullValue]) VALUES (null);\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[Stream<Arguments>]generateTestSchemaForMySQL()", "name": "generateTestSchemaForMySQL", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateTestSchemaForMySQL()", "original_string": "    private static Stream<Arguments> generateTestSchemaForMySQL() {\n        return Stream.of(\n            of(Schema.of(), null, \"\"),\n            of(Schema.of(field(\"key\", () -> \"value\")), \"\", \"INSERT INTO MyTable (key) VALUES ('value');\"),\n            of(Schema.of(field(\"number\", () -> 123)), \"\", \"INSERT INTO MyTable (number) VALUES (123);\"),\n            of(Schema.of(field(\"number\", () -> 123.0)), null, \"INSERT INTO MyTable (number) VALUES (123.0);\"),\n            of(Schema.of(field(\"number\", () -> 123.123)), null, \"INSERT INTO MyTable (number) VALUES (123.123);\"),\n            of(Schema.of(field(\"boolean\", () -> true)), null, \"INSERT INTO MyTable (boolean) VALUES (true);\"),\n            of(Schema.of(field(\"nullValue\", () -> null)), null, \"INSERT INTO MyTable (nullValue) VALUES (null);\"),\n            of(Schema.of(field(\"nullValue\", () -> null)), \"MySchema\", \"INSERT INTO MySchema.MyTable (nullValue) VALUES (null);\"));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[Stream<Arguments>]generateTestSchemaForCalcite()", "name": "generateTestSchemaForCalcite", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateTestSchemaForCalcite()", "original_string": "    private static Stream<Arguments> generateTestSchemaForCalcite() {\n        return Stream.of(\n            of(Schema.of(), null, \"\"),\n            of(Schema.of(field(\"ints\", () -> new int[]{1, 2, 3})), \"\", \"INSERT INTO \\\"MyTable\\\" (\\\"ints\\\") VALUES (ARRAY[1, 2, 3]);\"),\n            of(Schema.of(field(\"longs\", () -> new long[]{23L, 45L})), null, \"INSERT INTO \\\"MyTable\\\" (\\\"longs\\\") VALUES (ARRAY[23, 45]);\"),\n            of(Schema.of(field(\"bytes\", () -> new byte[]{1, 0})), null, \"INSERT INTO \\\"MyTable\\\" (\\\"bytes\\\") VALUES (ARRAY[1, 0]);\"),\n            of(Schema.of(field(\"shorts\", () -> new short[]{1, 0, 3})), null, \"INSERT INTO \\\"MyTable\\\" (\\\"shorts\\\") VALUES (ARRAY[1, 0, 3]);\"),\n            of(Schema.of(field(\"booleans\", () -> new boolean[]{true, false})), null, \"INSERT INTO \\\"MyTable\\\" (\\\"booleans\\\") VALUES (ARRAY[true, false]);\"),\n            of(Schema.of(field(\"floats\", () -> new float[]{1f, 0f, 3f})), null, \"INSERT INTO \\\"MyTable\\\" (\\\"floats\\\") VALUES (ARRAY[1.0, 0.0, 3.0]);\"),\n            of(Schema.of(field(\"doubles\", () -> new double[]{1d, 5d, 3d})), null, \"INSERT INTO \\\"MyTable\\\" (\\\"doubles\\\") VALUES (ARRAY[1.0, 5.0, 3.0]);\"),\n            of(Schema.of(field(\"names\", () -> new String[]{\"hello\", \"world\"})),\n                null, \"INSERT INTO \\\"MyTable\\\" (\\\"names\\\") VALUES (ARRAY['hello', 'world']);\"),\n            of(Schema.of(field(\"names_list\", () -> List.of(\"hello\", \"hello\"))),\n                \"\", \"INSERT INTO \\\"MyTable\\\" (\\\"names_list\\\") VALUES (MULTISET['hello', 'hello']);\"),\n            of(Schema.of(field(\"names_multiset\", () -> Set.of(\"hello\"))),\n                \"\", \"INSERT INTO \\\"MyTable\\\" (\\\"names_multiset\\\") VALUES (MULTISET['hello']);\"),\n            of(Schema.of(field(\"ints_ints\", () -> new int[][]{new int[]{1}, null, new int[] {3, 4, 5}})),\n                \"\", \"INSERT INTO \\\"MyTable\\\" (\\\"ints_ints\\\") VALUES (ARRAY[ARRAY[1], NULL, ARRAY[3, 4, 5]]);\"),\n            of(Schema.of(field(\"ints_ints\", () -> new int[][]{new int[]{1}, new int[]{2}, new int[] {3, 4, 5}})),\n                \"\", \"INSERT INTO \\\"MyTable\\\" (\\\"ints_ints\\\") VALUES (ARRAY[ARRAY[1], ARRAY[2], ARRAY[3, 4, 5]]);\"),\n            of(Schema.of(field(\"multiset\", () -> Set.of(Set.of(Set.of(\"value\"))))),\n                \"\", \"INSERT INTO \\\"MyTable\\\" (\\\"multiset\\\") VALUES (MULTISET[MULTISET[MULTISET['value']]]);\"),\n            of(Schema.of(field(\"multiset_array\", () -> Set.of(new int[]{1, 2}))),\n                \"\", \"INSERT INTO \\\"MyTable\\\" (\\\"multiset_array\\\") VALUES (MULTISET[ARRAY[1, 2]]);\"),\n            of(Schema.of(field(\"array_multiset\", () -> new Object[]{Set.of(\"value\")})),\n                \"\", \"INSERT INTO \\\"MyTable\\\" (\\\"array_multiset\\\") VALUES (ARRAY[MULTISET['value']]);\"),\n            of(Schema.of(compositeField(\"row\", new Field[]{field(\"name\", () -> \"2\")})),\n                null, \"INSERT INTO \\\"MyTable\\\" (\\\"row\\\") VALUES (ROW('2'));\"),\n            of(Schema.of(compositeField(\"row_row\",\n                    new Field[]{field(\"name1\", () -> \"1\"), compositeField(\"row\", new Field[]{field(\"name\", () -> \"2\")})})),\n                    null, \"INSERT INTO \\\"MyTable\\\" (\\\"row_row\\\") VALUES (ROW('1', ROW('2')));\"),\n            of(Schema.of(compositeField(\"row_array\",\n                    new Field[]{field(\"name1\", () -> \"1\"),\n                        compositeField(\"row\", new Field[]{field(\"name\", () -> new int[]{1, 2, 3})})})),\n                null, \"INSERT INTO \\\"MyTable\\\" (\\\"row_array\\\") VALUES (ROW('1', ROW(ARRAY[1, 2, 3])));\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest.[Stream<Arguments>]generateTestSchemaForSparkSql()", "name": "generateTestSchemaForSparkSql", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateTestSchemaForSparkSql()", "original_string": "    private static Stream<Arguments> generateTestSchemaForSparkSql() {\n\n        /*\n         * Maps must be ordered in order to have deterministic SQL statement.\n         */\n        Supplier<Map<String, String>> supplySmallMap =\n            () -> new TreeMap<>(Map.of(\"k1\", \"v1\"));\n\n        Supplier<Map<String, Object>> supplyBigMap =\n            () -> new TreeMap<>(Map.of(\"k1\", supplySmallMap.get(), \"k2\",  supplySmallMap.get()));\n\n        return Stream.of(\n            of(Schema.of(), null, \"\"),\n            of(Schema.of(field(\"bytes\", () -> new byte[]{1, 0})), null,\n                \"INSERT INTO `MyTable` (`bytes`) VALUES (ARRAY(1, 0));\"),\n            of(Schema.of(field(\"booleans\", () -> new boolean[]{true, false})), null,\n                \"INSERT INTO `MyTable` (`booleans`) VALUES (ARRAY(true, false));\"),\n            of(Schema.of(field(\"ints\", () -> new int[]{1, 2, 3})), \"\",\n                \"INSERT INTO `MyTable` (`ints`) VALUES (ARRAY(1, 2, 3));\"),\n            of(Schema.of(field(\"longs\", () -> new long[]{23L, 45L})), null,\n                \"INSERT INTO `MyTable` (`longs`) VALUES (ARRAY(23, 45));\"),\n            of(Schema.of(field(\"empty_map\", Map::of)), null,\n                \"INSERT INTO `MyTable` (`empty_map`) VALUES (MAP());\"),\n            of(Schema.of(field(\"maps\", supplyBigMap)), null,\n                \"INSERT INTO `MyTable` (`maps`) VALUES (MAP('k1', MAP('k1', 'v1'), 'k2', MAP('k1', 'v1')));\"),\n            of(Schema.of(\n                compositeField(\"struct_array\", new Field[]{field(\"name1\", () -> \"1\"), compositeField(\"struct\", new Field[]{field(\"name\", () -> new int[]{1, 2, 3})})})), null,\n                \"INSERT INTO `MyTable` (`struct_array`) VALUES (NAMED_STRUCT('name1', '1', 'struct', NAMED_STRUCT('name', ARRAY(1, 2, 3))));\"),\n            of(Schema.of(\n                compositeField(\"struct_struct\", new Field[]{field(\"name1\", () -> \"1\"), compositeField(\"struct\", new Field[]{field(\"name\", () -> \"2\")})})), null,\n                \"INSERT INTO `MyTable` (`struct_struct`) VALUES (NAMED_STRUCT('name1', '1', 'struct', NAMED_STRUCT('name', '2')));\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/SqlTest.java", "class_name": "SqlTest", "class_uri": "src/test/java/net/datafaker/formats/SqlTest.java.SqlTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest.[Stream<Arguments>]generateTestXmlSchema()", "name": "generateTestXmlSchema", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateTestXmlSchema()", "original_string": "    private static Stream<Arguments> generateTestXmlSchema() {\n        return Stream.of(\n            of(Schema.of(field(\"root\", Collections::emptyList)), \"<root/>\"),\n            of(Schema.of((field(\"root\", () -> \"value\"))), \"<root>value</root>\"),\n            of(Schema.of(\n                    compositeField(\"root\",\n                        new Field[]{field(\"attribute1\", () -> \"value1\"), field(\"attribute2\", () -> \"value2\")})),\n                \"<root attribute1=\\\"value1\\\" attribute2=\\\"value2\\\"/>\"),\n            of(Schema.of(\n                    compositeField(\"root\",\n                        new Field[]{field(\"attribute1\", () -> \"value1\"), field(\"attribute2\", () -> \"value2\"), field(null, () -> \"value\"),})),\n                \"<root attribute1=\\\"value1\\\" attribute2=\\\"value2\\\">value</root>\"),\n            of(Schema.of(\n                    compositeField(\"root\",\n                        new Field[]{field(\"attribute1\", () -> \"value1\"), field(\"attribute2\", () -> \"value2\"),\n                            field(null, () -> List.of(field(\"child\", () -> \"value\")))})),\n                \"<root attribute1=\\\"value1\\\" attribute2=\\\"value2\\\"><child>value</child></root>\"),\n            of(Schema.of(field(\"root\", () -> \"<> value\\\"\")), \"<root>&lt;&gt; value&quot;</root>\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/XmlTest.java", "class_name": "XmlTest", "class_uri": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest.[Stream<Arguments>]generateTestXmlPrettySchema()", "name": "generateTestXmlPrettySchema", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateTestXmlPrettySchema()", "original_string": "    private static Stream<Arguments> generateTestXmlPrettySchema() {\n        return Stream.of(\n            of(Schema.of(field(\"root\", Collections::emptyList)), \"<root/>\"),\n            of(Schema.of((field(\"root\", () -> \"value\"))), \"<root>value</root>\"),\n            of(Schema.of(\n                    compositeField(\"root\",\n                        new Field[]{field(\"attribute1\", () -> \"value1\"), field(\"attribute2\", () -> \"value2\")})),\n                \"<root attribute1=\\\"value1\\\" attribute2=\\\"value2\\\"/>\"),\n            of(Schema.of(\n                    compositeField(\"root\",\n                        new Field[]{field(\"attribute1\", () -> \"value1\"), field(\"attribute2\", () -> \"value2\"), field(null, () -> \"value\"),})),\n                \"<root attribute1=\\\"value1\\\" attribute2=\\\"value2\\\">value</root>\"),\n            of(Schema.of(\n                    compositeField(\"root\",\n                        new Field[]{field(\"attribute1\", () -> \"value1\"), field(\"attribute2\", () -> \"value2\"),\n                            field(null, () -> List.of(field(\"child\", () -> \"value\")))})),\n                \"<root attribute1=\\\"value1\\\" attribute2=\\\"value2\\\">\" + System.lineSeparator() + \"    <child>value</child>\" + System.lineSeparator() + \"</root>\"),\n            of(Schema.of(field(\"root\", () -> \"<> value\\\"\")), \"<root>&lt;&gt; value&quot;</root>\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/XmlTest.java", "class_name": "XmlTest", "class_uri": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest.[int]getNumberOfLines(String)", "name": "getNumberOfLines", "arg_nums": 1, "params": [{"name": "xml", "type": "String"}], "return_type": "int", "signature": "private static int getNumberOfLines(String xml)", "original_string": "    private static int getNumberOfLines(String xml) {\n        int numberOfLines = 1;\n        for (int i = 0; i < xml.length(); i++) {\n            if (xml.regionMatches(i, System.lineSeparator(), 0, System.lineSeparator().length())) {\n                numberOfLines++;\n            }\n        }\n        return numberOfLines;\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/XmlTest.java", "class_name": "XmlTest", "class_uri": "src/test/java/net/datafaker/formats/XmlTest.java.XmlTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/YamlTest.java.YamlTest.[Stream<Arguments>]generateTestSchema()", "name": "generateTestSchema", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> generateTestSchema()", "original_string": "    private static Stream<Arguments> generateTestSchema() {\n        return Stream.of(\n            of(Schema.of(), \"\"),\n            of(Schema.of(field(\"key\", () -> \"value\")), \"key: value\" + System.lineSeparator()),\n            of(Schema.of(field(\"number\", () -> 123)), \"number: 123\" + System.lineSeparator()),\n            of(Schema.of(field(\"number\", () -> BigDecimal.valueOf(123.0))), \"number: 123.0\" + System.lineSeparator()),\n            of(Schema.of(field(\"number\", () -> BigDecimal.valueOf(123.123))), \"number: 123.123\" + System.lineSeparator()),\n            of(Schema.of(field(\"boolean\", () -> true)), \"boolean: true\" + System.lineSeparator()),\n            of(Schema.of(field(\"nullValue\", () -> null)), \"nullValue: null\" + System.lineSeparator()),\n            of(Schema.of(field(\"array\", () -> new String[]{null, \"test\", \"123\"})),\n                \"array:\" + System.lineSeparator()\n                    + \"  - null\" + System.lineSeparator()\n                    + \"  - test\" + System.lineSeparator()\n                    + \"  - 123\" + System.lineSeparator()),\n            of(Schema.of(field(\"array\", () -> new Integer[]{123, 456, 789})),\n                \"array:\" + System.lineSeparator()\n                    + \"  - 123\" + System.lineSeparator()\n                    + \"  - 456\" + System.lineSeparator()\n                    + \"  - 789\" + System.lineSeparator()),\n            of(Schema.of(field(\"array\", () -> new Object[]{\"test\", 456, true})),\n                \"array:\" + System.lineSeparator()\n                    + \"  - test\" + System.lineSeparator()\n                    + \"  - 456\" + System.lineSeparator()\n                    + \"  - true\" + System.lineSeparator()),\n            of(Schema.of(field(\"emptyarray\", () -> new Long[]{})), \"emptyarray:\" + System.lineSeparator()),\n            of(Schema.of(field(\"emptyarray\", Collections::emptyList)), \"emptyarray:\" + System.lineSeparator()),\n            of(Schema.of(field(\"key\", () -> \"value\"),\n                    field(\"nested\", () -> Schema.of(field(\"nestedkey\", () -> \"nestedvalue\")))),\n                \"key: value\" + System.lineSeparator() + \"nested:\" + System.lineSeparator() + \"  nestedkey: nestedvalue\" + System.lineSeparator()),\n            of(Schema.of(field(\"key\", () -> \"value\"),\n                    field(\"nested\",\n                        () -> Schema.of(field(\"nestedkey\", () -> \"nestedvalue\"),\n                            field(\"nested2\", () -> Schema.of(field(\"nestedkey2\", () -> \"nestedvalue2\")))))),\n                \"key: value\" + System.lineSeparator()\n                    + \"nested:\" + System.lineSeparator() + \"  nestedkey: nestedvalue\" + System.lineSeparator()\n                    + \"  nested2:\" + System.lineSeparator()\n                    + \"    nestedkey2: nestedvalue2\" + System.lineSeparator())\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/YamlTest.java", "class_name": "YamlTest", "class_uri": "src/test/java/net/datafaker/formats/YamlTest.java.YamlTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/formats/YamlTest.java.YamlTest.[Map<Supplier<String>, Supplier<Object>>]map()", "name": "map", "arg_nums": 0, "params": [], "return_type": "Map<Supplier<String>, Supplier<Object>>", "signature": "@SafeVarargs\n    private static Map<Supplier<String>, Supplier<Object>> map(Map.Entry<Supplier<String>, Supplier<Object>>... entries)", "original_string": "    @SafeVarargs\n    private static Map<Supplier<String>, Supplier<Object>> map(Map.Entry<Supplier<String>, Supplier<Object>>... entries) {\n        Map<Supplier<String>, Supplier<Object>> map = new LinkedHashMap<>();\n        for (Map.Entry<Supplier<String>, Supplier<Object>> entry : entries) {\n            map.put(entry.getKey(), entry.getValue());\n        }\n        return map;\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/formats/YamlTest.java", "class_name": "YamlTest", "class_uri": "src/test/java/net/datafaker/formats/YamlTest.java.YamlTest", "attributes": {"modifiers": "@SafeVarargs\n    private static", "marker_annotations": ["@SafeVarargs"], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Map<Supplier<String>, Supplier<Object>>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest.[Schema<Object, ?>]defaultSchema()", "name": "defaultSchema", "arg_nums": 0, "params": [], "return_type": "Schema<Object, ?>", "signature": "public static Schema<Object, ?> defaultSchema()", "original_string": "    public static Schema<Object, ?> defaultSchema() {\n        var faker = new Faker(Locale.forLanguageTag(\"fr-en\"), new RandomService(new Random(1)));\n        return Schema.of(field(\"name\", () -> faker.name().fullName()));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java", "class_name": "FakeAnnotationTest", "class_uri": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Schema<Object, ?>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest.[Schema<Object, ?>]customSchema()", "name": "customSchema", "arg_nums": 0, "params": [], "return_type": "Schema<Object, ?>", "signature": "public static Schema<Object, ?> customSchema()", "original_string": "    public static Schema<Object, ?> customSchema() {\n        var faker = new Faker(Locale.forLanguageTag(\"de-en\"), new RandomService(new Random(1)));\n        return Schema.of(field(\"name\", () -> faker.superhero().name()));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java", "class_name": "FakeAnnotationTest", "class_uri": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Schema<Object, ?>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest.[Schema<Object, ?>]complexSchema()", "name": "complexSchema", "arg_nums": 0, "params": [], "return_type": "Schema<Object, ?>", "signature": "public static Schema<Object, ?> complexSchema()", "original_string": "    public static Schema<Object, ?> complexSchema() {\n        var faker = new Faker(Locale.forLanguageTag(\"de-en\"), new RandomService(new Random(1)));\n        return Schema.of(\n            field(\"name\", () -> faker.superhero().name()),\n            field(\"address\", () -> faker.address().fullAddress()),\n            field(\"color\", () -> faker.color().name())\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java", "class_name": "FakeAnnotationTest", "class_uri": "src/test/java/net/datafaker/annotations/FakeAnnotationTest.java.FakeAnnotationTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Schema<Object, ?>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/dto/Person.java.Person.[String]getName()", "name": "getName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getName()", "original_string": "    public String getName() {\n        return name;\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/dto/Person.java", "class_name": "Person", "class_uri": "src/test/java/net/datafaker/annotations/dto/Person.java.Person", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/annotations/dto/Person.java.Person.[void]setName(String)", "name": "setName", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "void", "signature": "public void setName(String name)", "original_string": "    public void setName(String name) {\n        this.name = name;\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/annotations/dto/Person.java", "class_name": "Person", "class_uri": "src/test/java/net/datafaker/annotations/dto/Person.java.Person", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest.[void]assertBasics(String)", "name": "assertBasics", "arg_nums": 1, "params": [{"name": "gotPesel", "type": "String"}], "return_type": "void", "signature": "private void assertBasics(String gotPesel)", "original_string": "    private void assertBasics(String gotPesel) {\n        assertThat(gotPesel).hasSize(PESEL_EXPECTED_LENGTH);\n        assertThat(gotPesel.chars().allMatch(Character::isDigit)).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java", "class_name": "PolishIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest.[void]assertBirthDate(LocalDate,String)", "name": "assertBirthDate", "arg_nums": 2, "params": [{"name": "givenBirthDate", "type": "LocalDate"}, {"name": "gotPesel", "type": "String"}], "return_type": "void", "signature": "private void assertBirthDate(LocalDate givenBirthDate, String gotPesel)", "original_string": "    private void assertBirthDate(LocalDate givenBirthDate, String gotPesel) {\n        final int gotYear = toNumber(gotPesel.charAt(0), gotPesel.charAt(1));\n        assertThat(givenBirthDate.getYear() % 100).isEqualTo(gotYear);\n\n        final int gotMonth = toNumber(gotPesel.charAt(2), gotPesel.charAt(3));\n\n        final int givenYear = givenBirthDate.getYear();\n\n        if (givenYear < 1800) {\n            fail(\"Year is before 1800. Test case is broken.\");\n        } else if (givenYear < 1900) {\n            assertThat(givenBirthDate.getMonthValue() + 80).isEqualTo(gotMonth);\n        } else if (givenYear < 2000) {\n            assertThat(givenBirthDate.getMonthValue()).isEqualTo(gotMonth);\n        } else if (givenYear < 2100) {\n            assertThat(givenBirthDate.getMonthValue() + 20).isEqualTo(gotMonth);\n        } else if (givenYear < 2200) {\n            assertThat(givenBirthDate.getMonthValue() + 40).isEqualTo(gotMonth);\n        } else if (givenYear < 2300) {\n            assertThat(givenBirthDate.getMonthValue() + 60).isEqualTo(gotMonth);\n        } else {\n            throw new IllegalArgumentException(\"Year %s is after 2300. Test case is broken.\".formatted(givenYear));\n        }\n\n        final int gotDay = toNumber(gotPesel.charAt(4), gotPesel.charAt(5));\n        assertThat(givenBirthDate.getDayOfMonth()).isEqualTo(gotDay);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java", "class_name": "PolishIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest.[void]assertGender(Gender,String)", "name": "assertGender", "arg_nums": 2, "params": [{"name": "givenGender", "type": "Gender"}, {"name": "gotPesel", "type": "String"}], "return_type": "void", "signature": "private void assertGender(Gender givenGender, String gotPesel)", "original_string": "    private void assertGender(Gender givenGender, String gotPesel) {\n        final int gotGenderDigit = gotPesel.charAt(9) - '0';\n        switch (givenGender) {\n            case FEMALE:\n                assertThat(gotGenderDigit % 2).isZero();\n                break;\n            case MALE:\n                assertThat(gotGenderDigit % 2).isOne();\n                break;\n            case ANY:\n            default:\n                break;\n        }\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java", "class_name": "PolishIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest.[void]assertControlDigit(String)", "name": "assertControlDigit", "arg_nums": 1, "params": [{"name": "gotPesel", "type": "String"}], "return_type": "void", "signature": "private void assertControlDigit(String gotPesel)", "original_string": "    private void assertControlDigit(String gotPesel) {\n        final int gotSum = (gotPesel.charAt(0) + gotPesel.charAt(4) + gotPesel.charAt(8) + gotPesel.charAt(10)\n            + 3 * (gotPesel.charAt(1) + gotPesel.charAt(5) + gotPesel.charAt(9))\n            + 7 * (gotPesel.charAt(2) + gotPesel.charAt(6)) + 9 * (gotPesel.charAt(3) + gotPesel.charAt(7))) % 10;\n        assertThat(gotSum).isZero();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java", "class_name": "PolishIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest.[int]toNumber(char,char)", "name": "toNumber", "arg_nums": 2, "params": [{"name": "digit2", "type": "char"}, {"name": "digit1", "type": "char"}], "return_type": "int", "signature": "private int toNumber(char digit2, char digit1)", "original_string": "    private int toNumber(char digit2, char digit1) {\n        return (digit2 - '0') * 10 + digit1 - '0';\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java", "class_name": "PolishIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/PolishIdNumberTest.java.PolishIdNumberTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumber_generateInvalidTest.java.SouthAfricanIdNumber_generateInvalidTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        southAfricanIdNumber = new SouthAfricanIdNumber();\n        faker = new BaseFaker();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumber_generateInvalidTest.java", "class_name": "SouthAfricanIdNumber_generateInvalidTest", "class_uri": "src/test/java/net/datafaker/idnumbers/SouthAfricanIdNumber_generateInvalidTest.java.SouthAfricanIdNumber_generateInvalidTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/ChineseIdNumberTest.java.ChineseIdNumberTest.[void]assertThatSsnNumberValid(int,String)", "name": "assertThatSsnNumberValid", "arg_nums": 2, "params": [{"name": "idNumber", "type": "int"}, {"name": "idNumber1", "type": "String"}], "return_type": "void", "signature": "private static void assertThatSsnNumberValid(int idNumber, String idNumber1)", "original_string": "    private static void assertThatSsnNumberValid(int idNumber, String idNumber1) {\n        boolean isSatisfied = idNumber == 18;\n        for (int j = 0; j < idNumber; j++) {\n            char ch = idNumber1.charAt(j);\n            if (j != idNumber - 1) {\n                if (ch > '9' || ch < '0') {\n                    isSatisfied = false;\n                    break;\n                }\n            } else {\n                if ((ch > '9' || ch < '0') && ch != 'X') {\n                    isSatisfied = false;\n                    break;\n                }\n            }\n        }\n        assertThat(isSatisfied).isTrue();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/ChineseIdNumberTest.java", "class_name": "ChineseIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/ChineseIdNumberTest.java.ChineseIdNumberTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumber_generateInvalidTest.java.AlbanianIdNumber_generateInvalidTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        generator = new AlbanianIdNumber();\n        faker = new Faker();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumber_generateInvalidTest.java", "class_name": "AlbanianIdNumber_generateInvalidTest", "class_uri": "src/test/java/net/datafaker/idnumbers/AlbanianIdNumber_generateInvalidTest.java.AlbanianIdNumber_generateInvalidTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/UkrainianIdNumberTest.java.UkrainianIdNumberTest.[boolean]isUnzrValid(String)", "name": "isUnzrValid", "arg_nums": 1, "params": [{"name": "unzr", "type": "String"}], "return_type": "boolean", "signature": "private boolean isUnzrValid(String unzr)", "original_string": "    private boolean isUnzrValid(String unzr) {\n        int[] digits = unzr.replace(\"-\", \"\")\n            .chars()\n            .map(Character::getNumericValue)\n            .toArray();\n\n        int checksum = digits[0] * 7 + digits[1] * 3 + digits[2] + digits[3] * 7 + digits[4] * 3 + digits[5] +\n            digits[6] * 7 + digits[7] * 3 + digits[8] + digits[9] * 7 + digits[10] * 3 + digits[11];\n        return checksum % 10 == digits[12];\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/UkrainianIdNumberTest.java", "class_name": "UkrainianIdNumberTest", "class_uri": "src/test/java/net/datafaker/idnumbers/UkrainianIdNumberTest.java.UkrainianIdNumberTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil_cnpjTest.java.IdNumberGeneratorPtBrUtil_cnpjTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        faker = mock(BaseProviders.class);\n        when(faker.random()).thenReturn(new net.datafaker.service.RandomService());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil_cnpjTest.java", "class_name": "IdNumberGeneratorPtBrUtil_cnpjTest", "class_uri": "src/test/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil_cnpjTest.java.IdNumberGeneratorPtBrUtil_cnpjTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil_cpfTest.java.IdNumberGeneratorPtBrUtil_cpfTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        faker = mock(BaseProviders.class);\n        randomService = mock(RandomService.class);\n        when(faker.random()).thenReturn(randomService);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil_cpfTest.java", "class_name": "IdNumberGeneratorPtBrUtil_cpfTest", "class_uri": "src/test/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil_cpfTest.java.IdNumberGeneratorPtBrUtil_cpfTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil_isCPFValidTest.java.IdNumberGeneratorPtBrUtil_isCPFValidTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        // Any setup code if needed\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil_isCPFValidTest.java", "class_name": "IdNumberGeneratorPtBrUtil_isCPFValidTest", "class_uri": "src/test/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil_isCPFValidTest.java.IdNumberGeneratorPtBrUtil_isCPFValidTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java.FakeValues_equalsTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        FakeValuesContext context1 = FakeValuesContext.of(new Locale(\"en\"));\n        FakeValuesContext context2 = FakeValuesContext.of(new Locale(\"en\"));\n        FakeValuesContext context3 = FakeValuesContext.of(new Locale(\"fr\"));\n\n        fakeValues1 = FakeValues.of(context1);\n        fakeValues2 = FakeValues.of(context2);\n        fakeValues3 = FakeValues.of(context3);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java", "class_name": "FakeValues_equalsTest", "class_uri": "src/test/java/net/datafaker/service/FakeValues_equalsTest.java.FakeValues_equalsTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesService_addUrlTest.java.FakeValuesService_addUrlTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        fakeValuesService = new FakeValuesService();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesService_addUrlTest.java", "class_name": "FakeValuesService_addUrlTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesService_addUrlTest.java.FakeValuesService_addUrlTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest.[void]before()", "name": "before", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    void before()", "original_string": "    @BeforeEach\n    void before() {\n        fakeValues = FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"address.yml\", PATH));\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesTest.java", "class_name": "FakeValuesTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest", "attributes": {"modifiers": "@BeforeEach", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest.[Stream<Arguments>]fakeValuesProvider()", "name": "fakeValuesProvider", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "static Stream<Arguments> fakeValuesProvider()", "original_string": "    static Stream<Arguments> fakeValuesProvider() throws MalformedURLException {\n        Path tmp = Paths.get(\"tmp\");\n        return Stream.of(\n            of(FakeValues.of(FakeValuesContext.of(Locale.CANADA)), FakeValues.of(FakeValuesContext.of(Locale.CANADA)), true),\n            of(null, FakeValues.of(FakeValuesContext.of(Locale.CANADA)), false),\n            of(FakeValues.of(FakeValuesContext.of(Locale.CANADA)), null, false),\n            of(FakeValues.of(FakeValuesContext.of(Locale.CANADA)), null, false),\n            of(FakeValues.of(FakeValuesContext.of(Locale.ENGLISH)), FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"filepath\", \"path\")), false),\n            of(FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"filepath\", null)), FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"filepath\", \"path\")), false),\n            of(FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"filepath\", \"path\")), FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"filepath\", \"path\")), true),\n            of(FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"filepath\", \"path\", tmp.toUri().toURL())), FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"filepath\", \"path\", tmp.toUri().toURL())), true),\n            of(FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"filepath\", \"path\", Paths.get(\"tmp2\").toUri().toURL())), FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"filepath\", \"path\", tmp.toUri().toURL())), false)\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesTest.java", "class_name": "FakeValuesTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesTest.java.FakeValuesTest", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesService_safeFetchTest.java.FakeValuesService_safeFetchTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        context = new FakerContext(Locale.ENGLISH, new RandomService());\n        fakeValuesService = new FakeValuesService();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesService_safeFetchTest.java", "class_name": "FakeValuesService_safeFetchTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesService_safeFetchTest.java.FakeValuesService_safeFetchTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesGroupingTest.java.FakeValuesGroupingTest.[void]before()", "name": "before", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    void before()", "original_string": "    @BeforeEach\n    void before() {\n        fakeValuesGrouping = new FakeValuesGrouping();\n        addressValues = FakeValues.of(FakeValuesContext.of(Locale.ENGLISH, \"address.yml\", \"address\"));\n        fakeValuesGrouping.add(addressValues);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesGroupingTest.java", "class_name": "FakeValuesGroupingTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesGroupingTest.java.FakeValuesGroupingTest", "attributes": {"modifiers": "@BeforeEach", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest.[Stream<Arguments>]randomServiceProvider()", "name": "randomServiceProvider", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "private static Stream<Arguments> randomServiceProvider()", "original_string": "    private static Stream<Arguments> randomServiceProvider() {\n        return Stream.of(\n            Arguments.of(new RandomService(), new RandomService(new Random()))\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomServiceTest.java", "class_name": "RandomServiceTest", "class_uri": "src/test/java/net/datafaker/service/RandomServiceTest.java.RandomServiceTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomService_hexTest.java.RandomService_hexTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        randomService = new RandomService();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomService_hexTest.java", "class_name": "RandomService_hexTest", "class_uri": "src/test/java/net/datafaker/service/RandomService_hexTest.java.RandomService_hexTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomService_equalsTest.java.RandomService_equalsTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        randomService1 = new RandomService();\n        randomService2 = new RandomService(new Random(12345L));\n        randomService3 = new RandomService(null);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomService_equalsTest.java", "class_name": "RandomService_equalsTest", "class_uri": "src/test/java/net/datafaker/service/RandomService_equalsTest.java.RandomService_equalsTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]before()", "name": "before", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    final void before()", "original_string": "    @BeforeEach\n    final void before() {\n        // always return the first element\n        when(randomService.nextInt(anyInt())).thenReturn(0);\n        context = new FakerContext(new Locale(\"test\"), randomService);\n        when(mockedFaker.getContext()).thenReturn(context);\n        fakeValuesService.updateFakeValuesInterfaceMap(context.getLocaleChain());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "@BeforeEach\n    final", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[Stream<Arguments>]fakerContexts()", "name": "fakerContexts", "arg_nums": 0, "params": [], "return_type": "Stream<Arguments>", "signature": "static Stream<Arguments> fakerContexts()", "original_string": "    static Stream<Arguments> fakerContexts() {\n        return Stream.of(\n            Arguments.of(new FakerContext(new Locale(\"en\"), new RandomService()), new FakerContext(new Locale(\"uk\"), new RandomService()), false),\n            Arguments.of(new FakerContext(new Locale(\"en\"), new RandomService()), null, false),\n            Arguments.of(new FakerContext(Locale.US, new RandomService()), new FakerContext(Locale.US, new RandomService()), true)\n        );\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "Stream<Arguments>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest.[void]expressionShouldFailWithContaining(String,String)", "name": "expressionShouldFailWithContaining", "arg_nums": 2, "params": [{"name": "expression", "type": "String"}, {"name": "errorMessagePattern", "type": "String"}], "return_type": "void", "signature": "private void expressionShouldFailWithContaining(String expression, String errorMessagePattern)", "original_string": "    private void expressionShouldFailWithContaining(String expression, String errorMessagePattern) {\n        assertThatThrownBy(() -> fakeValuesService.expression(expression, faker, context))\n            .isInstanceOf(RuntimeException.class)\n            .hasMessageContaining(errorMessagePattern);\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java", "class_name": "FakeValuesServiceTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesServiceTest.java.FakeValuesServiceTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/RandomService_nextLongTest.java.RandomService_nextLongTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        randomService = new RandomService(new Random());\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/RandomService_nextLongTest.java", "class_name": "RandomService_nextLongTest", "class_uri": "src/test/java/net/datafaker/service/RandomService_nextLongTest.java.RandomService_nextLongTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/net/datafaker/service/FakeValuesService_primitiveToWrapperTest.java.FakeValuesService_primitiveToWrapperTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        fakeValuesService = new FakeValuesService();\n    }", "default_arguments": null, "file": "src/test/java/net/datafaker/service/FakeValuesService_primitiveToWrapperTest.java", "class_name": "FakeValuesService_primitiveToWrapperTest", "class_uri": "src/test/java/net/datafaker/service/FakeValuesService_primitiveToWrapperTest.java.FakeValuesService_primitiveToWrapperTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/Faker.java.Faker.[]Faker()", "name": "Faker", "arg_nums": 0, "params": [], "return_type": "", "signature": "public Faker()", "original_string": "    public Faker() {\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/Faker.java", "class_name": "Faker", "class_uri": "src/main/java/net/datafaker/Faker.java.Faker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/Faker.java.Faker.[]Faker(Locale)", "name": "Faker", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "", "signature": "public Faker(Locale locale)", "original_string": "    public Faker(Locale locale) {\n        super(locale);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/Faker.java", "class_name": "Faker", "class_uri": "src/main/java/net/datafaker/Faker.java.Faker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/Faker.java.Faker.[]Faker(Random)", "name": "Faker", "arg_nums": 1, "params": [{"name": "random", "type": "Random"}], "return_type": "", "signature": "public Faker(Random random)", "original_string": "    public Faker(Random random) {\n        super(random);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/Faker.java", "class_name": "Faker", "class_uri": "src/main/java/net/datafaker/Faker.java.Faker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/Faker.java.Faker.[]Faker(Locale,Random)", "name": "Faker", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "random", "type": "Random"}], "return_type": "", "signature": "public Faker(Locale locale, Random random)", "original_string": "    public Faker(Locale locale, Random random) {\n        super(locale, random);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/Faker.java", "class_name": "Faker", "class_uri": "src/main/java/net/datafaker/Faker.java.Faker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/Faker.java.Faker.[]Faker(Locale,RandomService)", "name": "Faker", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "randomService", "type": "RandomService"}], "return_type": "", "signature": "public Faker(Locale locale, RandomService randomService)", "original_string": "    public Faker(Locale locale, RandomService randomService) {\n        super(locale, randomService);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/Faker.java", "class_name": "Faker", "class_uri": "src/main/java/net/datafaker/Faker.java.Faker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/Faker.java.Faker.[]Faker(FakeValuesService,FakerContext)", "name": "Faker", "arg_nums": 2, "params": [{"name": "fakeValuesService", "type": "FakeValuesService"}, {"name": "context", "type": "FakerContext"}], "return_type": "", "signature": "public Faker(FakeValuesService fakeValuesService, FakerContext context)", "original_string": "    public Faker(FakeValuesService fakeValuesService, FakerContext context) {\n        super(fakeValuesService, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/Faker.java", "class_name": "Faker", "class_uri": "src/main/java/net/datafaker/Faker.java.Faker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream.[]FakeStream(List<Supplier<T>>,int,int,RandomService,double)", "name": "FakeStream", "arg_nums": 5, "params": [{"name": "suppliers", "type": "List<Supplier<T>>"}, {"name": "minLength", "type": "int"}, {"name": "maxLength", "type": "int"}, {"name": "randomService", "type": "RandomService"}, {"name": "nullRate", "type": "double"}], "return_type": "", "signature": "private FakeStream(List<Supplier<T>> suppliers, int minLength, int maxLength, RandomService randomService, double nullRate)", "original_string": "    private FakeStream(List<Supplier<T>> suppliers, int minLength, int maxLength, RandomService randomService, double nullRate) {\n        super(suppliers, minLength, maxLength, randomService, nullRate);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/sequence/FakeStream.java", "class_name": "FakeStream", "class_uri": "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream.[Stream<T>]get()", "name": "get", "arg_nums": 0, "params": [], "return_type": "Stream<T>", "signature": "@SuppressWarnings(\"unchecked\")\n    public Stream<T> get()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    public Stream<T> get() {\n        if (isInfinite()) {\n            return Stream.generate(this::singleton);\n        }\n\n        int size = randomService.nextInt(minLength, maxLength);\n        return Stream.generate(this::singleton).limit(size);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/sequence/FakeStream.java", "class_name": "FakeStream", "class_uri": "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "Stream<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream.[boolean]isInfinite()", "name": "isInfinite", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isInfinite()", "original_string": "    public boolean isInfinite() {\n        return maxLength < 0;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/sequence/FakeStream.java", "class_name": "FakeStream", "class_uri": "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream.[Iterator<T>]iterator()", "name": "iterator", "arg_nums": 0, "params": [], "return_type": "Iterator<T>", "signature": "@Override\n    public Iterator<T> iterator()", "original_string": "    @Override\n    public Iterator<T> iterator() {\n        return get().iterator();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/sequence/FakeStream.java", "class_name": "FakeStream", "class_uri": "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Iterator<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return \"FakeStream{minLength=%d, maxLength=%d, nullRate=%s}\".formatted(minLength, maxLength, nullRate);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/sequence/FakeStream.java", "class_name": "FakeStream", "class_uri": "src/main/java/net/datafaker/sequence/FakeStream.java.FakeStream", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/sequence/FakeSequence.java.FakeSequence.[]FakeSequence(List<Supplier<T>>,int,int,RandomService,double)", "name": "FakeSequence", "arg_nums": 5, "params": [{"name": "suppliers", "type": "List<Supplier<T>>"}, {"name": "minLength", "type": "int"}, {"name": "maxLength", "type": "int"}, {"name": "randomService", "type": "RandomService"}, {"name": "nullRate", "type": "double"}], "return_type": "", "signature": "protected FakeSequence(List<Supplier<T>> suppliers, int minLength, int maxLength, RandomService randomService, double nullRate)", "original_string": "    protected FakeSequence(List<Supplier<T>> suppliers, int minLength, int maxLength, RandomService randomService, double nullRate) {\n        this.suppliers = suppliers;\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n        this.randomService = randomService;\n        this.nullRate = nullRate;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/sequence/FakeSequence.java", "class_name": "FakeSequence", "class_uri": "src/main/java/net/datafaker/sequence/FakeSequence.java.FakeSequence", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/sequence/FakeSequence.java.FakeSequence.[Sequence]get()", "name": "get", "arg_nums": 0, "params": [], "return_type": "Sequence", "signature": "public abstract <Sequence> Sequence get()", "original_string": "    public abstract <Sequence> Sequence get();", "default_arguments": null, "file": "src/main/java/net/datafaker/sequence/FakeSequence.java", "class_name": "FakeSequence", "class_uri": "src/main/java/net/datafaker/sequence/FakeSequence.java.FakeSequence", "attributes": {"modifiers": "public abstract", "marker_annotations": [], "non_marker_annotations": ["public", "abstract"], "comments": [], "return_type": "Sequence", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/sequence/FakeSequence.java.FakeSequence.[boolean]isInfinite()", "name": "isInfinite", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isInfinite()", "original_string": "    public boolean isInfinite() {\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/sequence/FakeSequence.java", "class_name": "FakeSequence", "class_uri": "src/main/java/net/datafaker/sequence/FakeSequence.java.FakeSequence", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/sequence/FakeSequence.java.FakeSequence.[T]singleton()", "name": "singleton", "arg_nums": 0, "params": [], "return_type": "T", "signature": "public T singleton()", "original_string": "    public T singleton() {\n        if (nullRate == 0d || randomService.nextDouble() >= nullRate) {\n            return suppliers.get(randomService.nextInt(suppliers.size())).get();\n        }\n        return null;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/sequence/FakeSequence.java", "class_name": "FakeSequence", "class_uri": "src/main/java/net/datafaker/sequence/FakeSequence.java.FakeSequence", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/sequence/FakeCollection.java.FakeCollection.[]FakeCollection(List<Supplier<T>>,int,int,RandomService,double)", "name": "FakeCollection", "arg_nums": 5, "params": [{"name": "suppliers", "type": "List<Supplier<T>>"}, {"name": "minLength", "type": "int"}, {"name": "maxLength", "type": "int"}, {"name": "randomService", "type": "RandomService"}, {"name": "nullRate", "type": "double"}], "return_type": "", "signature": "private FakeCollection(List<Supplier<T>> suppliers, int minLength, int maxLength, RandomService randomService, double nullRate)", "original_string": "    private FakeCollection(List<Supplier<T>> suppliers, int minLength, int maxLength, RandomService randomService, double nullRate) {\n        super(suppliers, minLength, maxLength, randomService, nullRate);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/sequence/FakeCollection.java", "class_name": "FakeCollection", "class_uri": "src/main/java/net/datafaker/sequence/FakeCollection.java.FakeCollection", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/sequence/FakeCollection.java.FakeCollection.[List<T>]get()", "name": "get", "arg_nums": 0, "params": [], "return_type": "List<T>", "signature": "@SuppressWarnings(\"unchecked\")\n    public List<T> get()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    public List<T> get() {\n        int size = randomService.nextInt(minLength, maxLength);\n        List<T> result = new ArrayList<>(size);\n        while (result.size() < size) {\n            result.add(singleton());\n        }\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/sequence/FakeCollection.java", "class_name": "FakeCollection", "class_uri": "src/main/java/net/datafaker/sequence/FakeCollection.java.FakeCollection", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/sequence/FakeCollection.java.FakeCollection.[Iterator<T>]iterator()", "name": "iterator", "arg_nums": 0, "params": [], "return_type": "Iterator<T>", "signature": "@Override\n    public Iterator<T> iterator()", "original_string": "    @Override\n    public Iterator<T> iterator() {\n        return get().iterator();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/sequence/FakeCollection.java", "class_name": "FakeCollection", "class_uri": "src/main/java/net/datafaker/sequence/FakeCollection.java.FakeCollection", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Iterator<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Verb.java.Verb.[]Verb(BaseProviders)", "name": "Verb", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Verb(BaseProviders faker)", "original_string": "    protected Verb(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Verb.java", "class_name": "Verb", "class_uri": "src/main/java/net/datafaker/providers/base/Verb.java.Verb", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Verb.java.Verb.[String]base()", "name": "base", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String base()", "original_string": "    public String base() {\n        return resolve(\"verbs.base\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Verb.java", "class_name": "Verb", "class_uri": "src/main/java/net/datafaker/providers/base/Verb.java.Verb", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates the base form of a random verb.\n\n@return a string of base form of a verb.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Verb.java.Verb.[String]past()", "name": "past", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String past()", "original_string": "    public String past() {\n        return resolve(\"verbs.past\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Verb.java", "class_name": "Verb", "class_uri": "src/main/java/net/datafaker/providers/base/Verb.java.Verb", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random verb in past tense.\n\n@return a string of verb in past tense.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Verb.java.Verb.[String]pastParticiple()", "name": "pastParticiple", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String pastParticiple()", "original_string": "    public String pastParticiple() {\n        return resolve(\"verbs.past_participle\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Verb.java", "class_name": "Verb", "class_uri": "src/main/java/net/datafaker/providers/base/Verb.java.Verb", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random verb in past participle tense.\n\n@return a string of verb in past participle tense.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Verb.java.Verb.[String]simplePresent()", "name": "simplePresent", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String simplePresent()", "original_string": "    public String simplePresent() {\n        return resolve(\"verbs.simple_present\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Verb.java", "class_name": "Verb", "class_uri": "src/main/java/net/datafaker/providers/base/Verb.java.Verb", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random verb in simple present tense.\n\n@return a string of verb in simple present tense.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Verb.java.Verb.[String]ingForm()", "name": "ingForm", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ingForm()", "original_string": "    public String ingForm() {\n        return resolve(\"verbs.ing_form\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Verb.java", "class_name": "Verb", "class_uri": "src/main/java/net/datafaker/providers/base/Verb.java.Verb", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random verb in -ing form.\n\n@return a string of verb in -ing form.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Camera.java.Camera.[]Camera(BaseProviders)", "name": "Camera", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Camera(BaseProviders faker)", "original_string": "    protected Camera(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Camera.java", "class_name": "Camera", "class_uri": "src/main/java/net/datafaker/providers/base/Camera.java.Camera", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Camera.java.Camera.[String]brand()", "name": "brand", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String brand()", "original_string": "    public String brand() {\n        return resolve(\"camera.brand\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Camera.java", "class_name": "Camera", "class_uri": "src/main/java/net/datafaker/providers/base/Camera.java.Camera", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random camera brand.\n\n@return a string of camera brand.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Camera.java.Camera.[String]model()", "name": "model", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String model()", "original_string": "    public String model() {\n        return resolve(\"camera.model\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Camera.java", "class_name": "Camera", "class_uri": "src/main/java/net/datafaker/providers/base/Camera.java.Camera", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random camera model.\n\n@return a string of camera model.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Camera.java.Camera.[String]brandWithModel()", "name": "brandWithModel", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String brandWithModel()", "original_string": "    public String brandWithModel() {\n        return resolve(\"camera.brand_with_model\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Camera.java", "class_name": "Camera", "class_uri": "src/main/java/net/datafaker/providers/base/Camera.java.Camera", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random camera brand with a model.\n\n@return a string of camera brand with a model.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ.[]CNPJ(BaseProviders)", "name": "CNPJ", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected CNPJ(BaseProviders faker)", "original_string": "    protected CNPJ(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CNPJ.java", "class_name": "CNPJ", "class_uri": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ.[String]valid()", "name": "valid", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String valid()", "original_string": "    public String valid() {\n        return IdNumberGeneratorPtBrUtil.cnpj(faker, true, true, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CNPJ.java", "class_name": "CNPJ", "class_uri": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturn valid and formatted\n\n@return a valid CNPJ\n@see IdNumberGeneratorPtBrUtil#cnpj(BaseProviders, boolean, boolean, boolean)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ.[String]valid(boolean)", "name": "valid", "arg_nums": 1, "params": [{"name": "formatted", "type": "boolean"}], "return_type": "String", "signature": "public String valid(boolean formatted)", "original_string": "    public String valid(boolean formatted) {\n        return IdNumberGeneratorPtBrUtil.cnpj(faker, formatted, true, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CNPJ.java", "class_name": "CNPJ", "class_uri": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturn valid and formatted\n\n@param formatted a CNPJ (un)formatted\n@return a valid CNPJ\n@see IdNumberGeneratorPtBrUtil#cnpj(BaseProviders, boolean, boolean, boolean)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ.[String]valid(boolean,boolean)", "name": "valid", "arg_nums": 2, "params": [{"name": "formatted", "type": "boolean"}, {"name": "multiBranch", "type": "boolean"}], "return_type": "String", "signature": "public String valid(boolean formatted, boolean multiBranch)", "original_string": "    public String valid(boolean formatted, boolean multiBranch) {\n        return IdNumberGeneratorPtBrUtil.cnpj(faker, formatted, true, multiBranch);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CNPJ.java", "class_name": "CNPJ", "class_uri": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturn valid and formatted. Also, it generates a multi-branch CNPJ.\n<p>\nCNPJ numbers follow this format:\n{@code AA.AAA.AAA/BBBB-CC }\nWhere A is the number of the company, B is the branch number and C are verification digits.\nIf the parameter {@code multiBranch} is false, B will always be 0001.\nOtherwise, this number will vary between 0001 and 9999 .\n\n@param formatted   a CNPJ (un)formatted\n@param multiBranch CPNJ from a random company branch\n@return a valid CNPJ\n@see IdNumberGeneratorPtBrUtil#cnpj(BaseProviders, boolean, boolean, boolean)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ.[String]invalid()", "name": "invalid", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String invalid()", "original_string": "    public String invalid() {\n        return IdNumberGeneratorPtBrUtil.cnpj(faker, true, false, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CNPJ.java", "class_name": "CNPJ", "class_uri": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturn invalid and formatted\n\n@return an invalid CNPJ\n@see IdNumberGeneratorPtBrUtil#cnpj(BaseProviders, boolean, boolean, boolean)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ.[String]invalid(boolean)", "name": "invalid", "arg_nums": 1, "params": [{"name": "formatted", "type": "boolean"}], "return_type": "String", "signature": "public String invalid(boolean formatted)", "original_string": "    public String invalid(boolean formatted) {\n        return IdNumberGeneratorPtBrUtil.cnpj(faker, formatted, false, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CNPJ.java", "class_name": "CNPJ", "class_uri": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturn invalid and (un)formatted\n\n@return an invalid CNPJ\n@see IdNumberGeneratorPtBrUtil#cnpj(BaseProviders, boolean, boolean, boolean)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ.[String]invalid(boolean,boolean)", "name": "invalid", "arg_nums": 2, "params": [{"name": "formatted", "type": "boolean"}, {"name": "multiBranch", "type": "boolean"}], "return_type": "String", "signature": "public String invalid(boolean formatted, boolean multiBranch)", "original_string": "    public String invalid(boolean formatted, boolean multiBranch) {\n        return IdNumberGeneratorPtBrUtil.cnpj(faker, formatted, false, multiBranch);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CNPJ.java", "class_name": "CNPJ", "class_uri": "src/main/java/net/datafaker/providers/base/CNPJ.java.CNPJ", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturn invalid and (un)formatted. Also, it generates a multi-branch CNPJ.\n<p>\nCNPJ numbers follow this format:\n{@code AA.AAA.AAA/BBBB-CC }\nWhere A is the number of the company, B is the branch number and C are verification digits.\nIf the parameter {@code multiBranch} is false, B will always be 0001.\nOtherwise, this number will vary between 0001 and 9999 .\n\n@return an invalid CNPJ\n@see IdNumberGeneratorPtBrUtil#cnpj(BaseProviders, boolean, boolean, boolean)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/ElectricalComponents.java.ElectricalComponents.[]ElectricalComponents(BaseProviders)", "name": "ElectricalComponents", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected ElectricalComponents(BaseProviders faker)", "original_string": "    protected ElectricalComponents(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ElectricalComponents.java", "class_name": "ElectricalComponents", "class_uri": "src/main/java/net/datafaker/providers/base/ElectricalComponents.java.ElectricalComponents", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ElectricalComponents.java.ElectricalComponents.[String]active()", "name": "active", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String active()", "original_string": "    public String active() {\n        return resolve(\"electrical_components.active\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ElectricalComponents.java", "class_name": "ElectricalComponents", "class_uri": "src/main/java/net/datafaker/providers/base/ElectricalComponents.java.ElectricalComponents", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ElectricalComponents.java.ElectricalComponents.[String]passive()", "name": "passive", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String passive()", "original_string": "    public String passive() {\n        return resolve(\"electrical_components.passive\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ElectricalComponents.java", "class_name": "ElectricalComponents", "class_uri": "src/main/java/net/datafaker/providers/base/ElectricalComponents.java.ElectricalComponents", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ElectricalComponents.java.ElectricalComponents.[String]electromechanical()", "name": "electromechanical", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String electromechanical()", "original_string": "    public String electromechanical() {\n        return resolve(\"electrical_components.electromechanical\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ElectricalComponents.java", "class_name": "ElectricalComponents", "class_uri": "src/main/java/net/datafaker/providers/base/ElectricalComponents.java.ElectricalComponents", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Money.java.Money.[]Money(BaseProviders)", "name": "Money", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "public Money(BaseProviders faker)", "original_string": "    public Money(BaseProviders faker) {\n        super(faker);\n        this.availableCurrencies = List.copyOf(Currency.getAvailableCurrencies());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Money.java", "class_name": "Money", "class_uri": "src/main/java/net/datafaker/providers/base/Money.java.Money", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Money.java.Money.[String]currency()", "name": "currency", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String currency()", "original_string": "    public String currency() {\n        return getRandomCurrency().getDisplayName();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Money.java", "class_name": "Money", "class_uri": "src/main/java/net/datafaker/providers/base/Money.java.Money", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method returns a currency value in a more descriptive manner like \"United States dollar\", etc.\n\n@see Currency#getDisplayName()\n@return detailed currency value.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Money.java.Money.[String]currencyCode()", "name": "currencyCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String currencyCode()", "original_string": "    public String currencyCode() {\n        return getRandomCurrency().getCurrencyCode();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Money.java", "class_name": "Money", "class_uri": "src/main/java/net/datafaker/providers/base/Money.java.Money", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a random ISO 4217 currency code (ex. EUR, USD)\n\n@see Currency#getCurrencyCode()\n@return an ISO 4217 currency code\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Money.java.Money.[String]currencyNumericCode()", "name": "currencyNumericCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String currencyNumericCode()", "original_string": "    public String currencyNumericCode() {\n        return getRandomCurrency().getNumericCodeAsString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Money.java", "class_name": "Money", "class_uri": "src/main/java/net/datafaker/providers/base/Money.java.Money", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns the 3-digit ISO 4217 numeric code of a random currency.\n\n@see Currency#getNumericCodeAsString()\n@return an ISO 4217 currency numeric code\n@since 2.2.0\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Money.java.Money.[String]currencySymbol()", "name": "currencySymbol", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String currencySymbol()", "original_string": "    public String currencySymbol() {\n        return getRandomCurrency().getSymbol();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Money.java", "class_name": "Money", "class_uri": "src/main/java/net/datafaker/providers/base/Money.java.Money", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@see Currency#getSymbol()\n@return an ISO 4217 currency symbol\n@since 2.2.0\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Money.java.Money.[Currency]getRandomCurrency()", "name": "getRandomCurrency", "arg_nums": 0, "params": [], "return_type": "Currency", "signature": "private Currency getRandomCurrency()", "original_string": "    private Currency getRandomCurrency() {\n        int randomIndex = faker.random().nextInt(availableCurrencies.size());\n        return availableCurrencies.get(randomIndex);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Money.java", "class_name": "Money", "class_uri": "src/main/java/net/datafaker/providers/base/Money.java.Money", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Currency", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[]Sip(BaseProviders)", "name": "Sip", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "public Sip(final BaseProviders faker)", "original_string": "    public Sip(final BaseProviders faker) {\n        super(faker);\n        for (int i = 0; i < portPool.length; i++) {\n            portPool[i] = 40000 + 2 * i;\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]method()", "name": "method", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String method()", "original_string": "    public String method() {\n        return resolve(\"sip.methods\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThe various SIP methods are listed in <a href=\"https://en.wikipedia.org/wiki/Session_Initiation_Protocol\">https://en.wikipedia.org/wiki/Session_Initiation_Protocol</a>.\n\n@return a SIP method String, e.g. {@code INVITE}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]contentType()", "name": "contentType", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String contentType()", "original_string": "    public String contentType() {\n        return resolve(\"sip.content.types\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nContent types are based on <a href=\"https://tools.ietf.org/html/rfc5621\">https://tools.ietf.org/html/rfc5621</a> and\n<a href=\"https://tools.ietf.org/html/rfc3261\">https://tools.ietf.org/html/rfc3261</a>.\n\n@return a SIP content-type declaration String, e.g. {@code application/sdp}\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]messagingPort()", "name": "messagingPort", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int messagingPort()", "original_string": "    public int messagingPort() {\n        return faker.random().nextInt(1000, 9999);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGet a 4 digit random port for SIP messaging.\n\n@return a SIP messaging port int, e.g. 5060.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]rtpPort()", "name": "rtpPort", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int rtpPort()", "original_string": "    public int rtpPort() {\n        return portPool[faker.random().nextInt(portPool.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGet a 5 digit positive even port for rtp udp communication.\n\n@return an RTP UDP 5 digit port int, e.g. 40002.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]provisionalResponseCode()", "name": "provisionalResponseCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int provisionalResponseCode()", "original_string": "    public int provisionalResponseCode() {\n        return Integer.parseInt(faker.resolve(\"sip.response.codes.provisional\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nProviosional code, the various response codes are listed in\n<a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n\n@return a 3 digit SIP provision response code between 100 and 199 int, e.g. {@code 180}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]successResponseCode()", "name": "successResponseCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int successResponseCode()", "original_string": "    public int successResponseCode() {\n        return Integer.parseInt(faker.resolve(\"sip.response.codes.success\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nSuccess code, the various response codes are listed in\n<a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n\n@return a 3 digit SIP success response code between 200 and 299 int, e.g. {@code 200}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]redirectResponseCode()", "name": "redirectResponseCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int redirectResponseCode()", "original_string": "    public int redirectResponseCode() {\n        return Integer.parseInt(faker.resolve(\"sip.response.codes.redirection\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nRedirection code, the various response codes are listed in\n<a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n\n@return a 3 digit SIP redirection response code between 300 and 399 int, e.g. {@code 301}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]clientErrorResponseCode()", "name": "clientErrorResponseCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int clientErrorResponseCode()", "original_string": "    public int clientErrorResponseCode() {\n        return Integer.parseInt(faker.resolve(\"sip.response.codes.clientError\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nClient error code, the various response codes are listed in\n<a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n\n@return a 3 digit SIP client error response code between 400 and 499 int, e.g. {@code 486}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]serverErrorResponseCode()", "name": "serverErrorResponseCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int serverErrorResponseCode()", "original_string": "    public int serverErrorResponseCode() {\n        return Integer.parseInt(faker.resolve(\"sip.response.codes.serverError\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nServer error code, the various response codes are listed in\n<a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n\n@return a 3 digit SIP server error response code between 500 and 599 int, e.g. {@code 503}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[int]globalErrorResponseCode()", "name": "globalErrorResponseCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int globalErrorResponseCode()", "original_string": "    public int globalErrorResponseCode() {\n        return Integer.parseInt(faker.resolve(\"sip.response.codes.globalError\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGlobal error code, the various response codes are listed in\n<a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n\n@return a 3 digit SIP global error response code between 600 and 699 int, e.g. {@code 608}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]provisionalResponsePhrase()", "name": "provisionalResponsePhrase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String provisionalResponsePhrase()", "original_string": "    public String provisionalResponsePhrase() {\n        return resolve(\"sip.response.phrases.provisional\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nProviosional phrase, the various response phrases are listed in\n<a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n\n@return a SIP provisional response phrase String, e.g. {@code Ringing}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]successResponsePhrase()", "name": "successResponsePhrase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String successResponsePhrase()", "original_string": "    public String successResponsePhrase() {\n        return resolve(\"sip.response.phrases.success\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nSuccess phrase, the various response phrases are listed in\n<a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n\n@return a SIP success response phrase String, e.g. {@code OK}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]redirectResponsePhrase()", "name": "redirectResponsePhrase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String redirectResponsePhrase()", "original_string": "    public String redirectResponsePhrase() {\n        return resolve(\"sip.response.phrases.redirection\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRedirection phrase, the various response phrases are listed in\n<a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n\n@return a SIP redirection response phrase String, e.g. {@code Moved Permanently}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]clientErrorResponsePhrase()", "name": "clientErrorResponsePhrase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String clientErrorResponsePhrase()", "original_string": "    public String clientErrorResponsePhrase() {\n        return resolve(\"sip.response.phrases.clientError\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nClient error phrase, the various response phrases are listed in\n<a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n\n@return a SIP client error response phrase String, e.g. {@code Busy Here}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]serverErrorResponsePhrase()", "name": "serverErrorResponsePhrase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String serverErrorResponsePhrase()", "original_string": "    public String serverErrorResponsePhrase() {\n        return resolve(\"sip.response.phrases.serverError\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nServer error phrase, the various response phrases are listed in\n<a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n\n@return a SIP server error response phrase String, e.g. {@code Service Unavailable}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]globalErrorResponsePhrase()", "name": "globalErrorResponsePhrase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String globalErrorResponsePhrase()", "original_string": "    public String globalErrorResponsePhrase() {\n        return resolve(\"sip.response.phrases.globalError\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nServer error phrase, the various response phrases are listed in\n<a href=\"https://en.wikipedia.org/wiki/List_of_SIP_response_codes\">https://en.wikipedia.org/wiki/List_of_SIP_response_codes</a>.\n\n@return a SIP global error response phrase String, e.g. {@code Rejected}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]bodyString()", "name": "bodyString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String bodyString()", "original_string": "    public String bodyString() {\n        return \"v=0\\n\" +\n            \"o=\" + faker.name().firstName() + \" \" + faker.internet().uuid() + \" IN IP4 \" + faker.internet().domainName() + \"\\n\" +\n            \"s=-\\n\" +\n            \"c=IN IP4 \" + faker.internet().ipV4Address() + \"\\n\" +\n            \"t=0 0\\n\" +\n            \"m=audio \" + rtpPort() + \" RTP/AVP 0\\n\" +\n            \"a=rtpmap:0 PCMU/8000\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nBody example of SDP type can be found in <a href=\"https://tools.ietf.org/html/rfc5621\">https://tools.ietf.org/html/rfc5621</a>.\n\n@return a fake SDP type SIP body String.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[byte[]]bodyBytes()", "name": "bodyBytes", "arg_nums": 0, "params": [], "return_type": "byte[]", "signature": "public byte[] bodyBytes()", "original_string": "    public byte[] bodyBytes() {\n        return bodyString().getBytes(UTF_8);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "byte[]", "classes": []}, "docstring": "\nBody example of SDP type can be found in <a href=\"https://tools.ietf.org/html/rfc5621\">https://tools.ietf.org/html/rfc5621</a>.\n\n@return a fake SDP type SIP body byte array.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Sip.java.Sip.[String]nameAddress()", "name": "nameAddress", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String nameAddress()", "original_string": "    public String nameAddress() {\n        return \"<sip:\" + faker.name().firstName() + \"@\" + faker.internet().ipV4Address() + \":\" + messagingPort() + \">\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Sip.java", "class_name": "Sip", "class_uri": "src/main/java/net/datafaker/providers/base/Sip.java.Sip", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturn a valid name address to use with {@code to/from} headers.\n\n@return a valid name address String, e.g. {@code <sip:fakeName@10.1.2.3:5060>}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Marketing.java.Marketing.[]Marketing(BaseProviders)", "name": "Marketing", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Marketing(BaseProviders faker)", "original_string": "    protected Marketing(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Marketing.java", "class_name": "Marketing", "class_uri": "src/main/java/net/datafaker/providers/base/Marketing.java.Marketing", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Marketing.java.Marketing.[String]buzzwords()", "name": "buzzwords", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String buzzwords()", "original_string": "    public String buzzwords() {\n        return resolve(\"marketing.buzzwords\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Marketing.java", "class_name": "Marketing", "class_uri": "src/main/java/net/datafaker/providers/base/Marketing.java.Marketing", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Yoda.java.Yoda.[]Yoda(BaseProviders)", "name": "Yoda", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Yoda(final BaseProviders faker)", "original_string": "    protected Yoda(final BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Yoda.java", "class_name": "Yoda", "class_uri": "src/main/java/net/datafaker/providers/base/Yoda.java.Yoda", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Yoda.java.Yoda.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"yoda.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Yoda.java", "class_name": "Yoda", "class_uri": "src/main/java/net/datafaker/providers/base/Yoda.java.Yoda", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[]Locality(BaseProviders)", "name": "Locality", "arg_nums": 1, "params": [{"name": "baseProviders", "type": "BaseProviders"}], "return_type": "", "signature": "public Locality(BaseProviders baseProviders)", "original_string": "    public Locality(BaseProviders baseProviders) {\n        super(baseProviders);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Locality.java", "class_name": "Locality", "class_uri": "src/main/java/net/datafaker/providers/base/Locality.java.Locality", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for Locality class\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[List<String>]allSupportedLocales(Set<String>)", "name": "allSupportedLocales", "arg_nums": 1, "params": [{"name": "fileMasks", "type": "Set<String>"}], "return_type": "List<String>", "signature": "@Deprecated\n    @SuppressWarnings(\"unused\")\n    public List<String> allSupportedLocales(Set<String> fileMasks)", "original_string": "    @Deprecated\n    @SuppressWarnings(\"unused\")\n    public List<String> allSupportedLocales(Set<String> fileMasks) {\n        return allSupportedLocales();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Locality.java", "class_name": "Locality", "class_uri": "src/main/java/net/datafaker/providers/base/Locality.java.Locality", "attributes": {"modifiers": "@Deprecated\n    @SuppressWarnings(\"unused\")\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["@SuppressWarnings(\"unused\")", "public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": "\n@param fileMasks is not used anymore\n@deprecated Use {{@link #allSupportedLocales()}} instead\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[List<String>]allSupportedLocales()", "name": "allSupportedLocales", "arg_nums": 0, "params": [], "return_type": "List<String>", "signature": "@Deterministic\n    public final List<String> allSupportedLocales()", "original_string": "    @Deterministic\n    public final List<String> allSupportedLocales() {\n        return LOCALES;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Locality.java", "class_name": "Locality", "class_uri": "src/main/java/net/datafaker/providers/base/Locality.java.Locality", "attributes": {"modifiers": "@Deterministic\n    public final", "marker_annotations": ["@Deterministic"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": "\nRetrieves list of all locales supported by Datafaker\n\n@return a List of Strings with the name of the locale (e.g. \"es\", \"es-MX\")\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[String]displayName()", "name": "displayName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String displayName()", "original_string": "    public String displayName() {\n        int randomIndex = faker.random().nextInt(LOCALES.size());\n        Locale locale = Locale.forLanguageTag(LOCALES.get(randomIndex));\n\n        String displayLanguage = locale.getDisplayLanguage(Locale.ROOT);\n        String displayCountry = locale.getDisplayCountry(Locale.ROOT);\n        if (!displayCountry.isEmpty()) {\n            displayLanguage += \" (\" + displayCountry + \")\";\n        }\n\n        return displayLanguage.isEmpty() ? Locale.ENGLISH.getDisplayLanguage(Locale.ROOT) : displayLanguage;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Locality.java", "class_name": "Locality", "class_uri": "src/main/java/net/datafaker/providers/base/Locality.java.Locality", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nSelect a locale at random and returns display name of the locale\n\n@return locale in the form: \"English (United States) or English\"\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[String]localeString()", "name": "localeString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String localeString()", "original_string": "    public String localeString() {\n        return localeStringWithRandom(faker.random().getRandomInternal());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Locality.java", "class_name": "Locality", "class_uri": "src/main/java/net/datafaker/providers/base/Locality.java.Locality", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return Randomly selected locale (e.g. \"es\", \"es-MX\").\nLocale is selected at random WITH replacement from all supported locales\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[String]localeStringWithRandom(Random)", "name": "localeStringWithRandom", "arg_nums": 1, "params": [{"name": "random", "type": "Random"}], "return_type": "String", "signature": "public String localeStringWithRandom(Random random)", "original_string": "    public String localeStringWithRandom(Random random) {\n\n        // Randomly select a locale from list of all locales supported\n        int randomIndex = random.nextInt(LOCALES.size());\n        return LOCALES.get(randomIndex);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Locality.java", "class_name": "Locality", "class_uri": "src/main/java/net/datafaker/providers/base/Locality.java.Locality", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nSelect a locale at random with replacement\n\n@param random random number generator (can utilize seed for deterministic random selection)\n@return String of a randomly selected locale (e.g. \"es\", \"es-MX\")\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[String]localeStringWithoutReplacement()", "name": "localeStringWithoutReplacement", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String localeStringWithoutReplacement()", "original_string": "    public String localeStringWithoutReplacement() {\n        return localeStringWithoutReplacement(faker.random().getRandomInternal());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Locality.java", "class_name": "Locality", "class_uri": "src/main/java/net/datafaker/providers/base/Locality.java.Locality", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return Randomly selected locale (e.g. \"es\", \"es-MX\").\nLocale is selected at random WITHOUT replacement from all supported locales\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Locality.java.Locality.[String]localeStringWithoutReplacement(Random)", "name": "localeStringWithoutReplacement", "arg_nums": 1, "params": [{"name": "random", "type": "Random"}], "return_type": "String", "signature": "public synchronized String localeStringWithoutReplacement(Random random)", "original_string": "    public synchronized String localeStringWithoutReplacement(Random random) {\n        if (shuffledLocales.isEmpty() || shuffledLocaleIndex >= shuffledLocales.size() - 1) {\n            // copy list of locales supported into shuffledLocales\n            shuffledLocales.clear();\n            shuffledLocales.addAll(LOCALES);\n            shuffledLocaleIndex = 0;\n            Collections.shuffle(shuffledLocales, random);\n        }\n\n        // retrieve next locale in shuffledLocales and increase the index\n        return shuffledLocales.get(shuffledLocaleIndex++);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Locality.java", "class_name": "Locality", "class_uri": "src/main/java/net/datafaker/providers/base/Locality.java.Locality", "attributes": {"modifiers": "public synchronized", "marker_annotations": [], "non_marker_annotations": ["public", "synchronized"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nSelect a locale at random without replacement. This can be used to rotate through all supported locales\n\n@param random random number generator (can utilize seed for deterministic random selection)\n@return String of a randomly selected locale (e.g. \"es\", \"es-MX\")\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Hipster.java.Hipster.[]Hipster(BaseProviders)", "name": "Hipster", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Hipster(final BaseProviders faker)", "original_string": "    protected Hipster(final BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hipster.java", "class_name": "Hipster", "class_uri": "src/main/java/net/datafaker/providers/base/Hipster.java.Hipster", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hipster.java.Hipster.[String]word()", "name": "word", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String word()", "original_string": "    public String word() {\n        return resolve(\"hipster.words\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hipster.java", "class_name": "Hipster", "class_uri": "src/main/java/net/datafaker/providers/base/Hipster.java.Hipster", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Coin.java.Coin.[]Coin(BaseProviders)", "name": "Coin", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Coin(BaseProviders faker)", "original_string": "    protected Coin(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Coin.java", "class_name": "Coin", "class_uri": "src/main/java/net/datafaker/providers/base/Coin.java.Coin", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Coin.java.Coin.[String]flip()", "name": "flip", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String flip()", "original_string": "    public String flip() {\n        return resolve(\"coin.flip\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Coin.java", "class_name": "Coin", "class_uri": "src/main/java/net/datafaker/providers/base/Coin.java.Coin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return coin side e.g. \"Heads\", \"Tails\".\n"}, {"uris": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms.[]FinancialTerms(BaseProviders)", "name": "FinancialTerms", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "public FinancialTerms(BaseProviders faker)", "original_string": "    public FinancialTerms(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FinancialTerms.java", "class_name": "FinancialTerms", "class_uri": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms.[String]noun()", "name": "noun", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String noun()", "original_string": "    public String noun() {\n        return noun(faker.options().option(FinancialTerms.Category.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FinancialTerms.java", "class_name": "FinancialTerms", "class_uri": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms.[String]noun(Category)", "name": "noun", "arg_nums": 1, "params": [{"name": "category", "type": "Category"}], "return_type": "String", "signature": "public String noun(Category category)", "original_string": "    public String noun(Category category) {\n        return resolve(\"financial_terms.\" + category.getName() + \".nouns\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FinancialTerms.java", "class_name": "FinancialTerms", "class_uri": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms.[String]verb()", "name": "verb", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String verb()", "original_string": "    public String verb() {\n        return verb(faker.options().option(FinancialTerms.Category.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FinancialTerms.java", "class_name": "FinancialTerms", "class_uri": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms.[String]verb(Category)", "name": "verb", "arg_nums": 1, "params": [{"name": "category", "type": "Category"}], "return_type": "String", "signature": "public String verb(Category category)", "original_string": "    public String verb(Category category) {\n        return resolve(\"financial_terms.\" + category.getName() + \".verbs\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FinancialTerms.java", "class_name": "FinancialTerms", "class_uri": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms.[String]adjective()", "name": "adjective", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String adjective()", "original_string": "    public String adjective() {\n        return adjective(faker.options().option(FinancialTerms.Category.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FinancialTerms.java", "class_name": "FinancialTerms", "class_uri": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms.[String]adjective(Category)", "name": "adjective", "arg_nums": 1, "params": [{"name": "category", "type": "Category"}], "return_type": "String", "signature": "public String adjective(Category category)", "original_string": "    public String adjective(Category category) {\n        return resolve(\"financial_terms.\" + category.getName() + \".adjectives\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FinancialTerms.java", "class_name": "FinancialTerms", "class_uri": "src/main/java/net/datafaker/providers/base/FinancialTerms.java.FinancialTerms", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Unique.java.Unique.[]Unique(BaseProviders)", "name": "Unique", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "public Unique(BaseProviders faker)", "original_string": "    public Unique(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Unique.java", "class_name": "Unique", "class_uri": "src/main/java/net/datafaker/providers/base/Unique.java.Unique", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Unique.java.Unique.[String]fetchFromYaml(String)", "name": "fetchFromYaml", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "String", "signature": "public String fetchFromYaml(String key)", "original_string": "    public String fetchFromYaml(String key) {\n        Locale locale = faker.getContext().getLocale();\n\n        Map<String, List<String>> valuesByKey = valuesByKeyAndLocale.getOrDefault(locale, new HashMap<>());\n        List<String> values = valuesByKey.get(key);\n\n        if (values == null) {\n            values = fetchValues(key);\n        }\n\n        if (values.isEmpty()) {\n            throw new NoSuchElementException(\"All possible values have been generated for key %s under locale %s\".formatted(\n                key,\n                locale));\n        }\n\n        int index = faker.random().nextInt(0, values.size() - 1);\n        String value = removeAtIndex(values, index);\n\n        valuesByKey.put(key, values);\n        valuesByKeyAndLocale.put(locale, valuesByKey);\n\n        return value;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Unique.java", "class_name": "Unique", "class_uri": "src/main/java/net/datafaker/providers/base/Unique.java.Unique", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a random value from the YAML files that is guaranteed to be unique for the given key and locale set on\nthe current faker instance.\n<p>\nSince unique values are tracked by both the key and the locale, manually changing the locale could cause\nthis method to return the same value for a given key if there is not a separate locale for the given key.\n\n@param key the key of the values to fetch from the YAML files\n@return a unique random value based on {@code key} and the current locale\n@throws NoSuchElementException if {@code key} does not correspond to a list of valid data types in the YAML\n                               files, or if all possible values found for {@code key} and current locale\n                               have been returned\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Unique.java.Unique.[String]removeAtIndex(List<String>,int)", "name": "removeAtIndex", "arg_nums": 2, "params": [{"name": "values", "type": "List<String>"}, {"name": "index", "type": "int"}], "return_type": "String", "signature": "private String removeAtIndex(List<String> values, int index)", "original_string": "    private String removeAtIndex(List<String> values, int index) {\n        int lastIndex = values.size() - 1;\n        Collections.swap(values, index, lastIndex);\n        return values.remove(lastIndex);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Unique.java", "class_name": "Unique", "class_uri": "src/main/java/net/datafaker/providers/base/Unique.java.Unique", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Unique.java.Unique.[List<String>]fetchValues(String)", "name": "fetchValues", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "List<String>", "signature": "private List<String> fetchValues(String key)", "original_string": "    private List<String> fetchValues(String key) {\n        Object object = faker.fakeValuesService().fetchObject(key, faker.getContext());\n\n        if (!(object instanceof List)) {\n            throw noValuesFoundException(key);\n        }\n\n        List<String> values = ((List<?>) object).stream()\n            .filter(value -> !(value instanceof List))\n            .map(String::valueOf)\n            .collect(Collectors.toList());\n\n        if (values.isEmpty()) {\n            throw noValuesFoundException(key);\n        }\n\n        return values;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Unique.java", "class_name": "Unique", "class_uri": "src/main/java/net/datafaker/providers/base/Unique.java.Unique", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Unique.java.Unique.[NoSuchElementException]noValuesFoundException(String)", "name": "noValuesFoundException", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "NoSuchElementException", "signature": "private NoSuchElementException noValuesFoundException(String key)", "original_string": "    private NoSuchElementException noValuesFoundException(String key) {\n        return new NoSuchElementException(\"No values found for key %s\".formatted(\n            key));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Unique.java", "class_name": "Unique", "class_uri": "src/main/java/net/datafaker/providers/base/Unique.java.Unique", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "NoSuchElementException", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Music.java.Music.[]Music(BaseProviders)", "name": "Music", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Music(BaseProviders faker)", "original_string": "    protected Music(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Music.java", "class_name": "Music", "class_uri": "src/main/java/net/datafaker/providers/base/Music.java.Music", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Music.java.Music.[String]instrument()", "name": "instrument", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String instrument()", "original_string": "    public String instrument() {\n        return resolve(\"music.instruments\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Music.java", "class_name": "Music", "class_uri": "src/main/java/net/datafaker/providers/base/Music.java.Music", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Music.java.Music.[String]key()", "name": "key", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String key()", "original_string": "    public String key() {\n        return faker.options().option(KEYS) + faker.options().option(KEY_VARIANTS);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Music.java", "class_name": "Music", "class_uri": "src/main/java/net/datafaker/providers/base/Music.java.Music", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Music.java.Music.[String]chord()", "name": "chord", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String chord()", "original_string": "    public String chord() {\n        return key() + faker.options().option(CHORD_TYPES);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Music.java", "class_name": "Music", "class_uri": "src/main/java/net/datafaker/providers/base/Music.java.Music", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Music.java.Music.[String]genre()", "name": "genre", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String genre()", "original_string": "    public String genre() {\n        return resolve(\"music.genres\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Music.java", "class_name": "Music", "class_uri": "src/main/java/net/datafaker/providers/base/Music.java.Music", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[]Hashing(BaseProviders)", "name": "Hashing", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Hashing(BaseProviders faker)", "original_string": "    protected Hashing(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hashing.java", "class_name": "Hashing", "class_uri": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[String]md2()", "name": "md2", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String md2()", "original_string": "    public String md2() {\n        return generateString(\"MD2\", \"%032x\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hashing.java", "class_name": "Hashing", "class_uri": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[String]md5()", "name": "md5", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String md5()", "original_string": "    public String md5() {\n        return generateString(\"MD5\", \"%032x\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hashing.java", "class_name": "Hashing", "class_uri": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[String]sha1()", "name": "sha1", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sha1()", "original_string": "    public String sha1() {\n        return generateString(\"SHA-1\", \"%040x\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hashing.java", "class_name": "Hashing", "class_uri": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[String]sha384()", "name": "sha384", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sha384()", "original_string": "    public String sha384() {\n        return generateString(\"SHA-384\", \"%096x\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hashing.java", "class_name": "Hashing", "class_uri": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[String]sha256()", "name": "sha256", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sha256()", "original_string": "    public String sha256() {\n        return generateString(\"SHA-256\", \"%064x\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hashing.java", "class_name": "Hashing", "class_uri": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[String]sha512()", "name": "sha512", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sha512()", "original_string": "    public String sha512() {\n        return generateString(\"SHA-512\", \"%0128x\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hashing.java", "class_name": "Hashing", "class_uri": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing.[String]generateString(String,String)", "name": "generateString", "arg_nums": 2, "params": [{"name": "algorithm", "type": "String"}, {"name": "format", "type": "String"}], "return_type": "String", "signature": "private String generateString(String algorithm, String format)", "original_string": "    private String generateString(String algorithm, String format) {\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);\n            String characters = faker.lorem().characters();\n            messageDigest.update(characters.getBytes(StandardCharsets.UTF_8), 0, characters.length());\n            return format.formatted(new BigInteger(1, messageDigest.digest()));\n        } catch (NoSuchAlgorithmException noSuchAlgorithmException) {\n            throw new RuntimeException(\"Failed to generate string using algorithm \\\"%s\\\" and format \\\"%s\\\"\"\n                .formatted(algorithm, format), noSuchAlgorithmException);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hashing.java", "class_name": "Hashing", "class_uri": "src/main/java/net/datafaker/providers/base/Hashing.java.Hashing", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[]Barcode(BaseProviders)", "name": "Barcode", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "public Barcode(BaseProviders faker)", "original_string": "    public Barcode(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Barcode.java", "class_name": "Barcode", "class_uri": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[long]ean13()", "name": "ean13", "arg_nums": 0, "params": [], "return_type": "long", "signature": "public long ean13()", "original_string": "    public long ean13() {\n        return ean(13);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Barcode.java", "class_name": "Barcode", "class_uri": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[long]ean8()", "name": "ean8", "arg_nums": 0, "params": [], "return_type": "long", "signature": "public long ean8()", "original_string": "    public long ean8() {\n        return ean(8);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Barcode.java", "class_name": "Barcode", "class_uri": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[long]gtin14()", "name": "gtin14", "arg_nums": 0, "params": [], "return_type": "long", "signature": "public long gtin14()", "original_string": "    public long gtin14() {\n        return ean(14);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Barcode.java", "class_name": "Barcode", "class_uri": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[long]gtin12()", "name": "gtin12", "arg_nums": 0, "params": [], "return_type": "long", "signature": "public long gtin12()", "original_string": "    public long gtin12() {\n        return ean(12);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Barcode.java", "class_name": "Barcode", "class_uri": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[long]gtin13()", "name": "gtin13", "arg_nums": 0, "params": [], "return_type": "long", "signature": "public long gtin13()", "original_string": "    public long gtin13() {\n        return ean13();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Barcode.java", "class_name": "Barcode", "class_uri": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[long]gtin8()", "name": "gtin8", "arg_nums": 0, "params": [], "return_type": "long", "signature": "public long gtin8()", "original_string": "    public long gtin8() {\n        return ean8();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Barcode.java", "class_name": "Barcode", "class_uri": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[int]roundToHighestMultiplyOfTen(int)", "name": "roundToHighestMultiplyOfTen", "arg_nums": 1, "params": [{"name": "number", "type": "int"}], "return_type": "int", "signature": "private static int roundToHighestMultiplyOfTen(int number)", "original_string": "    private static int roundToHighestMultiplyOfTen(int number) {\n        if (number % 10 == 0) {\n            return number;\n        } else {\n            int ones = number % 10;\n            int add = 10 - ones;\n            return number + add;\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Barcode.java", "class_name": "Barcode", "class_uri": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[long]ean(int)", "name": "ean", "arg_nums": 1, "params": [{"name": "length", "type": "int"}], "return_type": "long", "signature": "private long ean(int length)", "original_string": "    private long ean(int length) {\n        long firstPart = switch (length) {\n            case 8, 12, 13, 14 -> this.faker.number().randomNumber(length - 1, true);\n            default -> 0;\n        };\n        int odd = 0;\n        int even = 0;\n        long number = firstPart;\n        int i = 0;\n        while (number > 0) {\n            i++;\n            if (i % 2 == 1) {\n                odd += number % 10;\n            } else {\n                even += number % 10;\n            }\n\n            number /= 10;\n        }\n        if (i % 2 == 0) {\n            int tmp = even;\n            even = odd;\n            odd = tmp;\n        }\n\n        final int var = calculateVar(length, odd, even);\n\n        int rounded = roundToHighestMultiplyOfTen((var));\n        int checkDigit = rounded - var;\n        int product = 10;\n        while (product <= checkDigit) {\n            product *= 10;\n        }\n        return firstPart * product + checkDigit;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Barcode.java", "class_name": "Barcode", "class_uri": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[int]calculateVar(int,int,int)", "name": "calculateVar", "arg_nums": 3, "params": [{"name": "length", "type": "int"}, {"name": "odd", "type": "int"}, {"name": "even", "type": "int"}], "return_type": "int", "signature": "private int calculateVar(int length, int odd, int even)", "original_string": "    private int calculateVar(int length, int odd, int even){\n        return switch(length) {\n            case 13 -> odd + even + (even << 1);\n            case 8, 12, 14 -> odd + even + (odd << 1);\n            default -> 0;\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Barcode.java", "class_name": "Barcode", "class_uri": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode.[String]type()", "name": "type", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String type()", "original_string": "    public String type() {\n        return resolve(\"barcode.types\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Barcode.java", "class_name": "Barcode", "class_uri": "src/main/java/net/datafaker/providers/base/Barcode.java.Barcode", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Animal.java.Animal.[]Animal(BaseProviders)", "name": "Animal", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Animal(BaseProviders faker)", "original_string": "    protected Animal(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Animal.java", "class_name": "Animal", "class_uri": "src/main/java/net/datafaker/providers/base/Animal.java.Animal", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Animal.java.Animal.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"creature.animal.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Animal.java", "class_name": "Animal", "class_uri": "src/main/java/net/datafaker/providers/base/Animal.java.Animal", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Animal.java.Animal.[String]scientificName()", "name": "scientificName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String scientificName()", "original_string": "    public String scientificName() {\n        return genus() + \" \" + species();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Animal.java", "class_name": "Animal", "class_uri": "src/main/java/net/datafaker/providers/base/Animal.java.Animal", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Animal.java.Animal.[String]genus()", "name": "genus", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String genus()", "original_string": "    public String genus() {\n        return WordUtils.capitalize(faker.resolve(\"creature.animal.genus\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Animal.java", "class_name": "Animal", "class_uri": "src/main/java/net/datafaker/providers/base/Animal.java.Animal", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Animal.java.Animal.[String]species()", "name": "species", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String species()", "original_string": "    public String species() {\n        return resolve(\"creature.animal.species\").toLowerCase();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Animal.java", "class_name": "Animal", "class_uri": "src/main/java/net/datafaker/providers/base/Animal.java.Animal", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods.[Map<String, Method>]scanMethodsByName(Class<?>)", "name": "scanMethodsByName", "arg_nums": 1, "params": [{"name": "clazz", "type": "Class<?>"}], "return_type": "Map<String, Method>", "signature": "private static synchronized Map<String, Method> scanMethodsByName(Class<?> clazz)", "original_string": "    private static synchronized Map<String, Method> scanMethodsByName(Class<?> clazz) {\n        return Stream.of(clazz.getMethods())\n            .filter(ObjectMethods::isUseful)\n            .collect(toMap(Method::getName, method -> method));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ObjectMethods.java", "class_name": "ObjectMethods", "class_uri": "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods", "attributes": {"modifiers": "private static synchronized", "marker_annotations": [], "non_marker_annotations": ["private", "static", "synchronized"], "comments": [], "return_type": "Map<String, Method>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods.[Map<String, Method>]scanMethodsByReturnType(Class<?>)", "name": "scanMethodsByReturnType", "arg_nums": 1, "params": [{"name": "clazz", "type": "Class<?>"}], "return_type": "Map<String, Method>", "signature": "private static synchronized Map<String, Method> scanMethodsByReturnType(Class<?> clazz)", "original_string": "    private static synchronized Map<String, Method> scanMethodsByReturnType(Class<?> clazz) {\n        return Stream.of(clazz.getMethods())\n            .filter(ObjectMethods::isUseful)\n            .collect(toMap(method -> method.getReturnType().getSimpleName(), method -> method));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ObjectMethods.java", "class_name": "ObjectMethods", "class_uri": "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods", "attributes": {"modifiers": "private static synchronized", "marker_annotations": [], "non_marker_annotations": ["private", "static", "synchronized"], "comments": [], "return_type": "Map<String, Method>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods.[boolean]isUseful(Method)", "name": "isUseful", "arg_nums": 1, "params": [{"name": "method", "type": "Method"}], "return_type": "boolean", "signature": "private static boolean isUseful(Method method)", "original_string": "    private static boolean isUseful(Method method) {\n        return method.getParameterCount() == 0\n            && method.getDeclaringClass() != Object.class\n            && method.getReturnType() != void.class\n            && !IGNORED_METHODS.contains(method.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ObjectMethods.java", "class_name": "ObjectMethods", "class_uri": "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nLater we could mark all provider methods with some annotation like \"@Provider\" instead of this shaky logic\n"}, {"uris": "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods.[Method]getMethodByName(Object,String)", "name": "getMethodByName", "arg_nums": 2, "params": [{"name": "object", "type": "Object"}, {"name": "methodName", "type": "String"}], "return_type": "Method", "signature": "public static Method getMethodByName(Object object, String methodName)", "original_string": "    public static Method getMethodByName(Object object, String methodName) {\n        return METHODS_BY_NAME.computeIfAbsent(object.getClass(), ObjectMethods::scanMethodsByName).get(methodName);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ObjectMethods.java", "class_name": "ObjectMethods", "class_uri": "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Method", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods.[Method]getMethodByReturnType(Object,String)", "name": "getMethodByReturnType", "arg_nums": 2, "params": [{"name": "object", "type": "Object"}, {"name": "returnTypeSimpleName", "type": "String"}], "return_type": "Method", "signature": "private static Method getMethodByReturnType(Object object, String returnTypeSimpleName)", "original_string": "    private static Method getMethodByReturnType(Object object, String returnTypeSimpleName) {\n        return METHODS_BY_RETURN_TYPE.computeIfAbsent(object.getClass(), ObjectMethods::scanMethodsByReturnType).get(returnTypeSimpleName);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ObjectMethods.java", "class_name": "ObjectMethods", "class_uri": "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Method", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods.[T]executeMethodByReturnType(Object,String)", "name": "executeMethodByReturnType", "arg_nums": 2, "params": [{"name": "object", "type": "Object"}, {"name": "returnTypeSimpleName", "type": "String"}], "return_type": "T", "signature": "@SuppressWarnings(\"unchecked\")\n    public static <T> T executeMethodByReturnType(Object object, String returnTypeSimpleName)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    public static <T> T executeMethodByReturnType(Object object, String returnTypeSimpleName) {\n        try {\n            Method method = getMethodByReturnType(object, returnTypeSimpleName);\n            if (method == null) return null;\n            method.setAccessible(true);\n            return (T) method.invoke(object);\n        } catch (IllegalAccessException | InvocationTargetException e) {\n            throw new RuntimeException(\"Failed to call method %s.%s()\".formatted(object.getClass().getName(), returnTypeSimpleName), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ObjectMethods.java", "class_name": "ObjectMethods", "class_uri": "src/main/java/net/datafaker/providers/base/ObjectMethods.java.ObjectMethods", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    public static", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public", "static"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Compass.java.Compass.[]Compass(BaseProviders)", "name": "Compass", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Compass(BaseProviders faker)", "original_string": "    protected Compass(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Compass.java", "class_name": "Compass", "class_uri": "src/main/java/net/datafaker/providers/base/Compass.java.Compass", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Compass.java.Compass.[Compass]compassPoint(CompassPoint)", "name": "compassPoint", "arg_nums": 1, "params": [{"name": "compassPoint", "type": "CompassPoint"}], "return_type": "Compass", "signature": "public Compass compassPoint(CompassPoint compassPoint)", "original_string": "    public Compass compassPoint(CompassPoint compassPoint) {\n        this.compassPoint = compassPoint;\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Compass.java", "class_name": "Compass", "class_uri": "src/main/java/net/datafaker/providers/base/Compass.java.Compass", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Compass", "classes": []}, "docstring": "\nSpecify point of direction. If not specified, point of direction will be randomly selected.\n\n@param compassPoint point of direction.\n@return itself with specified point of direction.\n@see CompassPoint\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Compass.java.Compass.[String]word()", "name": "word", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String word()", "original_string": "    public String word() {\n        if (compassPoint == null) {\n            return resolve(\"compass.direction\");\n        }\n\n        return resolve(\"compass.\" + compassPoint.yamlKey + \".word\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Compass.java", "class_name": "Compass", "class_uri": "src/main/java/net/datafaker/providers/base/Compass.java.Compass", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns full-size name of direction according to the specified {@link CompassPoint} point of direction.\n<p>\nSpecify point of direction using {@link Compass#compassPoint(CompassPoint)} method.\n<p>\nTypical call of this method: {@code compass().compassPoint(CompassPoint.CARDINAL).word();}\n\n@return the full-size direction word according to the specified {@link CompassPoint}. Otherwise, the point of direction will be selected randomly.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Compass.java.Compass.[String]abbreviation()", "name": "abbreviation", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String abbreviation()", "original_string": "    public String abbreviation() {\n        if (compassPoint == null) {\n            return resolve(\"compass.abbreviation\");\n        }\n\n        return resolve(\"compass.\" + compassPoint.yamlKey + \".abbreviation\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Compass.java", "class_name": "Compass", "class_uri": "src/main/java/net/datafaker/providers/base/Compass.java.Compass", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns abbreviation of direction according to the specified {@link CompassPoint} point of direction.\n<p>\nSpecify point of direction using {@link Compass#compassPoint(CompassPoint)} method.\n<p>\nTypical call of this method: {@code compass().compassPoint(CompassPoint.CARDINAL).abbreviation();}\n\n@return the abbreviation of direction according to the specified {@link CompassPoint}. Otherwise, the point of direction will be selected randomly.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Compass.java.Compass.[String]azimuth()", "name": "azimuth", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String azimuth()", "original_string": "    public String azimuth() {\n        if (compassPoint == null) {\n            return resolve(\"compass.azimuth\");\n        }\n\n        return resolve(\"compass.\" + compassPoint.yamlKey + \".azimuth\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Compass.java", "class_name": "Compass", "class_uri": "src/main/java/net/datafaker/providers/base/Compass.java.Compass", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns appropriate azimuth of direction according to the specified {@link CompassPoint} point of direction.\n<p>\nSpecify point of direction using {@link Compass#compassPoint(CompassPoint)} method.\n<p>\nTypical call of this method: {@code compass().compassPoint(CompassPoint.CARDINAL).azimuth();}\n\n@return the appropriate azimuth of the direction according to the specified {@link CompassPoint}. Otherwise, the point of direction will be selected randomly.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Educator.java.Educator.[]Educator(BaseProviders)", "name": "Educator", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Educator(BaseProviders faker)", "original_string": "    protected Educator(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Educator.java", "class_name": "Educator", "class_uri": "src/main/java/net/datafaker/providers/base/Educator.java.Educator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Educator.java.Educator.[String]university()", "name": "university", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String university()", "original_string": "    public String university() {\n        return resolve(\"educator.name\")\n            + \" \"\n            + resolve(\"educator.tertiary.type\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Educator.java", "class_name": "Educator", "class_uri": "src/main/java/net/datafaker/providers/base/Educator.java.Educator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": " TODO - move these all out to en.yml by default. "}, {"uris": "src/main/java/net/datafaker/providers/base/Educator.java.Educator.[String]course()", "name": "course", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String course()", "original_string": "    public String course() {\n        return resolve(\"educator.tertiary.degree.type\")\n            + \" \"\n            + resolve(\"educator.tertiary.degree.subject\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Educator.java", "class_name": "Educator", "class_uri": "src/main/java/net/datafaker/providers/base/Educator.java.Educator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Educator.java.Educator.[String]subjectWithNumber()", "name": "subjectWithNumber", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String subjectWithNumber()", "original_string": "    public String subjectWithNumber() {\n        return resolve(\"educator.tertiary.degree.subject\")\n            + \" \"\n            + faker.numerify(resolve(\"educator.tertiary.degree.course_number\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Educator.java", "class_name": "Educator", "class_uri": "src/main/java/net/datafaker/providers/base/Educator.java.Educator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Educator.java.Educator.[String]secondarySchool()", "name": "secondarySchool", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String secondarySchool()", "original_string": "    public String secondarySchool() {\n        return resolve(\"educator.name\")\n            + \" \"\n            + resolve(\"educator.secondary\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Educator.java", "class_name": "Educator", "class_uri": "src/main/java/net/datafaker/providers/base/Educator.java.Educator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Educator.java.Educator.[String]campus()", "name": "campus", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String campus()", "original_string": "    public String campus() {\n        return resolve(\"educator.name\") + \" Campus\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Educator.java", "class_name": "Educator", "class_uri": "src/main/java/net/datafaker/providers/base/Educator.java.Educator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[]Computer(BaseProviders)", "name": "Computer", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Computer(BaseProviders faker)", "original_string": "    protected Computer(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Computer.java", "class_name": "Computer", "class_uri": "src/main/java/net/datafaker/providers/base/Computer.java.Computer", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[String]type()", "name": "type", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String type()", "original_string": "    public String type() {\n        return resolve(\"computer.type\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Computer.java", "class_name": "Computer", "class_uri": "src/main/java/net/datafaker/providers/base/Computer.java.Computer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[String]platform()", "name": "platform", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String platform()", "original_string": "    public String platform() {\n        return resolve(\"computer.platform\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Computer.java", "class_name": "Computer", "class_uri": "src/main/java/net/datafaker/providers/base/Computer.java.Computer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[String]operatingSystem()", "name": "operatingSystem", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String operatingSystem()", "original_string": "    public String operatingSystem() {\n        return resolve(\"computer.os.\" + faker.options().option(\"linux\", \"macos\", \"windows\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Computer.java", "class_name": "Computer", "class_uri": "src/main/java/net/datafaker/providers/base/Computer.java.Computer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[String]linux()", "name": "linux", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String linux()", "original_string": "    public String linux() {\n        return resolve(\"computer.os.linux\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Computer.java", "class_name": "Computer", "class_uri": "src/main/java/net/datafaker/providers/base/Computer.java.Computer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[String]macos()", "name": "macos", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String macos()", "original_string": "    public String macos() {\n        return resolve(\"computer.os.macos\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Computer.java", "class_name": "Computer", "class_uri": "src/main/java/net/datafaker/providers/base/Computer.java.Computer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[String]windows()", "name": "windows", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String windows()", "original_string": "    public String windows() {\n        return resolve(\"computer.os.windows\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Computer.java", "class_name": "Computer", "class_uri": "src/main/java/net/datafaker/providers/base/Computer.java.Computer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Computer.java.Computer.[String]brand()", "name": "brand", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String brand()", "original_string": "    public String brand() { return resolve(\"computer.brand\"); }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Computer.java", "class_name": "Computer", "class_uri": "src/main/java/net/datafaker/providers/base/Computer.java.Computer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Transport.java.Transport.[]Transport(BaseProviders)", "name": "Transport", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "public Transport(BaseProviders faker)", "original_string": "    public Transport(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Transport.java", "class_name": "Transport", "class_uri": "src/main/java/net/datafaker/providers/base/Transport.java.Transport", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Transport.java.Transport.[String]type()", "name": "type", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String type()", "original_string": "    public String type() {\n        return resolve(\"transport.type\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Transport.java", "class_name": "Transport", "class_uri": "src/main/java/net/datafaker/providers/base/Transport.java.Transport", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return transport type in the descriptive manner just like \"Car\", \"Aircraft\", etc.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Weather.java.Weather.[]Weather(BaseProviders)", "name": "Weather", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Weather(BaseProviders faker)", "original_string": "    protected Weather(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Weather.java", "class_name": "Weather", "class_uri": "src/main/java/net/datafaker/providers/base/Weather.java.Weather", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Weather.java.Weather.[String]description()", "name": "description", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String description()", "original_string": "    public String description() {\n        return resolve(\"weather.description\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Weather.java", "class_name": "Weather", "class_uri": "src/main/java/net/datafaker/providers/base/Weather.java.Weather", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a short weather description.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Weather.java.Weather.[String]temperatureCelsius()", "name": "temperatureCelsius", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String temperatureCelsius()", "original_string": "    public String temperatureCelsius() {\n        return temperature(DEFAULT_MIN_TEMP_C, DEFAULT_MAX_TEMP_C, \"weather.temperature.celsius\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Weather.java", "class_name": "Weather", "class_uri": "src/main/java/net/datafaker/providers/base/Weather.java.Weather", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a random temperature celsius between -30 and 38 degrees.\n\n@return String that represents temperature in format 5\u00b0C\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Weather.java.Weather.[String]temperatureFahrenheit()", "name": "temperatureFahrenheit", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String temperatureFahrenheit()", "original_string": "    public String temperatureFahrenheit() {\n        return temperature(DEFAULT_MIN_TEMP_F, DEFAULT_MAX_TEMP_F, \"weather.temperature.fahrenheit\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Weather.java", "class_name": "Weather", "class_uri": "src/main/java/net/datafaker/providers/base/Weather.java.Weather", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a random temperature fahrenheit between -22 and 100 degrees.\n\n@return String that represents temperature in format 5\u00b0F\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Weather.java.Weather.[String]temperatureCelsius(int,int)", "name": "temperatureCelsius", "arg_nums": 2, "params": [{"name": "minTemperature", "type": "int"}, {"name": "maxTemperature", "type": "int"}], "return_type": "String", "signature": "public String temperatureCelsius(int minTemperature, int maxTemperature)", "original_string": "    public String temperatureCelsius(int minTemperature, int maxTemperature) {\n        return temperature(minTemperature, maxTemperature, \"weather.temperature.celsius\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Weather.java", "class_name": "Weather", "class_uri": "src/main/java/net/datafaker/providers/base/Weather.java.Weather", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a random temperature celsius between two temperatures.\n\n@param minTemperature the minimal temperature\n@param maxTemperature the maximal temperature\n@return String that represents temperature in format 5\u00b0C\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Weather.java.Weather.[String]temperatureFahrenheit(int,int)", "name": "temperatureFahrenheit", "arg_nums": 2, "params": [{"name": "minTemperature", "type": "int"}, {"name": "maxTemperature", "type": "int"}], "return_type": "String", "signature": "public String temperatureFahrenheit(int minTemperature, int maxTemperature)", "original_string": "    public String temperatureFahrenheit(int minTemperature, int maxTemperature) {\n        return temperature(minTemperature, maxTemperature, \"weather.temperature.fahrenheit\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Weather.java", "class_name": "Weather", "class_uri": "src/main/java/net/datafaker/providers/base/Weather.java.Weather", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a random temperature fahrenheit between two temperatures.\n\n@param minTemperature the minimal temperature\n@param maxTemperature the maximal temperature\n@return String that represents temperature in format 5\u00b0F\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Weather.java.Weather.[String]temperature(int,int,String)", "name": "temperature", "arg_nums": 3, "params": [{"name": "minTemperature", "type": "int"}, {"name": "maxTemperature", "type": "int"}, {"name": "degreeKey", "type": "String"}], "return_type": "String", "signature": "private String temperature(int minTemperature, int maxTemperature, String degreeKey)", "original_string": "    private String temperature(int minTemperature, int maxTemperature, String degreeKey) {\n        return faker.random().nextInt(minTemperature, maxTemperature) + resolve(degreeKey);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Weather.java", "class_name": "Weather", "class_uri": "src/main/java/net/datafaker/providers/base/Weather.java.Weather", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hobby.java.Hobby.[]Hobby(BaseProviders)", "name": "Hobby", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Hobby(BaseProviders faker)", "original_string": "    protected Hobby(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hobby.java", "class_name": "Hobby", "class_uri": "src/main/java/net/datafaker/providers/base/Hobby.java.Hobby", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hobby.java.Hobby.[String]activity()", "name": "activity", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String activity()", "original_string": "    public String activity() {\n        return resolve(\"hobby.activity\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hobby.java", "class_name": "Hobby", "class_uri": "src/main/java/net/datafaker/providers/base/Hobby.java.Hobby", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[]AbstractProvider(T)", "name": "AbstractProvider", "arg_nums": 1, "params": [{"name": "faker", "type": "T"}], "return_type": "", "signature": "protected AbstractProvider(T faker)", "original_string": "    protected AbstractProvider(T faker) {\n        this.faker = faker;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/AbstractProvider.java", "class_name": "AbstractProvider", "class_uri": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[ProviderRegistration]getFaker()", "name": "getFaker", "arg_nums": 0, "params": [], "return_type": "ProviderRegistration", "signature": "public final ProviderRegistration getFaker()", "original_string": "    public final ProviderRegistration getFaker() {\n        return faker;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/AbstractProvider.java", "class_name": "AbstractProvider", "class_uri": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider", "attributes": {"modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "ProviderRegistration", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[String]resolve(String)", "name": "resolve", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "String", "signature": "protected String resolve(String key)", "original_string": "    protected String resolve(String key) {\n        return faker.fakeValuesService().resolve(key, this, faker.getContext());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/AbstractProvider.java", "class_name": "AbstractProvider", "class_uri": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[String]resolve(String,Supplier<String>)", "name": "resolve", "arg_nums": 2, "params": [{"name": "key", "type": "String"}, {"name": "message", "type": "Supplier<String>"}], "return_type": "String", "signature": "protected String resolve(String key, Supplier<String> message)", "original_string": "    protected String resolve(String key, Supplier<String> message) {\n        return faker.fakeValuesService().resolve(key, this, faker, message, faker.getContext());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/AbstractProvider.java", "class_name": "AbstractProvider", "class_uri": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object o)", "original_string": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof AbstractProvider<?> that)) return false;\n\n        return Objects.equals(faker, that.faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/AbstractProvider.java", "class_name": "AbstractProvider", "class_uri": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        return getClass().hashCode();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/AbstractProvider.java", "class_name": "AbstractProvider", "class_uri": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[List<G>]loadGenerators(Class<G>)", "name": "loadGenerators", "arg_nums": 1, "params": [{"name": "generatorClass", "type": "Class<G>"}], "return_type": "List<G>", "signature": "protected final <G> List<G> loadGenerators(Class<G> generatorClass)", "original_string": "    protected final <G> List<G> loadGenerators(Class<G> generatorClass) {\n        return ServiceLoader.load(generatorClass).stream()\n            .map(ServiceLoader.Provider::get)\n            .toList();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/AbstractProvider.java", "class_name": "AbstractProvider", "class_uri": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "List<G>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return \"%s(%s)@%s\".formatted(getClass().getSimpleName(), faker, Integer.toHexString(hashCode()));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/AbstractProvider.java", "class_name": "AbstractProvider", "class_uri": "src/main/java/net/datafaker/providers/base/AbstractProvider.java.AbstractProvider", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/App.java.App.[]App(BaseProviders)", "name": "App", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected App(BaseProviders faker)", "original_string": "    protected App(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/App.java", "class_name": "App", "class_uri": "src/main/java/net/datafaker/providers/base/App.java.App", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/App.java.App.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"app.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/App.java", "class_name": "App", "class_uri": "src/main/java/net/datafaker/providers/base/App.java.App", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/App.java.App.[String]version()", "name": "version", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String version()", "original_string": "    public String version() {\n        return faker.numerify(faker.resolve(\"app.version\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/App.java", "class_name": "App", "class_uri": "src/main/java/net/datafaker/providers/base/App.java.App", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/App.java.App.[String]author()", "name": "author", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String author()", "original_string": "    public String author() {\n        return resolve(\"app.author\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/App.java", "class_name": "App", "class_uri": "src/main/java/net/datafaker/providers/base/App.java.App", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[]Drone(BaseProviders)", "name": "Drone", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Drone(BaseProviders faker)", "original_string": "    protected Drone(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"drone.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]weight()", "name": "weight", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String weight()", "original_string": "    public String weight() {\n        return faker.numerify(resolve(\"drone.weight\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxAscentSpeed()", "name": "maxAscentSpeed", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String maxAscentSpeed()", "original_string": "    public String maxAscentSpeed() {\n        return faker.numerify(resolve(\"drone.max_ascent_speed\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxDescentSpeed()", "name": "maxDescentSpeed", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String maxDescentSpeed()", "original_string": "    public String maxDescentSpeed() {\n        return faker.numerify(resolve(\"drone.max_descent_speed\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]flightTime()", "name": "flightTime", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String flightTime()", "original_string": "    public String flightTime() {\n        return faker.numerify(resolve(\"drone.flight_time\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxAltitude()", "name": "maxAltitude", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String maxAltitude()", "original_string": "    public String maxAltitude() {\n        return faker.numerify(resolve(\"drone.max_altitude\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxFlightDistance()", "name": "maxFlightDistance", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String maxFlightDistance()", "original_string": "    public String maxFlightDistance() {\n        return faker.numerify(resolve(\"drone.max_flight_distance\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxSpeed()", "name": "maxSpeed", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String maxSpeed()", "original_string": "    public String maxSpeed() {\n        return faker.numerify(resolve(\"drone.max_speed\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxWindResistance()", "name": "maxWindResistance", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String maxWindResistance()", "original_string": "    public String maxWindResistance() {\n        return faker.numerify(resolve(\"drone.max_wind_resistance\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxAngularVelocity()", "name": "maxAngularVelocity", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String maxAngularVelocity()", "original_string": "    public String maxAngularVelocity() {\n        return faker.numerify(resolve(\"drone.max_angular_velocity\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxTiltAngle()", "name": "maxTiltAngle", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String maxTiltAngle()", "original_string": "    public String maxTiltAngle() {\n        return faker.numerify(resolve(\"drone.max_tilt_angle\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]operatingTemperature()", "name": "operatingTemperature", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String operatingTemperature()", "original_string": "    public String operatingTemperature() {\n        return faker.numerify(resolve(\"drone.operating_temperature\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]batteryCapacity()", "name": "batteryCapacity", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String batteryCapacity()", "original_string": "    public String batteryCapacity() {\n        return faker.numerify(resolve(\"drone.battery_capacity\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]batteryVoltage()", "name": "batteryVoltage", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String batteryVoltage()", "original_string": "    public String batteryVoltage() {\n        return faker.numerify(resolve(\"drone.battery_voltage\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]batteryType()", "name": "batteryType", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String batteryType()", "original_string": "    public String batteryType() {\n        return resolve(\"drone.battery_type\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]batteryWeight()", "name": "batteryWeight", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String batteryWeight()", "original_string": "    public String batteryWeight() {\n        return faker.numerify(resolve(\"drone.battery_weight\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]chargingTemperature()", "name": "chargingTemperature", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String chargingTemperature()", "original_string": "    public String chargingTemperature() {\n        return faker.numerify(resolve(\"drone.charging_temperature\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxChargingPower()", "name": "maxChargingPower", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String maxChargingPower()", "original_string": "    public String maxChargingPower() {\n        return faker.numerify(resolve(\"drone.max_charging_power\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]iso()", "name": "iso", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String iso()", "original_string": "    public String iso() {\n        return resolve(\"drone.iso\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxResolution()", "name": "maxResolution", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String maxResolution()", "original_string": "    public String maxResolution() {\n        return faker.numerify(resolve(\"drone.max_resolution\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]photoFormat()", "name": "photoFormat", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String photoFormat()", "original_string": "    public String photoFormat() {\n        return resolve(\"drone.photo_format\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]videoFormat()", "name": "videoFormat", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String videoFormat()", "original_string": "    public String videoFormat() {\n        return resolve(\"drone.video_format\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]maxShutterSpeed()", "name": "maxShutterSpeed", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String maxShutterSpeed()", "original_string": "    public String maxShutterSpeed() {\n        return resolve(\"drone.max_shutter_speed\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]minShutterSpeed()", "name": "minShutterSpeed", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String minShutterSpeed()", "original_string": "    public String minShutterSpeed() {\n        return resolve(\"drone.min_shutter_speed\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Drone.java.Drone.[String]shutterSpeedUnits()", "name": "shutterSpeedUnits", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deterministic\n    public String shutterSpeedUnits()", "original_string": "    @Deterministic\n    public String shutterSpeedUnits() {\n        return resolve(\"drone.shutter_speed_units\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Drone.java", "class_name": "Drone", "class_uri": "src/main/java/net/datafaker/providers/base/Drone.java.Drone", "attributes": {"modifiers": "@Deterministic\n    public", "marker_annotations": ["@Deterministic"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[]Commerce(BaseProviders)", "name": "Commerce", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Commerce(BaseProviders faker)", "original_string": "    protected Commerce(BaseProviders faker) {\n        super(faker);\n        decimalFormatSymbols = new DecimalFormatSymbols(faker.getContext().getLocale());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Commerce.java", "class_name": "Commerce", "class_uri": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]department()", "name": "department", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String department()", "original_string": "    public String department() {\n        int numberOfDepartments = Math.max(faker.random().nextInt(4), 1);\n        SortedSet<String> departments = new TreeSet<>();\n        while (departments.size() < numberOfDepartments) {\n            departments.add(faker.resolve(\"commerce.department\"));\n        }\n        if (departments.size() > 1) {\n            String lastDepartment = departments.last();\n\n            return String.join(\", \", departments.headSet(lastDepartment)) + \" & \" + lastDepartment;\n        } else {\n            return departments.first();\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Commerce.java", "class_name": "Commerce", "class_uri": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]productName()", "name": "productName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String productName()", "original_string": "    public String productName() {\n        return String.join(\" \",\n            resolve(\"commerce.product_name.adjective\"),\n            resolve(\"commerce.product_name.material\"),\n            resolve(\"commerce.product_name.product\")\n        );\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Commerce.java", "class_name": "Commerce", "class_uri": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]material()", "name": "material", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String material()", "original_string": "    public String material() {\n        return resolve(\"commerce.product_name.material\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Commerce.java", "class_name": "Commerce", "class_uri": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]brand()", "name": "brand", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String brand()", "original_string": "    public String brand() {\n        return resolve(\"commerce.brand\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Commerce.java", "class_name": "Commerce", "class_uri": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]vendor()", "name": "vendor", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String vendor()", "original_string": "    public String vendor() {\n        return resolve(\"commerce.vendor\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Commerce.java", "class_name": "Commerce", "class_uri": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]price()", "name": "price", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String price()", "original_string": "    public String price() {\n        return price(0, 100);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Commerce.java", "class_name": "Commerce", "class_uri": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate a random price between 0.00 and 100.00\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]price(double,double)", "name": "price", "arg_nums": 2, "params": [{"name": "min", "type": "double"}, {"name": "max", "type": "double"}], "return_type": "String", "signature": "public String price(double min, double max)", "original_string": "    public String price(double min, double max) {\n        double price = min + (faker.random().nextDouble() * (max - min));\n        return new DecimalFormat(\"#0.00\", decimalFormatSymbols).format(price);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Commerce.java", "class_name": "Commerce", "class_uri": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]promotionCode()", "name": "promotionCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String promotionCode()", "original_string": "    public String promotionCode() {\n        return promotionCode(6);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Commerce.java", "class_name": "Commerce", "class_uri": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce.[String]promotionCode(int)", "name": "promotionCode", "arg_nums": 1, "params": [{"name": "digits", "type": "int"}], "return_type": "String", "signature": "public String promotionCode(int digits)", "original_string": "    public String promotionCode(int digits) {\n        return String.join(faker.resolve(\"commerce.promotion_code.adjective\"),\n            resolve(\"commerce.promotion_code.noun\"),\n            faker.number().digits(digits));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Commerce.java", "class_name": "Commerce", "class_uri": "src/main/java/net/datafaker/providers/base/Commerce.java.Commerce", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Australia.java.Australia.[]Australia(BaseProviders)", "name": "Australia", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Australia(BaseProviders faker)", "original_string": "    protected Australia(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Australia.java", "class_name": "Australia", "class_uri": "src/main/java/net/datafaker/providers/base/Australia.java.Australia", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Australia.java.Australia.[String]locations()", "name": "locations", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String locations()", "original_string": "    public String locations() {\n        return resolve(\"australia.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Australia.java", "class_name": "Australia", "class_uri": "src/main/java/net/datafaker/providers/base/Australia.java.Australia", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Australia.java.Australia.[String]animals()", "name": "animals", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String animals()", "original_string": "    public String animals() {\n        return resolve(\"australia.animals\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Australia.java", "class_name": "Australia", "class_uri": "src/main/java/net/datafaker/providers/base/Australia.java.Australia", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Australia.java.Australia.[String]states()", "name": "states", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String states()", "original_string": "    public String states() {\n        return resolve(\"australia.states\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Australia.java", "class_name": "Australia", "class_uri": "src/main/java/net/datafaker/providers/base/Australia.java.Australia", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter.[]Twitter(BaseProviders)", "name": "Twitter", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Twitter(BaseProviders faker)", "original_string": "    protected Twitter(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Twitter.java", "class_name": "Twitter", "class_uri": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n@param faker used as constructor\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter.[Date]createdTime(boolean,Date,Date)", "name": "createdTime", "arg_nums": 3, "params": [{"name": "forward", "type": "boolean"}, {"name": "base", "type": "Date"}, {"name": "constraints", "type": "Date"}], "return_type": "Date", "signature": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public Date createdTime(boolean forward, Date base, Date constraints)", "original_string": "    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public Date createdTime(boolean forward, Date base, Date constraints) {\n        final RandomService random = faker.random();\n        final long time = base.getTime();\n        if (forward) {\n            return new Date(time + (long) (random.nextDouble() * (constraints.getTime() - time)));\n        } else {\n            return new Date(time - (long) (random.nextDouble() * (time - constraints.getTime())));\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Twitter.java", "class_name": "Twitter", "class_uri": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter", "attributes": {"modifiers": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Deprecated(since = \"2.3.0\", forRemoval = true)", "public"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\nUsed to fake a new Twitter Date.\n\n@param forward     to determined if the returned date is later (or before) the given date.\n@param base        the base date given as a start point.\n@param constraints used to constrain the returned date range.\n@return a new date later (or before) the base date with respect to the constraint (no later/earlier than the constraint).\n@deprecated better to use TimeAndDate for more flexibility\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter.[String]twitterId(int)", "name": "twitterId", "arg_nums": 1, "params": [{"name": "expectedLength", "type": "int"}], "return_type": "String", "signature": "public String twitterId(int expectedLength)", "original_string": "    public String twitterId(int expectedLength) {\n        if (expectedLength <= 6 || expectedLength >= 25) {\n            LOGGER.warning(\"expectedLength <= 6 may easily cause twitter id collision. And expectedLength >= 25\" +\n                \" can be easily out of bound.\");\n        }\n        int hashCodeV = UUID.randomUUID().toString().hashCode();\n        if (hashCodeV < 0) {\n            hashCodeV = -hashCodeV;\n        }\n        String id1 = String.valueOf(hashCodeV);\n\n        String newDate = DATE_TIME_FORMATTER.format(Instant.now());\n        int capacity = Math.max(0, expectedLength - id1.length() - newDate.length());\n        StringBuilder result = new StringBuilder(capacity);\n        RandomService random = faker.random();\n        for (int i = 0; i < capacity; i++) {\n            result.append(random.nextInt(10));\n        }\n        result.append(newDate);\n\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        int j = 0;\n        while (i < id1.length() || j < result.length()) {\n            if (i < id1.length()) {\n                sb.append(id1.charAt(i++));\n            }\n            if (j < result.length()) {\n                sb.append(result.charAt(j++));\n            }\n        }\n        String id = sb.toString();\n        int start = random.nextInt(id.length() - expectedLength + 1);\n        id = id.substring(start, start + expectedLength);\n        return id;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Twitter.java", "class_name": "Twitter", "class_uri": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nUsed to fake a new Twitter ID without collision using both current time and uuid as seeds.\n\n@param expectedLength the expected length of the twitter id. Should be greater or equals to 6 and\n                      less than or equals to 25.\n@return a new Twitter ID consists of purely numbers.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter.[String]text(String[],int,int)", "name": "text", "arg_nums": 3, "params": [{"name": "keywords", "type": "String[]"}, {"name": "sentenceMaxLength", "type": "int"}, {"name": "wordMaxLength", "type": "int"}], "return_type": "String", "signature": "public String text(String[] keywords, int sentenceMaxLength, int wordMaxLength)", "original_string": "    public String text(String[] keywords, int sentenceMaxLength, int wordMaxLength) {\n        if (wordMaxLength <= 2) {\n            LOGGER.warning(\"Word length less than 2 is dangerous. Exceptions can be raised.\");\n        }\n        ArrayList<String> text = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n        RandomService random = faker.random();\n        int sentenceLength = random.nextInt(1, sentenceMaxLength);\n\n        for (int i = 0; i < sentenceLength; i++) {\n            int tmpWordLength = random.nextInt(3, wordMaxLength);\n            for (int j = 0; j < tmpWordLength; j++) {\n                sb.append(BASIC_STRING.charAt(random.nextInt(BASIC_STRING.length())));\n            }\n            text.add(sb.toString());\n            sb.setLength(0);\n        }\n        if (keywords != null) {\n            for (String keyword : keywords) {\n                int position = random.nextInt(text.size());\n                text.add(position, keyword);\n            }\n        }\n        return String.join(\" \", text);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Twitter.java", "class_name": "Twitter", "class_uri": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nTo fake a new text context for the Twitter.\n\n@param keywords          the keywords that you wish to appear in the text.\n@param sentenceMaxLength the text should be in range of the sentence max length.\n@param wordMaxLength     each word should be in range of the word max length.\n@return a new fake text for the Twitter.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter.[String]userName()", "name": "userName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String userName()", "original_string": "    public String userName() {\n        return resolve(\"twitter.user_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Twitter.java", "class_name": "Twitter", "class_uri": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return Return a user name using the twitter.user_name.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter.[String]userId()", "name": "userId", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String userId()", "original_string": "    public String userId() {\n        return resolve(\"twitter.user_id\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Twitter.java", "class_name": "Twitter", "class_uri": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return Return a user id using the twitter.user_name.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter.[String]getLink(String,int)", "name": "getLink", "arg_nums": 2, "params": [{"name": "username", "type": "String"}, {"name": "extraLength", "type": "int"}], "return_type": "String", "signature": "public String getLink(String username, int extraLength)", "original_string": "    public String getLink(String username, int extraLength) {\n        if (extraLength <= 4) {\n            LOGGER.warning(\"Extra length <=4 can cause collision.\");\n        }\n        RandomService random = faker.random();\n        final char[] res = new char[extraLength + 1];\n        res[0] = '/';\n        for (int i = 1; i < res.length; i++) {\n            res[i] = BASIC_STRING.charAt(random.nextInt(BASIC_STRING.length()));\n        }\n        return \"https://twitter.com/\" + username + String.valueOf(res);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Twitter.java", "class_name": "Twitter", "class_uri": "src/main/java/net/datafaker/providers/base/Twitter.java.Twitter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nreturn a fake link to a Twitter message. The extra length is expected to be larger than 4.\n\n@param username    the username will be used in the link.\n@param extraLength the expected length of the extra link part.\n@return return a fake link to a Twitter message.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments.[]IndustrySegments(BaseProviders)", "name": "IndustrySegments", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected IndustrySegments(BaseProviders faker)", "original_string": "    protected IndustrySegments(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IndustrySegments.java", "class_name": "IndustrySegments", "class_uri": "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments.[String]industry()", "name": "industry", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String industry()", "original_string": "    public String industry() {\n        return resolve(\"industry_segments.industry\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IndustrySegments.java", "class_name": "IndustrySegments", "class_uri": "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments.[String]superSector()", "name": "superSector", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String superSector()", "original_string": "    public String superSector() {\n        return resolve(\"industry_segments.super_sector\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IndustrySegments.java", "class_name": "IndustrySegments", "class_uri": "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments.[String]sector()", "name": "sector", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sector()", "original_string": "    public String sector() {\n        return resolve(\"industry_segments.sector\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IndustrySegments.java", "class_name": "IndustrySegments", "class_uri": "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments.[String]subSector()", "name": "subSector", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String subSector()", "original_string": "    public String subSector() {\n        return resolve(\"industry_segments.sub_sector\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IndustrySegments.java", "class_name": "IndustrySegments", "class_uri": "src/main/java/net/datafaker/providers/base/IndustrySegments.java.IndustrySegments", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[]IdNumber(BaseProviders)", "name": "IdNumber", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected IdNumber(BaseProviders faker)", "original_string": "    protected IdNumber(BaseProviders faker) {\n        super(faker);\n        List<IdNumberGenerator> idNumbers = loadGenerators(IdNumberGenerator.class);\n        for (IdNumberGenerator idNumber : idNumbers) {\n            countryProviders.put(idNumber.countryCode(), idNumber);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]valid()", "name": "valid", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String valid()", "original_string": "    public String valid() {\n        return countryProvider()\n            .map(p -> p.generateValid(faker))\n            .orElseGet(() -> faker.numerify(faker.resolve(\"id_number.valid\")));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]invalid()", "name": "invalid", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String invalid()", "original_string": "    public String invalid() {\n        return countryProvider()\n            .map(p -> p.generateInvalid(faker))\n            .orElseGet(() -> faker.numerify(faker.resolve(\"id_number.invalid\")));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[PersonIdNumber]valid(IdNumberRequest)", "name": "valid", "arg_nums": 1, "params": [{"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "public PersonIdNumber valid(IdNumberRequest request)", "original_string": "    public PersonIdNumber valid(IdNumberRequest request) {\n        return countryProvider()\n            .map(p -> p.generateValid(faker, request))\n            .orElseThrow(() -> new IllegalArgumentException(\"ID Number generation not supported for country '%s'\".formatted(country())));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[Optional<IdNumberGenerator>]countryProvider()", "name": "countryProvider", "arg_nums": 0, "params": [], "return_type": "Optional<IdNumberGenerator>", "signature": "private Optional<IdNumberGenerator> countryProvider()", "original_string": "    private Optional<IdNumberGenerator> countryProvider() {\n        return Optional.ofNullable(countryProviders.get(country()));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Optional<IdNumberGenerator>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]country()", "name": "country", "arg_nums": 0, "params": [], "return_type": "String", "signature": "private String country()", "original_string": "    private String country() {\n        return faker.getContext().getLocale().getCountry();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]ssnValid()", "name": "ssnValid", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ssnValid()", "original_string": "    public String ssnValid() {\n        return provider(AmericanIdNumber.class).generateValid(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]validSvSeSsn()", "name": "validSvSeSsn", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated\n    public String validSvSeSsn()", "original_string": "    @Deprecated\n    public String validSvSeSsn() {\n        return provider(SwedenIdNumber.class).generateValid(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@deprecated Instead of calling this method directly, use faker with locale:\n<pre>\n{@code\n  Faker faker = new Faker(new Locale(\"sv\", \"SE\"));\n  String idNumber = faker.idNumber().valid();\n}\n</pre>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]invalidSvSeSsn()", "name": "invalidSvSeSsn", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated\n    public String invalidSvSeSsn()", "original_string": "    @Deprecated\n    public String invalidSvSeSsn() {\n        return provider(SwedenIdNumber.class).generateInvalid(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]validEnZaSsn()", "name": "validEnZaSsn", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated\n    public String validEnZaSsn()", "original_string": "    @Deprecated\n    public String validEnZaSsn() {\n        return provider(SouthAfricanIdNumber.class).getValidSsn(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@deprecated Instead of calling this method directly, use faker with locale:\n<pre>\n{@code\n  Faker faker = new Faker(new Locale(\"en\", \"ZA\"));\n  String idNumber = faker.idNumber().valid();\n}\n</pre>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]inValidEnZaSsn()", "name": "inValidEnZaSsn", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated\n    public String inValidEnZaSsn()", "original_string": "    @Deprecated\n    public String inValidEnZaSsn() {\n        return provider(SouthAfricanIdNumber.class).getInValidSsn(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]singaporeanFin()", "name": "singaporeanFin", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String singaporeanFin()", "original_string": "    public String singaporeanFin() {\n        return SingaporeIdNumber.getValidFIN(faker, Type.FOREIGNER_TWENTY_FIRST_CENTURY);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]singaporeanFinBefore2000()", "name": "singaporeanFinBefore2000", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String singaporeanFinBefore2000()", "original_string": "    public String singaporeanFinBefore2000() {\n        return SingaporeIdNumber.getValidFIN(faker, Type.FOREIGNER_TWENTIETH_CENTURY);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]singaporeanUin()", "name": "singaporeanUin", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String singaporeanUin()", "original_string": "    public String singaporeanUin() {\n        return SingaporeIdNumber.getValidFIN(faker, Type.SINGAPOREAN_TWENTY_FIRST_CENTURY);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]singaporeanUinBefore2000()", "name": "singaporeanUinBefore2000", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String singaporeanUinBefore2000()", "original_string": "    public String singaporeanUinBefore2000() {\n        return SingaporeIdNumber.getValidFIN(faker, Type.SINGAPOREAN_TWENTIETH_CENTURY);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]validZhCNSsn()", "name": "validZhCNSsn", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated\n    public String validZhCNSsn()", "original_string": "    @Deprecated\n    public String validZhCNSsn() {\n        return provider(ChineseIdNumber.class).generateValid(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate a valid Chinese id number\n\n@deprecated Instead of calling this method directly, use faker with locale:\n<pre>\n{@code\n  Faker faker = new Faker(new Locale(\"zh\", \"CN\"));\n  String idNumber = faker.idNumber().valid();\n}\n</pre>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]validPtNif()", "name": "validPtNif", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated\n    public String validPtNif()", "original_string": "    @Deprecated\n    public String validPtNif() {\n        return provider(PortugueseIdNumber.class).generateValid(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate a valid Chinese id number\n\n@deprecated Instead of calling this method directly, use faker with locale:\n<pre>\n{@code\n  Faker faker = new Faker(new Locale(\"pt\", \"PT\"));\n  String idNumber = faker.idNumber().valid();\n}\n</pre>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]invalidPtNif()", "name": "invalidPtNif", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated\n    public String invalidPtNif()", "original_string": "    @Deprecated\n    public String invalidPtNif() {\n        return provider(PortugueseIdNumber.class).generateInvalid(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]validEsMXSsn()", "name": "validEsMXSsn", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated\n    public String validEsMXSsn()", "original_string": "    @Deprecated\n    public String validEsMXSsn() {\n        return provider(MexicanIdNumber.class).get(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return A valid Mexican CURP\n\n@deprecated Instead of calling this method directly, use faker with locale:\n<pre>\n{@code\n  Faker faker = new Faker(new Locale(\"es\", \"MX\"));\n  String idNumber = faker.idNumber().valid();\n}\n</pre>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]invalidEsMXSsn()", "name": "invalidEsMXSsn", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated\n    public String invalidEsMXSsn()", "original_string": "    @Deprecated\n    public String invalidEsMXSsn() {\n        return provider(MexicanIdNumber.class).generateInvalid(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return An invalid Mexican CURP\n\n@deprecated Instead of calling this method directly, use faker with locale:\n<pre>\n{@code\n  Faker faker = new Faker(new Locale(\"es\", \"MX\"));\n  String idNumber = faker.idNumber().invalid();\n}\n</pre>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]peselNumber()", "name": "peselNumber", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String peselNumber()", "original_string": "    public String peselNumber() {\n        return peselNumber(faker.timeAndDate().birthday(0, 100), Gender.ANY);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a valid PESEL number for a person of random gender and age between\n0 and 100.\n\n@return A valid PESEL number\n"}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]peselNumber(LocalDate,Gender)", "name": "peselNumber", "arg_nums": 2, "params": [{"name": "birthDate", "type": "LocalDate"}, {"name": "gender", "type": "Gender"}], "return_type": "String", "signature": "public String peselNumber(LocalDate birthDate, Gender gender)", "original_string": "    public String peselNumber(LocalDate birthDate, Gender gender) {\n        return new PolishIdNumber().get(faker, birthDate, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a valid PESEL number for a person with given gender and birthdate.\n\n@param birthDate Given birthdate\n@param gender    Person's gender. Null value means {@link PolishIdNumber.Gender#ANY}\n@return A valid PESEL number\n"}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]validKoKrRrn()", "name": "validKoKrRrn", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated\n    public String validKoKrRrn()", "original_string": "    @Deprecated\n    public String validKoKrRrn() {\n        return provider(SouthKoreanIdNumber.class).getValidRrn(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a valid RRN (Resident Registration Number) for a person of random binary gender and default random age\n\n@return A valid RRN\n@since 1.8.0\n@deprecated Instead of calling this method directly, use faker with locale:\n<pre>\n{@code\n  Faker f = new Faker(new Locale(\"en\", \"KR\"));\n  String rrn = f.idNumber().valid();\n}\n</pre>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[String]validGeIDNumber()", "name": "validGeIDNumber", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated\n    public String validGeIDNumber()", "original_string": "    @Deprecated\n    public String validGeIDNumber() {\n    \treturn faker.numerify(\"###########\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates valid ID number for Georgian citizens and Residents\n\n@deprecated Instead of calling this method directly, use faker with locale:\n<pre>\n{@code\n  Faker f = new Faker(new Locale(\"en\", \"GE\"));\n  String idNumber = f.idNumber().valid();\n}\n</pre>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[T]provider(Class<T>)", "name": "provider", "arg_nums": 1, "params": [{"name": "clazz", "type": "Class<T>"}], "return_type": "T", "signature": "@SuppressWarnings(\"unchecked\")\n    private <T extends IdNumberGenerator> T provider(Class<T> clazz)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    private <T extends IdNumberGenerator> T provider(Class<T> clazz) {\n        return (T) providers.computeIfAbsent(clazz, aClass -> create(clazz));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    private", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "private"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber.[T]create(Class<T>)", "name": "create", "arg_nums": 1, "params": [{"name": "clazz", "type": "Class<T>"}], "return_type": "T", "signature": "private <T extends IdNumberGenerator> T create(Class<T> clazz)", "original_string": "    private <T extends IdNumberGenerator> T create(Class<T> clazz) {\n        try {\n            return clazz.getDeclaredConstructor().newInstance();\n        } catch (InstantiationException | NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {\n            throw new RuntimeException(\"Failed to instantiate class \" + clazz.getName(), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/IdNumber.java", "class_name": "IdNumber", "class_uri": "src/main/java/net/datafaker/providers/base/IdNumber.java.IdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker.[]Hacker(BaseProviders)", "name": "Hacker", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Hacker(BaseProviders faker)", "original_string": "    protected Hacker(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hacker.java", "class_name": "Hacker", "class_uri": "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker.[String]abbreviation()", "name": "abbreviation", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String abbreviation()", "original_string": "    public String abbreviation() {\n        return resolve(\"hacker.abbreviation\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hacker.java", "class_name": "Hacker", "class_uri": "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker.[String]adjective()", "name": "adjective", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String adjective()", "original_string": "    public String adjective() {\n        return resolve(\"hacker.adjective\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hacker.java", "class_name": "Hacker", "class_uri": "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker.[String]noun()", "name": "noun", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String noun()", "original_string": "    public String noun() {\n        return resolve(\"hacker.noun\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hacker.java", "class_name": "Hacker", "class_uri": "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker.[String]verb()", "name": "verb", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String verb()", "original_string": "    public String verb() {\n        return resolve(\"hacker.verb\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hacker.java", "class_name": "Hacker", "class_uri": "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker.[String]ingverb()", "name": "ingverb", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ingverb()", "original_string": "    public String ingverb() {\n        return resolve(\"hacker.ingverb\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hacker.java", "class_name": "Hacker", "class_uri": "src/main/java/net/datafaker/providers/base/Hacker.java.Hacker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant.[]Restaurant(BaseProviders)", "name": "Restaurant", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Restaurant(BaseProviders faker)", "original_string": "    protected Restaurant(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Restaurant.java", "class_name": "Restaurant", "class_uri": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant.[String]namePrefix()", "name": "namePrefix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String namePrefix()", "original_string": "    public String namePrefix() {\n        return faker.bothify(resolve(\"restaurant.name_prefix\"), true);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Restaurant.java", "class_name": "Restaurant", "class_uri": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant.[String]nameSuffix()", "name": "nameSuffix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String nameSuffix()", "original_string": "    public String nameSuffix() {\n        return resolve(\"restaurant.name_suffix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Restaurant.java", "class_name": "Restaurant", "class_uri": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"restaurant.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Restaurant.java", "class_name": "Restaurant", "class_uri": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant.[String]type()", "name": "type", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String type()", "original_string": "    public String type() {\n        return resolve(\"restaurant.type\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Restaurant.java", "class_name": "Restaurant", "class_uri": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant.[String]description()", "name": "description", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String description()", "original_string": "    public String description() {\n        return resolve(\"restaurant.description\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Restaurant.java", "class_name": "Restaurant", "class_uri": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant.[String]review()", "name": "review", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String review()", "original_string": "    public String review() {\n        return resolve(\"restaurant.review\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Restaurant.java", "class_name": "Restaurant", "class_uri": "src/main/java/net/datafaker/providers/base/Restaurant.java.Restaurant", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop.[]Kpop(BaseProviders)", "name": "Kpop", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Kpop(BaseProviders faker)", "original_string": "    protected Kpop(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Kpop.java", "class_name": "Kpop", "class_uri": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop.[String]iGroups()", "name": "iGroups", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String iGroups()", "original_string": "    public String iGroups() {\n        return resolve(\"kpop.i_groups\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Kpop.java", "class_name": "Kpop", "class_uri": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop.[String]iiGroups()", "name": "iiGroups", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String iiGroups()", "original_string": "    public String iiGroups() {\n        return resolve(\"kpop.ii_groups\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Kpop.java", "class_name": "Kpop", "class_uri": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop.[String]iiiGroups()", "name": "iiiGroups", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String iiiGroups()", "original_string": "    public String iiiGroups() {\n        return resolve(\"kpop.iii_groups\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Kpop.java", "class_name": "Kpop", "class_uri": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop.[String]girlGroups()", "name": "girlGroups", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String girlGroups()", "original_string": "    public String girlGroups() {\n        return resolve(\"kpop.girl_groups\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Kpop.java", "class_name": "Kpop", "class_uri": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop.[String]boyBands()", "name": "boyBands", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String boyBands()", "original_string": "    public String boyBands() {\n        return resolve(\"kpop.boy_bands\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Kpop.java", "class_name": "Kpop", "class_uri": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop.[String]solo()", "name": "solo", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String solo()", "original_string": "    public String solo() {\n        return resolve(\"kpop.solo\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Kpop.java", "class_name": "Kpop", "class_uri": "src/main/java/net/datafaker/providers/base/Kpop.java.Kpop", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[]DungeonsAndDragons(BaseProviders)", "name": "DungeonsAndDragons", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected DungeonsAndDragons(BaseProviders faker)", "original_string": "    protected DungeonsAndDragons(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java", "class_name": "DungeonsAndDragons", "class_uri": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]alignments()", "name": "alignments", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String alignments()", "original_string": "    public String alignments() {\n        return resolve(\"dnd.alignments\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java", "class_name": "DungeonsAndDragons", "class_uri": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]backgrounds()", "name": "backgrounds", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String backgrounds()", "original_string": "    public String backgrounds() {\n        return resolve(\"dnd.backgrounds\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java", "class_name": "DungeonsAndDragons", "class_uri": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]cities()", "name": "cities", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String cities()", "original_string": "    public String cities() {\n        return resolve(\"dnd.cities\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java", "class_name": "DungeonsAndDragons", "class_uri": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]klasses()", "name": "klasses", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String klasses()", "original_string": "    public String klasses() {\n        return resolve(\"dnd.klasses\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java", "class_name": "DungeonsAndDragons", "class_uri": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]languages()", "name": "languages", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String languages()", "original_string": "    public String languages() {\n        return resolve(\"dnd.languages\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java", "class_name": "DungeonsAndDragons", "class_uri": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]meleeWeapons()", "name": "meleeWeapons", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String meleeWeapons()", "original_string": "    public String meleeWeapons() {\n        return resolve(\"dnd.melee_weapons\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java", "class_name": "DungeonsAndDragons", "class_uri": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]monsters()", "name": "monsters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String monsters()", "original_string": "    public String monsters() {\n        return resolve(\"dnd.monsters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java", "class_name": "DungeonsAndDragons", "class_uri": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]races()", "name": "races", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String races()", "original_string": "    public String races() {\n        return resolve(\"dnd.races\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java", "class_name": "DungeonsAndDragons", "class_uri": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons.[String]rangedWeapons()", "name": "rangedWeapons", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String rangedWeapons()", "original_string": "    public String rangedWeapons() {\n        return resolve(\"dnd.ranged_weapons\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java", "class_name": "DungeonsAndDragons", "class_uri": "src/main/java/net/datafaker/providers/base/DungeonsAndDragons.java.DungeonsAndDragons", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[]Code(BaseProviders)", "name": "Code", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Code(BaseProviders faker)", "original_string": "    protected Code(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]isbnGs1()", "name": "isbnGs1", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String isbnGs1()", "original_string": "    public String isbnGs1() {\n        return faker.options().option(\"978\", \"979\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis can be overridden by specifying\n<code>\ncode:\nisbn_gs1: \"some expression\"\n</code>\nin the appropriate yml file.\n\n@return a GS1 code for an ISBN13, currently is only 978 and 979\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]isbnGroup()", "name": "isbnGroup", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String isbnGroup()", "original_string": "    public String isbnGroup() {\n        return faker.options().option(\"0\", \"1\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis can be overridden by specifying\n<code>\ncode:\nisbn_group: \"some expression\"\n</code>\nin the appropriate yml file.\n\n@return an ISBN group number\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]isbnRegistrant()", "name": "isbnRegistrant", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String isbnRegistrant()", "original_string": "    public String isbnRegistrant() {\n        int ct = faker.random().nextInt(6) + 1;\n        return switch (ct) {\n            case 6 -> faker.number().numberBetween(0, 1) + faker.number().digit() + \"-\" + faker.number().digits(6);\n            case 5 -> faker.number().numberBetween(200, 699) + \"-\" + faker.number().digits(5);\n            case 4 -> faker.number().numberBetween(7000, 8499) + \"-\" + faker.number().digits(4);\n            case 3 -> faker.number().numberBetween(85000, 89999) + \"-\" + faker.number().digits(3);\n            case 2 -> faker.number().numberBetween(900000, 949999) + \"-\" + faker.number().digits(2);\n            case 1 -> faker.number().numberBetween(9500000, 9999999) + \"-\" + faker.number().digits(1);\n            default -> throw new IllegalStateException(\"Invalid random \" + ct);\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis can be overridden by specifying\n<code>\ncode:\nisbn_registrant: \"some expression\"\n</code>\nin the appropriate yml file.\n\n@return an ISBN registrant 'element' with separator\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]isbn10()", "name": "isbn10", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String isbn10()", "original_string": "    public String isbn10() {\n        return isbn10(false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a valid ISBN10 number with no separators (ex. 9604250590)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]isbn10(boolean)", "name": "isbn10", "arg_nums": 1, "params": [{"name": "separator", "type": "boolean"}], "return_type": "String", "signature": "public String isbn10(boolean separator)", "original_string": "    public String isbn10(boolean separator) {\n        // The registration group identifier is a 1- to 5-digit number\n        final StringBuilder isbn10 = new StringBuilder()\n            .append(faker.expression(\"#{code.isbn_group}\"))\n            .append('-')\n            .append(faker.expression(\"#{code.isbn_registrant}\"))\n            .append('-');\n\n        final int checkDigit = isbn10CheckDigit(isbn10);\n        isbn10.append(checkDigit != 10 ? checkDigit : \"X\");\n        return separator ? isbn10.toString() : stripIsbnSeparator(isbn10);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@param separator true if you want separators returned, false otherwise\n@return a valid ISBN10 number with or without separators (ex. 9604250590, 960-425-059-0)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]isbn13()", "name": "isbn13", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String isbn13()", "original_string": "    public String isbn13() {\n        return isbn13(false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a valid ISBN13 number with no separators (ex. 9789604250590)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]isbn13(boolean)", "name": "isbn13", "arg_nums": 1, "params": [{"name": "separator", "type": "boolean"}], "return_type": "String", "signature": "public String isbn13(boolean separator)", "original_string": "    public String isbn13(boolean separator) {\n        // The registration group identifier is a 1- to 5-digit number\n        final StringBuilder isbn13 = new StringBuilder()\n            .append(faker.expression(\"#{code.isbn_gs1}\"))\n            .append('-')\n            .append(faker.expression(\"#{code.isbn_group}\"))\n            .append('-')\n            .append(faker.expression(\"#{code.isbn_registrant}\"))\n            .append('-');\n\n        final int checkDigit = isbn13CheckDigit(isbn13);\n        isbn13.append(checkDigit);\n        return separator ? isbn13.toString() : stripIsbnSeparator(isbn13);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@param separator true if you want separators returned, false otherwise\n@return a valid ISBN13 number with or without separators (ex. 9789604250590, 978-960-425-059-0)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[int]isbn10CheckDigit(CharSequence)", "name": "isbn10CheckDigit", "arg_nums": 1, "params": [{"name": "t", "type": "CharSequence"}], "return_type": "int", "signature": "private int isbn10CheckDigit(CharSequence t)", "original_string": "    private int isbn10CheckDigit(CharSequence t) {\n        String value = stripIsbnSeparator(t);\n        int sum = 0;\n        for (int i = 0; i < value.length(); i++) {\n            sum += ((i + 1) * Integer.parseInt(value.substring(i, i + 1)));\n        }\n        return sum % 11;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[int]isbn13CheckDigit(CharSequence)", "name": "isbn13CheckDigit", "arg_nums": 1, "params": [{"name": "t", "type": "CharSequence"}], "return_type": "int", "signature": "private int isbn13CheckDigit(CharSequence t)", "original_string": "    private int isbn13CheckDigit(CharSequence t) {\n        String value = stripIsbnSeparator(t);\n        int sum = 0;\n        int multiplier;\n        for (int i = 0; i < value.length(); i++) {\n            multiplier = i % 2 == 0 ? 1 : 3;\n            sum += multiplier * Integer.parseInt(value.subSequence(i, i + 1).toString());\n        }\n\n        return (10 - sum % 10) % 10;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]stripIsbnSeparator(CharSequence)", "name": "stripIsbnSeparator", "arg_nums": 1, "params": [{"name": "t", "type": "CharSequence"}], "return_type": "String", "signature": "private String stripIsbnSeparator(CharSequence t)", "original_string": "    private String stripIsbnSeparator(CharSequence t) {\n        return t.toString().replace(\"-\", \"\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]asin()", "name": "asin", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String asin()", "original_string": "    public String asin() {\n        return resolve(\"code.asin\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]imei()", "name": "imei", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String imei()", "original_string": "    public String imei() {\n        char[] str = new char[15];\n        int len = str.length;\n\n        // Fill in the first two values of the string based with the specified prefix.\n        String arr = faker.options().option(REPORTING_BODY_IDENTIFIERS);\n        str[0] = arr.charAt(0);\n        str[1] = arr.charAt(1);\n\n        // Fill all the remaining numbers except for the last one with random values.\n        for (int i = 2; i < len - 1; i++) {\n            str[i] = Character.forDigit(faker.number().numberBetween(0, 9), 10);\n        }\n\n        // Calculate the Luhn checksum of the values thus far\n        int lenOffset = (len + 1) % 2;\n        int sum = 0;\n        for (int i = 0; i < len - 1; i++) {\n            if ((i + lenOffset) % 2 != 0) {\n                int t = Character.getNumericValue(str[i]) << 1;\n\n                if (t > 9) {\n                    t -= 9;\n                }\n\n                sum += t;\n            } else {\n                sum += Character.getNumericValue(str[i]);\n            }\n        }\n\n        // Choose the last digit so that it causes the entire string to pass the checksum.\n        str[len - 1] = Character.forDigit(((10 - (sum % 10)) % 10), 10);\n\n        return new String(str);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]ean8()", "name": "ean8", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ean8()", "original_string": "    public String ean8() {\n        return gtin8();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]gtin8()", "name": "gtin8", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String gtin8()", "original_string": "    public String gtin8() {\n        return gtin(\"\\\\d{7}\", GTIN_8_CHECK_DIGITS);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]gtin13()", "name": "gtin13", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String gtin13()", "original_string": "    public String gtin13() {\n        return gtin(\"\\\\d{12}\", GTIN_13_CHECK_DIGITS);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]ean13()", "name": "ean13", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ean13()", "original_string": "    public String ean13() {\n        return gtin13();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Code.java.Code.[String]gtin(String,int[])", "name": "gtin", "arg_nums": 2, "params": [{"name": "regex", "type": "String"}, {"name": "checkDigits", "type": "int[]"}], "return_type": "String", "signature": "private String gtin(String regex, int[] checkDigits)", "original_string": "    private String gtin(String regex, int[] checkDigits) {\n        List<Character> values = faker.regexify(regex)\n            .chars()\n            .mapToObj(c -> (char) c)\n            .collect(Collectors.toList());\n\n        int sum = 0;\n        for (int i = 0; i < values.size(); i++) {\n            sum += Character.getNumericValue(values.get(i)) * checkDigits[i];\n        }\n        int checkDigit = 10 - sum % 10;\n        if (checkDigit == 10) {\n            values.add(Character.forDigit(0, 10));\n        } else {\n            values.add(Character.forDigit(checkDigit, 10));\n        }\n\n        return values.stream()\n            .map(String::valueOf)\n            .collect(Collectors.joining());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Code.java", "class_name": "Code", "class_uri": "src/main/java/net/datafaker/providers/base/Code.java.Code", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[]Medical(BaseProviders)", "name": "Medical", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Medical(BaseProviders faker)", "original_string": "    protected Medical(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Medical.java", "class_name": "Medical", "class_uri": "src/main/java/net/datafaker/providers/base/Medical.java.Medical", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[String]medicineName()", "name": "medicineName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String medicineName()", "original_string": "    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String medicineName() {\n        return resolve(\"medical.medicine_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Medical.java", "class_name": "Medical", "class_uri": "src/main/java/net/datafaker/providers/base/Medical.java.Medical", "attributes": {"modifiers": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Deprecated(since = \"2.3.0\", forRemoval = true)", "public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@deprecated since 2.3.0. Use {@link net.datafaker.providers.healthcare.Medication#drugName()} instead.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[String]diseaseName()", "name": "diseaseName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String diseaseName()", "original_string": "    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String diseaseName() {\n        return resolve(\"medical.disease_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Medical.java", "class_name": "Medical", "class_uri": "src/main/java/net/datafaker/providers/base/Medical.java.Medical", "attributes": {"modifiers": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Deprecated(since = \"2.3.0\", forRemoval = true)", "public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@deprecated since 2.3.0. Use {@link net.datafaker.providers.healthcare.Disease#anyDisease()} instead.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[String]hospitalName()", "name": "hospitalName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String hospitalName()", "original_string": "    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String hospitalName() {\n        return resolve(\"medical.hospital_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Medical.java", "class_name": "Medical", "class_uri": "src/main/java/net/datafaker/providers/base/Medical.java.Medical", "attributes": {"modifiers": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Deprecated(since = \"2.3.0\", forRemoval = true)", "public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@deprecated since 2.3.0. Use {@link net.datafaker.providers.healthcare.CareProvider#hospitalName()} instead.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[String]symptoms()", "name": "symptoms", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String symptoms()", "original_string": "    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String symptoms() {\n        return resolve(\"medical.symptoms\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Medical.java", "class_name": "Medical", "class_uri": "src/main/java/net/datafaker/providers/base/Medical.java.Medical", "attributes": {"modifiers": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Deprecated(since = \"2.3.0\", forRemoval = true)", "public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@deprecated since 2.3.0. Use {@link net.datafaker.providers.healthcare.Observation#symptom()} instead\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[String]diagnosisCode()", "name": "diagnosisCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String diagnosisCode()", "original_string": "    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String diagnosisCode() {\n        String regex = resolve(\"medical.diagnosis_code.icd10\");\n        return faker.regexify(regex);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Medical.java", "class_name": "Medical", "class_uri": "src/main/java/net/datafaker/providers/base/Medical.java.Medical", "attributes": {"modifiers": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Deprecated(since = \"2.3.0\", forRemoval = true)", "public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@deprecated since 2.3.0. Use {@link net.datafaker.providers.healthcare.Disease#icd10()} instead.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[String]procedureCode()", "name": "procedureCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String procedureCode()", "original_string": "    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String procedureCode() {\n        String regex = resolve(\"medical.procedure_code.icd10\");\n        return faker.regexify(regex);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Medical.java", "class_name": "Medical", "class_uri": "src/main/java/net/datafaker/providers/base/Medical.java.Medical", "attributes": {"modifiers": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Deprecated(since = \"2.3.0\", forRemoval = true)", "public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@deprecated since 2.3.0. Use {@link net.datafaker.providers.healthcare.MedicalProcedure#icd10()} instead.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Medical.java.Medical.[String]medicalProfession()", "name": "medicalProfession", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String medicalProfession()", "original_string": "    @Deprecated(since = \"2.3.0\", forRemoval = true)\n    public String medicalProfession() {\n        return resolve(\"medical.medical_professions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Medical.java", "class_name": "Medical", "class_uri": "src/main/java/net/datafaker/providers/base/Medical.java.Medical", "attributes": {"modifiers": "@Deprecated(since = \"2.3.0\", forRemoval = true)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Deprecated(since = \"2.3.0\", forRemoval = true)", "public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@deprecated since 2.3.0. Use {@link net.datafaker.providers.healthcare.CareProvider#medicalProfession()} instead.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[]SlackEmoji(BaseProviders)", "name": "SlackEmoji", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected SlackEmoji(BaseProviders faker)", "original_string": "    protected SlackEmoji(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/SlackEmoji.java", "class_name": "SlackEmoji", "class_uri": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]people()", "name": "people", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String people()", "original_string": "    public String people() {\n        return resolve(\"slack_emoji.people\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/SlackEmoji.java", "class_name": "SlackEmoji", "class_uri": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]nature()", "name": "nature", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String nature()", "original_string": "    public String nature() {\n        return resolve(\"slack_emoji.nature\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/SlackEmoji.java", "class_name": "SlackEmoji", "class_uri": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]foodAndDrink()", "name": "foodAndDrink", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String foodAndDrink()", "original_string": "    public String foodAndDrink() {\n        return resolve(\"slack_emoji.food_and_drink\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/SlackEmoji.java", "class_name": "SlackEmoji", "class_uri": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]celebration()", "name": "celebration", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String celebration()", "original_string": "    public String celebration() {\n        return resolve(\"slack_emoji.celebration\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/SlackEmoji.java", "class_name": "SlackEmoji", "class_uri": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]activity()", "name": "activity", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String activity()", "original_string": "    public String activity() {\n        return resolve(\"slack_emoji.activity\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/SlackEmoji.java", "class_name": "SlackEmoji", "class_uri": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]travelAndPlaces()", "name": "travelAndPlaces", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String travelAndPlaces()", "original_string": "    public String travelAndPlaces() {\n        return resolve(\"slack_emoji.travel_and_places\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/SlackEmoji.java", "class_name": "SlackEmoji", "class_uri": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]objectsAndSymbols()", "name": "objectsAndSymbols", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String objectsAndSymbols()", "original_string": "    public String objectsAndSymbols() {\n        return resolve(\"slack_emoji.objects_and_symbols\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/SlackEmoji.java", "class_name": "SlackEmoji", "class_uri": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]custom()", "name": "custom", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String custom()", "original_string": "    public String custom() {\n        return resolve(\"slack_emoji.custom\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/SlackEmoji.java", "class_name": "SlackEmoji", "class_uri": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji.[String]emoji()", "name": "emoji", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String emoji()", "original_string": "    public String emoji() {\n        return resolve(\"slack_emoji.emoji\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/SlackEmoji.java", "class_name": "SlackEmoji", "class_uri": "src/main/java/net/datafaker/providers/base/SlackEmoji.java.SlackEmoji", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[]Vehicle(BaseProviders)", "name": "Vehicle", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "public Vehicle(BaseProviders faker)", "original_string": "    public Vehicle(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]vin()", "name": "vin", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String vin()", "original_string": "    public String vin() {\n        return faker.regexify(VIN_REGEX);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]manufacturer()", "name": "manufacturer", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String manufacturer()", "original_string": "    public String manufacturer() {\n        return resolve(\"vehicle.manufacture\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]make()", "name": "make", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String make()", "original_string": "    public String make() {\n        return resolve(\"vehicle.makes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]model()", "name": "model", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String model()", "original_string": "    public String model() {\n        return model(make());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]model(String)", "name": "model", "arg_nums": 1, "params": [{"name": "make", "type": "String"}], "return_type": "String", "signature": "public String model(String make)", "original_string": "    public String model(String make) {\n        return resolve(\"vehicle.models_by_make.\" + make);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]makeAndModel()", "name": "makeAndModel", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String makeAndModel()", "original_string": "    public String makeAndModel() {\n        String make = make();\n        return make + \" \" + model(make);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]style()", "name": "style", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String style()", "original_string": "    public String style() {\n        return resolve(\"vehicle.styles\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]color()", "name": "color", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String color()", "original_string": "    public String color() {\n        return resolve(\"vehicle.colors\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]upholsteryColor()", "name": "upholsteryColor", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String upholsteryColor()", "original_string": "    public String upholsteryColor() {\n        return resolve(\"vehicle.upholstery_colors\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]upholsteryFabric()", "name": "upholsteryFabric", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String upholsteryFabric()", "original_string": "    public String upholsteryFabric() {\n        return resolve(\"vehicle.upholstery_fabrics\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]upholstery()", "name": "upholstery", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String upholstery()", "original_string": "    public String upholstery() {\n        return resolve(\"vehicle.upholsteries\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]transmission()", "name": "transmission", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String transmission()", "original_string": "    public String transmission() {\n        return resolve(\"vehicle.transmissions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]driveType()", "name": "driveType", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String driveType()", "original_string": "    public String driveType() {\n        return resolve(\"vehicle.drive_types\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]fuelType()", "name": "fuelType", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String fuelType()", "original_string": "    public String fuelType() {\n        return resolve(\"vehicle.fuel_types\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]carType()", "name": "carType", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String carType()", "original_string": "    public String carType() {\n        return resolve(\"vehicle.car_types\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]engine()", "name": "engine", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String engine()", "original_string": "    public String engine() {\n        return resolve(\"vehicle.engine_sizes\")\n            + \" \"\n            + resolve(\"vehicle.cylinder_engine\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[List<String>]carOptions()", "name": "carOptions", "arg_nums": 0, "params": [], "return_type": "List<String>", "signature": "public List<String> carOptions()", "original_string": "    public List<String> carOptions() {\n        return carOptions(5, 10);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[List<String>]carOptions(int,int)", "name": "carOptions", "arg_nums": 2, "params": [{"name": "min", "type": "int"}, {"name": "max", "type": "int"}], "return_type": "List<String>", "signature": "public List<String> carOptions(int min, int max)", "original_string": "    public List<String> carOptions(int min, int max) {\n        int optionSize = faker.number().numberBetween(min, max);\n        List<String> arr = new ArrayList<>(optionSize);\n        while (optionSize > 0) {\n            arr.add(faker.resolve(\"vehicle.car_options\"));\n            optionSize -= 1;\n        }\n        return arr;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[List<String>]standardSpecs()", "name": "standardSpecs", "arg_nums": 0, "params": [], "return_type": "List<String>", "signature": "public List<String> standardSpecs()", "original_string": "    public List<String> standardSpecs() {\n        return standardSpecs(5, 10);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[List<String>]standardSpecs(int,int)", "name": "standardSpecs", "arg_nums": 2, "params": [{"name": "min", "type": "int"}, {"name": "max", "type": "int"}], "return_type": "List<String>", "signature": "public List<String> standardSpecs(int min, int max)", "original_string": "    public List<String> standardSpecs(int min, int max) {\n        int standardSpecsSize = faker.number().numberBetween(min, max);\n        List<String> arr = new ArrayList<>(standardSpecsSize);\n        while (standardSpecsSize > 0) {\n            arr.add(faker.resolve(\"vehicle.standard_specs\"));\n            standardSpecsSize -= 1;\n        }\n        return arr;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]doors()", "name": "doors", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String doors()", "original_string": "    public String doors() {\n        return resolve(\"vehicle.doors\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]licensePlate()", "name": "licensePlate", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String licensePlate()", "original_string": "    public String licensePlate() {\n        return faker.bothify(faker.resolve(\"vehicle.license_plate\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle.[String]licensePlate(String)", "name": "licensePlate", "arg_nums": 1, "params": [{"name": "stateAbbreviation", "type": "String"}], "return_type": "String", "signature": "public String licensePlate(String stateAbbreviation)", "original_string": "    public String licensePlate(String stateAbbreviation) {\n\n        if (\"\".equals(stateAbbreviation)) {\n            return null;\n        }\n\n        String licensePlatesByState = resolve(\"vehicle.license_plate_by_state.\" + stateAbbreviation);\n        return licensePlatesByState == null ? null : faker.bothify(licensePlatesByState).toUpperCase(Locale.ROOT);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Vehicle.java", "class_name": "Vehicle", "class_uri": "src/main/java/net/datafaker/providers/base/Vehicle.java.Vehicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/NatoPhoneticAlphabet.java.NatoPhoneticAlphabet.[]NatoPhoneticAlphabet(BaseProviders)", "name": "NatoPhoneticAlphabet", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected NatoPhoneticAlphabet(BaseProviders faker)", "original_string": "    protected NatoPhoneticAlphabet(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/NatoPhoneticAlphabet.java", "class_name": "NatoPhoneticAlphabet", "class_uri": "src/main/java/net/datafaker/providers/base/NatoPhoneticAlphabet.java.NatoPhoneticAlphabet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/NatoPhoneticAlphabet.java.NatoPhoneticAlphabet.[String]codeWord()", "name": "codeWord", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String codeWord()", "original_string": "    public String codeWord() {\n        return resolve(\"nato_phonetic_alphabet.code_word\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/NatoPhoneticAlphabet.java", "class_name": "NatoPhoneticAlphabet", "class_uri": "src/main/java/net/datafaker/providers/base/NatoPhoneticAlphabet.java.NatoPhoneticAlphabet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Appliance.java.Appliance.[]Appliance(BaseProviders)", "name": "Appliance", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Appliance(BaseProviders faker)", "original_string": "    protected Appliance(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Appliance.java", "class_name": "Appliance", "class_uri": "src/main/java/net/datafaker/providers/base/Appliance.java.Appliance", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Appliance.java.Appliance.[String]brand()", "name": "brand", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String brand()", "original_string": "    public String brand() {\n        return resolve(\"appliance.brand\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Appliance.java", "class_name": "Appliance", "class_uri": "src/main/java/net/datafaker/providers/base/Appliance.java.Appliance", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Appliance.java.Appliance.[String]equipment()", "name": "equipment", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String equipment()", "original_string": "    public String equipment() {\n        return resolve(\"appliance.equipment\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Appliance.java", "class_name": "Appliance", "class_uri": "src/main/java/net/datafaker/providers/base/Appliance.java.Appliance", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration.[]FakeDuration(BaseProviders)", "name": "FakeDuration", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected FakeDuration(BaseProviders faker)", "original_string": "    protected FakeDuration(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FakeDuration.java", "class_name": "FakeDuration", "class_uri": "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration.[long]getNumberBetween(long)", "name": "getNumberBetween", "arg_nums": 1, "params": [{"name": "max", "type": "long"}], "return_type": "long", "signature": "private long getNumberBetween(long max)", "original_string": "    private long getNumberBetween(long max) {\n        return this.faker.random().nextLong(max + 1);  // nextLong max is exclusive\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FakeDuration.java", "class_name": "FakeDuration", "class_uri": "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\nReturns a random long between 0 and max inclusive\n\n@param max: upper bound of number range\n@return a random long between 0 and max inclusive\n"}, {"uris": "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration.[Duration]atMostMinutes(long)", "name": "atMostMinutes", "arg_nums": 1, "params": [{"name": "minutesMax", "type": "long"}], "return_type": "Duration", "signature": "public Duration atMostMinutes(long minutesMax)", "original_string": "    public Duration atMostMinutes(long minutesMax) {\n        return Duration.ofMinutes(getNumberBetween(minutesMax));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FakeDuration.java", "class_name": "FakeDuration", "class_uri": "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Duration", "classes": []}, "docstring": "\nReturns a Duration object representing a random duration of minutes in the given range\n\n@param minutesMax: max number of minutes for Duration (inclusive)\n@return a Duration object representing a number of minutes in the given range\n"}, {"uris": "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration.[Duration]atMostHours(long)", "name": "atMostHours", "arg_nums": 1, "params": [{"name": "hoursMax", "type": "long"}], "return_type": "Duration", "signature": "public Duration atMostHours(long hoursMax)", "original_string": "    public Duration atMostHours(long hoursMax) {\n        return Duration.ofHours(getNumberBetween(hoursMax));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FakeDuration.java", "class_name": "FakeDuration", "class_uri": "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Duration", "classes": []}, "docstring": "\nReturns a Duration object representing a random duration of hours in the given range\n\n@param hoursMax: max number of hours for Duration (inclusive)\n@return a Duration object representing a number of hours in the given range\n"}, {"uris": "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration.[Duration]atMostDays(long)", "name": "atMostDays", "arg_nums": 1, "params": [{"name": "daysMax", "type": "long"}], "return_type": "Duration", "signature": "public Duration atMostDays(long daysMax)", "original_string": "    public Duration atMostDays(long daysMax) {\n        return Duration.ofDays(getNumberBetween(daysMax));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FakeDuration.java", "class_name": "FakeDuration", "class_uri": "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Duration", "classes": []}, "docstring": "\nReturns a Duration object representing a random duration of days in the given range\n\n@param daysMax: max number of days for Duration (inclusive)\n@return a Duration object representing a number of days in the given range\n"}, {"uris": "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration.[Duration]atMostSeconds(long)", "name": "atMostSeconds", "arg_nums": 1, "params": [{"name": "secondsMax", "type": "long"}], "return_type": "Duration", "signature": "public Duration atMostSeconds(long secondsMax)", "original_string": "    public Duration atMostSeconds(long secondsMax) {\n        return Duration.ofSeconds(getNumberBetween(secondsMax));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FakeDuration.java", "class_name": "FakeDuration", "class_uri": "src/main/java/net/datafaker/providers/base/FakeDuration.java.FakeDuration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Duration", "classes": []}, "docstring": "\nReturns a Duration object representing a random duration of seconds in the given range\n\n@param secondsMax: max number of seconds for Duration (inclusive)\n@return a Duration object representing a number of seconds in the given range\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Matz.java.Matz.[]Matz(BaseProviders)", "name": "Matz", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Matz(final BaseProviders faker)", "original_string": "    protected Matz(final BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Matz.java", "class_name": "Matz", "class_uri": "src/main/java/net/datafaker/providers/base/Matz.java.Matz", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Matz.java.Matz.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"matz.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Matz.java", "class_name": "Matz", "class_uri": "src/main/java/net/datafaker/providers/base/Matz.java.Matz", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DrivingLicense.java.DrivingLicense.[]DrivingLicense(BaseProviders)", "name": "DrivingLicense", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected DrivingLicense(BaseProviders faker)", "original_string": "    protected DrivingLicense(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DrivingLicense.java", "class_name": "DrivingLicense", "class_uri": "src/main/java/net/datafaker/providers/base/DrivingLicense.java.DrivingLicense", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DrivingLicense.java.DrivingLicense.[String]drivingLicense(String)", "name": "drivingLicense", "arg_nums": 1, "params": [{"name": "stateAbbreviation", "type": "String"}], "return_type": "String", "signature": "public String drivingLicense(String stateAbbreviation)", "original_string": "    public String drivingLicense(String stateAbbreviation) {\n        return faker.bothify(faker.resolve(\"driving_license.usa.\" + stateAbbreviation)).toUpperCase(Locale.ROOT);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DrivingLicense.java", "class_name": "DrivingLicense", "class_uri": "src/main/java/net/datafaker/providers/base/DrivingLicense.java.DrivingLicense", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Robin.java.Robin.[]Robin(BaseProviders)", "name": "Robin", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Robin(BaseProviders faker)", "original_string": "    protected Robin(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Robin.java", "class_name": "Robin", "class_uri": "src/main/java/net/datafaker/providers/base/Robin.java.Robin", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Robin.java.Robin.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"robin.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Robin.java", "class_name": "Robin", "class_uri": "src/main/java/net/datafaker/providers/base/Robin.java.Robin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Image.java.Image.[]Image(BaseProviders)", "name": "Image", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Image(BaseProviders faker)", "original_string": "    protected Image(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Image.java", "class_name": "Image", "class_uri": "src/main/java/net/datafaker/providers/base/Image.java.Image", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64BMP()", "name": "base64BMP", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String base64BMP()", "original_string": "    public String base64BMP() {\n        return base64(ImageBuilder.builder().type(BMP).build());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Image.java", "class_name": "Image", "class_uri": "src/main/java/net/datafaker/providers/base/Image.java.Image", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64GIF()", "name": "base64GIF", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String base64GIF()", "original_string": "    public String base64GIF() {\n        return base64(ImageBuilder.builder().type(GIF).build());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Image.java", "class_name": "Image", "class_uri": "src/main/java/net/datafaker/providers/base/Image.java.Image", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64JPG()", "name": "base64JPG", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String base64JPG()", "original_string": "    public String base64JPG() {\n        return base64JPEG();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Image.java", "class_name": "Image", "class_uri": "src/main/java/net/datafaker/providers/base/Image.java.Image", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64JPEG()", "name": "base64JPEG", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String base64JPEG()", "original_string": "    public String base64JPEG() {\n        return base64(ImageBuilder.builder().type(JPEG).build());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Image.java", "class_name": "Image", "class_uri": "src/main/java/net/datafaker/providers/base/Image.java.Image", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64PNG()", "name": "base64PNG", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String base64PNG()", "original_string": "    public String base64PNG() {\n        return base64(ImageBuilder.builder().type(PNG).build());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Image.java", "class_name": "Image", "class_uri": "src/main/java/net/datafaker/providers/base/Image.java.Image", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64SVG()", "name": "base64SVG", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String base64SVG()", "original_string": "    public String base64SVG() {\n        return base64(ImageBuilder.builder().type(SVG).build());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Image.java", "class_name": "Image", "class_uri": "src/main/java/net/datafaker/providers/base/Image.java.Image", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64TIFF()", "name": "base64TIFF", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String base64TIFF()", "original_string": "    public String base64TIFF() {\n        return generateBase64RasterImage(TIFF, DEFAULT_WIDTH, DEFAULT_HEIGHT);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Image.java", "class_name": "Image", "class_uri": "src/main/java/net/datafaker/providers/base/Image.java.Image", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]base64(Base64ImageRuleConfig)", "name": "base64", "arg_nums": 1, "params": [{"name": "config", "type": "Base64ImageRuleConfig"}], "return_type": "String", "signature": "public String base64(Base64ImageRuleConfig config)", "original_string": "    public String base64(Base64ImageRuleConfig config) {\n        if (config.imageType == SVG) {\n            return generateBase64VectorImage(config.imageType(), config.width(), config.height());\n        } else {\n            return generateBase64RasterImage(config.imageType(), config.width(), config.height());\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Image.java", "class_name": "Image", "class_uri": "src/main/java/net/datafaker/providers/base/Image.java.Image", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]generateBase64RasterImage(ImageType,int,int)", "name": "generateBase64RasterImage", "arg_nums": 3, "params": [{"name": "imageType", "type": "ImageType"}, {"name": "width", "type": "int"}, {"name": "height", "type": "int"}], "return_type": "String", "signature": "private String generateBase64RasterImage(ImageType imageType, int width, int height)", "original_string": "    private String generateBase64RasterImage(ImageType imageType, int width, int height) {\n        BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        Graphics2D graphics = bufferedImage.createGraphics();\n\n        int boxSize = Math.max(1, width / 8);\n\n        // Fill the image with white background\n        graphics.setColor(WHITE);\n        graphics.fillRect(0, 0, width, height);\n\n        // Draw random colored boxes\n        for (int y = 0; y < height; y += boxSize) {\n            for (int x = 0; x < width; x += boxSize) {\n                Color randomColor = randomColor();\n                graphics.setColor(randomColor);\n                graphics.fillRect(x, y, boxSize, boxSize);\n            }\n        }\n        graphics.dispose();\n\n        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n            ImageIO.write(bufferedImage, imageType.name(), baos);\n            byte[] imageBytes = baos.toByteArray();\n            return \"data:\" + imageType.mimeType + \";base64,\" + Base64.getEncoder().encodeToString(imageBytes);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to generate image %s of size %sx%s\".formatted(imageType, width, height), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Image.java", "class_name": "Image", "class_uri": "src/main/java/net/datafaker/providers/base/Image.java.Image", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Image.java.Image.[String]generateBase64VectorImage(ImageType,int,int)", "name": "generateBase64VectorImage", "arg_nums": 3, "params": [{"name": "imageType", "type": "ImageType"}, {"name": "width", "type": "int"}, {"name": "height", "type": "int"}], "return_type": "String", "signature": "private String generateBase64VectorImage(ImageType imageType, int width, int height)", "original_string": "    private String generateBase64VectorImage(ImageType imageType, int width, int height) {\n        StringBuilder svg = new StringBuilder();\n        svg.append(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"\").append(DEFAULT_WIDTH).append(\"\\\" height=\\\"\").append(DEFAULT_HEIGHT).append(\"\\\">\");\n\n        int boxSize = Math.max(1, width / 8);\n\n        for (int y = 0; y < height; y += boxSize) {\n            for (int x = 0; x < width; x += boxSize) {\n                Color randomColor = randomColor();\n                String color = String.format(\"#%02x%02x%02x\", randomColor.getRed(), randomColor.getGreen(), randomColor.getBlue());\n                svg.append(\"<rect x=\\\"\").append(x).append(\"\\\" y=\\\"\").append(y).append(\"\\\" width=\\\"\").append(boxSize).append(\"\\\" height=\\\"\").append(boxSize).append(\"\\\" fill=\\\"\").append(color).append(\"\\\"/>\");\n            }\n        }\n\n        svg.append(\"</svg>\");\n\n        String svgString = svg.toString();\n        String base64Svg = Base64.getEncoder().encodeToString(svgString.getBytes());\n        return \"data:\" + imageType.mimeType + \";base64,\" + base64Svg;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Image.java", "class_name": "Image", "class_uri": "src/main/java/net/datafaker/providers/base/Image.java.Image", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Image.java.Image.[Color]randomColor()", "name": "randomColor", "arg_nums": 0, "params": [], "return_type": "Color", "signature": "private Color randomColor()", "original_string": "    private Color randomColor() {\n        // Convert the bytes to unsigned integers (0-255) for RGB\n        byte[] randomBytes = faker.random().nextRandomBytes(3);\n        int red = randomBytes[0] & 0xFF;\n        int green = randomBytes[1] & 0xFF;\n        int blue = randomBytes[2] & 0xFF;\n        return new Color(red, green, blue);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Image.java", "class_name": "Image", "class_uri": "src/main/java/net/datafaker/providers/base/Image.java.Image", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Color", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[]Dog(BaseProviders)", "name": "Dog", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Dog(BaseProviders faker)", "original_string": "    protected Dog(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Dog.java", "class_name": "Dog", "class_uri": "src/main/java/net/datafaker/providers/base/Dog.java.Dog", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"creature.dog.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Dog.java", "class_name": "Dog", "class_uri": "src/main/java/net/datafaker/providers/base/Dog.java.Dog", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]breed()", "name": "breed", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String breed()", "original_string": "    public String breed() {\n        return resolve(\"creature.dog.breed\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Dog.java", "class_name": "Dog", "class_uri": "src/main/java/net/datafaker/providers/base/Dog.java.Dog", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]sound()", "name": "sound", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sound()", "original_string": "    public String sound() {\n        return resolve(\"creature.dog.sound\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Dog.java", "class_name": "Dog", "class_uri": "src/main/java/net/datafaker/providers/base/Dog.java.Dog", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]memePhrase()", "name": "memePhrase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String memePhrase()", "original_string": "    public String memePhrase() {\n        return resolve(\"creature.dog.meme_phrase\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Dog.java", "class_name": "Dog", "class_uri": "src/main/java/net/datafaker/providers/base/Dog.java.Dog", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]age()", "name": "age", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String age()", "original_string": "    public String age() {\n        return resolve(\"creature.dog.age\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Dog.java", "class_name": "Dog", "class_uri": "src/main/java/net/datafaker/providers/base/Dog.java.Dog", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]coatLength()", "name": "coatLength", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String coatLength()", "original_string": "    public String coatLength() {\n        return resolve(\"creature.dog.coat_length\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Dog.java", "class_name": "Dog", "class_uri": "src/main/java/net/datafaker/providers/base/Dog.java.Dog", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]gender()", "name": "gender", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String gender()", "original_string": "    public String gender() {\n        return resolve(\"creature.dog.gender\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Dog.java", "class_name": "Dog", "class_uri": "src/main/java/net/datafaker/providers/base/Dog.java.Dog", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Dog.java.Dog.[String]size()", "name": "size", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String size()", "original_string": "    public String size() {\n        return resolve(\"creature.dog.size\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Dog.java", "class_name": "Dog", "class_uri": "src/main/java/net/datafaker/providers/base/Dog.java.Dog", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Time.java.Time.[]Time(BaseProviders)", "name": "Time", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Time(BaseProviders faker)", "original_string": "    protected Time(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Time.java", "class_name": "Time", "class_uri": "src/main/java/net/datafaker/providers/base/Time.java.Time", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Time.java.Time.[long]future(int,ChronoUnit)", "name": "future", "arg_nums": 2, "params": [{"name": "atMost", "type": "int"}, {"name": "unit", "type": "ChronoUnit"}], "return_type": "long", "signature": "public long future(int atMost, ChronoUnit unit)", "original_string": "    public long future(int atMost, ChronoUnit unit) {\n        final LocalTime now = LocalTime.now();\n        final long atMostTime = now.plus(atMost, unit).toNanoOfDay();\n        final long time = now.toNanoOfDay();\n        return faker.number().numberBetween(time, atMostTime);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Time.java", "class_name": "Time", "class_uri": "src/main/java/net/datafaker/providers/base/Time.java.Time", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\nGenerates a future time from now.\n\n@param atMost at most this amount of time ahead from now exclusive.\n@param unit   the time unit.\n@return a future time from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Time.java.Time.[String]future(int,ChronoUnit,String)", "name": "future", "arg_nums": 3, "params": [{"name": "atMost", "type": "int"}, {"name": "unit", "type": "ChronoUnit"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String future(int atMost, ChronoUnit unit, String pattern)", "original_string": "    public String future(int atMost, ChronoUnit unit, String pattern) {\n        return LocalTime.ofNanoOfDay(future(atMost, unit)).format(DateTimeFormatter.ofPattern(pattern));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Time.java", "class_name": "Time", "class_uri": "src/main/java/net/datafaker/providers/base/Time.java.Time", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates and converts to string representation a future time from now.\n\n@param atMost  at most this amount of time ahead from now exclusive.\n@param unit    the time unit.\n@param pattern time pattern to convert to string.\n@return a string representation of a future time from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Time.java.Time.[long]future(int,int,ChronoUnit)", "name": "future", "arg_nums": 3, "params": [{"name": "atMost", "type": "int"}, {"name": "minimum", "type": "int"}, {"name": "unit", "type": "ChronoUnit"}], "return_type": "long", "signature": "public long future(int atMost, int minimum, ChronoUnit unit)", "original_string": "    public long future(int atMost, int minimum, ChronoUnit unit) {\n        final LocalTime now = LocalTime.now();\n        final long atMostTime = now.plus(atMost, unit).toNanoOfDay();\n        final long time = now.plus(minimum, unit).toNanoOfDay();\n        return faker.number().numberBetween(time, atMostTime);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Time.java", "class_name": "Time", "class_uri": "src/main/java/net/datafaker/providers/base/Time.java.Time", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\nGenerates a future time from now, with a minimum time.\n\n@param atMost  at most this amount of time ahead from now exclusive.\n@param minimum the minimum amount of time in the future from now.\n@param unit    the time unit.\n@return a future time from now, with a minimum time.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Time.java.Time.[String]future(int,int,ChronoUnit,String)", "name": "future", "arg_nums": 4, "params": [{"name": "atMost", "type": "int"}, {"name": "minimum", "type": "int"}, {"name": "unit", "type": "ChronoUnit"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String future(int atMost, int minimum, ChronoUnit unit, String pattern)", "original_string": "    public String future(int atMost, int minimum, ChronoUnit unit, String pattern) {\n        return LocalTime.ofNanoOfDay(future(atMost, minimum, unit)).format(DateTimeFormatter.ofPattern(pattern));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Time.java", "class_name": "Time", "class_uri": "src/main/java/net/datafaker/providers/base/Time.java.Time", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates and converts to string representation\nof a future time from now, with a minimum time.\n\n@param atMost  at most this amount of time ahead from now exclusive.\n@param minimum the minimum amount of time in the future from now.\n@param unit    the time unit.\n@param pattern time pattern to convert to string.\n@return a string representation of a future time from now, with a minimum time.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Time.java.Time.[long]past(int,ChronoUnit)", "name": "past", "arg_nums": 2, "params": [{"name": "atLeast", "type": "int"}, {"name": "unit", "type": "ChronoUnit"}], "return_type": "long", "signature": "public long past(int atLeast, ChronoUnit unit)", "original_string": "    public long past(int atLeast, ChronoUnit unit) {\n        final LocalTime now = LocalTime.now();\n        final long atLeastTime = now.minus(atLeast, unit).toNanoOfDay();\n        final long time = now.toNanoOfDay();\n        return faker.number().numberBetween(atLeastTime, time);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Time.java", "class_name": "Time", "class_uri": "src/main/java/net/datafaker/providers/base/Time.java.Time", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\nGenerates a past time from now.\n\n@param atLeast at most this amount of time earlier from now exclusive.\n@param unit    the time unit.\n@return a past time from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Time.java.Time.[String]past(int,ChronoUnit,String)", "name": "past", "arg_nums": 3, "params": [{"name": "atMost", "type": "int"}, {"name": "unit", "type": "ChronoUnit"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String past(int atMost, ChronoUnit unit, String pattern)", "original_string": "    public String past(int atMost, ChronoUnit unit, String pattern) {\n        return LocalTime.ofNanoOfDay(past(atMost, unit)).format(DateTimeFormatter.ofPattern(pattern));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Time.java", "class_name": "Time", "class_uri": "src/main/java/net/datafaker/providers/base/Time.java.Time", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a string representation of a past time from now.\n\n@param atMost  at most this amount of time earlier from now exclusive.\n@param unit    the time unit.\n@param pattern time pattern to convert to string.\n@return a string representation of a past time from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Time.java.Time.[long]past(int,int,ChronoUnit)", "name": "past", "arg_nums": 3, "params": [{"name": "atMost", "type": "int"}, {"name": "minimum", "type": "int"}, {"name": "unit", "type": "ChronoUnit"}], "return_type": "long", "signature": "public long past(int atMost, int minimum, ChronoUnit unit)", "original_string": "    public long past(int atMost, int minimum, ChronoUnit unit) {\n        final LocalTime now = LocalTime.now();\n        final long atMostTime = now.minus(atMost, unit).toNanoOfDay();\n        final long time = now.minus(minimum, unit).toNanoOfDay();\n        return faker.number().numberBetween(atMostTime, time);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Time.java", "class_name": "Time", "class_uri": "src/main/java/net/datafaker/providers/base/Time.java.Time", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\nGenerates a past time from now, with a minimum time.\n\n@param atMost  at most this amount of time earlier from now exclusive.\n@param minimum the minimum amount of time in the past from now.\n@param unit    the time unit.\n@return a past time from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Time.java.Time.[String]past(int,int,ChronoUnit,String)", "name": "past", "arg_nums": 4, "params": [{"name": "atMost", "type": "int"}, {"name": "minimum", "type": "int"}, {"name": "unit", "type": "ChronoUnit"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String past(int atMost, int minimum, ChronoUnit unit, String pattern)", "original_string": "    public String past(int atMost, int minimum, ChronoUnit unit, String pattern) {\n        return LocalTime.ofNanoOfDay(past(atMost, minimum, unit)).format(DateTimeFormatter.ofPattern(pattern));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Time.java", "class_name": "Time", "class_uri": "src/main/java/net/datafaker/providers/base/Time.java.Time", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates and converts to string representation a past time from now, with a minimum time.\n\n@param atMost  at most this amount of time earlier from now exclusive.\n@param minimum the minimum amount of time in the past from now.\n@param unit    the time unit.\n@param pattern time pattern to convert to string.\n@return a string representation of a past time from now, with a minimum time.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Time.java.Time.[long]between(LocalTime,LocalTime)", "name": "between", "arg_nums": 2, "params": [{"name": "from", "type": "LocalTime"}, {"name": "to", "type": "LocalTime"}], "return_type": "long", "signature": "public long between(LocalTime from, LocalTime to)", "original_string": "    public long between(LocalTime from, LocalTime to) throws IllegalArgumentException {\n        if (to.isBefore(from)) {\n            throw new IllegalArgumentException(\"Invalid time range: the upper bound time (%s) is before the lower bound (%s)\".formatted(to, from));\n        }\n\n        if (from.equals(to)) {\n            return from.toNanoOfDay();\n        }\n\n        return faker.number().numberBetween(from.toNanoOfDay(), to.toNanoOfDay());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Time.java", "class_name": "Time", "class_uri": "src/main/java/net/datafaker/providers/base/Time.java.Time", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\nGenerates a random time between two times.\n\n@param from the lower bound inclusive\n@param to   the upper bound exclusive\n@return a random time between {@code from} and {@code to}.\n@throws IllegalArgumentException if the {@code to} time represents an earlier time than {@code from} time.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Time.java.Time.[String]between(LocalTime,LocalTime,String)", "name": "between", "arg_nums": 3, "params": [{"name": "from", "type": "LocalTime"}, {"name": "to", "type": "LocalTime"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String between(LocalTime from, LocalTime to, String pattern)", "original_string": "    public String between(LocalTime from, LocalTime to, String pattern) throws IllegalArgumentException {\n        return LocalTime.ofNanoOfDay(between(from, to)).format(DateTimeFormatter.ofPattern(pattern));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Time.java", "class_name": "Time", "class_uri": "src/main/java/net/datafaker/providers/base/Time.java.Time", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a string representation of a random time between two times.\n\n@param from    the lower bound inclusive\n@param to      the upper bound exclusive\n@param pattern time pattern to convert to string.\n@return a string representation of a random time between {@code from} and {@code to}.\n@throws IllegalArgumentException if the {@code to} time represents an earlier time than {@code from} time.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java.LargeLanguageModel.[]LargeLanguageModel(BaseProviders)", "name": "LargeLanguageModel", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected LargeLanguageModel(BaseProviders faker)", "original_string": "    protected LargeLanguageModel(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java", "class_name": "LargeLanguageModel", "class_uri": "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java.LargeLanguageModel", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java.LargeLanguageModel.[String]textModel()", "name": "textModel", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String textModel()", "original_string": "    public String textModel() {\n        return resolve(\"largelanguagemodel.text_models\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java", "class_name": "LargeLanguageModel", "class_uri": "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java.LargeLanguageModel", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java.LargeLanguageModel.[String]embeddingModel()", "name": "embeddingModel", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String embeddingModel()", "original_string": "    public String embeddingModel() {\n        return resolve(\"largelanguagemodel.embeddings\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java", "class_name": "LargeLanguageModel", "class_uri": "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java.LargeLanguageModel", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java.LargeLanguageModel.[String]tokenizer()", "name": "tokenizer", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String tokenizer()", "original_string": "    public String tokenizer() {\n        return resolve(\"largelanguagemodel.tokenizers\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java", "class_name": "LargeLanguageModel", "class_uri": "src/main/java/net/datafaker/providers/base/LargeLanguageModel.java.LargeLanguageModel", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hololive.java.Hololive.[]Hololive(BaseProviders)", "name": "Hololive", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Hololive(BaseProviders faker)", "original_string": "    protected Hololive(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hololive.java", "class_name": "Hololive", "class_uri": "src/main/java/net/datafaker/providers/base/Hololive.java.Hololive", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Hololive.java.Hololive.[String]talent()", "name": "talent", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String talent()", "original_string": "    public String talent() {\n        return resolve(\"hololive.talent\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Hololive.java", "class_name": "Hololive", "class_uri": "src/main/java/net/datafaker/providers/base/Hololive.java.Hololive", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[]Photography(BaseProviders)", "name": "Photography", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Photography(BaseProviders faker)", "original_string": "    protected Photography(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Photography.java", "class_name": "Photography", "class_uri": "src/main/java/net/datafaker/providers/base/Photography.java.Photography", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]term()", "name": "term", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String term()", "original_string": "    public String term() {\n        return resolve(\"photography.term\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Photography.java", "class_name": "Photography", "class_uri": "src/main/java/net/datafaker/providers/base/Photography.java.Photography", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a photography term.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]brand()", "name": "brand", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String brand()", "original_string": "    public String brand() {\n        return resolve(\"photography.brand\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Photography.java", "class_name": "Photography", "class_uri": "src/main/java/net/datafaker/providers/base/Photography.java.Photography", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a photography brand.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]camera()", "name": "camera", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String camera()", "original_string": "    public String camera() {\n        return resolve(\"photography.camera\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Photography.java", "class_name": "Photography", "class_uri": "src/main/java/net/datafaker/providers/base/Photography.java.Photography", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a name of camera model/make.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]lens()", "name": "lens", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String lens()", "original_string": "    public String lens() {\n        return resolve(\"photography.lens\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Photography.java", "class_name": "Photography", "class_uri": "src/main/java/net/datafaker/providers/base/Photography.java.Photography", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return some lens description like 500mm/8.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]genre()", "name": "genre", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String genre()", "original_string": "    public String genre() {\n        return resolve(\"photography.genre\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Photography.java", "class_name": "Photography", "class_uri": "src/main/java/net/datafaker/providers/base/Photography.java.Photography", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a photography genre.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]imageTag()", "name": "imageTag", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String imageTag()", "original_string": "    public String imageTag() {\n        return resolve(\"photography.imagetag\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Photography.java", "class_name": "Photography", "class_uri": "src/main/java/net/datafaker/providers/base/Photography.java.Photography", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return some string to tag an image.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]aperture()", "name": "aperture", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String aperture()", "original_string": "    public String aperture() {\n        return resolve(\"photography.aperture\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Photography.java", "class_name": "Photography", "class_uri": "src/main/java/net/datafaker/providers/base/Photography.java.Photography", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return some aperture description like f/1.4 .\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]shutter()", "name": "shutter", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String shutter()", "original_string": "    public String shutter() {\n        return resolve(\"photography.shutter\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Photography.java", "class_name": "Photography", "class_uri": "src/main/java/net/datafaker/providers/base/Photography.java.Photography", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return some shutter description like 1/25 .\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Photography.java.Photography.[String]iso()", "name": "iso", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String iso()", "original_string": "    public String iso() {\n        return resolve(\"photography.iso\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Photography.java", "class_name": "Photography", "class_uri": "src/main/java/net/datafaker/providers/base/Photography.java.Photography", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return some ISO value like 3200.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[]Lorem(BaseProviders)", "name": "Lorem", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Lorem(BaseProviders faker)", "original_string": "    protected Lorem(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[char]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "char", "signature": "public char character()", "original_string": "    public char character() {\n        return character(false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "char", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[char]character(boolean)", "name": "character", "arg_nums": 1, "params": [{"name": "includeUppercase", "type": "boolean"}], "return_type": "char", "signature": "public char character(boolean includeUppercase)", "original_string": "    public char character(boolean includeUppercase) {\n        return characters(includeUppercase ? 2 : 1, includeUppercase).charAt(0);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "char", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return characters(255, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(boolean)", "name": "characters", "arg_nums": 1, "params": [{"name": "includeUppercase", "type": "boolean"}], "return_type": "String", "signature": "public String characters(boolean includeUppercase)", "original_string": "    public String characters(boolean includeUppercase) {\n        return characters(255, includeUppercase);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int,int)", "name": "characters", "arg_nums": 2, "params": [{"name": "minimumLength", "type": "int"}, {"name": "maximumLength", "type": "int"}], "return_type": "String", "signature": "public String characters(int minimumLength, int maximumLength)", "original_string": "    public String characters(int minimumLength, int maximumLength) {\n        return characters(faker.random().nextInt(minimumLength, maximumLength), false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int,int,boolean)", "name": "characters", "arg_nums": 3, "params": [{"name": "minimumLength", "type": "int"}, {"name": "maximumLength", "type": "int"}, {"name": "includeUppercase", "type": "boolean"}], "return_type": "String", "signature": "public String characters(int minimumLength, int maximumLength, boolean includeUppercase)", "original_string": "    public String characters(int minimumLength, int maximumLength, boolean includeUppercase) {\n        return characters(minimumLength, maximumLength, includeUppercase, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int,int,boolean,boolean)", "name": "characters", "arg_nums": 4, "params": [{"name": "minimumLength", "type": "int"}, {"name": "maximumLength", "type": "int"}, {"name": "includeUppercase", "type": "boolean"}, {"name": "includeDigit", "type": "boolean"}], "return_type": "String", "signature": "public String characters(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeDigit)", "original_string": "    public String characters(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeDigit) {\n        return characters(minimumLength, maximumLength, includeUppercase, false, includeDigit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int)", "name": "characters", "arg_nums": 1, "params": [{"name": "fixedNumberOfCharacters", "type": "int"}], "return_type": "String", "signature": "public String characters(int fixedNumberOfCharacters)", "original_string": "    public String characters(int fixedNumberOfCharacters) {\n        return characters(fixedNumberOfCharacters, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int,boolean)", "name": "characters", "arg_nums": 2, "params": [{"name": "fixedNumberOfCharacters", "type": "int"}, {"name": "includeUppercase", "type": "boolean"}], "return_type": "String", "signature": "public String characters(int fixedNumberOfCharacters, boolean includeUppercase)", "original_string": "    public String characters(int fixedNumberOfCharacters, boolean includeUppercase) {\n        return faker.internet().password(fixedNumberOfCharacters, fixedNumberOfCharacters, includeUppercase);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int,int,boolean,boolean,boolean)", "name": "characters", "arg_nums": 5, "params": [{"name": "minimumLength", "type": "int"}, {"name": "maximumLength", "type": "int"}, {"name": "includeUppercase", "type": "boolean"}, {"name": "includeSpecial", "type": "boolean"}, {"name": "includeDigit", "type": "boolean"}], "return_type": "String", "signature": "public String characters(int minimumLength, int maximumLength,\n                             boolean includeUppercase, boolean includeSpecial, boolean includeDigit)", "original_string": "    public String characters(int minimumLength, int maximumLength,\n                             boolean includeUppercase, boolean includeSpecial, boolean includeDigit) {\n        return faker.internet().password(minimumLength, maximumLength, includeUppercase, includeSpecial, includeDigit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int,boolean,boolean)", "name": "characters", "arg_nums": 3, "params": [{"name": "fixedNumberOfCharacters", "type": "int"}, {"name": "includeUppercase", "type": "boolean"}, {"name": "includeDigit", "type": "boolean"}], "return_type": "String", "signature": "public String characters(int fixedNumberOfCharacters, boolean includeUppercase, boolean includeDigit)", "original_string": "    public String characters(int fixedNumberOfCharacters, boolean includeUppercase, boolean includeDigit) {\n        return characters(fixedNumberOfCharacters, includeUppercase, false, includeDigit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]characters(int,boolean,boolean,boolean)", "name": "characters", "arg_nums": 4, "params": [{"name": "fixedNumberOfCharacters", "type": "int"}, {"name": "includeUppercase", "type": "boolean"}, {"name": "includeSpecial", "type": "boolean"}, {"name": "includeDigit", "type": "boolean"}], "return_type": "String", "signature": "public String characters(int fixedNumberOfCharacters,\n                             boolean includeUppercase, boolean includeSpecial, boolean includeDigit)", "original_string": "    public String characters(int fixedNumberOfCharacters,\n                             boolean includeUppercase, boolean includeSpecial, boolean includeDigit) {\n        return faker.internet().password(fixedNumberOfCharacters, fixedNumberOfCharacters, includeUppercase, includeSpecial, includeDigit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[List<String>]words(int)", "name": "words", "arg_nums": 1, "params": [{"name": "num", "type": "int"}], "return_type": "List<String>", "signature": "public List<String> words(int num)", "original_string": "    public List<String> words(int num) {\n        List<String> returnList = new ArrayList<>();\n        for (int i = 0; i < num; i++) {\n            returnList.add(word());\n        }\n        return returnList;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[List<String>]words()", "name": "words", "arg_nums": 0, "params": [], "return_type": "List<String>", "signature": "public List<String> words()", "original_string": "    public List<String> words() {\n        return words(3);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]word()", "name": "word", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String word()", "original_string": "    public String word() {\n        return resolve(\"lorem.words\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]supplemental()", "name": "supplemental", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String supplemental()", "original_string": "    public String supplemental() {\n        return resolve(\"lorem.supplemental\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]sentence()", "name": "sentence", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sentence()", "original_string": "    public String sentence() {\n        return sentence(3);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCreate a sentence with a random number of words within the range 4..10.\n\n@return a random sentence\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]sentence(int)", "name": "sentence", "arg_nums": 1, "params": [{"name": "wordCount", "type": "int"}], "return_type": "String", "signature": "public String sentence(int wordCount)", "original_string": "    public String sentence(int wordCount) {\n        return sentence(wordCount, 6);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCreate a sentence with a random number of words within the range (wordCount+1)..(wordCount+6).\n\n@return a random sentence\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]sentence(int,int)", "name": "sentence", "arg_nums": 2, "params": [{"name": "wordCount", "type": "int"}, {"name": "randomWordsToAdd", "type": "int"}], "return_type": "String", "signature": "public String sentence(int wordCount, int randomWordsToAdd)", "original_string": "    public String sentence(int wordCount, int randomWordsToAdd) {\n        int numberOfWordsToAdd = randomWordsToAdd == 0 ? 0 : faker.random().nextInt(randomWordsToAdd);\n        final int totalWordCount = wordCount + numberOfWordsToAdd;\n        StringBuilder sb = new StringBuilder();\n        if (totalWordCount > 0) {\n            sb.append(WordUtils.capitalize(word()));\n        }\n        for (int i = 1; i < totalWordCount; i++) {\n            sb.append(\" \").append(word());\n        }\n        return sb.append(\".\").toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCreate a sentence with a random number of words within the range (wordCount+1)..(wordCount+randomWordsToAdd).\n<p>\nSet {@code randomWordsToAdd} to 0 to generate sentences with a fixed number of words.\n\n@return a random sentence\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[List<String>]sentences(int)", "name": "sentences", "arg_nums": 1, "params": [{"name": "sentenceCount", "type": "int"}], "return_type": "List<String>", "signature": "public List<String> sentences(int sentenceCount)", "original_string": "    public List<String> sentences(int sentenceCount) {\n        List<String> sentences = new ArrayList<>(sentenceCount);\n        for (int i = 0; i < sentenceCount; i++) {\n            sentences.add(sentence());\n        }\n        return sentences;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]paragraph(int)", "name": "paragraph", "arg_nums": 1, "params": [{"name": "sentenceCount", "type": "int"}], "return_type": "String", "signature": "public String paragraph(int sentenceCount)", "original_string": "    public String paragraph(int sentenceCount) {\n        return String.join(\" \", sentences(sentenceCount + faker.random().nextInt(3)));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCreates a paragraph with a range (sentenceCount)...(&lt;sentenceCount+3)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]paragraph()", "name": "paragraph", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String paragraph()", "original_string": "    public String paragraph() {\n        return paragraph(3);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[List<String>]paragraphs(int)", "name": "paragraphs", "arg_nums": 1, "params": [{"name": "paragraphCount", "type": "int"}], "return_type": "List<String>", "signature": "public List<String> paragraphs(int paragraphCount)", "original_string": "    public List<String> paragraphs(int paragraphCount) {\n        List<String> paragraphs = new ArrayList<>(paragraphCount);\n        for (int i = 0; i < paragraphCount; i++) {\n            paragraphs.add(paragraph());\n        }\n        return paragraphs;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]fixedString(int)", "name": "fixedString", "arg_nums": 1, "params": [{"name": "numberOfLetters", "type": "int"}], "return_type": "String", "signature": "public String fixedString(int numberOfLetters)", "original_string": "    public String fixedString(int numberOfLetters) {\n        if (numberOfLetters <= 0) {\n            return \"\";\n        }\n\n        StringBuilder builder = new StringBuilder();\n        while (builder.length() < numberOfLetters) {\n            builder.append(sentence());\n        }\n        return builder.substring(0, numberOfLetters);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCreate a string with a fixed size. Can be useful for testing\nvalidator based on length string for example\n\n@param numberOfLetters size of the expected String\n@return a string with a fixed size\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem.[String]maxLengthSentence(int)", "name": "maxLengthSentence", "arg_nums": 1, "params": [{"name": "fixedLength", "type": "int"}], "return_type": "String", "signature": "public String maxLengthSentence(final int fixedLength)", "original_string": "    public String maxLengthSentence(final int fixedLength) {\n        if (fixedLength <= 0) {\n            return \"\";\n        }\n\n        String sentence = sentence(fixedLength);\n        final char space = ' ';\n        while (space == sentence.charAt(fixedLength - 1)) {\n            sentence = sentence(fixedLength);\n        }\n\n        return sentence.substring(0, fixedLength);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Lorem.java", "class_name": "Lorem", "class_uri": "src/main/java/net/datafaker/providers/base/Lorem.java.Lorem", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCreate a Lorem Ipsum sentence with fixed length.\n\n@param fixedLength size of the expected Lorem Ipsum sentence.\n@return a string with a fixed size.\nReturn empty string if input size is 0 or negative.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Business.java.Business.[]Business(BaseProviders)", "name": "Business", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Business(BaseProviders faker)", "original_string": "    protected Business(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Business.java", "class_name": "Business", "class_uri": "src/main/java/net/datafaker/providers/base/Business.java.Business", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Business.java.Business.[String]creditCardNumber()", "name": "creditCardNumber", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String creditCardNumber()", "original_string": "    public String creditCardNumber() {\n        return faker.numerify(resolve(\"business.credit_card_numbers_format\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Business.java", "class_name": "Business", "class_uri": "src/main/java/net/datafaker/providers/base/Business.java.Business", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Business.java.Business.[String]creditCardType()", "name": "creditCardType", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String creditCardType()", "original_string": "    public String creditCardType() {\n        return resolve(\"business.credit_card_types\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Business.java", "class_name": "Business", "class_uri": "src/main/java/net/datafaker/providers/base/Business.java.Business", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Business.java.Business.[String]creditCardExpiry()", "name": "creditCardExpiry", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String creditCardExpiry()", "original_string": "    public String creditCardExpiry() {\n        return faker.date().future(365 * faker.number().numberBetween(1, 20), TimeUnit.DAYS, \"YYYY-MM-dd\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Business.java", "class_name": "Business", "class_uri": "src/main/java/net/datafaker/providers/base/Business.java.Business", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Business.java.Business.[String]securityCode()", "name": "securityCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String securityCode()", "original_string": "    public String securityCode() {\n        return faker.numerify(resolve(\"business.security_code\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Business.java", "class_name": "Business", "class_uri": "src/main/java/net/datafaker/providers/base/Business.java.Business", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/File.java.File.[]File(BaseProviders)", "name": "File", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected File(BaseProviders faker)", "original_string": "    protected File(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/File.java", "class_name": "File", "class_uri": "src/main/java/net/datafaker/providers/base/File.java.File", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/File.java.File.[String]extension()", "name": "extension", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String extension()", "original_string": "    public String extension() {\n        return resolve(\"file.extension\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/File.java", "class_name": "File", "class_uri": "src/main/java/net/datafaker/providers/base/File.java.File", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/File.java.File.[String]mimeType()", "name": "mimeType", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String mimeType()", "original_string": "    public String mimeType() {\n        return resolve(\"file.mime_type\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/File.java", "class_name": "File", "class_uri": "src/main/java/net/datafaker/providers/base/File.java.File", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/File.java.File.[String]fileName()", "name": "fileName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String fileName()", "original_string": "    public String fileName() {\n        return fileName(null, null, null, null);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/File.java", "class_name": "File", "class_uri": "src/main/java/net/datafaker/providers/base/File.java.File", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/File.java.File.[String]fileName(String,String,String,String)", "name": "fileName", "arg_nums": 4, "params": [{"name": "dirOrNull", "type": "String"}, {"name": "nameOrNull", "type": "String"}, {"name": "extensionOrNull", "type": "String"}, {"name": "separatorOrNull", "type": "String"}], "return_type": "String", "signature": "public String fileName(String dirOrNull, String nameOrNull, String extensionOrNull, String separatorOrNull)", "original_string": "    public String fileName(String dirOrNull, String nameOrNull, String extensionOrNull, String separatorOrNull) {\n        final String sep = separatorOrNull == null ? System.getProperty(\"file.separator\") : separatorOrNull;\n        final String dir = dirOrNull == null ? faker.internet().slug() : dirOrNull;\n        final String name = nameOrNull == null ? faker.lorem().word().toLowerCase(faker.getContext().getLocale()) : nameOrNull;\n        final String ext = extensionOrNull == null ? extension() : extensionOrNull;\n        return dir + sep + name + \".\" + ext;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/File.java", "class_name": "File", "class_uri": "src/main/java/net/datafaker/providers/base/File.java.File", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[]Aviation(BaseProviders)", "name": "Aviation", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Aviation(BaseProviders faker)", "original_string": "    protected Aviation(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]aircraft()", "name": "aircraft", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String aircraft()", "original_string": "    public String aircraft() {\n        return resolve(List.of(\"aviation.aircraft.airplane\", \"aviation.aircraft.warplane\",\n            \"aviation.aircraft.army_helicopter\", \"aviation.aircraft.civil_helicopter\",\n            \"aviation.aircraft.general\", \"aviation.aircraft.cargo\")\n            .get(faker.number().numberBetween(0, 6)));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return one of the 6 types of aircraft:\nairplane, warplane, general, cargo, army helicopter, civil helicopter.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]airplane()", "name": "airplane", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String airplane()", "original_string": "    public String airplane() {\n        return resolve(\"aviation.aircraft.airplane\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]warplane()", "name": "warplane", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String warplane()", "original_string": "    public String warplane() {\n        return resolve(\"aviation.aircraft.warplane\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]general()", "name": "general", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String general()", "original_string": "    public String general() {\n        return resolve(\"aviation.aircraft.general\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return general aviation aircraft.\nSee also: <a href=\"https://www.iaopa.eu/what-is-general-aviation\">...ICAO defines general aviation operation by exception: those flight activities not involving commercial air transportation or aerial work.</a>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]cargo()", "name": "cargo", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String cargo()", "original_string": "    public String cargo() {\n        return resolve(\"aviation.aircraft.cargo\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a cargo aircraft which is dedicated to transport freight.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]armyHelicopter()", "name": "armyHelicopter", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String armyHelicopter()", "original_string": "    public String armyHelicopter() {\n        return resolve(\"aviation.aircraft.army_helicopter\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]civilHelicopter()", "name": "civilHelicopter", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String civilHelicopter()", "original_string": "    public String civilHelicopter() {\n        return resolve(\"aviation.aircraft.civil_helicopter\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]airport()", "name": "airport", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String airport()", "original_string": "    public String airport() {\n        return resolve(\"aviation.airport\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns an airport ICAO code.\nSee also: <a href=\"https://en.wikipedia.org/wiki/List_of_airports_by_ICAO_code:_A\">https://en.wikipedia.org/wiki/List_of_airports_by_ICAO_code:_A</a>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]airportName()", "name": "airportName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String airportName()", "original_string": "    public String airportName() {\n        return resolve(\"aviation.airport_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return an airport name. Source: <a href=\"http://www.flugzeuginfo.net/table_airportcodes_country-location_en.php\">http://www.flugzeuginfo.net/table_airportcodes_country-location_en.php</a>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]METAR()", "name": "METAR", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String METAR()", "original_string": "    public String METAR() {\n        return resolve(\"aviation.metar\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nProvides a METAR weather report.\nHave a look at <a href=\"https://en.wikipedia.org/wiki/METAR\">https://en.wikipedia.org/wiki/METAR</a>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]manufacturer()", "name": "manufacturer", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String manufacturer()", "original_string": "    public String manufacturer() {\n        return resolve(\"aviation.manufacturer\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nProvides a name of an aviation-related manufacturer.\nSources: <a href=\"https://www.icao.int/publications/DOC8643/Pages/Manufacturers.aspx\">ICAO publications</a>\nand <a href=\"https://www.aviationfanatic.com/ent_list.php?ent=3&pg=1\">aviationfanatic.com</a>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]specialTypeDesignator()", "name": "specialTypeDesignator", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String specialTypeDesignator()", "original_string": "    public String specialTypeDesignator() {\n        return resolve(\"aviation.aircraft_type_special_designator\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nProvides an aircraft special type designator.\nSource: <a href=\"https://www.icao.int/publications/DOC8643/Pages/SpecialDesignators.aspx\">ICAO publications</a>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]engineType()", "name": "engineType", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String engineType()", "original_string": "    public String engineType() {\n        return resolve(\"aviation.engine_type\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nProvides engine type name.\nSource: <a href=\"https://www.icao.int/publications/DOC8643/Pages/Search.aspx\">ICAO publications</a>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]flight(String)", "name": "flight", "arg_nums": 1, "params": [{"name": "type", "type": "String"}], "return_type": "String", "signature": "public String flight(String type)", "original_string": "    public String flight(String type) {\n        String airline;\n        if (\"ICAO\".equalsIgnoreCase(type)) {\n            airline = resolve(\"aviation.ICAO_airline\");\n        } else {\n            airline = resolve(\"aviation.IATA_airline\");\n        }\n        int number = faker.number().numberBetween(0, 9999);\n        return airline + number;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a flight number (IATA or ICAO format).\n\n@return A random flight number with IATA or ICAO format in a String.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]flight()", "name": "flight", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String flight()", "original_string": "    public String flight() {\n        return flight(\"IATA\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a flight number without specifying flight number format.\n\n@return A random flight number with IATA format in a String.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]flightStatus()", "name": "flightStatus", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String flightStatus()", "original_string": "    public String flightStatus() {\n        return resolve(\"aviation.flight_status\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a flight status.\n\n @return A randomly selected flight status in a String.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]gate()", "name": "gate", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String gate()", "original_string": "    public String gate() {\n        var shouldBePureNumeric = faker.random().nextBoolean();\n\n        String gate;\n        if (shouldBePureNumeric) {\n            gate = String.valueOf(faker.number().numberBetween(1, 256));\n        } else {\n            gate = faker.regexify(\"[A-Z]\") + faker.number().numberBetween(1, 256);\n        }\n\n        return gate;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a gate id.\n\n @return A random airport gate id.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation.[String]airline()", "name": "airline", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String airline()", "original_string": "    public String airline() {\n        return resolve(\"aviation.airline\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aviation.java", "class_name": "Aviation", "class_uri": "src/main/java/net/datafaker/providers/base/Aviation.java.Aviation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns an airline name.\n\n@return A randomly selected airline name in a String.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero.[]Superhero(BaseProviders)", "name": "Superhero", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Superhero(BaseProviders faker)", "original_string": "    protected Superhero(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Superhero.java", "class_name": "Superhero", "class_uri": "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"superhero.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Superhero.java", "class_name": "Superhero", "class_uri": "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero.[String]prefix()", "name": "prefix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String prefix()", "original_string": "    public String prefix() {\n        return resolve(\"superhero.prefix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Superhero.java", "class_name": "Superhero", "class_uri": "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero.[String]suffix()", "name": "suffix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String suffix()", "original_string": "    public String suffix() {\n        return resolve(\"superhero.suffix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Superhero.java", "class_name": "Superhero", "class_uri": "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero.[String]power()", "name": "power", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String power()", "original_string": "    public String power() {\n        return resolve(\"superhero.power\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Superhero.java", "class_name": "Superhero", "class_uri": "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero.[String]descriptor()", "name": "descriptor", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String descriptor()", "original_string": "    public String descriptor() {\n        return resolve(\"superhero.descriptor\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Superhero.java", "class_name": "Superhero", "class_uri": "src/main/java/net/datafaker/providers/base/Superhero.java.Superhero", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Team.java.Team.[]Team(BaseProviders)", "name": "Team", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Team(BaseProviders faker)", "original_string": "    protected Team(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Team.java", "class_name": "Team", "class_uri": "src/main/java/net/datafaker/providers/base/Team.java.Team", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Team.java.Team.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"team.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Team.java", "class_name": "Team", "class_uri": "src/main/java/net/datafaker/providers/base/Team.java.Team", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Team.java.Team.[String]creature()", "name": "creature", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String creature()", "original_string": "    public String creature() {\n        return resolve(\"team.creature\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Team.java", "class_name": "Team", "class_uri": "src/main/java/net/datafaker/providers/base/Team.java.Team", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Team.java.Team.[String]state()", "name": "state", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String state()", "original_string": "    public String state() {\n        return resolve(\"address.state\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Team.java", "class_name": "Team", "class_uri": "src/main/java/net/datafaker/providers/base/Team.java.Team", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Team.java.Team.[String]sport()", "name": "sport", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sport()", "original_string": "    public String sport() {\n        return resolve(\"team.sport\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Team.java", "class_name": "Team", "class_uri": "src/main/java/net/datafaker/providers/base/Team.java.Team", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Science.java.Science.[]Science(BaseProviders)", "name": "Science", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Science(BaseProviders faker)", "original_string": "    protected Science(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Science.java", "class_name": "Science", "class_uri": "src/main/java/net/datafaker/providers/base/Science.java.Science", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]element()", "name": "element", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String element()", "original_string": "    public String element() {\n        return resolve(\"science.element\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Science.java", "class_name": "Science", "class_uri": "src/main/java/net/datafaker/providers/base/Science.java.Science", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]elementSymbol()", "name": "elementSymbol", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String elementSymbol()", "original_string": "    public String elementSymbol() {\n        return resolve(\"science.element_symbol\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Science.java", "class_name": "Science", "class_uri": "src/main/java/net/datafaker/providers/base/Science.java.Science", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]unit()", "name": "unit", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String unit()", "original_string": "    public String unit() {\n        return resolve(\"science.unit\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Science.java", "class_name": "Science", "class_uri": "src/main/java/net/datafaker/providers/base/Science.java.Science", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]scientist()", "name": "scientist", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String scientist()", "original_string": "    public String scientist() {\n        return resolve(\"science.scientist\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Science.java", "class_name": "Science", "class_uri": "src/main/java/net/datafaker/providers/base/Science.java.Science", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]tool()", "name": "tool", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String tool()", "original_string": "    public String tool() {\n        return resolve(\"science.tool\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Science.java", "class_name": "Science", "class_uri": "src/main/java/net/datafaker/providers/base/Science.java.Science", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]quark()", "name": "quark", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quark()", "original_string": "    public String quark() {\n        return resolve(\"science.particles.quarks\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Science.java", "class_name": "Science", "class_uri": "src/main/java/net/datafaker/providers/base/Science.java.Science", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]leptons()", "name": "leptons", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String leptons()", "original_string": "    public String leptons() {\n        return resolve(\"science.particles.leptons\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Science.java", "class_name": "Science", "class_uri": "src/main/java/net/datafaker/providers/base/Science.java.Science", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Science.java.Science.[String]bosons()", "name": "bosons", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String bosons()", "original_string": "    public String bosons() {\n        return resolve(\"science.particles.bosons\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Science.java", "class_name": "Science", "class_uri": "src/main/java/net/datafaker/providers/base/Science.java.Science", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Nation.java.Nation.[]Nation(BaseProviders)", "name": "Nation", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Nation(BaseProviders faker)", "original_string": "    protected Nation(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Nation.java", "class_name": "Nation", "class_uri": "src/main/java/net/datafaker/providers/base/Nation.java.Nation", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Nation.java.Nation.[String]nationality()", "name": "nationality", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String nationality()", "original_string": "    public String nationality() {\n        return resolve(\"nation.nationality\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Nation.java", "class_name": "Nation", "class_uri": "src/main/java/net/datafaker/providers/base/Nation.java.Nation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Nation.java.Nation.[String]language()", "name": "language", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String language()", "original_string": "    public String language() {\n        return resolve(\"nation.language\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Nation.java", "class_name": "Nation", "class_uri": "src/main/java/net/datafaker/providers/base/Nation.java.Nation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Nation.java.Nation.[String]capitalCity()", "name": "capitalCity", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String capitalCity()", "original_string": "    public String capitalCity() {\n        return resolve(\"nation.capital_city\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Nation.java", "class_name": "Nation", "class_uri": "src/main/java/net/datafaker/providers/base/Nation.java.Nation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Nation.java.Nation.[String]flag()", "name": "flag", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String flag()", "original_string": "    public String flag() {\n        @SuppressWarnings(\"unchecked\")\n        List<Integer> flagInts = (List<Integer>) faker.fakeValuesService().fetch(\"nation.flag\", faker.getContext());\n\n        ByteBuffer byteBuffer = MappedByteBuffer.allocate(flagInts.size());\n\n        for (Integer flagInt : flagInts) {\n            byteBuffer.put(flagInt.byteValue());\n        }\n\n        return new String(byteBuffer.array(), UTF8_CHARSET);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Nation.java", "class_name": "Nation", "class_uri": "src/main/java/net/datafaker/providers/base/Nation.java.Nation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Nation.java.Nation.[String]isoLanguage()", "name": "isoLanguage", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String isoLanguage()", "original_string": "    public String isoLanguage() {\n        String[] isoLangs = Locale.getISOLanguages();\n        return isoLangs[faker.random().nextInt(isoLangs.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Nation.java", "class_name": "Nation", "class_uri": "src/main/java/net/datafaker/providers/base/Nation.java.Nation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Nation.java.Nation.[String]isoCountry()", "name": "isoCountry", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String isoCountry()", "original_string": "    public String isoCountry() {\n        String[] isoCountries = Locale.getISOCountries();\n        return isoCountries[faker.random().nextInt(isoCountries.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Nation.java", "class_name": "Nation", "class_uri": "src/main/java/net/datafaker/providers/base/Nation.java.Nation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/GreekPhilosopher.java.GreekPhilosopher.[]GreekPhilosopher(BaseProviders)", "name": "GreekPhilosopher", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected GreekPhilosopher(BaseProviders faker)", "original_string": "    protected GreekPhilosopher(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/GreekPhilosopher.java", "class_name": "GreekPhilosopher", "class_uri": "src/main/java/net/datafaker/providers/base/GreekPhilosopher.java.GreekPhilosopher", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/GreekPhilosopher.java.GreekPhilosopher.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"greek_philosophers.names\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/GreekPhilosopher.java", "class_name": "GreekPhilosopher", "class_uri": "src/main/java/net/datafaker/providers/base/GreekPhilosopher.java.GreekPhilosopher", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random greek philosopher's name.\n\n@return a string of greek philosopher's name.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/GreekPhilosopher.java.GreekPhilosopher.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"greek_philosophers.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/GreekPhilosopher.java", "class_name": "GreekPhilosopher", "class_uri": "src/main/java/net/datafaker/providers/base/GreekPhilosopher.java.GreekPhilosopher", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random greek philosopher's quote.\n\n@return a string of greek philosopher's quote.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Text.java.Text.[Character]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "Character", "signature": "public Character character()", "original_string": "    public Character character() {\n        return text(1, 1, true).charAt(0);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Text.java", "class_name": "Text", "class_uri": "src/main/java/net/datafaker/providers/base/Text.java.Text", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Character", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Text.java.Text.[Character]uppercaseCharacter()", "name": "uppercaseCharacter", "arg_nums": 0, "params": [], "return_type": "Character", "signature": "public Character uppercaseCharacter()", "original_string": "    public Character uppercaseCharacter() {\n        return text(1, 1).toUpperCase(faker.getContext().getLocale()).charAt(0);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Text.java", "class_name": "Text", "class_uri": "src/main/java/net/datafaker/providers/base/Text.java.Text", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Character", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Text.java.Text.[Character]lowercaseCharacter()", "name": "lowercaseCharacter", "arg_nums": 0, "params": [], "return_type": "Character", "signature": "public Character lowercaseCharacter()", "original_string": "    public Character lowercaseCharacter() {\n        return text(1, 1, false).charAt(0);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Text.java", "class_name": "Text", "class_uri": "src/main/java/net/datafaker/providers/base/Text.java.Text", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Character", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text()", "name": "text", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String text()", "original_string": "    public String text() {\n        return text(false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Text.java", "class_name": "Text", "class_uri": "src/main/java/net/datafaker/providers/base/Text.java.Text", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return A lowercase string of 20 to 80 characters long.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text(boolean)", "name": "text", "arg_nums": 1, "params": [{"name": "includeDigit", "type": "boolean"}], "return_type": "String", "signature": "public String text(boolean includeDigit)", "original_string": "    public String text(boolean includeDigit) {\n        return text(20, 80, false, false, includeDigit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Text.java", "class_name": "Text", "class_uri": "src/main/java/net/datafaker/providers/base/Text.java.Text", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@param includeDigit if digits should be included\n@return A lowercase string of 20 to 80 characters long.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text(int)", "name": "text", "arg_nums": 1, "params": [{"name": "length", "type": "int"}], "return_type": "String", "signature": "public String text(int length)", "original_string": "    public String text(int length) {\n        return text(length, length, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Text.java", "class_name": "Text", "class_uri": "src/main/java/net/datafaker/providers/base/Text.java.Text", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@param length The length of the string to return\n@return A lowercase string of exact length\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text(int,int)", "name": "text", "arg_nums": 2, "params": [{"name": "minimumLength", "type": "int"}, {"name": "maximumLength", "type": "int"}], "return_type": "String", "signature": "public String text(int minimumLength, int maximumLength)", "original_string": "    public String text(int minimumLength, int maximumLength) {\n        return text(minimumLength, maximumLength, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Text.java", "class_name": "Text", "class_uri": "src/main/java/net/datafaker/providers/base/Text.java.Text", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@param minimumLength The minimum length (inclusive)\n@param maximumLength The maximum length (inclusive)\n@return A lowercase string between minimum and maximum length (inclusive)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text(int,int,boolean)", "name": "text", "arg_nums": 3, "params": [{"name": "minimumLength", "type": "int"}, {"name": "maximumLength", "type": "int"}, {"name": "includeUppercase", "type": "boolean"}], "return_type": "String", "signature": "public String text(int minimumLength, int maximumLength, boolean includeUppercase)", "original_string": "    public String text(int minimumLength, int maximumLength, boolean includeUppercase) {\n        return text(minimumLength, maximumLength, includeUppercase, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Text.java", "class_name": "Text", "class_uri": "src/main/java/net/datafaker/providers/base/Text.java.Text", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text(int,int,boolean,boolean)", "name": "text", "arg_nums": 4, "params": [{"name": "minimumLength", "type": "int"}, {"name": "maximumLength", "type": "int"}, {"name": "includeUppercase", "type": "boolean"}, {"name": "includeSpecial", "type": "boolean"}], "return_type": "String", "signature": "public String text(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeSpecial)", "original_string": "    public String text(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeSpecial) {\n        return text(minimumLength, maximumLength, includeUppercase, includeSpecial, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Text.java", "class_name": "Text", "class_uri": "src/main/java/net/datafaker/providers/base/Text.java.Text", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text(int,int,boolean,boolean,boolean)", "name": "text", "arg_nums": 5, "params": [{"name": "minimumLength", "type": "int"}, {"name": "maximumLength", "type": "int"}, {"name": "includeUppercase", "type": "boolean"}, {"name": "includeSpecial", "type": "boolean"}, {"name": "includeDigit", "type": "boolean"}], "return_type": "String", "signature": "public String text(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeSpecial, boolean includeDigit)", "original_string": "    public String text(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeSpecial, boolean includeDigit) {\n        final int len = faker.number().numberBetween(minimumLength, maximumLength + 1);\n        TextConfigPojo pojo = new TextConfigPojo(len, includeUppercase, includeSpecial, includeDigit);\n        Text.TextRuleConfig config = configMap.get(pojo);\n        if (config == null) {\n            TextSymbolsBuilder builder =\n                TextSymbolsBuilder.builder()\n                    .with(Text.EN_LOWERCASE);\n            if (includeUppercase) builder = builder.with(Text.EN_UPPERCASE, 1);\n            if (includeSpecial) builder = builder.with(Text.DEFAULT_SPECIAL, 1);\n            if (includeDigit) builder = builder.with(Text.DIGITS, 1);\n\n            config = builder.len(len).build();\n            configMap.putIfAbsent(pojo, config);\n        }\n\n\n        return faker.text().text(config);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Text.java", "class_name": "Text", "class_uri": "src/main/java/net/datafaker/providers/base/Text.java.Text", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Text.java.Text.[]Text(BaseProviders)", "name": "Text", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "public Text(BaseProviders faker)", "original_string": "    public Text(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Text.java", "class_name": "Text", "class_uri": "src/main/java/net/datafaker/providers/base/Text.java.Text", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]text(TextRuleConfig)", "name": "text", "arg_nums": 1, "params": [{"name": "textRuleConfig", "type": "TextRuleConfig"}], "return_type": "String", "signature": "public String text(TextRuleConfig textRuleConfig)", "original_string": "    public String text(TextRuleConfig textRuleConfig) {\n        final int fixedNumberOfCharacters = textRuleConfig.getFixedNumberOfCharacters();\n        final int numberOfRequiredSymbols = textRuleConfig.getNumberOfRequiredSymbols();\n        if (fixedNumberOfCharacters < numberOfRequiredSymbols) {\n            return \"\";\n        }\n        char[] buffer = new char[fixedNumberOfCharacters];\n        int idx = 0;\n        int maxDiffSymbols = 0;\n        for (int i = 0; i < textRuleConfig.textKeys.length; i++) {\n            maxDiffSymbols += textRuleConfig.textKeys[i].length;\n        }\n        // 256 is a length of byte value range\n        if (maxDiffSymbols <= 256) {\n            return textWithNotMoreThan256DiffSymbols(\n                textRuleConfig, faker.random().nextRandomBytes(2 * fixedNumberOfCharacters),\n                fixedNumberOfCharacters, numberOfRequiredSymbols);\n        }\n        int numberOfRequired = 0;\n        int[] required = Arrays.copyOf(textRuleConfig.required, textRuleConfig.required.length);\n        while (idx < buffer.length) {\n            if (numberOfRequiredSymbols > numberOfRequired\n                && numberOfRequiredSymbols - numberOfRequired == buffer.length - idx) {\n                for (int j = 0; j < textRuleConfig.textKeys.length; j++) {\n                    while (required[j] > 0) {\n                        buffer[idx++] = textRuleConfig.textKeys[j][faker.random().nextInt(textRuleConfig.textKeys[j].length)];\n                        numberOfRequired++;\n                        required[j]--;\n                    }\n                    if (idx == buffer.length) break;\n                }\n            } else {\n                int index = faker.random().nextInt(required.length);\n                if (required[index] > 0) {\n                    numberOfRequired++;\n                    required[index]--;\n                }\n                buffer[idx++] = textRuleConfig.textKeys[index][faker.random().nextInt(textRuleConfig.textKeys[index].length)];\n            }\n        }\n        return String.valueOf(buffer);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Text.java", "class_name": "Text", "class_uri": "src/main/java/net/datafaker/providers/base/Text.java.Text", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nAllows to configure custom expected rules. Example\n<pre>\n{@code\n    faker.text().text(Text.TextSymbolsBuilder.builder()\n                .len(5)\n                .with(EN_LOWERCASE, 1)\n                .with(EN_UPPERCASE, 1)\n                .with(DIGITS, 1);\n}\n</pre>\nThis will generate a text with length 5 containing minimum 1 lower case and 1 upper case symbol\nfrom en locale and minimum 1 digit.\nCustom symbol sets are also possible\n<pre>\n{@code\n    final String ruLowerCase = \"\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043a\u043b\u043c\u043d\u043e\u043f\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044a\u044b\u044c\u044d\u044e\u044f\";\n    final String customSpecialSymbols = \"!@#$%^*;'][{}\";\n    final int ruCnt = 3;\n    final int specSmbCnt = 5;\n    final Text.TextRuleConfig config = Text.TextSymbolsBuilder.builder()\n        .len(faker.number().numberBetween(ruCnt + specSmbCnt, Math.max(ruCnt + specSmbCnt, 10)))\n        .with(ruLowerCase, ruCnt)\n        .with(customSpecialSymbols, specSmbCnt).build();\n    final String text = faker.text().text(config);\n}\n</pre>\nThis will generate a string with length between 8 and 10.\nThe string will contain min 3 lower case symbols\nfrom ru locale and minimum 5 symbols from the defined string var\n{@code final String customSpecialSymbols = \"!@#$%^*;'][{}\";}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Text.java.Text.[String]textWithNotMoreThan256DiffSymbols(TextRuleConfig,byte[],int,int)", "name": "textWithNotMoreThan256DiffSymbols", "arg_nums": 4, "params": [{"name": "textRuleConfig", "type": "TextRuleConfig"}, {"name": "bytes", "type": "byte[]"}, {"name": "fixedNumberOfCharacters", "type": "int"}, {"name": "numberOfRequiredSymbols", "type": "int"}], "return_type": "String", "signature": "private String textWithNotMoreThan256DiffSymbols(\n        TextRuleConfig textRuleConfig, byte[] bytes, int fixedNumberOfCharacters, int numberOfRequiredSymbols)", "original_string": "    private String textWithNotMoreThan256DiffSymbols(\n        TextRuleConfig textRuleConfig, byte[] bytes, int fixedNumberOfCharacters, int numberOfRequiredSymbols) {\n        char[] buffer = new char[fixedNumberOfCharacters];\n        int idx = 0;\n        int bytesCounter = 0;\n        int numberOfRequired = 0;\n        int[] required = Arrays.copyOf(textRuleConfig.required, textRuleConfig.required.length);\n        while (idx < buffer.length) {\n            if (numberOfRequiredSymbols > numberOfRequired\n                && numberOfRequiredSymbols - numberOfRequired == buffer.length - idx) {\n                for (int j = 0; j < textRuleConfig.textKeys.length; j++) {\n                    while (required[j] > 0) {\n                        buffer[idx++] = textRuleConfig.textKeys[j][((char) (bytes[bytesCounter++])) % textRuleConfig.textKeys[j].length];\n                        numberOfRequired++;\n                        required[j]--;\n                    }\n                    if (idx == buffer.length) break;\n                }\n            } else {\n                int index = ((char) (bytes[bytesCounter++])) % textRuleConfig.textKeys.length;\n                if (required[index] > 0) {\n                    numberOfRequired++;\n                    required[index]--;\n                }\n                buffer[idx++] = textRuleConfig.textKeys[index][((char) bytes[bytesCounter++]) % textRuleConfig.textKeys[index].length];\n            }\n        }\n        return String.valueOf(buffer);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Text.java", "class_name": "Text", "class_uri": "src/main/java/net/datafaker/providers/base/Text.java.Text", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient.[]Ancient(BaseProviders)", "name": "Ancient", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Ancient(BaseProviders faker)", "original_string": "    protected Ancient(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Ancient.java", "class_name": "Ancient", "class_uri": "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient.[String]god()", "name": "god", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String god()", "original_string": "    public String god() {\n        return resolve(\"ancient.god\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Ancient.java", "class_name": "Ancient", "class_uri": "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient.[String]primordial()", "name": "primordial", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String primordial()", "original_string": "    public String primordial() {\n        return resolve(\"ancient.primordial\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Ancient.java", "class_name": "Ancient", "class_uri": "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient.[String]titan()", "name": "titan", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String titan()", "original_string": "    public String titan() {\n        return resolve(\"ancient.titan\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Ancient.java", "class_name": "Ancient", "class_uri": "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient.[String]hero()", "name": "hero", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String hero()", "original_string": "    public String hero() {\n        return resolve(\"ancient.hero\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Ancient.java", "class_name": "Ancient", "class_uri": "src/main/java/net/datafaker/providers/base/Ancient.java.Ancient", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[]Cosmere(BaseProviders)", "name": "Cosmere", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Cosmere(BaseProviders faker)", "original_string": "    protected Cosmere(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cosmere.java", "class_name": "Cosmere", "class_uri": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]aons()", "name": "aons", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String aons()", "original_string": "    public String aons() {\n        return resolve(\"cosmere.aons\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cosmere.java", "class_name": "Cosmere", "class_uri": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]shardWorlds()", "name": "shardWorlds", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String shardWorlds()", "original_string": "    public String shardWorlds() {\n        return resolve(\"cosmere.shard_worlds\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cosmere.java", "class_name": "Cosmere", "class_uri": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]shards()", "name": "shards", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String shards()", "original_string": "    public String shards() {\n        return resolve(\"cosmere.shards\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cosmere.java", "class_name": "Cosmere", "class_uri": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]surges()", "name": "surges", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String surges()", "original_string": "    public String surges() {\n        return resolve(\"cosmere.surges\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cosmere.java", "class_name": "Cosmere", "class_uri": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]knightsRadiant()", "name": "knightsRadiant", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String knightsRadiant()", "original_string": "    public String knightsRadiant() {\n        return resolve(\"cosmere.knights_radiant\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cosmere.java", "class_name": "Cosmere", "class_uri": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]metals()", "name": "metals", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String metals()", "original_string": "    public String metals() {\n        return resolve(\"cosmere.metals\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cosmere.java", "class_name": "Cosmere", "class_uri": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]allomancers()", "name": "allomancers", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String allomancers()", "original_string": "    public String allomancers() {\n        return resolve(\"cosmere.allomancers\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cosmere.java", "class_name": "Cosmere", "class_uri": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]feruchemists()", "name": "feruchemists", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String feruchemists()", "original_string": "    public String feruchemists() {\n        return resolve(\"cosmere.feruchemists\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cosmere.java", "class_name": "Cosmere", "class_uri": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]heralds()", "name": "heralds", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String heralds()", "original_string": "    public String heralds() {\n        return resolve(\"cosmere.heralds\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cosmere.java", "class_name": "Cosmere", "class_uri": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere.[String]sprens()", "name": "sprens", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sprens()", "original_string": "    public String sprens() {\n        return resolve(\"cosmere.sprens\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cosmere.java", "class_name": "Cosmere", "class_uri": "src/main/java/net/datafaker/providers/base/Cosmere.java.Cosmere", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[]Finance(BaseProviders)", "name": "Finance", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Finance(BaseProviders faker)", "original_string": "    protected Finance(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]nasdaqTicker()", "name": "nasdaqTicker", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String nasdaqTicker()", "original_string": "    @Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String nasdaqTicker() {\n        return resolve(\"finance.ticker.nasdaq\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "@Deprecated(since = \"2.2.0\", forRemoval = true)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Deprecated(since = \"2.2.0\", forRemoval = true)", "public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@deprecated since 2.2.0. For removal in 3.0.0 version. Use {@link Stock#nsdqSymbol} instead.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]nyseTicker()", "name": "nyseTicker", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String nyseTicker()", "original_string": "    @Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String nyseTicker() {\n        return resolve(\"finance.ticker.nyse\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "@Deprecated(since = \"2.2.0\", forRemoval = true)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Deprecated(since = \"2.2.0\", forRemoval = true)", "public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@deprecated since 2.2.0. For removal in 3.0.0 version. Use {@link Stock#nyseSymbol} instead.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]stockMarket()", "name": "stockMarket", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String stockMarket()", "original_string": "    @Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String stockMarket() {\n        return resolve(\"finance.stock_market\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "@Deprecated(since = \"2.2.0\", forRemoval = true)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Deprecated(since = \"2.2.0\", forRemoval = true)", "public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@deprecated since 2.2.0. For removal in 3.0.0 version. Use {@link Stock#exchanges} instead.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[Set<String>]ibanSupportedCountries()", "name": "ibanSupportedCountries", "arg_nums": 0, "params": [], "return_type": "Set<String>", "signature": "@Deterministic\n    public static Set<String> ibanSupportedCountries()", "original_string": "    @Deterministic\n    public static Set<String> ibanSupportedCountries() {\n        return countryCodeToBasicBankAccountNumberPattern.keySet();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "@Deterministic\n    public static", "marker_annotations": ["@Deterministic"], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Set<String>", "classes": []}, "docstring": " Get the set of country codes supported for IBAN generation"}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]creditCard(CreditCardType)", "name": "creditCard", "arg_nums": 1, "params": [{"name": "creditCardType", "type": "CreditCardType"}], "return_type": "String", "signature": "public String creditCard(CreditCardType creditCardType)", "original_string": "    public String creditCard(CreditCardType creditCardType) {\n        final String key = \"finance.credit_card.\" + creditCardType.toString().toLowerCase(Locale.ROOT);\n        String value = resolve(key);\n        final String template = faker.numerify(value);\n\n        int[] digits = template.chars().filter(Character::isDigit).boxed().mapToInt(t -> t - '0').toArray();\n        int luhnSum = 0;\n        int multiplier = 1;\n        for (int i = digits.length - 1; i >= 0; i--) {\n            multiplier = (multiplier == 2 ? 1 : 2);\n            luhnSum += sumOfDigits(digits[i] * multiplier);\n        }\n        int luhnDigit = (10 - (luhnSum % 10)) % 10;\n        StringBuilder res = new StringBuilder(template.length());\n        for (int i = 0; i < template.length(); i++) {\n            final char c = template.charAt(i);\n            switch (c) {\n                case '/', '\\\\' -> {if (!res.isEmpty() && i != template.length() - 1) {res.append(' ');}}\n                case 'L' -> res.append(luhnDigit);\n                default -> res.append(c);\n            }\n        }\n        return res.toString().trim();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[int]sumOfDigits(int)", "name": "sumOfDigits", "arg_nums": 1, "params": [{"name": "value", "type": "int"}], "return_type": "int", "signature": "private int sumOfDigits(int value)", "original_string": "    private int sumOfDigits(int value) {\n        int res = 0;\n        while (value > 0) {\n            res += value % 10;\n            value /= 10;\n        }\n        return res;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]creditCard()", "name": "creditCard", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String creditCard()", "original_string": "    public String creditCard() {\n        CreditCardType type = randomCreditCardType();\n        return creditCard(type);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]bic()", "name": "bic", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String bic()", "original_string": "    public String bic() {\n        return faker.regexify(\"([A-Z]){4}([A-Z]){2}([0-9A-Z]){2}([0-9A-Z]{3})?\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a random Business Identifier Code\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]iban()", "name": "iban", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String iban()", "original_string": "    public String iban() {\n        List<String> countryCodes = new ArrayList<>(countryCodeToBasicBankAccountNumberPattern.keySet());\n        String randomCountryCode = countryCodes.get(faker.random().nextInt(countryCodes.size()));\n        return iban(randomCountryCode);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]iban(String)", "name": "iban", "arg_nums": 1, "params": [{"name": "countryCode", "type": "String"}], "return_type": "String", "signature": "public String iban(String countryCode)", "original_string": "    public String iban(String countryCode) {\n        String basicBankAccountNumber = faker.regexify(countryCodeToBasicBankAccountNumberPattern.get(countryCode));\n        String checkSum = calculateIbanChecksum(countryCode, basicBankAccountNumber);\n        return countryCode + checkSum + basicBankAccountNumber;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]usRoutingNumber()", "name": "usRoutingNumber", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String usRoutingNumber()", "original_string": "    public String usRoutingNumber() {\n        final int random = faker.random().nextInt(12) + 1;\n        final String base =\n            // 01 through 12 are the \"normal\" routing numbers, and correspond to the 12 Federal Reserve Banks.\n            (random < 10 ? \"0\" : \"\") + random\n            + faker.numerify(\"#\".repeat(6));\n        int check =\n           Character.getNumericValue(base.charAt(0)) * 3\n            + Character.getNumericValue(base.charAt(1)) * 7\n            + Character.getNumericValue(base.charAt(2))\n            + Character.getNumericValue(base.charAt(3)) * 3\n            + Character.getNumericValue(base.charAt(4)) * 7\n            + Character.getNumericValue(base.charAt(5))\n            + Character.getNumericValue(base.charAt(6)) * 3\n            + Character.getNumericValue(base.charAt(7)) * 7;\n        check = Math.abs(check % 10 - 10) % 10;\n\n        return base + check;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[CreditCardType]randomCreditCardType()", "name": "randomCreditCardType", "arg_nums": 0, "params": [], "return_type": "CreditCardType", "signature": "private CreditCardType randomCreditCardType()", "original_string": "    private CreditCardType randomCreditCardType() {\n        return CreditCardType.values()[this.faker.random().nextInt(CreditCardType.values().length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "CreditCardType", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]calculateIbanChecksum(String,String)", "name": "calculateIbanChecksum", "arg_nums": 2, "params": [{"name": "countryCode", "type": "String"}, {"name": "basicBankAccountNumber", "type": "String"}], "return_type": "String", "signature": "private static String calculateIbanChecksum(String countryCode, String basicBankAccountNumber)", "original_string": "    private static String calculateIbanChecksum(String countryCode, String basicBankAccountNumber) {\n        String basis = (basicBankAccountNumber + countryCode).toLowerCase(Locale.ROOT) + \"00\";\n\n        final StringBuilder sb = new StringBuilder(basis.length());\n        for (int i = 0; i < basis.length(); i++) {\n            final char c = basis.charAt(i);\n            if (Character.isLetter(c)) {\n                sb.append((c - 'a') + 10);\n            } else {\n                sb.append(c);\n            }\n        }\n\n        int mod97 = new BigInteger(sb.toString()).mod(A_CODE).intValue();\n        return padLeftZeros(String.valueOf(98 - mod97), 2);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[String]padLeftZeros(String,int)", "name": "padLeftZeros", "arg_nums": 2, "params": [{"name": "inputString", "type": "String"}, {"name": "length", "type": "int"}], "return_type": "String", "signature": "private static String padLeftZeros(String inputString, int length)", "original_string": "    private static String padLeftZeros(String inputString, int length) {\n        if (inputString.length() >= length) {\n            return inputString;\n        }\n        StringBuilder sb = new StringBuilder(length);\n        while (sb.length() < length - inputString.length()) {\n            sb.append('0');\n        }\n        sb.append(inputString);\n\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Finance.java.Finance.[Map<String, String>]createCountryCodeToBasicBankAccountNumberPatternMap()", "name": "createCountryCodeToBasicBankAccountNumberPatternMap", "arg_nums": 0, "params": [], "return_type": "Map<String, String>", "signature": "private static Map<String, String> createCountryCodeToBasicBankAccountNumberPatternMap()", "original_string": "    private static Map<String, String> createCountryCodeToBasicBankAccountNumberPatternMap() {\n        // source: https://www.swift.com/standards/data-standards/iban\n        // version 87\n        Map<String, String> ibanFormats = new HashMap<>();\n        ibanFormats.put(\"AD\", \"\\\\d{4}\\\\d{4}[0-9A-Za-z]{12}\");\n        ibanFormats.put(\"AE\", \"\\\\d{3}\\\\d{16}\");\n        ibanFormats.put(\"AL\", \"\\\\d{8}[0-9A-Za-z]{16}\");\n        ibanFormats.put(\"AT\", \"\\\\d{5}\\\\d{11}\");\n        ibanFormats.put(\"AZ\", \"[A-Z]{4}[0-9A-Za-z]{20}\");\n        ibanFormats.put(\"BA\", \"\\\\d{3}\\\\d{3}\\\\d{8}\\\\d{2}\");\n        ibanFormats.put(\"BE\", \"\\\\d{3}\\\\d{7}\\\\d{2}\");\n        ibanFormats.put(\"BG\", \"[A-Z]{4}\\\\d{4}\\\\d{2}[0-9A-Za-z]{8}\");\n        ibanFormats.put(\"BH\", \"[A-Z]{4}[0-9A-Za-z]{14}\");\n        ibanFormats.put(\"BR\", \"\\\\d{8}\\\\d{5}\\\\d{10}[A-Z]{1}[0-9A-Za-z]{1}\");\n        ibanFormats.put(\"BY\", \"[0-9A-Za-z]{4}\\\\d{4}[0-9A-Za-z]{16}\");\n        ibanFormats.put(\"CH\", \"\\\\d{5}[0-9A-Za-z]{12}\");\n        ibanFormats.put(\"CR\", \"0\\\\d{3}\\\\d{14}\");\n        ibanFormats.put(\"CY\", \"\\\\d{3}\\\\d{5}[0-9A-Za-z]{16}\");\n        ibanFormats.put(\"CZ\", \"\\\\d{4}\\\\d{6}\\\\d{10}\");\n        ibanFormats.put(\"DE\", \"\\\\d{8}\\\\d{10}\");\n        ibanFormats.put(\"DK\", \"\\\\d{4}\\\\d{9}\\\\d{1}\");\n        ibanFormats.put(\"DO\", \"[0-9A-Za-z]{4}\\\\d{20}\");\n        ibanFormats.put(\"EE\", \"\\\\d{2}\\\\d{2}\\\\d{11}\\\\d{1}\");\n        ibanFormats.put(\"EG\", \"\\\\d{4}\\\\d{4}\\\\d{17}\");\n        ibanFormats.put(\"ES\", \"\\\\d{4}\\\\d{4}\\\\d{1}\\\\d{1}\\\\d{10}\");\n        ibanFormats.put(\"FI\", \"\\\\d{6}\\\\d{7}\\\\d{1}\");\n        ibanFormats.put(\"FO\", \"\\\\d{4}\\\\d{9}\\\\d{1}\");\n        ibanFormats.put(\"FR\", \"\\\\d{5}\\\\d{5}[0-9A-Za-z]{11}\\\\d{2}\");\n        ibanFormats.put(\"GB\", \"[A-Z]{4}\\\\d{6}\\\\d{8}\");\n        ibanFormats.put(\"GE\", \"[A-Z]{2}\\\\d{16}\");\n        ibanFormats.put(\"GI\", \"[A-Z]{4}[0-9A-Za-z]{15}\");\n        ibanFormats.put(\"GL\", \"\\\\d{4}\\\\d{9}\\\\d{1}\");\n        ibanFormats.put(\"GR\", \"\\\\d{3}\\\\d{4}[0-9A-Za-z]{16}\");\n        ibanFormats.put(\"GT\", \"[0-9A-Za-z]{4}[0-9A-Za-z]{20}\");\n        ibanFormats.put(\"HR\", \"\\\\d{7}\\\\d{10}\");\n        ibanFormats.put(\"HU\", \"\\\\d{3}\\\\d{4}\\\\d{1}\\\\d{15}\\\\d{1}\");\n        ibanFormats.put(\"IE\", \"[A-Z]{4}\\\\d{6}\\\\d{8}\");\n        ibanFormats.put(\"IL\", \"\\\\d{3}\\\\d{3}\\\\d{13}\");\n        ibanFormats.put(\"IQ\", \"[A-Z]{4}\\\\d{3}\\\\d{12}\");\n        ibanFormats.put(\"IS\", \"\\\\d{4}\\\\d{2}\\\\d{6}\\\\d{10}\");\n        ibanFormats.put(\"IT\", \"[A-Z]{1}\\\\d{5}\\\\d{5}[0-9A-Za-z]{12}\");\n        ibanFormats.put(\"JO\", \"[A-Z]{4}\\\\d{4}[0-9A-Za-z]{18}\");\n        ibanFormats.put(\"KW\", \"[A-Z]{4}[0-9A-Za-z]{22}\");\n        ibanFormats.put(\"KZ\", \"\\\\d{3}[0-9A-Za-z]{13}\");\n        ibanFormats.put(\"LB\", \"\\\\d{4}[0-9A-Za-z]{20}\");\n        ibanFormats.put(\"LC\", \"[A-Z]{4}[0-9A-Za-z]{24}\");\n        ibanFormats.put(\"LI\", \"\\\\d{5}[0-9A-Za-z]{12}\");\n        ibanFormats.put(\"LT\", \"\\\\d{5}\\\\d{11}\");\n        ibanFormats.put(\"LU\", \"\\\\d{3}[0-9A-Za-z]{13}\");\n        ibanFormats.put(\"LV\", \"[A-Z]{4}[0-9A-Za-z]{13}\");\n        ibanFormats.put(\"MC\", \"\\\\d{5}\\\\d{5}[0-9A-Za-z]{11}\\\\d{2}\");\n        ibanFormats.put(\"MD\", \"[0-9A-Za-z]{2}[0-9A-Za-z]{18}\");\n        ibanFormats.put(\"ME\", \"\\\\d{3}\\\\d{13}\\\\d{2}\");\n        ibanFormats.put(\"MK\", \"\\\\d{3}[0-9A-Za-z]{10}\\\\d{2}\");\n        ibanFormats.put(\"MR\", \"\\\\d{5}\\\\d{5}\\\\d{11}\\\\d{2}\");\n        ibanFormats.put(\"MT\", \"[A-Z]{4}\\\\d{5}[0-9A-Za-z]{18}\");\n        ibanFormats.put(\"MU\", \"[A-Z]{4}\\\\d{2}\\\\d{2}\\\\d{12}\\\\d{3}[A-Z]{3}\");\n        ibanFormats.put(\"NL\", \"[A-Z]{4}\\\\d{10}\");\n        ibanFormats.put(\"NO\", \"\\\\d{4}\\\\d{6}\\\\d{1}\");\n        ibanFormats.put(\"PK\", \"[A-Z]{4}[0-9A-Za-z]{16}\");\n        ibanFormats.put(\"PL\", \"\\\\d{8}\\\\d{16}\");\n        ibanFormats.put(\"PS\", \"[A-Z]{4}[0-9A-Za-z]{21}\");\n        ibanFormats.put(\"PT\", \"\\\\d{4}\\\\d{4}\\\\d{11}\\\\d{2}\");\n        ibanFormats.put(\"QA\", \"[A-Z]{4}[0-9A-Za-z]{21}\");\n        ibanFormats.put(\"RO\", \"[A-Z]{4}[0-9A-Za-z]{16}\");\n        ibanFormats.put(\"RS\", \"\\\\d{3}\\\\d{13}\\\\d{2}\");\n        ibanFormats.put(\"SA\", \"\\\\d{2}[0-9A-Za-z]{18}\");\n        ibanFormats.put(\"SC\", \"[A-Z]{4}d{2}\\\\d{2}\\\\d{16}[A-Z]{3}\");\n        ibanFormats.put(\"SE\", \"\\\\d{3}\\\\d{16}\\\\d{1}\");\n        ibanFormats.put(\"SI\", \"\\\\d{5}\\\\d{8}\\\\d{2}\");\n        ibanFormats.put(\"SK\", \"\\\\d{4}\\\\d{6}\\\\d{10}\");\n        ibanFormats.put(\"SM\", \"[A-Z]{1}\\\\d{5}\\\\d{5}[0-9A-Za-z]{12}\");\n        ibanFormats.put(\"ST\", \"\\\\d{8}\\\\d{11}\\\\d{2}\");\n        ibanFormats.put(\"SV\", \"[A-Z]{4}\\\\d{20}\");\n        ibanFormats.put(\"TL\", \"\\\\d{3}\\\\d{14}\\\\d{2}\");\n        ibanFormats.put(\"TN\", \"\\\\d{2}\\\\d{3}\\\\d{13}\\\\d{2}\");\n        ibanFormats.put(\"TR\", \"\\\\d{5}\\\\d{1}[0-9A-Za-z]{16}\");\n        ibanFormats.put(\"UA\", \"\\\\d{6}[0-9A-Za-z]{19}\");\n        ibanFormats.put(\"VA\", \"\\\\d{3}\\\\d{15}\");\n        ibanFormats.put(\"VG\", \"[A-Z]{4}\\\\d{16}\");\n        ibanFormats.put(\"XK\", \"\\\\d{4}\\\\d{10}\\\\d{2}\");\n        return ibanFormats;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Finance.java", "class_name": "Finance", "class_uri": "src/main/java/net/datafaker/providers/base/Finance.java.Finance", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Map<String, String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Construction.java.Construction.[]Construction(BaseProviders)", "name": "Construction", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Construction(BaseProviders faker)", "original_string": "    protected Construction(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Construction.java", "class_name": "Construction", "class_uri": "src/main/java/net/datafaker/providers/base/Construction.java.Construction", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Construction.java.Construction.[String]heavyEquipment()", "name": "heavyEquipment", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String heavyEquipment()", "original_string": "    public String heavyEquipment() {\n        return resolve(\"construction.heavy_equipment\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Construction.java", "class_name": "Construction", "class_uri": "src/main/java/net/datafaker/providers/base/Construction.java.Construction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Construction.java.Construction.[String]materials()", "name": "materials", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String materials()", "original_string": "    public String materials() {\n        return resolve(\"construction.materials\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Construction.java", "class_name": "Construction", "class_uri": "src/main/java/net/datafaker/providers/base/Construction.java.Construction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Construction.java.Construction.[String]subcontractCategories()", "name": "subcontractCategories", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String subcontractCategories()", "original_string": "    public String subcontractCategories() {\n        return resolve(\"construction.subcontract_categories\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Construction.java", "class_name": "Construction", "class_uri": "src/main/java/net/datafaker/providers/base/Construction.java.Construction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Construction.java.Construction.[String]roles()", "name": "roles", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String roles()", "original_string": "    public String roles() {\n        return resolve(\"construction.roles\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Construction.java", "class_name": "Construction", "class_uri": "src/main/java/net/datafaker/providers/base/Construction.java.Construction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Construction.java.Construction.[String]trades()", "name": "trades", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String trades()", "original_string": "    public String trades() {\n        return resolve(\"construction.trades\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Construction.java", "class_name": "Construction", "class_uri": "src/main/java/net/datafaker/providers/base/Construction.java.Construction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Construction.java.Construction.[String]standardCostCodes()", "name": "standardCostCodes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String standardCostCodes()", "original_string": "    public String standardCostCodes() {\n        return resolve(\"construction.standard_cost_codes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Construction.java", "class_name": "Construction", "class_uri": "src/main/java/net/datafaker/providers/base/Construction.java.Construction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Currency.java.Currency.[]Currency(BaseProviders)", "name": "Currency", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "public Currency(BaseProviders faker)", "original_string": "    public Currency(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Currency.java", "class_name": "Currency", "class_uri": "src/main/java/net/datafaker/providers/base/Currency.java.Currency", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Currency.java.Currency.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String name()", "original_string": "    @Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String name() {\n        return resolve(\"currency.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Currency.java", "class_name": "Currency", "class_uri": "src/main/java/net/datafaker/providers/base/Currency.java.Currency", "attributes": {"modifiers": "@Deprecated(since = \"2.2.0\", forRemoval = true)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Deprecated(since = \"2.2.0\", forRemoval = true)", "public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@deprecated since 2.2.0. For removal in 3.0.0 version. Use {@link Money#currency} instead.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Currency.java.Currency.[String]code()", "name": "code", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String code()", "original_string": "    @Deprecated(since = \"2.2.0\", forRemoval = true)\n    public String code() {\n        return resolve(\"currency.code\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Currency.java", "class_name": "Currency", "class_uri": "src/main/java/net/datafaker/providers/base/Currency.java.Currency", "attributes": {"modifiers": "@Deprecated(since = \"2.2.0\", forRemoval = true)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Deprecated(since = \"2.2.0\", forRemoval = true)", "public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@deprecated since 2.2.0. For removal in 3.0.0 version. Use {@link Money#currencyCode()} instead.\n@return an alphabetic currency code (ex. USD)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[]Aws(BaseProviders)", "name": "Aws", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Aws(BaseProviders faker)", "original_string": "    protected Aws(BaseProviders faker) {\n        super(faker);\n        configForRoute53ZoneId = Text.TextSymbolsBuilder.builder()\n                                 .with(EN_UPPERCASE).len(21).build();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aws.java", "class_name": "Aws", "class_uri": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]region()", "name": "region", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String region()", "original_string": "    public String region() {\n        return resolve(\"aws.regions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aws.java", "class_name": "Aws", "class_uri": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]service()", "name": "service", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String service()", "original_string": "    public String service() {\n        return resolve(\"aws.services\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aws.java", "class_name": "Aws", "class_uri": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]accountId()", "name": "accountId", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String accountId()", "original_string": "    public String accountId() {\n        return faker.numerify(\"0#########\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aws.java", "class_name": "Aws", "class_uri": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]acmARN()", "name": "acmARN", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String acmARN()", "original_string": "    public String acmARN() {\n        return \"arn:aws:acm:\" +\n            region() +\n            \":\" +\n            accountId() +\n            \":certificate/\" +\n            faker.internet().uuid();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aws.java", "class_name": "Aws", "class_uri": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]albARN()", "name": "albARN", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String albARN()", "original_string": "    public String albARN() {\n        return \"arn:aws:elasticloadbalancing:\" +\n            region() +\n            \":\" +\n            accountId() +\n            \":loadbalancer/app/\" +\n            appName() +\n            \"/\" +\n            randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aws.java", "class_name": "Aws", "class_uri": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]albTargetGroupARN()", "name": "albTargetGroupARN", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String albTargetGroupARN()", "original_string": "    public String albTargetGroupARN() {\n        return \"arn:aws:elasticloadbalancing:\" +\n            region() +\n            \":\" +\n            accountId() +\n            \":targetgroup/\" +\n            appName() +\n            \"/\" +\n            randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aws.java", "class_name": "Aws", "class_uri": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]route53ZoneId()", "name": "route53ZoneId", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String route53ZoneId()", "original_string": "    public String route53ZoneId() {\n        return faker.text().text(configForRoute53ZoneId);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aws.java", "class_name": "Aws", "class_uri": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]securityGroupId()", "name": "securityGroupId", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String securityGroupId()", "original_string": "    public String securityGroupId() {\n        return \"sg-\" + randHex(17);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aws.java", "class_name": "Aws", "class_uri": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]subnetId()", "name": "subnetId", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String subnetId()", "original_string": "    public String subnetId() {\n        return \"subnet-\" + randHex(17);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aws.java", "class_name": "Aws", "class_uri": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]vpcId()", "name": "vpcId", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String vpcId()", "original_string": "    public String vpcId() {\n        return \"vpc-\" + randHex(17);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aws.java", "class_name": "Aws", "class_uri": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]appName()", "name": "appName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "private String appName()", "original_string": "    private String appName() {\n        return faker.app().name().toLowerCase().replaceAll(\"\\\\W+\", \"\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aws.java", "class_name": "Aws", "class_uri": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]randHex(int)", "name": "randHex", "arg_nums": 1, "params": [{"name": "length", "type": "int"}], "return_type": "String", "signature": "private String randHex(int length)", "original_string": "    private String randHex(int length) {\n        return faker.random().hex(length, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aws.java", "class_name": "Aws", "class_uri": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Aws.java.Aws.[String]randHex()", "name": "randHex", "arg_nums": 0, "params": [], "return_type": "String", "signature": "private String randHex()", "original_string": "    private String randHex() {\n        return randHex(16);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Aws.java", "class_name": "Aws", "class_uri": "src/main/java/net/datafaker/providers/base/Aws.java.Aws", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[]Options(BaseProviders)", "name": "Options", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Options(BaseProviders faker)", "original_string": "    protected Options(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[E]option()", "name": "option", "arg_nums": 0, "params": [], "return_type": "E", "signature": "@SafeVarargs\n    public final <E> E option(E... options)", "original_string": "    @SafeVarargs\n    public final <E> E option(E... options) {\n        return options[faker.random().nextInt(options.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "@SafeVarargs\n    public final", "marker_annotations": ["@SafeVarargs"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "E", "classes": []}, "docstring": "\nReturns a random element from an varargs.\n\n@param options The varargs to take a random element from.\n@param <E>     The type of the elements in the varargs.\n@return A randomly selected element from the varargs.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[char]option(char[])", "name": "option", "arg_nums": 1, "params": [{"name": "options", "type": "char[]"}], "return_type": "char", "signature": "public final char option(char[] options)", "original_string": "    public final char option(char[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "char", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[int]option(int[])", "name": "option", "arg_nums": 1, "params": [{"name": "options", "type": "int[]"}], "return_type": "int", "signature": "public final int option(int[] options)", "original_string": "    public final int option(int[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[long]option(long[])", "name": "option", "arg_nums": 1, "params": [{"name": "options", "type": "long[]"}], "return_type": "long", "signature": "public final long option(long[] options)", "original_string": "    public final long option(long[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[float]option(float[])", "name": "option", "arg_nums": 1, "params": [{"name": "options", "type": "float[]"}], "return_type": "float", "signature": "public final float option(float[] options)", "original_string": "    public final float option(float[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[double]option(double[])", "name": "option", "arg_nums": 1, "params": [{"name": "options", "type": "double[]"}], "return_type": "double", "signature": "public final double option(double[] options)", "original_string": "    public final double option(double[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[short]option(short[])", "name": "option", "arg_nums": 1, "params": [{"name": "options", "type": "short[]"}], "return_type": "short", "signature": "public final short option(short[] options)", "original_string": "    public final short option(short[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "short", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[boolean]option(boolean[])", "name": "option", "arg_nums": 1, "params": [{"name": "options", "type": "boolean[]"}], "return_type": "boolean", "signature": "public final boolean option(boolean[] options)", "original_string": "    public final boolean option(boolean[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[byte]option(byte[])", "name": "option", "arg_nums": 1, "params": [{"name": "options", "type": "byte[]"}], "return_type": "byte", "signature": "public final byte option(byte[] options)", "original_string": "    public final byte option(byte[] options) {\n        return options[faker.random().nextInt(options.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "byte", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[Set<E>]subset(int)", "name": "subset", "arg_nums": 1, "params": [{"name": "size", "type": "int"}], "return_type": "Set<E>", "signature": "public final <E> Set<E> subset(int size, E... options)", "original_string": "    public final <E> Set<E> subset(int size, E... options) {\n        if (size < 0) {\n            throw new IllegalArgumentException(\"size should be not negative: \" + size);\n        }\n        if (size == 0) {\n            return Collections.emptySet();\n        }\n        List<E> opts = Stream.of(options).distinct().collect(Collectors.toList());\n        if (size >= opts.size()) {\n            return new HashSet<>(opts);\n        }\n        int i = 0;\n        Set<E> set = new HashSet<>();\n        while (i < size) {\n            int randomIndex = faker.random().nextInt(opts.size());\n            set.add(opts.get(randomIndex));\n            opts.remove(randomIndex);\n            i++;\n        }\n\n        return set;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "Set<E>", "classes": []}, "docstring": "\nReturns a random unique subset of elements from an varargs.\n\n@param size    The size of subset to return.\n@param options The varargs to take a random element from.\n@param <E>     The type of the elements in the varargs.\n@return A randomly selected unique subset from the varargs.\nIf size is negative then {@code IllegalArgumentException} will be thrown.\nIf size is zero then an empty subset will be returned.\nIf size is larger than a unique set from options then all options will be returned.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[String]option()", "name": "option", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String option(String... options)", "original_string": "    public String option(String... options) {\n        return options[faker.random().nextInt(options.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a random String element from an varargs.\n\n@param options The varargs to take a random element from.\n@return A randomly selected element from the varargs.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[Set<String>]subset(int)", "name": "subset", "arg_nums": 1, "params": [{"name": "size", "type": "int"}], "return_type": "Set<String>", "signature": "public final Set<String> subset(int size, String... options)", "original_string": "    public final Set<String> subset(int size, String... options) {\n        if (size < 0) {\n            throw new IllegalArgumentException(\"size should be not negative: \" + size);\n        }\n        if (size == 0) {\n            return Collections.emptySet();\n        }\n        List<String> opts = Stream.of(options).distinct().collect(Collectors.toList());\n        if (size >= opts.size()) {\n            return new HashSet<>(opts);\n        }\n        int i = 0;\n        Set<String> set = new HashSet<>();\n        while (i < size) {\n            int randomIndex = faker.random().nextInt(opts.size());\n            set.add(opts.get(randomIndex));\n            opts.remove(randomIndex);\n            i++;\n        }\n\n        return set;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "Set<String>", "classes": []}, "docstring": "\nReturns a random unique subset of elements from an varargs.\n\n@param size    The size of subset to return.\n@param options The varargs to take a random element from.\n@return A randomly selected unique subset from the varargs.\nIf size is negative then {@code IllegalArgumentException} will be thrown.\nIf size is zero then an empty subset will be returned.\nIf size is larger than a unique set from options then all options will be returned.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[E]option(Class<E>)", "name": "option", "arg_nums": 1, "params": [{"name": "enumeration", "type": "Class<E>"}], "return_type": "E", "signature": "public <E extends Enum<E>> E option(Class<E> enumeration)", "original_string": "    public <E extends Enum<E>> E option(Class<E> enumeration) {\n        E[] enumConstants = enumeration.getEnumConstants();\n        return enumConstants[faker.random().nextInt(enumConstants.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "E", "classes": []}, "docstring": "\nReturns a random element from Enum.\n\n@param enumeration The Enum to take a random element from.\n@return A randomly selected element from the enum.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[E]nextElement(E[])", "name": "nextElement", "arg_nums": 1, "params": [{"name": "array", "type": "E[]"}], "return_type": "E", "signature": "public <E> E nextElement(E[] array)", "original_string": "    public <E> E nextElement(E[] array) {\n        return array[faker.random().nextInt(array.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "E", "classes": []}, "docstring": "\nReturns a random element from an array.\n\n@param array The array to take a random element from.\n@param <E>   The type of the elements in the array.\n@return A randomly selected element from the array.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Options.java.Options.[E]nextElement(List<E>)", "name": "nextElement", "arg_nums": 1, "params": [{"name": "list", "type": "List<E>"}], "return_type": "E", "signature": "public <E> E nextElement(List<E> list)", "original_string": "    public <E> E nextElement(List<E> list) {\n        return list.get(faker.random().nextInt(list.size()));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Options.java", "class_name": "Options", "class_uri": "src/main/java/net/datafaker/providers/base/Options.java.Options", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "E", "classes": []}, "docstring": "\nReturns a random element from a list.\n\n@param list The list to take a random element from.\n@param <E>  The type of the elements in the list.\n@return A randomly selected element from the list.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics.[]DcComics(BaseProviders)", "name": "DcComics", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "public DcComics(BaseProviders faker)", "original_string": "    public DcComics(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DcComics.java", "class_name": "DcComics", "class_uri": "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics.[String]hero()", "name": "hero", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String hero()", "original_string": "    public String hero() {\n        return resolve(\"dc_comics.hero\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DcComics.java", "class_name": "DcComics", "class_uri": "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics.[String]heroine()", "name": "heroine", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String heroine()", "original_string": "    public String heroine() {\n        return resolve(\"dc_comics.heroine\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DcComics.java", "class_name": "DcComics", "class_uri": "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics.[String]villain()", "name": "villain", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String villain()", "original_string": "    public String villain() {\n        return resolve(\"dc_comics.villain\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DcComics.java", "class_name": "DcComics", "class_uri": "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"dc_comics.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DcComics.java", "class_name": "DcComics", "class_uri": "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics.[String]title()", "name": "title", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String title()", "original_string": "    public String title() {\n        return resolve(\"dc_comics.title\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DcComics.java", "class_name": "DcComics", "class_uri": "src/main/java/net/datafaker/providers/base/DcComics.java.DcComics", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Horse.java.Horse.[]Horse(BaseProviders)", "name": "Horse", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Horse(BaseProviders faker)", "original_string": "    protected Horse(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Horse.java", "class_name": "Horse", "class_uri": "src/main/java/net/datafaker/providers/base/Horse.java.Horse", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Horse.java.Horse.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"creature.horse.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Horse.java", "class_name": "Horse", "class_uri": "src/main/java/net/datafaker/providers/base/Horse.java.Horse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Horse.java.Horse.[String]breed()", "name": "breed", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String breed()", "original_string": "    public String breed() {\n        return resolve(\"creature.horse.breed\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Horse.java", "class_name": "Horse", "class_uri": "src/main/java/net/datafaker/providers/base/Horse.java.Horse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Color.java.Color.[]Color(BaseProviders)", "name": "Color", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Color(BaseProviders faker)", "original_string": "    protected Color(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Color.java", "class_name": "Color", "class_uri": "src/main/java/net/datafaker/providers/base/Color.java.Color", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Color.java.Color.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"color.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Color.java", "class_name": "Color", "class_uri": "src/main/java/net/datafaker/providers/base/Color.java.Color", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Color.java.Color.[String]hex()", "name": "hex", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String hex()", "original_string": "    public String hex() {\n        return hex(true);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Color.java", "class_name": "Color", "class_uri": "src/main/java/net/datafaker/providers/base/Color.java.Color", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Color.java.Color.[String]hex(boolean)", "name": "hex", "arg_nums": 1, "params": [{"name": "includeHashSign", "type": "boolean"}], "return_type": "String", "signature": "public String hex(boolean includeHashSign)", "original_string": "    public String hex(boolean includeHashSign) {\n        String hexString = faker.random().hex(6);\n        if (includeHashSign)\n            return \"#\" + hexString;\n        return hexString;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Color.java", "class_name": "Color", "class_uri": "src/main/java/net/datafaker/providers/base/Color.java.Color", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[]TimeAndDate(BaseProviders)", "name": "TimeAndDate", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected TimeAndDate(BaseProviders faker)", "original_string": "    protected TimeAndDate(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]future()", "name": "future", "arg_nums": 0, "params": [], "return_type": "Instant", "signature": "public Instant future()", "original_string": "    public Instant future() {\n        long FIFTY_YEARS = TimeUnit.DAYS.toMillis(18262);\n        return future(faker.number().numberBetween(1, FIFTY_YEARS), MILLISECONDS);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Instant", "classes": []}, "docstring": "\nGenerates a future date from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]future(long,TimeUnit)", "name": "future", "arg_nums": 2, "params": [{"name": "atMost", "type": "long"}, {"name": "unit", "type": "TimeUnit"}], "return_type": "Instant", "signature": "public Instant future(long atMost, TimeUnit unit)", "original_string": "    public Instant future(long atMost, TimeUnit unit) {\n        Instant aBitLaterThanNow = Instant.now().plusMillis(1);\n        return future(atMost, unit, aBitLaterThanNow);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Instant", "classes": []}, "docstring": "\nGenerates a future date from now.\n\n@param atMost at most this amount of time ahead from now exclusive.\n@param unit   the time unit.\n@return a future date from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]future(long,TimeUnit,String)", "name": "future", "arg_nums": 3, "params": [{"name": "atMost", "type": "long"}, {"name": "unit", "type": "TimeUnit"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String future(long atMost, TimeUnit unit, String pattern)", "original_string": "    public String future(long atMost, TimeUnit unit, String pattern) {\n        return formatInstant(future(atMost, unit), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates and converts to string representation a future date from now.\n\n@param atMost  at most this amount of time ahead from now exclusive.\n@param unit    the time unit.\n@param pattern date time pattern to convert to string.\n@return a string representation of a future date from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]future(long,long,TimeUnit)", "name": "future", "arg_nums": 3, "params": [{"name": "atMost", "type": "long"}, {"name": "minimum", "type": "long"}, {"name": "unit", "type": "TimeUnit"}], "return_type": "Instant", "signature": "public Instant future(long atMost, long minimum, TimeUnit unit)", "original_string": "    public Instant future(long atMost, long minimum, TimeUnit unit) {\n        Instant minimumDate = Instant.now().plus(minimum, unit.toChronoUnit());\n        return future(atMost - minimum, unit, minimumDate);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Instant", "classes": []}, "docstring": "\nGenerates a future date from now, with a minimum time.\n\n@param atMost  at most this amount of time ahead from now exclusive.\n@param minimum the minimum amount of time in the future from now.\n@param unit    the time unit.\n@return a future date from now, with a minimum time.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]future(long,long,TimeUnit,String)", "name": "future", "arg_nums": 4, "params": [{"name": "atMost", "type": "long"}, {"name": "minimum", "type": "long"}, {"name": "unit", "type": "TimeUnit"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String future(long atMost, long minimum, TimeUnit unit, String pattern)", "original_string": "    public String future(long atMost, long minimum, TimeUnit unit, String pattern) {\n        return formatInstant(future(atMost, minimum, unit), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates and converts to string representation\nof a future date from now, with a minimum time.\n\n@param atMost  at most this amount of time ahead from now exclusive.\n@param minimum the minimum amount of time in the future from now.\n@param unit    the time unit.\n@param pattern date time pattern to convert to string.\n@return a string representation of a future date from now, with a minimum time.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]future(long,TimeUnit,Instant)", "name": "future", "arg_nums": 3, "params": [{"name": "atMost", "type": "long"}, {"name": "unit", "type": "TimeUnit"}, {"name": "referenceDate", "type": "Instant"}], "return_type": "Instant", "signature": "public Instant future(long atMost, TimeUnit unit, Instant referenceDate)", "original_string": "    public Instant future(long atMost, TimeUnit unit, Instant referenceDate) {\n        long upperBoundMillis = unit.toMillis(atMost);\n        long futureMillis = referenceDate.toEpochMilli() + 1 + faker.random().nextLong(upperBoundMillis - 1);\n        return Instant.ofEpochMilli(futureMillis);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Instant", "classes": []}, "docstring": "\nGenerates a future date relative to the {@code referenceDate}.\n\n@param atMost        at most this amount of time ahead to the {@code referenceDate} exclusive.\n@param unit          the time unit.\n@param referenceDate the future date relative to this date.\n@return a future date relative to {@code referenceDate}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]future(long,TimeUnit,Instant,String)", "name": "future", "arg_nums": 4, "params": [{"name": "atMost", "type": "long"}, {"name": "unit", "type": "TimeUnit"}, {"name": "referenceDate", "type": "Instant"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String future(long atMost, TimeUnit unit, Instant referenceDate, String pattern)", "original_string": "    public String future(long atMost, TimeUnit unit, Instant referenceDate, String pattern) {\n        return formatInstant(future(atMost, unit, referenceDate), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates and converts to string representation\na future date relative to the {@code referenceDate}.\n\n@param atMost        at most this amount of time ahead to the {@code referenceDate} exclusive.\n@param unit          the time unit.\n@param referenceDate the future date relative to this date.\n@param pattern       date time pattern to convert to string.\n@return a string representation of a future date relative to {@code referenceDate}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]past()", "name": "past", "arg_nums": 0, "params": [], "return_type": "Instant", "signature": "public Instant past()", "original_string": "     public Instant past() {\n         long FIFTY_YEARS = TimeUnit.DAYS.toMillis(18262);\n         return past(faker.number().numberBetween(1, FIFTY_YEARS), MILLISECONDS);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Instant", "classes": []}, "docstring": "\nGenerates a past date from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]past(long,TimeUnit)", "name": "past", "arg_nums": 2, "params": [{"name": "atMost", "type": "long"}, {"name": "unit", "type": "TimeUnit"}], "return_type": "Instant", "signature": "public Instant past(long atMost, TimeUnit unit)", "original_string": "    public Instant past(long atMost, TimeUnit unit) {\n        Instant aBitEarlierThanNow = Instant.now().minusMillis(1);\n        return past(atMost, unit, aBitEarlierThanNow);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Instant", "classes": []}, "docstring": "\nGenerates a past date from now.\n\n@param atMost at most this amount of time earlier from now exclusive.\n@param unit   the time unit.\n@return a past date from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]past(long,TimeUnit,String)", "name": "past", "arg_nums": 3, "params": [{"name": "atMost", "type": "long"}, {"name": "unit", "type": "TimeUnit"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String past(long atMost, TimeUnit unit, String pattern)", "original_string": "    public String past(long atMost, TimeUnit unit, String pattern) {\n        return formatInstant(past(atMost, unit), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a string representation of a past date from now.\n\n@param atMost  at most this amount of time earlier from now exclusive.\n@param unit    the time unit.\n@param pattern date time pattern to convert to string.\n@return a string representation of a past date from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]past(long,long,TimeUnit)", "name": "past", "arg_nums": 3, "params": [{"name": "atMost", "type": "long"}, {"name": "minimum", "type": "long"}, {"name": "unit", "type": "TimeUnit"}], "return_type": "Instant", "signature": "public Instant past(long atMost, long minimum, TimeUnit unit)", "original_string": "    public Instant past(long atMost, long minimum, TimeUnit unit) {\n        Instant minimumDate = Instant.now().minusMillis(unit.toMillis(minimum));\n        return past(atMost - minimum, unit, minimumDate);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Instant", "classes": []}, "docstring": "\nGenerates a past date from now, with a minimum time.\n\n@param atMost  at most this amount of time earlier from now exclusive.\n@param minimum the minimum amount of time in the past from now.\n@param unit    the time unit.\n@return a past date from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]past(long,long,TimeUnit,String)", "name": "past", "arg_nums": 4, "params": [{"name": "atMost", "type": "long"}, {"name": "minimum", "type": "long"}, {"name": "unit", "type": "TimeUnit"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String past(long atMost, long minimum, TimeUnit unit, String pattern)", "original_string": "    public String past(long atMost, long minimum, TimeUnit unit, String pattern) {\n        return formatInstant(past(atMost, minimum, unit), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates and converts to string representation a past date from now, with a minimum time.\n\n@param atMost  at most this amount of time earlier from now exclusive.\n@param minimum the minimum amount of time in the past from now.\n@param unit    the time unit.\n@param pattern date time pattern to convert to string.\n@return a string representation of a past date from now, with a minimum time.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]past(long,TimeUnit,Instant)", "name": "past", "arg_nums": 3, "params": [{"name": "atMost", "type": "long"}, {"name": "unit", "type": "TimeUnit"}, {"name": "referenceDate", "type": "Instant"}], "return_type": "Instant", "signature": "public Instant past(long atMost, TimeUnit unit, Instant referenceDate)", "original_string": "    public Instant past(long atMost, TimeUnit unit, Instant referenceDate) {\n        long upperBoundMillis = unit.toMillis(atMost);\n        long pastMillis = referenceDate.toEpochMilli() - 1 - faker.random().nextLong(upperBoundMillis - 1);\n        return Instant.ofEpochMilli(pastMillis);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Instant", "classes": []}, "docstring": "\nGenerates a past date relative to the {@code referenceDate}.\n\n@param atMost        at most this amount of time past to the {@code referenceDate} exclusive.\n@param unit          the time unit.\n@param referenceDate the past date relative to this date.\n@return a past date relative to {@code referenceDate}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]past(long,TimeUnit,Instant,String)", "name": "past", "arg_nums": 4, "params": [{"name": "atMost", "type": "long"}, {"name": "unit", "type": "TimeUnit"}, {"name": "referenceDate", "type": "Instant"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String past(long atMost, TimeUnit unit, Instant referenceDate, String pattern)", "original_string": "    public String past(long atMost, TimeUnit unit, Instant referenceDate, String pattern) {\n        return formatInstant(past(atMost, unit, referenceDate), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a string representation of a past date relative to the {@code referenceDate}.\n\n@param atMost        at most this amount of time past to the {@code referenceDate} exclusive.\n@param unit          the time unit.\n@param referenceDate the past date relative to this date.\n@param pattern       date time pattern to convert to string.\n@return a string representation of a past date relative to {@code referenceDate}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Instant]between(Instant,Instant)", "name": "between", "arg_nums": 2, "params": [{"name": "from", "type": "Instant"}, {"name": "to", "type": "Instant"}], "return_type": "Instant", "signature": "public Instant between(Instant from, Instant to)", "original_string": "    public Instant between(Instant from, Instant to) throws IllegalArgumentException {\n        if (to.isBefore(from)) {\n            throw new IllegalArgumentException(\"Invalid date range: the upper bound date (%s) is before the lower bound (%s)\".formatted(to, from));\n        }\n\n        if (from.equals(to)) {\n            return from;\n        }\n\n        long offsetMillis = faker.random().nextLong(to.toEpochMilli() - from.toEpochMilli());\n        return from.plusMillis(offsetMillis);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Instant", "classes": []}, "docstring": "\nGenerates a random date between two dates.\n\n@param from the lower bound inclusive\n@param to   the upper bound exclusive\n@return a random date between {@code from} and {@code to}.\n@throws IllegalArgumentException if the {@code to} date represents an earlier date than {@code from} date.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]between(Instant,Instant,String)", "name": "between", "arg_nums": 3, "params": [{"name": "from", "type": "Instant"}, {"name": "to", "type": "Instant"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String between(Instant from, Instant to, String pattern)", "original_string": "    public String between(Instant from, Instant to, String pattern) throws IllegalArgumentException {\n        return formatInstant(between(from, to), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a string representation of a random date between two dates.\n\n@param from    the lower bound inclusive\n@param to      the upper bound exclusive\n@param pattern date time pattern to convert to string.\n@return a string representation of a random date between {@code from} and {@code to}.\n@throws IllegalArgumentException if the {@code to} date represents an earlier date than {@code from} date.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[LocalDate]birthday()", "name": "birthday", "arg_nums": 0, "params": [], "return_type": "LocalDate", "signature": "public LocalDate birthday()", "original_string": "    public LocalDate birthday() {\n        return birthday(DEFAULT_MIN_AGE, DEFAULT_MAX_AGE);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "LocalDate", "classes": []}, "docstring": "\nGenerates a random birthday between 65 and 18 years ago from now.\n\n@return a random birthday between 65 and 18 years ago from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]birthday(String)", "name": "birthday", "arg_nums": 1, "params": [{"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String birthday(String pattern)", "original_string": "    public String birthday(String pattern) {\n        return formatInstant(birthday(DEFAULT_MIN_AGE, DEFAULT_MAX_AGE), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a string representation of a random birthday between 65 and 18 years ago from now.\n\n@param pattern date time pattern to convert to string.\n@return a string representation of a random birthday between 65 and 18 years ago from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[LocalDate]birthday(int,int)", "name": "birthday", "arg_nums": 2, "params": [{"name": "minAge", "type": "int"}, {"name": "maxAge", "type": "int"}], "return_type": "LocalDate", "signature": "public LocalDate birthday(int minAge, int maxAge)", "original_string": "    public LocalDate birthday(int minAge, int maxAge) {\n        LocalDate localDate = LocalDate.now();\n        LocalDate from = localDate.minusYears(maxAge);\n        if (minAge == maxAge) {\n            return from;\n        } else {\n            long start = from.toEpochDay();\n            long stop = localDate.minusYears(minAge).toEpochDay();\n\n            return LocalDate.ofEpochDay(faker.random().nextLong(start, stop));\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "LocalDate", "classes": []}, "docstring": "\nGenerates a random birthday between two ages from now.\n\n@param minAge the minimal age\n@param maxAge the maximal age\n@return a random birthday between {@code minAge} and {@code maxAge} years ago from now.\nNegative {@code minAge} and {@code maxAge} are supported.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]birthday(int,int,String)", "name": "birthday", "arg_nums": 3, "params": [{"name": "minAge", "type": "int"}, {"name": "maxAge", "type": "int"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String birthday(int minAge, int maxAge, String pattern)", "original_string": "    public String birthday(int minAge, int maxAge, String pattern) {\n        return formatInstant(birthday(minAge, maxAge), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates and converts to string representation a random birthday between two ages from now.\n\n@param minAge  the minimal age\n@param maxAge  the maximal age\n@param pattern date time pattern to convert to string.\n@return a string representation of a random birthday between {@code minAge} and {@code maxAge} years ago from now.\n@throws IllegalArgumentException if the {@code maxAge} is lower than {@code minAge}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Duration]duration(long,ChronoUnit)", "name": "duration", "arg_nums": 2, "params": [{"name": "max", "type": "long"}, {"name": "unit", "type": "ChronoUnit"}], "return_type": "Duration", "signature": "public Duration duration(long max, ChronoUnit unit)", "original_string": "    public Duration duration(long max, ChronoUnit unit) {\n        return duration(0, max, unit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Duration", "classes": []}, "docstring": "\nGenerates a random Duration lower than max.\n\n@param max  the maximum value\n@param unit the temporal unit (day or shorter than a day)\n@return a random Duration lower than {@code max}.\n@throws IllegalArgumentException if the {@code unit} is invalid.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Duration]duration(long,long,ChronoUnit)", "name": "duration", "arg_nums": 3, "params": [{"name": "min", "type": "long"}, {"name": "max", "type": "long"}, {"name": "unit", "type": "ChronoUnit"}], "return_type": "Duration", "signature": "public Duration duration(long min, long max, ChronoUnit unit)", "original_string": "    public Duration duration(long min, long max, ChronoUnit unit) {\n        return Duration.of(faker.random().nextLong(min, max), unit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Duration", "classes": []}, "docstring": "\nGenerates a random Duration between min and max.\n\n@param min  the maximum value\n@param max  the minimal value\n@param unit the temporal unit (day or shorter than a day)\n@return a random Duration between {@code min} inclusive and {@code max} exclusive if {@code max} greater {@code min}.\n@throws IllegalArgumentException if the {@code unit} is invalid.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[Period]period(Period,Period)", "name": "period", "arg_nums": 2, "params": [{"name": "min", "type": "Period"}, {"name": "max", "type": "Period"}], "return_type": "Period", "signature": "public Period period(Period min, Period max)", "original_string": "    public Period period(Period min, Period max) {\n        if (max.minus(min).isNegative()) {\n            throw new IllegalArgumentException(\"Max period(\" + max + \") should be not less than min (\" + min + \")\");\n        }\n        return Period.of(\n            faker.random().nextInt(min.getYears(), max.getYears()),\n            faker.random().nextInt(min.getMonths(), max.getMonths()),\n            faker.random().nextInt(min.getDays(), max.getDays()));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Period", "classes": []}, "docstring": "\nGenerates a random Period between min and max.\n\n@param min the minimal value\n@param max the maximum value\n@return a random Period between {@code min} inclusive and {@code max} inclusive if {@code max} greater {@code min}.\n@throws IllegalArgumentException if the {@code min} is greater than {@code max}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate.[String]formatInstant(TemporalAccessor,String)", "name": "formatInstant", "arg_nums": 2, "params": [{"name": "instant", "type": "TemporalAccessor"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "private static String formatInstant(TemporalAccessor instant, String pattern)", "original_string": "    private static String formatInstant(TemporalAccessor instant, String pattern) {\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern)\n            .withZone(ZoneId.systemDefault());\n\n        return formatter.format(instant);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/TimeAndDate.java", "class_name": "TimeAndDate", "class_uri": "src/main/java/net/datafaker/providers/base/TimeAndDate.java.TimeAndDate", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/RockBand.java.RockBand.[]RockBand(BaseProviders)", "name": "RockBand", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected RockBand(BaseProviders faker)", "original_string": "    protected RockBand(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/RockBand.java", "class_name": "RockBand", "class_uri": "src/main/java/net/datafaker/providers/base/RockBand.java.RockBand", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/RockBand.java.RockBand.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"rock_band.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/RockBand.java", "class_name": "RockBand", "class_uri": "src/main/java/net/datafaker/providers/base/RockBand.java.RockBand", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport.[]OlympicSport(BaseProviders)", "name": "OlympicSport", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected OlympicSport(BaseProviders faker)", "original_string": "    protected OlympicSport(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/OlympicSport.java", "class_name": "OlympicSport", "class_uri": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport.[String]summerOlympics()", "name": "summerOlympics", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String summerOlympics()", "original_string": "    public String summerOlympics() {\n        return resolve(\"olympic_sport.summer_olympics\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/OlympicSport.java", "class_name": "OlympicSport", "class_uri": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport.[String]winterOlympics()", "name": "winterOlympics", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String winterOlympics()", "original_string": "    public String winterOlympics() {\n        return resolve(\"olympic_sport.winter_olympics\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/OlympicSport.java", "class_name": "OlympicSport", "class_uri": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport.[String]summerParalympics()", "name": "summerParalympics", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String summerParalympics()", "original_string": "    public String summerParalympics() {\n        return resolve(\"olympic_sport.summer_paralympics\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/OlympicSport.java", "class_name": "OlympicSport", "class_uri": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport.[String]winterParalympics()", "name": "winterParalympics", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String winterParalympics()", "original_string": "    public String winterParalympics() {\n        return resolve(\"olympic_sport.winter_paralympics\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/OlympicSport.java", "class_name": "OlympicSport", "class_uri": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport.[String]ancientOlympics()", "name": "ancientOlympics", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ancientOlympics()", "original_string": "    public String ancientOlympics() {\n        return resolve(\"olympic_sport.ancient_olympics\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/OlympicSport.java", "class_name": "OlympicSport", "class_uri": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport.[String]unusual()", "name": "unusual", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String unusual()", "original_string": "    public String unusual() {\n        return resolve(\"olympic_sport.unusual\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/OlympicSport.java", "class_name": "OlympicSport", "class_uri": "src/main/java/net/datafaker/providers/base/OlympicSport.java.OlympicSport", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[]PhoneNumber(BaseProviders)", "name": "PhoneNumber", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected PhoneNumber(BaseProviders faker)", "original_string": "    protected PhoneNumber(BaseProviders faker) {\n        super(faker);\n        this.countryCodeIso2 = countryCodeIso2(faker.getContext().getLocale());\n        this.generator = new PhoneNumberGenerator(faker.fakeValuesService(), faker.getContext());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumber.java", "class_name": "PhoneNumber", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]countryCodeIso2()", "name": "countryCodeIso2", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deterministic\n    String countryCodeIso2()", "original_string": "    @Deterministic\n    String countryCodeIso2() {\n        return countryCodeIso2;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumber.java", "class_name": "PhoneNumber", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber", "attributes": {"modifiers": "@Deterministic", "marker_annotations": ["@Deterministic"], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]cellPhone()", "name": "cellPhone", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String cellPhone()", "original_string": "    public String cellPhone() {\n        return generator.randomPhoneNumber(countryCodeIso2, MOBILE, NATIONAL);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumber.java", "class_name": "PhoneNumber", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]cellPhoneInternational()", "name": "cellPhoneInternational", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String cellPhoneInternational()", "original_string": "    public String cellPhoneInternational() {\n        return generator.randomPhoneNumber(countryCodeIso2, MOBILE, INTERNATIONAL);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumber.java", "class_name": "PhoneNumber", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]phoneNumber()", "name": "phoneNumber", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String phoneNumber()", "original_string": "    public String phoneNumber() {\n        return phoneNumberNational();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumber.java", "class_name": "PhoneNumber", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates locale specific phone number in national format.\n\n@return phone number\n"}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]phoneNumberInternational()", "name": "phoneNumberInternational", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String phoneNumberInternational()", "original_string": "    public String phoneNumberInternational() {\n        return generator.randomPhoneNumber(countryCodeIso2, FIXED_LINE, INTERNATIONAL);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumber.java", "class_name": "PhoneNumber", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]phoneNumberNational()", "name": "phoneNumberNational", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String phoneNumberNational()", "original_string": "    public String phoneNumberNational() {\n        return generator.randomPhoneNumber(countryCodeIso2, FIXED_LINE, NATIONAL);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumber.java", "class_name": "PhoneNumber", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]extension()", "name": "extension", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String extension()", "original_string": "    public String extension() {\n        return subscriberNumber();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumber.java", "class_name": "PhoneNumber", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]subscriberNumber(int)", "name": "subscriberNumber", "arg_nums": 1, "params": [{"name": "length", "type": "int"}], "return_type": "String", "signature": "public String subscriberNumber(int length)", "original_string": "    public String subscriberNumber(int length) {\n        return faker.numerify(\"#\".repeat(Math.max(0, length)));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumber.java", "class_name": "PhoneNumber", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]subscriberNumber()", "name": "subscriberNumber", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String subscriberNumber()", "original_string": "    public String subscriberNumber() {\n        return subscriberNumber(4);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumber.java", "class_name": "PhoneNumber", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]countryCodeIso2(Locale)", "name": "countryCodeIso2", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "String", "signature": "private static String countryCodeIso2(Locale locale)", "original_string": "    private static String countryCodeIso2(Locale locale) {\n        String country = requireNonNullElse(locale.getCountry(), \"\");\n        return switch (country) {\n            case \"\" -> detectCountryByLanguage(locale.getLanguage());\n            case \"CAT\" -> \"ES\";\n            case \"IND\" -> \"IN\";\n            case \"NEP\" -> \"NP\";\n            case \"PAK\" -> \"PK\";\n            case \"BORK\" -> \"US\"; // what the hell is BORK?\n            default -> country;\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumber.java", "class_name": "PhoneNumber", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber.[String]detectCountryByLanguage(String)", "name": "detectCountryByLanguage", "arg_nums": 1, "params": [{"name": "language", "type": "String"}], "return_type": "String", "signature": "private static String detectCountryByLanguage(String language)", "original_string": "    private static String detectCountryByLanguage(String language) {\n        return switch (language) {\n            case \"en\" -> \"US\"; // it has been used by default for English\n            case \"test\" -> \"US\"; // What the hell is \"test\" language?\n            case \"hy\" -> \"AM\"; // Armenia\n            case \"uk\" -> \"UA\"; // Ukraine\n            case \"ja\" -> \"JP\"; // Japan\n            case \"fa\" -> \"FR\"; // France\n            case \"ka\" -> \"GE\"; // Georgia\n            case \"sq\" -> \"AL\"; // Albania\n            case \"cs\" -> \"CZ\"; // Czech Republic\n            case \"be\" -> \"BY\"; // Belarus\n            case \"ko\" -> \"KR\"; // Korea\n            case \"he\" -> \"IL\"; // Israel\n            default -> language.toUpperCase(ROOT);\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumber.java", "class_name": "PhoneNumber", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumber.java.PhoneNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[]Measurement(BaseProviders)", "name": "Measurement", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Measurement(BaseProviders faker)", "original_string": "    protected Measurement(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Measurement.java", "class_name": "Measurement", "class_uri": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]height()", "name": "height", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String height()", "original_string": "    public String height() {\n        return resolve(\"measurement.height\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Measurement.java", "class_name": "Measurement", "class_uri": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random height measurement.\n\n@return a string of height measurement.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]length()", "name": "length", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String length()", "original_string": "    public String length() {\n        return resolve(\"measurement.length\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Measurement.java", "class_name": "Measurement", "class_uri": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random length measurement.\n\n@return a string of length measurement.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]volume()", "name": "volume", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String volume()", "original_string": "    public String volume() {\n        return resolve(\"measurement.volume\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Measurement.java", "class_name": "Measurement", "class_uri": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random volume measurement.\n\n@return a string of volume measurement.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]weight()", "name": "weight", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String weight()", "original_string": "    public String weight() {\n        return resolve(\"measurement.weight\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Measurement.java", "class_name": "Measurement", "class_uri": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random weight measurement.\n\n@return a string of weight measurement.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]metricHeight()", "name": "metricHeight", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String metricHeight()", "original_string": "    public String metricHeight() {\n        return resolve(\"measurement.metric_height\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Measurement.java", "class_name": "Measurement", "class_uri": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random metric height measurement.\n\n@return a string of metric height measurement.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]metricLength()", "name": "metricLength", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String metricLength()", "original_string": "    public String metricLength() {\n        return resolve(\"measurement.metric_length\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Measurement.java", "class_name": "Measurement", "class_uri": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random metric length measurement.\n\n@return a string of metric length measurement.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]metricVolume()", "name": "metricVolume", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String metricVolume()", "original_string": "    public String metricVolume() {\n        return resolve(\"measurement.metric_volume\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Measurement.java", "class_name": "Measurement", "class_uri": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random metric volume measurement.\n\n@return a string of metric volume measurement.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement.[String]metricWeight()", "name": "metricWeight", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String metricWeight()", "original_string": "    public String metricWeight() {\n        return resolve(\"measurement.metric_weight\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Measurement.java", "class_name": "Measurement", "class_uri": "src/main/java/net/datafaker/providers/base/Measurement.java.Measurement", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random metric weight measurement.\n\n@return a string of metric weight measurement.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Mood.java.Mood.[]Mood(BaseProviders)", "name": "Mood", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Mood(BaseProviders faker)", "original_string": "    protected Mood(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mood.java", "class_name": "Mood", "class_uri": "src/main/java/net/datafaker/providers/base/Mood.java.Mood", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mood.java.Mood.[String]feeling()", "name": "feeling", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String feeling()", "original_string": "    public String feeling() {\n        return resolve(\"mood.feeling\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mood.java", "class_name": "Mood", "class_uri": "src/main/java/net/datafaker/providers/base/Mood.java.Mood", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mood.java.Mood.[String]emotion()", "name": "emotion", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String emotion()", "original_string": "    public String emotion() {\n        return resolve(\"mood.emotion\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mood.java", "class_name": "Mood", "class_uri": "src/main/java/net/datafaker/providers/base/Mood.java.Mood", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mood.java.Mood.[String]tone()", "name": "tone", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String tone()", "original_string": "    public String tone() {\n        return resolve(\"mood.tone\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mood.java", "class_name": "Mood", "class_uri": "src/main/java/net/datafaker/providers/base/Mood.java.Mood", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Artist.java.Artist.[]Artist(BaseProviders)", "name": "Artist", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Artist(BaseProviders faker)", "original_string": "    protected Artist(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Artist.java", "class_name": "Artist", "class_uri": "src/main/java/net/datafaker/providers/base/Artist.java.Artist", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Artist.java.Artist.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"artist.names\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Artist.java", "class_name": "Artist", "class_uri": "src/main/java/net/datafaker/providers/base/Artist.java.Artist", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cat.java.Cat.[]Cat(BaseProviders)", "name": "Cat", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Cat(BaseProviders faker)", "original_string": "    protected Cat(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cat.java", "class_name": "Cat", "class_uri": "src/main/java/net/datafaker/providers/base/Cat.java.Cat", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cat.java.Cat.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"creature.cat.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cat.java", "class_name": "Cat", "class_uri": "src/main/java/net/datafaker/providers/base/Cat.java.Cat", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cat.java.Cat.[String]breed()", "name": "breed", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String breed()", "original_string": "    public String breed() {\n        return resolve(\"creature.cat.breed\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cat.java", "class_name": "Cat", "class_uri": "src/main/java/net/datafaker/providers/base/Cat.java.Cat", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cat.java.Cat.[String]registry()", "name": "registry", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String registry()", "original_string": "    public String registry() {\n        return resolve(\"creature.cat.registry\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cat.java", "class_name": "Cat", "class_uri": "src/main/java/net/datafaker/providers/base/Cat.java.Cat", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/FamousLastWords.java.FamousLastWords.[]FamousLastWords(BaseProviders)", "name": "FamousLastWords", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected FamousLastWords(BaseProviders faker)", "original_string": "    protected FamousLastWords(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FamousLastWords.java", "class_name": "FamousLastWords", "class_uri": "src/main/java/net/datafaker/providers/base/FamousLastWords.java.FamousLastWords", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/FamousLastWords.java.FamousLastWords.[String]lastWords()", "name": "lastWords", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String lastWords()", "original_string": "    public String lastWords() {\n        return resolve(\"famous_last_words.last_words\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FamousLastWords.java", "class_name": "FamousLastWords", "class_uri": "src/main/java/net/datafaker/providers/base/FamousLastWords.java.FamousLastWords", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates random famous last words.\n\n@return a string of last words.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Country.java.Country.[]Country(BaseProviders)", "name": "Country", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Country(BaseProviders faker)", "original_string": "    protected Country(BaseProviders faker) {\n        super(faker);\n        this.flagUrl = \"https://flags.fmcdn.net/data/flags/w580/\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Country.java", "class_name": "Country", "class_uri": "src/main/java/net/datafaker/providers/base/Country.java.Country", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Country.java.Country.[String]flag()", "name": "flag", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String flag()", "original_string": "    public String flag() {\n        return flagUrl + resolve(\"country.code2\") + \".png\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Country.java", "class_name": "Country", "class_uri": "src/main/java/net/datafaker/providers/base/Country.java.Country", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Country.java.Country.[String]countryCode2()", "name": "countryCode2", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String countryCode2()", "original_string": "    public String countryCode2() {\n        return resolve(\"country.code2\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Country.java", "class_name": "Country", "class_uri": "src/main/java/net/datafaker/providers/base/Country.java.Country", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Country.java.Country.[String]countryCode3()", "name": "countryCode3", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String countryCode3()", "original_string": "    public String countryCode3() {\n        return resolve(\"country.code3\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Country.java", "class_name": "Country", "class_uri": "src/main/java/net/datafaker/providers/base/Country.java.Country", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Country.java.Country.[String]capital()", "name": "capital", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String capital()", "original_string": "    public String capital() {\n        return resolve(\"country.capital\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Country.java", "class_name": "Country", "class_uri": "src/main/java/net/datafaker/providers/base/Country.java.Country", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Country.java.Country.[String]currency()", "name": "currency", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String currency()", "original_string": "    public String currency() {\n        return faker.money().currency();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Country.java", "class_name": "Country", "class_uri": "src/main/java/net/datafaker/providers/base/Country.java.Country", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@see Money#currency()\n@return a random detailed ISO 4217 currency display name\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Country.java.Country.[String]currencyCode()", "name": "currencyCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String currencyCode()", "original_string": "    public String currencyCode() {\n        return faker.money().currencyCode();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Country.java", "class_name": "Country", "class_uri": "src/main/java/net/datafaker/providers/base/Country.java.Country", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@see Money#currencyCode()\n@return an ISO 4217 currency code\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Country.java.Country.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"country.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Country.java", "class_name": "Country", "class_uri": "src/main/java/net/datafaker/providers/base/Country.java.Country", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Word.java.Word.[]Word(BaseProviders)", "name": "Word", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Word(BaseProviders faker)", "original_string": "    protected Word(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Word.java", "class_name": "Word", "class_uri": "src/main/java/net/datafaker/providers/base/Word.java.Word", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Word.java.Word.[String]adjective()", "name": "adjective", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String adjective()", "original_string": "    public String adjective() {\n        return resolve(\"words.adjective\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Word.java", "class_name": "Word", "class_uri": "src/main/java/net/datafaker/providers/base/Word.java.Word", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Word.java.Word.[String]adverb()", "name": "adverb", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String adverb()", "original_string": "    public String adverb() {\n        return resolve(\"words.adverb\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Word.java", "class_name": "Word", "class_uri": "src/main/java/net/datafaker/providers/base/Word.java.Word", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Word.java.Word.[String]conjunction()", "name": "conjunction", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String conjunction()", "original_string": "    public String conjunction() {\n        return resolve(\"words.conjunction\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Word.java", "class_name": "Word", "class_uri": "src/main/java/net/datafaker/providers/base/Word.java.Word", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Word.java.Word.[String]interjection()", "name": "interjection", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String interjection()", "original_string": "    public String interjection() {\n        return resolve(\"words.interjection\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Word.java", "class_name": "Word", "class_uri": "src/main/java/net/datafaker/providers/base/Word.java.Word", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Word.java.Word.[String]noun()", "name": "noun", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String noun()", "original_string": "    public String noun() {\n        return resolve(\"words.noun\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Word.java", "class_name": "Word", "class_uri": "src/main/java/net/datafaker/providers/base/Word.java.Word", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Word.java.Word.[String]preposition()", "name": "preposition", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String preposition()", "original_string": "    public String preposition() {\n        return resolve(\"words.preposition\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Word.java", "class_name": "Word", "class_uri": "src/main/java/net/datafaker/providers/base/Word.java.Word", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Word.java.Word.[String]verb()", "name": "verb", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String verb()", "original_string": "    public String verb() {\n        return resolve(\"words.verb\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Word.java", "class_name": "Word", "class_uri": "src/main/java/net/datafaker/providers/base/Word.java.Word", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Emoji.java.Emoji.[]Emoji(BaseProviders)", "name": "Emoji", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Emoji(BaseProviders faker)", "original_string": "    protected Emoji(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Emoji.java", "class_name": "Emoji", "class_uri": "src/main/java/net/datafaker/providers/base/Emoji.java.Emoji", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Emoji.java.Emoji.[String]smiley()", "name": "smiley", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String smiley()", "original_string": "    public String smiley() {\n        return resolve(\"emoji.smileys\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Emoji.java", "class_name": "Emoji", "class_uri": "src/main/java/net/datafaker/providers/base/Emoji.java.Emoji", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Emoji.java.Emoji.[String]cat()", "name": "cat", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String cat()", "original_string": "    public String cat() {\n        return resolve(\"emoji.cats\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Emoji.java", "class_name": "Emoji", "class_uri": "src/main/java/net/datafaker/providers/base/Emoji.java.Emoji", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic.[]Demographic(BaseProviders)", "name": "Demographic", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Demographic(BaseProviders faker)", "original_string": "    protected Demographic(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Demographic.java", "class_name": "Demographic", "class_uri": "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic.[String]race()", "name": "race", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String race()", "original_string": "    public String race() {\n        return resolve(\"demographic.race\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Demographic.java", "class_name": "Demographic", "class_uri": "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic.[String]educationalAttainment()", "name": "educationalAttainment", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String educationalAttainment()", "original_string": "    public String educationalAttainment() {\n        return resolve(\"demographic.educational_attainment\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Demographic.java", "class_name": "Demographic", "class_uri": "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic.[String]demonym()", "name": "demonym", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String demonym()", "original_string": "    public String demonym() {\n        return resolve(\"demographic.demonym\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Demographic.java", "class_name": "Demographic", "class_uri": "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic.[String]sex()", "name": "sex", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sex()", "original_string": "    public String sex() {\n        return resolve(\"demographic.sex\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Demographic.java", "class_name": "Demographic", "class_uri": "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic.[String]maritalStatus()", "name": "maritalStatus", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String maritalStatus()", "original_string": "    public String maritalStatus() {\n        return resolve(\"demographic.marital_status\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Demographic.java", "class_name": "Demographic", "class_uri": "src/main/java/net/datafaker/providers/base/Demographic.java.Demographic", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Zodiac.java.Zodiac.[]Zodiac(BaseProviders)", "name": "Zodiac", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Zodiac(BaseProviders faker)", "original_string": "    protected Zodiac(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Zodiac.java", "class_name": "Zodiac", "class_uri": "src/main/java/net/datafaker/providers/base/Zodiac.java.Zodiac", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Zodiac.java.Zodiac.[String]sign()", "name": "sign", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sign()", "original_string": "    public String sign() {\n        return resolve(\"zodiac.signs\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Zodiac.java", "class_name": "Zodiac", "class_uri": "src/main/java/net/datafaker/providers/base/Zodiac.java.Zodiac", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method returns a Zodiac sign\n\n@return a string of Zodiac sign\n"}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator.[]PhoneNumberGenerator(FakeValuesService,FakerContext)", "name": "PhoneNumberGenerator", "arg_nums": 2, "params": [{"name": "fakeValuesService", "type": "FakeValuesService"}, {"name": "context", "type": "FakerContext"}], "return_type": "", "signature": "PhoneNumberGenerator(FakeValuesService fakeValuesService, FakerContext context)", "original_string": "    PhoneNumberGenerator(FakeValuesService fakeValuesService, FakerContext context) {\n        this.fakeValuesService = fakeValuesService;\n        this.context = context;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java", "class_name": "PhoneNumberGenerator", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator.[String]randomPhoneNumber(String,PhoneNumberType,PhoneNumberFormat)", "name": "randomPhoneNumber", "arg_nums": 3, "params": [{"name": "countryCodeIso2", "type": "String"}, {"name": "type", "type": "PhoneNumberType"}, {"name": "format", "type": "PhoneNumberFormat"}], "return_type": "String", "signature": "String randomPhoneNumber(String countryCodeIso2, PhoneNumberType type, PhoneNumberFormat format)", "original_string": "    String randomPhoneNumber(String countryCodeIso2, PhoneNumberType type, PhoneNumberFormat format) {\n        Phonenumber.PhoneNumber phoneNumber = randomPhoneNumber(countryCodeIso2, type);\n        return libPhoneNumber.format(phoneNumber, format);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java", "class_name": "PhoneNumberGenerator", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator.[Phonenumber.PhoneNumber]randomPhoneNumber(String,PhoneNumberType)", "name": "randomPhoneNumber", "arg_nums": 2, "params": [{"name": "countryCodeIso2", "type": "String"}, {"name": "type", "type": "PhoneNumberType"}], "return_type": "Phonenumber.PhoneNumber", "signature": "private Phonenumber.PhoneNumber randomPhoneNumber(String countryCodeIso2, PhoneNumberType type)", "original_string": "    private Phonenumber.PhoneNumber randomPhoneNumber(String countryCodeIso2, PhoneNumberType type) {\n        String pattern = CACHE.computeIfAbsent(new CacheKey(countryCodeIso2, type),\n            (key) -> phoneNumberPattern(countryCodeIso2, type));\n        Phonenumber.PhoneNumber candidate = generatePhoneNumber(countryCodeIso2, pattern);\n\n        // in few cases, the generated phone number matches the country pattern,\n        // but still is not valid because of mismatching area code.\n        // For example, in Germany (\"DE\"), such invalid phone number is \"28978023638\".\n        for (int i = 0; i < MAX_RETRIES && !libPhoneNumber.isValidNumber(candidate); i++) {\n            candidate = generatePhoneNumber(countryCodeIso2, pattern);\n        }\n        return candidate;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java", "class_name": "PhoneNumberGenerator", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Phonenumber.PhoneNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator.[Phonenumber.PhoneNumber]generatePhoneNumber(String,String)", "name": "generatePhoneNumber", "arg_nums": 2, "params": [{"name": "countryCodeIso2", "type": "String"}, {"name": "phoneNumberPattern", "type": "String"}], "return_type": "Phonenumber.PhoneNumber", "signature": "private Phonenumber.PhoneNumber generatePhoneNumber(String countryCodeIso2, String phoneNumberPattern)", "original_string": "    private Phonenumber.PhoneNumber generatePhoneNumber(String countryCodeIso2, String phoneNumberPattern) {\n        String nationalNumber = fakeValuesService.regexify(phoneNumberPattern, context);\n        try {\n            return libPhoneNumber.parse(nationalNumber, countryCodeIso2);\n        } catch (NumberParseException e) {\n            throw new RuntimeException(\"Failed to parse generated phone number %s\".formatted(nationalNumber), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java", "class_name": "PhoneNumberGenerator", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Phonenumber.PhoneNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator.[String]phoneNumberPattern(String,PhoneNumberType)", "name": "phoneNumberPattern", "arg_nums": 2, "params": [{"name": "countryCodeIso2", "type": "String"}, {"name": "type", "type": "PhoneNumberType"}], "return_type": "String", "signature": "private String phoneNumberPattern(String countryCodeIso2, PhoneNumberType type)", "original_string": "    private String phoneNumberPattern(String countryCodeIso2, PhoneNumberType type) {\n        return getNumberDescriptionByType(countryCodeIso2, type).getNationalNumberPattern();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java", "class_name": "PhoneNumberGenerator", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator.[Phonemetadata.PhoneNumberDesc]getNumberDescriptionByType(String,PhoneNumberType)", "name": "getNumberDescriptionByType", "arg_nums": 2, "params": [{"name": "countryCodeIso2", "type": "String"}, {"name": "type", "type": "PhoneNumberType"}], "return_type": "Phonemetadata.PhoneNumberDesc", "signature": "private Phonemetadata.PhoneNumberDesc getNumberDescriptionByType(String countryCodeIso2, PhoneNumberType type)", "original_string": "    private Phonemetadata.PhoneNumberDesc getNumberDescriptionByType(String countryCodeIso2, PhoneNumberType type) {\n        Phonemetadata.PhoneMetadata metadata = getPhoneMetadata(countryCodeIso2);\n        return switch (type) {\n            case MOBILE -> metadata.getMobile();\n            case FIXED_LINE -> metadata.getFixedLine();\n            default -> throw new IllegalArgumentException(\"Unsupported phone number type: \" + type);\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java", "class_name": "PhoneNumberGenerator", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Phonemetadata.PhoneNumberDesc", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator.[Phonemetadata.PhoneMetadata]getPhoneMetadata(String)", "name": "getPhoneMetadata", "arg_nums": 1, "params": [{"name": "countryCodeIso2", "type": "String"}], "return_type": "Phonemetadata.PhoneMetadata", "signature": "private static Phonemetadata.PhoneMetadata getPhoneMetadata(String countryCodeIso2)", "original_string": "    private static Phonemetadata.PhoneMetadata getPhoneMetadata(String countryCodeIso2) {\n        try {\n            Method method = libPhoneNumber.getClass().getDeclaredMethod(\"getMetadataForRegion\", String.class);\n            method.setAccessible(true);\n            Phonemetadata.PhoneMetadata metadata = (Phonemetadata.PhoneMetadata) method.invoke(libPhoneNumber, countryCodeIso2);\n            return requireNonNull(metadata, () -> \"Unsupported country code: %s\".formatted(countryCodeIso2));\n        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n            throw new RuntimeException(\"Failed to extract phone number metadata for region \" + countryCodeIso2, e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java", "class_name": "PhoneNumberGenerator", "class_uri": "src/main/java/net/datafaker/providers/base/PhoneNumberGenerator.java.PhoneNumberGenerator", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Phonemetadata.PhoneMetadata", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria.[]Nigeria(BaseProviders)", "name": "Nigeria", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Nigeria(BaseProviders faker)", "original_string": "    protected Nigeria(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Nigeria.java", "class_name": "Nigeria", "class_uri": "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria.[String]places()", "name": "places", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String places()", "original_string": "    public String places() {\n        return resolve(KEY + \".places\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Nigeria.java", "class_name": "Nigeria", "class_uri": "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(KEY + \".name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Nigeria.java", "class_name": "Nigeria", "class_uri": "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria.[String]food()", "name": "food", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String food()", "original_string": "    public String food() {\n        return resolve(KEY + \".food\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Nigeria.java", "class_name": "Nigeria", "class_uri": "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria.[String]schools()", "name": "schools", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String schools()", "original_string": "    public String schools() {\n        return resolve(KEY + \".schools\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Nigeria.java", "class_name": "Nigeria", "class_uri": "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria.[String]celebrities()", "name": "celebrities", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String celebrities()", "original_string": "    public String celebrities() {\n        return resolve(KEY + \".celebrities\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Nigeria.java", "class_name": "Nigeria", "class_uri": "src/main/java/net/datafaker/providers/base/Nigeria.java.Nigeria", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[]Tire(BaseProviders)", "name": "Tire", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Tire(BaseProviders faker)", "original_string": "    protected Tire(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Tire.java", "class_name": "Tire", "class_uri": "src/main/java/net/datafaker/providers/base/Tire.java.Tire", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]code()", "name": "code", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String code()", "original_string": "    public String code() {\n        return resolve(\"tire.code\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Tire.java", "class_name": "Tire", "class_uri": "src/main/java/net/datafaker/providers/base/Tire.java.Tire", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a Tire Code, such as 205/60R16.\nWhich is width in mm / aspect ratio (height to width percentage) R (radial) Rim diameter.\n\n@return a Tire Code String.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]code(String)", "name": "code", "arg_nums": 1, "params": [{"name": "prefix", "type": "String"}], "return_type": "String", "signature": "public String code(String prefix)", "original_string": "    public String code(String prefix) {\n        return prefix + code();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Tire.java", "class_name": "Tire", "class_uri": "src/main/java/net/datafaker/providers/base/Tire.java.Tire", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a Tire Code prefixed with the provided String.\n\n@return a Tire Code string prefixed with the provided String.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]code(boolean)", "name": "code", "arg_nums": 1, "params": [{"name": "defaultPrefix", "type": "boolean"}], "return_type": "String", "signature": "public String code(boolean defaultPrefix)", "original_string": "    public String code(boolean defaultPrefix) {\n        return defaultPrefix ? code(\"P\") : code();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Tire.java", "class_name": "Tire", "class_uri": "src/main/java/net/datafaker/providers/base/Tire.java.Tire", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a Tire Code optionally prefixed with the default prefix (P for passenger vehicle).\n@param defaultPrefix if true the default prefix \"P\" will be included, otherwise it will not.\n\n@return a Tire Code string, such as P205/60R16.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]vehicleType()", "name": "vehicleType", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String vehicleType()", "original_string": "    public String vehicleType() {\n        return resolve(\"tire.vehicle_type\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Tire.java", "class_name": "Tire", "class_uri": "src/main/java/net/datafaker/providers/base/Tire.java.Tire", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]width()", "name": "width", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String width()", "original_string": "    public String width() {\n        return resolve(\"tire.width\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Tire.java", "class_name": "Tire", "class_uri": "src/main/java/net/datafaker/providers/base/Tire.java.Tire", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]aspectRatio()", "name": "aspectRatio", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String aspectRatio()", "original_string": "    public String aspectRatio() {\n        return resolve(\"tire.aspect_ratio\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Tire.java", "class_name": "Tire", "class_uri": "src/main/java/net/datafaker/providers/base/Tire.java.Tire", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]construction()", "name": "construction", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String construction()", "original_string": "    public String construction() {\n        return resolve(\"tire.construction\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Tire.java", "class_name": "Tire", "class_uri": "src/main/java/net/datafaker/providers/base/Tire.java.Tire", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]rimSize()", "name": "rimSize", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String rimSize()", "original_string": "    public String rimSize() {\n        return resolve(\"tire.rim_size\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Tire.java", "class_name": "Tire", "class_uri": "src/main/java/net/datafaker/providers/base/Tire.java.Tire", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]loadIndex()", "name": "loadIndex", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String loadIndex()", "original_string": "    public String loadIndex() {\n        return resolve(\"tire.load_index\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Tire.java", "class_name": "Tire", "class_uri": "src/main/java/net/datafaker/providers/base/Tire.java.Tire", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Tire.java.Tire.[String]speedrating()", "name": "speedrating", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String speedrating()", "original_string": "    public String speedrating() {\n        return resolve(\"tire.speed_rating\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Tire.java", "class_name": "Tire", "class_uri": "src/main/java/net/datafaker/providers/base/Tire.java.Tire", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Name.java.Name.[]Name(BaseProviders)", "name": "Name", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Name(BaseProviders faker)", "original_string": "    protected Name(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Name.java", "class_name": "Name", "class_uri": "src/main/java/net/datafaker/providers/base/Name.java.Name", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nInternal constructor, not to be used by clients.  Instances of {@link Name} should be accessed via\n{@link BaseFaker#name()}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"name.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Name.java", "class_name": "Name", "class_uri": "src/main/java/net/datafaker/providers/base/Name.java.Name", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nA multipart name composed of an optional prefix, a firstname and a lastname\nor other possible variances based on locale.  Examples:\n<ul>\n    <li>James Jones Jr.</li>\n    <li>Julie Johnson</li>\n</ul>\n\n@return a random name with given and family names and an optional suffix.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]nameWithMiddle()", "name": "nameWithMiddle", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String nameWithMiddle()", "original_string": "    public String nameWithMiddle() {\n        return resolve(\"name.name_with_middle\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Name.java", "class_name": "Name", "class_uri": "src/main/java/net/datafaker/providers/base/Name.java.Name", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nA multipart name composed of an optional prefix, a given and family name,\nanother 'firstname' for the middle name and an optional suffix such as Jr.\nExamples:\n<ul>\n    <li>Mrs. Ella Geraldine Fitzgerald</li>\n    <li>Jason Tom Sawyer Jr.</li>\n    <li>Helen Jessica Troy</li>\n</ul>\n\n@return a random name with a middle name component with optional prefix and suffix\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]fullName()", "name": "fullName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String fullName()", "original_string": "    public String fullName() {\n        return name();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Name.java", "class_name": "Name", "class_uri": "src/main/java/net/datafaker/providers/base/Name.java.Name", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns the same value as {@link #name()}\n\n@see Name#name()\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]firstName()", "name": "firstName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String firstName()", "original_string": "    public String firstName() {\n        return resolve(\"name.first_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Name.java", "class_name": "Name", "class_uri": "src/main/java/net/datafaker/providers/base/Name.java.Name", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a random 'given' name such as Aaliyah, Aaron, Abagail or Abbey\n\n@return a 'given' name such as Aaliyah, Aaron, Abagail or Abbey\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]femaleFirstName()", "name": "femaleFirstName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String femaleFirstName()", "original_string": "    public String femaleFirstName() {\n        return resolve(\"name.female_first_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Name.java", "class_name": "Name", "class_uri": "src/main/java/net/datafaker/providers/base/Name.java.Name", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a random female 'given' name.\n\n@return a female 'given' name\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]malefirstName()", "name": "malefirstName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String malefirstName()", "original_string": "    public String malefirstName() {\n        return resolve(\"name.male_first_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Name.java", "class_name": "Name", "class_uri": "src/main/java/net/datafaker/providers/base/Name.java.Name", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a random male 'given' name.\n\n@return a male 'given' name\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]lastName()", "name": "lastName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String lastName()", "original_string": "    public String lastName() {\n        return resolve(\"name.last_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Name.java", "class_name": "Name", "class_uri": "src/main/java/net/datafaker/providers/base/Name.java.Name", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a random last name such as Smith, Jones or Baldwin\n\n@return a random last name such as Smith, Jones or Baldwin\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]prefix()", "name": "prefix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String prefix()", "original_string": "    public String prefix() {\n        return resolve(\"name.prefix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Name.java", "class_name": "Name", "class_uri": "src/main/java/net/datafaker/providers/base/Name.java.Name", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a name prefix such as Mr., Mrs., Ms., Miss, or Dr.\n\n@return a name prefix such as Mr., Mrs., Ms., Miss, or Dr.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]suffix()", "name": "suffix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String suffix()", "original_string": "    public String suffix() {\n        return resolve(\"name.suffix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Name.java", "class_name": "Name", "class_uri": "src/main/java/net/datafaker/providers/base/Name.java.Name", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a name suffix such as Jr., Sr., I, II, III, IV, V, MD, DDS, PhD or DVM\n\n@return a name suffix such as Jr., Sr., I, II, III, IV, V, MD, DDS, PhD or DVM\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]title()", "name": "title", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String title()", "original_string": "    public String title() {\n        return String.join(\" \",\n            resolve(\"name.title.descriptor\"),\n            resolve(\"name.title.level\"),\n            resolve(\"name.title.job\")\n        );\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Name.java", "class_name": "Name", "class_uri": "src/main/java/net/datafaker/providers/base/Name.java.Name", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nA three part title composed of a descriptor level and job.  Some examples are :\n<ul>\n  <li>(template) {descriptor} {level} {job}</li>\n  <li>Lead Solutions Specialist</li>\n  <li>National Marketing Manager</li>\n  <li>Central Response Liaison</li>\n</ul>\n\n@return a random three part job title\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Name.java.Name.[String]username()", "name": "username", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deprecated\n    public String username()", "original_string": "    @Deprecated\n    public String username() {\n        return faker.internet().username();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Name.java", "class_name": "Name", "class_uri": "src/main/java/net/datafaker/providers/base/Name.java.Name", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nA lowercase username composed of the first_name and last_name joined with a '.'. Some examples are:\n<ul>\n    <li>(template) {@link #firstName()}.{@link #lastName()}</li>\n    <li>jim.jones</li>\n    <li>jason.leigh</li>\n    <li>tracy.jordan</li>\n</ul>\n\n@deprecated Use Internet.username() instead.\n@return a random two part username.\n@see Name#firstName()\n@see Name#lastName()\n"}, {"uris": "src/main/java/net/datafaker/providers/base/CPF.java.CPF.[]CPF(BaseProviders)", "name": "CPF", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected CPF(BaseProviders faker)", "original_string": "    protected CPF(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CPF.java", "class_name": "CPF", "class_uri": "src/main/java/net/datafaker/providers/base/CPF.java.CPF", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/CPF.java.CPF.[String]valid()", "name": "valid", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String valid()", "original_string": "    public String valid() {\n        return IdNumberGeneratorPtBrUtil.cpf(faker, true, true);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CPF.java", "class_name": "CPF", "class_uri": "src/main/java/net/datafaker/providers/base/CPF.java.CPF", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturn valid and formatted\n\n@return a valid CPF\n@see IdNumberGeneratorPtBrUtil#cpf(BaseProviders, boolean, boolean)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/CPF.java.CPF.[String]valid(boolean)", "name": "valid", "arg_nums": 1, "params": [{"name": "formatted", "type": "boolean"}], "return_type": "String", "signature": "public String valid(boolean formatted)", "original_string": "    public String valid(boolean formatted) {\n        return IdNumberGeneratorPtBrUtil.cpf(faker, formatted, true);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CPF.java", "class_name": "CPF", "class_uri": "src/main/java/net/datafaker/providers/base/CPF.java.CPF", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturn valid and formatted\n\n@param formatted a (un)formatted CPF\n@return a valid CPF\n@see IdNumberGeneratorPtBrUtil#cpf(BaseProviders, boolean, boolean)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/CPF.java.CPF.[String]invalid()", "name": "invalid", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String invalid()", "original_string": "    public String invalid() {\n        return IdNumberGeneratorPtBrUtil.cpf(faker, true, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CPF.java", "class_name": "CPF", "class_uri": "src/main/java/net/datafaker/providers/base/CPF.java.CPF", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturn invalid and formatted\n\n@return an invalid CPF\n@see IdNumberGeneratorPtBrUtil#cpf(BaseProviders, boolean, boolean)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/CPF.java.CPF.[String]invalid(boolean)", "name": "invalid", "arg_nums": 1, "params": [{"name": "formatted", "type": "boolean"}], "return_type": "String", "signature": "public String invalid(boolean formatted)", "original_string": "    public String invalid(boolean formatted) {\n        return IdNumberGeneratorPtBrUtil.cpf(faker, formatted, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CPF.java", "class_name": "CPF", "class_uri": "src/main/java/net/datafaker/providers/base/CPF.java.CPF", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturn invalid and formatted\n\n@param formatted a (un)formatted CPF\n@return an invalid CPF\n@see IdNumberGeneratorPtBrUtil#cpf(BaseProviders, boolean, boolean)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Passport.java.Passport.[]Passport(BaseProviders)", "name": "Passport", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Passport(BaseProviders faker)", "original_string": "    protected Passport(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Passport.java", "class_name": "Passport", "class_uri": "src/main/java/net/datafaker/providers/base/Passport.java.Passport", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Passport.java.Passport.[String]valid()", "name": "valid", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String valid()", "original_string": "    public String valid() {\n        return faker.regexify(faker.resolve(\"passport.valid\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Passport.java", "class_name": "Passport", "class_uri": "src/main/java/net/datafaker/providers/base/Passport.java.Passport", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mountain.java.Mountain.[]Mountain(BaseProviders)", "name": "Mountain", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Mountain(BaseProviders faker)", "original_string": "    protected Mountain(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mountain.java", "class_name": "Mountain", "class_uri": "src/main/java/net/datafaker/providers/base/Mountain.java.Mountain", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mountain.java.Mountain.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"mountain.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mountain.java", "class_name": "Mountain", "class_uri": "src/main/java/net/datafaker/providers/base/Mountain.java.Mountain", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mountain.java.Mountain.[String]range()", "name": "range", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String range()", "original_string": "    public String range() {\n        return resolve(\"mountain.range\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mountain.java", "class_name": "Mountain", "class_uri": "src/main/java/net/datafaker/providers/base/Mountain.java.Mountain", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[B]getFaker()", "name": "getFaker", "arg_nums": 0, "params": [], "return_type": "B", "signature": "<B extends ProviderRegistration> B getFaker()", "original_string": "    <B extends ProviderRegistration> B getFaker();", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "B", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[FakerContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "FakerContext", "signature": "FakerContext getContext()", "original_string": "    FakerContext getContext();", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "FakerContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[AP]getProvider(String)", "name": "getProvider", "arg_nums": 1, "params": [{"name": "simpleClassName", "type": "String"}], "return_type": "AP", "signature": "default <PR extends ProviderRegistration, AP extends AbstractProvider<PR>> AP getProvider(String simpleClassName)", "original_string": "    default <PR extends ProviderRegistration, AP extends AbstractProvider<PR>> AP getProvider(String simpleClassName) {\n        return ObjectMethods.executeMethodByReturnType(this, simpleClassName);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "AP", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[AP]getProvider(Class<AP>,Function<PR, AP>)", "name": "getProvider", "arg_nums": 2, "params": [{"name": "clazz", "type": "Class<AP>"}, {"name": "valueSupplier", "type": "Function<PR, AP>"}], "return_type": "AP", "signature": "<PR extends ProviderRegistration, AP extends AbstractProvider<PR>> AP getProvider(\n        Class<AP> clazz, Function<PR, AP> valueSupplier)", "original_string": "    <PR extends ProviderRegistration, AP extends AbstractProvider<PR>> AP getProvider(\n        Class<AP> clazz, Function<PR, AP> valueSupplier);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "AP", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]resolve(String)", "name": "resolve", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "String", "signature": "String resolve(String key)", "original_string": "    String resolve(String key);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]resolve(String,Supplier<String>)", "name": "resolve", "arg_nums": 2, "params": [{"name": "key", "type": "String"}, {"name": "message", "type": "Supplier<String>"}], "return_type": "String", "signature": "String resolve(String key, Supplier<String> message)", "original_string": "    String resolve(String key, Supplier<String> message);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]numerify(String)", "name": "numerify", "arg_nums": 1, "params": [{"name": "numberString", "type": "String"}], "return_type": "String", "signature": "String numerify(String numberString)", "original_string": "    String numerify(String numberString);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]letterify(String)", "name": "letterify", "arg_nums": 1, "params": [{"name": "letterString", "type": "String"}], "return_type": "String", "signature": "String letterify(String letterString)", "original_string": "    String letterify(String letterString);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with the '?' characters in the parameter replaced with random alphabetic\ncharacters.\n<p>\nFor example, the string \"12??34\" could be replaced with a string like \"12AB34\".\n\n@param letterString Template for string generation\n@return Generated string.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]letterify(String,boolean)", "name": "letterify", "arg_nums": 2, "params": [{"name": "letterString", "type": "String"}, {"name": "isUpper", "type": "boolean"}], "return_type": "String", "signature": "String letterify(String letterString, boolean isUpper)", "original_string": "    String letterify(String letterString, boolean isUpper);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with the '?' characters in the parameter replaced with random alphabetic\ncharacters.\n<p>\nFor example, the string \"12??34\" could be replaced with a string like \"12AB34\".\n"}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]bothify(String)", "name": "bothify", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "String", "signature": "String bothify(String string)", "original_string": "    String bothify(String string);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nApplies both a {@link #numerify(String)} and a {@link #letterify(String)}\nover the incoming string.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]bothify(String,boolean)", "name": "bothify", "arg_nums": 2, "params": [{"name": "string", "type": "String"}, {"name": "isUpper", "type": "boolean"}], "return_type": "String", "signature": "String bothify(String string, boolean isUpper)", "original_string": "    String bothify(String string, boolean isUpper);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nApplies both a {@link #numerify(String)} and a {@link #letterify(String)}\nover the incoming string.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]regexify(String)", "name": "regexify", "arg_nums": 1, "params": [{"name": "regex", "type": "String"}], "return_type": "String", "signature": "String regexify(String regex)", "original_string": "    String regexify(String regex);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a String that matches the given regular expression.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]examplify(String)", "name": "examplify", "arg_nums": 1, "params": [{"name": "example", "type": "String"}], "return_type": "String", "signature": "String examplify(String example)", "original_string": "    String examplify(String example);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a String by example. The output string will have the same pattern as the input string.\n<p>\nFor example:\n\"AAA\" becomes \"KRA\"\n\"abc\" becomes \"uio\"\n\"948\" becomes \"345\"\n\"A19c\" becomes \"Z20d\"\n\n@param example The input string\n@return The output string based on the input pattern\n"}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]templatify(String,char)", "name": "templatify", "arg_nums": 2, "params": [{"name": "string", "type": "String"}, {"name": "char2replace", "type": "char"}], "return_type": "String", "signature": "String templatify(String string, char char2replace, String... options)", "original_string": "    String templatify(String string, char char2replace, String... options);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with the char2replace characters in the parameter replaced with random option from available options.\n<p>\nFor example, the string \"ABC??EFG\" could be replaced with a string like \"ABCtest\u0442\u0435\u0441\u0442EFG\"\nif passed options are new String[]{\"test\", \"\u0442\u0435\u0441\u0442\"}.\n\n@param string       Template for string generation\n@param char2replace Char to replace\n@param options      Options to use while filling the template\n@return Generated string\n"}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]templatify(String,Map<Character, String[]>)", "name": "templatify", "arg_nums": 2, "params": [{"name": "string", "type": "String"}, {"name": "optionsMap", "type": "Map<Character, String[]>"}], "return_type": "String", "signature": "String templatify(String string, Map<Character, String[]> optionsMap)", "original_string": "    String templatify(String string, Map<Character, String[]> optionsMap);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with the characters in the keys of optionsMap parameter replaced with random option from values.\n\n<p>\nFor example, the string \"ABC$$EFG\" could be replaced with a string like \"ABCtest\u0442\u0435\u0441\u0442EFG\"\nif passed for key '$' there is value new String[]{\"test\", \"\u0442\u0435\u0441\u0442\"} in optionsMap\n\n@param string     Template for string generation\n@param optionsMap Map with replacement rules\n@return Generated string\n"}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]csv(int)", "name": "csv", "arg_nums": 1, "params": [{"name": "limit", "type": "int"}], "return_type": "String", "signature": "String csv(int limit, String... columnExpressions)", "original_string": "    String csv(int limit, String... columnExpressions);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with generated csv based number of lines and column expressions.\nThis method will use comma as default delimiter, always prints header and double quote as default quote.\n\n<p>\nFor example, it could generate\n\"name_column\",\"last_name_column\"\n\"Sabrina\",\"Kihn\"\n<p>\nfor expression {@code faker.expression(\"#{csv '1','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\");}\n\n@param limit             Number of lines\n@param columnExpressions Even number of expressions.\n                         The odd numbers args are used for columns names, and even for column values.\n@return Generated string\n"}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]csv(String,char,boolean,int)", "name": "csv", "arg_nums": 4, "params": [{"name": "separator", "type": "String"}, {"name": "quote", "type": "char"}, {"name": "withHeader", "type": "boolean"}, {"name": "limit", "type": "int"}], "return_type": "String", "signature": "String csv(String separator, char quote, boolean withHeader, int limit, String... columnExpressions)", "original_string": "    String csv(String separator, char quote, boolean withHeader, int limit, String... columnExpressions);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with generated csv based number of lines and column expressions.\n\n<p>\nFor example, it could generate\n\"Thad\" ### \"Crist\"\n\"Kathryne\" ### \"Wuckert\"\n\"Sybil\" ### \"Connelly\"\n<p>\nfor expression {@code faker.expression(\"#{csv ' ### ','\"','false','3','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\");}\n\n@param separator         Delimiter to use\n@param quote             Quote to use\n@param withHeader        Print header or not\n@param limit             Number of lines\n@param columnExpressions Even number of expressions.\n                         The odd numbers args are used for columns names, and even for column values.\n@return Generated string\n"}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]json()", "name": "json", "arg_nums": 0, "params": [], "return_type": "String", "signature": "String json(String... fieldExpressions)", "original_string": "    String json(String... fieldExpressions);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]jsona()", "name": "jsona", "arg_nums": 0, "params": [], "return_type": "String", "signature": "String jsona(String... fieldExpressions)", "original_string": "    String jsona(String... fieldExpressions);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[RandomService]random()", "name": "random", "arg_nums": 0, "params": [], "return_type": "RandomService", "signature": "RandomService random()", "original_string": "    RandomService random();", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "RandomService", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[String]expression(String)", "name": "expression", "arg_nums": 1, "params": [{"name": "expression", "type": "String"}], "return_type": "String", "signature": "String expression(String expression)", "original_string": "    String expression(String expression);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[FakeValuesService]fakeValuesService()", "name": "fakeValuesService", "arg_nums": 0, "params": [], "return_type": "FakeValuesService", "signature": "FakeValuesService fakeValuesService()", "original_string": "    FakeValuesService fakeValuesService();", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "FakeValuesService", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[Options]options()", "name": "options", "arg_nums": 0, "params": [], "return_type": "Options", "signature": "default Options options()", "original_string": "    default Options options() {\n        return getProvider(Options.class, Options::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Options", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[void]addPath(Locale,Path)", "name": "addPath", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "path", "type": "Path"}], "return_type": "void", "signature": "void addPath(Locale locale, Path path)", "original_string": "    void addPath(Locale locale, Path path);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration.[void]addUrl(Locale,URL)", "name": "addUrl", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "url", "type": "URL"}], "return_type": "void", "signature": "void addUrl(Locale locale, URL url)", "original_string": "    void addUrl(Locale locale, URL url);", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java", "class_name": "ProviderRegistration", "class_uri": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[]Cannabis(BaseProviders)", "name": "Cannabis", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Cannabis(BaseProviders faker)", "original_string": "    protected Cannabis(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cannabis.java", "class_name": "Cannabis", "class_uri": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]strains()", "name": "strains", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String strains()", "original_string": "    public String strains() {\n        return resolve(\"cannabis.strains\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cannabis.java", "class_name": "Cannabis", "class_uri": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]cannabinoidAbbreviations()", "name": "cannabinoidAbbreviations", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String cannabinoidAbbreviations()", "original_string": "    public String cannabinoidAbbreviations() {\n        return resolve(\"cannabis.cannabinoid_abbreviations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cannabis.java", "class_name": "Cannabis", "class_uri": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]cannabinoids()", "name": "cannabinoids", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String cannabinoids()", "original_string": "    public String cannabinoids() {\n        return resolve(\"cannabis.cannabinoids\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cannabis.java", "class_name": "Cannabis", "class_uri": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]terpenes()", "name": "terpenes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String terpenes()", "original_string": "    public String terpenes() {\n        return resolve(\"cannabis.terpenes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cannabis.java", "class_name": "Cannabis", "class_uri": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]medicalUses()", "name": "medicalUses", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String medicalUses()", "original_string": "    public String medicalUses() {\n        return resolve(\"cannabis.medical_uses\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cannabis.java", "class_name": "Cannabis", "class_uri": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]healthBenefits()", "name": "healthBenefits", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String healthBenefits()", "original_string": "    public String healthBenefits() {\n        return resolve(\"cannabis.health_benefits\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cannabis.java", "class_name": "Cannabis", "class_uri": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]categories()", "name": "categories", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String categories()", "original_string": "    public String categories() {\n        return resolve(\"cannabis.categories\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cannabis.java", "class_name": "Cannabis", "class_uri": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]types()", "name": "types", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String types()", "original_string": "    public String types() {\n        return resolve(\"cannabis.types\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cannabis.java", "class_name": "Cannabis", "class_uri": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]buzzwords()", "name": "buzzwords", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String buzzwords()", "original_string": "    public String buzzwords() {\n        return resolve(\"cannabis.buzzwords\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cannabis.java", "class_name": "Cannabis", "class_uri": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis.[String]brands()", "name": "brands", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String brands()", "original_string": "    public String brands() {\n        return resolve(\"cannabis.brands\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Cannabis.java", "class_name": "Cannabis", "class_uri": "src/main/java/net/datafaker/providers/base/Cannabis.java.Cannabis", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[]BaseFaker()", "name": "BaseFaker", "arg_nums": 0, "params": [], "return_type": "", "signature": "public BaseFaker()", "original_string": "    public BaseFaker() {\n        this(Locale.ENGLISH);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[]BaseFaker(Locale)", "name": "BaseFaker", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "", "signature": "public BaseFaker(Locale locale)", "original_string": "    public BaseFaker(Locale locale) {\n        this(locale, (Random) null);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[]BaseFaker(Random)", "name": "BaseFaker", "arg_nums": 1, "params": [{"name": "random", "type": "Random"}], "return_type": "", "signature": "public BaseFaker(Random random)", "original_string": "    public BaseFaker(Random random) {\n        this(Locale.ENGLISH, random);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[]BaseFaker(Locale,Random)", "name": "BaseFaker", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "random", "type": "Random"}], "return_type": "", "signature": "public BaseFaker(Locale locale, Random random)", "original_string": "    public BaseFaker(Locale locale, Random random) {\n        this(locale, new RandomService(random));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[]BaseFaker(Locale,RandomService)", "name": "BaseFaker", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "randomService", "type": "RandomService"}], "return_type": "", "signature": "public BaseFaker(Locale locale, RandomService randomService)", "original_string": "    public BaseFaker(Locale locale, RandomService randomService) {\n        this(new FakeValuesService(), new FakerContext(locale, randomService));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[]BaseFaker(FakeValuesService,FakerContext)", "name": "BaseFaker", "arg_nums": 2, "params": [{"name": "fakeValuesService", "type": "FakeValuesService"}, {"name": "context", "type": "FakerContext"}], "return_type": "", "signature": "public BaseFaker(FakeValuesService fakeValuesService, FakerContext context)", "original_string": "    public BaseFaker(FakeValuesService fakeValuesService, FakerContext context) {\n        this.fakeValuesService = fakeValuesService;\n        this.context = context;\n        fakeValuesService.updateFakeValuesInterfaceMap(context.getLocaleChain());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakerContext]getContext()", "name": "getContext", "arg_nums": 0, "params": [], "return_type": "FakerContext", "signature": "public FakerContext getContext()", "original_string": "    public FakerContext getContext() {\n        return context;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "FakerContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[T]doWith(Callable<T>,Locale)", "name": "doWith", "arg_nums": 2, "params": [{"name": "callable", "type": "Callable<T>"}, {"name": "locale", "type": "Locale"}], "return_type": "T", "signature": "public <T> T doWith(Callable<T> callable, Locale locale)", "original_string": "    public <T> T doWith(Callable<T> callable, Locale locale) {\n        final Locale current = context.getLocale();\n        T result;\n        try {\n            context.setCurrentLocale(locale);\n            fakeValuesService.updateFakeValuesInterfaceMap(context.getLocaleChain());\n            result = callable.call();\n            return result;\n        } catch (RuntimeException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            context.setCurrentLocale(current);\n            fakeValuesService.updateFakeValuesInterfaceMap(context.getLocaleChain());\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[T]doWith(Callable<T>,long)", "name": "doWith", "arg_nums": 2, "params": [{"name": "callable", "type": "Callable<T>"}, {"name": "seed", "type": "long"}], "return_type": "T", "signature": "public <T> T doWith(Callable<T> callable, long seed)", "original_string": "    public <T> T doWith(Callable<T> callable, long seed) {\n        final RandomService current = context.getRandomService();\n        T result;\n        try {\n            context.setRandomService(new RandomService(new Random(seed)));\n            result = callable.call();\n            return result;\n        } catch (RuntimeException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            context.setRandomService(current);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[T]doWith(Callable<T>,Locale,long)", "name": "doWith", "arg_nums": 3, "params": [{"name": "callable", "type": "Callable<T>"}, {"name": "locale", "type": "Locale"}, {"name": "seed", "type": "long"}], "return_type": "T", "signature": "public <T> T doWith(Callable<T> callable, Locale locale, long seed)", "original_string": "    public <T> T doWith(Callable<T> callable, Locale locale, long seed) {\n        final Locale currentLocale = context.getLocale();\n        final RandomService currentRandomService = context.getRandomService();\n        T result;\n        try {\n            context.setRandomService(new RandomService(new Random(seed)));\n            context.setCurrentLocale(locale);\n            result = callable.call();\n            return result;\n        } catch (RuntimeException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        } finally {\n            context.setRandomService(currentRandomService);\n            context.setCurrentLocale(currentLocale);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]numerify(String)", "name": "numerify", "arg_nums": 1, "params": [{"name": "numberString", "type": "String"}], "return_type": "String", "signature": "public String numerify(String numberString)", "original_string": "    public String numerify(String numberString) {\n        return fakeValuesService.numerify(numberString, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with the '#' characters in the parameter replaced with random digits between 0-9 inclusive or\nrandom digits in the range from 1-9 when \u00d8 (not zero) is used.\n<p>\nFor example, the string \"ABC##EFG\" could be replaced with a string like \"ABC99EFG\" and the\nstring \"\u00d8##\" with a value like \"149\".\n\n@param numberString Template for string generation\n@return Generated string\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]letterify(String)", "name": "letterify", "arg_nums": 1, "params": [{"name": "letterString", "type": "String"}], "return_type": "String", "signature": "public String letterify(String letterString)", "original_string": "    public String letterify(String letterString) {\n        return fakeValuesService.letterify(letterString, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with the '?' characters in the parameter replaced with random alphabetic\ncharacters.\n<p>\nFor example, the string \"12??34\" could be replaced with a string like \"12AB34\".\n\n@param letterString Template for string generation\n@return Generated string.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]letterify(String,boolean)", "name": "letterify", "arg_nums": 2, "params": [{"name": "letterString", "type": "String"}, {"name": "isUpper", "type": "boolean"}], "return_type": "String", "signature": "public String letterify(String letterString, boolean isUpper)", "original_string": "    public String letterify(String letterString, boolean isUpper) {\n        return fakeValuesService.letterify(letterString, context, isUpper);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with the '?' characters in the parameter replaced with random alphabetic\ncharacters.\n<p>\nFor example, the string \"12??34\" could be replaced with a string like \"12AB34\".\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]bothify(String)", "name": "bothify", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "String", "signature": "public String bothify(String string)", "original_string": "    public String bothify(String string) {\n        return fakeValuesService.bothify(string, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nApplies both a {@link #numerify(String)} and a {@link #letterify(String)}\nover the incoming string.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]bothify(String,boolean)", "name": "bothify", "arg_nums": 2, "params": [{"name": "string", "type": "String"}, {"name": "isUpper", "type": "boolean"}], "return_type": "String", "signature": "public String bothify(String string, boolean isUpper)", "original_string": "    public String bothify(String string, boolean isUpper) {\n        return fakeValuesService.bothify(string, context, isUpper);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nApplies both a {@link #numerify(String)} and a {@link #letterify(String)}\nover the incoming string.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]regexify(String)", "name": "regexify", "arg_nums": 1, "params": [{"name": "regex", "type": "String"}], "return_type": "String", "signature": "public String regexify(String regex)", "original_string": "    public String regexify(String regex) {\n        return fakeValuesService.regexify(regex, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a String that matches the given regular expression.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]examplify(String)", "name": "examplify", "arg_nums": 1, "params": [{"name": "example", "type": "String"}], "return_type": "String", "signature": "public String examplify(String example)", "original_string": "    public String examplify(String example) {\n        return fakeValuesService.examplify(example, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a String by example. The output string will have the same pattern as the input string.\n<p>\nFor example:\n\"AAA\" becomes \"KRA\"\n\"abc\" becomes \"uio\"\n\"948\" becomes \"345\"\n\"A19c\" becomes \"Z20d\"\n\n@param example The input string\n@return The output string based on the input pattern\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]templatify(String,char)", "name": "templatify", "arg_nums": 2, "params": [{"name": "string", "type": "String"}, {"name": "char2replace", "type": "char"}], "return_type": "String", "signature": "public String templatify(String string, char char2replace, String... options)", "original_string": "    public String templatify(String string, char char2replace, String... options) {\n        return fakeValuesService().templatify(string, char2replace, context, options);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with the char2replace characters in the parameter replaced with random option from available options.\n<p>\nFor example, the string \"ABC??EFG\" could be replaced with a string like \"ABCtest\u0442\u0435\u0441\u0442EFG\"\nif passed options are new String[]{\"test\", \"\u0442\u0435\u0441\u0442\"}.\n\n@param string       Template for string generation\n@param char2replace Char to replace\n@param options      Options to use while filling the template\n@return Generated string\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]templatify(String,Map<Character, String[]>)", "name": "templatify", "arg_nums": 2, "params": [{"name": "string", "type": "String"}, {"name": "optionsMap", "type": "Map<Character, String[]>"}], "return_type": "String", "signature": "public String templatify(String string, Map<Character, String[]> optionsMap)", "original_string": "    public String templatify(String string, Map<Character, String[]> optionsMap) {\n        return fakeValuesService().templatify(string, optionsMap, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with the characters in the keys of optionsMap parameter replaced with random option from values.\n\n<p>\nFor example, the string \"ABC$$EFG\" could be replaced with a string like \"ABCtest\u0442\u0435\u0441\u0442EFG\"\nif passed for key '$' there is value new String[]{\"test\", \"\u0442\u0435\u0441\u0442\"} in optionsMap\n\n@param string     Template for string generation\n@param optionsMap Map with replacement rules\n@return Generated string\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]csv(int)", "name": "csv", "arg_nums": 1, "params": [{"name": "limit", "type": "int"}], "return_type": "String", "signature": "public String csv(int limit, String... columnExpressions)", "original_string": "    public String csv(int limit, String... columnExpressions) {\n        return fakeValuesService().csv(limit, columnExpressions);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with generated csv based number of lines and column expressions.\nThis method will use comma as default delimiter, always prints header and double quote as default quote.\n\n<p>\nFor example, it could generate\n\"name_column\",\"last_name_column\"\n\"Sabrina\",\"Kihn\"\n<p>\nfor expression {@code faker.expression(\"#{csv '1','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\");}\n\n@param limit             Number of lines\n@param columnExpressions Even number of expressions.\n                         The odd numbers args are used for columns names, and even for column values.\n@return Generated string\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]csv(String,char,boolean,int)", "name": "csv", "arg_nums": 4, "params": [{"name": "separator", "type": "String"}, {"name": "quote", "type": "char"}, {"name": "withHeader", "type": "boolean"}, {"name": "limit", "type": "int"}], "return_type": "String", "signature": "public String csv(String separator, char quote, boolean withHeader, int limit, String... columnExpressions)", "original_string": "    public String csv(String separator, char quote, boolean withHeader, int limit, String... columnExpressions) {\n        return fakeValuesService().csv(separator, quote, withHeader, limit, columnExpressions);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with generated csv based number of lines and column expressions.\n\n<p>\nFor example, it could generate\n\"Thad\" ### \"Crist\"\n\"Kathryne\" ### \"Wuckert\"\n\"Sybil\" ### \"Connelly\"\n<p>\nfor expression {@code faker.expression(\"#{csv ' ### ','\"','false','3','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\");}\n\n@param separator         Delimiter to use\n@param quote             Quote to use\n@param withHeader        Print header or not\n@param limit             Number of lines\n@param columnExpressions Even number of expressions.\n                         The odd numbers args are used for columns names, and even for column values.\n@return Generated string\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]json()", "name": "json", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String json(String... fieldExpressions)", "original_string": "    public String json(String... fieldExpressions) {\n        return fakeValuesService().json(fieldExpressions);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]jsona()", "name": "jsona", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String jsona(String... fieldExpressions)", "original_string": "    public String jsona(String... fieldExpressions) {\n        return fakeValuesService().jsona(fieldExpressions);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[RandomService]random()", "name": "random", "arg_nums": 0, "params": [], "return_type": "RandomService", "signature": "public RandomService random()", "original_string": "    public RandomService random() {\n        return this.context.getRandomService();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RandomService", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakeValuesService]fakeValuesService()", "name": "fakeValuesService", "arg_nums": 0, "params": [], "return_type": "FakeValuesService", "signature": "public FakeValuesService fakeValuesService()", "original_string": "    public FakeValuesService fakeValuesService() {\n        return this.fakeValuesService;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "FakeValuesService", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[void]addPath(Locale,Path)", "name": "addPath", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "path", "type": "Path"}], "return_type": "void", "signature": "public void addPath(Locale locale, Path path)", "original_string": "    public void addPath(Locale locale, Path path) {\n        fakeValuesService().addPath(locale, path);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAllows to add paths to files with custom data. Data should be in YAML format.\n\n@param locale the locale for which a path is going to be added.\n@param path   path to a file with YAML structure\n@throws IllegalArgumentException in case of invalid path\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[void]addUrl(Locale,URL)", "name": "addUrl", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "url", "type": "URL"}], "return_type": "void", "signature": "public void addUrl(Locale locale, URL url)", "original_string": "    public void addUrl(Locale locale, URL url) {\n        fakeValuesService().addUrl(locale, url);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAllows to add urls of files with custom data. Data should be in YAML format.\n\n@param locale the locale for which an url is going to be added.\n@param url   url of a file with YAML structure\n@throws IllegalArgumentException in case of invalid url\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[T]populate(Class<T>)", "name": "populate", "arg_nums": 1, "params": [{"name": "clazz", "type": "Class<T>"}], "return_type": "T", "signature": "public static <T> T populate(Class<T> clazz)", "original_string": "    public static <T> T populate(Class<T> clazz) {\n        var fakeFactory = FakeResolver.of(clazz);\n        return fakeFactory.generate(null);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[T]populate(Class<T>,Schema<Object, ?>)", "name": "populate", "arg_nums": 2, "params": [{"name": "clazz", "type": "Class<T>"}, {"name": "schema", "type": "Schema<Object, ?>"}], "return_type": "T", "signature": "public static <T> T populate(Class<T> clazz, Schema<Object, ?> schema)", "original_string": "    public static <T> T populate(Class<T> clazz, Schema<Object, ?> schema) {\n        var fakeFactory = FakeResolver.of(clazz);\n        return fakeFactory.generate(schema);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[AP]getProvider(Class<AP>,Function<PR, AP>)", "name": "getProvider", "arg_nums": 2, "params": [{"name": "clazz", "type": "Class<AP>"}, {"name": "valueSupplier", "type": "Function<PR, AP>"}], "return_type": "AP", "signature": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public <PR extends ProviderRegistration, AP extends AbstractProvider<PR>> AP getProvider(\n        Class<AP> clazz, Function<PR, AP> valueSupplier)", "original_string": "    @Override\n    @SuppressWarnings(\"unchecked\")\n    public <PR extends ProviderRegistration, AP extends AbstractProvider<PR>> AP getProvider(\n        Class<AP> clazz, Function<PR, AP> valueSupplier) {\n        return (AP) providersCache.computeIfAbsent(clazz, (klass) -> valueSupplier.apply(getFaker()));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "AP", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[AP]getProvider(Class<AP>,Function<PR, AP>,PR)", "name": "getProvider", "arg_nums": 3, "params": [{"name": "clazz", "type": "Class<AP>"}, {"name": "valueSupplier", "type": "Function<PR, AP>"}, {"name": "faker", "type": "PR"}], "return_type": "AP", "signature": "@Deprecated\n    public static <PR extends ProviderRegistration, AP extends AbstractProvider<PR>> AP getProvider(Class<AP> clazz, Function<PR, AP> valueSupplier, PR faker)", "original_string": "    @Deprecated\n    public static <PR extends ProviderRegistration, AP extends AbstractProvider<PR>> AP getProvider(Class<AP> clazz, Function<PR, AP> valueSupplier, PR faker) {\n        return faker.getProvider(clazz, valueSupplier);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "@Deprecated\n    public static", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "AP", "classes": []}, "docstring": "\nThis method is not needed anymore, don't use it.\n@deprecated Use non-static method {@link BaseFaker#getProvider(Class, Function)} instead.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakeSequence.Builder<T>]collection()", "name": "collection", "arg_nums": 0, "params": [], "return_type": "FakeSequence.Builder<T>", "signature": "public <T> FakeSequence.Builder<T> collection()", "original_string": "    public <T> FakeSequence.Builder<T> collection() {\n        return new FakeCollection.Builder<T>().faker(this);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "FakeSequence.Builder<T>", "classes": []}, "docstring": "\n@return builder to build {@code FakeCollection}\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakeSequence.Builder<T>]collection()", "name": "collection", "arg_nums": 0, "params": [], "return_type": "FakeSequence.Builder<T>", "signature": "@SafeVarargs\n    public final <T> FakeSequence.Builder<T> collection(Supplier<T>... suppliers)", "original_string": "    @SafeVarargs\n    public final <T> FakeSequence.Builder<T> collection(Supplier<T>... suppliers) {\n        return new FakeCollection.Builder<>(suppliers).faker(this);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "@SafeVarargs\n    public final", "marker_annotations": ["@SafeVarargs"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "FakeSequence.Builder<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakeSequence.Builder<T>]collection(List<Supplier<T>>)", "name": "collection", "arg_nums": 1, "params": [{"name": "suppliers", "type": "List<Supplier<T>>"}], "return_type": "FakeSequence.Builder<T>", "signature": "public final <T> FakeSequence.Builder<T> collection(List<Supplier<T>> suppliers)", "original_string": "    public final <T> FakeSequence.Builder<T> collection(List<Supplier<T>> suppliers) {\n        return new FakeCollection.Builder<>(suppliers).faker(this);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "FakeSequence.Builder<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakeSequence.Builder<T>]stream()", "name": "stream", "arg_nums": 0, "params": [], "return_type": "FakeSequence.Builder<T>", "signature": "public <T> FakeSequence.Builder<T> stream()", "original_string": "    public <T> FakeSequence.Builder<T> stream() {\n        return new FakeStream.Builder<T>().faker(this);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "FakeSequence.Builder<T>", "classes": []}, "docstring": "\n@return builder to build {@code FakeStream}\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakeSequence.Builder<T>]stream()", "name": "stream", "arg_nums": 0, "params": [], "return_type": "FakeSequence.Builder<T>", "signature": "@SafeVarargs\n    public final <T> FakeSequence.Builder<T> stream(Supplier<T>... suppliers)", "original_string": "    @SafeVarargs\n    public final <T> FakeSequence.Builder<T> stream(Supplier<T>... suppliers) {\n        return new FakeStream.Builder<>(suppliers).faker(this);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "@SafeVarargs\n    public final", "marker_annotations": ["@SafeVarargs"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "FakeSequence.Builder<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[FakeSequence.Builder<T>]stream(List<Supplier<T>>)", "name": "stream", "arg_nums": 1, "params": [{"name": "suppliers", "type": "List<Supplier<T>>"}], "return_type": "FakeSequence.Builder<T>", "signature": "public final <T> FakeSequence.Builder<T> stream(List<Supplier<T>> suppliers)", "original_string": "    public final <T> FakeSequence.Builder<T> stream(List<Supplier<T>> suppliers) {\n        return new FakeStream.Builder<>(suppliers).faker(this);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public final", "marker_annotations": [], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "FakeSequence.Builder<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]resolve(String)", "name": "resolve", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "String", "signature": "public String resolve(String key)", "original_string": "    public String resolve(String key) {\n        return this.fakeValuesService.resolve(key, this, this, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]resolve(String,Supplier<String>)", "name": "resolve", "arg_nums": 2, "params": [{"name": "key", "type": "String"}, {"name": "message", "type": "Supplier<String>"}], "return_type": "String", "signature": "public String resolve(String key, Supplier<String> message)", "original_string": "    public String resolve(String key, Supplier<String> message) {\n        return this.fakeValuesService.resolve(key, this, this, message, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]expression(String)", "name": "expression", "arg_nums": 1, "params": [{"name": "expression", "type": "String"}], "return_type": "String", "signature": "public String expression(String expression)", "original_string": "    public String expression(String expression) {\n        return this.fakeValuesService.expression(expression, this, getContext());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nAllows the evaluation of native YML expressions to allow you to build your\nown.\n<p>\nThe following are valid expressions:\n<ul>\n<li>#{regexify '(a|b){2,3}'}</li>\n<li>#{regexify '\\\\.\\\\*\\\\?\\\\+'}</li>\n<li>#{bothify '????','false'}</li>\n<li>#{Name.first_name} #{Name.first_name} #{Name.last_name}</li>\n<li>#{number.number_between '1','10'}</li>\n</ul>\n\n@param expression (see examples above)\n@return the evaluated string expression\n@throws RuntimeException if unable to evaluate the expression\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[B]getFaker()", "name": "getFaker", "arg_nums": 0, "params": [], "return_type": "B", "signature": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public final <B extends ProviderRegistration> B getFaker()", "original_string": "    @Override\n    @SuppressWarnings(\"unchecked\")\n    public final <B extends ProviderRegistration> B getFaker() {\n        return (B) this;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public final", "marker_annotations": ["@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public", "final"], "comments": [], "return_type": "B", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[Method]getMethod(AbstractProvider<?>,String)", "name": "getMethod", "arg_nums": 2, "params": [{"name": "ap", "type": "AbstractProvider<?>"}, {"name": "methodName", "type": "String"}], "return_type": "Method", "signature": "public static Method getMethod(AbstractProvider<?> ap, String methodName)", "original_string": "    public static Method getMethod(AbstractProvider<?> ap, String methodName) {\n        return ap == null ? null : ObjectMethods.getMethodByName(ap, methodName);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Method", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return getClass().getSimpleName() + \"@\" + Integer.toHexString(hashCode());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseFaker.java", "class_name": "BaseFaker", "class_uri": "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns.[]Pronouns(BaseProviders)", "name": "Pronouns", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Pronouns(BaseProviders faker)", "original_string": "    protected Pronouns(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Pronouns.java", "class_name": "Pronouns", "class_uri": "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns.[String]subjective()", "name": "subjective", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String subjective()", "original_string": "    public String subjective() {\n        return resolve(\"pronouns.subjective\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Pronouns.java", "class_name": "Pronouns", "class_uri": "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a gender neutral subjective pronoun\n@return a gender neutral subjective pronoun\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns.[String]objective()", "name": "objective", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String objective()", "original_string": "    public String objective() {\n        return resolve(\"pronouns.objective\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Pronouns.java", "class_name": "Pronouns", "class_uri": "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a gender neutral objective pronoun\n@return a gender neutral objective pronoun\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns.[String]possessive()", "name": "possessive", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String possessive()", "original_string": "    public String possessive() {\n        return resolve(\"pronouns.possessive\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Pronouns.java", "class_name": "Pronouns", "class_uri": "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a gender neutral possessive pronoun\n@return a gender neutral possessive pronoun\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns.[String]reflexive()", "name": "reflexive", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String reflexive()", "original_string": "    public String reflexive() {\n        return resolve(\"pronouns.reflexive\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Pronouns.java", "class_name": "Pronouns", "class_uri": "src/main/java/net/datafaker/providers/base/Pronouns.java.Pronouns", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a gender neutral reflexive pronoun\n@return a gender neutral reflexive pronoun\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Stock.java.Stock.[]Stock(BaseProviders)", "name": "Stock", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Stock(BaseProviders faker)", "original_string": "    protected Stock(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Stock.java", "class_name": "Stock", "class_uri": "src/main/java/net/datafaker/providers/base/Stock.java.Stock", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Stock.java.Stock.[String]nsdqSymbol()", "name": "nsdqSymbol", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String nsdqSymbol()", "original_string": "    public String nsdqSymbol() {\n        return resolve(\"stock.symbol_nsdq\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Stock.java", "class_name": "Stock", "class_uri": "src/main/java/net/datafaker/providers/base/Stock.java.Stock", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Stock.java.Stock.[String]nyseSymbol()", "name": "nyseSymbol", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String nyseSymbol()", "original_string": "    public String nyseSymbol() {\n        return resolve(\"stock.symbol_nyse\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Stock.java", "class_name": "Stock", "class_uri": "src/main/java/net/datafaker/providers/base/Stock.java.Stock", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Stock.java.Stock.[String]nseSymbol()", "name": "nseSymbol", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String nseSymbol()", "original_string": "    public String nseSymbol() {\n        return resolve(\"stock.symbol_nse\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Stock.java", "class_name": "Stock", "class_uri": "src/main/java/net/datafaker/providers/base/Stock.java.Stock", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Stock.java.Stock.[String]lseSymbol()", "name": "lseSymbol", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String lseSymbol()", "original_string": "    public String lseSymbol() {\n        return resolve(\"stock.symbol_lse\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Stock.java", "class_name": "Stock", "class_uri": "src/main/java/net/datafaker/providers/base/Stock.java.Stock", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Stock.java.Stock.[String]exchanges()", "name": "exchanges", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String exchanges()", "original_string": "    public String exchanges() {\n        return resolve(\"stock.exchanges\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Stock.java", "class_name": "Stock", "class_uri": "src/main/java/net/datafaker/providers/base/Stock.java.Stock", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java.ProgrammingLanguage.[]ProgrammingLanguage(BaseProviders)", "name": "ProgrammingLanguage", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "public ProgrammingLanguage(BaseProviders faker)", "original_string": "    public ProgrammingLanguage(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java", "class_name": "ProgrammingLanguage", "class_uri": "src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java.ProgrammingLanguage", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java.ProgrammingLanguage.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"programming_language.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java", "class_name": "ProgrammingLanguage", "class_uri": "src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java.ProgrammingLanguage", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java.ProgrammingLanguage.[String]creator()", "name": "creator", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String creator()", "original_string": "    public String creator() {\n        return resolve(\"programming_language.creator\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java", "class_name": "ProgrammingLanguage", "class_uri": "src/main/java/net/datafaker/providers/base/ProgrammingLanguage.java.ProgrammingLanguage", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[]Internet(BaseProviders)", "name": "Internet", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Internet(BaseProviders faker)", "original_string": "    protected Internet(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]username()", "name": "username", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String username()", "original_string": "    public String username() {\n        StringBuilder result = new StringBuilder();\n        final Name name = faker.name();\n        final String firstName = name.firstName().toLowerCase(faker.getContext().getLocale())\n            + \".\" + name.lastName().toLowerCase(faker.getContext().getLocale());\n        for (int i = 0; i < firstName.length(); i++) {\n            final char c = firstName.charAt(i);\n            if (c == '\\'' || Character.isWhitespace(c)) {\n                continue;\n            }\n            result.append(c);\n        }\n        return result.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nA lowercase username composed of the first_name and last_name joined with a '.'. Some examples are:\n<ul>\n    <li>(template) {@link Name#firstName()}.{@link Name#lastName()}</li>\n    <li>jim.jones</li>\n    <li>jason.leigh</li>\n    <li>tracy.jordan</li>\n</ul>\n\n@return a random two part username.\n@see Name#firstName()\n@see Name#lastName()\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]emailAddress()", "name": "emailAddress", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String emailAddress()", "original_string": "    public String emailAddress() {\n        return emailAddress(faker.internet().username());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]emailAddress(String)", "name": "emailAddress", "arg_nums": 1, "params": [{"name": "localPart", "type": "String"}], "return_type": "String", "signature": "public String emailAddress(String localPart)", "original_string": "    public String emailAddress(String localPart) {\n        return emailAddress(localPart, FakerIDN.toASCII(faker.resolve(\"internet.free_email\")));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]safeEmailAddress()", "name": "safeEmailAddress", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String safeEmailAddress()", "original_string": "    public String safeEmailAddress() {\n        return safeEmailAddress(faker.internet().username());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]safeEmailAddress(String)", "name": "safeEmailAddress", "arg_nums": 1, "params": [{"name": "localPart", "type": "String"}], "return_type": "String", "signature": "public String safeEmailAddress(String localPart)", "original_string": "    public String safeEmailAddress(String localPart) {\n        return emailAddress(localPart, FakerIDN.toASCII(faker.resolve(\"internet.safe_email\")));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]emailAddress(String,String)", "name": "emailAddress", "arg_nums": 2, "params": [{"name": "localPart", "type": "String"}, {"name": "domain", "type": "String"}], "return_type": "String", "signature": "private String emailAddress(String localPart, String domain)", "original_string": "    private String emailAddress(String localPart, String domain) {\n        return String.join(\"\", stripAccents(localPart), \"@\", domain);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]emailSubject()", "name": "emailSubject", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String emailSubject()", "original_string": "    public String emailSubject() {\n        return resolve(\"internet.email_subject\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]stripAccents(String)", "name": "stripAccents", "arg_nums": 1, "params": [{"name": "input", "type": "String"}], "return_type": "String", "signature": "private String stripAccents(String input)", "original_string": "    private String stripAccents(String input) {\n        // strip accents from input\n        String str = Normalizer.normalize(input, Normalizer.Form.NFD);\n        str = DIACRITICS_AND_FRIENDS.matcher(str).replaceAll(\"\");\n        return str;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]domainName()", "name": "domainName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String domainName()", "original_string": "    public String domainName() {\n        return domainWord() + \".\" + domainSuffix();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]domainWord()", "name": "domainWord", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String domainWord()", "original_string": "    public String domainWord() {\n        return FakerIDN.toASCII(\n            faker.name().lastName().toLowerCase(faker.getContext().getLocale()).replace(\"'\", \"\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]domainSuffix()", "name": "domainSuffix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String domainSuffix()", "original_string": "    public String domainSuffix() {\n        return resolve(\"internet.domain_suffix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]url()", "name": "url", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String url()", "original_string": "    public String url() {\n        final byte[] bts = faker.random().nextRandomBytes(6);\n        return url(bts[0] % 2 == 0, bts[1] % 2 == 0,\n            bts[2] % 2 == 0, bts[3] % 2 == 0,\n            bts[4] % 2 == 0, bts[5] % 2 == 0);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string representing a web URL, randomly including: http/https scheme, port, path\nelements (2 or none), file element (1 or none), params (2 or none), anchor (1 or none).\n\n@return a web URL\n@since 2.0.0\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]url(boolean,boolean,boolean,boolean,boolean,boolean)", "name": "url", "arg_nums": 6, "params": [{"name": "schemeChoice", "type": "boolean"}, {"name": "portChoice", "type": "boolean"}, {"name": "pathChoice", "type": "boolean"}, {"name": "fileChoice", "type": "boolean"}, {"name": "paramsChoice", "type": "boolean"}, {"name": "anchorChoice", "type": "boolean"}], "return_type": "String", "signature": "public String url(boolean schemeChoice, boolean portChoice, boolean pathChoice, boolean fileChoice, boolean paramsChoice, boolean anchorChoice)", "original_string": "    public String url(boolean schemeChoice, boolean portChoice, boolean pathChoice, boolean fileChoice, boolean paramsChoice, boolean anchorChoice) {\n        String scheme = schemeChoice ? HTTP_SCHEMES.get(faker.random().nextInt(0, 1)) : \"https://\";\n        String port = portChoice ? (\":\" + port()) : \"\";\n        String path = pathChoice ? (\"/\" + slug(faker.lorem().words(2), \"/\")) : \"/\";\n        String file = fileChoice ? faker.lorem().words(1).get(0) : \"\";\n        String params = paramsChoice ? (\"?\" + slug(faker.lorem().words(2), \"=\") + \"&\" + slug(faker.lorem().words(2), \"=\")) : \"\";\n        String anchor = anchorChoice ? (\"#\" + faker.lorem().words(1).get(0)) : \"\";\n        return scheme + webdomain() + port + path + file + params + anchor;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string representing a web URL, with various elements controlled by the caller.\n\n@param schemeChoice if true will be random http or https, if false will be https\n@param portChoice   if true a random port will be included, if false no port will be included\n@param pathChoice   if true two random path elements will be included, if false no path elements will be included\n@param fileChoice   if true the path will end with a random word element instead of a slash, if false it will end with a slash\n@param paramsChoice if true two random name value pairs will be included, if false no params will be included\n@param anchorChoice if true a random anchor will be included, if false no anchor will be included\n@return a web URL\n@since 2.0.0\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]webdomain()", "name": "webdomain", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String webdomain()", "original_string": "    public String webdomain() {\n        return String.join(\"\",\n            \"www\", \".\",\n            FakerIDN.toASCII(\n                faker.name().firstName().toLowerCase(\n                    faker.getContext().getLocale()).replace(\"'\", \"\") + \"-\" +\n                    domainWord()\n            ),\n            \".\",\n            domainSuffix()\n        );\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a web domain.\n\n@return a web domain in the form \"www.example.com\"\n@since 2.0.0\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]image()", "name": "image", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String image()", "original_string": "    public String image() {\n        String[] dimension = resolve(\"internet.image_dimension\").split(\"x\");\n        if (dimension.length == 0) {\n            return \"\";\n        } else {\n            return image(Integer.parseInt(dimension[0].trim()), Integer.parseInt(dimension[1].trim()));\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]image(int,int)", "name": "image", "arg_nums": 2, "params": [{"name": "width", "type": "int"}, {"name": "height", "type": "int"}], "return_type": "String", "signature": "public String image(int width, int height)", "original_string": "    public String image(int width, int height) {\n        return \"https://picsum.photos/%s/%s\".formatted(width, height);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]image(int,int,String)", "name": "image", "arg_nums": 3, "params": [{"name": "width", "type": "int"}, {"name": "height", "type": "int"}, {"name": "seed", "type": "String"}], "return_type": "String", "signature": "public String image(int width, int height, String seed)", "original_string": "    public String image(int width, int height, String seed) {\n        return \"https://picsum.photos/seed/%s/%s/%s\".formatted(seed, width, height);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]httpMethod()", "name": "httpMethod", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String httpMethod()", "original_string": "    public String httpMethod() {\n        return resolve(\"internet.http_method\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]password()", "name": "password", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String password()", "original_string": "    public String password() {\n        return password(8, 16);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]password(boolean)", "name": "password", "arg_nums": 1, "params": [{"name": "includeDigit", "type": "boolean"}], "return_type": "String", "signature": "public String password(boolean includeDigit)", "original_string": "    public String password(boolean includeDigit) {\n        return password(8, 16, false, false, includeDigit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]password(int,int)", "name": "password", "arg_nums": 2, "params": [{"name": "minimumLength", "type": "int"}, {"name": "maximumLength", "type": "int"}], "return_type": "String", "signature": "public String password(int minimumLength, int maximumLength)", "original_string": "    public String password(int minimumLength, int maximumLength) {\n        return password(minimumLength, maximumLength, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]password(int,int,boolean)", "name": "password", "arg_nums": 3, "params": [{"name": "minimumLength", "type": "int"}, {"name": "maximumLength", "type": "int"}, {"name": "includeUppercase", "type": "boolean"}], "return_type": "String", "signature": "public String password(int minimumLength, int maximumLength, boolean includeUppercase)", "original_string": "    public String password(int minimumLength, int maximumLength, boolean includeUppercase) {\n        return password(minimumLength, maximumLength, includeUppercase, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]password(int,int,boolean,boolean)", "name": "password", "arg_nums": 4, "params": [{"name": "minimumLength", "type": "int"}, {"name": "maximumLength", "type": "int"}, {"name": "includeUppercase", "type": "boolean"}, {"name": "includeSpecial", "type": "boolean"}], "return_type": "String", "signature": "public String password(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeSpecial)", "original_string": "    public String password(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeSpecial) {\n        return password(minimumLength, maximumLength, includeUppercase, includeSpecial, true);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]password(int,int,boolean,boolean,boolean)", "name": "password", "arg_nums": 5, "params": [{"name": "minimumLength", "type": "int"}, {"name": "maximumLength", "type": "int"}, {"name": "includeUppercase", "type": "boolean"}, {"name": "includeSpecial", "type": "boolean"}, {"name": "includeDigit", "type": "boolean"}], "return_type": "String", "signature": "public String password(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeSpecial, boolean includeDigit)", "original_string": "    public String password(int minimumLength, int maximumLength, boolean includeUppercase, boolean includeSpecial, boolean includeDigit) {\n        return faker.text().text(minimumLength, maximumLength, includeUppercase, includeSpecial, includeDigit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[int]port()", "name": "port", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int port()", "original_string": "    public int port() {\n        return faker.random().nextInt(0, 65535);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nReturns a port number between 0 and 65535\n\n@return a port number\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]macAddress(String)", "name": "macAddress", "arg_nums": 1, "params": [{"name": "prefix", "type": "String"}], "return_type": "String", "signature": "public String macAddress(String prefix)", "original_string": "    public String macAddress(String prefix) {\n        final String tmp = (prefix == null) ? \"\" : prefix;\n        final int prefixLength = tmp.trim().isEmpty()\n            ? 0\n            : COLON.split(tmp).length;\n\n        final StringBuilder out = new StringBuilder(tmp);\n        for (int i = 0; i < 6 - prefixLength; i++) {\n            if (!out.isEmpty()) {\n                out.append(':');\n            }\n            out.append(Integer.toHexString(faker.random().nextInt(16)));\n            out.append(Integer.toHexString(faker.random().nextInt(16)));\n        }\n        return out.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Returns a MAC address in the following format: 6-bytes in MM:MM:MM:SS:SS:SS format.</p>\n\n@param prefix a prefix to put on the front of the address\n@return a correctly formatted MAC address\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]macAddress()", "name": "macAddress", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String macAddress()", "original_string": "    public String macAddress() {\n        return macAddress(\"\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@see Internet#macAddress(String)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]ipV4Address()", "name": "ipV4Address", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ipV4Address()", "original_string": "    public String ipV4Address() {\n        return getIpV4Address().getHostAddress();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nreturns an IPv4 address in dot separated octets.\n\n@return a correctly formatted IPv4 address.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[InetAddress]getIpV4Address()", "name": "getIpV4Address", "arg_nums": 0, "params": [], "return_type": "InetAddress", "signature": "public InetAddress getIpV4Address()", "original_string": "    public InetAddress getIpV4Address() {\n        return inet4Address((byte) (faker.random().nextInt(254) + 2), (byte) (faker.random().nextInt(254) + 2), (byte) (faker.random().nextInt(254) + 2), (byte) (faker.random().nextInt(254) + 2));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "InetAddress", "classes": []}, "docstring": "\nreturns an IPv4 address.\n\n@return an IPv4 address.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]privateIpV4Address()", "name": "privateIpV4Address", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String privateIpV4Address()", "original_string": "    public String privateIpV4Address() {\n        return getPrivateIpV4Address().getHostAddress();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a valid private IPV4 address in dot notation\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[InetAddress]getPrivateIpV4Address()", "name": "getPrivateIpV4Address", "arg_nums": 0, "params": [], "return_type": "InetAddress", "signature": "public InetAddress getPrivateIpV4Address()", "original_string": "    public InetAddress getPrivateIpV4Address() {\n        final Byte[] PRIVATE_FIRST_OCTET = {10, 127, (byte) 169, (byte) 192, (byte) 172};\n        final Byte[] PRIVATE_SECOND_OCTET_172 = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};\n\n        final RandomService r = faker.random();\n        byte first = random(PRIVATE_FIRST_OCTET),\n            second = (byte) r.nextInt(256),\n            third = (byte) r.nextInt(256),\n            fourth = (byte) r.nextInt(256);\n\n        switch (first) {\n            case (byte) 172 -> second = random(PRIVATE_SECOND_OCTET_172);\n            case (byte) 192 -> second = (byte) 168;\n            case (byte) 169 -> second = (byte) 254;\n        }\n        return inet4Address(first, second, third, fourth);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "InetAddress", "classes": []}, "docstring": "\n@return a private IPV4 address\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]publicIpV4Address()", "name": "publicIpV4Address", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String publicIpV4Address()", "original_string": "    public String publicIpV4Address() {\n        return getPublicIpV4Address().getHostAddress();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a valid public IPV4 address in dot notation\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[InetAddress]getPublicIpV4Address()", "name": "getPublicIpV4Address", "arg_nums": 0, "params": [], "return_type": "InetAddress", "signature": "public InetAddress getPublicIpV4Address()", "original_string": "    public InetAddress getPublicIpV4Address() {\n        final RandomService r = faker.random();\n\n        final byte[] PRIVATE_FIRST_OCTET = {10, 127, (byte) 169, (byte) 192, (byte) 172};\n\n        byte first = (byte) r.nextInt(256),\n            second = (byte) r.nextInt(256),\n            third = (byte) r.nextInt(256),\n            fourth = (byte) r.nextInt(256);\n\n        while (Arrays.binarySearch(PRIVATE_FIRST_OCTET, first) > 0) {\n            first = (byte) r.nextInt(256);\n        }\n        return inet4Address(first, second, third, fourth);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "InetAddress", "classes": []}, "docstring": "\n@return a valid public IPV4 address\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]ipV4Cidr()", "name": "ipV4Cidr", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ipV4Cidr()", "original_string": "    public String ipV4Cidr() {\n        return ipV4Address() +\n            '/' +\n            (faker.random().nextInt(31) + 1);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a valid IPV4 CIDR\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]ipV6Address()", "name": "ipV6Address", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ipV6Address()", "original_string": "    public String ipV6Address() {\n        return getIpV6Address().getHostAddress();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Returns an IPv6 address in hh:hh:hh:hh:hh:hh:hh:hh format.</p>\n\n@return a correctly formatted IPv6 address.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[InetAddress]getIpV6Address()", "name": "getIpV6Address", "arg_nums": 0, "params": [], "return_type": "InetAddress", "signature": "public InetAddress getIpV6Address()", "original_string": "    public InetAddress getIpV6Address() {\n        final RandomService random = faker.random();\n        final char[] res = new char[4 * 8 + 7];\n        for (int i = 0; i < 8; i++) {\n            int offset = 4 * i;\n            if (i > 0) {\n                res[i - 1 + offset] = ':';\n            }\n            char[] hex = random.hex(4, false).toCharArray();\n            System.arraycopy(hex, 0, res, i + offset, hex.length);\n        }\n        return inet6Address(String.valueOf(res));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "InetAddress", "classes": []}, "docstring": "\n<p>Returns an IPv6 address in hh:hh:hh:hh:hh:hh:hh:hh format.</p>\n\n@return a IPV6 address.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]ipV6Cidr()", "name": "ipV6Cidr", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ipV6Cidr()", "original_string": "    public String ipV6Cidr() {\n        return ipV6Address() +\n            '/' +\n            (faker.random().nextInt(127) + 1);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a valid IPV6 CIDR\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]slug()", "name": "slug", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String slug()", "original_string": "    public String slug() {\n        return slug(faker.lorem().words(2), \"_\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a slug using '_' as the word separator and two {@link Lorem} words as the values\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]slug(List<String>,String)", "name": "slug", "arg_nums": 2, "params": [{"name": "wordsOrNull", "type": "List<String>"}, {"name": "glueOrNull", "type": "String"}], "return_type": "String", "signature": "public String slug(List<String> wordsOrNull, String glueOrNull)", "original_string": "    public String slug(List<String> wordsOrNull, String glueOrNull) {\n        final String glue = glueOrNull == null\n            ? \"_\"\n            : glueOrNull;\n        final List<String> words = wordsOrNull == null\n            ? faker.lorem().words(2)\n            : wordsOrNull;\n\n        final StringBuilder slug = new StringBuilder();\n        for (int i = 0; i < words.size(); i++) {\n            if (i > 0) {\n                slug.append(glue);\n            }\n            slug.append(words.get(i));\n        }\n        return slug.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@param wordsOrNull if null, then 2 {@link Lorem} words\n@param glueOrNull  if null, \"_\"\n@return a slug string combining wordsOrNull with glueOrNull (ex. x_y)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]uuidv3()", "name": "uuidv3", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String uuidv3()", "original_string": "    public String uuidv3() {\n        return UUID.nameUUIDFromBytes(faker.random().nextRandomBytes(16)).toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a UUID (type 3) as String.\nUse this method (instead of {@link #uuid() uuid}) if you are\nusing a constant random seed and require the same output for different faker instances.     *\n\n@return a uuid as string.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]uuidv4()", "name": "uuidv4", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String uuidv4()", "original_string": "    public String uuidv4() {\n        return uuid();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]uuidv7()", "name": "uuidv7", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String uuidv7()", "original_string": "    public String uuidv7() {\n        // Get the current timestamp in milliseconds since Unix epoch\n        long timestamp = faker.random().nextLong();\n\n        // Generate random bits\n        long randomBits1 = faker.random().nextLong();\n        long randomBits2 = faker.random().nextLong();\n\n        // Combine timestamp and random bits\n        ByteBuffer bb = ByteBuffer.wrap(new byte[16]);\n        bb.putLong(timestamp);\n        bb.putLong(randomBits1 ^ randomBits2);\n\n        long mostSigBits = bb.getLong(0);\n        long leastSigBits = bb.getLong(8);\n\n        // Set the version to 7 (bits 4-7 of the time_hi_and_version field)\n        mostSigBits &= ~(0xF000L);  // clear version\n        mostSigBits |= 0x7000L;     // set to version 7\n\n        // Set the variant to IETF variant (bits 6-7 of the clock_seq_hi_and_reserved field)\n        leastSigBits &= ~(0xC000000000000000L); // clear variant\n        leastSigBits |= 0x8000000000000000L;    // set to IETF variant\n\n        return new UUID(mostSigBits, leastSigBits).toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]uuid()", "name": "uuid", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String uuid()", "original_string": "    public String uuid() {\n        String uuidv3 = uuidv3();\n        return uuidv3.substring(0, 14) + '4' + uuidv3.substring(15);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a UUID (type 4) as String.\n<p>\nThis returns a repeatable version of a version 4 UUID, which is a bit against the idea of a version 4 UUID,\nbut this is a faker library, not a UUID library.\n\n@return a v4 uuid as string.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[T]random(T[])", "name": "random", "arg_nums": 1, "params": [{"name": "src", "type": "T[]"}], "return_type": "T", "signature": "private <T> T random(T[] src)", "original_string": "    private <T> T random(T[] src) {\n        return src[faker.random().nextInt(src.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]userAgent(UserAgent)", "name": "userAgent", "arg_nums": 1, "params": [{"name": "userAgent", "type": "UserAgent"}], "return_type": "String", "signature": "public String userAgent(UserAgent userAgent)", "original_string": "    public String userAgent(UserAgent userAgent) {\n        UserAgent agent = userAgent;\n\n        if (agent == null) {\n            agent = UserAgent.any(faker);\n        }\n\n        String userAgentKey = \"internet.user_agent.\" + agent.toString();\n        return resolve(userAgentKey);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]userAgent()", "name": "userAgent", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String userAgent()", "original_string": "    public String userAgent() {\n        return userAgent(null);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]botUserAgent(BotUserAgent)", "name": "botUserAgent", "arg_nums": 1, "params": [{"name": "vendor", "type": "BotUserAgent"}], "return_type": "String", "signature": "public String botUserAgent(BotUserAgent vendor)", "original_string": "    public String botUserAgent(BotUserAgent vendor) {\n        BotUserAgent agent = vendor;\n\n        if (agent == null) {\n            agent = BotUserAgent.any(faker);\n        }\n\n        String userAgentKey = \"internet.bot_user_agent.\" + agent.toString();\n        return resolve(userAgentKey);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[String]botUserAgentAny()", "name": "botUserAgentAny", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String botUserAgentAny()", "original_string": "    public String botUserAgentAny() {\n        return botUserAgent(null);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[InetAddress]inet4Address(byte,byte,byte,byte)", "name": "inet4Address", "arg_nums": 4, "params": [{"name": "first", "type": "byte"}, {"name": "second", "type": "byte"}, {"name": "third", "type": "byte"}, {"name": "fourth", "type": "byte"}], "return_type": "InetAddress", "signature": "private static InetAddress inet4Address(byte first, byte second, byte third, byte fourth)", "original_string": "    private static InetAddress inet4Address(byte first, byte second, byte third, byte fourth) {\n        try {\n            return Inet4Address.getByAddress(new byte[]{first, second, third, fourth});\n        } catch (UnknownHostException e) {\n            throw new RuntimeException(\"Failed to create Inet4Address from %s %s %s %s\".formatted(first, second, third, fourth), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "InetAddress", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Internet.java.Internet.[InetAddress]inet6Address(String)", "name": "inet6Address", "arg_nums": 1, "params": [{"name": "host", "type": "String"}], "return_type": "InetAddress", "signature": "private static InetAddress inet6Address(String host)", "original_string": "    private static InetAddress inet6Address(String host) {\n        try {\n            return Inet6Address.getByName(host);\n        } catch (UnknownHostException e) {\n            throw new RuntimeException(\"Failed to create Inet6Address from host '%s'\".formatted(host), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Internet.java", "class_name": "Internet", "class_uri": "src/main/java/net/datafaker/providers/base/Internet.java.Internet", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "InetAddress", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Bool.java.Bool.[]Bool(BaseProviders)", "name": "Bool", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Bool(BaseProviders faker)", "original_string": "    protected Bool(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Bool.java", "class_name": "Bool", "class_uri": "src/main/java/net/datafaker/providers/base/Bool.java.Bool", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Bool.java.Bool.[boolean]bool()", "name": "bool", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean bool()", "original_string": "    public boolean bool() {\n        return faker.random().nextBoolean();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Bool.java", "class_name": "Bool", "class_uri": "src/main/java/net/datafaker/providers/base/Bool.java.Bool", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito.[]Chiquito(BaseProviders)", "name": "Chiquito", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Chiquito(BaseProviders faker)", "original_string": "    protected Chiquito(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Chiquito.java", "class_name": "Chiquito", "class_uri": "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito.[String]expressions()", "name": "expressions", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String expressions()", "original_string": "    public String expressions() {\n        return resolve(\"chiquito.expressions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Chiquito.java", "class_name": "Chiquito", "class_uri": "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito.[String]terms()", "name": "terms", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String terms()", "original_string": "    public String terms() {\n        return resolve(\"chiquito.terms\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Chiquito.java", "class_name": "Chiquito", "class_uri": "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito.[String]sentences()", "name": "sentences", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sentences()", "original_string": "    public String sentences() {\n        return resolve(\"chiquito.sentences\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Chiquito.java", "class_name": "Chiquito", "class_uri": "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito.[String]jokes()", "name": "jokes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String jokes()", "original_string": "    public String jokes() {\n        return resolve(\"chiquito.jokes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Chiquito.java", "class_name": "Chiquito", "class_uri": "src/main/java/net/datafaker/providers/base/Chiquito.java.Chiquito", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Book.java.Book.[]Book(BaseProviders)", "name": "Book", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Book(BaseProviders faker)", "original_string": "    protected Book(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Book.java", "class_name": "Book", "class_uri": "src/main/java/net/datafaker/providers/base/Book.java.Book", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Book.java.Book.[String]author()", "name": "author", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String author()", "original_string": "    public String author() {\n        return resolve(\"book.author\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Book.java", "class_name": "Book", "class_uri": "src/main/java/net/datafaker/providers/base/Book.java.Book", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Book.java.Book.[String]title()", "name": "title", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String title()", "original_string": "    public String title() {\n        return resolve(\"book.title\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Book.java", "class_name": "Book", "class_uri": "src/main/java/net/datafaker/providers/base/Book.java.Book", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Book.java.Book.[String]publisher()", "name": "publisher", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String publisher()", "original_string": "    public String publisher() {\n        return resolve(\"book.publisher\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Book.java", "class_name": "Book", "class_uri": "src/main/java/net/datafaker/providers/base/Book.java.Book", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Book.java.Book.[String]genre()", "name": "genre", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String genre()", "original_string": "    public String genre() {\n        return resolve(\"book.genre\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Book.java", "class_name": "Book", "class_uri": "src/main/java/net/datafaker/providers/base/Book.java.Book", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/GarmentSize.java.GarmentSize.[]GarmentSize(BaseProviders)", "name": "GarmentSize", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected GarmentSize(BaseProviders faker)", "original_string": "    protected GarmentSize(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/GarmentSize.java", "class_name": "GarmentSize", "class_uri": "src/main/java/net/datafaker/providers/base/GarmentSize.java.GarmentSize", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/GarmentSize.java.GarmentSize.[String]size()", "name": "size", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String size()", "original_string": "    public String size() {\n        return resolve(\"garments_sizes.sizes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/GarmentSize.java", "class_name": "GarmentSize", "class_uri": "src/main/java/net/datafaker/providers/base/GarmentSize.java.GarmentSize", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method returns a garment size\n\n@return a string of garment size\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Gender.java.Gender.[]Gender(BaseProviders)", "name": "Gender", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Gender(BaseProviders faker)", "original_string": "    protected Gender(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Gender.java", "class_name": "Gender", "class_uri": "src/main/java/net/datafaker/providers/base/Gender.java.Gender", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Gender.java.Gender.[String]types()", "name": "types", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String types()", "original_string": "    public String types() {\n        return resolve(\"gender.types\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Gender.java", "class_name": "Gender", "class_uri": "src/main/java/net/datafaker/providers/base/Gender.java.Gender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method returns a gender type\n\n@return a string of gender type\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Gender.java.Gender.[String]binaryTypes()", "name": "binaryTypes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String binaryTypes()", "original_string": "    public String binaryTypes() {\n        return resolve(\"gender.binary_types\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Gender.java", "class_name": "Gender", "class_uri": "src/main/java/net/datafaker/providers/base/Gender.java.Gender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method returns a binary gender type\n\n@return a string of binary gender type\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Gender.java.Gender.[String]shortBinaryTypes()", "name": "shortBinaryTypes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String shortBinaryTypes()", "original_string": "    public String shortBinaryTypes() {\n        return resolve(\"gender.short_binary_types\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Gender.java", "class_name": "Gender", "class_uri": "src/main/java/net/datafaker/providers/base/Gender.java.Gender", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method returns a short binary gender type\n\n@return a string of short binary gender type\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Address]address()", "name": "address", "arg_nums": 0, "params": [], "return_type": "Address", "signature": "default Address address()", "original_string": "    default Address address() {\n        return getProvider(Address.class, Address::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Address", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Ancient]ancient()", "name": "ancient", "arg_nums": 0, "params": [], "return_type": "Ancient", "signature": "default Ancient ancient()", "original_string": "    default Ancient ancient() {\n        return getProvider(Ancient.class, Ancient::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Ancient", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Animal]animal()", "name": "animal", "arg_nums": 0, "params": [], "return_type": "Animal", "signature": "default Animal animal()", "original_string": "    default Animal animal() {\n        return getProvider(Animal.class, Animal::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Animal", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[App]app()", "name": "app", "arg_nums": 0, "params": [], "return_type": "App", "signature": "default App app()", "original_string": "    default App app() {\n        return getProvider(App.class, App::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "App", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Appliance]appliance()", "name": "appliance", "arg_nums": 0, "params": [], "return_type": "Appliance", "signature": "default Appliance appliance()", "original_string": "    default Appliance appliance() {\n        return getProvider(Appliance.class, Appliance::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Appliance", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Artist]artist()", "name": "artist", "arg_nums": 0, "params": [], "return_type": "Artist", "signature": "default Artist artist()", "original_string": "    default Artist artist() {\n        return getProvider(Artist.class, Artist::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Artist", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Australia]australia()", "name": "australia", "arg_nums": 0, "params": [], "return_type": "Australia", "signature": "default Australia australia()", "original_string": "    default Australia australia() {\n        return getProvider(Australia.class, Australia::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Australia", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Aviation]aviation()", "name": "aviation", "arg_nums": 0, "params": [], "return_type": "Aviation", "signature": "default Aviation aviation()", "original_string": "    default Aviation aviation() {\n        return getProvider(Aviation.class, Aviation::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Aviation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Aws]aws()", "name": "aws", "arg_nums": 0, "params": [], "return_type": "Aws", "signature": "default Aws aws()", "original_string": "    default Aws aws() {\n        return getProvider(Aws.class, Aws::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Aws", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Azure]azure()", "name": "azure", "arg_nums": 0, "params": [], "return_type": "Azure", "signature": "default Azure azure()", "original_string": "    default Azure azure() {\n        return getProvider(Azure.class, Azure::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Azure", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Barcode]barcode()", "name": "barcode", "arg_nums": 0, "params": [], "return_type": "Barcode", "signature": "default Barcode barcode()", "original_string": "    default Barcode barcode() {\n        return getProvider(Barcode.class, Barcode::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Barcode", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[BloodType]bloodtype()", "name": "bloodtype", "arg_nums": 0, "params": [], "return_type": "BloodType", "signature": "default BloodType bloodtype()", "original_string": "    default BloodType bloodtype() {\n        return getProvider(BloodType.class, BloodType::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "BloodType", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Book]book()", "name": "book", "arg_nums": 0, "params": [], "return_type": "Book", "signature": "default Book book()", "original_string": "    default Book book() {\n        return getProvider(Book.class, Book::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Book", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Bool]bool()", "name": "bool", "arg_nums": 0, "params": [], "return_type": "Bool", "signature": "default Bool bool()", "original_string": "    default Bool bool() {\n        return getProvider(Bool.class, Bool::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Bool", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Brand]brand()", "name": "brand", "arg_nums": 0, "params": [], "return_type": "Brand", "signature": "default Brand brand()", "original_string": "    default Brand brand() {\n        return getProvider(Brand.class, Brand::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Brand", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Business]business()", "name": "business", "arg_nums": 0, "params": [], "return_type": "Business", "signature": "default Business business()", "original_string": "    default Business business() {\n        return getProvider(Business.class, Business::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Business", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Camera]camera()", "name": "camera", "arg_nums": 0, "params": [], "return_type": "Camera", "signature": "default Camera camera()", "original_string": "    default Camera camera() {\n        return getProvider(Camera.class, Camera::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Camera", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Cannabis]cannabis()", "name": "cannabis", "arg_nums": 0, "params": [], "return_type": "Cannabis", "signature": "default Cannabis cannabis()", "original_string": "    default Cannabis cannabis() {\n        return getProvider(Cannabis.class, Cannabis::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Cannabis", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Cat]cat()", "name": "cat", "arg_nums": 0, "params": [], "return_type": "Cat", "signature": "default Cat cat()", "original_string": "    default Cat cat() {\n        return getProvider(Cat.class, Cat::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Cat", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Chiquito]chiquito()", "name": "chiquito", "arg_nums": 0, "params": [], "return_type": "Chiquito", "signature": "default Chiquito chiquito()", "original_string": "    default Chiquito chiquito() {\n        return getProvider(Chiquito.class, Chiquito::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Chiquito", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[CNPJ]cnpj()", "name": "cnpj", "arg_nums": 0, "params": [], "return_type": "CNPJ", "signature": "default CNPJ cnpj()", "original_string": "    default CNPJ cnpj() {\n        return getProvider(CNPJ.class, CNPJ::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "CNPJ", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Code]code()", "name": "code", "arg_nums": 0, "params": [], "return_type": "Code", "signature": "default Code code()", "original_string": "    default Code code() {\n        return getProvider(Code.class, Code::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Code", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Coin]coin()", "name": "coin", "arg_nums": 0, "params": [], "return_type": "Coin", "signature": "default Coin coin()", "original_string": "    default Coin coin() {\n        return getProvider(Coin.class, Coin::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Coin", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Color]color()", "name": "color", "arg_nums": 0, "params": [], "return_type": "Color", "signature": "default Color color()", "original_string": "    default Color color() {\n        return getProvider(Color.class, Color::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Color", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Commerce]commerce()", "name": "commerce", "arg_nums": 0, "params": [], "return_type": "Commerce", "signature": "default Commerce commerce()", "original_string": "    default Commerce commerce() {\n        return getProvider(Commerce.class, Commerce::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Commerce", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Community]community()", "name": "community", "arg_nums": 0, "params": [], "return_type": "Community", "signature": "default Community community()", "original_string": "    default Community community() {\n        return getProvider(Community.class, Community::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Community", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Company]company()", "name": "company", "arg_nums": 0, "params": [], "return_type": "Company", "signature": "default Company company()", "original_string": "    default Company company() {\n        return getProvider(Company.class, Company::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Company", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Compass]compass()", "name": "compass", "arg_nums": 0, "params": [], "return_type": "Compass", "signature": "default Compass compass()", "original_string": "    default Compass compass() {\n        return getProvider(Compass.class, Compass::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Compass", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Computer]computer()", "name": "computer", "arg_nums": 0, "params": [], "return_type": "Computer", "signature": "default Computer computer()", "original_string": "    default Computer computer() {\n        return getProvider(Computer.class, Computer::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Computer", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Construction]construction()", "name": "construction", "arg_nums": 0, "params": [], "return_type": "Construction", "signature": "default Construction construction()", "original_string": "    default Construction construction() {\n        return getProvider(Construction.class, Construction::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Construction", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Cosmere]cosmere()", "name": "cosmere", "arg_nums": 0, "params": [], "return_type": "Cosmere", "signature": "default Cosmere cosmere()", "original_string": "    default Cosmere cosmere() {\n        return getProvider(Cosmere.class, Cosmere::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Cosmere", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Country]country()", "name": "country", "arg_nums": 0, "params": [], "return_type": "Country", "signature": "default Country country()", "original_string": "    default Country country() {\n        return getProvider(Country.class, Country::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Country", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[CPF]cpf()", "name": "cpf", "arg_nums": 0, "params": [], "return_type": "CPF", "signature": "default CPF cpf()", "original_string": "    default CPF cpf() {\n        return getProvider(CPF.class, CPF::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "CPF", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[CryptoCoin]cryptoCoin()", "name": "cryptoCoin", "arg_nums": 0, "params": [], "return_type": "CryptoCoin", "signature": "default CryptoCoin cryptoCoin()", "original_string": "    default CryptoCoin cryptoCoin() {\n        return getProvider(CryptoCoin.class, CryptoCoin::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "CryptoCoin", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[CultureSeries]cultureSeries()", "name": "cultureSeries", "arg_nums": 0, "params": [], "return_type": "CultureSeries", "signature": "default CultureSeries cultureSeries()", "original_string": "    default CultureSeries cultureSeries() {\n        return getProvider(CultureSeries.class, CultureSeries::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "CultureSeries", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Currency]currency()", "name": "currency", "arg_nums": 0, "params": [], "return_type": "Currency", "signature": "default Currency currency()", "original_string": "    default Currency currency() {\n        return getProvider(Currency.class, Currency::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Currency", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[DateAndTime]date()", "name": "date", "arg_nums": 0, "params": [], "return_type": "DateAndTime", "signature": "default DateAndTime date()", "original_string": "    default DateAndTime date() {\n        return getProvider(DateAndTime.class, DateAndTime::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "DateAndTime", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[DcComics]dcComics()", "name": "dcComics", "arg_nums": 0, "params": [], "return_type": "DcComics", "signature": "default DcComics dcComics()", "original_string": "    default DcComics dcComics() {\n        return getProvider(DcComics.class, DcComics::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "DcComics", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Demographic]demographic()", "name": "demographic", "arg_nums": 0, "params": [], "return_type": "Demographic", "signature": "default Demographic demographic()", "original_string": "    default Demographic demographic() {\n        return getProvider(Demographic.class, Demographic::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Demographic", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Device]device()", "name": "device", "arg_nums": 0, "params": [], "return_type": "Device", "signature": "default Device device()", "original_string": "    default Device device() {\n        return getProvider(Device.class, Device::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Device", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Dog]dog()", "name": "dog", "arg_nums": 0, "params": [], "return_type": "Dog", "signature": "default Dog dog()", "original_string": "    default Dog dog() {\n        return getProvider(Dog.class, Dog::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Dog", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Domain]domain()", "name": "domain", "arg_nums": 0, "params": [], "return_type": "Domain", "signature": "default Domain domain()", "original_string": "    default Domain domain() {\n        return getProvider(Domain.class, Domain::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Domain", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[DrivingLicense]drivingLicense()", "name": "drivingLicense", "arg_nums": 0, "params": [], "return_type": "DrivingLicense", "signature": "default DrivingLicense drivingLicense()", "original_string": "    default DrivingLicense drivingLicense() {\n        return getProvider(DrivingLicense.class, DrivingLicense::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "DrivingLicense", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Drone]drone()", "name": "drone", "arg_nums": 0, "params": [], "return_type": "Drone", "signature": "default Drone drone()", "original_string": "    default Drone drone() {\n        return getProvider(Drone.class, Drone::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Drone", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[DungeonsAndDragons]dungeonsAndDragons()", "name": "dungeonsAndDragons", "arg_nums": 0, "params": [], "return_type": "DungeonsAndDragons", "signature": "default DungeonsAndDragons dungeonsAndDragons()", "original_string": "    default DungeonsAndDragons dungeonsAndDragons() {\n        return getProvider(DungeonsAndDragons.class, DungeonsAndDragons::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "DungeonsAndDragons", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Educator]educator()", "name": "educator", "arg_nums": 0, "params": [], "return_type": "Educator", "signature": "default Educator educator()", "original_string": "    default Educator educator() {\n        return getProvider(Educator.class, Educator::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Educator", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[ElectricalComponents]electricalComponents()", "name": "electricalComponents", "arg_nums": 0, "params": [], "return_type": "ElectricalComponents", "signature": "default ElectricalComponents electricalComponents()", "original_string": "    default ElectricalComponents electricalComponents() {\n        return getProvider(ElectricalComponents.class, ElectricalComponents::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "ElectricalComponents", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Emoji]emoji()", "name": "emoji", "arg_nums": 0, "params": [], "return_type": "Emoji", "signature": "default Emoji emoji()", "original_string": "    default Emoji emoji() {\n        return getProvider(Emoji.class, Emoji::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Emoji", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[FakeDuration]duration()", "name": "duration", "arg_nums": 0, "params": [], "return_type": "FakeDuration", "signature": "default FakeDuration duration()", "original_string": "    default FakeDuration duration() {\n        return getProvider(FakeDuration.class, FakeDuration::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "FakeDuration", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[FamousLastWords]famousLastWords()", "name": "famousLastWords", "arg_nums": 0, "params": [], "return_type": "FamousLastWords", "signature": "default FamousLastWords famousLastWords()", "original_string": "    default FamousLastWords famousLastWords() {\n        return getProvider(FamousLastWords.class, FamousLastWords::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "FamousLastWords", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[File]file()", "name": "file", "arg_nums": 0, "params": [], "return_type": "File", "signature": "default File file()", "original_string": "    default File file() {\n        return getProvider(File.class, File::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "File", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Finance]finance()", "name": "finance", "arg_nums": 0, "params": [], "return_type": "Finance", "signature": "default Finance finance()", "original_string": "    default Finance finance() {\n        return getProvider(Finance.class, Finance::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Finance", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[FinancialTerms]financialTerms()", "name": "financialTerms", "arg_nums": 0, "params": [], "return_type": "FinancialTerms", "signature": "default FinancialTerms financialTerms()", "original_string": "    default FinancialTerms financialTerms() {\n        return getProvider(FinancialTerms.class, FinancialTerms::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "FinancialTerms", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[FunnyName]funnyName()", "name": "funnyName", "arg_nums": 0, "params": [], "return_type": "FunnyName", "signature": "default FunnyName funnyName()", "original_string": "    default FunnyName funnyName() {\n        return getProvider(FunnyName.class, FunnyName::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "FunnyName", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[GarmentSize]garmentSize()", "name": "garmentSize", "arg_nums": 0, "params": [], "return_type": "GarmentSize", "signature": "default GarmentSize garmentSize()", "original_string": "    default GarmentSize garmentSize() {\n        return getProvider(GarmentSize.class, GarmentSize::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "GarmentSize", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Gender]gender()", "name": "gender", "arg_nums": 0, "params": [], "return_type": "Gender", "signature": "default Gender gender()", "original_string": "    default Gender gender() {\n        return getProvider(Gender.class, Gender::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Gender", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[GreekPhilosopher]greekPhilosopher()", "name": "greekPhilosopher", "arg_nums": 0, "params": [], "return_type": "GreekPhilosopher", "signature": "default GreekPhilosopher greekPhilosopher()", "original_string": "    default GreekPhilosopher greekPhilosopher() {\n        return getProvider(GreekPhilosopher.class, GreekPhilosopher::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "GreekPhilosopher", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Hacker]hacker()", "name": "hacker", "arg_nums": 0, "params": [], "return_type": "Hacker", "signature": "default Hacker hacker()", "original_string": "    default Hacker hacker() {\n        return getProvider(Hacker.class, Hacker::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Hacker", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Hashing]hashing()", "name": "hashing", "arg_nums": 0, "params": [], "return_type": "Hashing", "signature": "default Hashing hashing()", "original_string": "    default Hashing hashing() {\n        return getProvider(Hashing.class, Hashing::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Hashing", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Hipster]hipster()", "name": "hipster", "arg_nums": 0, "params": [], "return_type": "Hipster", "signature": "default Hipster hipster()", "original_string": "    default Hipster hipster() {\n        return getProvider(Hipster.class, Hipster::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Hipster", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Hobby]hobby()", "name": "hobby", "arg_nums": 0, "params": [], "return_type": "Hobby", "signature": "default Hobby hobby()", "original_string": "    default Hobby hobby() {\n        return getProvider(Hobby.class, Hobby::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Hobby", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Hololive]hololive()", "name": "hololive", "arg_nums": 0, "params": [], "return_type": "Hololive", "signature": "default Hololive hololive()", "original_string": "    default Hololive hololive() {\n        return getProvider(Hololive.class, Hololive::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Hololive", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Horse]horse()", "name": "horse", "arg_nums": 0, "params": [], "return_type": "Horse", "signature": "default Horse horse()", "original_string": "    default Horse horse() {\n        return getProvider(Horse.class, Horse::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Horse", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[House]house()", "name": "house", "arg_nums": 0, "params": [], "return_type": "House", "signature": "default House house()", "original_string": "    default House house() {\n        return getProvider(House.class, House::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "House", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[IdNumber]idNumber()", "name": "idNumber", "arg_nums": 0, "params": [], "return_type": "IdNumber", "signature": "default IdNumber idNumber()", "original_string": "    default IdNumber idNumber() {\n        return getProvider(IdNumber.class, IdNumber::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "IdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Image]image()", "name": "image", "arg_nums": 0, "params": [], "return_type": "Image", "signature": "default Image image()", "original_string": "    default Image image() {\n        return getProvider(Image.class, Image::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Image", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[IndustrySegments]industrySegments()", "name": "industrySegments", "arg_nums": 0, "params": [], "return_type": "IndustrySegments", "signature": "default IndustrySegments industrySegments()", "original_string": "    default IndustrySegments industrySegments() {\n        return getProvider(IndustrySegments.class, IndustrySegments::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "IndustrySegments", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Internet]internet()", "name": "internet", "arg_nums": 0, "params": [], "return_type": "Internet", "signature": "default Internet internet()", "original_string": "    default Internet internet() {\n        return getProvider(Internet.class, Internet::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Internet", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Job]job()", "name": "job", "arg_nums": 0, "params": [], "return_type": "Job", "signature": "default Job job()", "original_string": "    default Job job() {\n        return getProvider(Job.class, Job::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Job", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Kpop]kpop()", "name": "kpop", "arg_nums": 0, "params": [], "return_type": "Kpop", "signature": "default Kpop kpop()", "original_string": "    default Kpop kpop() {\n        return getProvider(Kpop.class, Kpop::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Kpop", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[LanguageCode]languageCode()", "name": "languageCode", "arg_nums": 0, "params": [], "return_type": "LanguageCode", "signature": "default LanguageCode languageCode()", "original_string": "    default LanguageCode languageCode() {\n        return getProvider(LanguageCode.class, LanguageCode::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "LanguageCode", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[LargeLanguageModel]largeLanguageModel()", "name": "largeLanguageModel", "arg_nums": 0, "params": [], "return_type": "LargeLanguageModel", "signature": "default LargeLanguageModel largeLanguageModel()", "original_string": "    default LargeLanguageModel largeLanguageModel() {\n        return getProvider(LargeLanguageModel.class, LargeLanguageModel::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "LargeLanguageModel", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Locality]locality()", "name": "locality", "arg_nums": 0, "params": [], "return_type": "Locality", "signature": "default Locality locality()", "original_string": "    default Locality locality() {\n        return getProvider(Locality.class, Locality::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Locality", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Location]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "Location", "signature": "default Location location()", "original_string": "    default Location location() {\n        return getProvider(Location.class, Location::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Location", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Lorem]lorem()", "name": "lorem", "arg_nums": 0, "params": [], "return_type": "Lorem", "signature": "default Lorem lorem()", "original_string": "    default Lorem lorem() {\n        return getProvider(Lorem.class, Lorem::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Lorem", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Marketing]marketing()", "name": "marketing", "arg_nums": 0, "params": [], "return_type": "Marketing", "signature": "default Marketing marketing()", "original_string": "    default Marketing marketing() {\n        return getProvider(Marketing.class, Marketing::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Marketing", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Matz]matz()", "name": "matz", "arg_nums": 0, "params": [], "return_type": "Matz", "signature": "default Matz matz()", "original_string": "    default Matz matz() {\n        return getProvider(Matz.class, Matz::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Matz", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Mbti]mbti()", "name": "mbti", "arg_nums": 0, "params": [], "return_type": "Mbti", "signature": "default Mbti mbti()", "original_string": "    default Mbti mbti() {\n        return getProvider(Mbti.class, Mbti::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Mbti", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Measurement]measurement()", "name": "measurement", "arg_nums": 0, "params": [], "return_type": "Measurement", "signature": "default Measurement measurement()", "original_string": "    default Measurement measurement() {\n        return getProvider(Measurement.class, Measurement::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Measurement", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Medical]medical()", "name": "medical", "arg_nums": 0, "params": [], "return_type": "Medical", "signature": "default Medical medical()", "original_string": "    default Medical medical() {\n        return getProvider(Medical.class, Medical::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Medical", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Military]military()", "name": "military", "arg_nums": 0, "params": [], "return_type": "Military", "signature": "default Military military()", "original_string": "    default Military military() {\n        return getProvider(Military.class, Military::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Military", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Money]money()", "name": "money", "arg_nums": 0, "params": [], "return_type": "Money", "signature": "default Money money()", "original_string": "    default Money money() {\n        return getProvider(Money.class, Money::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Money", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Mood]mood()", "name": "mood", "arg_nums": 0, "params": [], "return_type": "Mood", "signature": "default Mood mood()", "original_string": "    default Mood mood() {\n        return getProvider(Mood.class, Mood::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Mood", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Mountain]mountain()", "name": "mountain", "arg_nums": 0, "params": [], "return_type": "Mountain", "signature": "default Mountain mountain()", "original_string": "    default Mountain mountain() {\n        return getProvider(Mountain.class, Mountain::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Mountain", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Mountaineering]mountaineering()", "name": "mountaineering", "arg_nums": 0, "params": [], "return_type": "Mountaineering", "signature": "default Mountaineering mountaineering()", "original_string": "    default Mountaineering mountaineering() {\n        return getProvider(Mountaineering.class, Mountaineering::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Mountaineering", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Music]music()", "name": "music", "arg_nums": 0, "params": [], "return_type": "Music", "signature": "default Music music()", "original_string": "    default Music music() {\n        return getProvider(Music.class, Music::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Music", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Name]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "Name", "signature": "default Name name()", "original_string": "    default Name name() {\n        return getProvider(Name.class, Name::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Name", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Nation]nation()", "name": "nation", "arg_nums": 0, "params": [], "return_type": "Nation", "signature": "default Nation nation()", "original_string": "    default Nation nation() {\n        return getProvider(Nation.class, Nation::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Nation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[NatoPhoneticAlphabet]natoPhoneticAlphabet()", "name": "natoPhoneticAlphabet", "arg_nums": 0, "params": [], "return_type": "NatoPhoneticAlphabet", "signature": "default NatoPhoneticAlphabet natoPhoneticAlphabet()", "original_string": "    default NatoPhoneticAlphabet natoPhoneticAlphabet() {\n        return getProvider(NatoPhoneticAlphabet.class, NatoPhoneticAlphabet::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "NatoPhoneticAlphabet", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Nigeria]nigeria()", "name": "nigeria", "arg_nums": 0, "params": [], "return_type": "Nigeria", "signature": "default Nigeria nigeria()", "original_string": "    default Nigeria nigeria() {\n        return getProvider(Nigeria.class, Nigeria::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Nigeria", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Number]number()", "name": "number", "arg_nums": 0, "params": [], "return_type": "Number", "signature": "default Number number()", "original_string": "    default Number number() {\n        return getProvider(Number.class, Number::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Number", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[OlympicSport]olympicSport()", "name": "olympicSport", "arg_nums": 0, "params": [], "return_type": "OlympicSport", "signature": "default OlympicSport olympicSport()", "original_string": "    default OlympicSport olympicSport() {\n        return getProvider(OlympicSport.class, OlympicSport::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "OlympicSport", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Passport]passport()", "name": "passport", "arg_nums": 0, "params": [], "return_type": "Passport", "signature": "default Passport passport()", "original_string": "    default Passport passport() {\n        return getProvider(Passport.class, Passport::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Passport", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[PhoneNumber]phoneNumber()", "name": "phoneNumber", "arg_nums": 0, "params": [], "return_type": "PhoneNumber", "signature": "default PhoneNumber phoneNumber()", "original_string": "    default PhoneNumber phoneNumber() {\n        return getProvider(PhoneNumber.class, PhoneNumber::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "PhoneNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Photography]photography()", "name": "photography", "arg_nums": 0, "params": [], "return_type": "Photography", "signature": "default Photography photography()", "original_string": "    default Photography photography() {\n        return getProvider(Photography.class, Photography::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Photography", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Planet]planet()", "name": "planet", "arg_nums": 0, "params": [], "return_type": "Planet", "signature": "default Planet planet()", "original_string": "    default Planet planet() {\n        return getProvider(Planet.class, Planet::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Planet", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[ProgrammingLanguage]programmingLanguage()", "name": "programmingLanguage", "arg_nums": 0, "params": [], "return_type": "ProgrammingLanguage", "signature": "default ProgrammingLanguage programmingLanguage()", "original_string": "    default ProgrammingLanguage programmingLanguage() {\n        return getProvider(ProgrammingLanguage.class, ProgrammingLanguage::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "ProgrammingLanguage", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Relationship]relationships()", "name": "relationships", "arg_nums": 0, "params": [], "return_type": "Relationship", "signature": "default Relationship relationships()", "original_string": "    default Relationship relationships() {\n        return getProvider(Relationship.class, Relationship::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Relationship", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Restaurant]restaurant()", "name": "restaurant", "arg_nums": 0, "params": [], "return_type": "Restaurant", "signature": "default Restaurant restaurant()", "original_string": "    default Restaurant restaurant() {\n        return getProvider(Restaurant.class, Restaurant::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Restaurant", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Robin]robin()", "name": "robin", "arg_nums": 0, "params": [], "return_type": "Robin", "signature": "default Robin robin()", "original_string": "    default Robin robin() {\n        return getProvider(Robin.class, Robin::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Robin", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[RockBand]rockBand()", "name": "rockBand", "arg_nums": 0, "params": [], "return_type": "RockBand", "signature": "default RockBand rockBand()", "original_string": "    default RockBand rockBand() {\n        return getProvider(RockBand.class, RockBand::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "RockBand", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Science]science()", "name": "science", "arg_nums": 0, "params": [], "return_type": "Science", "signature": "default Science science()", "original_string": "    default Science science() {\n        return getProvider(Science.class, Science::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Science", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[SlackEmoji]slackEmoji()", "name": "slackEmoji", "arg_nums": 0, "params": [], "return_type": "SlackEmoji", "signature": "default SlackEmoji slackEmoji()", "original_string": "    default SlackEmoji slackEmoji() {\n        return getProvider(SlackEmoji.class, SlackEmoji::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "SlackEmoji", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Shakespeare]shakespeare()", "name": "shakespeare", "arg_nums": 0, "params": [], "return_type": "Shakespeare", "signature": "default Shakespeare shakespeare()", "original_string": "    default Shakespeare shakespeare() {\n        return getProvider(Shakespeare.class, Shakespeare::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Shakespeare", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Sip]sip()", "name": "sip", "arg_nums": 0, "params": [], "return_type": "Sip", "signature": "default Sip sip()", "original_string": "    default Sip sip() {\n        return getProvider(Sip.class, Sip::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Sip", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Size]size()", "name": "size", "arg_nums": 0, "params": [], "return_type": "Size", "signature": "default Size size()", "original_string": "    default Size size() {\n        return getProvider(Size.class, Size::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Size", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Space]space()", "name": "space", "arg_nums": 0, "params": [], "return_type": "Space", "signature": "default Space space()", "original_string": "    default Space space() {\n        return getProvider(Space.class, Space::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Space", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Stock]stock()", "name": "stock", "arg_nums": 0, "params": [], "return_type": "Stock", "signature": "default Stock stock()", "original_string": "    default Stock stock() {\n        return getProvider(Stock.class, Stock::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Stock", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Subscription]subscription()", "name": "subscription", "arg_nums": 0, "params": [], "return_type": "Subscription", "signature": "default Subscription subscription()", "original_string": "    default Subscription subscription() {\n        return getProvider(Subscription.class, Subscription::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Subscription", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Superhero]superhero()", "name": "superhero", "arg_nums": 0, "params": [], "return_type": "Superhero", "signature": "default Superhero superhero()", "original_string": "    default Superhero superhero() {\n        return getProvider(Superhero.class, Superhero::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Superhero", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Team]team()", "name": "team", "arg_nums": 0, "params": [], "return_type": "Team", "signature": "default Team team()", "original_string": "    default Team team() {\n        return getProvider(Team.class, Team::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Team", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Text]text()", "name": "text", "arg_nums": 0, "params": [], "return_type": "Text", "signature": "default Text text()", "original_string": "    default Text text() {\n        return getProvider(Text.class, Text::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Text", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Time]time()", "name": "time", "arg_nums": 0, "params": [], "return_type": "Time", "signature": "default Time time()", "original_string": "    default Time time() {\n        return getProvider(Time.class, Time::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Time", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[TimeAndDate]timeAndDate()", "name": "timeAndDate", "arg_nums": 0, "params": [], "return_type": "TimeAndDate", "signature": "default TimeAndDate timeAndDate()", "original_string": "    default TimeAndDate timeAndDate() {\n        return getProvider(TimeAndDate.class, TimeAndDate::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "TimeAndDate", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Tire]tire()", "name": "tire", "arg_nums": 0, "params": [], "return_type": "Tire", "signature": "default Tire tire()", "original_string": "    default Tire tire() {\n        return getProvider(Tire.class, Tire::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Tire", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Transport]transport()", "name": "transport", "arg_nums": 0, "params": [], "return_type": "Transport", "signature": "default Transport transport()", "original_string": "    default Transport transport() {\n        return getProvider(Transport.class, Transport::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Transport", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Twitter]twitter()", "name": "twitter", "arg_nums": 0, "params": [], "return_type": "Twitter", "signature": "default Twitter twitter()", "original_string": "    default Twitter twitter() {\n        return getProvider(Twitter.class, Twitter::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Twitter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Unique]unique()", "name": "unique", "arg_nums": 0, "params": [], "return_type": "Unique", "signature": "default Unique unique()", "original_string": "    default Unique unique() {\n        return getProvider(Unique.class, Unique::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Unique", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[University]university()", "name": "university", "arg_nums": 0, "params": [], "return_type": "University", "signature": "default University university()", "original_string": "    default University university() {\n        return getProvider(University.class, University::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "University", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Vehicle]vehicle()", "name": "vehicle", "arg_nums": 0, "params": [], "return_type": "Vehicle", "signature": "default Vehicle vehicle()", "original_string": "    default Vehicle vehicle() {\n        return getProvider(Vehicle.class, Vehicle::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Vehicle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Verb]verb()", "name": "verb", "arg_nums": 0, "params": [], "return_type": "Verb", "signature": "default Verb verb()", "original_string": "    default Verb verb() {\n        return getProvider(Verb.class, Verb::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Verb", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Weather]weather()", "name": "weather", "arg_nums": 0, "params": [], "return_type": "Weather", "signature": "default Weather weather()", "original_string": "    default Weather weather() {\n        return getProvider(Weather.class, Weather::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Weather", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Word]word()", "name": "word", "arg_nums": 0, "params": [], "return_type": "Word", "signature": "default Word word()", "original_string": "    default Word word() {\n        return getProvider(Word.class, Word::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Word", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Yoda]yoda()", "name": "yoda", "arg_nums": 0, "params": [], "return_type": "Yoda", "signature": "default Yoda yoda()", "original_string": "    default Yoda yoda() {\n        return getProvider(Yoda.class, Yoda::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Yoda", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Zodiac]zodiac()", "name": "zodiac", "arg_nums": 0, "params": [], "return_type": "Zodiac", "signature": "default Zodiac zodiac()", "original_string": "    default Zodiac zodiac() {\n        return getProvider(Zodiac.class, Zodiac::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Zodiac", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders.[Pronouns]pronouns()", "name": "pronouns", "arg_nums": 0, "params": [], "return_type": "Pronouns", "signature": "default Pronouns pronouns()", "original_string": "    default Pronouns pronouns() {\n        return getProvider(Pronouns.class, Pronouns::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BaseProviders.java", "class_name": "BaseProviders", "class_uri": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Pronouns", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/FunnyName.java.FunnyName.[]FunnyName(BaseProviders)", "name": "FunnyName", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected FunnyName(BaseProviders faker)", "original_string": "    protected FunnyName(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FunnyName.java", "class_name": "FunnyName", "class_uri": "src/main/java/net/datafaker/providers/base/FunnyName.java.FunnyName", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/FunnyName.java.FunnyName.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"funny_name.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/FunnyName.java", "class_name": "FunnyName", "class_uri": "src/main/java/net/datafaker/providers/base/FunnyName.java.FunnyName", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/CryptoCoin.java.CryptoCoin.[]CryptoCoin(BaseProviders)", "name": "CryptoCoin", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected CryptoCoin(BaseProviders faker)", "original_string": "    protected CryptoCoin(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CryptoCoin.java", "class_name": "CryptoCoin", "class_uri": "src/main/java/net/datafaker/providers/base/CryptoCoin.java.CryptoCoin", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/CryptoCoin.java.CryptoCoin.[String]coin()", "name": "coin", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String coin()", "original_string": "    public String coin() {\n        return resolve(\"crypto_coin.coin\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CryptoCoin.java", "class_name": "CryptoCoin", "class_uri": "src/main/java/net/datafaker/providers/base/CryptoCoin.java.CryptoCoin", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/University.java.University.[]University(BaseProviders)", "name": "University", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected University(BaseProviders faker)", "original_string": "    protected University(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/University.java", "class_name": "University", "class_uri": "src/main/java/net/datafaker/providers/base/University.java.University", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/University.java.University.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"university.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/University.java", "class_name": "University", "class_uri": "src/main/java/net/datafaker/providers/base/University.java.University", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/University.java.University.[String]degree()", "name": "degree", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String degree()", "original_string": "    public String degree() {\n        return resolve(\"university.degree\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/University.java", "class_name": "University", "class_uri": "src/main/java/net/datafaker/providers/base/University.java.University", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/University.java.University.[String]prefix()", "name": "prefix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String prefix()", "original_string": "    public String prefix() {\n        return resolve(\"university.prefix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/University.java", "class_name": "University", "class_uri": "src/main/java/net/datafaker/providers/base/University.java.University", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/University.java.University.[String]suffix()", "name": "suffix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String suffix()", "original_string": "    public String suffix() {\n        return resolve(\"university.suffix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/University.java", "class_name": "University", "class_uri": "src/main/java/net/datafaker/providers/base/University.java.University", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Military.java.Military.[]Military(BaseProviders)", "name": "Military", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Military(BaseProviders faker)", "original_string": "    protected Military(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Military.java", "class_name": "Military", "class_uri": "src/main/java/net/datafaker/providers/base/Military.java.Military", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Military.java.Military.[String]armyRank()", "name": "armyRank", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String armyRank()", "original_string": "    public String armyRank() {\n        return resolve(\"military.army_rank\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Military.java", "class_name": "Military", "class_uri": "src/main/java/net/datafaker/providers/base/Military.java.Military", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Military.java.Military.[String]marinesRank()", "name": "marinesRank", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String marinesRank()", "original_string": "    public String marinesRank() {\n        return resolve(\"military.marines_rank\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Military.java", "class_name": "Military", "class_uri": "src/main/java/net/datafaker/providers/base/Military.java.Military", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Military.java.Military.[String]navyRank()", "name": "navyRank", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String navyRank()", "original_string": "    public String navyRank() {\n        return resolve(\"military.navy_rank\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Military.java", "class_name": "Military", "class_uri": "src/main/java/net/datafaker/providers/base/Military.java.Military", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Military.java.Military.[String]airForceRank()", "name": "airForceRank", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String airForceRank()", "original_string": "    public String airForceRank() {\n        return resolve(\"military.air_force_rank\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Military.java", "class_name": "Military", "class_uri": "src/main/java/net/datafaker/providers/base/Military.java.Military", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Military.java.Military.[String]dodPaygrade()", "name": "dodPaygrade", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String dodPaygrade()", "original_string": "    public String dodPaygrade() {\n        return resolve(\"military.dod_paygrade\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Military.java", "class_name": "Military", "class_uri": "src/main/java/net/datafaker/providers/base/Military.java.Military", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mountaineering.java.Mountaineering.[]Mountaineering(BaseProviders)", "name": "Mountaineering", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Mountaineering(BaseProviders faker)", "original_string": "    protected Mountaineering(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mountaineering.java", "class_name": "Mountaineering", "class_uri": "src/main/java/net/datafaker/providers/base/Mountaineering.java.Mountaineering", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mountaineering.java.Mountaineering.[String]mountaineer()", "name": "mountaineer", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String mountaineer()", "original_string": "    public String mountaineer() {\n        return resolve(\"mountaineering.mountaineer\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mountaineering.java", "class_name": "Mountaineering", "class_uri": "src/main/java/net/datafaker/providers/base/Mountaineering.java.Mountaineering", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType.[]BloodType(BaseProviders)", "name": "BloodType", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected BloodType(BaseProviders faker)", "original_string": "    protected BloodType(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BloodType.java", "class_name": "BloodType", "class_uri": "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType.[String]aboTypes()", "name": "aboTypes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String aboTypes()", "original_string": "    public String aboTypes() {\n        return resolve(\"blood_type.abo_types\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BloodType.java", "class_name": "BloodType", "class_uri": "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method returns a ABO blood type\n\n@return a string of ABO blood type\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType.[String]rhTypes()", "name": "rhTypes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String rhTypes()", "original_string": "    public String rhTypes() {\n        return resolve(\"blood_type.rh_types\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BloodType.java", "class_name": "BloodType", "class_uri": "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method returns an Rh blood type\n\n@return a string of Rh blood type\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType.[String]pTypes()", "name": "pTypes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String pTypes()", "original_string": "    public String pTypes() {\n        return resolve(\"blood_type.p_types\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BloodType.java", "class_name": "BloodType", "class_uri": "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method returns a P blood type\n\n@return a string of P blood type\n"}, {"uris": "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType.[String]bloodGroup()", "name": "bloodGroup", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String bloodGroup()", "original_string": "    public String bloodGroup() {\n        return resolve(\"blood_type.blood_group\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/BloodType.java", "class_name": "BloodType", "class_uri": "src/main/java/net/datafaker/providers/base/BloodType.java.BloodType", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a blood group such as O\u2212, O+, A-, A+, B-, B+, AB-, AB+\n\n@return a blood group such as O\u2212, O+, A-, A+, B-, B+, AB-, AB+\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription.[]Subscription(BaseProviders)", "name": "Subscription", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Subscription(BaseProviders faker)", "original_string": "    protected Subscription(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Subscription.java", "class_name": "Subscription", "class_uri": "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription.[String]plans()", "name": "plans", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String plans()", "original_string": "    public String plans() {\n        return resolve(\"subscription.plans\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Subscription.java", "class_name": "Subscription", "class_uri": "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription.[String]statuses()", "name": "statuses", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String statuses()", "original_string": "    public String statuses() {\n        return resolve(\"subscription.statuses\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Subscription.java", "class_name": "Subscription", "class_uri": "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription.[String]paymentMethods()", "name": "paymentMethods", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String paymentMethods()", "original_string": "    public String paymentMethods() {\n        return resolve(\"subscription.payment_methods\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Subscription.java", "class_name": "Subscription", "class_uri": "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription.[String]subscriptionTerms()", "name": "subscriptionTerms", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String subscriptionTerms()", "original_string": "    public String subscriptionTerms() {\n        return resolve(\"subscription.subscription_terms\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Subscription.java", "class_name": "Subscription", "class_uri": "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription.[String]paymentTerms()", "name": "paymentTerms", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String paymentTerms()", "original_string": "    public String paymentTerms() {\n        return resolve(\"subscription.payment_terms\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Subscription.java", "class_name": "Subscription", "class_uri": "src/main/java/net/datafaker/providers/base/Subscription.java.Subscription", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Domain.java.Domain.[]Domain(BaseProviders)", "name": "Domain", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Domain(BaseProviders faker)", "original_string": "    protected Domain(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Domain.java", "class_name": "Domain", "class_uri": "src/main/java/net/datafaker/providers/base/Domain.java.Domain", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nInstantiates a new Domain.\n\n@param faker the faker\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Domain.java.Domain.[String]firstLevelDomain(String)", "name": "firstLevelDomain", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "String", "signature": "public String firstLevelDomain(String name)", "original_string": "    public String firstLevelDomain(String name) {\n        String top = resolve(\"domain.top\");\n        return String.join(\".\",\n            name,\n            top\n        );\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Domain.java", "class_name": "Domain", "class_uri": "src/main/java/net/datafaker/providers/base/Domain.java.Domain", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFirst level domain string. Such as example.com\n\n@param name the company name\n@return the\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Domain.java.Domain.[String]secondLevelDomain(String)", "name": "secondLevelDomain", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "String", "signature": "public String secondLevelDomain(String name)", "original_string": "    public String secondLevelDomain(String name) {\n        String top = resolve(\"domain.top\");\n        String suffix = resolve(\"domain.country\");\n        return String.join(\".\",\n            name,\n            top,\n            suffix\n        );\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Domain.java", "class_name": "Domain", "class_uri": "src/main/java/net/datafaker/providers/base/Domain.java.Domain", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nSecond level domain string. Such as example.com.uk\n\n@param name the company name\n@return the second level domain with company name\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Domain.java.Domain.[String]fullDomain(String)", "name": "fullDomain", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "String", "signature": "public String fullDomain(String name)", "original_string": "    public String fullDomain(String name) {\n        String prefix = resolve(\"domain.prefix\");\n        String top = resolve(\"domain.top\");\n        String suffix = resolve(\"domain.country\");\n        return String.join(\".\",\n            prefix,\n            name,\n            top,\n            suffix\n        );\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Domain.java", "class_name": "Domain", "class_uri": "src/main/java/net/datafaker/providers/base/Domain.java.Domain", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFull domain string. Such as <a href=\"www.example.com.uk\">www.example.com.uk</a>\n\n@param name the company name\n@return the full domain name\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Domain.java.Domain.[String]validDomain(String)", "name": "validDomain", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "String", "signature": "public String validDomain(String name)", "original_string": "    public String validDomain(String name) {\n        final RandomService random = faker.random();\n\n        boolean hasPrefix = random.nextInt(3) == 1;\n        boolean hasSuffix = random.nextInt(2) == 1;\n\n        String res = name + \".\" + resolve(\"domain.top\");\n        String prefix = null;\n        String suffix = null;\n        if (hasPrefix) {\n            prefix = resolve(\"domain.prefix\");\n        }\n        if (hasSuffix) {\n            suffix = resolve(\"domain.country\");\n        }\n        return prefix == null\n            ? suffix == null\n                ? res : res + \".\" + suffix\n            : suffix == null\n                ? prefix + \".\" + res\n                    : prefix + \".\" + res + \".\" + suffix;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Domain.java", "class_name": "Domain", "class_uri": "src/main/java/net/datafaker/providers/base/Domain.java.Domain", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturn a random valid domain.\n\n@param name the company name\n@return A valid domain\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Community.java.Community.[]Community(BaseProviders)", "name": "Community", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Community(BaseProviders faker)", "original_string": "    protected Community(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Community.java", "class_name": "Community", "class_uri": "src/main/java/net/datafaker/providers/base/Community.java.Community", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Community.java.Community.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"community.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Community.java", "class_name": "Community", "class_uri": "src/main/java/net/datafaker/providers/base/Community.java.Community", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Community.java.Community.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"community.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Community.java", "class_name": "Community", "class_uri": "src/main/java/net/datafaker/providers/base/Community.java.Community", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[]Number(BaseProviders)", "name": "Number", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Number(BaseProviders faker)", "original_string": "    protected Number(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[int]randomDigit()", "name": "randomDigit", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int randomDigit()", "original_string": "    public int randomDigit() {\n        return faker.random().nextInt(0, 9);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nReturns a random number from 0-9 (both inclusive)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[int]randomDigitNotZero()", "name": "randomDigitNotZero", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int randomDigitNotZero()", "original_string": "    public int randomDigitNotZero() {\n        return faker.random().nextInt(1, 9);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nReturns a random number from 1-9 (both inclusive)\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[int]positive()", "name": "positive", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int positive()", "original_string": "    public int positive() {\n        return numberBetween(1, Integer.MAX_VALUE);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nReturns a positive number\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[int]negative()", "name": "negative", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int negative()", "original_string": "    public int negative() {\n        return numberBetween(0, Integer.MIN_VALUE);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nReturns a negative number\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[int]numberBetween(int,int)", "name": "numberBetween", "arg_nums": 2, "params": [{"name": "min", "type": "int"}, {"name": "max", "type": "int"}], "return_type": "int", "signature": "public int numberBetween(final int min, final int max)", "original_string": "    public int numberBetween(final int min, final int max) {\n        if (min == max) return min;\n        final int realMin = Math.min(min, max);\n        final int realMax = Math.max(min, max);\n        final int amplitude = realMax - realMin;\n        if (amplitude >= 0) {\n            return faker.random().nextInt(amplitude) + realMin;\n        }\n        return (int) numberBetween(realMin, (long) realMax);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n@param min the lower bound (include min)\n@param max the upper bound (not include max)\n@return a random number on faker.number() between min and max\nif min = max, return min\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[long]numberBetween(long,long)", "name": "numberBetween", "arg_nums": 2, "params": [{"name": "min", "type": "long"}, {"name": "max", "type": "long"}], "return_type": "long", "signature": "public long numberBetween(long min, long max)", "original_string": "    public long numberBetween(long min, long max) {\n        if (min == max) return min;\n        final long realMin = Math.min(min, max);\n        final long realMax = Math.max(min, max);\n        final long amplitude = realMax - realMin;\n        if (amplitude >= 0) {\n            return faker.random().nextLong(amplitude) + realMin;\n        }\n        return decimalBetween(realMin, realMax).longValue();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\n@param min the lower bound (include min)\n@param max the upper bound (not include max)\n@return a random number on faker.number() between min and max\nif min = max, return min\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[long]randomNumber(int,boolean)", "name": "randomNumber", "arg_nums": 2, "params": [{"name": "numberOfDigits", "type": "int"}, {"name": "strict", "type": "boolean"}], "return_type": "long", "signature": "public long randomNumber(int numberOfDigits, boolean strict)", "original_string": "    public long randomNumber(int numberOfDigits, boolean strict) {\n        if (numberOfDigits <= 0) {\n            return faker.random().nextInt(1);\n        }\n        long min = pow(10, numberOfDigits - 1);\n        if (strict) {\n            long max = min * 10;\n            return faker.random().nextLong(max - min) + min;\n        }\n\n        return faker.random().nextLong(min * 10);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\n@param numberOfDigits the number of digits the generated value should have\n@param strict         whether or not the generated value should have exactly <code>numberOfDigits</code>\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[long]pow(long,int)", "name": "pow", "arg_nums": 2, "params": [{"name": "value", "type": "long"}, {"name": "d", "type": "int"}], "return_type": "long", "signature": "private long pow(long value, int d)", "original_string": "    private long pow(long value, int d) {\n        if (d == 0) return 1;\n        if (d == 1) return value;\n        if ((d & 1) == 0) {\n            long pow = pow(value, d >> 1);\n            return pow * pow;\n        } else {\n            return value * pow(value, d - 1);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[long]randomNumber()", "name": "randomNumber", "arg_nums": 0, "params": [], "return_type": "long", "signature": "public long randomNumber()", "original_string": "    public long randomNumber() {\n        int numberOfDigits = faker.random().nextInt(1, 10);\n        return randomNumber(numberOfDigits, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\nReturns a random number\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[double]randomDouble(int,int,int)", "name": "randomDouble", "arg_nums": 3, "params": [{"name": "maxNumberOfDecimals", "type": "int"}, {"name": "min", "type": "int"}, {"name": "max", "type": "int"}], "return_type": "double", "signature": "public double randomDouble(int maxNumberOfDecimals, int min, int max)", "original_string": "    public double randomDouble(int maxNumberOfDecimals, int min, int max) {\n        return randomDouble(maxNumberOfDecimals, min, (long) max);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[double]randomDouble(int,long,long)", "name": "randomDouble", "arg_nums": 3, "params": [{"name": "maxNumberOfDecimals", "type": "int"}, {"name": "min", "type": "long"}, {"name": "max", "type": "long"}], "return_type": "double", "signature": "public double randomDouble(int maxNumberOfDecimals, long min, long max)", "original_string": "    public double randomDouble(int maxNumberOfDecimals, long min, long max) {\n        return decimalBetween(min, max)\n            .setScale(maxNumberOfDecimals, RoundingMode.HALF_DOWN)\n            .doubleValue();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": "\nReturns a random double\n\n@param maxNumberOfDecimals maximum number of places\n@param min                 minimum value\n@param max                 maximum value\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[BigDecimal]decimalBetween(long,long)", "name": "decimalBetween", "arg_nums": 2, "params": [{"name": "min", "type": "long"}, {"name": "max", "type": "long"}], "return_type": "BigDecimal", "signature": "private BigDecimal decimalBetween(long min, long max)", "original_string": "    private BigDecimal decimalBetween(long min, long max) {\n        if (min == max) {\n            return BigDecimal.valueOf(min);\n        }\n\n        final BigDecimal trueMin = BigDecimal.valueOf(min);\n        final BigDecimal trueMax = BigDecimal.valueOf(max);\n        final BigDecimal random = BigDecimal.valueOf(faker.random().nextDouble());\n\n        return trueMin.add(trueMax.subtract(trueMin).multiply(random));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "BigDecimal", "classes": []}, "docstring": "\n@param min the lower bound (include min)\n@param max the upper bound (not include max)\n@return decimalBetween on faker.number() between min and max\nif min = max, return min\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[String]digits(int)", "name": "digits", "arg_nums": 1, "params": [{"name": "count", "type": "int"}], "return_type": "String", "signature": "public String digits(int count)", "original_string": "    public String digits(int count) {\n        final char[] tmp = new char[count];\n        byte[] input = faker.random().nextRandomBytes(count);\n        for (int i = 0; i < input.length; i++) {\n            tmp[i] = DIGITS[Math.abs(input[i]) % 10];\n        }\n        return new String(tmp);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Number.java.Number.[String]digit()", "name": "digit", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String digit()", "original_string": "    public String digit() {\n        return digits(1);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Number.java", "class_name": "Number", "class_uri": "src/main/java/net/datafaker/providers/base/Number.java.Number", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Device.java.Device.[]Device(BaseProviders)", "name": "Device", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Device(BaseProviders faker)", "original_string": "    protected Device(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Device.java", "class_name": "Device", "class_uri": "src/main/java/net/datafaker/providers/base/Device.java.Device", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Device.java.Device.[String]modelName()", "name": "modelName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String modelName()", "original_string": "    public String modelName() {\n        return resolve(\"device.model_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Device.java", "class_name": "Device", "class_uri": "src/main/java/net/datafaker/providers/base/Device.java.Device", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Device.java.Device.[String]platform()", "name": "platform", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String platform()", "original_string": "    public String platform() {\n        return resolve(\"device.platform\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Device.java", "class_name": "Device", "class_uri": "src/main/java/net/datafaker/providers/base/Device.java.Device", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Device.java.Device.[String]manufacturer()", "name": "manufacturer", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String manufacturer()", "original_string": "    public String manufacturer() {\n        return resolve(\"device.manufacturer\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Device.java", "class_name": "Device", "class_uri": "src/main/java/net/datafaker/providers/base/Device.java.Device", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Device.java.Device.[String]serial()", "name": "serial", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String serial()", "original_string": "    public String serial() {\n        return resolve(\"device.serial\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Device.java", "class_name": "Device", "class_uri": "src/main/java/net/datafaker/providers/base/Device.java.Device", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti.[]Mbti(BaseProviders)", "name": "Mbti", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "public Mbti(final BaseProviders faker)", "original_string": "    public Mbti(final BaseProviders faker) {\n        super(faker);\n        this.choice = () -> this.faker.resolve(\"mbti.choice\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mbti.java", "class_name": "Mbti", "class_uri": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti.[String]type()", "name": "type", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String type()", "original_string": "    public String type() {\n        return resolve(\"mbti.\" + choice.get() + \".type\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mbti.java", "class_name": "Mbti", "class_uri": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"mbti.\" + choice.get() + \".name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mbti.java", "class_name": "Mbti", "class_uri": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti.[String]characteristic()", "name": "characteristic", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characteristic()", "original_string": "    public String characteristic() {\n        return resolve(\"mbti.\" + choice.get() + \".characteristic\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mbti.java", "class_name": "Mbti", "class_uri": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti.[String]personage()", "name": "personage", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String personage()", "original_string": "    public String personage() {\n        return resolve(\"mbti.\" + choice.get() + \".personage\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mbti.java", "class_name": "Mbti", "class_uri": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti.[String]merit()", "name": "merit", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String merit()", "original_string": "    public String merit() {\n        return resolve(\"mbti.\" + choice.get() + \".merit\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mbti.java", "class_name": "Mbti", "class_uri": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti.[String]weakness()", "name": "weakness", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String weakness()", "original_string": "    public String weakness() {\n        return resolve(\"mbti.\" + choice.get() + \".weakness\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Mbti.java", "class_name": "Mbti", "class_uri": "src/main/java/net/datafaker/providers/base/Mbti.java.Mbti", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Location.java.Location.[]Location(BaseProviders)", "name": "Location", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Location(BaseProviders faker)", "original_string": "    protected Location(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Location.java", "class_name": "Location", "class_uri": "src/main/java/net/datafaker/providers/base/Location.java.Location", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Location.java.Location.[String]building()", "name": "building", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String building()", "original_string": "    public String building() {\n        return resolve(\"location.building\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Location.java", "class_name": "Location", "class_uri": "src/main/java/net/datafaker/providers/base/Location.java.Location", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Location.java.Location.[String]work()", "name": "work", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String work()", "original_string": "    public String work() {\n        return resolve(\"location.work\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Location.java", "class_name": "Location", "class_uri": "src/main/java/net/datafaker/providers/base/Location.java.Location", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Location.java.Location.[String]nature()", "name": "nature", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String nature()", "original_string": "    public String nature() {\n        return resolve(\"location.nature\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Location.java", "class_name": "Location", "class_uri": "src/main/java/net/datafaker/providers/base/Location.java.Location", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Location.java.Location.[String]publicSpace()", "name": "publicSpace", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String publicSpace()", "original_string": "    public String publicSpace() {\n        return resolve(\"location.public_space\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Location.java", "class_name": "Location", "class_uri": "src/main/java/net/datafaker/providers/base/Location.java.Location", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Location.java.Location.[String]privateSpace()", "name": "privateSpace", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String privateSpace()", "original_string": "    public String privateSpace() {\n        return resolve(\"location.private_space\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Location.java", "class_name": "Location", "class_uri": "src/main/java/net/datafaker/providers/base/Location.java.Location", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Location.java.Location.[String]otherworldly()", "name": "otherworldly", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String otherworldly()", "original_string": "    public String otherworldly() {\n        return resolve(\"location.otherworldly\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Location.java", "class_name": "Location", "class_uri": "src/main/java/net/datafaker/providers/base/Location.java.Location", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[]DateAndTime(BaseProviders)", "name": "DateAndTime", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected DateAndTime(BaseProviders faker)", "original_string": "    protected DateAndTime(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Timestamp]future(int,TimeUnit)", "name": "future", "arg_nums": 2, "params": [{"name": "atMost", "type": "int"}, {"name": "unit", "type": "TimeUnit"}], "return_type": "Timestamp", "signature": "public Timestamp future(int atMost, TimeUnit unit)", "original_string": "    public Timestamp future(int atMost, TimeUnit unit) {\n        Timestamp aBitLaterThanNow = new Timestamp(System.currentTimeMillis() + 1);\n        return future(atMost, unit, aBitLaterThanNow);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Timestamp", "classes": []}, "docstring": "\nGenerates a future date from now.\n\n@param atMost at most this amount of time ahead from now exclusive.\n@param unit   the time unit.\n@return a future date from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]future(int,TimeUnit,String)", "name": "future", "arg_nums": 3, "params": [{"name": "atMost", "type": "int"}, {"name": "unit", "type": "TimeUnit"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String future(int atMost, TimeUnit unit, String pattern)", "original_string": "    public String future(int atMost, TimeUnit unit, String pattern) {\n        return toString(future(atMost, unit), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates and converts to string representation a future date from now.\n\n@param atMost  at most this amount of time ahead from now exclusive.\n@param unit    the time unit.\n@param pattern date time pattern to convert to string.\n@return a string representation of a future date from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Timestamp]future(int,int,TimeUnit)", "name": "future", "arg_nums": 3, "params": [{"name": "atMost", "type": "int"}, {"name": "minimum", "type": "int"}, {"name": "unit", "type": "TimeUnit"}], "return_type": "Timestamp", "signature": "public Timestamp future(int atMost, int minimum, TimeUnit unit)", "original_string": "    public Timestamp future(int atMost, int minimum, TimeUnit unit) {\n        Timestamp minimumDate = new Timestamp(System.currentTimeMillis() + unit.toMillis(minimum));\n        return future(atMost - minimum, unit, minimumDate);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Timestamp", "classes": []}, "docstring": "\nGenerates a future date from now, with a minimum time.\n\n@param atMost  at most this amount of time ahead from now exclusive.\n@param minimum the minimum amount of time in the future from now.\n@param unit    the time unit.\n@return a future date from now, with a minimum time.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]future(int,int,TimeUnit,String)", "name": "future", "arg_nums": 4, "params": [{"name": "atMost", "type": "int"}, {"name": "minimum", "type": "int"}, {"name": "unit", "type": "TimeUnit"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String future(int atMost, int minimum, TimeUnit unit, String pattern)", "original_string": "    public String future(int atMost, int minimum, TimeUnit unit, String pattern) {\n        return toString(future(atMost, minimum, unit), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates and converts to string representation\nof a future date from now, with a minimum time.\n\n@param atMost  at most this amount of time ahead from now exclusive.\n@param minimum the minimum amount of time in the future from now.\n@param unit    the time unit.\n@param pattern date time pattern to convert to string.\n@return a string representation of a future date from now, with a minimum time.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[T]future(int,TimeUnit,T)", "name": "future", "arg_nums": 3, "params": [{"name": "atMost", "type": "int"}, {"name": "unit", "type": "TimeUnit"}, {"name": "referenceDate", "type": "T"}], "return_type": "T", "signature": "public <T extends Date> T future(int atMost, TimeUnit unit, T referenceDate)", "original_string": "    public <T extends Date> T future(int atMost, TimeUnit unit, T referenceDate) {\n        long upperBound = unit.toMillis(atMost);\n\n        long futureMillis = referenceDate.getTime();\n        futureMillis += 1 + faker.random().nextLong(upperBound - 1);\n\n        return (T) new Timestamp(futureMillis);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGenerates a future date relative to the {@code referenceDate}.\n\n@param atMost        at most this amount of time ahead to the {@code referenceDate} exclusive.\n@param unit          the time unit.\n@param referenceDate the future date relative to this date.\n@return a future date relative to {@code referenceDate}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]future(int,TimeUnit,T,String)", "name": "future", "arg_nums": 4, "params": [{"name": "atMost", "type": "int"}, {"name": "unit", "type": "TimeUnit"}, {"name": "referenceDate", "type": "T"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public <T extends Date> String future(int atMost, TimeUnit unit, T referenceDate, String pattern)", "original_string": "    public <T extends Date> String future(int atMost, TimeUnit unit, T referenceDate, String pattern) {\n        return toString(future(atMost, unit, referenceDate), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates and converts to string representation\na future date relative to the {@code referenceDate}.\n\n@param atMost        at most this amount of time ahead to the {@code referenceDate} exclusive.\n@param unit          the time unit.\n@param referenceDate the future date relative to this date.\n@param pattern       date time pattern to convert to string.\n@return a string representation of a future date relative to {@code referenceDate}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Timestamp]past(int,TimeUnit)", "name": "past", "arg_nums": 2, "params": [{"name": "atMost", "type": "int"}, {"name": "unit", "type": "TimeUnit"}], "return_type": "Timestamp", "signature": "public Timestamp past(int atMost, TimeUnit unit)", "original_string": "    public Timestamp past(int atMost, TimeUnit unit) {\n        Timestamp aBitEarlierThanNow = new Timestamp(System.currentTimeMillis() - 1);\n        return past(atMost, unit, aBitEarlierThanNow);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Timestamp", "classes": []}, "docstring": "\nGenerates a past date from now.\n\n@param atMost at most this amount of time earlier from now exclusive.\n@param unit   the time unit.\n@return a past date from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]past(int,TimeUnit,String)", "name": "past", "arg_nums": 3, "params": [{"name": "atMost", "type": "int"}, {"name": "unit", "type": "TimeUnit"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String past(int atMost, TimeUnit unit, String pattern)", "original_string": "    public String past(int atMost, TimeUnit unit, String pattern) {\n        return toString(past(atMost, unit), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a string representation of a past date from now.\n\n@param atMost  at most this amount of time earlier from now exclusive.\n@param unit    the time unit.\n@param pattern date time pattern to convert to string.\n@return a string representation of a past date from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Timestamp]past(int,int,TimeUnit)", "name": "past", "arg_nums": 3, "params": [{"name": "atMost", "type": "int"}, {"name": "minimum", "type": "int"}, {"name": "unit", "type": "TimeUnit"}], "return_type": "Timestamp", "signature": "public Timestamp past(int atMost, int minimum, TimeUnit unit)", "original_string": "    public Timestamp past(int atMost, int minimum, TimeUnit unit) {\n        Timestamp minimumDate = new Timestamp(System.currentTimeMillis() - unit.toMillis(minimum));\n        return past(atMost - minimum, unit, minimumDate);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Timestamp", "classes": []}, "docstring": "\nGenerates a past date from now, with a minimum time.\n\n@param atMost  at most this amount of time earlier from now exclusive.\n@param minimum the minimum amount of time in the past from now.\n@param unit    the time unit.\n@return a past date from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]past(int,int,TimeUnit,String)", "name": "past", "arg_nums": 4, "params": [{"name": "atMost", "type": "int"}, {"name": "minimum", "type": "int"}, {"name": "unit", "type": "TimeUnit"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String past(int atMost, int minimum, TimeUnit unit, String pattern)", "original_string": "    public String past(int atMost, int minimum, TimeUnit unit, String pattern) {\n        return toString(past(atMost, minimum, unit), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates and converts to string representation a past date from now, with a minimum time.\n\n@param atMost  at most this amount of time earlier from now exclusive.\n@param minimum the minimum amount of time in the past from now.\n@param unit    the time unit.\n@param pattern date time pattern to convert to string.\n@return a string representation of a past date from now, with a minimum time.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[T]past(int,TimeUnit,T)", "name": "past", "arg_nums": 3, "params": [{"name": "atMost", "type": "int"}, {"name": "unit", "type": "TimeUnit"}, {"name": "referenceDate", "type": "T"}], "return_type": "T", "signature": "public <T extends Date> T past(int atMost, TimeUnit unit, T referenceDate)", "original_string": "    public <T extends Date> T past(int atMost, TimeUnit unit, T referenceDate) {\n        long upperBound = unit.toMillis(atMost);\n\n        long futureMillis = referenceDate.getTime();\n        futureMillis -= 1 + faker.random().nextLong(upperBound - 1);\n\n        return (T) new Timestamp(futureMillis);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGenerates a past date relative to the {@code referenceDate}.\n\n@param atMost        at most this amount of time past to the {@code referenceDate} exclusive.\n@param unit          the time unit.\n@param referenceDate the past date relative to this date.\n@return a past date relative to {@code referenceDate}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]past(int,TimeUnit,Date,String)", "name": "past", "arg_nums": 4, "params": [{"name": "atMost", "type": "int"}, {"name": "unit", "type": "TimeUnit"}, {"name": "referenceDate", "type": "Date"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String past(int atMost, TimeUnit unit, Date referenceDate, String pattern)", "original_string": "    public String past(int atMost, TimeUnit unit, Date referenceDate, String pattern) {\n        return toString(past(atMost, unit, referenceDate), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a string representation of a past date relative to the {@code referenceDate}.\n\n@param atMost        at most this amount of time past to the {@code referenceDate} exclusive.\n@param unit          the time unit.\n@param referenceDate the past date relative to this date.\n@param pattern       date time pattern to convert to string.\n@return a string representation of a past date relative to {@code referenceDate}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[T]between(T,T)", "name": "between", "arg_nums": 2, "params": [{"name": "from", "type": "T"}, {"name": "to", "type": "T"}], "return_type": "T", "signature": "public <T extends Date> T between(T from, T to)", "original_string": "    public <T extends Date> T between(T from, T to) throws IllegalArgumentException {\n        if (to.before(from)) {\n            throw new IllegalArgumentException(\"Invalid date range: the upper bound date (%s) is before the lower bound (%s)\"\n                .formatted(to, from));\n        }\n\n        if (from.equals(to)) {\n            return from;\n        }\n\n        long offsetMillis = faker.random().nextLong(to.getTime() - from.getTime());\n        return (T) new Timestamp(from.getTime() + offsetMillis);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGenerates a random date between two dates.\n\n@param from the lower bound inclusive\n@param to   the upper bound exclusive\n@return a random date between {@code from} and {@code to}.\n@throws IllegalArgumentException if the {@code to} date represents an earlier date than {@code from} date.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]between(T,T,String)", "name": "between", "arg_nums": 3, "params": [{"name": "from", "type": "T"}, {"name": "to", "type": "T"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public <T extends Date> String between(T from, T to, String pattern)", "original_string": "    public <T extends Date> String between(T from, T to, String pattern) throws IllegalArgumentException {\n        return toString(between(from, to), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a string representation of a random date between two dates.\n\n@param from    the lower bound inclusive\n@param to      the upper bound exclusive\n@param pattern date time pattern to convert to string.\n@return a string representation of a random date between {@code from} and {@code to}.\n@throws IllegalArgumentException if the {@code to} date represents an earlier date than {@code from} date.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Timestamp]birthday()", "name": "birthday", "arg_nums": 0, "params": [], "return_type": "Timestamp", "signature": "public Timestamp birthday()", "original_string": "    public Timestamp birthday() {\n        return birthday(DEFAULT_MIN_AGE, DEFAULT_MAX_AGE);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Timestamp", "classes": []}, "docstring": "\nGenerates a random birthday between 65 and 18 years ago from now.\n\n@return a random birthday between 65 and 18 years ago from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[LocalDate]birthdayLocalDate()", "name": "birthdayLocalDate", "arg_nums": 0, "params": [], "return_type": "LocalDate", "signature": "public LocalDate birthdayLocalDate()", "original_string": "    public LocalDate birthdayLocalDate() {\n        return birthdayLocalDate(DEFAULT_MIN_AGE, DEFAULT_MAX_AGE);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "LocalDate", "classes": []}, "docstring": "\nGenerates a random birthday between 65 and 18 years ago from now as LocalDate.\n\n@return a random birthday between 65 and 18 years ago from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]birthday(String)", "name": "birthday", "arg_nums": 1, "params": [{"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String birthday(String pattern)", "original_string": "    public String birthday(String pattern) {\n        return toString(birthday(DEFAULT_MIN_AGE, DEFAULT_MAX_AGE), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a string representation of a random birthday between 65 and 18 years ago from now.\n\n@param pattern date time pattern to convert to string.\n@return a string representation of a random birthday between 65 and 18 years ago from now.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Timestamp]birthday(int,int)", "name": "birthday", "arg_nums": 2, "params": [{"name": "minAge", "type": "int"}, {"name": "maxAge", "type": "int"}], "return_type": "Timestamp", "signature": "public Timestamp birthday(int minAge, int maxAge)", "original_string": "    public Timestamp birthday(int minAge, int maxAge) {\n        final LocalDate localDate = LocalDate.now();\n        final LocalDate from = localDate.minusYears(maxAge);\n        if (minAge == maxAge) {\n            return Timestamp.valueOf(LocalDateTime.of(from, LocalTime.MIDNIGHT));\n        }\n        final long start = from.toEpochDay();\n        final long stop = localDate.minusYears(minAge).toEpochDay();\n        final LocalDate date = LocalDate.ofEpochDay(faker.random().nextLong(start, stop));\n        return Timestamp.valueOf(\n            LocalDateTime.of(date, LocalTime.ofNanoOfDay(faker.number().numberBetween(0, DAYS_NANOS))));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Timestamp", "classes": []}, "docstring": "\nGenerates a random birthday between two ages from now.\n\n@param minAge the minimal age\n@param maxAge the maximal age\n@return a random birthday between {@code minAge} and {@code maxAge} years ago from now.\nNegative {@code minAge} and {@code maxAge} are supported.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[LocalDate]birthdayLocalDate(int,int)", "name": "birthdayLocalDate", "arg_nums": 2, "params": [{"name": "minAge", "type": "int"}, {"name": "maxAge", "type": "int"}], "return_type": "LocalDate", "signature": "public LocalDate birthdayLocalDate(int minAge, int maxAge)", "original_string": "    public LocalDate birthdayLocalDate(int minAge, int maxAge) {\n        final LocalDate localDate = LocalDate.now();\n        final LocalDate from = localDate.minusYears(maxAge);\n        if (minAge == maxAge) {\n            return from;\n        }\n        final long start = from.toEpochDay();\n        final long stop = localDate.minusYears(minAge).toEpochDay();\n        return LocalDate.ofEpochDay(faker.random().nextLong(start, stop));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "LocalDate", "classes": []}, "docstring": "\nGenerates a random birthday between two ages from now as LocalDate.\n\n@param minAge the minimal age\n@param maxAge the maximal age\n@return a random birthday between {@code minAge} and {@code maxAge} years ago from now.\nNegative {@code minAge} and {@code maxAge} are supported.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]birthday(int,int,String)", "name": "birthday", "arg_nums": 3, "params": [{"name": "minAge", "type": "int"}, {"name": "maxAge", "type": "int"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String birthday(int minAge, int maxAge, String pattern)", "original_string": "    public String birthday(int minAge, int maxAge, String pattern) {\n        return toString(birthday(minAge, maxAge), pattern);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates and converts to string representation a random birthday between two ages from now.\n\n@param minAge  the minimal age\n@param maxAge  the maximal age\n@param pattern date time pattern to convert to string.\n@return a string representation of a random birthday between {@code minAge} and {@code maxAge} years ago from now.\n@throws IllegalArgumentException if the {@code maxAge} is lower than {@code minAge}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Duration]duration(long,ChronoUnit)", "name": "duration", "arg_nums": 2, "params": [{"name": "max", "type": "long"}, {"name": "unit", "type": "ChronoUnit"}], "return_type": "Duration", "signature": "public Duration duration(long max, ChronoUnit unit)", "original_string": "    public Duration duration(long max, ChronoUnit unit) {\n        return duration(0, max, unit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Duration", "classes": []}, "docstring": "\nGenerates a random Duration lower than max.\n\n@param max  the maximum value\n@param unit the temporal unit (day or shorter than a day)\n@return a random Duration lower than {@code max}.\n@throws IllegalArgumentException if the {@code unit} is invalid.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Duration]duration(long,long,ChronoUnit)", "name": "duration", "arg_nums": 3, "params": [{"name": "min", "type": "long"}, {"name": "max", "type": "long"}, {"name": "unit", "type": "ChronoUnit"}], "return_type": "Duration", "signature": "public Duration duration(long min, long max, ChronoUnit unit)", "original_string": "    public Duration duration(long min, long max, ChronoUnit unit) {\n        return generateDuration(faker.random().nextLong(min, max), unit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Duration", "classes": []}, "docstring": "\nGenerates a random Duration between min and max.\n\n@param min  the maximum value\n@param max  the minimal value\n@param unit the temporal unit (day or shorter than a day)\n@return a random Duration between {@code min} inclusive and {@code max} exclusive if {@code max} greater {@code min}.\n@throws IllegalArgumentException if the {@code unit} is invalid.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Duration]duration(long,String)", "name": "duration", "arg_nums": 2, "params": [{"name": "max", "type": "long"}, {"name": "unit", "type": "String"}], "return_type": "Duration", "signature": "public Duration duration(long max, String unit)", "original_string": "    public Duration duration(long max, String unit) {\n        return duration(0, max, str2durationUnit(unit));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Duration", "classes": []}, "docstring": "\nGenerates a random Duration lower than max.\n\n@param max  the maximum value\n@param unit the temporal unit (day or shorter than a day)\n@return a random Duration lower than {@code max}.\n@throws IllegalArgumentException if the {@code unit} is invalid.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Duration]duration(long,long,String)", "name": "duration", "arg_nums": 3, "params": [{"name": "min", "type": "long"}, {"name": "max", "type": "long"}, {"name": "unit", "type": "String"}], "return_type": "Duration", "signature": "public Duration duration(long min, long max, String unit)", "original_string": "    public Duration duration(long min, long max, String unit) {\n        return generateDuration(faker.random().nextLong(min, max), str2durationUnit(unit));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Duration", "classes": []}, "docstring": "\nGenerates a random Duration between min and max.\n\n@param min  the minimal value\n@param max  the maximum value\n@param unit the temporal unit (day or shorter than a day)\n@return a random Duration between {@code min} inclusive and {@code max} exclusive if {@code max} greater {@code min}.\n@throws IllegalArgumentException if the {@code unit} is invalid.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Period]period(Period,Period)", "name": "period", "arg_nums": 2, "params": [{"name": "min", "type": "Period"}, {"name": "max", "type": "Period"}], "return_type": "Period", "signature": "public Period period(Period min, Period max)", "original_string": "    public Period period(Period min, Period max) {\n        if (max.minus(min).isNegative()) {\n            throw new IllegalArgumentException(\"Max period(\" + max + \") should be not less than min (\" + min + \")\");\n        }\n        return Period.of(\n            faker.random().nextInt(min.getYears(), max.getYears()),\n            faker.random().nextInt(min.getMonths(), max.getMonths()),\n            faker.random().nextInt(min.getDays(), max.getDays()));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Period", "classes": []}, "docstring": "\nGenerates a random Period between min and max.\n\n@param min the minimal value\n@param max the maximum value\n@return a random Period between {@code min} inclusive and {@code max} inclusive if {@code max} greater {@code min}.\n@throws IllegalArgumentException if the {@code min} is greater than {@code max}.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[ChronoUnit]str2durationUnit(String)", "name": "str2durationUnit", "arg_nums": 1, "params": [{"name": "unit", "type": "String"}], "return_type": "ChronoUnit", "signature": "static ChronoUnit str2durationUnit(String unit)", "original_string": "    static ChronoUnit str2durationUnit(String unit) {\n        if (unit == null || unit.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Illegal duration unit '\" + unit + \"'\");\n        }\n        return switch (unit.toUpperCase(Locale.ROOT)) {\n            case \"NANO\", \"NANOS\" -> ChronoUnit.NANOS;\n            case \"MICRO\", \"MICROS\" -> ChronoUnit.MICROS;\n            case \"MILLI\", \"MILLIS\" -> ChronoUnit.MILLIS;\n            case \"SECOND\", \"SECONDS\" -> ChronoUnit.SECONDS;\n            case \"MINUTE\", \"MINUTES\" -> ChronoUnit.MINUTES;\n            case \"HOUR\", \"HOURS\" -> ChronoUnit.HOURS;\n            case \"DAY\", \"DAYS\" -> ChronoUnit.DAYS;\n            default -> throw new IllegalArgumentException(\"Illegal duration unit '\" + unit + \"'\");\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "ChronoUnit", "classes": []}, "docstring": "\nUtility method to convert string to ChronoUnit.\n\n@param unit the temporal unit (day or shorter than a day)\n@return converts unit to ChronoUnit.\n@throws IllegalArgumentException if the {@code unit} is invalid.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[Duration]generateDuration(long,ChronoUnit)", "name": "generateDuration", "arg_nums": 2, "params": [{"name": "value", "type": "long"}, {"name": "unit", "type": "ChronoUnit"}], "return_type": "Duration", "signature": "private Duration generateDuration(long value, ChronoUnit unit)", "original_string": "    private Duration generateDuration(long value, ChronoUnit unit) {\n        return Duration.of(value, unit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Duration", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime.[String]toString(Date,String)", "name": "toString", "arg_nums": 2, "params": [{"name": "date", "type": "Date"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "private String toString(Date date, String pattern)", "original_string": "    private String toString(Date date, String pattern) {\n        return new SimpleDateFormat(pattern).format(date);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/DateAndTime.java", "class_name": "DateAndTime", "class_uri": "src/main/java/net/datafaker/providers/base/DateAndTime.java.DateAndTime", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Size.java.Size.[]Size(BaseProviders)", "name": "Size", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Size(BaseProviders faker)", "original_string": "    protected Size(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Size.java", "class_name": "Size", "class_uri": "src/main/java/net/datafaker/providers/base/Size.java.Size", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Size.java.Size.[String]adjective()", "name": "adjective", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String adjective()", "original_string": "    public String adjective() {\n        return resolve(\"size.adjective\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Size.java", "class_name": "Size", "class_uri": "src/main/java/net/datafaker/providers/base/Size.java.Size", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Brand.java.Brand.[]Brand(BaseProviders)", "name": "Brand", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Brand(BaseProviders faker)", "original_string": "    protected Brand(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Brand.java", "class_name": "Brand", "class_uri": "src/main/java/net/datafaker/providers/base/Brand.java.Brand", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Brand.java.Brand.[String]sport()", "name": "sport", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sport()", "original_string": "    public String sport() {\n        return resolve(\"brand.sport\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Brand.java", "class_name": "Brand", "class_uri": "src/main/java/net/datafaker/providers/base/Brand.java.Brand", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Brand.java.Brand.[String]car()", "name": "car", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String car()", "original_string": "    public String car() {\n        return faker.vehicle().resolve(\"vehicle.makes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Brand.java", "class_name": "Brand", "class_uri": "src/main/java/net/datafaker/providers/base/Brand.java.Brand", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Brand.java.Brand.[String]watch()", "name": "watch", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String watch()", "original_string": "    public String watch() {\n        return resolve(\"brand.watch\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Brand.java", "class_name": "Brand", "class_uri": "src/main/java/net/datafaker/providers/base/Brand.java.Brand", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space.[]Space(BaseProviders)", "name": "Space", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Space(BaseProviders faker)", "original_string": "    protected Space(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Space.java", "class_name": "Space", "class_uri": "src/main/java/net/datafaker/providers/base/Space.java.Space", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]planet()", "name": "planet", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String planet()", "original_string": "    public String planet() {\n        return resolve(\"space.planet\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Space.java", "class_name": "Space", "class_uri": "src/main/java/net/datafaker/providers/base/Space.java.Space", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]moon()", "name": "moon", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String moon()", "original_string": "    public String moon() {\n        return resolve(\"space.moon\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Space.java", "class_name": "Space", "class_uri": "src/main/java/net/datafaker/providers/base/Space.java.Space", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]galaxy()", "name": "galaxy", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String galaxy()", "original_string": "    public String galaxy() {\n        return resolve(\"space.galaxy\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Space.java", "class_name": "Space", "class_uri": "src/main/java/net/datafaker/providers/base/Space.java.Space", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]nebula()", "name": "nebula", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String nebula()", "original_string": "    public String nebula() {\n        return resolve(\"space.nebula\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Space.java", "class_name": "Space", "class_uri": "src/main/java/net/datafaker/providers/base/Space.java.Space", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]starCluster()", "name": "starCluster", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String starCluster()", "original_string": "    public String starCluster() {\n        return resolve(\"space.star_cluster\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Space.java", "class_name": "Space", "class_uri": "src/main/java/net/datafaker/providers/base/Space.java.Space", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]constellation()", "name": "constellation", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String constellation()", "original_string": "    public String constellation() {\n        return resolve(\"space.constellation\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Space.java", "class_name": "Space", "class_uri": "src/main/java/net/datafaker/providers/base/Space.java.Space", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]star()", "name": "star", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String star()", "original_string": "    public String star() {\n        return resolve(\"space.star\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Space.java", "class_name": "Space", "class_uri": "src/main/java/net/datafaker/providers/base/Space.java.Space", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]agency()", "name": "agency", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String agency()", "original_string": "    public String agency() {\n        return resolve(\"space.agency\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Space.java", "class_name": "Space", "class_uri": "src/main/java/net/datafaker/providers/base/Space.java.Space", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]agencyAbbreviation()", "name": "agencyAbbreviation", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String agencyAbbreviation()", "original_string": "    public String agencyAbbreviation() {\n        return resolve(\"space.agency_abv\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Space.java", "class_name": "Space", "class_uri": "src/main/java/net/datafaker/providers/base/Space.java.Space", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]nasaSpaceCraft()", "name": "nasaSpaceCraft", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String nasaSpaceCraft()", "original_string": "    public String nasaSpaceCraft() {\n        return resolve(\"space.nasa_space_craft\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Space.java", "class_name": "Space", "class_uri": "src/main/java/net/datafaker/providers/base/Space.java.Space", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]company()", "name": "company", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String company()", "original_string": "    public String company() {\n        return resolve(\"space.company\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Space.java", "class_name": "Space", "class_uri": "src/main/java/net/datafaker/providers/base/Space.java.Space", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]distanceMeasurement()", "name": "distanceMeasurement", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String distanceMeasurement()", "original_string": "    public String distanceMeasurement() {\n        return faker.number().numberBetween(10, 100) + ' ' + resolve(\"space.distance_measurement\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Space.java", "class_name": "Space", "class_uri": "src/main/java/net/datafaker/providers/base/Space.java.Space", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Space.java.Space.[String]meteorite()", "name": "meteorite", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String meteorite()", "original_string": "    public String meteorite() {\n        return resolve(\"space.meteorite\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Space.java", "class_name": "Space", "class_uri": "src/main/java/net/datafaker/providers/base/Space.java.Space", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[]Planet(BaseProviders)", "name": "Planet", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Planet(BaseProviders faker)", "original_string": "    protected Planet(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"planet.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]symbol()", "name": "symbol", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String symbol()", "original_string": "    public String symbol() {\n        return symbol(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]symbol(PlanetName)", "name": "symbol", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String symbol(PlanetName planetName)", "original_string": "    public String symbol(PlanetName planetName) {\n        return resolve(\"planet.symbol.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]classification()", "name": "classification", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String classification()", "original_string": "    public String classification() {\n        return classification(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]classification(PlanetName)", "name": "classification", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String classification(PlanetName planetName)", "original_string": "    public String classification(PlanetName planetName) {\n        return resolve(\"planet.classification.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]discoveryYear()", "name": "discoveryYear", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String discoveryYear()", "original_string": "    public String discoveryYear() {\n        return discoveryYear(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]discoveryYear(PlanetName)", "name": "discoveryYear", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String discoveryYear(PlanetName planetName)", "original_string": "    public String discoveryYear(PlanetName planetName) {\n        return resolve(\"planet.discovery_year.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanDistanceFromTheSun()", "name": "meanDistanceFromTheSun", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String meanDistanceFromTheSun()", "original_string": "    public String meanDistanceFromTheSun() {\n        return meanDistanceFromTheSun(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanDistanceFromTheSun(PlanetName)", "name": "meanDistanceFromTheSun", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String meanDistanceFromTheSun(PlanetName planetName)", "original_string": "    public String meanDistanceFromTheSun(PlanetName planetName) {\n        return resolve(\"planet.mean_distance_from_the_sun.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]lengthOfDay()", "name": "lengthOfDay", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String lengthOfDay()", "original_string": "    public String lengthOfDay() {\n        return meanDistanceFromTheSun(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]lengthOfDay(PlanetName)", "name": "lengthOfDay", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String lengthOfDay(PlanetName planetName)", "original_string": "    public String lengthOfDay(PlanetName planetName) {\n        return resolve(\"planet.length_of_day.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]equatorialRadius()", "name": "equatorialRadius", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String equatorialRadius()", "original_string": "    public String equatorialRadius() {\n        return equatorialRadius(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]equatorialRadius(PlanetName)", "name": "equatorialRadius", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String equatorialRadius(PlanetName planetName)", "original_string": "    public String equatorialRadius(PlanetName planetName) {\n        return resolve(\"planet.equatorial_radius.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]surfaceArea()", "name": "surfaceArea", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String surfaceArea()", "original_string": "    public String surfaceArea() {\n        return surfaceArea(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]surfaceArea(PlanetName)", "name": "surfaceArea", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String surfaceArea(PlanetName planetName)", "original_string": "    public String surfaceArea(PlanetName planetName) {\n        return resolve(\"planet.surface_area.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]volume()", "name": "volume", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String volume()", "original_string": "    public String volume() {\n        return volume(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]volume(PlanetName)", "name": "volume", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String volume(PlanetName planetName)", "original_string": "    public String volume(PlanetName planetName) {\n        return resolve(\"planet.volume.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]mass()", "name": "mass", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String mass()", "original_string": "    public String mass() {\n        return mass(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]mass(PlanetName)", "name": "mass", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String mass(PlanetName planetName)", "original_string": "    public String mass(PlanetName planetName) {\n        return resolve(\"planet.mass.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]gravitationParameters()", "name": "gravitationParameters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String gravitationParameters()", "original_string": "    public String gravitationParameters() {\n        return gravitationParameters(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]gravitationParameters(PlanetName)", "name": "gravitationParameters", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String gravitationParameters(PlanetName planetName)", "original_string": "    public String gravitationParameters(PlanetName planetName) {\n        return resolve(\"planet.gravitational_parameters.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]density()", "name": "density", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String density()", "original_string": "    public String density() {\n        return density(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]density(PlanetName)", "name": "density", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String density(PlanetName planetName)", "original_string": "    public String density(PlanetName planetName) {\n        return resolve(\"planet.density.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]equatorialGravity()", "name": "equatorialGravity", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String equatorialGravity()", "original_string": "    public String equatorialGravity() {\n        return equatorialGravity(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]equatorialGravity(PlanetName)", "name": "equatorialGravity", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String equatorialGravity(PlanetName planetName)", "original_string": "    public String equatorialGravity(PlanetName planetName) {\n        return resolve(\"planet.equatorial_gravity.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]escapeVelocity()", "name": "escapeVelocity", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String escapeVelocity()", "original_string": "    public String escapeVelocity() {\n        return escapeVelocity(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]escapeVelocity(PlanetName)", "name": "escapeVelocity", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String escapeVelocity(PlanetName planetName)", "original_string": "    public String escapeVelocity(PlanetName planetName) {\n        return resolve(\"planet.escape_velocity.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]rotationPeriod()", "name": "rotationPeriod", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String rotationPeriod()", "original_string": "    public String rotationPeriod() {\n        return rotationPeriod(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]rotationPeriod(PlanetName)", "name": "rotationPeriod", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String rotationPeriod(PlanetName planetName)", "original_string": "    public String rotationPeriod(PlanetName planetName) {\n        return resolve(\"planet.rotation_period.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]orbitalPeriod()", "name": "orbitalPeriod", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String orbitalPeriod()", "original_string": "    public String orbitalPeriod() {\n        return orbitalPeriod(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]orbitalPeriod(PlanetName)", "name": "orbitalPeriod", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String orbitalPeriod(PlanetName planetName)", "original_string": "    public String orbitalPeriod(PlanetName planetName) {\n        return resolve(\"planet.orbital_period.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanOrbitalSpeed()", "name": "meanOrbitalSpeed", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String meanOrbitalSpeed()", "original_string": "    public String meanOrbitalSpeed() {\n        return meanOrbitalSpeed(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanOrbitalSpeed(PlanetName)", "name": "meanOrbitalSpeed", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String meanOrbitalSpeed(PlanetName planetName)", "original_string": "    public String meanOrbitalSpeed(PlanetName planetName) {\n        return resolve(\"planet.mean_orbital_speed.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]eccentricity()", "name": "eccentricity", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String eccentricity()", "original_string": "    public String eccentricity() {\n        return eccentricity(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]eccentricity(PlanetName)", "name": "eccentricity", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String eccentricity(PlanetName planetName)", "original_string": "    public String eccentricity(PlanetName planetName) {\n        return resolve(\"planet.eccentricity.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]inclination()", "name": "inclination", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String inclination()", "original_string": "    public String inclination() {\n        return inclination(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]inclination(PlanetName)", "name": "inclination", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String inclination(PlanetName planetName)", "original_string": "    public String inclination(PlanetName planetName) {\n        return resolve(\"planet.inclination.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]axialTilt()", "name": "axialTilt", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String axialTilt()", "original_string": "    public String axialTilt() {\n        return axialTilt(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]axialTilt(PlanetName)", "name": "axialTilt", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String axialTilt(PlanetName planetName)", "original_string": "    public String axialTilt(PlanetName planetName) {\n        return resolve(\"planet.axial_tilt.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanSurfaceTemperature()", "name": "meanSurfaceTemperature", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String meanSurfaceTemperature()", "original_string": "    public String meanSurfaceTemperature() {\n        return meanSurfaceTemperature(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanSurfaceTemperature(PlanetName)", "name": "meanSurfaceTemperature", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String meanSurfaceTemperature(PlanetName planetName)", "original_string": "    public String meanSurfaceTemperature(PlanetName planetName) {\n        return resolve(\"planet.mean_surface_temperature.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanAirTemperature()", "name": "meanAirTemperature", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String meanAirTemperature()", "original_string": "    public String meanAirTemperature() {\n        return meanAirTemperature(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]meanAirTemperature(PlanetName)", "name": "meanAirTemperature", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String meanAirTemperature(PlanetName planetName)", "original_string": "    public String meanAirTemperature(PlanetName planetName) {\n        return resolve(\"planet.mean_air_temperature.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]atmosphericComposition()", "name": "atmosphericComposition", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String atmosphericComposition()", "original_string": "    public String atmosphericComposition() {\n        return atmosphericComposition(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]atmosphericComposition(PlanetName)", "name": "atmosphericComposition", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String atmosphericComposition(PlanetName planetName)", "original_string": "    public String atmosphericComposition(PlanetName planetName) {\n        return resolve(\"planet.atmospheric_composition.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]numberOfKnownMoons()", "name": "numberOfKnownMoons", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String numberOfKnownMoons()", "original_string": "    public String numberOfKnownMoons() {\n        return numberOfKnownMoons(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]numberOfKnownMoons(PlanetName)", "name": "numberOfKnownMoons", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String numberOfKnownMoons(PlanetName planetName)", "original_string": "    public String numberOfKnownMoons(PlanetName planetName) {\n        return resolve(\"planet.number_of_known_moons.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]rings()", "name": "rings", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String rings()", "original_string": "    public String rings() {\n        return rings(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]rings(PlanetName)", "name": "rings", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String rings(PlanetName planetName)", "original_string": "    public String rings(PlanetName planetName) {\n        return resolve(\"planet.rings.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]planetaryDiscriminant()", "name": "planetaryDiscriminant", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String planetaryDiscriminant()", "original_string": "    public String planetaryDiscriminant() {\n        return planetaryDiscriminant(faker.options().option(PlanetName.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Planet.java.Planet.[String]planetaryDiscriminant(PlanetName)", "name": "planetaryDiscriminant", "arg_nums": 1, "params": [{"name": "planetName", "type": "PlanetName"}], "return_type": "String", "signature": "public String planetaryDiscriminant(PlanetName planetName)", "original_string": "    public String planetaryDiscriminant(PlanetName planetName) {\n        return resolve(\"planet.planetary_discriminant.\" + planetName.getName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Planet.java", "class_name": "Planet", "class_uri": "src/main/java/net/datafaker/providers/base/Planet.java.Planet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[]Address(BaseProviders)", "name": "Address", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Address(BaseProviders faker)", "original_string": "    protected Address(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]streetName()", "name": "streetName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String streetName()", "original_string": "    public String streetName() {\n        return resolve(\"address.street_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]streetAddressNumber()", "name": "streetAddressNumber", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String streetAddressNumber()", "original_string": "    public String streetAddressNumber() {\n        return String.valueOf(faker.random().nextInt(1000));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]streetAddress()", "name": "streetAddress", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String streetAddress()", "original_string": "    public String streetAddress() {\n        return resolve(\"address.street_address\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]streetAddress(boolean)", "name": "streetAddress", "arg_nums": 1, "params": [{"name": "includeSecondary", "type": "boolean"}], "return_type": "String", "signature": "public String streetAddress(boolean includeSecondary)", "original_string": "    public String streetAddress(boolean includeSecondary) {\n        String streetAddress = resolve(\"address.street_address\");\n        if (includeSecondary) {\n            streetAddress = streetAddress + \" \" + secondaryAddress();\n        }\n        return streetAddress;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]secondaryAddress()", "name": "secondaryAddress", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String secondaryAddress()", "original_string": "    public String secondaryAddress() {\n        return faker.numerify(resolve(\"address.secondary_address\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]zipCode()", "name": "zipCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String zipCode()", "original_string": "    public String zipCode() {\n        return faker.bothify(resolve(\"address.postcode\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a String representing a standard 5-digit zip code.\n\n@return a String representing a standard zip code\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]postcode()", "name": "postcode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String postcode()", "original_string": "    public String postcode() {\n        return faker.bothify(resolve(\"address.postcode\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]zipCodePlus4()", "name": "zipCodePlus4", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String zipCodePlus4()", "original_string": "    public String zipCodePlus4() {\n        return faker.bothify(resolve(\"address.postcode_plus_four\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a String representing a ZIP+4 code for greater geographic specificity.\nThis is a 9-digit zip code, but the String itself is 10 characters including the hyphen.\n\n@return a String representing a ZIP+4 code\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]zipCodeByState(String)", "name": "zipCodeByState", "arg_nums": 1, "params": [{"name": "stateAbbr", "type": "String"}], "return_type": "String", "signature": "public String zipCodeByState(String stateAbbr)", "original_string": "    public String zipCodeByState(String stateAbbr) {\n        return resolve(\"address.postcode_by_state.\" + stateAbbr);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]countyByZipCode(String)", "name": "countyByZipCode", "arg_nums": 1, "params": [{"name": "postCode", "type": "String"}], "return_type": "String", "signature": "public String countyByZipCode(String postCode)", "original_string": "    public String countyByZipCode(String postCode) {\n        return resolve(\"address.county_by_postcode.\" + postCode, () -> \"County is not configured for postcode \" + postCode);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]streetSuffix()", "name": "streetSuffix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String streetSuffix()", "original_string": "    public String streetSuffix() {\n        return resolve(\"address.street_suffix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]streetPrefix()", "name": "streetPrefix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Deterministic\n    public String streetPrefix()", "original_string": "    @Deterministic\n    public String streetPrefix() {\n        return resolve(\"address.street_prefix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "@Deterministic\n    public", "marker_annotations": ["@Deterministic"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]citySuffix()", "name": "citySuffix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String citySuffix()", "original_string": "    public String citySuffix() {\n        return resolve(\"address.city_suffix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]cityPrefix()", "name": "cityPrefix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String cityPrefix()", "original_string": "    public String cityPrefix() {\n        return resolve(\"address.city_prefix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]city()", "name": "city", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String city()", "original_string": "    public String city() {\n        return resolve(\"address.city\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]cityName()", "name": "cityName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String cityName()", "original_string": "    public String cityName() {\n        return resolve(\"address.city_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]state()", "name": "state", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String state()", "original_string": "    public String state() {\n        return resolve(\"address.state\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]stateAbbr()", "name": "stateAbbr", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String stateAbbr()", "original_string": "    public String stateAbbr() {\n        return resolve(\"address.state_abbr\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]latitude()", "name": "latitude", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String latitude()", "original_string": "    public String latitude() {\n        return String.format(faker.getContext().getLocale(), \"%.8f\", (faker.random().nextDouble() * 180) - 90);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return Returns the latitude, a number between -90 to 90.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]longitude()", "name": "longitude", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String longitude()", "original_string": "    public String longitude() {\n        return String.format(faker.getContext().getLocale(), \"%.8f\", (faker.random().nextDouble() * 360) - 180);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return Returns the longitude, a number between -180 and 180\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]latLon()", "name": "latLon", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String latLon()", "original_string": "    public String latLon() {\n        return latLon(\",\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return Returns the lat/lon coordinates formatted as lat,lon.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]latLon(String)", "name": "latLon", "arg_nums": 1, "params": [{"name": "delimiter", "type": "String"}], "return_type": "String", "signature": "public String latLon(String delimiter)", "original_string": "    public String latLon(String delimiter) {\n        return latitude() + delimiter + longitude();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return Returns the lat/lon coordinates formatted as lat delimiter lon.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]lonLat()", "name": "lonLat", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String lonLat()", "original_string": "    public String lonLat() {\n        return lonLat(\",\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return Returns the lat/lon coordinates formatted as lon,lat.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]lonLat(String)", "name": "lonLat", "arg_nums": 1, "params": [{"name": "delimiter", "type": "String"}], "return_type": "String", "signature": "public String lonLat(String delimiter)", "original_string": "    public String lonLat(String delimiter) {\n        return longitude() + delimiter + latitude();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return Returns the lat/lon coordinates formatted as lon delimiter lat.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]timeZone()", "name": "timeZone", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String timeZone()", "original_string": "    public String timeZone() {\n        return resolve(\"address.time_zone\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]country()", "name": "country", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String country()", "original_string": "    public String country() {\n        return resolve(\"address.country\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String countryCode()", "original_string": "    public String countryCode() {\n        return resolve(\"address.country_code\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]buildingNumber()", "name": "buildingNumber", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String buildingNumber()", "original_string": "    public String buildingNumber() {\n        return faker.numerify(resolve(\"address.building_number\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]fullAddress()", "name": "fullAddress", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String fullAddress()", "original_string": "    public String fullAddress() {\n        return resolve(\"address.full_address\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Address.java.Address.[String]mailBox()", "name": "mailBox", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String mailBox()", "original_string": "    public String mailBox() {\n        return faker.numerify(resolve(\"address.mail_box\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Address.java", "class_name": "Address", "class_uri": "src/main/java/net/datafaker/providers/base/Address.java.Address", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Job.java.Job.[]Job(BaseProviders)", "name": "Job", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "public Job(final BaseProviders faker)", "original_string": "    public Job(final BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Job.java", "class_name": "Job", "class_uri": "src/main/java/net/datafaker/providers/base/Job.java.Job", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Job.java.Job.[String]field()", "name": "field", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String field()", "original_string": "    public String field() {\n        return resolve(\"job.field\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Job.java", "class_name": "Job", "class_uri": "src/main/java/net/datafaker/providers/base/Job.java.Job", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Job.java.Job.[String]seniority()", "name": "seniority", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String seniority()", "original_string": "    public String seniority() {\n        return resolve(\"job.seniority\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Job.java", "class_name": "Job", "class_uri": "src/main/java/net/datafaker/providers/base/Job.java.Job", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Job.java.Job.[String]position()", "name": "position", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String position()", "original_string": "    public String position() {\n        return resolve(\"job.position\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Job.java", "class_name": "Job", "class_uri": "src/main/java/net/datafaker/providers/base/Job.java.Job", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Job.java.Job.[String]keySkills()", "name": "keySkills", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String keySkills()", "original_string": "    public String keySkills() {\n        return resolve(\"job.key_skills\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Job.java", "class_name": "Job", "class_uri": "src/main/java/net/datafaker/providers/base/Job.java.Job", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Job.java.Job.[String]title()", "name": "title", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String title()", "original_string": "    public String title() {\n        return resolve(\"job.title\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Job.java", "class_name": "Job", "class_uri": "src/main/java/net/datafaker/providers/base/Job.java.Job", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/LanguageCode.java.LanguageCode.[]LanguageCode(BaseProviders)", "name": "LanguageCode", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected LanguageCode(BaseProviders faker)", "original_string": "    protected LanguageCode(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/LanguageCode.java", "class_name": "LanguageCode", "class_uri": "src/main/java/net/datafaker/providers/base/LanguageCode.java.LanguageCode", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/LanguageCode.java.LanguageCode.[String]iso639()", "name": "iso639", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String iso639()", "original_string": "    public String iso639() {\n        int index = faker.random().nextInt(languages.length);\n        return languages[index];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/LanguageCode.java", "class_name": "LanguageCode", "class_uri": "src/main/java/net/datafaker/providers/base/LanguageCode.java.LanguageCode", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a random 2-letter language code defined in ISO 639.\n\n@return a random 2-letter language code\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[]Relationship(BaseProviders)", "name": "Relationship", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Relationship(final BaseProviders faker)", "original_string": "    protected Relationship(final BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Relationship.java", "class_name": "Relationship", "class_uri": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[String]direct()", "name": "direct", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String direct()", "original_string": "    public String direct() {\n        return resolve(Kind.direct.expression);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Relationship.java", "class_name": "Relationship", "class_uri": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[String]extended()", "name": "extended", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String extended()", "original_string": "    public String extended() {\n        return resolve(Kind.extended.expression);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Relationship.java", "class_name": "Relationship", "class_uri": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[String]inLaw()", "name": "inLaw", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String inLaw()", "original_string": "    public String inLaw() {\n        return resolve(Kind.inLaw.expression);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Relationship.java", "class_name": "Relationship", "class_uri": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[String]spouse()", "name": "spouse", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String spouse()", "original_string": "    public String spouse() {\n        return resolve(Kind.spouse.expression);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Relationship.java", "class_name": "Relationship", "class_uri": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[String]parent()", "name": "parent", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String parent()", "original_string": "    public String parent() {\n        return resolve(Kind.parent.expression);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Relationship.java", "class_name": "Relationship", "class_uri": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[String]sibling()", "name": "sibling", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sibling()", "original_string": "    public String sibling() {\n        return resolve(Kind.sibling.expression);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Relationship.java", "class_name": "Relationship", "class_uri": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship.[String]any()", "name": "any", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String any()", "original_string": "    public String any() {\n        Kind kind = faker.options().option(Kind.values());\n        return resolve(kind.expression);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Relationship.java", "class_name": "Relationship", "class_uri": "src/main/java/net/datafaker/providers/base/Relationship.java.Relationship", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[]Azure(BaseProviders)", "name": "Azure", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Azure(BaseProviders faker)", "original_string": "    protected Azure(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]region()", "name": "region", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String region()", "original_string": "    public String region() {\n        return resolve(\"azure.regions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]subscriptionId()", "name": "subscriptionId", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String subscriptionId()", "original_string": "    public String subscriptionId() {\n        return faker.random().hex(8, false) + '-' +\n            faker.random().hex(4, false) + '-' +\n            faker.random().hex(4, false) + '-' +\n            faker.random().hex(4, false) + '-' +\n            faker.random().hex(12, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]tenantId()", "name": "tenantId", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String tenantId()", "original_string": "    public String tenantId() {\n        return subscriptionId();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]resourceGroup()", "name": "resourceGroup", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String resourceGroup()", "original_string": "    public String resourceGroup() {\n        return \"rg-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]managementGroup()", "name": "managementGroup", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String managementGroup()", "original_string": "    public String managementGroup() {\n        return \"mg-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]applicationGateway()", "name": "applicationGateway", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String applicationGateway()", "original_string": "    public String applicationGateway() {\n        return \"agw-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]bastionHost()", "name": "bastionHost", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String bastionHost()", "original_string": "    public String bastionHost() {\n        return \"bas-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]firewall()", "name": "firewall", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String firewall()", "original_string": "    public String firewall() {\n        return \"afw-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]loadBalancer()", "name": "loadBalancer", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String loadBalancer()", "original_string": "    public String loadBalancer() {\n        return \"lbi-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]networkSecurityGroup()", "name": "networkSecurityGroup", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String networkSecurityGroup()", "original_string": "    public String networkSecurityGroup() {\n        return \"nsg-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]virtualNetwork()", "name": "virtualNetwork", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String virtualNetwork()", "original_string": "    public String virtualNetwork() {\n        return \"vnet-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]virtualWan()", "name": "virtualWan", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String virtualWan()", "original_string": "    public String virtualWan() {\n        return \"vwan-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]appServiceEnvironment()", "name": "appServiceEnvironment", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String appServiceEnvironment()", "original_string": "    public String appServiceEnvironment() {\n        return \"ase-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]appServicePlan()", "name": "appServicePlan", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String appServicePlan()", "original_string": "    public String appServicePlan() {\n        return \"asp-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]loadTesting()", "name": "loadTesting", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String loadTesting()", "original_string": "    public String loadTesting() {\n        return \"lt-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]staticWebApp()", "name": "staticWebApp", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String staticWebApp()", "original_string": "    public String staticWebApp() {\n        return \"stapp-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]virtualMachine()", "name": "virtualMachine", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String virtualMachine()", "original_string": "    public String virtualMachine() {\n        return \"vm-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]storageAccount()", "name": "storageAccount", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String storageAccount()", "original_string": "    public String storageAccount() {\n        return \"st-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]containerRegistry()", "name": "containerRegistry", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String containerRegistry()", "original_string": "    public String containerRegistry() {\n        return \"cr-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]containerApps()", "name": "containerApps", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String containerApps()", "original_string": "    public String containerApps() {\n        return \"ca-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]containerAppsEnvironment()", "name": "containerAppsEnvironment", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String containerAppsEnvironment()", "original_string": "    public String containerAppsEnvironment() {\n        return \"cae-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]containerInstance()", "name": "containerInstance", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String containerInstance()", "original_string": "    public String containerInstance() {\n        return \"ci-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]cosmosDBDatabase()", "name": "cosmosDBDatabase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String cosmosDBDatabase()", "original_string": "    public String cosmosDBDatabase() {\n        return \"cosmos-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]sqlDatabase()", "name": "sqlDatabase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sqlDatabase()", "original_string": "    public String sqlDatabase() {\n        return \"sql-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]mysqlDatabase()", "name": "mysqlDatabase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String mysqlDatabase()", "original_string": "    public String mysqlDatabase() {\n        return \"mysql-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]postgreSQLDatabase()", "name": "postgreSQLDatabase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String postgreSQLDatabase()", "original_string": "    public String postgreSQLDatabase() {\n        return \"psql-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]serviceBus()", "name": "serviceBus", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String serviceBus()", "original_string": "    public String serviceBus() {\n        return \"sb-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]serviceBusQueue()", "name": "serviceBusQueue", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String serviceBusQueue()", "original_string": "    public String serviceBusQueue() {\n        return \"sbq-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]serviceBusTopic()", "name": "serviceBusTopic", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String serviceBusTopic()", "original_string": "    public String serviceBusTopic() {\n        return \"sbt-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]keyVault()", "name": "keyVault", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String keyVault()", "original_string": "    public String keyVault() {\n        return \"kv-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]logAnalytics()", "name": "logAnalytics", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String logAnalytics()", "original_string": "    public String logAnalytics() {\n        return \"log-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]springApps()", "name": "springApps", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String springApps()", "original_string": "    public String springApps() {\n        return \"sa-\" + randHex();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Azure.java.Azure.[String]randHex()", "name": "randHex", "arg_nums": 0, "params": [], "return_type": "String", "signature": "private String randHex()", "original_string": "    private String randHex() {\n        return faker.random().hex(16, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Azure.java", "class_name": "Azure", "class_uri": "src/main/java/net/datafaker/providers/base/Azure.java.Azure", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/House.java.House.[]House(BaseProviders)", "name": "House", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected House(BaseProviders faker)", "original_string": "    protected House(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/House.java", "class_name": "House", "class_uri": "src/main/java/net/datafaker/providers/base/House.java.House", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/House.java.House.[String]furniture()", "name": "furniture", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String furniture()", "original_string": "    public String furniture() {\n        return resolve(\"house.furniture\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/House.java", "class_name": "House", "class_uri": "src/main/java/net/datafaker/providers/base/House.java.House", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random name of furniture.\n\n@return a string of furniture.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/House.java.House.[String]room()", "name": "room", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String room()", "original_string": "    public String room() {\n        return resolve(\"house.rooms\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/House.java", "class_name": "House", "class_uri": "src/main/java/net/datafaker/providers/base/House.java.House", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random name of a room in a house.\n\n@return a string of room.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company.[]Company(BaseProviders)", "name": "Company", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Company(BaseProviders faker)", "original_string": "    protected Company(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Company.java", "class_name": "Company", "class_uri": "src/main/java/net/datafaker/providers/base/Company.java.Company", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"company.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Company.java", "class_name": "Company", "class_uri": "src/main/java/net/datafaker/providers/base/Company.java.Company", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]suffix()", "name": "suffix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String suffix()", "original_string": "    public String suffix() {\n        return resolve(\"company.suffix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Company.java", "class_name": "Company", "class_uri": "src/main/java/net/datafaker/providers/base/Company.java.Company", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]industry()", "name": "industry", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String industry()", "original_string": "    public String industry() {\n        return resolve(\"company.industry\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Company.java", "class_name": "Company", "class_uri": "src/main/java/net/datafaker/providers/base/Company.java.Company", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]profession()", "name": "profession", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String profession()", "original_string": "    public String profession() {\n        return resolve(\"company.profession\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Company.java", "class_name": "Company", "class_uri": "src/main/java/net/datafaker/providers/base/Company.java.Company", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]buzzword()", "name": "buzzword", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String buzzword()", "original_string": "    public String buzzword() {\n        return faker.options().nextElement(allBuzzwords.get());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Company.java", "class_name": "Company", "class_uri": "src/main/java/net/datafaker/providers/base/Company.java.Company", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company.[List<String>]loadBuzzwords()", "name": "loadBuzzwords", "arg_nums": 0, "params": [], "return_type": "List<String>", "signature": "private List<String> loadBuzzwords()", "original_string": "    private List<String> loadBuzzwords() {\n        List<List<String>> buzzwordLists = faker.fakeValuesService().fetchObject(\"company.buzzwords\", faker.getContext());\n        return buzzwordLists.stream().flatMap(Collection::stream).toList();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Company.java", "class_name": "Company", "class_uri": "src/main/java/net/datafaker/providers/base/Company.java.Company", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]catchPhrase()", "name": "catchPhrase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String catchPhrase()", "original_string": "    public String catchPhrase() {\n        List<List<String>> catchPhraseLists = faker.fakeValuesService().fetchObject(\"company.buzzwords\", faker.getContext());\n        return joinSampleOfEachList(catchPhraseLists);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Company.java", "class_name": "Company", "class_uri": "src/main/java/net/datafaker/providers/base/Company.java.Company", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate a buzzword-laden catch phrase.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]bs()", "name": "bs", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String bs()", "original_string": "    public String bs() {\n        List<List<String>> buzzwordLists = faker.fakeValuesService().fetchObject(\"company.bs\", faker.getContext());\n        return joinSampleOfEachList(buzzwordLists);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Company.java", "class_name": "Company", "class_uri": "src/main/java/net/datafaker/providers/base/Company.java.Company", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nWhen a straight answer won't do, BS to the rescue!\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]logo()", "name": "logo", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String logo()", "original_string": "    public String logo() {\n        int number = faker.random().nextInt(13) + 1;\n        return \"https://pigment.github.io/fake-logos/logos/medium/color/\" + number + \".png\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Company.java", "class_name": "Company", "class_uri": "src/main/java/net/datafaker/providers/base/Company.java.Company", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate a random company logo url in PNG format.\n"}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]url()", "name": "url", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String url()", "original_string": "    public String url() {\n        return \"www.\"\n            + FakerIDN.toASCII(domainName()) + \".\"\n            + domainSuffix();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Company.java", "class_name": "Company", "class_uri": "src/main/java/net/datafaker/providers/base/Company.java.Company", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]domainName()", "name": "domainName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "private String domainName()", "original_string": "    private String domainName() {\n        final char[] res = name().toLowerCase(faker.getContext().getLocale()).toCharArray();\n        int offset = 0;\n        for (int i = 0; i < res.length; i++) {\n            final char c = res[i];\n            switch (c) {\n                case '.', ',', '\\'', ' ', ']' -> offset++;\n                default -> res[i - offset] = res[i];\n            }\n        }\n        return String.valueOf(res, 0, res.length - offset);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Company.java", "class_name": "Company", "class_uri": "src/main/java/net/datafaker/providers/base/Company.java.Company", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]domainSuffix()", "name": "domainSuffix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "private String domainSuffix()", "original_string": "    private String domainSuffix() {\n        return resolve(\"internet.domain_suffix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Company.java", "class_name": "Company", "class_uri": "src/main/java/net/datafaker/providers/base/Company.java.Company", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Company.java.Company.[String]joinSampleOfEachList(List<List<String>>)", "name": "joinSampleOfEachList", "arg_nums": 1, "params": [{"name": "listOfLists", "type": "List<List<String>>"}], "return_type": "String", "signature": "private String joinSampleOfEachList(List<List<String>> listOfLists)", "original_string": "    private String joinSampleOfEachList(List<List<String>> listOfLists) {\n        return listOfLists.stream()\n            .map(list -> faker.options().nextElement(list))\n            .collect(joining(\" \"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Company.java", "class_name": "Company", "class_uri": "src/main/java/net/datafaker/providers/base/Company.java.Company", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare.[]Shakespeare(BaseProviders)", "name": "Shakespeare", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Shakespeare(BaseProviders faker)", "original_string": "    protected Shakespeare(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Shakespeare.java", "class_name": "Shakespeare", "class_uri": "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare.[String]hamletQuote()", "name": "hamletQuote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String hamletQuote()", "original_string": "    public String hamletQuote() {\n        return randomElement(hamletQuotes);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Shakespeare.java", "class_name": "Shakespeare", "class_uri": "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare.[String]asYouLikeItQuote()", "name": "asYouLikeItQuote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String asYouLikeItQuote()", "original_string": "    public String asYouLikeItQuote() {\n        return randomElement(asYouLikeItQuotes);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Shakespeare.java", "class_name": "Shakespeare", "class_uri": "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare.[String]kingRichardIIIQuote()", "name": "kingRichardIIIQuote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String kingRichardIIIQuote()", "original_string": "    public String kingRichardIIIQuote() {\n        return randomElement(kingRichardIIIQuotes);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Shakespeare.java", "class_name": "Shakespeare", "class_uri": "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare.[String]romeoAndJulietQuote()", "name": "romeoAndJulietQuote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String romeoAndJulietQuote()", "original_string": "    public String romeoAndJulietQuote() {\n        return randomElement(romeoAndJulietQuotes);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Shakespeare.java", "class_name": "Shakespeare", "class_uri": "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare.[String]randomElement(String[])", "name": "randomElement", "arg_nums": 1, "params": [{"name": "values", "type": "String[]"}], "return_type": "String", "signature": "private String randomElement(String[] values)", "original_string": "    private String randomElement(String[] values) {\n        return values[faker.random().nextInt(values.length)];\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/Shakespeare.java", "class_name": "Shakespeare", "class_uri": "src/main/java/net/datafaker/providers/base/Shakespeare.java.Shakespeare", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries.[]CultureSeries(BaseProviders)", "name": "CultureSeries", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected CultureSeries(BaseProviders faker)", "original_string": "    protected CultureSeries(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CultureSeries.java", "class_name": "CultureSeries", "class_uri": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries.[String]books()", "name": "books", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String books()", "original_string": "    public String books() {\n        return resolve(\"culture_series.books\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CultureSeries.java", "class_name": "CultureSeries", "class_uri": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries.[String]cultureShips()", "name": "cultureShips", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String cultureShips()", "original_string": "    public String cultureShips() {\n        return resolve(\"culture_series.culture_ships\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CultureSeries.java", "class_name": "CultureSeries", "class_uri": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries.[String]cultureShipClasses()", "name": "cultureShipClasses", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String cultureShipClasses()", "original_string": "    public String cultureShipClasses() {\n        return resolve(\"culture_series.culture_ship_classes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CultureSeries.java", "class_name": "CultureSeries", "class_uri": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries.[String]cultureShipClassAbvs()", "name": "cultureShipClassAbvs", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String cultureShipClassAbvs()", "original_string": "    public String cultureShipClassAbvs() {\n        return resolve(\"culture_series.culture_ship_class_abvs\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CultureSeries.java", "class_name": "CultureSeries", "class_uri": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries.[String]civs()", "name": "civs", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String civs()", "original_string": "    public String civs() {\n        return resolve(\"culture_series.civs\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CultureSeries.java", "class_name": "CultureSeries", "class_uri": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries.[String]planets()", "name": "planets", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String planets()", "original_string": "    public String planets() {\n        return resolve(\"culture_series.planets\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/base/CultureSeries.java", "class_name": "CultureSeries", "class_uri": "src/main/java/net/datafaker/providers/base/CultureSeries.java.CultureSeries", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker.[]SportFaker()", "name": "SportFaker", "arg_nums": 0, "params": [], "return_type": "", "signature": "public SportFaker()", "original_string": "    public SportFaker() {\n        super();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/SportFaker.java", "class_name": "SportFaker", "class_uri": "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker.[]SportFaker(Locale)", "name": "SportFaker", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "", "signature": "public SportFaker(Locale locale)", "original_string": "    public SportFaker(Locale locale) {\n        super(locale);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/SportFaker.java", "class_name": "SportFaker", "class_uri": "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker.[]SportFaker(Random)", "name": "SportFaker", "arg_nums": 1, "params": [{"name": "random", "type": "Random"}], "return_type": "", "signature": "public SportFaker(Random random)", "original_string": "    public SportFaker(Random random) {\n        super(random);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/SportFaker.java", "class_name": "SportFaker", "class_uri": "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker.[]SportFaker(Locale,Random)", "name": "SportFaker", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "random", "type": "Random"}], "return_type": "", "signature": "public SportFaker(Locale locale, Random random)", "original_string": "    public SportFaker(Locale locale, Random random) {\n        super(locale, random);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/SportFaker.java", "class_name": "SportFaker", "class_uri": "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker.[]SportFaker(Locale,RandomService)", "name": "SportFaker", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "randomService", "type": "RandomService"}], "return_type": "", "signature": "public SportFaker(Locale locale, RandomService randomService)", "original_string": "    public SportFaker(Locale locale, RandomService randomService) {\n        super(locale, randomService);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/SportFaker.java", "class_name": "SportFaker", "class_uri": "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker.[]SportFaker(FakeValuesService,FakerContext)", "name": "SportFaker", "arg_nums": 2, "params": [{"name": "fakeValuesService", "type": "FakeValuesService"}, {"name": "context", "type": "FakerContext"}], "return_type": "", "signature": "public SportFaker(FakeValuesService fakeValuesService, FakerContext context)", "original_string": "    public SportFaker(FakeValuesService fakeValuesService, FakerContext context) {\n        super(fakeValuesService, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/SportFaker.java", "class_name": "SportFaker", "class_uri": "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Football.java.Football.[]Football(SportProviders)", "name": "Football", "arg_nums": 1, "params": [{"name": "faker", "type": "SportProviders"}], "return_type": "", "signature": "protected Football(SportProviders faker)", "original_string": "    protected Football(SportProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Football.java", "class_name": "Football", "class_uri": "src/main/java/net/datafaker/providers/sport/Football.java.Football", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Football.java.Football.[String]teams()", "name": "teams", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String teams()", "original_string": "    public String teams() {\n        return resolve(\"football.teams\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Football.java", "class_name": "Football", "class_uri": "src/main/java/net/datafaker/providers/sport/Football.java.Football", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Football.java.Football.[String]players()", "name": "players", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String players()", "original_string": "    public String players() {\n        return resolve(\"football.players\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Football.java", "class_name": "Football", "class_uri": "src/main/java/net/datafaker/providers/sport/Football.java.Football", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Football.java.Football.[String]coaches()", "name": "coaches", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String coaches()", "original_string": "    public String coaches() {\n        return resolve(\"football.coaches\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Football.java", "class_name": "Football", "class_uri": "src/main/java/net/datafaker/providers/sport/Football.java.Football", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Football.java.Football.[String]competitions()", "name": "competitions", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String competitions()", "original_string": "    public String competitions() {\n        return resolve(\"football.competitions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Football.java", "class_name": "Football", "class_uri": "src/main/java/net/datafaker/providers/sport/Football.java.Football", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Football.java.Football.[String]positions()", "name": "positions", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String positions()", "original_string": "    public String positions() {\n        return resolve(\"football.positions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Football.java", "class_name": "Football", "class_uri": "src/main/java/net/datafaker/providers/sport/Football.java.Football", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket.[]Cricket(SportProviders)", "name": "Cricket", "arg_nums": 1, "params": [{"name": "faker", "type": "SportProviders"}], "return_type": "", "signature": "protected Cricket(SportProviders faker)", "original_string": "    protected Cricket(SportProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Cricket.java", "class_name": "Cricket", "class_uri": "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket.[String]teams()", "name": "teams", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String teams()", "original_string": "    public String teams() {\n        return resolve(\"cricket.teams\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Cricket.java", "class_name": "Cricket", "class_uri": "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket.[String]players()", "name": "players", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String players()", "original_string": "    public String players() {\n        return resolve(\"cricket.players\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Cricket.java", "class_name": "Cricket", "class_uri": "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket.[String]formats()", "name": "formats", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String formats()", "original_string": "    public String formats() {\n        return resolve(\"cricket.formats\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Cricket.java", "class_name": "Cricket", "class_uri": "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket.[String]tournaments()", "name": "tournaments", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String tournaments()", "original_string": "    public String tournaments() {\n        return resolve(\"cricket.tournaments\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Cricket.java", "class_name": "Cricket", "class_uri": "src/main/java/net/datafaker/providers/sport/Cricket.java.Cricket", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball.[]Baseball(SportProviders)", "name": "Baseball", "arg_nums": 1, "params": [{"name": "faker", "type": "SportProviders"}], "return_type": "", "signature": "protected Baseball(SportProviders faker)", "original_string": "    protected Baseball(SportProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Baseball.java", "class_name": "Baseball", "class_uri": "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nBaseball\nCreate a constructor for Baseball.\n\n@param faker The Faker instance for generating random, different kinds of disease, e.g. the internal disease.\n"}, {"uris": "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball.[String]teams()", "name": "teams", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String teams()", "original_string": "    public String teams() {\n        return resolve(\"baseball.teams\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Baseball.java", "class_name": "Baseball", "class_uri": "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random Baseball teams\n\n@return Baseball teams\n"}, {"uris": "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball.[String]coaches()", "name": "coaches", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String coaches()", "original_string": "    public String coaches() {\n        return resolve(\"baseball.coaches\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Baseball.java", "class_name": "Baseball", "class_uri": "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random coaches in baseball game\n\n@return Baseball coaches\n"}, {"uris": "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball.[String]positions()", "name": "positions", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String positions()", "original_string": "    public String positions() {\n        return resolve(\"baseball.positions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Baseball.java", "class_name": "Baseball", "class_uri": "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random positions in baseball game\n\n@return Baseball positions\n"}, {"uris": "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball.[String]players()", "name": "players", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String players()", "original_string": "    public String players() {\n        return resolve(\"baseball.players\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Baseball.java", "class_name": "Baseball", "class_uri": "src/main/java/net/datafaker/providers/sport/Baseball.java.Baseball", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random baseball players\n\n@return Baseball players\n"}, {"uris": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[Baseball]baseball()", "name": "baseball", "arg_nums": 0, "params": [], "return_type": "Baseball", "signature": "default Baseball baseball()", "original_string": "    default Baseball baseball() {\n        return getProvider(Baseball.class, Baseball::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/SportProviders.java", "class_name": "SportProviders", "class_uri": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Baseball", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[Basketball]basketball()", "name": "basketball", "arg_nums": 0, "params": [], "return_type": "Basketball", "signature": "default Basketball basketball()", "original_string": "    default Basketball basketball() {\n        return getProvider(Basketball.class, Basketball::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/SportProviders.java", "class_name": "SportProviders", "class_uri": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Basketball", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[Chess]chess()", "name": "chess", "arg_nums": 0, "params": [], "return_type": "Chess", "signature": "default Chess chess()", "original_string": "    default Chess chess() {\n        return getProvider(Chess.class, Chess::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/SportProviders.java", "class_name": "SportProviders", "class_uri": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Chess", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[Cricket]cricket()", "name": "cricket", "arg_nums": 0, "params": [], "return_type": "Cricket", "signature": "default Cricket cricket()", "original_string": "    default Cricket cricket() {\n        return getProvider(Cricket.class, Cricket::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/SportProviders.java", "class_name": "SportProviders", "class_uri": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Cricket", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[EnglandFootBall]englandfootball()", "name": "englandfootball", "arg_nums": 0, "params": [], "return_type": "EnglandFootBall", "signature": "default EnglandFootBall englandfootball()", "original_string": "    default EnglandFootBall englandfootball() {\n        return getProvider(EnglandFootBall.class, EnglandFootBall::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/SportProviders.java", "class_name": "SportProviders", "class_uri": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "EnglandFootBall", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[Football]football()", "name": "football", "arg_nums": 0, "params": [], "return_type": "Football", "signature": "default Football football()", "original_string": "    default Football football() {\n        return getProvider(Football.class, Football::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/SportProviders.java", "class_name": "SportProviders", "class_uri": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Football", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[Formula1]formula1()", "name": "formula1", "arg_nums": 0, "params": [], "return_type": "Formula1", "signature": "default Formula1 formula1()", "original_string": "    default Formula1 formula1() {\n        return getProvider(Formula1.class, Formula1::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/SportProviders.java", "class_name": "SportProviders", "class_uri": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Formula1", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders.[Volleyball]volleyball()", "name": "volleyball", "arg_nums": 0, "params": [], "return_type": "Volleyball", "signature": "default Volleyball volleyball()", "original_string": "    default Volleyball volleyball() {\n        return getProvider(Volleyball.class, Volleyball::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/SportProviders.java", "class_name": "SportProviders", "class_uri": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Volleyball", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1.[]Formula1(SportProviders)", "name": "Formula1", "arg_nums": 1, "params": [{"name": "faker", "type": "SportProviders"}], "return_type": "", "signature": "protected Formula1(SportProviders faker)", "original_string": "    protected Formula1(SportProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Formula1.java", "class_name": "Formula1", "class_uri": "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1.[String]driver()", "name": "driver", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String driver()", "original_string": "    public String driver() {\n        return resolve(\"formula1.driver\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Formula1.java", "class_name": "Formula1", "class_uri": "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1.[String]team()", "name": "team", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String team()", "original_string": "    public String team() {\n        return resolve(\"formula1.team\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Formula1.java", "class_name": "Formula1", "class_uri": "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1.[String]circuit()", "name": "circuit", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String circuit()", "original_string": "    public String circuit() {\n        return resolve(\"formula1.circuit\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Formula1.java", "class_name": "Formula1", "class_uri": "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1.[String]grandPrix()", "name": "grandPrix", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String grandPrix()", "original_string": "    public String grandPrix() {\n        return resolve(\"formula1.grand_prix\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Formula1.java", "class_name": "Formula1", "class_uri": "src/main/java/net/datafaker/providers/sport/Formula1.java.Formula1", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/EnglandFootBall.java.EnglandFootBall.[]EnglandFootBall(SportProviders)", "name": "EnglandFootBall", "arg_nums": 1, "params": [{"name": "faker", "type": "SportProviders"}], "return_type": "", "signature": "protected EnglandFootBall(final SportProviders faker)", "original_string": "    protected EnglandFootBall(final SportProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/EnglandFootBall.java", "class_name": "EnglandFootBall", "class_uri": "src/main/java/net/datafaker/providers/sport/EnglandFootBall.java.EnglandFootBall", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/EnglandFootBall.java.EnglandFootBall.[String]league()", "name": "league", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String league()", "original_string": "    public String league() {\n        return resolve(\"englandfootball.leagues\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/EnglandFootBall.java", "class_name": "EnglandFootBall", "class_uri": "src/main/java/net/datafaker/providers/sport/EnglandFootBall.java.EnglandFootBall", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/EnglandFootBall.java.EnglandFootBall.[String]team()", "name": "team", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String team()", "original_string": "    public String team() {\n        return resolve(\"englandfootball.teams\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/EnglandFootBall.java", "class_name": "EnglandFootBall", "class_uri": "src/main/java/net/datafaker/providers/sport/EnglandFootBall.java.EnglandFootBall", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Chess.java.Chess.[]Chess(SportProviders)", "name": "Chess", "arg_nums": 1, "params": [{"name": "faker", "type": "SportProviders"}], "return_type": "", "signature": "protected Chess(SportProviders faker)", "original_string": "    protected Chess(SportProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Chess.java", "class_name": "Chess", "class_uri": "src/main/java/net/datafaker/providers/sport/Chess.java.Chess", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Chess.java.Chess.[String]player()", "name": "player", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String player()", "original_string": "    public String player() {\n        return resolve(\"chess.players\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Chess.java", "class_name": "Chess", "class_uri": "src/main/java/net/datafaker/providers/sport/Chess.java.Chess", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Chess.java.Chess.[String]tournament()", "name": "tournament", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String tournament()", "original_string": "    public String tournament() {\n        return resolve(\"chess.tournaments\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Chess.java", "class_name": "Chess", "class_uri": "src/main/java/net/datafaker/providers/sport/Chess.java.Chess", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Chess.java.Chess.[String]opening()", "name": "opening", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String opening()", "original_string": "    public String opening() {\n        return resolve(\"chess.openings\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Chess.java", "class_name": "Chess", "class_uri": "src/main/java/net/datafaker/providers/sport/Chess.java.Chess", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Chess.java.Chess.[String]title()", "name": "title", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String title()", "original_string": "    public String title() {\n        return resolve(\"chess.titles\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Chess.java", "class_name": "Chess", "class_uri": "src/main/java/net/datafaker/providers/sport/Chess.java.Chess", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball.[]Volleyball(SportProviders)", "name": "Volleyball", "arg_nums": 1, "params": [{"name": "faker", "type": "SportProviders"}], "return_type": "", "signature": "protected Volleyball(SportProviders faker)", "original_string": "    protected Volleyball(SportProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Volleyball.java", "class_name": "Volleyball", "class_uri": "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball.[String]team()", "name": "team", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String team()", "original_string": "    public String team() {\n        return resolve(\"volleyball.team\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Volleyball.java", "class_name": "Volleyball", "class_uri": "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball.[String]player()", "name": "player", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String player()", "original_string": "    public String player() {\n        return resolve(\"volleyball.player\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Volleyball.java", "class_name": "Volleyball", "class_uri": "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball.[String]coach()", "name": "coach", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String coach()", "original_string": "    public String coach() {\n        return resolve(\"volleyball.coach\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Volleyball.java", "class_name": "Volleyball", "class_uri": "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball.[String]position()", "name": "position", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String position()", "original_string": "    public String position() {\n        return resolve(\"volleyball.position\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Volleyball.java", "class_name": "Volleyball", "class_uri": "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball.[String]formation()", "name": "formation", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String formation()", "original_string": "    public String formation() {\n        return resolve(\"volleyball.formation\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Volleyball.java", "class_name": "Volleyball", "class_uri": "src/main/java/net/datafaker/providers/sport/Volleyball.java.Volleyball", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball.[]Basketball(SportProviders)", "name": "Basketball", "arg_nums": 1, "params": [{"name": "faker", "type": "SportProviders"}], "return_type": "", "signature": "protected Basketball(SportProviders faker)", "original_string": "    protected Basketball(SportProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Basketball.java", "class_name": "Basketball", "class_uri": "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a constructor for Basketball.\n\n@param faker The Faker instance for generating random, different kinds of disease, e.g. the internal disease.\n"}, {"uris": "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball.[String]teams()", "name": "teams", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String teams()", "original_string": "    public String teams() {\n        return resolve(\"basketball.teams\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Basketball.java", "class_name": "Basketball", "class_uri": "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random basketball teams\n\n@return Basketball teams\n"}, {"uris": "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball.[String]coaches()", "name": "coaches", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String coaches()", "original_string": "    public String coaches() {\n        return resolve(\"basketball.coaches\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Basketball.java", "class_name": "Basketball", "class_uri": "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random coaches in basketball game\n\n@return Basketball coaches\n"}, {"uris": "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball.[String]positions()", "name": "positions", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String positions()", "original_string": "    public String positions() {\n        return resolve(\"basketball.positions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Basketball.java", "class_name": "Basketball", "class_uri": "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random positions in basketball game\n\n@return Basketball positions\n"}, {"uris": "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball.[String]players()", "name": "players", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String players()", "original_string": "    public String players() {\n        return resolve(\"basketball.players\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/sport/Basketball.java", "class_name": "Basketball", "class_uri": "src/main/java/net/datafaker/providers/sport/Basketball.java.Basketball", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random basketball players\n\n@return Basketball players\n"}, {"uris": "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[]Control(VideoGameProviders)", "name": "Control", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected Control(VideoGameProviders faker)", "original_string": "    protected Control(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Control.java", "class_name": "Control", "class_uri": "src/main/java/net/datafaker/providers/videogame/Control.java.Control", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"control.character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Control.java", "class_name": "Control", "class_uri": "src/main/java/net/datafaker/providers/videogame/Control.java.Control", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"control.location\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Control.java", "class_name": "Control", "class_uri": "src/main/java/net/datafaker/providers/videogame/Control.java.Control", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]objectOfPower()", "name": "objectOfPower", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String objectOfPower()", "original_string": "    public String objectOfPower() {\n        return resolve(\"control.object_of_power\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Control.java", "class_name": "Control", "class_uri": "src/main/java/net/datafaker/providers/videogame/Control.java.Control", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]alteredItem()", "name": "alteredItem", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String alteredItem()", "original_string": "    public String alteredItem() {\n        return resolve(\"control.altered_item\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Control.java", "class_name": "Control", "class_uri": "src/main/java/net/datafaker/providers/videogame/Control.java.Control", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]alteredWorldEvent()", "name": "alteredWorldEvent", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String alteredWorldEvent()", "original_string": "    public String alteredWorldEvent() {\n        return resolve(\"control.altered_world_event\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Control.java", "class_name": "Control", "class_uri": "src/main/java/net/datafaker/providers/videogame/Control.java.Control", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]hiss()", "name": "hiss", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String hiss()", "original_string": "    public String hiss() {\n        return resolve(\"control.hiss\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Control.java", "class_name": "Control", "class_uri": "src/main/java/net/datafaker/providers/videogame/Control.java.Control", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]theBoard()", "name": "theBoard", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String theBoard()", "original_string": "    public String theBoard() {\n        return resolve(\"control.the_board\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Control.java", "class_name": "Control", "class_uri": "src/main/java/net/datafaker/providers/videogame/Control.java.Control", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Control.java.Control.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"control.quote\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Control.java", "class_name": "Control", "class_uri": "src/main/java/net/datafaker/providers/videogame/Control.java.Control", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/HalfLife.java.HalfLife.[]HalfLife(VideoGameProviders)", "name": "HalfLife", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected HalfLife(VideoGameProviders faker)", "original_string": "    protected HalfLife(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/HalfLife.java", "class_name": "HalfLife", "class_uri": "src/main/java/net/datafaker/providers/videogame/HalfLife.java.HalfLife", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/HalfLife.java.HalfLife.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"games.half_life.character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/HalfLife.java", "class_name": "HalfLife", "class_uri": "src/main/java/net/datafaker/providers/videogame/HalfLife.java.HalfLife", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/HalfLife.java.HalfLife.[String]enemy()", "name": "enemy", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String enemy()", "original_string": "    public String enemy() {\n        return resolve(\"games.half_life.enemy\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/HalfLife.java", "class_name": "HalfLife", "class_uri": "src/main/java/net/datafaker/providers/videogame/HalfLife.java.HalfLife", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/HalfLife.java.HalfLife.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"games.half_life.location\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/HalfLife.java", "class_name": "HalfLife", "class_uri": "src/main/java/net/datafaker/providers/videogame/HalfLife.java.HalfLife", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft.[]StarCraft(VideoGameProviders)", "name": "StarCraft", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected StarCraft(final VideoGameProviders faker)", "original_string": "    protected StarCraft(final VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/StarCraft.java", "class_name": "StarCraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft.[String]unit()", "name": "unit", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String unit()", "original_string": "    public String unit() {\n        return resolve(\"starcraft.units\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/StarCraft.java", "class_name": "StarCraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft.[String]building()", "name": "building", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String building()", "original_string": "    public String building() {\n        return resolve(\"starcraft.buildings\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/StarCraft.java", "class_name": "StarCraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"starcraft.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/StarCraft.java", "class_name": "StarCraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft.[String]planet()", "name": "planet", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String planet()", "original_string": "    public String planet() {\n        return resolve(\"starcraft.planets\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/StarCraft.java", "class_name": "StarCraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/StarCraft.java.StarCraft", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy.[]WarhammerFantasy(VideoGameProviders)", "name": "WarhammerFantasy", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected WarhammerFantasy(VideoGameProviders faker)", "original_string": "    protected WarhammerFantasy(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java", "class_name": "WarhammerFantasy", "class_uri": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy.[String]heros()", "name": "heros", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String heros()", "original_string": "    public String heros() {\n        return resolve(\"games.warhammer_fantasy.heros\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java", "class_name": "WarhammerFantasy", "class_uri": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"games.warhammer_fantasy.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java", "class_name": "WarhammerFantasy", "class_uri": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy.[String]locations()", "name": "locations", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String locations()", "original_string": "    public String locations() {\n        return resolve(\"games.warhammer_fantasy.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java", "class_name": "WarhammerFantasy", "class_uri": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy.[String]factions()", "name": "factions", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String factions()", "original_string": "    public String factions() {\n        return resolve(\"games.warhammer_fantasy.factions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java", "class_name": "WarhammerFantasy", "class_uri": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy.[String]creatures()", "name": "creatures", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String creatures()", "original_string": "    public String creatures() {\n        return resolve(\"games.warhammer_fantasy.creatures\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java", "class_name": "WarhammerFantasy", "class_uri": "src/main/java/net/datafaker/providers/videogame/WarhammerFantasy.java.WarhammerFantasy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing.[]EldenRing(VideoGameProviders)", "name": "EldenRing", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected EldenRing(VideoGameProviders faker)", "original_string": "    protected EldenRing(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/EldenRing.java", "class_name": "EldenRing", "class_uri": "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"elden_ring.location\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/EldenRing.java", "class_name": "EldenRing", "class_uri": "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing.[String]weapon()", "name": "weapon", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String weapon()", "original_string": "    public String weapon() {\n        return resolve(\"elden_ring.weapon\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/EldenRing.java", "class_name": "EldenRing", "class_uri": "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing.[String]skill()", "name": "skill", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String skill()", "original_string": "    public String skill() {\n        return resolve(\"elden_ring.skill\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/EldenRing.java", "class_name": "EldenRing", "class_uri": "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing.[String]spell()", "name": "spell", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String spell()", "original_string": "    public String spell() {\n        return resolve(\"elden_ring.spell\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/EldenRing.java", "class_name": "EldenRing", "class_uri": "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing.[String]npc()", "name": "npc", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String npc()", "original_string": "    public String npc() {\n        return resolve(\"elden_ring.npc\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/EldenRing.java", "class_name": "EldenRing", "class_uri": "src/main/java/net/datafaker/providers/videogame/EldenRing.java.EldenRing", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone.[]Hearthstone(VideoGameProviders)", "name": "Hearthstone", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected Hearthstone(final VideoGameProviders faker)", "original_string": "    protected Hearthstone(final VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java", "class_name": "Hearthstone", "class_uri": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone.[String]mainProfession()", "name": "mainProfession", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String mainProfession()", "original_string": "    public String mainProfession() {\n        return resolve(\"games.hearthstone.professions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java", "class_name": "Hearthstone", "class_uri": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone.[String]mainCharacter()", "name": "mainCharacter", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String mainCharacter()", "original_string": "    public String mainCharacter() {\n        return resolve(\"games.hearthstone.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java", "class_name": "Hearthstone", "class_uri": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone.[String]mainPattern()", "name": "mainPattern", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String mainPattern()", "original_string": "    public String mainPattern() {\n        return resolve(\"games.hearthstone.patterns\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java", "class_name": "Hearthstone", "class_uri": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone.[int]battlegroundsScore()", "name": "battlegroundsScore", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int battlegroundsScore()", "original_string": "    public int battlegroundsScore() {\n        return faker.random().nextInt(0, 16000);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java", "class_name": "Hearthstone", "class_uri": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone.[String]standardRank()", "name": "standardRank", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String standardRank()", "original_string": "    public String standardRank() {\n        String rank = resolve(\"games.hearthstone.rank\");\n        if (\"Legend\".equals(rank)) {\n            rank = rank + \" \" + faker.random().nextInt(1, 65000);\n        } else {\n            rank = rank + \" \" + faker.random().nextInt(1, 10);\n        }\n        return rank;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java", "class_name": "Hearthstone", "class_uri": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone.[String]wildRank()", "name": "wildRank", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String wildRank()", "original_string": "    public String wildRank() {\n        return standardRank();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java", "class_name": "Hearthstone", "class_uri": "src/main/java/net/datafaker/providers/videogame/Hearthstone.java.Hearthstone", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends.[]LeagueOfLegends(VideoGameProviders)", "name": "LeagueOfLegends", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected LeagueOfLegends(VideoGameProviders faker)", "original_string": "    protected LeagueOfLegends(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java", "class_name": "LeagueOfLegends", "class_uri": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends.[String]champion()", "name": "champion", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String champion()", "original_string": "    public String champion() {\n        return resolve(\"games.league_of_legends.champion\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java", "class_name": "LeagueOfLegends", "class_uri": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"games.league_of_legends.location\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java", "class_name": "LeagueOfLegends", "class_uri": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"games.league_of_legends.quote\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java", "class_name": "LeagueOfLegends", "class_uri": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends.[String]summonerSpell()", "name": "summonerSpell", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String summonerSpell()", "original_string": "    public String summonerSpell() {\n        return resolve(\"games.league_of_legends.summoner_spell\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java", "class_name": "LeagueOfLegends", "class_uri": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends.[String]masteries()", "name": "masteries", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String masteries()", "original_string": "    public String masteries() {\n        return resolve(\"games.league_of_legends.masteries\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java", "class_name": "LeagueOfLegends", "class_uri": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends.[String]rank()", "name": "rank", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String rank()", "original_string": "    public String rank() {\n        return resolve(\"games.league_of_legends.rank\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java", "class_name": "LeagueOfLegends", "class_uri": "src/main/java/net/datafaker/providers/videogame/LeagueOfLegends.java.LeagueOfLegends", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter.[]StreetFighter(VideoGameProviders)", "name": "StreetFighter", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected StreetFighter(VideoGameProviders faker)", "original_string": "    protected StreetFighter(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java", "class_name": "StreetFighter", "class_uri": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"games.street_fighter.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java", "class_name": "StreetFighter", "class_uri": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter.[String]stages()", "name": "stages", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String stages()", "original_string": "    public String stages() {\n        return resolve(\"games.street_fighter.stages\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java", "class_name": "StreetFighter", "class_uri": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"games.street_fighter.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java", "class_name": "StreetFighter", "class_uri": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter.[String]moves()", "name": "moves", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String moves()", "original_string": "    public String moves() {\n        return resolve(\"games.street_fighter.moves\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java", "class_name": "StreetFighter", "class_uri": "src/main/java/net/datafaker/providers/videogame/StreetFighter.java.StreetFighter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[]Dota2(VideoGameProviders)", "name": "Dota2", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected Dota2(VideoGameProviders faker)", "original_string": "    protected Dota2(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Dota2.java", "class_name": "Dota2", "class_uri": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]faction()", "name": "faction", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String faction()", "original_string": "    public String faction() {\n        return resolve(\"games.dota2.faction\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Dota2.java", "class_name": "Dota2", "class_uri": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]rank()", "name": "rank", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String rank()", "original_string": "    public String rank() {\n        return resolve(\"games.dota2.rank\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Dota2.java", "class_name": "Dota2", "class_uri": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]attribute()", "name": "attribute", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String attribute()", "original_string": "    public String attribute() {\n        return resolve(\"games.dota2.attribute\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Dota2.java", "class_name": "Dota2", "class_uri": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]building()", "name": "building", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String building()", "original_string": "    public String building() {\n        return resolve(\"games.dota2.building\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Dota2.java", "class_name": "Dota2", "class_uri": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]hero()", "name": "hero", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String hero()", "original_string": "    public String hero() {\n        return resolve(\"games.dota2.hero\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Dota2.java", "class_name": "Dota2", "class_uri": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]heroQuote(String)", "name": "heroQuote", "arg_nums": 1, "params": [{"name": "heroName", "type": "String"}], "return_type": "String", "signature": "public String heroQuote(String heroName)", "original_string": "    public String heroQuote(String heroName) {\n        return resolve(\"games.dota2.\" + heroName + \".quote\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Dota2.java", "class_name": "Dota2", "class_uri": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]item()", "name": "item", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String item()", "original_string": "    public String item() {\n        return resolve(\"games.dota2.item\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Dota2.java", "class_name": "Dota2", "class_uri": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]neutralItem()", "name": "neutralItem", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String neutralItem()", "original_string": "    public String neutralItem() {\n        return resolve(\"games.dota2.neutral_item\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Dota2.java", "class_name": "Dota2", "class_uri": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]team()", "name": "team", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String team()", "original_string": "    public String team() {\n        return resolve(\"games.dota2.team\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Dota2.java", "class_name": "Dota2", "class_uri": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]tier()", "name": "tier", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String tier()", "original_string": "    public String tier() {\n        return resolve(\"games.dota2.tier\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Dota2.java", "class_name": "Dota2", "class_uri": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2.[String]player()", "name": "player", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String player()", "original_string": "    public String player() {\n        return resolve(\"games.dota2.player\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Dota2.java", "class_name": "Dota2", "class_uri": "src/main/java/net/datafaker/providers/videogame/Dota2.java.Dota2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm.[]HeroesOfTheStorm(VideoGameProviders)", "name": "HeroesOfTheStorm", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected HeroesOfTheStorm(VideoGameProviders faker)", "original_string": "    protected HeroesOfTheStorm(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java", "class_name": "HeroesOfTheStorm", "class_uri": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm.[String]battleground()", "name": "battleground", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String battleground()", "original_string": "    public String battleground() {\n        return resolve(\"heroes_of_the_storm.battlegrounds\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java", "class_name": "HeroesOfTheStorm", "class_uri": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm.[String]heroClass()", "name": "heroClass", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String heroClass()", "original_string": "    public String heroClass() {\n        return resolve(\"heroes_of_the_storm.classes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java", "class_name": "HeroesOfTheStorm", "class_uri": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm.[String]hero()", "name": "hero", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String hero()", "original_string": "    public String hero() {\n        return resolve(\"heroes_of_the_storm.heroes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java", "class_name": "HeroesOfTheStorm", "class_uri": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"heroes_of_the_storm.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java", "class_name": "HeroesOfTheStorm", "class_uri": "src/main/java/net/datafaker/providers/videogame/HeroesOfTheStorm.java.HeroesOfTheStorm", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst.[]Myst(VideoGameProviders)", "name": "Myst", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected Myst(VideoGameProviders faker)", "original_string": "    protected Myst(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Myst.java", "class_name": "Myst", "class_uri": "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst.[String]games()", "name": "games", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String games()", "original_string": "    public String games() {\n        return resolve(\"games.myst.games\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Myst.java", "class_name": "Myst", "class_uri": "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst.[String]creatures()", "name": "creatures", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String creatures()", "original_string": "    public String creatures() {\n        return resolve(\"games.myst.creatures\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Myst.java", "class_name": "Myst", "class_uri": "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"games.myst.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Myst.java", "class_name": "Myst", "class_uri": "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst.[String]ages()", "name": "ages", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ages()", "original_string": "    public String ages() {\n        return resolve(\"games.myst.ages\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Myst.java", "class_name": "Myst", "class_uri": "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"games.myst.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Myst.java", "class_name": "Myst", "class_uri": "src/main/java/net/datafaker/providers/videogame/Myst.java.Myst", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports.[]Esports(VideoGameProviders)", "name": "Esports", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected Esports(final VideoGameProviders faker)", "original_string": "    protected Esports(final VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Esports.java", "class_name": "Esports", "class_uri": "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports.[String]player()", "name": "player", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String player()", "original_string": "    public String player() {\n        return resolve(\"esport.players\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Esports.java", "class_name": "Esports", "class_uri": "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports.[String]team()", "name": "team", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String team()", "original_string": "    public String team() {\n        return resolve(\"esport.teams\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Esports.java", "class_name": "Esports", "class_uri": "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports.[String]event()", "name": "event", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String event()", "original_string": "    public String event() {\n        return resolve(\"esport.events\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Esports.java", "class_name": "Esports", "class_uri": "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports.[String]league()", "name": "league", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String league()", "original_string": "    public String league() {\n        return resolve(\"esport.leagues\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Esports.java", "class_name": "Esports", "class_uri": "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports.[String]game()", "name": "game", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String game()", "original_string": "    public String game() {\n        return resolve(\"esport.games\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Esports.java", "class_name": "Esports", "class_uri": "src/main/java/net/datafaker/providers/videogame/Esports.java.Esports", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[]ElderScrolls(VideoGameProviders)", "name": "ElderScrolls", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected ElderScrolls(VideoGameProviders faker)", "original_string": "    protected ElderScrolls(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java", "class_name": "ElderScrolls", "class_uri": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]race()", "name": "race", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String race()", "original_string": "    public String race() {\n        return resolve(\"games.elder_scrolls.race\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java", "class_name": "ElderScrolls", "class_uri": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]creature()", "name": "creature", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String creature()", "original_string": "    public String creature() {\n        return resolve(\"games.elder_scrolls.creature\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java", "class_name": "ElderScrolls", "class_uri": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]region()", "name": "region", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String region()", "original_string": "    public String region() {\n        return resolve(\"games.elder_scrolls.region\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java", "class_name": "ElderScrolls", "class_uri": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]dragon()", "name": "dragon", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String dragon()", "original_string": "    public String dragon() {\n        return resolve(\"games.elder_scrolls.dragon\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java", "class_name": "ElderScrolls", "class_uri": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]city()", "name": "city", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String city()", "original_string": "    public String city() {\n        return resolve(\"games.elder_scrolls.city\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java", "class_name": "ElderScrolls", "class_uri": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]firstName()", "name": "firstName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String firstName()", "original_string": "    public String firstName() {\n        return resolve(\"games.elder_scrolls.first_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java", "class_name": "ElderScrolls", "class_uri": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]lastName()", "name": "lastName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String lastName()", "original_string": "    public String lastName() {\n        return resolve(\"games.elder_scrolls.last_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java", "class_name": "ElderScrolls", "class_uri": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"games.elder_scrolls.quote\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java", "class_name": "ElderScrolls", "class_uri": "src/main/java/net/datafaker/providers/videogame/ElderScrolls.java.ElderScrolls", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou.[]Touhou(VideoGameProviders)", "name": "Touhou", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected Touhou(VideoGameProviders faker)", "original_string": "    protected Touhou(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Touhou.java", "class_name": "Touhou", "class_uri": "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou.[String]characterName()", "name": "characterName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characterName()", "original_string": "    public String characterName() {\n        return resolve(\"touhou.full_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Touhou.java", "class_name": "Touhou", "class_uri": "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou.[String]characterFirstName()", "name": "characterFirstName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characterFirstName()", "original_string": "    public String characterFirstName() {\n        return resolve(\"touhou.first_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Touhou.java", "class_name": "Touhou", "class_uri": "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou.[String]characterLastName()", "name": "characterLastName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characterLastName()", "original_string": "    public String characterLastName() {\n        return resolve(\"touhou.last_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Touhou.java", "class_name": "Touhou", "class_uri": "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou.[String]trackName()", "name": "trackName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String trackName()", "original_string": "    public String trackName() {\n        return resolve(\"touhou.track_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Touhou.java", "class_name": "Touhou", "class_uri": "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou.[String]gameName()", "name": "gameName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String gameName()", "original_string": "    public String gameName() {\n        return resolve(\"touhou.game_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Touhou.java", "class_name": "Touhou", "class_uri": "src/main/java/net/datafaker/providers/videogame/Touhou.java.Touhou", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker.[]VideoGameFaker()", "name": "VideoGameFaker", "arg_nums": 0, "params": [], "return_type": "", "signature": "public VideoGameFaker()", "original_string": "    public VideoGameFaker() {\n        super();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java", "class_name": "VideoGameFaker", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker.[]VideoGameFaker(Locale)", "name": "VideoGameFaker", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "", "signature": "public VideoGameFaker(Locale locale)", "original_string": "    public VideoGameFaker(Locale locale) {\n        super(locale);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java", "class_name": "VideoGameFaker", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker.[]VideoGameFaker(Random)", "name": "VideoGameFaker", "arg_nums": 1, "params": [{"name": "random", "type": "Random"}], "return_type": "", "signature": "public VideoGameFaker(Random random)", "original_string": "    public VideoGameFaker(Random random) {\n        super(random);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java", "class_name": "VideoGameFaker", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker.[]VideoGameFaker(Locale,Random)", "name": "VideoGameFaker", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "random", "type": "Random"}], "return_type": "", "signature": "public VideoGameFaker(Locale locale, Random random)", "original_string": "    public VideoGameFaker(Locale locale, Random random) {\n        super(locale, random);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java", "class_name": "VideoGameFaker", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker.[]VideoGameFaker(Locale,RandomService)", "name": "VideoGameFaker", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "randomService", "type": "RandomService"}], "return_type": "", "signature": "public VideoGameFaker(Locale locale, RandomService randomService)", "original_string": "    public VideoGameFaker(Locale locale, RandomService randomService) {\n        super(locale, randomService);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java", "class_name": "VideoGameFaker", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker.[]VideoGameFaker(FakeValuesService,FakerContext)", "name": "VideoGameFaker", "arg_nums": 2, "params": [{"name": "fakeValuesService", "type": "FakeValuesService"}, {"name": "context", "type": "FakerContext"}], "return_type": "", "signature": "public VideoGameFaker(FakeValuesService fakeValuesService, FakerContext context)", "original_string": "    public VideoGameFaker(FakeValuesService fakeValuesService, FakerContext context) {\n        super(fakeValuesService, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java", "class_name": "VideoGameFaker", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Zelda.java.Zelda.[]Zelda(VideoGameProviders)", "name": "Zelda", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected Zelda(final VideoGameProviders faker)", "original_string": "    protected Zelda(final VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Zelda.java", "class_name": "Zelda", "class_uri": "src/main/java/net/datafaker/providers/videogame/Zelda.java.Zelda", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Zelda.java.Zelda.[String]game()", "name": "game", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String game()", "original_string": "    public String game() {\n        return resolve(\"games.zelda.games\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Zelda.java", "class_name": "Zelda", "class_uri": "src/main/java/net/datafaker/providers/videogame/Zelda.java.Zelda", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Zelda.java.Zelda.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"games.zelda.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Zelda.java", "class_name": "Zelda", "class_uri": "src/main/java/net/datafaker/providers/videogame/Zelda.java.Zelda", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java.SonicTheHedgehog.[]SonicTheHedgehog(VideoGameProviders)", "name": "SonicTheHedgehog", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected SonicTheHedgehog(VideoGameProviders faker)", "original_string": "    protected SonicTheHedgehog(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java", "class_name": "SonicTheHedgehog", "class_uri": "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java.SonicTheHedgehog", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java.SonicTheHedgehog.[String]zone()", "name": "zone", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String zone()", "original_string": "    public String zone() {\n        return resolve(\"games.sonic_the_hedgehog.zone\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java", "class_name": "SonicTheHedgehog", "class_uri": "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java.SonicTheHedgehog", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java.SonicTheHedgehog.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"games.sonic_the_hedgehog.character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java", "class_name": "SonicTheHedgehog", "class_uri": "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java.SonicTheHedgehog", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java.SonicTheHedgehog.[String]game()", "name": "game", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String game()", "original_string": "    public String game() {\n        return resolve(\"games.sonic_the_hedgehog.game\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java", "class_name": "SonicTheHedgehog", "class_uri": "src/main/java/net/datafaker/providers/videogame/SonicTheHedgehog.java.SonicTheHedgehog", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1.[]Battlefield1(VideoGameProviders)", "name": "Battlefield1", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected Battlefield1(final VideoGameProviders faker)", "original_string": "    protected Battlefield1(final VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java", "class_name": "Battlefield1", "class_uri": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1.[String]classes()", "name": "classes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String classes()", "original_string": "    public String classes() {\n        return resolve(\"battlefield1.classes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java", "class_name": "Battlefield1", "class_uri": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a random unit class name as a string value\n"}, {"uris": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1.[String]weapon()", "name": "weapon", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String weapon()", "original_string": "    public String weapon() {\n        return resolve(\"battlefield1.weapon\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java", "class_name": "Battlefield1", "class_uri": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a random weapon name as a string value\n"}, {"uris": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1.[String]vehicle()", "name": "vehicle", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String vehicle()", "original_string": "    public String vehicle() {\n        return resolve(\"battlefield1.vehicle\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java", "class_name": "Battlefield1", "class_uri": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a random vehicle name as a string value\n"}, {"uris": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1.[String]map()", "name": "map", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String map()", "original_string": "    public String map() {\n        return resolve(\"battlefield1.map\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java", "class_name": "Battlefield1", "class_uri": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a random map title as a string value\n"}, {"uris": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1.[String]faction()", "name": "faction", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String faction()", "original_string": "    public String faction() {\n        return resolve(\"battlefield1.faction\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java", "class_name": "Battlefield1", "class_uri": "src/main/java/net/datafaker/providers/videogame/Battlefield1.java.Battlefield1", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a random faction name as a string value\n"}, {"uris": "src/main/java/net/datafaker/providers/videogame/Overwatch.java.Overwatch.[]Overwatch(VideoGameProviders)", "name": "Overwatch", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected Overwatch(final VideoGameProviders faker)", "original_string": "    protected Overwatch(final VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Overwatch.java", "class_name": "Overwatch", "class_uri": "src/main/java/net/datafaker/providers/videogame/Overwatch.java.Overwatch", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Overwatch.java.Overwatch.[String]hero()", "name": "hero", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String hero()", "original_string": "    public String hero() {\n        return resolve(\"games.overwatch.heroes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Overwatch.java", "class_name": "Overwatch", "class_uri": "src/main/java/net/datafaker/providers/videogame/Overwatch.java.Overwatch", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Overwatch.java.Overwatch.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"games.overwatch.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Overwatch.java", "class_name": "Overwatch", "class_uri": "src/main/java/net/datafaker/providers/videogame/Overwatch.java.Overwatch", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Overwatch.java.Overwatch.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"games.overwatch.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Overwatch.java", "class_name": "Overwatch", "class_uri": "src/main/java/net/datafaker/providers/videogame/Overwatch.java.Overwatch", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls.[]DarkSouls(VideoGameProviders)", "name": "DarkSouls", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "public DarkSouls(final VideoGameProviders faker)", "original_string": "    public DarkSouls(final VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java", "class_name": "DarkSouls", "class_uri": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls.[String]stats()", "name": "stats", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String stats()", "original_string": "    public String stats() {\n        return resolve(\"dark_souls.stats\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java", "class_name": "DarkSouls", "class_uri": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls.[String]covenants()", "name": "covenants", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String covenants()", "original_string": "    public String covenants() {\n        return resolve(\"dark_souls.covenants\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java", "class_name": "DarkSouls", "class_uri": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls.[String]classes()", "name": "classes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String classes()", "original_string": "    public String classes() {\n        return resolve(\"dark_souls.classes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java", "class_name": "DarkSouls", "class_uri": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls.[String]shield()", "name": "shield", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String shield()", "original_string": "    public String shield() {\n        return resolve(\"dark_souls.shield\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java", "class_name": "DarkSouls", "class_uri": "src/main/java/net/datafaker/providers/videogame/DarkSouls.java.DarkSouls", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap.[]MarvelSnap(VideoGameProviders)", "name": "MarvelSnap", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected MarvelSnap(final VideoGameProviders faker)", "original_string": "    protected MarvelSnap(final VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java", "class_name": "MarvelSnap", "class_uri": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"games.marvel_snap.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java", "class_name": "MarvelSnap", "class_uri": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap.[String]zone()", "name": "zone", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String zone()", "original_string": "    public String zone() {\n        return resolve(\"games.marvel_snap.zones\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java", "class_name": "MarvelSnap", "class_uri": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap.[String]event()", "name": "event", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String event()", "original_string": "    public String event() {\n        return resolve(\"games.marvel_snap.events\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java", "class_name": "MarvelSnap", "class_uri": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap.[String]rank()", "name": "rank", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String rank()", "original_string": "    public String rank() {\n        return resolve(\"games.marvel_snap.rank\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java", "class_name": "MarvelSnap", "class_uri": "src/main/java/net/datafaker/providers/videogame/MarvelSnap.java.MarvelSnap", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java.SuperSmashBros.[]SuperSmashBros(VideoGameProviders)", "name": "SuperSmashBros", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected SuperSmashBros(VideoGameProviders faker)", "original_string": "    protected SuperSmashBros(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java", "class_name": "SuperSmashBros", "class_uri": "src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java.SuperSmashBros", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java.SuperSmashBros.[String]fighter()", "name": "fighter", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String fighter()", "original_string": "    public String fighter() {\n        return resolve(\"games.super_smash_bros.fighter\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java", "class_name": "SuperSmashBros", "class_uri": "src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java.SuperSmashBros", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java.SuperSmashBros.[String]stage()", "name": "stage", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String stage()", "original_string": "    public String stage() {\n        return resolve(\"games.super_smash_bros.stage\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java", "class_name": "SuperSmashBros", "class_uri": "src/main/java/net/datafaker/providers/videogame/SuperSmashBros.java.SuperSmashBros", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV.[]FinalFantasyXIV(VideoGameProviders)", "name": "FinalFantasyXIV", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected FinalFantasyXIV(VideoGameProviders faker)", "original_string": "    protected FinalFantasyXIV(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java", "class_name": "FinalFantasyXIV", "class_uri": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"final_fantasy_xiv.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java", "class_name": "FinalFantasyXIV", "class_uri": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV.[String]job()", "name": "job", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String job()", "original_string": "    public String job() {\n        return resolve(\"final_fantasy_xiv.jobs\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java", "class_name": "FinalFantasyXIV", "class_uri": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV.[String]race()", "name": "race", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String race()", "original_string": "    public String race() {\n        return resolve(\"final_fantasy_xiv.races\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java", "class_name": "FinalFantasyXIV", "class_uri": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV.[String]dataCenter()", "name": "dataCenter", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String dataCenter()", "original_string": "    public String dataCenter() {\n        return resolve(\"final_fantasy_xiv.data_centers\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java", "class_name": "FinalFantasyXIV", "class_uri": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV.[String]zone()", "name": "zone", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String zone()", "original_string": "    public String zone() {\n        return resolve(\"final_fantasy_xiv.zones\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java", "class_name": "FinalFantasyXIV", "class_uri": "src/main/java/net/datafaker/providers/videogame/FinalFantasyXIV.java.FinalFantasyXIV", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Battlefield1]battlefield1()", "name": "battlefield1", "arg_nums": 0, "params": [], "return_type": "Battlefield1", "signature": "default Battlefield1 battlefield1()", "original_string": "    default Battlefield1 battlefield1() {\n        return getProvider(Battlefield1.class, Battlefield1::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Battlefield1", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[ClashOfClans]clashOfClans()", "name": "clashOfClans", "arg_nums": 0, "params": [], "return_type": "ClashOfClans", "signature": "default ClashOfClans clashOfClans()", "original_string": "    default ClashOfClans clashOfClans() {\n        return getProvider(ClashOfClans.class, ClashOfClans::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "ClashOfClans", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Control]control()", "name": "control", "arg_nums": 0, "params": [], "return_type": "Control", "signature": "default Control control()", "original_string": "    default Control control() {\n        return getProvider(Control.class, Control::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Control", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[DarkSouls]darkSouls()", "name": "darkSouls", "arg_nums": 0, "params": [], "return_type": "DarkSouls", "signature": "default DarkSouls darkSouls()", "original_string": "    default DarkSouls darkSouls() {\n        return getProvider(DarkSouls.class, DarkSouls::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "DarkSouls", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Dota2]dota2()", "name": "dota2", "arg_nums": 0, "params": [], "return_type": "Dota2", "signature": "default Dota2 dota2()", "original_string": "    default Dota2 dota2() {\n        return getProvider(Dota2.class, Dota2::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Dota2", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[EldenRing]eldenRing()", "name": "eldenRing", "arg_nums": 0, "params": [], "return_type": "EldenRing", "signature": "default EldenRing eldenRing()", "original_string": "    default EldenRing eldenRing() {\n        return getProvider(EldenRing.class, EldenRing::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "EldenRing", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[ElderScrolls]elderScrolls()", "name": "elderScrolls", "arg_nums": 0, "params": [], "return_type": "ElderScrolls", "signature": "default ElderScrolls elderScrolls()", "original_string": "    default ElderScrolls elderScrolls() {\n        return getProvider(ElderScrolls.class, ElderScrolls::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "ElderScrolls", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Esports]esports()", "name": "esports", "arg_nums": 0, "params": [], "return_type": "Esports", "signature": "default Esports esports()", "original_string": "    default Esports esports() {\n        return getProvider(Esports.class, Esports::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Esports", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Fallout]fallout()", "name": "fallout", "arg_nums": 0, "params": [], "return_type": "Fallout", "signature": "default Fallout fallout()", "original_string": "    default Fallout fallout() {\n        return getProvider(Fallout.class, Fallout::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Fallout", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[FinalFantasyXIV]finalFantasyXIV()", "name": "finalFantasyXIV", "arg_nums": 0, "params": [], "return_type": "FinalFantasyXIV", "signature": "default FinalFantasyXIV finalFantasyXIV()", "original_string": "    default FinalFantasyXIV finalFantasyXIV() {\n        return getProvider(FinalFantasyXIV.class, FinalFantasyXIV::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "FinalFantasyXIV", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[HalfLife]halfLife()", "name": "halfLife", "arg_nums": 0, "params": [], "return_type": "HalfLife", "signature": "default HalfLife halfLife()", "original_string": "    default HalfLife halfLife() {\n        return getProvider(HalfLife.class, HalfLife::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "HalfLife", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Hearthstone]hearthstone()", "name": "hearthstone", "arg_nums": 0, "params": [], "return_type": "Hearthstone", "signature": "default Hearthstone hearthstone()", "original_string": "    default Hearthstone hearthstone() {\n        return getProvider(Hearthstone.class, Hearthstone::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Hearthstone", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[HeroesOfTheStorm]heroesOfTheStorm()", "name": "heroesOfTheStorm", "arg_nums": 0, "params": [], "return_type": "HeroesOfTheStorm", "signature": "default HeroesOfTheStorm heroesOfTheStorm()", "original_string": "    default HeroesOfTheStorm heroesOfTheStorm() {\n        return getProvider(HeroesOfTheStorm.class, HeroesOfTheStorm::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "HeroesOfTheStorm", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[LeagueOfLegends]leagueOfLegends()", "name": "leagueOfLegends", "arg_nums": 0, "params": [], "return_type": "LeagueOfLegends", "signature": "default LeagueOfLegends leagueOfLegends()", "original_string": "    default LeagueOfLegends leagueOfLegends() {\n        return getProvider(LeagueOfLegends.class, LeagueOfLegends::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "LeagueOfLegends", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[MarvelSnap]marvelSnap()", "name": "marvelSnap", "arg_nums": 0, "params": [], "return_type": "MarvelSnap", "signature": "default MarvelSnap marvelSnap()", "original_string": "    default MarvelSnap marvelSnap() {\n        return getProvider(MarvelSnap.class, MarvelSnap::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "MarvelSnap", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[MassEffect]massEffect()", "name": "massEffect", "arg_nums": 0, "params": [], "return_type": "MassEffect", "signature": "default MassEffect massEffect()", "original_string": "    default MassEffect massEffect() {\n        return getProvider(MassEffect.class, MassEffect::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "MassEffect", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Minecraft]minecraft()", "name": "minecraft", "arg_nums": 0, "params": [], "return_type": "Minecraft", "signature": "default Minecraft minecraft()", "original_string": "    default Minecraft minecraft() {\n        return getProvider(Minecraft.class, Minecraft::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Minecraft", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Myst]myst()", "name": "myst", "arg_nums": 0, "params": [], "return_type": "Myst", "signature": "default Myst myst()", "original_string": "    default Myst myst() {\n        return getProvider(Myst.class, Myst::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Myst", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Overwatch]overwatch()", "name": "overwatch", "arg_nums": 0, "params": [], "return_type": "Overwatch", "signature": "default Overwatch overwatch()", "original_string": "    default Overwatch overwatch() {\n        return getProvider(Overwatch.class, Overwatch::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Overwatch", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[RedDeadRedemption2]redDeadRedemption2()", "name": "redDeadRedemption2", "arg_nums": 0, "params": [], "return_type": "RedDeadRedemption2", "signature": "default RedDeadRedemption2 redDeadRedemption2()", "original_string": "    default RedDeadRedemption2 redDeadRedemption2() {\n        return getProvider(RedDeadRedemption2.class, RedDeadRedemption2::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "RedDeadRedemption2", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[SonicTheHedgehog]sonicTheHedgehog()", "name": "sonicTheHedgehog", "arg_nums": 0, "params": [], "return_type": "SonicTheHedgehog", "signature": "default SonicTheHedgehog sonicTheHedgehog()", "original_string": "    default SonicTheHedgehog sonicTheHedgehog() {\n        return getProvider(SonicTheHedgehog.class, SonicTheHedgehog::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "SonicTheHedgehog", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[SoulKnight]soulKnight()", "name": "soulKnight", "arg_nums": 0, "params": [], "return_type": "SoulKnight", "signature": "default SoulKnight soulKnight()", "original_string": "    default SoulKnight soulKnight() {\n        return getProvider(SoulKnight.class, SoulKnight::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "SoulKnight", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[StarCraft]starCraft()", "name": "starCraft", "arg_nums": 0, "params": [], "return_type": "StarCraft", "signature": "default StarCraft starCraft()", "original_string": "    default StarCraft starCraft() {\n        return getProvider(StarCraft.class, StarCraft::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "StarCraft", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[StreetFighter]streetFighter()", "name": "streetFighter", "arg_nums": 0, "params": [], "return_type": "StreetFighter", "signature": "default StreetFighter streetFighter()", "original_string": "    default StreetFighter streetFighter() {\n        return getProvider(StreetFighter.class, StreetFighter::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "StreetFighter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[SuperMario]superMario()", "name": "superMario", "arg_nums": 0, "params": [], "return_type": "SuperMario", "signature": "default SuperMario superMario()", "original_string": "    default SuperMario superMario() {\n        return getProvider(SuperMario.class, SuperMario::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "SuperMario", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[SuperSmashBros]superSmashBros()", "name": "superSmashBros", "arg_nums": 0, "params": [], "return_type": "SuperSmashBros", "signature": "default SuperSmashBros superSmashBros()", "original_string": "    default SuperSmashBros superSmashBros() {\n        return getProvider(SuperSmashBros.class, SuperSmashBros::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "SuperSmashBros", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Touhou]touhou()", "name": "touhou", "arg_nums": 0, "params": [], "return_type": "Touhou", "signature": "default Touhou touhou()", "original_string": "    default Touhou touhou() {\n        return getProvider(Touhou.class, Touhou::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Touhou", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[VideoGame]videoGame()", "name": "videoGame", "arg_nums": 0, "params": [], "return_type": "VideoGame", "signature": "default VideoGame videoGame()", "original_string": "    default VideoGame videoGame() {\n        return getProvider(VideoGame.class, VideoGame::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "VideoGame", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[WarhammerFantasy]warhammerFantasy()", "name": "warhammerFantasy", "arg_nums": 0, "params": [], "return_type": "WarhammerFantasy", "signature": "default WarhammerFantasy warhammerFantasy()", "original_string": "    default WarhammerFantasy warhammerFantasy() {\n        return getProvider(WarhammerFantasy.class, WarhammerFantasy::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "WarhammerFantasy", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[WorldOfWarcraft]worldOfWarcraft()", "name": "worldOfWarcraft", "arg_nums": 0, "params": [], "return_type": "WorldOfWarcraft", "signature": "default WorldOfWarcraft worldOfWarcraft()", "original_string": "    default WorldOfWarcraft worldOfWarcraft() {\n        return getProvider(WorldOfWarcraft.class, WorldOfWarcraft::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "WorldOfWarcraft", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders.[Zelda]zelda()", "name": "zelda", "arg_nums": 0, "params": [], "return_type": "Zelda", "signature": "default Zelda zelda()", "original_string": "    default Zelda zelda() {\n        return getProvider(Zelda.class, Zelda::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java", "class_name": "VideoGameProviders", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Zelda", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java.WorldOfWarcraft.[]WorldOfWarcraft(VideoGameProviders)", "name": "WorldOfWarcraft", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected WorldOfWarcraft(VideoGameProviders faker)", "original_string": "    protected WorldOfWarcraft(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java", "class_name": "WorldOfWarcraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java.WorldOfWarcraft", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java.WorldOfWarcraft.[String]hero()", "name": "hero", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String hero()", "original_string": "    public String hero() {\n        return resolve(\"games.world_of_warcraft.hero\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java", "class_name": "WorldOfWarcraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java.WorldOfWarcraft", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java.WorldOfWarcraft.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"games.world_of_warcraft.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java", "class_name": "WorldOfWarcraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/WorldOfWarcraft.java.WorldOfWarcraft", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect.[]MassEffect(VideoGameProviders)", "name": "MassEffect", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected MassEffect(final VideoGameProviders faker)", "original_string": "    protected MassEffect(final VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/MassEffect.java", "class_name": "MassEffect", "class_uri": "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"mass_effect.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/MassEffect.java", "class_name": "MassEffect", "class_uri": "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect.[String]specie()", "name": "specie", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String specie()", "original_string": "    public String specie() {\n        return resolve(\"mass_effect.species\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/MassEffect.java", "class_name": "MassEffect", "class_uri": "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect.[String]cluster()", "name": "cluster", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String cluster()", "original_string": "    public String cluster() {\n        return resolve(\"mass_effect.cluster\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/MassEffect.java", "class_name": "MassEffect", "class_uri": "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect.[String]planet()", "name": "planet", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String planet()", "original_string": "    public String planet() {\n        return resolve(\"mass_effect.planets\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/MassEffect.java", "class_name": "MassEffect", "class_uri": "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"mass_effect.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/MassEffect.java", "class_name": "MassEffect", "class_uri": "src/main/java/net/datafaker/providers/videogame/MassEffect.java.MassEffect", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft.[]Minecraft(VideoGameProviders)", "name": "Minecraft", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "public Minecraft(VideoGameProviders faker)", "original_string": "    public Minecraft(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Minecraft.java", "class_name": "Minecraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft.[String]itemName()", "name": "itemName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String itemName()", "original_string": "    public String itemName() {\n        return resolve(\"minecraft.item_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Minecraft.java", "class_name": "Minecraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft.[String]tileName()", "name": "tileName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String tileName()", "original_string": "    public String tileName() {\n        return resolve(\"minecraft.tile_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Minecraft.java", "class_name": "Minecraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft.[String]entityName()", "name": "entityName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String entityName()", "original_string": "    public String entityName() {\n        return resolve(\"minecraft.entity_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Minecraft.java", "class_name": "Minecraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft.[String]monsterName()", "name": "monsterName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String monsterName()", "original_string": "    public String monsterName() {\n        return resolve(\"minecraft.monster_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Minecraft.java", "class_name": "Minecraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft.[String]animalName()", "name": "animalName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String animalName()", "original_string": "    public String animalName() {\n        return resolve(\"minecraft.animal_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Minecraft.java", "class_name": "Minecraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft.[String]tileItemName()", "name": "tileItemName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String tileItemName()", "original_string": "    public String tileItemName() {\n        return faker.random().nextBoolean() ? itemName() : tileName();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Minecraft.java", "class_name": "Minecraft", "class_uri": "src/main/java/net/datafaker/providers/videogame/Minecraft.java.Minecraft", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout.[]Fallout(VideoGameProviders)", "name": "Fallout", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected Fallout(VideoGameProviders faker)", "original_string": "    protected Fallout(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Fallout.java", "class_name": "Fallout", "class_uri": "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"fallout.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Fallout.java", "class_name": "Fallout", "class_uri": "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout.[String]faction()", "name": "faction", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String faction()", "original_string": "    public String faction() {\n        return resolve(\"fallout.factions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Fallout.java", "class_name": "Fallout", "class_uri": "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"fallout.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Fallout.java", "class_name": "Fallout", "class_uri": "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"fallout.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/Fallout.java", "class_name": "Fallout", "class_uri": "src/main/java/net/datafaker/providers/videogame/Fallout.java.Fallout", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/SuperMario.java.SuperMario.[]SuperMario(VideoGameProviders)", "name": "SuperMario", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected SuperMario(VideoGameProviders faker)", "original_string": "    protected SuperMario(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SuperMario.java", "class_name": "SuperMario", "class_uri": "src/main/java/net/datafaker/providers/videogame/SuperMario.java.SuperMario", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/SuperMario.java.SuperMario.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"games.super_mario.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SuperMario.java", "class_name": "SuperMario", "class_uri": "src/main/java/net/datafaker/providers/videogame/SuperMario.java.SuperMario", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/SuperMario.java.SuperMario.[String]games()", "name": "games", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String games()", "original_string": "    public String games() {\n        return resolve(\"games.super_mario.games\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SuperMario.java", "class_name": "SuperMario", "class_uri": "src/main/java/net/datafaker/providers/videogame/SuperMario.java.SuperMario", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/SuperMario.java.SuperMario.[String]locations()", "name": "locations", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String locations()", "original_string": "    public String locations() {\n        return resolve(\"games.super_mario.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SuperMario.java", "class_name": "SuperMario", "class_uri": "src/main/java/net/datafaker/providers/videogame/SuperMario.java.SuperMario", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[]RedDeadRedemption2(VideoGameProviders)", "name": "RedDeadRedemption2", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected RedDeadRedemption2(VideoGameProviders faker)", "original_string": "    protected RedDeadRedemption2(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java", "class_name": "RedDeadRedemption2", "class_uri": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]protagonist()", "name": "protagonist", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String protagonist()", "original_string": "    public String protagonist() {\n        return resolve(\"red_dead_redemption2.protagonists\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java", "class_name": "RedDeadRedemption2", "class_uri": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]gangMember()", "name": "gangMember", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String gangMember()", "original_string": "    public String gangMember() {\n        return resolve(\"red_dead_redemption2.gang_members\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java", "class_name": "RedDeadRedemption2", "class_uri": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]majorCharacter()", "name": "majorCharacter", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String majorCharacter()", "original_string": "    public String majorCharacter() {\n        return resolve(\"red_dead_redemption2.major_characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java", "class_name": "RedDeadRedemption2", "class_uri": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]animal()", "name": "animal", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String animal()", "original_string": "    public String animal() {\n        return resolve(\"red_dead_redemption2.animals\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java", "class_name": "RedDeadRedemption2", "class_uri": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]state()", "name": "state", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String state()", "original_string": "    public String state() {\n        return resolve(\"red_dead_redemption2.states\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java", "class_name": "RedDeadRedemption2", "class_uri": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]region()", "name": "region", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String region()", "original_string": "    public String region() {\n        return resolve(\"red_dead_redemption2.regions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java", "class_name": "RedDeadRedemption2", "class_uri": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]settlement()", "name": "settlement", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String settlement()", "original_string": "    public String settlement() {\n        return resolve(\"red_dead_redemption2.settlements\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java", "class_name": "RedDeadRedemption2", "class_uri": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"red_dead_redemption2.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java", "class_name": "RedDeadRedemption2", "class_uri": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2.[String]weapon()", "name": "weapon", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String weapon()", "original_string": "    public String weapon() {\n        return resolve(\"red_dead_redemption2.weapons\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java", "class_name": "RedDeadRedemption2", "class_uri": "src/main/java/net/datafaker/providers/videogame/RedDeadRedemption2.java.RedDeadRedemption2", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java.ClashOfClans.[]ClashOfClans(VideoGameProviders)", "name": "ClashOfClans", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected ClashOfClans(VideoGameProviders faker)", "original_string": "    protected ClashOfClans(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java", "class_name": "ClashOfClans", "class_uri": "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java.ClashOfClans", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java.ClashOfClans.[String]troop()", "name": "troop", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String troop()", "original_string": "    public String troop() {\n        return resolve(\"clash_of_clans.troops\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java", "class_name": "ClashOfClans", "class_uri": "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java.ClashOfClans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java.ClashOfClans.[String]rank()", "name": "rank", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String rank()", "original_string": "    public String rank() {\n        return resolve(\"clash_of_clans.ranks\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java", "class_name": "ClashOfClans", "class_uri": "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java.ClashOfClans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java.ClashOfClans.[String]defensiveBuilding()", "name": "defensiveBuilding", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String defensiveBuilding()", "original_string": "    public String defensiveBuilding() {\n        return resolve(\"clash_of_clans.defensive_buildings\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java", "class_name": "ClashOfClans", "class_uri": "src/main/java/net/datafaker/providers/videogame/ClashOfClans.java.ClashOfClans", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGame.java.VideoGame.[]VideoGame(VideoGameProviders)", "name": "VideoGame", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected VideoGame(VideoGameProviders faker)", "original_string": "    protected VideoGame(VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGame.java", "class_name": "VideoGame", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGame.java.VideoGame", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGame.java.VideoGame.[String]title()", "name": "title", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String title()", "original_string": "    public String title() {\n        return resolve(\"video_game.title\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGame.java", "class_name": "VideoGame", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGame.java.VideoGame", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGame.java.VideoGame.[String]genre()", "name": "genre", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String genre()", "original_string": "    public String genre() {\n        return resolve(\"video_game.genre\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGame.java", "class_name": "VideoGame", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGame.java.VideoGame", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGame.java.VideoGame.[String]platform()", "name": "platform", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String platform()", "original_string": "    public String platform() {\n        return resolve(\"video_game.platform\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/VideoGame.java", "class_name": "VideoGame", "class_uri": "src/main/java/net/datafaker/providers/videogame/VideoGame.java.VideoGame", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight.[]SoulKnight(VideoGameProviders)", "name": "SoulKnight", "arg_nums": 1, "params": [{"name": "faker", "type": "VideoGameProviders"}], "return_type": "", "signature": "protected SoulKnight(final VideoGameProviders faker)", "original_string": "    protected SoulKnight(final VideoGameProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java", "class_name": "SoulKnight", "class_uri": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"soul_knight.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java", "class_name": "SoulKnight", "class_uri": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a random value of characters\n"}, {"uris": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight.[String]buffs()", "name": "buffs", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String buffs()", "original_string": "    public String buffs() {\n        return resolve(\"soul_knight.buffs\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java", "class_name": "SoulKnight", "class_uri": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a random value of buffs\n"}, {"uris": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight.[String]statues()", "name": "statues", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String statues()", "original_string": "    public String statues() {\n        return resolve(\"soul_knight.statues\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java", "class_name": "SoulKnight", "class_uri": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a random value of statues\n"}, {"uris": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight.[String]weapons()", "name": "weapons", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String weapons()", "original_string": "    public String weapons() {\n        return resolve(\"soul_knight.weapons\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java", "class_name": "SoulKnight", "class_uri": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a random value of weapons\n"}, {"uris": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight.[String]bosses()", "name": "bosses", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String bosses()", "original_string": "    public String bosses() {\n        return resolve(\"soul_knight.bosses\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java", "class_name": "SoulKnight", "class_uri": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a random value of bosses\n"}, {"uris": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight.[String]enemies()", "name": "enemies", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String enemies()", "original_string": "    public String enemies() {\n        return resolve(\"soul_knight.enemies\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java", "class_name": "SoulKnight", "class_uri": "src/main/java/net/datafaker/providers/videogame/SoulKnight.java.SoulKnight", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a random value of enemies\n"}, {"uris": "src/main/java/net/datafaker/providers/healthcare/CareProvider.java.CareProvider.[]CareProvider(HealthcareProviders)", "name": "CareProvider", "arg_nums": 1, "params": [{"name": "faker", "type": "HealthcareProviders"}], "return_type": "", "signature": "protected CareProvider(HealthcareProviders faker)", "original_string": "    protected CareProvider(HealthcareProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/CareProvider.java", "class_name": "CareProvider", "class_uri": "src/main/java/net/datafaker/providers/healthcare/CareProvider.java.CareProvider", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/CareProvider.java.CareProvider.[String]hospitalName()", "name": "hospitalName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String hospitalName()", "original_string": "    public String hospitalName() {\n        return resolve(\"healthcare.care_provider.hospital_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/CareProvider.java", "class_name": "CareProvider", "class_uri": "src/main/java/net/datafaker/providers/healthcare/CareProvider.java.CareProvider", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/CareProvider.java.CareProvider.[String]medicalProfession()", "name": "medicalProfession", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String medicalProfession()", "original_string": "    public String medicalProfession() {\n        return resolve(\"healthcare.care_provider.medical_profession\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/CareProvider.java", "class_name": "CareProvider", "class_uri": "src/main/java/net/datafaker/providers/healthcare/CareProvider.java.CareProvider", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Observation.java.Observation.[]Observation(HealthcareProviders)", "name": "Observation", "arg_nums": 1, "params": [{"name": "faker", "type": "HealthcareProviders"}], "return_type": "", "signature": "protected Observation(HealthcareProviders faker)", "original_string": "    protected Observation(HealthcareProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Observation.java", "class_name": "Observation", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Observation.java.Observation", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Observation.java.Observation.[String]symptom()", "name": "symptom", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String symptom()", "original_string": "    public String symptom() {\n        return resolve(\"healthcare.observation.symptom\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Observation.java", "class_name": "Observation", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Observation.java.Observation", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders.[CareProvider]careProvider()", "name": "careProvider", "arg_nums": 0, "params": [], "return_type": "CareProvider", "signature": "default CareProvider careProvider()", "original_string": "    default CareProvider careProvider() {\n        return getProvider(CareProvider.class, CareProvider::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java", "class_name": "HealthcareProviders", "class_uri": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "CareProvider", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders.[Disease]disease()", "name": "disease", "arg_nums": 0, "params": [], "return_type": "Disease", "signature": "default Disease disease()", "original_string": "    default Disease disease() {\n        return getProvider(Disease.class, Disease::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java", "class_name": "HealthcareProviders", "class_uri": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Disease", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders.[Medication]medication()", "name": "medication", "arg_nums": 0, "params": [], "return_type": "Medication", "signature": "default Medication medication()", "original_string": "    default Medication medication() {\n        return getProvider(Medication.class, Medication::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java", "class_name": "HealthcareProviders", "class_uri": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Medication", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders.[MedicalProcedure]medicalProcedure()", "name": "medicalProcedure", "arg_nums": 0, "params": [], "return_type": "MedicalProcedure", "signature": "default MedicalProcedure medicalProcedure()", "original_string": "    default MedicalProcedure medicalProcedure() {\n        return getProvider(MedicalProcedure.class, MedicalProcedure::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java", "class_name": "HealthcareProviders", "class_uri": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "MedicalProcedure", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders.[Observation]observation()", "name": "observation", "arg_nums": 0, "params": [], "return_type": "Observation", "signature": "default Observation observation()", "original_string": "    default Observation observation() {\n        return getProvider(Observation.class, Observation::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java", "class_name": "HealthcareProviders", "class_uri": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Observation", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Medication.java.Medication.[]Medication(HealthcareProviders)", "name": "Medication", "arg_nums": 1, "params": [{"name": "faker", "type": "HealthcareProviders"}], "return_type": "", "signature": "protected Medication(HealthcareProviders faker)", "original_string": "    protected Medication(HealthcareProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Medication.java", "class_name": "Medication", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Medication.java.Medication", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Medication.java.Medication.[String]drugName()", "name": "drugName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String drugName()", "original_string": "    public String drugName() {\n        return resolve(\"healthcare.medication.drug_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Medication.java", "class_name": "Medication", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Medication.java.Medication", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[]Disease(HealthcareProviders)", "name": "Disease", "arg_nums": 1, "params": [{"name": "faker", "type": "HealthcareProviders"}], "return_type": "", "signature": "protected Disease(HealthcareProviders faker)", "original_string": "    protected Disease(HealthcareProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Disease.java", "class_name": "Disease", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a constructor for Disease\n\n@param faker The Faker instance for generating random, different kinds of disease, e.g. the internal disease.\n"}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]icd10()", "name": "icd10", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String icd10()", "original_string": "    public String icd10() {\n        return faker.regexify(resolve(\"healthcare.disease.icd10\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Disease.java", "class_name": "Disease", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]anyDisease()", "name": "anyDisease", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String anyDisease()", "original_string": "    public String anyDisease() {\n        return resolve(faker.options().option(DiseaseType.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Disease.java", "class_name": "Disease", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]internalDisease()", "name": "internalDisease", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String internalDisease()", "original_string": "    public String internalDisease() {\n        return resolve(INTERNAL_DISEASE_KEY);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Disease.java", "class_name": "Disease", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random internal disease\n\n@return An internal disease\n"}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]neurology()", "name": "neurology", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String neurology()", "original_string": "    public String neurology() {\n        return resolve(NEUROLOGICAL_DISEASE_KEY);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Disease.java", "class_name": "Disease", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random neurology disease\n\n@return A neurology disease\n"}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]surgery()", "name": "surgery", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String surgery()", "original_string": "    public String surgery() {\n        return resolve(SURGICAL_DISEASE_KEY);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Disease.java", "class_name": "Disease", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random surgery disease\n\n@return A surgery disease\n"}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]paediatrics()", "name": "paediatrics", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String paediatrics()", "original_string": "    public String paediatrics() {\n        return resolve(PAEDIATRIC_DISEASE_KEY);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Disease.java", "class_name": "Disease", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random paediatrics disease\n\n@return A paediatrics disease\n"}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]gynecologyAndObstetrics()", "name": "gynecologyAndObstetrics", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String gynecologyAndObstetrics()", "original_string": "    public String gynecologyAndObstetrics() {\n        return resolve(GYNECOLOGY_AND_OBSTETRICS_DISEASE_KEY);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Disease.java", "class_name": "Disease", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random gynecology and obstetrics disease\n\n@return A gynecology and obstetrics disease\n"}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]ophthalmologyAndOtorhinolaryngology()", "name": "ophthalmologyAndOtorhinolaryngology", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ophthalmologyAndOtorhinolaryngology()", "original_string": "    public String ophthalmologyAndOtorhinolaryngology() {\n        return resolve(OPHTHALMOLOGY_AND_OTORHINOLARYNGOLOGY_DISEASE_KEY);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Disease.java", "class_name": "Disease", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random ophthalmology and otorhinolaryngology disease\n\n@return A ophthalmology and otorhinolaryngology disease\n"}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]dermatology()", "name": "dermatology", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String dermatology()", "original_string": "    public String dermatology() {\n        return resolve(DERMATOLOGY_DISEASE_KEY);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Disease.java", "class_name": "Disease", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random dermatology disease\n\n@return A dermatology disease\n@since 1.8.0\n"}, {"uris": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease.[String]resolve(DiseaseType)", "name": "resolve", "arg_nums": 1, "params": [{"name": "diseaseType", "type": "DiseaseType"}], "return_type": "String", "signature": "private String resolve(DiseaseType diseaseType)", "original_string": "    private String resolve(DiseaseType diseaseType) {\n        return resolve(diseaseType.yamlKey);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/Disease.java", "class_name": "Disease", "class_uri": "src/main/java/net/datafaker/providers/healthcare/Disease.java.Disease", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/MedicalProcedure.java.MedicalProcedure.[]MedicalProcedure(HealthcareProviders)", "name": "MedicalProcedure", "arg_nums": 1, "params": [{"name": "faker", "type": "HealthcareProviders"}], "return_type": "", "signature": "protected MedicalProcedure(HealthcareProviders faker)", "original_string": "    protected MedicalProcedure(HealthcareProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/MedicalProcedure.java", "class_name": "MedicalProcedure", "class_uri": "src/main/java/net/datafaker/providers/healthcare/MedicalProcedure.java.MedicalProcedure", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/MedicalProcedure.java.MedicalProcedure.[String]icd10()", "name": "icd10", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String icd10()", "original_string": "    public String icd10() {\n        String regex = resolve(\"healthcare.medical_procedure.icd10\");\n        return faker.regexify(regex);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/MedicalProcedure.java", "class_name": "MedicalProcedure", "class_uri": "src/main/java/net/datafaker/providers/healthcare/MedicalProcedure.java.MedicalProcedure", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker.[]HealthcareFaker()", "name": "HealthcareFaker", "arg_nums": 0, "params": [], "return_type": "", "signature": "public HealthcareFaker()", "original_string": "    public HealthcareFaker() {\n        super();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java", "class_name": "HealthcareFaker", "class_uri": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker.[]HealthcareFaker(Locale)", "name": "HealthcareFaker", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "", "signature": "public HealthcareFaker(Locale locale)", "original_string": "    public HealthcareFaker(Locale locale) {\n        super(locale);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java", "class_name": "HealthcareFaker", "class_uri": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker.[]HealthcareFaker(Random)", "name": "HealthcareFaker", "arg_nums": 1, "params": [{"name": "random", "type": "Random"}], "return_type": "", "signature": "public HealthcareFaker(Random random)", "original_string": "    public HealthcareFaker(Random random) {\n        super(random);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java", "class_name": "HealthcareFaker", "class_uri": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker.[]HealthcareFaker(Locale,RandomService)", "name": "HealthcareFaker", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "randomService", "type": "RandomService"}], "return_type": "", "signature": "public HealthcareFaker(Locale locale, RandomService randomService)", "original_string": "    public HealthcareFaker(Locale locale, RandomService randomService) {\n        super(locale, randomService);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java", "class_name": "HealthcareFaker", "class_uri": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker.[]HealthcareFaker(FakeValuesService,FakerContext)", "name": "HealthcareFaker", "arg_nums": 2, "params": [{"name": "fakeValuesService", "type": "FakeValuesService"}, {"name": "context", "type": "FakerContext"}], "return_type": "", "signature": "public HealthcareFaker(FakeValuesService fakeValuesService, FakerContext context)", "original_string": "    public HealthcareFaker(FakeValuesService fakeValuesService, FakerContext context) {\n        super(fakeValuesService, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java", "class_name": "HealthcareFaker", "class_uri": "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java.Ghostbusters.[]Ghostbusters(EntertainmentProviders)", "name": "Ghostbusters", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Ghostbusters(EntertainmentProviders faker)", "original_string": "    protected Ghostbusters(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java", "class_name": "Ghostbusters", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java.Ghostbusters", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java.Ghostbusters.[String]actor()", "name": "actor", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String actor()", "original_string": "    public String actor() {\n        return resolve(\"ghostbusters.actors\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java", "class_name": "Ghostbusters", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java.Ghostbusters", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java.Ghostbusters.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"ghostbusters.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java", "class_name": "Ghostbusters", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java.Ghostbusters", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java.Ghostbusters.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"ghostbusters.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java", "class_name": "Ghostbusters", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Ghostbusters.java.Ghostbusters", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek.[]StarTrek(EntertainmentProviders)", "name": "StarTrek", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected StarTrek(EntertainmentProviders faker)", "original_string": "    protected StarTrek(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java", "class_name": "StarTrek", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"star_trek.character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java", "class_name": "StarTrek", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"star_trek.location\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java", "class_name": "StarTrek", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek.[String]species()", "name": "species", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String species()", "original_string": "    public String species() {\n        return resolve(\"star_trek.species\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java", "class_name": "StarTrek", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek.[String]villain()", "name": "villain", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String villain()", "original_string": "    public String villain() {\n        return resolve(\"star_trek.villain\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java", "class_name": "StarTrek", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek.[String]klingon()", "name": "klingon", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String klingon()", "original_string": "    public String klingon() {\n        return resolve(\"star_trek.klingon\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java", "class_name": "StarTrek", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarTrek.java.StarTrek", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java.StudioGhibli.[]StudioGhibli(EntertainmentProviders)", "name": "StudioGhibli", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected StudioGhibli(EntertainmentProviders faker)", "original_string": "    protected StudioGhibli(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java", "class_name": "StudioGhibli", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java.StudioGhibli", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java.StudioGhibli.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"studio_ghibli.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java", "class_name": "StudioGhibli", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java.StudioGhibli", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java.StudioGhibli.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"studio_ghibli.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java", "class_name": "StudioGhibli", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java.StudioGhibli", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java.StudioGhibli.[String]movie()", "name": "movie", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String movie()", "original_string": "    public String movie() {\n        return resolve(\"studio_ghibli.movies\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java", "class_name": "StudioGhibli", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StudioGhibli.java.StudioGhibli", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[AquaTeenHungerForce]aquaTeenHungerForce()", "name": "aquaTeenHungerForce", "arg_nums": 0, "params": [], "return_type": "AquaTeenHungerForce", "signature": "default AquaTeenHungerForce aquaTeenHungerForce()", "original_string": "    default AquaTeenHungerForce aquaTeenHungerForce() {\n        return getProvider(AquaTeenHungerForce.class, AquaTeenHungerForce::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "AquaTeenHungerForce", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Avatar]avatar()", "name": "avatar", "arg_nums": 0, "params": [], "return_type": "Avatar", "signature": "default Avatar avatar()", "original_string": "    default Avatar avatar() {\n        return getProvider(Avatar.class, Avatar::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Avatar", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[BackToTheFuture]backToTheFuture()", "name": "backToTheFuture", "arg_nums": 0, "params": [], "return_type": "BackToTheFuture", "signature": "default BackToTheFuture backToTheFuture()", "original_string": "    default BackToTheFuture backToTheFuture() {\n        return getProvider(BackToTheFuture.class, BackToTheFuture::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "BackToTheFuture", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Babylon5]babylon5()", "name": "babylon5", "arg_nums": 0, "params": [], "return_type": "Babylon5", "signature": "default Babylon5 babylon5()", "original_string": "    default Babylon5 babylon5() {\n        return getProvider(Babylon5.class, Babylon5::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Babylon5", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[BigBangTheory]bigBangTheory()", "name": "bigBangTheory", "arg_nums": 0, "params": [], "return_type": "BigBangTheory", "signature": "default BigBangTheory bigBangTheory()", "original_string": "    default BigBangTheory bigBangTheory() {\n        return getProvider(BigBangTheory.class, BigBangTheory::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "BigBangTheory", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Boardgame]boardgame()", "name": "boardgame", "arg_nums": 0, "params": [], "return_type": "Boardgame", "signature": "default Boardgame boardgame()", "original_string": "    default Boardgame boardgame() {\n        return getProvider(Boardgame.class, Boardgame::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Boardgame", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[BojackHorseman]bojackHorseman()", "name": "bojackHorseman", "arg_nums": 0, "params": [], "return_type": "BojackHorseman", "signature": "default BojackHorseman bojackHorseman()", "original_string": "    default BojackHorseman bojackHorseman() {\n        return getProvider(BojackHorseman.class, BojackHorseman::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "BojackHorseman", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[BossaNova]bossaNova()", "name": "bossaNova", "arg_nums": 0, "params": [], "return_type": "BossaNova", "signature": "default BossaNova bossaNova()", "original_string": "    default BossaNova bossaNova() {\n        return getProvider(BossaNova.class, BossaNova::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "BossaNova", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[BreakingBad]breakingBad()", "name": "breakingBad", "arg_nums": 0, "params": [], "return_type": "BreakingBad", "signature": "default BreakingBad breakingBad()", "original_string": "    default BreakingBad breakingBad() {\n        return getProvider(BreakingBad.class, BreakingBad::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "BreakingBad", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[BrooklynNineNine]brooklynNineNine()", "name": "brooklynNineNine", "arg_nums": 0, "params": [], "return_type": "BrooklynNineNine", "signature": "default BrooklynNineNine brooklynNineNine()", "original_string": "    default BrooklynNineNine brooklynNineNine() {\n        return getProvider(BrooklynNineNine.class, BrooklynNineNine::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "BrooklynNineNine", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Buffy]buffy()", "name": "buffy", "arg_nums": 0, "params": [], "return_type": "Buffy", "signature": "default Buffy buffy()", "original_string": "    default Buffy buffy() {\n        return getProvider(Buffy.class, Buffy::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Buffy", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[ChuckNorris]chuckNorris()", "name": "chuckNorris", "arg_nums": 0, "params": [], "return_type": "ChuckNorris", "signature": "default ChuckNorris chuckNorris()", "original_string": "    default ChuckNorris chuckNorris() {\n        return getProvider(ChuckNorris.class, ChuckNorris::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "ChuckNorris", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[CowboyBebop]cowboyBebop()", "name": "cowboyBebop", "arg_nums": 0, "params": [], "return_type": "CowboyBebop", "signature": "default CowboyBebop cowboyBebop()", "original_string": "    default CowboyBebop cowboyBebop() {\n        return getProvider(CowboyBebop.class, CowboyBebop::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "CowboyBebop", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Departed]departed()", "name": "departed", "arg_nums": 0, "params": [], "return_type": "Departed", "signature": "default Departed departed()", "original_string": "    default Departed departed() {\n        return getProvider(Departed.class, Departed::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Departed", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[DetectiveConan]detectiveConan()", "name": "detectiveConan", "arg_nums": 0, "params": [], "return_type": "DetectiveConan", "signature": "default DetectiveConan detectiveConan()", "original_string": "    default DetectiveConan detectiveConan() {\n        return getProvider(DetectiveConan.class, DetectiveConan::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "DetectiveConan", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[DoctorWho]doctorWho()", "name": "doctorWho", "arg_nums": 0, "params": [], "return_type": "DoctorWho", "signature": "default DoctorWho doctorWho()", "original_string": "    default DoctorWho doctorWho() {\n        return getProvider(DoctorWho.class, DoctorWho::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "DoctorWho", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Doraemon]doraemon()", "name": "doraemon", "arg_nums": 0, "params": [], "return_type": "Doraemon", "signature": "default Doraemon doraemon()", "original_string": "    default Doraemon doraemon() {\n        return getProvider(Doraemon.class, Doraemon::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Doraemon", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[DragonBall]dragonBall()", "name": "dragonBall", "arg_nums": 0, "params": [], "return_type": "DragonBall", "signature": "default DragonBall dragonBall()", "original_string": "    default DragonBall dragonBall() {\n        return getProvider(DragonBall.class, DragonBall::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "DragonBall", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[DumbAndDumber]dumbAndDumber()", "name": "dumbAndDumber", "arg_nums": 0, "params": [], "return_type": "DumbAndDumber", "signature": "default DumbAndDumber dumbAndDumber()", "original_string": "    default DumbAndDumber dumbAndDumber() {\n        return getProvider(DumbAndDumber.class, DumbAndDumber::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "DumbAndDumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Dune]dune()", "name": "dune", "arg_nums": 0, "params": [], "return_type": "Dune", "signature": "default Dune dune()", "original_string": "    default Dune dune() {\n        return getProvider(Dune.class, Dune::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Dune", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[FamilyGuy]familyGuy()", "name": "familyGuy", "arg_nums": 0, "params": [], "return_type": "FamilyGuy", "signature": "default FamilyGuy familyGuy()", "original_string": "    default FamilyGuy familyGuy() {\n        return getProvider(FamilyGuy.class, FamilyGuy::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "FamilyGuy", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[FinalSpace]finalSpace()", "name": "finalSpace", "arg_nums": 0, "params": [], "return_type": "FinalSpace", "signature": "default FinalSpace finalSpace()", "original_string": "    default FinalSpace finalSpace() {\n        return getProvider(FinalSpace.class, FinalSpace::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "FinalSpace", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[FreshPrinceOfBelAir]freshPrinceOfBelAir()", "name": "freshPrinceOfBelAir", "arg_nums": 0, "params": [], "return_type": "FreshPrinceOfBelAir", "signature": "default FreshPrinceOfBelAir freshPrinceOfBelAir()", "original_string": "    default FreshPrinceOfBelAir freshPrinceOfBelAir() {\n        return getProvider(FreshPrinceOfBelAir.class, FreshPrinceOfBelAir::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "FreshPrinceOfBelAir", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Friends]friends()", "name": "friends", "arg_nums": 0, "params": [], "return_type": "Friends", "signature": "default Friends friends()", "original_string": "    default Friends friends() {\n        return getProvider(Friends.class, Friends::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Friends", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[FullmetalAlchemist]fullMetalAlchemist()", "name": "fullMetalAlchemist", "arg_nums": 0, "params": [], "return_type": "FullmetalAlchemist", "signature": "default FullmetalAlchemist fullMetalAlchemist()", "original_string": "    default FullmetalAlchemist fullMetalAlchemist() {\n        return getProvider(FullmetalAlchemist.class, FullmetalAlchemist::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "FullmetalAlchemist", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Futurama]futurama()", "name": "futurama", "arg_nums": 0, "params": [], "return_type": "Futurama", "signature": "default Futurama futurama()", "original_string": "    default Futurama futurama() {\n        return getProvider(Futurama.class, Futurama::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Futurama", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[GameOfThrones]gameOfThrones()", "name": "gameOfThrones", "arg_nums": 0, "params": [], "return_type": "GameOfThrones", "signature": "default GameOfThrones gameOfThrones()", "original_string": "    default GameOfThrones gameOfThrones() {\n        return getProvider(GameOfThrones.class, GameOfThrones::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "GameOfThrones", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Ghostbusters]ghostbusters()", "name": "ghostbusters", "arg_nums": 0, "params": [], "return_type": "Ghostbusters", "signature": "default Ghostbusters ghostbusters()", "original_string": "    default Ghostbusters ghostbusters() {\n        return getProvider(Ghostbusters.class, Ghostbusters::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Ghostbusters", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[GratefulDead]gratefulDead()", "name": "gratefulDead", "arg_nums": 0, "params": [], "return_type": "GratefulDead", "signature": "default GratefulDead gratefulDead()", "original_string": "    default GratefulDead gratefulDead() {\n        return getProvider(GratefulDead.class, GratefulDead::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "GratefulDead", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[HarryPotter]harryPotter()", "name": "harryPotter", "arg_nums": 0, "params": [], "return_type": "HarryPotter", "signature": "default HarryPotter harryPotter()", "original_string": "    default HarryPotter harryPotter() {\n        return getProvider(HarryPotter.class, HarryPotter::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "HarryPotter", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[HeyArnold]heyArnold()", "name": "heyArnold", "arg_nums": 0, "params": [], "return_type": "HeyArnold", "signature": "default HeyArnold heyArnold()", "original_string": "    default HeyArnold heyArnold() {\n        return getProvider(HeyArnold.class, HeyArnold::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "HeyArnold", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[HitchhikersGuideToTheGalaxy]hitchhikersGuideToTheGalaxy()", "name": "hitchhikersGuideToTheGalaxy", "arg_nums": 0, "params": [], "return_type": "HitchhikersGuideToTheGalaxy", "signature": "default HitchhikersGuideToTheGalaxy hitchhikersGuideToTheGalaxy()", "original_string": "    default HitchhikersGuideToTheGalaxy hitchhikersGuideToTheGalaxy() {\n        return getProvider(\n            HitchhikersGuideToTheGalaxy.class, HitchhikersGuideToTheGalaxy::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "HitchhikersGuideToTheGalaxy", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Hobbit]hobbit()", "name": "hobbit", "arg_nums": 0, "params": [], "return_type": "Hobbit", "signature": "default Hobbit hobbit()", "original_string": "    default Hobbit hobbit() {\n        return getProvider(Hobbit.class, Hobbit::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Hobbit", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[HowIMetYourMother]howIMetYourMother()", "name": "howIMetYourMother", "arg_nums": 0, "params": [], "return_type": "HowIMetYourMother", "signature": "default HowIMetYourMother howIMetYourMother()", "original_string": "    default HowIMetYourMother howIMetYourMother() {\n        return getProvider(HowIMetYourMother.class, HowIMetYourMother::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "HowIMetYourMother", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[HowToTrainYourDragon]howToTrainYourDragon()", "name": "howToTrainYourDragon", "arg_nums": 0, "params": [], "return_type": "HowToTrainYourDragon", "signature": "default HowToTrainYourDragon howToTrainYourDragon()", "original_string": "    default HowToTrainYourDragon howToTrainYourDragon() {\n        return getProvider(HowToTrainYourDragon.class, HowToTrainYourDragon::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "HowToTrainYourDragon", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Joke]joke()", "name": "joke", "arg_nums": 0, "params": [], "return_type": "Joke", "signature": "default Joke joke()", "original_string": "    default Joke joke() {\n        return getProvider(Joke.class, Joke::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Joke", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Kaamelott]kaamelott()", "name": "kaamelott", "arg_nums": 0, "params": [], "return_type": "Kaamelott", "signature": "default Kaamelott kaamelott()", "original_string": "    default Kaamelott kaamelott() {\n        return getProvider(Kaamelott.class, Kaamelott::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Kaamelott", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Lebowski]lebowski()", "name": "lebowski", "arg_nums": 0, "params": [], "return_type": "Lebowski", "signature": "default Lebowski lebowski()", "original_string": "    default Lebowski lebowski() {\n        return getProvider(Lebowski.class, Lebowski::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Lebowski", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[LordOfTheRings]lordOfTheRings()", "name": "lordOfTheRings", "arg_nums": 0, "params": [], "return_type": "LordOfTheRings", "signature": "default LordOfTheRings lordOfTheRings()", "original_string": "    default LordOfTheRings lordOfTheRings() {\n        return getProvider(LordOfTheRings.class, LordOfTheRings::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "LordOfTheRings", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[MoneyHeist]moneyHeist()", "name": "moneyHeist", "arg_nums": 0, "params": [], "return_type": "MoneyHeist", "signature": "default MoneyHeist moneyHeist()", "original_string": "    default MoneyHeist moneyHeist() {\n        return getProvider(MoneyHeist.class, MoneyHeist::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "MoneyHeist", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Movie]movie()", "name": "movie", "arg_nums": 0, "params": [], "return_type": "Movie", "signature": "default Movie movie()", "original_string": "    default Movie movie() {\n        return getProvider(Movie.class, Movie::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Movie", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Naruto]naruto()", "name": "naruto", "arg_nums": 0, "params": [], "return_type": "Naruto", "signature": "default Naruto naruto()", "original_string": "    default Naruto naruto() {\n        return getProvider(Naruto.class, Naruto::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Naruto", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[NewGirl]newGirl()", "name": "newGirl", "arg_nums": 0, "params": [], "return_type": "NewGirl", "signature": "default NewGirl newGirl()", "original_string": "    default NewGirl newGirl() {\n        return getProvider(NewGirl.class, NewGirl::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "NewGirl", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[OnePiece]onePiece()", "name": "onePiece", "arg_nums": 0, "params": [], "return_type": "OnePiece", "signature": "default OnePiece onePiece()", "original_string": "    default OnePiece onePiece() {\n        return getProvider(OnePiece.class, OnePiece::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "OnePiece", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[OscarMovie]oscarMovie()", "name": "oscarMovie", "arg_nums": 0, "params": [], "return_type": "OscarMovie", "signature": "default OscarMovie oscarMovie()", "original_string": "    default OscarMovie oscarMovie() {\n        return getProvider(OscarMovie.class, OscarMovie::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "OscarMovie", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Pokemon]pokemon()", "name": "pokemon", "arg_nums": 0, "params": [], "return_type": "Pokemon", "signature": "default Pokemon pokemon()", "original_string": "    default Pokemon pokemon() {\n        return getProvider(Pokemon.class, Pokemon::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Pokemon", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[PrincessBride]princessBride()", "name": "princessBride", "arg_nums": 0, "params": [], "return_type": "PrincessBride", "signature": "default PrincessBride princessBride()", "original_string": "    default PrincessBride princessBride() {\n        return getProvider(PrincessBride.class, PrincessBride::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "PrincessBride", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[ResidentEvil]residentEvil()", "name": "residentEvil", "arg_nums": 0, "params": [], "return_type": "ResidentEvil", "signature": "default ResidentEvil residentEvil()", "original_string": "    default ResidentEvil residentEvil() {\n        return getProvider(ResidentEvil.class, ResidentEvil::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "ResidentEvil", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[RickAndMorty]rickAndMorty()", "name": "rickAndMorty", "arg_nums": 0, "params": [], "return_type": "RickAndMorty", "signature": "default RickAndMorty rickAndMorty()", "original_string": "    default RickAndMorty rickAndMorty() {\n        return getProvider(RickAndMorty.class, RickAndMorty::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "RickAndMorty", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[RuPaulDragRace]ruPaulDragRace()", "name": "ruPaulDragRace", "arg_nums": 0, "params": [], "return_type": "RuPaulDragRace", "signature": "default RuPaulDragRace ruPaulDragRace()", "original_string": "    default RuPaulDragRace ruPaulDragRace() {\n        return getProvider(RuPaulDragRace.class, RuPaulDragRace::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "RuPaulDragRace", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Seinfeld]seinfeld()", "name": "seinfeld", "arg_nums": 0, "params": [], "return_type": "Seinfeld", "signature": "default Seinfeld seinfeld()", "original_string": "    default Seinfeld seinfeld() {\n        return getProvider(Seinfeld.class, Seinfeld::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Seinfeld", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Show]show()", "name": "show", "arg_nums": 0, "params": [], "return_type": "Show", "signature": "default Show show()", "original_string": "    default Show show() {\n        return getProvider(Show.class, Show::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Show", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[SiliconValley]siliconValley()", "name": "siliconValley", "arg_nums": 0, "params": [], "return_type": "SiliconValley", "signature": "default SiliconValley siliconValley()", "original_string": "    default SiliconValley siliconValley() {\n        return getProvider(SiliconValley.class, SiliconValley::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "SiliconValley", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Simpsons]simpsons()", "name": "simpsons", "arg_nums": 0, "params": [], "return_type": "Simpsons", "signature": "default Simpsons simpsons()", "original_string": "    default Simpsons simpsons() {\n        return getProvider(Simpsons.class, Simpsons::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Simpsons", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[SouthPark]southPark()", "name": "southPark", "arg_nums": 0, "params": [], "return_type": "SouthPark", "signature": "default SouthPark southPark()", "original_string": "    default SouthPark southPark() {\n        return getProvider(SouthPark.class, SouthPark::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "SouthPark", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Spongebob]spongebob()", "name": "spongebob", "arg_nums": 0, "params": [], "return_type": "Spongebob", "signature": "default Spongebob spongebob()", "original_string": "    default Spongebob spongebob() {\n        return getProvider(Spongebob.class, Spongebob::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Spongebob", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Stargate]stargate()", "name": "stargate", "arg_nums": 0, "params": [], "return_type": "Stargate", "signature": "default Stargate stargate()", "original_string": "    default Stargate stargate() {\n        return getProvider(Stargate.class, Stargate::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Stargate", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[StarTrek]starTrek()", "name": "starTrek", "arg_nums": 0, "params": [], "return_type": "StarTrek", "signature": "default StarTrek starTrek()", "original_string": "    default StarTrek starTrek() {\n        return getProvider(StarTrek.class, StarTrek::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "StarTrek", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[StarWars]starWars()", "name": "starWars", "arg_nums": 0, "params": [], "return_type": "StarWars", "signature": "default StarWars starWars()", "original_string": "    default StarWars starWars() {\n        return getProvider(StarWars.class, StarWars::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "StarWars", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[StrangerThings]strangerThings()", "name": "strangerThings", "arg_nums": 0, "params": [], "return_type": "StrangerThings", "signature": "default StrangerThings strangerThings()", "original_string": "    default StrangerThings strangerThings() {\n        return getProvider(StrangerThings.class, StrangerThings::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "StrangerThings", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[StudioGhibli]studioGhibli()", "name": "studioGhibli", "arg_nums": 0, "params": [], "return_type": "StudioGhibli", "signature": "default StudioGhibli studioGhibli()", "original_string": "    default StudioGhibli studioGhibli() {\n        return getProvider(StudioGhibli.class, StudioGhibli::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "StudioGhibli", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Suits]suits()", "name": "suits", "arg_nums": 0, "params": [], "return_type": "Suits", "signature": "default Suits suits()", "original_string": "    default Suits suits() {\n        return getProvider(Suits.class, Suits::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Suits", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Supernatural]supernatural()", "name": "supernatural", "arg_nums": 0, "params": [], "return_type": "Supernatural", "signature": "default Supernatural supernatural()", "original_string": "    default Supernatural supernatural() {\n        return getProvider(Supernatural.class, Supernatural::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Supernatural", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[SwordArtOnline]swordArtOnline()", "name": "swordArtOnline", "arg_nums": 0, "params": [], "return_type": "SwordArtOnline", "signature": "default SwordArtOnline swordArtOnline()", "original_string": "    default SwordArtOnline swordArtOnline() {\n        return getProvider(SwordArtOnline.class, SwordArtOnline::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "SwordArtOnline", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[TheExpanse]theExpanse()", "name": "theExpanse", "arg_nums": 0, "params": [], "return_type": "TheExpanse", "signature": "default TheExpanse theExpanse()", "original_string": "    default TheExpanse theExpanse() {\n        return getProvider(TheExpanse.class, TheExpanse::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "TheExpanse", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[TheItCrowd]theItCrowd()", "name": "theItCrowd", "arg_nums": 0, "params": [], "return_type": "TheItCrowd", "signature": "default TheItCrowd theItCrowd()", "original_string": "    default TheItCrowd theItCrowd() {\n        return getProvider(TheItCrowd.class, TheItCrowd::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "TheItCrowd", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[TheKingkillerChronicle]theKingkillerChronicle()", "name": "theKingkillerChronicle", "arg_nums": 0, "params": [], "return_type": "TheKingkillerChronicle", "signature": "default TheKingkillerChronicle theKingkillerChronicle()", "original_string": "    default TheKingkillerChronicle theKingkillerChronicle() {\n        return getProvider(TheKingkillerChronicle.class, TheKingkillerChronicle::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "TheKingkillerChronicle", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[TheRoom]theRoom()", "name": "theRoom", "arg_nums": 0, "params": [], "return_type": "TheRoom", "signature": "default TheRoom theRoom()", "original_string": "    default TheRoom theRoom() {\n        return getProvider(TheRoom.class, TheRoom::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "TheRoom", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[TheThickOfIt]theThickOfIt()", "name": "theThickOfIt", "arg_nums": 0, "params": [], "return_type": "TheThickOfIt", "signature": "default TheThickOfIt theThickOfIt()", "original_string": "    default TheThickOfIt theThickOfIt() {\n        return getProvider(TheThickOfIt.class, TheThickOfIt::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "TheThickOfIt", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[TheVentureBros]theVentureBros()", "name": "theVentureBros", "arg_nums": 0, "params": [], "return_type": "TheVentureBros", "signature": "default TheVentureBros theVentureBros()", "original_string": "    default TheVentureBros theVentureBros() {\n        return getProvider(TheVentureBros.class, TheVentureBros::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "TheVentureBros", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Tron]tron()", "name": "tron", "arg_nums": 0, "params": [], "return_type": "Tron", "signature": "default Tron tron()", "original_string": "    default Tron tron() {\n        return getProvider(Tron.class, Tron::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Tron", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[TwinPeaks]twinPeaks()", "name": "twinPeaks", "arg_nums": 0, "params": [], "return_type": "TwinPeaks", "signature": "default TwinPeaks twinPeaks()", "original_string": "    default TwinPeaks twinPeaks() {\n        return getProvider(TwinPeaks.class, TwinPeaks::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "TwinPeaks", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[VForVendetta]vForVendetta()", "name": "vForVendetta", "arg_nums": 0, "params": [], "return_type": "VForVendetta", "signature": "default VForVendetta vForVendetta()", "original_string": "    default VForVendetta vForVendetta() {\n        return getProvider(VForVendetta.class, VForVendetta::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "VForVendetta", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders.[Witcher]witcher()", "name": "witcher", "arg_nums": 0, "params": [], "return_type": "Witcher", "signature": "default Witcher witcher()", "original_string": "    default Witcher witcher() {\n        return getProvider(Witcher.class, Witcher::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java", "class_name": "EntertainmentProviders", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Witcher", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Spongebob.java.Spongebob.[]Spongebob(EntertainmentProviders)", "name": "Spongebob", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Spongebob(EntertainmentProviders faker)", "original_string": "    protected Spongebob(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Spongebob.java", "class_name": "Spongebob", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Spongebob.java.Spongebob", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Spongebob.java.Spongebob.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"spongebob.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Spongebob.java", "class_name": "Spongebob", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Spongebob.java.Spongebob", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Spongebob.java.Spongebob.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"spongebob.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Spongebob.java", "class_name": "Spongebob", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Spongebob.java.Spongebob", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Spongebob.java.Spongebob.[String]episodes()", "name": "episodes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String episodes()", "original_string": "    public String episodes() {\n        return resolve(\"spongebob.episodes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Spongebob.java", "class_name": "Spongebob", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Spongebob.java.Spongebob", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop.[]CowboyBebop(EntertainmentProviders)", "name": "CowboyBebop", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected CowboyBebop(EntertainmentProviders faker)", "original_string": "    protected CowboyBebop(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java", "class_name": "CowboyBebop", "class_uri": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"cowboy_bebop.character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java", "class_name": "CowboyBebop", "class_uri": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop.[String]episode()", "name": "episode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String episode()", "original_string": "    public String episode() {\n        return resolve(\"cowboy_bebop.episode\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java", "class_name": "CowboyBebop", "class_uri": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop.[String]song()", "name": "song", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String song()", "original_string": "    public String song() {\n        return resolve(\"cowboy_bebop.song\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java", "class_name": "CowboyBebop", "class_uri": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"cowboy_bebop.quote\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java", "class_name": "CowboyBebop", "class_uri": "src/main/java/net/datafaker/providers/entertainment/CowboyBebop.java.CowboyBebop", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[]HitchhikersGuideToTheGalaxy(EntertainmentProviders)", "name": "HitchhikersGuideToTheGalaxy", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected HitchhikersGuideToTheGalaxy(EntertainmentProviders faker)", "original_string": "    protected HitchhikersGuideToTheGalaxy(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java", "class_name": "HitchhikersGuideToTheGalaxy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"hitchhikers_guide_to_the_galaxy.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java", "class_name": "HitchhikersGuideToTheGalaxy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"hitchhikers_guide_to_the_galaxy.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java", "class_name": "HitchhikersGuideToTheGalaxy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[String]marvinQuote()", "name": "marvinQuote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String marvinQuote()", "original_string": "    public String marvinQuote() {\n        return resolve(\"hitchhikers_guide_to_the_galaxy.marvin_quote\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java", "class_name": "HitchhikersGuideToTheGalaxy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[String]planet()", "name": "planet", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String planet()", "original_string": "    public String planet() {\n        return resolve(\"hitchhikers_guide_to_the_galaxy.planets\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java", "class_name": "HitchhikersGuideToTheGalaxy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"hitchhikers_guide_to_the_galaxy.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java", "class_name": "HitchhikersGuideToTheGalaxy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[String]species()", "name": "species", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String species()", "original_string": "    public String species() {\n        return resolve(\"hitchhikers_guide_to_the_galaxy.species\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java", "class_name": "HitchhikersGuideToTheGalaxy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy.[String]starship()", "name": "starship", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String starship()", "original_string": "    public String starship() {\n        return resolve(\"hitchhikers_guide_to_the_galaxy.starships\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java", "class_name": "HitchhikersGuideToTheGalaxy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HitchhikersGuideToTheGalaxy.java.HitchhikersGuideToTheGalaxy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece.[]OnePiece(EntertainmentProviders)", "name": "OnePiece", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected OnePiece(EntertainmentProviders faker)", "original_string": "    protected OnePiece(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java", "class_name": "OnePiece", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"one_piece.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java", "class_name": "OnePiece", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece.[String]sea()", "name": "sea", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sea()", "original_string": "    public String sea() {\n        return resolve(\"one_piece.seas\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java", "class_name": "OnePiece", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece.[String]island()", "name": "island", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String island()", "original_string": "    public String island() {\n        return resolve(\"one_piece.islands\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java", "class_name": "OnePiece", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"one_piece.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java", "class_name": "OnePiece", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"one_piece.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java", "class_name": "OnePiece", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece.[String]akumasNoMi()", "name": "akumasNoMi", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String akumasNoMi()", "original_string": "    public String akumasNoMi() {\n        return resolve(\"one_piece.akumas_no_mi\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java", "class_name": "OnePiece", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OnePiece.java.OnePiece", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[]Witcher(EntertainmentProviders)", "name": "Witcher", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Witcher(EntertainmentProviders faker)", "original_string": "    protected Witcher(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Witcher.java", "class_name": "Witcher", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"games.witcher.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Witcher.java", "class_name": "Witcher", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]witcher()", "name": "witcher", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String witcher()", "original_string": "    public String witcher() {\n        return resolve(\"games.witcher.witchers\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Witcher.java", "class_name": "Witcher", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]school()", "name": "school", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String school()", "original_string": "    public String school() {\n        return resolve(\"games.witcher.schools\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Witcher.java", "class_name": "Witcher", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"games.witcher.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Witcher.java", "class_name": "Witcher", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"games.witcher.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Witcher.java", "class_name": "Witcher", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]monster()", "name": "monster", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String monster()", "original_string": "    public String monster() {\n        return resolve(\"games.witcher.monsters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Witcher.java", "class_name": "Witcher", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]sign()", "name": "sign", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sign()", "original_string": "    public String sign() {\n        return resolve(\"games.witcher.signs\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Witcher.java", "class_name": "Witcher", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]potion()", "name": "potion", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String potion()", "original_string": "    public String potion() {\n        return resolve(\"games.witcher.potions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Witcher.java", "class_name": "Witcher", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher.[String]book()", "name": "book", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String book()", "original_string": "    public String book() {\n        return resolve(\"games.witcher.books\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Witcher.java", "class_name": "Witcher", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Witcher.java.Witcher", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[]Tron(EntertainmentProviders)", "name": "Tron", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Tron(EntertainmentProviders faker)", "original_string": "    protected Tron(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Tron.java", "class_name": "Tron", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return character(faker.options().option(Character.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Tron.java", "class_name": "Tron", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]character(Character)", "name": "character", "arg_nums": 1, "params": [{"name": "character", "type": "Character"}], "return_type": "String", "signature": "public String character(Character character)", "original_string": "    public String character(Character character) {\n        return resolve(\"tron.characters.\" + character.yamlKey);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Tron.java", "class_name": "Tron", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]game()", "name": "game", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String game()", "original_string": "    public String game() {\n        return resolve(\"tron.games\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Tron.java", "class_name": "Tron", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"tron.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Tron.java", "class_name": "Tron", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return quote(faker.options().option(Tron.Quote.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Tron.java", "class_name": "Tron", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]quote(Tron.Quote)", "name": "quote", "arg_nums": 1, "params": [{"name": "quote", "type": "Tron.Quote"}], "return_type": "String", "signature": "public String quote(Tron.Quote quote)", "original_string": "    public String quote(Tron.Quote quote) {\n        return resolve(\"tron.quotes.\" + quote.yamlKey);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Tron.java", "class_name": "Tron", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]tagline()", "name": "tagline", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String tagline()", "original_string": "    public String tagline() {\n        return resolve(\"tron.taglines\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Tron.java", "class_name": "Tron", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]vehicle()", "name": "vehicle", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String vehicle()", "original_string": "    public String vehicle() {\n        return resolve(\"tron.vehicles\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Tron.java", "class_name": "Tron", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]alternateCharacterSpelling()", "name": "alternateCharacterSpelling", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String alternateCharacterSpelling()", "original_string": "    public String alternateCharacterSpelling() {\n        return alternateCharacterSpelling(faker.options().option(Tron.AlternateCharacterSpelling.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Tron.java", "class_name": "Tron", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron.[String]alternateCharacterSpelling(AlternateCharacterSpelling)", "name": "alternateCharacterSpelling", "arg_nums": 1, "params": [{"name": "alternateCharacterSpelling", "type": "AlternateCharacterSpelling"}], "return_type": "String", "signature": "public String alternateCharacterSpelling(AlternateCharacterSpelling alternateCharacterSpelling)", "original_string": "    public String alternateCharacterSpelling(AlternateCharacterSpelling alternateCharacterSpelling) {\n        return resolve(\"tron.alternate_character_spellings.\" + alternateCharacterSpelling.yamlKey);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Tron.java", "class_name": "Tron", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Tron.java.Tron", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StrangerThings.java.StrangerThings.[]StrangerThings(EntertainmentProviders)", "name": "StrangerThings", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected StrangerThings(EntertainmentProviders faker)", "original_string": "    protected StrangerThings(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StrangerThings.java", "class_name": "StrangerThings", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StrangerThings.java.StrangerThings", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StrangerThings.java.StrangerThings.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"stranger_things.character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StrangerThings.java", "class_name": "StrangerThings", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StrangerThings.java.StrangerThings", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StrangerThings.java.StrangerThings.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"stranger_things.quote\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StrangerThings.java", "class_name": "StrangerThings", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StrangerThings.java.StrangerThings", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[]Boardgame(BaseProviders)", "name": "Boardgame", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "", "signature": "protected Boardgame(BaseProviders faker)", "original_string": "    protected Boardgame(BaseProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java", "class_name": "Boardgame", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"boardgame.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java", "class_name": "Boardgame", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[String]category()", "name": "category", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String category()", "original_string": "    public String category() {\n        return resolve(\"boardgame.category\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java", "class_name": "Boardgame", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[String]mechanic()", "name": "mechanic", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String mechanic()", "original_string": "    public String mechanic() {\n        return resolve(\"boardgame.mechanic\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java", "class_name": "Boardgame", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[String]subdomain()", "name": "subdomain", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String subdomain()", "original_string": "    public String subdomain() {\n        return resolve(\"boardgame.subdomain\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java", "class_name": "Boardgame", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[String]designer()", "name": "designer", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String designer()", "original_string": "    public String designer() {\n        return resolve(\"boardgame.designer\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java", "class_name": "Boardgame", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[String]artist()", "name": "artist", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String artist()", "original_string": "    public String artist() {\n        return resolve(\"boardgame.artist\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java", "class_name": "Boardgame", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame.[String]publisher()", "name": "publisher", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String publisher()", "original_string": "    public String publisher() {\n        return resolve(\"boardgame.publisher\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java", "class_name": "Boardgame", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Boardgame.java.Boardgame", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java.FamilyGuy.[]FamilyGuy(EntertainmentProviders)", "name": "FamilyGuy", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected FamilyGuy(EntertainmentProviders faker)", "original_string": "    protected FamilyGuy(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java", "class_name": "FamilyGuy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java.FamilyGuy", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java.FamilyGuy.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"family_guy.character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java", "class_name": "FamilyGuy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java.FamilyGuy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java.FamilyGuy.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"family_guy.location\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java", "class_name": "FamilyGuy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java.FamilyGuy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java.FamilyGuy.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"family_guy.quote\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java", "class_name": "FamilyGuy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FamilyGuy.java.FamilyGuy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil.[]ResidentEvil(EntertainmentProviders)", "name": "ResidentEvil", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected ResidentEvil(EntertainmentProviders faker)", "original_string": "    protected ResidentEvil(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java", "class_name": "ResidentEvil", "class_uri": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"games.resident_evil.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java", "class_name": "ResidentEvil", "class_uri": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return A random character string (like leon kennedy) of ResidentEvil series.\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil.[String]biologicalAgent()", "name": "biologicalAgent", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String biologicalAgent()", "original_string": "    public String biologicalAgent() {\n        return resolve(\"games.resident_evil.biological-agents\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java", "class_name": "ResidentEvil", "class_uri": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return A random biologicalAgent string of ResidentEvil series. This string may contains special characters.\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil.[String]equipment()", "name": "equipment", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String equipment()", "original_string": "    public String equipment() {\n        return resolve(\"games.resident_evil.equipments\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java", "class_name": "ResidentEvil", "class_uri": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return A random equipment string of ResidentEvil series, which includes weapons and other items.\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"games.resident_evil.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java", "class_name": "ResidentEvil", "class_uri": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return A random location string of ResidentEvil series.\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil.[String]creature()", "name": "creature", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String creature()", "original_string": "    public String creature() {\n        return resolve(\"games.resident_evil.creatures\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java", "class_name": "ResidentEvil", "class_uri": "src/main/java/net/datafaker/providers/entertainment/ResidentEvil.java.ResidentEvil", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return A random creature string of ResidentEvil series.\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Joke.java.Joke.[]Joke(EntertainmentProviders)", "name": "Joke", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Joke(final EntertainmentProviders faker)", "original_string": "    protected Joke(final EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Joke.java", "class_name": "Joke", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Joke.java.Joke", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Joke.java.Joke.[String]pun()", "name": "pun", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String pun()", "original_string": "    public String pun() {\n        return resolve(\"joke.puns\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Joke.java", "class_name": "Joke", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Joke.java.Joke", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Joke.java.Joke.[String]knockKnock()", "name": "knockKnock", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String knockKnock()", "original_string": "    public String knockKnock() {\n        return resolve(\"joke.knock_knocks\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Joke.java", "class_name": "Joke", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Joke.java.Joke", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones.[]GameOfThrones(EntertainmentProviders)", "name": "GameOfThrones", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected GameOfThrones(EntertainmentProviders faker)", "original_string": "    protected GameOfThrones(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java", "class_name": "GameOfThrones", "class_uri": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"game_of_thrones.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java", "class_name": "GameOfThrones", "class_uri": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones.[String]house()", "name": "house", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String house()", "original_string": "    public String house() {\n        return resolve(\"game_of_thrones.houses\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java", "class_name": "GameOfThrones", "class_uri": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones.[String]city()", "name": "city", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String city()", "original_string": "    public String city() {\n        return resolve(\"game_of_thrones.cities\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java", "class_name": "GameOfThrones", "class_uri": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones.[String]dragon()", "name": "dragon", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String dragon()", "original_string": "    public String dragon() {\n        return resolve(\"game_of_thrones.dragons\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java", "class_name": "GameOfThrones", "class_uri": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"game_of_thrones.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java", "class_name": "GameOfThrones", "class_uri": "src/main/java/net/datafaker/providers/entertainment/GameOfThrones.java.GameOfThrones", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Movie.java.Movie.[]Movie(EntertainmentProviders)", "name": "Movie", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Movie(EntertainmentProviders faker)", "original_string": "    protected Movie(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Movie.java", "class_name": "Movie", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Movie.java.Movie", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Movie.java.Movie.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"movie.quote\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Movie.java", "class_name": "Movie", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Movie.java.Movie", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random quote from a movie.\n\n@return a string of quote from a movie.\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline.[]SwordArtOnline(EntertainmentProviders)", "name": "SwordArtOnline", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected SwordArtOnline(EntertainmentProviders faker)", "original_string": "    protected SwordArtOnline(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java", "class_name": "SwordArtOnline", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline.[String]realName()", "name": "realName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String realName()", "original_string": "    public String realName() {\n        return resolve(\"sword_art_online.real_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java", "class_name": "SwordArtOnline", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline.[String]gameName()", "name": "gameName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String gameName()", "original_string": "    public String gameName() {\n        return resolve(\"sword_art_online.game_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java", "class_name": "SwordArtOnline", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"sword_art_online.location\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java", "class_name": "SwordArtOnline", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline.[String]item()", "name": "item", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String item()", "original_string": "    public String item() {\n        return resolve(\"sword_art_online.item\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java", "class_name": "SwordArtOnline", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SwordArtOnline.java.SwordArtOnline", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DragonBall.java.DragonBall.[]DragonBall(EntertainmentProviders)", "name": "DragonBall", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected DragonBall(EntertainmentProviders faker)", "original_string": "    protected DragonBall(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DragonBall.java", "class_name": "DragonBall", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DragonBall.java.DragonBall", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DragonBall.java.DragonBall.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"dragon_ball.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DragonBall.java", "class_name": "DragonBall", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DragonBall.java.DragonBall", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BossaNova.java.BossaNova.[]BossaNova(EntertainmentProviders)", "name": "BossaNova", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected BossaNova(EntertainmentProviders faker)", "original_string": "    protected BossaNova(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BossaNova.java", "class_name": "BossaNova", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BossaNova.java.BossaNova", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BossaNova.java.BossaNova.[String]artist()", "name": "artist", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String artist()", "original_string": "    public String artist() {\n        return resolve(\"bossa_nova.artists\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BossaNova.java", "class_name": "BossaNova", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BossaNova.java.BossaNova", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BossaNova.java.BossaNova.[String]song()", "name": "song", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String song()", "original_string": "    public String song() {\n        return resolve(\"bossa_nova.songs\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BossaNova.java", "class_name": "BossaNova", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BossaNova.java.BossaNova", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SouthPark.java.SouthPark.[]SouthPark(EntertainmentProviders)", "name": "SouthPark", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected SouthPark(EntertainmentProviders faker)", "original_string": "    protected SouthPark(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SouthPark.java", "class_name": "SouthPark", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SouthPark.java.SouthPark", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SouthPark.java.SouthPark.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"south_park.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SouthPark.java", "class_name": "SouthPark", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SouthPark.java.SouthPark", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SouthPark.java.SouthPark.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"south_park.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SouthPark.java", "class_name": "SouthPark", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SouthPark.java.SouthPark", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Kaamelott.java.Kaamelott.[]Kaamelott(EntertainmentProviders)", "name": "Kaamelott", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Kaamelott(EntertainmentProviders faker)", "original_string": "    protected Kaamelott(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Kaamelott.java", "class_name": "Kaamelott", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Kaamelott.java.Kaamelott", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Kaamelott.java.Kaamelott.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"kaamelott.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Kaamelott.java", "class_name": "Kaamelott", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Kaamelott.java.Kaamelott", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Kaamelott.java.Kaamelott.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"kaamelott.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Kaamelott.java", "class_name": "Kaamelott", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Kaamelott.java.Kaamelott", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama.[]Futurama(EntertainmentProviders)", "name": "Futurama", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Futurama(EntertainmentProviders faker)", "original_string": "    protected Futurama(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Futurama.java", "class_name": "Futurama", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"futurama.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Futurama.java", "class_name": "Futurama", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"futurama.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Futurama.java", "class_name": "Futurama", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"futurama.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Futurama.java", "class_name": "Futurama", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama.[String]hermesCatchPhrase()", "name": "hermesCatchPhrase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String hermesCatchPhrase()", "original_string": "    public String hermesCatchPhrase() {\n        return resolve(\"futurama.hermes_catchphrases\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Futurama.java", "class_name": "Futurama", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Futurama.java.Futurama", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/AquaTeenHungerForce.java.AquaTeenHungerForce.[]AquaTeenHungerForce(EntertainmentProviders)", "name": "AquaTeenHungerForce", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected AquaTeenHungerForce(EntertainmentProviders faker)", "original_string": "    protected AquaTeenHungerForce(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/AquaTeenHungerForce.java", "class_name": "AquaTeenHungerForce", "class_uri": "src/main/java/net/datafaker/providers/entertainment/AquaTeenHungerForce.java.AquaTeenHungerForce", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/AquaTeenHungerForce.java.AquaTeenHungerForce.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"aqua_teen_hunger_force.character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/AquaTeenHungerForce.java", "class_name": "AquaTeenHungerForce", "class_uri": "src/main/java/net/datafaker/providers/entertainment/AquaTeenHungerForce.java.AquaTeenHungerForce", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java.BojackHorseman.[]BojackHorseman(EntertainmentProviders)", "name": "BojackHorseman", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected BojackHorseman(EntertainmentProviders faker)", "original_string": "    protected BojackHorseman(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java", "class_name": "BojackHorseman", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java.BojackHorseman", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a constructor for BojackHorseman.\n\n@param faker The Faker instance for generating random parts in BojackHorseman.\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java.BojackHorseman.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"bojack_horseman.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java", "class_name": "BojackHorseman", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java.BojackHorseman", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random character's name in BojackHorseman.\n\n@return Characters in BojackHorseman\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java.BojackHorseman.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"bojack_horseman.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java", "class_name": "BojackHorseman", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java.BojackHorseman", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random quotes in BojackHorseman.\n\n@return Quotes in BojackHorseman\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java.BojackHorseman.[String]tongueTwisters()", "name": "tongueTwisters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String tongueTwisters()", "original_string": "    public String tongueTwisters() {\n        return resolve(\"bojack_horseman.tongue_twisters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java", "class_name": "BojackHorseman", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BojackHorseman.java.BojackHorseman", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate random tongue twisters in BojackHorseman.\n\n@return Tongue twisters in BojackHorseman\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java.DetectiveConan.[]DetectiveConan(EntertainmentProviders)", "name": "DetectiveConan", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected DetectiveConan(EntertainmentProviders faker)", "original_string": "    protected DetectiveConan(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java", "class_name": "DetectiveConan", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java.DetectiveConan", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java.DetectiveConan.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"detective_conan.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java", "class_name": "DetectiveConan", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java.DetectiveConan", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java.DetectiveConan.[String]gadgets()", "name": "gadgets", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String gadgets()", "original_string": "    public String gadgets() {\n        return resolve(\"detective_conan.gadgets\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java", "class_name": "DetectiveConan", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java.DetectiveConan", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java.DetectiveConan.[String]vehicles()", "name": "vehicles", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String vehicles()", "original_string": "    public String vehicles() {\n        return resolve(\"detective_conan.vehicles\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java", "class_name": "DetectiveConan", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DetectiveConan.java.DetectiveConan", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BreakingBad.java.BreakingBad.[]BreakingBad(EntertainmentProviders)", "name": "BreakingBad", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected BreakingBad(EntertainmentProviders faker)", "original_string": "    protected BreakingBad(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BreakingBad.java", "class_name": "BreakingBad", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BreakingBad.java.BreakingBad", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BreakingBad.java.BreakingBad.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"breaking_bad.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BreakingBad.java", "class_name": "BreakingBad", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BreakingBad.java.BreakingBad", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BreakingBad.java.BreakingBad.[String]episode()", "name": "episode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String episode()", "original_string": "    public String episode() {\n        return resolve(\"breaking_bad.episodes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BreakingBad.java", "class_name": "BreakingBad", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BreakingBad.java.BreakingBad", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker.[]EntertainmentFaker()", "name": "EntertainmentFaker", "arg_nums": 0, "params": [], "return_type": "", "signature": "public EntertainmentFaker()", "original_string": "    public EntertainmentFaker() {\n        super();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java", "class_name": "EntertainmentFaker", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker.[]EntertainmentFaker(Locale)", "name": "EntertainmentFaker", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "", "signature": "public EntertainmentFaker(Locale locale)", "original_string": "    public EntertainmentFaker(Locale locale) {\n        super(locale);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java", "class_name": "EntertainmentFaker", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker.[]EntertainmentFaker(Random)", "name": "EntertainmentFaker", "arg_nums": 1, "params": [{"name": "random", "type": "Random"}], "return_type": "", "signature": "public EntertainmentFaker(Random random)", "original_string": "    public EntertainmentFaker(Random random) {\n        super(random);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java", "class_name": "EntertainmentFaker", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker.[]EntertainmentFaker(Locale,Random)", "name": "EntertainmentFaker", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "random", "type": "Random"}], "return_type": "", "signature": "public EntertainmentFaker(Locale locale, Random random)", "original_string": "    public EntertainmentFaker(Locale locale, Random random) {\n        super(locale, random);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java", "class_name": "EntertainmentFaker", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker.[]EntertainmentFaker(Locale,RandomService)", "name": "EntertainmentFaker", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "randomService", "type": "RandomService"}], "return_type": "", "signature": "public EntertainmentFaker(Locale locale, RandomService randomService)", "original_string": "    public EntertainmentFaker(Locale locale, RandomService randomService) {\n        super(locale, randomService);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java", "class_name": "EntertainmentFaker", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker.[]EntertainmentFaker(FakeValuesService,FakerContext)", "name": "EntertainmentFaker", "arg_nums": 2, "params": [{"name": "fakeValuesService", "type": "FakeValuesService"}, {"name": "context", "type": "FakerContext"}], "return_type": "", "signature": "public EntertainmentFaker(FakeValuesService fakeValuesService, FakerContext context)", "original_string": "    public EntertainmentFaker(FakeValuesService fakeValuesService, FakerContext context) {\n        super(fakeValuesService, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java", "class_name": "EntertainmentFaker", "class_uri": "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java.HowToTrainYourDragon.[]HowToTrainYourDragon(EntertainmentProviders)", "name": "HowToTrainYourDragon", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected HowToTrainYourDragon(EntertainmentProviders faker)", "original_string": "    protected HowToTrainYourDragon(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java", "class_name": "HowToTrainYourDragon", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java.HowToTrainYourDragon", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java.HowToTrainYourDragon.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"how_to_train_your_dragon.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java", "class_name": "HowToTrainYourDragon", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java.HowToTrainYourDragon", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java.HowToTrainYourDragon.[String]dragons()", "name": "dragons", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String dragons()", "original_string": "    public String dragons() {\n        return resolve(\"how_to_train_your_dragon.dragons\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java", "class_name": "HowToTrainYourDragon", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java.HowToTrainYourDragon", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java.HowToTrainYourDragon.[String]locations()", "name": "locations", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String locations()", "original_string": "    public String locations() {\n        return resolve(\"how_to_train_your_dragon.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java", "class_name": "HowToTrainYourDragon", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HowToTrainYourDragon.java.HowToTrainYourDragon", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto.[]Naruto(EntertainmentProviders)", "name": "Naruto", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Naruto(EntertainmentProviders faker)", "original_string": "    protected Naruto(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Naruto.java", "class_name": "Naruto", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"naruto.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Naruto.java", "class_name": "Naruto", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto.[String]village()", "name": "village", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String village()", "original_string": "    public String village() {\n        return resolve(\"naruto.villages\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Naruto.java", "class_name": "Naruto", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto.[String]eye()", "name": "eye", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String eye()", "original_string": "    public String eye() {\n        return resolve(\"naruto.eyes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Naruto.java", "class_name": "Naruto", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto.[String]demon()", "name": "demon", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String demon()", "original_string": "    public String demon() {\n        return resolve(\"naruto.demons\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Naruto.java", "class_name": "Naruto", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Naruto.java.Naruto", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Friends.java.Friends.[]Friends(EntertainmentProviders)", "name": "Friends", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Friends(EntertainmentProviders faker)", "original_string": "    protected Friends(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Friends.java", "class_name": "Friends", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Friends.java.Friends", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Friends.java.Friends.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"friends.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Friends.java", "class_name": "Friends", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Friends.java.Friends", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Friends.java.Friends.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"friends.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Friends.java", "class_name": "Friends", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Friends.java.Friends", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Friends.java.Friends.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"friends.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Friends.java", "class_name": "Friends", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Friends.java.Friends", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java.RickAndMorty.[]RickAndMorty(EntertainmentProviders)", "name": "RickAndMorty", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected RickAndMorty(final EntertainmentProviders faker)", "original_string": "    protected RickAndMorty(final EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java", "class_name": "RickAndMorty", "class_uri": "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java.RickAndMorty", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java.RickAndMorty.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"rick_and_morty.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java", "class_name": "RickAndMorty", "class_uri": "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java.RickAndMorty", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java.RickAndMorty.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"rick_and_morty.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java", "class_name": "RickAndMorty", "class_uri": "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java.RickAndMorty", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java.RickAndMorty.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"rick_and_morty.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java", "class_name": "RickAndMorty", "class_uri": "src/main/java/net/datafaker/providers/entertainment/RickAndMorty.java.RickAndMorty", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter.[]HarryPotter(EntertainmentProviders)", "name": "HarryPotter", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected HarryPotter(final EntertainmentProviders faker)", "original_string": "    protected HarryPotter(final EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java", "class_name": "HarryPotter", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"harry_potter.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java", "class_name": "HarryPotter", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"harry_potter.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java", "class_name": "HarryPotter", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"harry_potter.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java", "class_name": "HarryPotter", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter.[String]book()", "name": "book", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String book()", "original_string": "    public String book() {\n        return resolve(\"harry_potter.books\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java", "class_name": "HarryPotter", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter.[String]house()", "name": "house", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String house()", "original_string": "    public String house() {\n        return resolve(\"harry_potter.houses\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java", "class_name": "HarryPotter", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter.[String]spell()", "name": "spell", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String spell()", "original_string": "    public String spell() {\n        return resolve(\"harry_potter.spells\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java", "class_name": "HarryPotter", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HarryPotter.java.HarryPotter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit.[]Hobbit(EntertainmentProviders)", "name": "Hobbit", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Hobbit(EntertainmentProviders faker)", "original_string": "    protected Hobbit(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java", "class_name": "Hobbit", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"hobbit.character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java", "class_name": "Hobbit", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit.[String]thorinsCompany()", "name": "thorinsCompany", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String thorinsCompany()", "original_string": "    public String thorinsCompany() {\n        return resolve(\"hobbit.thorins_company\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java", "class_name": "Hobbit", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"hobbit.quote\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java", "class_name": "Hobbit", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"hobbit.location\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java", "class_name": "Hobbit", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Hobbit.java.Hobbit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java.VForVendetta.[]VForVendetta(EntertainmentProviders)", "name": "VForVendetta", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected VForVendetta(EntertainmentProviders faker)", "original_string": "    protected VForVendetta(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java", "class_name": "VForVendetta", "class_uri": "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java.VForVendetta", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java.VForVendetta.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"v_for_vendetta.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java", "class_name": "VForVendetta", "class_uri": "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java.VForVendetta", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java.VForVendetta.[String]speeches()", "name": "speeches", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String speeches()", "original_string": "    public String speeches() {\n        return resolve(\"v_for_vendetta.speeches\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java", "class_name": "VForVendetta", "class_uri": "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java.VForVendetta", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java.VForVendetta.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"v_for_vendetta.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java", "class_name": "VForVendetta", "class_uri": "src/main/java/net/datafaker/providers/entertainment/VForVendetta.java.VForVendetta", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java.Seinfeld.[]Seinfeld(EntertainmentProviders)", "name": "Seinfeld", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Seinfeld(EntertainmentProviders faker)", "original_string": "    protected Seinfeld(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java", "class_name": "Seinfeld", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java.Seinfeld", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java.Seinfeld.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"seinfeld.character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java", "class_name": "Seinfeld", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java.Seinfeld", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java.Seinfeld.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"seinfeld.quote\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java", "class_name": "Seinfeld", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java.Seinfeld", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java.Seinfeld.[String]business()", "name": "business", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String business()", "original_string": "    public String business() {\n        return resolve(\"seinfeld.business\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java", "class_name": "Seinfeld", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Seinfeld.java.Seinfeld", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy.[]Buffy(EntertainmentProviders)", "name": "Buffy", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Buffy(EntertainmentProviders faker)", "original_string": "    protected Buffy(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Buffy.java", "class_name": "Buffy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"buffy.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Buffy.java", "class_name": "Buffy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"buffy.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Buffy.java", "class_name": "Buffy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy.[String]celebrities()", "name": "celebrities", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String celebrities()", "original_string": "    public String celebrities() {\n        return resolve(\"buffy.celebrities\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Buffy.java", "class_name": "Buffy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy.[String]bigBads()", "name": "bigBads", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String bigBads()", "original_string": "    public String bigBads() {\n        return resolve(\"buffy.big_bads\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Buffy.java", "class_name": "Buffy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy.[String]episodes()", "name": "episodes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String episodes()", "original_string": "    public String episodes() {\n        return resolve(\"buffy.episodes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Buffy.java", "class_name": "Buffy", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Buffy.java.Buffy", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom.[]TheRoom(EntertainmentProviders)", "name": "TheRoom", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected TheRoom(EntertainmentProviders faker)", "original_string": "    protected TheRoom(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java", "class_name": "TheRoom", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom.[String]actors()", "name": "actors", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String actors()", "original_string": "    public String actors() {\n        return resolve(\"the_room.actors\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java", "class_name": "TheRoom", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"the_room.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java", "class_name": "TheRoom", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom.[String]locations()", "name": "locations", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String locations()", "original_string": "    public String locations() {\n        return resolve(\"the_room.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java", "class_name": "TheRoom", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"the_room.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java", "class_name": "TheRoom", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheRoom.java.TheRoom", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java.TwinPeaks.[]TwinPeaks(EntertainmentProviders)", "name": "TwinPeaks", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected TwinPeaks(final EntertainmentProviders faker)", "original_string": "    protected TwinPeaks(final EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java", "class_name": "TwinPeaks", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java.TwinPeaks", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java.TwinPeaks.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"twin_peaks.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java", "class_name": "TwinPeaks", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java.TwinPeaks", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java.TwinPeaks.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"twin_peaks.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java", "class_name": "TwinPeaks", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java.TwinPeaks", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java.TwinPeaks.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"twin_peaks.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java", "class_name": "TwinPeaks", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TwinPeaks.java.TwinPeaks", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/PrincessBride.java.PrincessBride.[]PrincessBride(EntertainmentProviders)", "name": "PrincessBride", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected PrincessBride(EntertainmentProviders faker)", "original_string": "    protected PrincessBride(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/PrincessBride.java", "class_name": "PrincessBride", "class_uri": "src/main/java/net/datafaker/providers/entertainment/PrincessBride.java.PrincessBride", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/PrincessBride.java.PrincessBride.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"princess_bride.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/PrincessBride.java", "class_name": "PrincessBride", "class_uri": "src/main/java/net/datafaker/providers/entertainment/PrincessBride.java.PrincessBride", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/PrincessBride.java.PrincessBride.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"princess_bride.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/PrincessBride.java", "class_name": "PrincessBride", "class_uri": "src/main/java/net/datafaker/providers/entertainment/PrincessBride.java.PrincessBride", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/ChuckNorris.java.ChuckNorris.[]ChuckNorris(EntertainmentProviders)", "name": "ChuckNorris", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected ChuckNorris(EntertainmentProviders faker)", "original_string": "    protected ChuckNorris(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/ChuckNorris.java", "class_name": "ChuckNorris", "class_uri": "src/main/java/net/datafaker/providers/entertainment/ChuckNorris.java.ChuckNorris", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/ChuckNorris.java.ChuckNorris.[String]fact()", "name": "fact", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String fact()", "original_string": "    public String fact() {\n        return resolve(\"chuck_norris.fact\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/ChuckNorris.java", "class_name": "ChuckNorris", "class_uri": "src/main/java/net/datafaker/providers/entertainment/ChuckNorris.java.ChuckNorris", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[]OscarMovie(EntertainmentProviders)", "name": "OscarMovie", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected OscarMovie(final EntertainmentProviders faker)", "original_string": "    protected OscarMovie(final EntertainmentProviders faker) {\n        super(faker);\n        this.year = () -> this.faker.resolve(\"oscar_movie.year.years\");\n        this.choice = () -> this.faker.resolve(\"oscar_movie.year.choice\");\n        this.str = () -> \"oscar_movie.\" + year.get() + \".\" + choice.get();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java", "class_name": "OscarMovie", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nThis is the constructor initialize faker and two other\nvariable for random generation.\n\n@param faker faker The Faker instance for generating random names of things.\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[String]getYear()", "name": "getYear", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getYear()", "original_string": "    public String getYear() {\n        return year.get();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java", "class_name": "OscarMovie", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return year\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[String]getChoice()", "name": "getChoice", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getChoice()", "original_string": "    public String getChoice() {\n        return choice.get();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java", "class_name": "OscarMovie", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return choice\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[String]actor()", "name": "actor", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String actor()", "original_string": "    public String actor() {\n        return resolve(str.get() + \".actor\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java", "class_name": "OscarMovie", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates random actor\n\n@return random actor\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[String]movieName()", "name": "movieName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String movieName()", "original_string": "    public String movieName() {\n        return resolve(str.get() + \".movieName\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java", "class_name": "OscarMovie", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random movie name\n\n@return random movieName\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(str.get() + \".quote\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java", "class_name": "OscarMovie", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random quote\n\n@return random quote\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(str.get() + \".character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java", "class_name": "OscarMovie", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random character\n\n@return random character\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie.[String]releaseDate()", "name": "releaseDate", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String releaseDate()", "original_string": "    public String releaseDate() {\n        return resolve(str.get() + \".releaseDate\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java", "class_name": "OscarMovie", "class_uri": "src/main/java/net/datafaker/providers/entertainment/OscarMovie.java.OscarMovie", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random release date\n\n@return random releaseDate\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[]Dune(EntertainmentProviders)", "name": "Dune", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Dune(EntertainmentProviders faker)", "original_string": "    protected Dune(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Dune.java", "class_name": "Dune", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"dune.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Dune.java", "class_name": "Dune", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[String]title()", "name": "title", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String title()", "original_string": "    public String title() {\n        return resolve(\"dune.titles\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Dune.java", "class_name": "Dune", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[String]planet()", "name": "planet", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String planet()", "original_string": "    public String planet() {\n        return resolve(\"dune.planets\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Dune.java", "class_name": "Dune", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return quote(faker.options().option(Dune.Quote.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Dune.java", "class_name": "Dune", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[String]quote(Quote)", "name": "quote", "arg_nums": 1, "params": [{"name": "quote", "type": "Quote"}], "return_type": "String", "signature": "public String quote(Quote quote)", "original_string": "    public String quote(Quote quote) {\n        return resolve(\"dune.quotes.\" + quote.yamlKey);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Dune.java", "class_name": "Dune", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[String]saying()", "name": "saying", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String saying()", "original_string": "    public String saying() {\n        return saying(faker.options().option(Dune.Saying.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Dune.java", "class_name": "Dune", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune.[String]saying(Saying)", "name": "saying", "arg_nums": 1, "params": [{"name": "saying", "type": "Saying"}], "return_type": "String", "signature": "public String saying(Saying saying)", "original_string": "    public String saying(Saying saying) {\n        return resolve(\"dune.sayings.\" + saying.yamlKey);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Dune.java", "class_name": "Dune", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Dune.java.Dune", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Babylon5.java.Babylon5.[]Babylon5(EntertainmentProviders)", "name": "Babylon5", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Babylon5(EntertainmentProviders faker)", "original_string": "    protected Babylon5(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Babylon5.java", "class_name": "Babylon5", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Babylon5.java.Babylon5", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Babylon5.java.Babylon5.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"babylon5.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Babylon5.java", "class_name": "Babylon5", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Babylon5.java.Babylon5", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Babylon5.java.Babylon5.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"babylon5.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Babylon5.java", "class_name": "Babylon5", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Babylon5.java.Babylon5", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother.[]HowIMetYourMother(EntertainmentProviders)", "name": "HowIMetYourMother", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected HowIMetYourMother(EntertainmentProviders faker)", "original_string": "    protected HowIMetYourMother(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java", "class_name": "HowIMetYourMother", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"how_i_met_your_mother.character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java", "class_name": "HowIMetYourMother", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother.[String]catchPhrase()", "name": "catchPhrase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String catchPhrase()", "original_string": "    public String catchPhrase() {\n        return resolve(\"how_i_met_your_mother.catch_phrase\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java", "class_name": "HowIMetYourMother", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother.[String]highFive()", "name": "highFive", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String highFive()", "original_string": "    public String highFive() {\n        return resolve(\"how_i_met_your_mother.high_five\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java", "class_name": "HowIMetYourMother", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"how_i_met_your_mother.quote\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java", "class_name": "HowIMetYourMother", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HowIMetYourMother.java.HowIMetYourMother", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Supernatural.java.Supernatural.[]Supernatural(EntertainmentProviders)", "name": "Supernatural", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Supernatural(EntertainmentProviders faker)", "original_string": "    protected Supernatural(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Supernatural.java", "class_name": "Supernatural", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Supernatural.java.Supernatural", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Supernatural.java.Supernatural.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"supernatural.character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Supernatural.java", "class_name": "Supernatural", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Supernatural.java.Supernatural", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Supernatural.java.Supernatural.[String]creature()", "name": "creature", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String creature()", "original_string": "    public String creature() {\n        return resolve(\"supernatural.creature\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Supernatural.java", "class_name": "Supernatural", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Supernatural.java.Supernatural", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Supernatural.java.Supernatural.[String]weapon()", "name": "weapon", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String weapon()", "original_string": "    public String weapon() {\n        return resolve(\"supernatural.weapon\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Supernatural.java", "class_name": "Supernatural", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Supernatural.java.Supernatural", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[]StarWars(EntertainmentProviders)", "name": "StarWars", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected StarWars(EntertainmentProviders faker)", "original_string": "    protected StarWars(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarWars.java", "class_name": "StarWars", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"star_wars.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarWars.java", "class_name": "StarWars", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]callSign()", "name": "callSign", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String callSign()", "original_string": "    public String callSign() {\n        return faker.numerify(resolve(\"star_wars.call_sign\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarWars.java", "class_name": "StarWars", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"star_wars.quotes.\" + getFaker().options().option(CHARACTERS));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarWars.java", "class_name": "StarWars", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]vehicles()", "name": "vehicles", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String vehicles()", "original_string": "    public String vehicles() {\n        return resolve(\"star_wars.vehicles\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarWars.java", "class_name": "StarWars", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]droids()", "name": "droids", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String droids()", "original_string": "    public String droids() {\n        return resolve(\"star_wars.droids\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarWars.java", "class_name": "StarWars", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]planets()", "name": "planets", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String planets()", "original_string": "    public String planets() {\n        return resolve(\"star_wars.planets\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarWars.java", "class_name": "StarWars", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]species()", "name": "species", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String species()", "original_string": "    public String species() {\n        return resolve(\"star_wars.species\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarWars.java", "class_name": "StarWars", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]wookieWords()", "name": "wookieWords", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String wookieWords()", "original_string": "    public String wookieWords() {\n        return resolve(\"star_wars.wookiee_words\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarWars.java", "class_name": "StarWars", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars.[String]alternateCharacterSpelling()", "name": "alternateCharacterSpelling", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String alternateCharacterSpelling()", "original_string": "    public String alternateCharacterSpelling() {\n        return resolve(\"star_wars.alternate_character_spellings.\" + getFaker().options().option(CHARACTERS));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/StarWars.java", "class_name": "StarWars", "class_uri": "src/main/java/net/datafaker/providers/entertainment/StarWars.java.StarWars", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Departed.java.Departed.[]Departed(EntertainmentProviders)", "name": "Departed", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Departed(EntertainmentProviders faker)", "original_string": "    protected Departed(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Departed.java", "class_name": "Departed", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Departed.java.Departed", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Departed.java.Departed.[String]actor()", "name": "actor", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String actor()", "original_string": "    public String actor() {\n        return resolve(\"departed.actors\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Departed.java", "class_name": "Departed", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Departed.java.Departed", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random actor's name from The Departed.\n\n@return a string of actor's name from The Departed.\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Departed.java.Departed.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"departed.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Departed.java", "class_name": "Departed", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Departed.java.Departed", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random character's name from The Departed.\n\n@return a string of character's name from The Departed.\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Departed.java.Departed.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"departed.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Departed.java", "class_name": "Departed", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Departed.java.Departed", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random quote from The Departed.\n\n@return a string of quote from The Departed.\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Doraemon.java.Doraemon.[]Doraemon(EntertainmentProviders)", "name": "Doraemon", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Doraemon(EntertainmentProviders faker)", "original_string": "    protected Doraemon(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Doraemon.java", "class_name": "Doraemon", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Doraemon.java.Doraemon", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Doraemon.java.Doraemon.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"doraemon.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Doraemon.java", "class_name": "Doraemon", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Doraemon.java.Doraemon", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Doraemon.java.Doraemon.[String]gadget()", "name": "gadget", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String gadget()", "original_string": "    public String gadget() {\n        return resolve(\"doraemon.gadgets\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Doraemon.java", "class_name": "Doraemon", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Doraemon.java.Doraemon", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Doraemon.java.Doraemon.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"doraemon.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Doraemon.java", "class_name": "Doraemon", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Doraemon.java.Doraemon", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon.[]Pokemon(EntertainmentProviders)", "name": "Pokemon", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Pokemon(EntertainmentProviders faker)", "original_string": "    protected Pokemon(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java", "class_name": "Pokemon", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"games.pokemon.names\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java", "class_name": "Pokemon", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"games.pokemon.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java", "class_name": "Pokemon", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon.[String]move()", "name": "move", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String move()", "original_string": "    public String move() {\n        return resolve(\"games.pokemon.moves\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java", "class_name": "Pokemon", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon.[String]type()", "name": "type", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String type()", "original_string": "    public String type() {\n        return resolve(\"games.pokemon.types\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java", "class_name": "Pokemon", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Pokemon.java.Pokemon", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[]SiliconValley(EntertainmentProviders)", "name": "SiliconValley", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected SiliconValley(EntertainmentProviders faker)", "original_string": "    protected SiliconValley(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java", "class_name": "SiliconValley", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return faker.resolve(\"silicon_valley.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java", "class_name": "SiliconValley", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]company()", "name": "company", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String company()", "original_string": "    public String company() {\n        return faker.resolve(\"silicon_valley.companies\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java", "class_name": "SiliconValley", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return faker.resolve(\"silicon_valley.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java", "class_name": "SiliconValley", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]app()", "name": "app", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String app()", "original_string": "    public String app() {\n        return faker.resolve(\"silicon_valley.apps\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java", "class_name": "SiliconValley", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]invention()", "name": "invention", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String invention()", "original_string": "    public String invention() {\n        return faker.resolve(\"silicon_valley.inventions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java", "class_name": "SiliconValley", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]motto()", "name": "motto", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String motto()", "original_string": "    public String motto() {\n        return faker.resolve(\"silicon_valley.mottos\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java", "class_name": "SiliconValley", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]url()", "name": "url", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String url()", "original_string": "    public String url() {\n        return faker.resolve(\"silicon_valley.urls\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java", "class_name": "SiliconValley", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley.[String]email()", "name": "email", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String email()", "original_string": "    public String email() {\n        return faker.resolve(\"silicon_valley.email\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java", "class_name": "SiliconValley", "class_uri": "src/main/java/net/datafaker/providers/entertainment/SiliconValley.java.SiliconValley", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros.[]TheVentureBros(EntertainmentProviders)", "name": "TheVentureBros", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected TheVentureBros(EntertainmentProviders faker)", "original_string": "    protected TheVentureBros(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java", "class_name": "TheVentureBros", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"the_venture_bros.character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java", "class_name": "TheVentureBros", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros.[String]organization()", "name": "organization", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String organization()", "original_string": "    public String organization() {\n        return resolve(\"the_venture_bros.organization\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java", "class_name": "TheVentureBros", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros.[String]vehicle()", "name": "vehicle", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String vehicle()", "original_string": "    public String vehicle() {\n        return resolve(\"the_venture_bros.vehicle\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java", "class_name": "TheVentureBros", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"the_venture_bros.quote\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java", "class_name": "TheVentureBros", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheVentureBros.java.TheVentureBros", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java.LordOfTheRings.[]LordOfTheRings(EntertainmentProviders)", "name": "LordOfTheRings", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected LordOfTheRings(final EntertainmentProviders faker)", "original_string": "    protected LordOfTheRings(final EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java", "class_name": "LordOfTheRings", "class_uri": "src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java.LordOfTheRings", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java.LordOfTheRings.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"lord_of_the_rings.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java", "class_name": "LordOfTheRings", "class_uri": "src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java.LordOfTheRings", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java.LordOfTheRings.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"lord_of_the_rings.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java", "class_name": "LordOfTheRings", "class_uri": "src/main/java/net/datafaker/providers/entertainment/LordOfTheRings.java.LordOfTheRings", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java.BackToTheFuture.[]BackToTheFuture(EntertainmentProviders)", "name": "BackToTheFuture", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected BackToTheFuture(EntertainmentProviders faker)", "original_string": "    protected BackToTheFuture(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java", "class_name": "BackToTheFuture", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java.BackToTheFuture", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java.BackToTheFuture.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"back_to_the_future.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java", "class_name": "BackToTheFuture", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java.BackToTheFuture", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java.BackToTheFuture.[String]date()", "name": "date", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String date()", "original_string": "    public String date() {\n        return resolve(\"back_to_the_future.dates\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java", "class_name": "BackToTheFuture", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java.BackToTheFuture", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java.BackToTheFuture.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"back_to_the_future.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java", "class_name": "BackToTheFuture", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BackToTheFuture.java.BackToTheFuture", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java.BigBangTheory.[]BigBangTheory(EntertainmentProviders)", "name": "BigBangTheory", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected BigBangTheory(EntertainmentProviders faker)", "original_string": "    protected BigBangTheory(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java", "class_name": "BigBangTheory", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java.BigBangTheory", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java.BigBangTheory.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"big_bang_theory.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java", "class_name": "BigBangTheory", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java.BigBangTheory", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random Big Bang Theory's character's name.\n\n@return a string of Big Bang Theory's character's name.\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java.BigBangTheory.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"big_bang_theory.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java", "class_name": "BigBangTheory", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BigBangTheory.java.BigBangTheory", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random Big Bang Theory's character's quote.\n\n@return a string of Big Bang Theory's character's quote.\n"}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd.[]TheItCrowd(EntertainmentProviders)", "name": "TheItCrowd", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected TheItCrowd(EntertainmentProviders faker)", "original_string": "    protected TheItCrowd(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java", "class_name": "TheItCrowd", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd.[String]actors()", "name": "actors", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String actors()", "original_string": "    public String actors() {\n        return resolve(\"the_it_crowd.actors\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java", "class_name": "TheItCrowd", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"the_it_crowd.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java", "class_name": "TheItCrowd", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd.[String]emails()", "name": "emails", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String emails()", "original_string": "    public String emails() {\n        return resolve(\"the_it_crowd.emails\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java", "class_name": "TheItCrowd", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"the_it_crowd.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java", "class_name": "TheItCrowd", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheItCrowd.java.TheItCrowd", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java.MoneyHeist.[]MoneyHeist(EntertainmentProviders)", "name": "MoneyHeist", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected MoneyHeist(EntertainmentProviders faker)", "original_string": "    protected MoneyHeist(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java", "class_name": "MoneyHeist", "class_uri": "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java.MoneyHeist", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java.MoneyHeist.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"money_heist.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java", "class_name": "MoneyHeist", "class_uri": "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java.MoneyHeist", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java.MoneyHeist.[String]heist()", "name": "heist", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String heist()", "original_string": "    public String heist() {\n        return resolve(\"money_heist.heists\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java", "class_name": "MoneyHeist", "class_uri": "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java.MoneyHeist", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java.MoneyHeist.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"money_heist.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java", "class_name": "MoneyHeist", "class_uri": "src/main/java/net/datafaker/providers/entertainment/MoneyHeist.java.MoneyHeist", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Show.java.Show.[]Show(EntertainmentProviders)", "name": "Show", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Show(EntertainmentProviders faker)", "original_string": "    protected Show(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Show.java", "class_name": "Show", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Show.java.Show", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Show.java.Show.[String]adultMusical()", "name": "adultMusical", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String adultMusical()", "original_string": "    public String adultMusical() {\n        return resolve(\"show.adult_musical\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Show.java", "class_name": "Show", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Show.java.Show", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Show.java.Show.[String]play()", "name": "play", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String play()", "original_string": "    public String play() {\n        return resolve(\"show.play\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Show.java", "class_name": "Show", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Show.java.Show", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Show.java.Show.[String]kidsMusical()", "name": "kidsMusical", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String kidsMusical()", "original_string": "    public String kidsMusical() {\n        return resolve(\"show.kids_musical\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Show.java", "class_name": "Show", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Show.java.Show", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java.FreshPrinceOfBelAir.[]FreshPrinceOfBelAir(EntertainmentProviders)", "name": "FreshPrinceOfBelAir", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected FreshPrinceOfBelAir(EntertainmentProviders faker)", "original_string": "    protected FreshPrinceOfBelAir(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java", "class_name": "FreshPrinceOfBelAir", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java.FreshPrinceOfBelAir", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java.FreshPrinceOfBelAir.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"fresh_prince_of_bel_air.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java", "class_name": "FreshPrinceOfBelAir", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java.FreshPrinceOfBelAir", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java.FreshPrinceOfBelAir.[String]celebrities()", "name": "celebrities", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String celebrities()", "original_string": "    public String celebrities() {\n        return resolve(\"fresh_prince_of_bel_air.celebrities\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java", "class_name": "FreshPrinceOfBelAir", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java.FreshPrinceOfBelAir", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java.FreshPrinceOfBelAir.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"fresh_prince_of_bel_air.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java", "class_name": "FreshPrinceOfBelAir", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FreshPrinceOfBelAir.java.FreshPrinceOfBelAir", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java.FinalSpace.[]FinalSpace(EntertainmentProviders)", "name": "FinalSpace", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected FinalSpace(EntertainmentProviders faker)", "original_string": "    protected FinalSpace(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java", "class_name": "FinalSpace", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java.FinalSpace", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java.FinalSpace.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"final_space.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java", "class_name": "FinalSpace", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java.FinalSpace", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java.FinalSpace.[String]vehicle()", "name": "vehicle", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String vehicle()", "original_string": "    public String vehicle() {\n        return resolve(\"final_space.vehicles\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java", "class_name": "FinalSpace", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java.FinalSpace", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java.FinalSpace.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"final_space.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java", "class_name": "FinalSpace", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FinalSpace.java.FinalSpace", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java.TheThickOfIt.[]TheThickOfIt(EntertainmentProviders)", "name": "TheThickOfIt", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected TheThickOfIt(EntertainmentProviders faker)", "original_string": "    protected TheThickOfIt(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java", "class_name": "TheThickOfIt", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java.TheThickOfIt", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java.TheThickOfIt.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"the_thick_of_it.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java", "class_name": "TheThickOfIt", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java.TheThickOfIt", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java.TheThickOfIt.[String]positions()", "name": "positions", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String positions()", "original_string": "    public String positions() {\n        return resolve(\"the_thick_of_it.positions\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java", "class_name": "TheThickOfIt", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java.TheThickOfIt", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java.TheThickOfIt.[String]departments()", "name": "departments", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String departments()", "original_string": "    public String departments() {\n        return resolve(\"the_thick_of_it.departments\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java", "class_name": "TheThickOfIt", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheThickOfIt.java.TheThickOfIt", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java.HeyArnold.[]HeyArnold(EntertainmentProviders)", "name": "HeyArnold", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected HeyArnold(EntertainmentProviders faker)", "original_string": "    protected HeyArnold(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java", "class_name": "HeyArnold", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java.HeyArnold", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java.HeyArnold.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"hey_arnold.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java", "class_name": "HeyArnold", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java.HeyArnold", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java.HeyArnold.[String]locations()", "name": "locations", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String locations()", "original_string": "    public String locations() {\n        return resolve(\"hey_arnold.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java", "class_name": "HeyArnold", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java.HeyArnold", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java.HeyArnold.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"hey_arnold.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java", "class_name": "HeyArnold", "class_uri": "src/main/java/net/datafaker/providers/entertainment/HeyArnold.java.HeyArnold", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle.[]TheKingkillerChronicle(EntertainmentProviders)", "name": "TheKingkillerChronicle", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected TheKingkillerChronicle(EntertainmentProviders faker)", "original_string": "    protected TheKingkillerChronicle(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java", "class_name": "TheKingkillerChronicle", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle.[String]book()", "name": "book", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String book()", "original_string": "    public String book() {\n        return resolve(\"the_kingkiller_chronicle.books\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java", "class_name": "TheKingkillerChronicle", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"the_kingkiller_chronicle.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java", "class_name": "TheKingkillerChronicle", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle.[String]creature()", "name": "creature", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String creature()", "original_string": "    public String creature() {\n        return resolve(\"the_kingkiller_chronicle.creatures\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java", "class_name": "TheKingkillerChronicle", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"the_kingkiller_chronicle.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java", "class_name": "TheKingkillerChronicle", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheKingkillerChronicle.java.TheKingkillerChronicle", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Simpsons.java.Simpsons.[]Simpsons(EntertainmentProviders)", "name": "Simpsons", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "public Simpsons(EntertainmentProviders faker)", "original_string": "    public Simpsons(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Simpsons.java", "class_name": "Simpsons", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Simpsons.java.Simpsons", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Simpsons.java.Simpsons.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"simpsons.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Simpsons.java", "class_name": "Simpsons", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Simpsons.java.Simpsons", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Simpsons.java.Simpsons.[String]location()", "name": "location", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String location()", "original_string": "    public String location() {\n        return resolve(\"simpsons.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Simpsons.java", "class_name": "Simpsons", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Simpsons.java.Simpsons", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Simpsons.java.Simpsons.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"simpsons.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Simpsons.java", "class_name": "Simpsons", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Simpsons.java.Simpsons", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/GratefulDead.java.GratefulDead.[]GratefulDead(EntertainmentProviders)", "name": "GratefulDead", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected GratefulDead(EntertainmentProviders faker)", "original_string": "    protected GratefulDead(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/GratefulDead.java", "class_name": "GratefulDead", "class_uri": "src/main/java/net/datafaker/providers/entertainment/GratefulDead.java.GratefulDead", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/GratefulDead.java.GratefulDead.[String]players()", "name": "players", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String players()", "original_string": "    public String players() {\n        return resolve(\"grateful_dead.players\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/GratefulDead.java", "class_name": "GratefulDead", "class_uri": "src/main/java/net/datafaker/providers/entertainment/GratefulDead.java.GratefulDead", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/GratefulDead.java.GratefulDead.[String]songs()", "name": "songs", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String songs()", "original_string": "    public String songs() {\n        return resolve(\"grateful_dead.songs\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/GratefulDead.java", "class_name": "GratefulDead", "class_uri": "src/main/java/net/datafaker/providers/entertainment/GratefulDead.java.GratefulDead", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Lebowski.java.Lebowski.[]Lebowski(EntertainmentProviders)", "name": "Lebowski", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "public Lebowski(final EntertainmentProviders faker)", "original_string": "    public Lebowski(final EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Lebowski.java", "class_name": "Lebowski", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Lebowski.java.Lebowski", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Lebowski.java.Lebowski.[String]actor()", "name": "actor", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String actor()", "original_string": "    public String actor() {\n        return resolve(\"lebowski.actors\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Lebowski.java", "class_name": "Lebowski", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Lebowski.java.Lebowski", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Lebowski.java.Lebowski.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"lebowski.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Lebowski.java", "class_name": "Lebowski", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Lebowski.java.Lebowski", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Lebowski.java.Lebowski.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"lebowski.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Lebowski.java", "class_name": "Lebowski", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Lebowski.java.Lebowski", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse.[]TheExpanse(EntertainmentProviders)", "name": "TheExpanse", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected TheExpanse(EntertainmentProviders faker)", "original_string": "    protected TheExpanse(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java", "class_name": "TheExpanse", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"the_expanse.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java", "class_name": "TheExpanse", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse.[String]locations()", "name": "locations", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String locations()", "original_string": "    public String locations() {\n        return resolve(\"the_expanse.locations\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java", "class_name": "TheExpanse", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse.[String]ships()", "name": "ships", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ships()", "original_string": "    public String ships() {\n        return resolve(\"the_expanse.ships\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java", "class_name": "TheExpanse", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"the_expanse.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java", "class_name": "TheExpanse", "class_uri": "src/main/java/net/datafaker/providers/entertainment/TheExpanse.java.TheExpanse", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java.DumbAndDumber.[]DumbAndDumber(EntertainmentProviders)", "name": "DumbAndDumber", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected DumbAndDumber(EntertainmentProviders faker)", "original_string": "    protected DumbAndDumber(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java", "class_name": "DumbAndDumber", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java.DumbAndDumber", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java.DumbAndDumber.[String]actor()", "name": "actor", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String actor()", "original_string": "    public String actor() {\n        return resolve(\"dumb_and_dumber.actors\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java", "class_name": "DumbAndDumber", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java.DumbAndDumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java.DumbAndDumber.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"dumb_and_dumber.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java", "class_name": "DumbAndDumber", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java.DumbAndDumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java.DumbAndDumber.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"dumb_and_dumber.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java", "class_name": "DumbAndDumber", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DumbAndDumber.java.DumbAndDumber", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java.RuPaulDragRace.[]RuPaulDragRace(EntertainmentProviders)", "name": "RuPaulDragRace", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected RuPaulDragRace(EntertainmentProviders faker)", "original_string": "    protected RuPaulDragRace(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java", "class_name": "RuPaulDragRace", "class_uri": "src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java.RuPaulDragRace", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java.RuPaulDragRace.[String]queen()", "name": "queen", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String queen()", "original_string": "    public String queen() {\n        return resolve(\"rupaul.queens\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java", "class_name": "RuPaulDragRace", "class_uri": "src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java.RuPaulDragRace", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java.RuPaulDragRace.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"rupaul.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java", "class_name": "RuPaulDragRace", "class_uri": "src/main/java/net/datafaker/providers/entertainment/RuPaulDragRace.java.RuPaulDragRace", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/NewGirl.java.NewGirl.[]NewGirl(EntertainmentProviders)", "name": "NewGirl", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected NewGirl(EntertainmentProviders faker)", "original_string": "    protected NewGirl(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/NewGirl.java", "class_name": "NewGirl", "class_uri": "src/main/java/net/datafaker/providers/entertainment/NewGirl.java.NewGirl", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/NewGirl.java.NewGirl.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"new_girl.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/NewGirl.java", "class_name": "NewGirl", "class_uri": "src/main/java/net/datafaker/providers/entertainment/NewGirl.java.NewGirl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/NewGirl.java.NewGirl.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"new_girl.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/NewGirl.java", "class_name": "NewGirl", "class_uri": "src/main/java/net/datafaker/providers/entertainment/NewGirl.java.NewGirl", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Avatar.java.Avatar.[]Avatar(EntertainmentProviders)", "name": "Avatar", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Avatar(EntertainmentProviders faker)", "original_string": "    protected Avatar(EntertainmentProviders faker) {\n        super(faker);\n        this.baseUrl = \"https://robohash.org/\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Avatar.java", "class_name": "Avatar", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Avatar.java.Avatar", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Avatar.java.Avatar.[String]image()", "name": "image", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String image()", "original_string": "    public String image() {\n        return baseUrl + faker.regexify(\"[a-z]{8}\") + \".png\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Avatar.java", "class_name": "Avatar", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Avatar.java.Avatar", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Stargate.java.Stargate.[]Stargate(EntertainmentProviders)", "name": "Stargate", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Stargate(EntertainmentProviders faker)", "original_string": "    protected Stargate(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Stargate.java", "class_name": "Stargate", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Stargate.java.Stargate", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Stargate.java.Stargate.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"stargate.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Stargate.java", "class_name": "Stargate", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Stargate.java.Stargate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Stargate.java.Stargate.[String]planets()", "name": "planets", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String planets()", "original_string": "    public String planets() {\n        return resolve(\"stargate.planets\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Stargate.java", "class_name": "Stargate", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Stargate.java.Stargate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Stargate.java.Stargate.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"stargate.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Stargate.java", "class_name": "Stargate", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Stargate.java.Stargate", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Suits.java.Suits.[]Suits(EntertainmentProviders)", "name": "Suits", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected Suits(EntertainmentProviders faker)", "original_string": "    protected Suits(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Suits.java", "class_name": "Suits", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Suits.java.Suits", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Suits.java.Suits.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"suits.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Suits.java", "class_name": "Suits", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Suits.java.Suits", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/Suits.java.Suits.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"suits.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/Suits.java", "class_name": "Suits", "class_uri": "src/main/java/net/datafaker/providers/entertainment/Suits.java.Suits", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java.BrooklynNineNine.[]BrooklynNineNine(EntertainmentProviders)", "name": "BrooklynNineNine", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected BrooklynNineNine(EntertainmentProviders faker)", "original_string": "    protected BrooklynNineNine(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java", "class_name": "BrooklynNineNine", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java.BrooklynNineNine", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java.BrooklynNineNine.[String]characters()", "name": "characters", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String characters()", "original_string": "    public String characters() {\n        return resolve(\"brooklyn_nine_nine.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java", "class_name": "BrooklynNineNine", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java.BrooklynNineNine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java.BrooklynNineNine.[String]quotes()", "name": "quotes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quotes()", "original_string": "    public String quotes() {\n        return resolve(\"brooklyn_nine_nine.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java", "class_name": "BrooklynNineNine", "class_uri": "src/main/java/net/datafaker/providers/entertainment/BrooklynNineNine.java.BrooklynNineNine", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java.FullmetalAlchemist.[]FullmetalAlchemist(EntertainmentProviders)", "name": "FullmetalAlchemist", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected FullmetalAlchemist(EntertainmentProviders faker)", "original_string": "    protected FullmetalAlchemist(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java", "class_name": "FullmetalAlchemist", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java.FullmetalAlchemist", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java.FullmetalAlchemist.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"fma_brotherhood.characters\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java", "class_name": "FullmetalAlchemist", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java.FullmetalAlchemist", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java.FullmetalAlchemist.[String]city()", "name": "city", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String city()", "original_string": "    public String city() {\n        return resolve(\"fma_brotherhood.cities\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java", "class_name": "FullmetalAlchemist", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java.FullmetalAlchemist", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java.FullmetalAlchemist.[String]country()", "name": "country", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String country()", "original_string": "    public String country() {\n        return resolve(\"fma_brotherhood.countries\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java", "class_name": "FullmetalAlchemist", "class_uri": "src/main/java/net/datafaker/providers/entertainment/FullmetalAlchemist.java.FullmetalAlchemist", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[]DoctorWho(EntertainmentProviders)", "name": "DoctorWho", "arg_nums": 1, "params": [{"name": "faker", "type": "EntertainmentProviders"}], "return_type": "", "signature": "protected DoctorWho(EntertainmentProviders faker)", "original_string": "    protected DoctorWho(EntertainmentProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java", "class_name": "DoctorWho", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[String]character()", "name": "character", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String character()", "original_string": "    public String character() {\n        return resolve(\"dr_who.character\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java", "class_name": "DoctorWho", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[String]doctor()", "name": "doctor", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String doctor()", "original_string": "    public String doctor() {\n        return resolve(\"dr_who.the_doctors\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java", "class_name": "DoctorWho", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[String]actor()", "name": "actor", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String actor()", "original_string": "    public String actor() {\n        return resolve(\"dr_who.actors\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java", "class_name": "DoctorWho", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[String]catchPhrase()", "name": "catchPhrase", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String catchPhrase()", "original_string": "    public String catchPhrase() {\n        return resolve(\"dr_who.catch_phrases\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java", "class_name": "DoctorWho", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[String]quote()", "name": "quote", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String quote()", "original_string": "    public String quote() {\n        return resolve(\"dr_who.quotes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java", "class_name": "DoctorWho", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[String]villain()", "name": "villain", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String villain()", "original_string": "    public String villain() {\n        return resolve(\"dr_who.villains\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java", "class_name": "DoctorWho", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho.[String]species()", "name": "species", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String species()", "original_string": "    public String species() {\n        return resolve(\"dr_who.species\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java", "class_name": "DoctorWho", "class_uri": "src/main/java/net/datafaker/providers/entertainment/DoctorWho.java.DoctorWho", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders.[Beer]beer()", "name": "beer", "arg_nums": 0, "params": [], "return_type": "Beer", "signature": "default Beer beer()", "original_string": "    default Beer beer() {\n        return getProvider(Beer.class, Beer::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/FoodProviders.java", "class_name": "FoodProviders", "class_uri": "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Beer", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders.[Coffee]coffee()", "name": "coffee", "arg_nums": 0, "params": [], "return_type": "Coffee", "signature": "default Coffee coffee()", "original_string": "    default Coffee coffee() {\n        return getProvider(Coffee.class, Coffee::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/FoodProviders.java", "class_name": "FoodProviders", "class_uri": "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Coffee", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders.[Dessert]dessert()", "name": "dessert", "arg_nums": 0, "params": [], "return_type": "Dessert", "signature": "default Dessert dessert()", "original_string": "    default Dessert dessert() {\n        return getProvider(Dessert.class, Dessert::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/FoodProviders.java", "class_name": "FoodProviders", "class_uri": "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Dessert", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders.[Food]food()", "name": "food", "arg_nums": 0, "params": [], "return_type": "Food", "signature": "default Food food()", "original_string": "    default Food food() {\n        return getProvider(Food.class, Food::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/FoodProviders.java", "class_name": "FoodProviders", "class_uri": "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Food", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders.[Tea]tea()", "name": "tea", "arg_nums": 0, "params": [], "return_type": "Tea", "signature": "default Tea tea()", "original_string": "    default Tea tea() {\n        return getProvider(Tea.class, Tea::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/FoodProviders.java", "class_name": "FoodProviders", "class_uri": "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Tea", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[]Coffee(FoodProviders)", "name": "Coffee", "arg_nums": 1, "params": [{"name": "faker", "type": "FoodProviders"}], "return_type": "", "signature": "protected Coffee(FoodProviders faker)", "original_string": "    protected Coffee(FoodProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Coffee.java", "class_name": "Coffee", "class_uri": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]country()", "name": "country", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String country()", "original_string": "    public String country() {\n        return resolve(\"coffee.country\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Coffee.java", "class_name": "Coffee", "class_uri": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]region()", "name": "region", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String region()", "original_string": "    public String region() {\n        return region(faker.options().option(Coffee.Country.class));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Coffee.java", "class_name": "Coffee", "class_uri": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]region(Coffee.Country)", "name": "region", "arg_nums": 1, "params": [{"name": "country", "type": "Coffee.Country"}], "return_type": "String", "signature": "public String region(Coffee.Country country)", "original_string": "    public String region(Coffee.Country country) {\n        return resolve(\"coffee.regions.\" + country.name().toLowerCase(Locale.ROOT));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Coffee.java", "class_name": "Coffee", "class_uri": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]variety()", "name": "variety", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String variety()", "original_string": "    public String variety() {\n        return resolve(\"coffee.variety\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Coffee.java", "class_name": "Coffee", "class_uri": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]intensifier()", "name": "intensifier", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String intensifier()", "original_string": "    public String intensifier() {\n        return resolve(\"coffee.intensifier\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Coffee.java", "class_name": "Coffee", "class_uri": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]body()", "name": "body", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String body()", "original_string": "    public String body() {\n        return resolve(\"coffee.body\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Coffee.java", "class_name": "Coffee", "class_uri": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]descriptor()", "name": "descriptor", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String descriptor()", "original_string": "    public String descriptor() {\n        return resolve(\"coffee.descriptor\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Coffee.java", "class_name": "Coffee", "class_uri": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]notes()", "name": "notes", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String notes()", "original_string": "    public String notes() {\n        return resolve(\"coffee.notes\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Coffee.java", "class_name": "Coffee", "class_uri": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]name1()", "name": "name1", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name1()", "original_string": "    public String name1() {\n        return resolve(\"coffee.name_1\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Coffee.java", "class_name": "Coffee", "class_uri": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]name2()", "name": "name2", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name2()", "original_string": "    public String name2() {\n        return resolve(\"coffee.name_2\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Coffee.java", "class_name": "Coffee", "class_uri": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee.[String]blendName()", "name": "blendName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String blendName()", "original_string": "    public String blendName() {\n        return resolve(\"coffee.blend_name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Coffee.java", "class_name": "Coffee", "class_uri": "src/main/java/net/datafaker/providers/food/Coffee.java.Coffee", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Tea.java.Tea.[]Tea(FoodProviders)", "name": "Tea", "arg_nums": 1, "params": [{"name": "faker", "type": "FoodProviders"}], "return_type": "", "signature": "protected Tea(FoodProviders faker)", "original_string": "    protected Tea(FoodProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Tea.java", "class_name": "Tea", "class_uri": "src/main/java/net/datafaker/providers/food/Tea.java.Tea", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Tea.java.Tea.[String]variety()", "name": "variety", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String variety()", "original_string": "    public String variety() {\n        return resolve(\"tea.variety.\" + type().toLowerCase());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Tea.java", "class_name": "Tea", "class_uri": "src/main/java/net/datafaker/providers/food/Tea.java.Tea", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random tea variety.\n\n@return a string of tea variety.\n"}, {"uris": "src/main/java/net/datafaker/providers/food/Tea.java.Tea.[String]type()", "name": "type", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String type()", "original_string": "    public String type() {\n        return resolve(\"tea.type\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Tea.java", "class_name": "Tea", "class_uri": "src/main/java/net/datafaker/providers/food/Tea.java.Tea", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThis method generates a random tea type.\n\n@return a string of tea type.\n"}, {"uris": "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker.[]FoodFaker()", "name": "FoodFaker", "arg_nums": 0, "params": [], "return_type": "", "signature": "public FoodFaker()", "original_string": "    public FoodFaker() {\n        super();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/FoodFaker.java", "class_name": "FoodFaker", "class_uri": "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker.[]FoodFaker(Locale)", "name": "FoodFaker", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "", "signature": "public FoodFaker(Locale locale)", "original_string": "    public FoodFaker(Locale locale) {\n        super(locale);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/FoodFaker.java", "class_name": "FoodFaker", "class_uri": "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker.[]FoodFaker(Random)", "name": "FoodFaker", "arg_nums": 1, "params": [{"name": "random", "type": "Random"}], "return_type": "", "signature": "public FoodFaker(Random random)", "original_string": "    public FoodFaker(Random random) {\n        super(random);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/FoodFaker.java", "class_name": "FoodFaker", "class_uri": "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker.[]FoodFaker(Locale,Random)", "name": "FoodFaker", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "random", "type": "Random"}], "return_type": "", "signature": "public FoodFaker(Locale locale, Random random)", "original_string": "    public FoodFaker(Locale locale, Random random) {\n        super(locale, random);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/FoodFaker.java", "class_name": "FoodFaker", "class_uri": "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker.[]FoodFaker(Locale,RandomService)", "name": "FoodFaker", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "randomService", "type": "RandomService"}], "return_type": "", "signature": "public FoodFaker(Locale locale, RandomService randomService)", "original_string": "    public FoodFaker(Locale locale, RandomService randomService) {\n        super(locale, randomService);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/FoodFaker.java", "class_name": "FoodFaker", "class_uri": "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker.[]FoodFaker(FakeValuesService,FakerContext)", "name": "FoodFaker", "arg_nums": 2, "params": [{"name": "fakeValuesService", "type": "FakeValuesService"}, {"name": "context", "type": "FakerContext"}], "return_type": "", "signature": "public FoodFaker(FakeValuesService fakeValuesService, FakerContext context)", "original_string": "    public FoodFaker(FakeValuesService fakeValuesService, FakerContext context) {\n        super(fakeValuesService, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/FoodFaker.java", "class_name": "FoodFaker", "class_uri": "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Beer.java.Beer.[]Beer(FoodProviders)", "name": "Beer", "arg_nums": 1, "params": [{"name": "faker", "type": "FoodProviders"}], "return_type": "", "signature": "protected Beer(FoodProviders faker)", "original_string": "    protected Beer(FoodProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Beer.java", "class_name": "Beer", "class_uri": "src/main/java/net/datafaker/providers/food/Beer.java.Beer", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Beer.java.Beer.[String]brand()", "name": "brand", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String brand()", "original_string": "    public String brand() {\n        return resolve(\"beer.brand\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Beer.java", "class_name": "Beer", "class_uri": "src/main/java/net/datafaker/providers/food/Beer.java.Beer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Beer.java.Beer.[String]name()", "name": "name", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String name()", "original_string": "    public String name() {\n        return resolve(\"beer.name\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Beer.java", "class_name": "Beer", "class_uri": "src/main/java/net/datafaker/providers/food/Beer.java.Beer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Beer.java.Beer.[String]style()", "name": "style", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String style()", "original_string": "    public String style() {\n        return resolve(\"beer.style\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Beer.java", "class_name": "Beer", "class_uri": "src/main/java/net/datafaker/providers/food/Beer.java.Beer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Beer.java.Beer.[String]hop()", "name": "hop", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String hop()", "original_string": "    public String hop() {\n        return resolve(\"beer.hop\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Beer.java", "class_name": "Beer", "class_uri": "src/main/java/net/datafaker/providers/food/Beer.java.Beer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Beer.java.Beer.[String]yeast()", "name": "yeast", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String yeast()", "original_string": "    public String yeast() {\n        return resolve(\"beer.yeast\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Beer.java", "class_name": "Beer", "class_uri": "src/main/java/net/datafaker/providers/food/Beer.java.Beer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Beer.java.Beer.[String]malt()", "name": "malt", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String malt()", "original_string": "    public String malt() {\n        return resolve(\"beer.malt\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Beer.java", "class_name": "Beer", "class_uri": "src/main/java/net/datafaker/providers/food/Beer.java.Beer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Food.java.Food.[]Food(FoodProviders)", "name": "Food", "arg_nums": 1, "params": [{"name": "faker", "type": "FoodProviders"}], "return_type": "", "signature": "protected Food(FoodProviders faker)", "original_string": "    protected Food(FoodProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Food.java", "class_name": "Food", "class_uri": "src/main/java/net/datafaker/providers/food/Food.java.Food", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]ingredient()", "name": "ingredient", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String ingredient()", "original_string": "    public String ingredient() {\n        return resolve(\"food.ingredients\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Food.java", "class_name": "Food", "class_uri": "src/main/java/net/datafaker/providers/food/Food.java.Food", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]allergen()", "name": "allergen", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String allergen()", "original_string": "    public String allergen() {\n        return resolve(\"food.allergens\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Food.java", "class_name": "Food", "class_uri": "src/main/java/net/datafaker/providers/food/Food.java.Food", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]spice()", "name": "spice", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String spice()", "original_string": "    public String spice() {\n        return resolve(\"food.spices\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Food.java", "class_name": "Food", "class_uri": "src/main/java/net/datafaker/providers/food/Food.java.Food", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]dish()", "name": "dish", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String dish()", "original_string": "    public String dish() {\n        return resolve(\"food.dish\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Food.java", "class_name": "Food", "class_uri": "src/main/java/net/datafaker/providers/food/Food.java.Food", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]fruit()", "name": "fruit", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String fruit()", "original_string": "    public String fruit() {\n        return resolve(\"food.fruits\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Food.java", "class_name": "Food", "class_uri": "src/main/java/net/datafaker/providers/food/Food.java.Food", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]vegetable()", "name": "vegetable", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String vegetable()", "original_string": "    public String vegetable() {\n        return resolve(\"food.vegetables\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Food.java", "class_name": "Food", "class_uri": "src/main/java/net/datafaker/providers/food/Food.java.Food", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]sushi()", "name": "sushi", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String sushi()", "original_string": "    public String sushi() {\n        return resolve(\"food.sushi\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Food.java", "class_name": "Food", "class_uri": "src/main/java/net/datafaker/providers/food/Food.java.Food", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Food.java.Food.[String]measurement()", "name": "measurement", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String measurement()", "original_string": "    public String measurement() {\n        return resolve(\"food.measurement_sizes\") +\n            \" \" + resolve(\"food.measurements\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Food.java", "class_name": "Food", "class_uri": "src/main/java/net/datafaker/providers/food/Food.java.Food", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Dessert.java.Dessert.[]Dessert(FoodProviders)", "name": "Dessert", "arg_nums": 1, "params": [{"name": "faker", "type": "FoodProviders"}], "return_type": "", "signature": "protected Dessert(FoodProviders faker)", "original_string": "    protected Dessert(FoodProviders faker) {\n        super(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Dessert.java", "class_name": "Dessert", "class_uri": "src/main/java/net/datafaker/providers/food/Dessert.java.Dessert", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/providers/food/Dessert.java.Dessert.[String]variety()", "name": "variety", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String variety()", "original_string": "    public String variety() {\n        return resolve(\"dessert.variety\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Dessert.java", "class_name": "Dessert", "class_uri": "src/main/java/net/datafaker/providers/food/Dessert.java.Dessert", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return dessert variety e.g. \"Cake\".\n"}, {"uris": "src/main/java/net/datafaker/providers/food/Dessert.java.Dessert.[String]topping()", "name": "topping", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String topping()", "original_string": "    public String topping() {\n        return resolve(\"dessert.topping\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Dessert.java", "class_name": "Dessert", "class_uri": "src/main/java/net/datafaker/providers/food/Dessert.java.Dessert", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return dessert topping e.g. \"Rainbow Sprinkles\".\n"}, {"uris": "src/main/java/net/datafaker/providers/food/Dessert.java.Dessert.[String]flavor()", "name": "flavor", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String flavor()", "original_string": "    public String flavor() {\n        return resolve(\"dessert.flavor\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/providers/food/Dessert.java", "class_name": "Dessert", "class_uri": "src/main/java/net/datafaker/providers/food/Dessert.java.Dessert", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return dessert flavor e.g. \"Vanilla\".\n"}, {"uris": "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver.[]FakeResolver(Class<T>)", "name": "FakeResolver", "arg_nums": 1, "params": [{"name": "clazz", "type": "Class<T>"}], "return_type": "", "signature": "private FakeResolver(Class<T> clazz)", "original_string": "    private FakeResolver(Class<T> clazz) {\n        this.clazz = clazz;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/annotations/FakeResolver.java", "class_name": "FakeResolver", "class_uri": "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver.[FakeResolver<T>]of(Class<T>)", "name": "of", "arg_nums": 1, "params": [{"name": "clazz", "type": "Class<T>"}], "return_type": "FakeResolver<T>", "signature": "public static <T> FakeResolver<T> of(Class<T> clazz)", "original_string": "    public static <T> FakeResolver<T> of(Class<T> clazz) {\n        var fakeFactory = CLASS_2_FAKE_RESOLVER.computeIfAbsent(clazz, k -> new FakeResolver<>(clazz));\n        return (FakeResolver<T>) fakeFactory;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/annotations/FakeResolver.java", "class_name": "FakeResolver", "class_uri": "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "FakeResolver<T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver.[T]generate(Schema<Object, ?>)", "name": "generate", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<Object, ?>"}], "return_type": "T", "signature": "public T generate(Schema<Object, ?> schema)", "original_string": "    public T generate(Schema<Object, ?> schema) {\n        if (Objects.isNull(schema)) {\n            return generateFromDefaultSchema();\n        }\n\n        return (T) JAVA_OBJECT_TRANSFORMER.apply(clazz, schema);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/annotations/FakeResolver.java", "class_name": "FakeResolver", "class_uri": "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver.[T]generateFromDefaultSchema()", "name": "generateFromDefaultSchema", "arg_nums": 0, "params": [], "return_type": "T", "signature": "private T generateFromDefaultSchema()", "original_string": "    private T generateFromDefaultSchema() {\n        Schema<Object, ?> useSchema = DEFAULT_SCHEMA_CACHE.get(clazz);\n        if (useSchema == null) {\n            checkFakeAnnotation(clazz);\n\n            FakeForSchema fakeForSchemaAnnotation = clazz.getAnnotation(FakeForSchema.class);\n            useSchema = getSchema(fakeForSchemaAnnotation.value());\n            DEFAULT_SCHEMA_CACHE.put(clazz, useSchema);\n        }\n\n        return (T) JAVA_OBJECT_TRANSFORMER.apply(clazz, useSchema);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/annotations/FakeResolver.java", "class_name": "FakeResolver", "class_uri": "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver.[Schema<Object, T>]getSchema(String)", "name": "getSchema", "arg_nums": 1, "params": [{"name": "pathToSchema", "type": "String"}], "return_type": "Schema<Object, T>", "signature": "private Schema<Object, T> getSchema(String pathToSchema)", "original_string": "    private Schema<Object, T> getSchema(String pathToSchema) {\n        if (pathToSchema != null) {\n            try {\n                // indexOf(<String>) is faster than indexOf(<char>) since it has jvm intrinsic\n                final int sharpIndex = pathToSchema.indexOf(\"#\");\n                final Class<?> classToCall;\n                final String methodName;\n                if (sharpIndex >= 0) {\n                    classToCall = Class.forName(pathToSchema.substring(0, sharpIndex));\n                    methodName = pathToSchema.substring(sharpIndex + 1);\n                } else {\n                    classToCall = this.clazz.getEnclosingClass();\n                    methodName = pathToSchema;\n                }\n                Method myStaticMethod = classToCall.getMethod(methodName);\n                myStaticMethod.setAccessible(true);\n                return (Schema<Object, T>) myStaticMethod.invoke(null);\n            } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n        } else {\n            throw new IllegalArgumentException(\"The path to the schema is empty.\");\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/annotations/FakeResolver.java", "class_name": "FakeResolver", "class_uri": "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Schema<Object, T>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver.[void]checkFakeAnnotation(Class<T>)", "name": "checkFakeAnnotation", "arg_nums": 1, "params": [{"name": "clazz", "type": "Class<T>"}], "return_type": "void", "signature": "private void checkFakeAnnotation(Class<T> clazz)", "original_string": "    private void checkFakeAnnotation(Class<T> clazz) {\n        Objects.requireNonNull(clazz, \"The class is null.\");\n\n        if (!clazz.isAnnotationPresent(FakeForSchema.class)) {\n            throw new RuntimeException(\"The class %s is not annotated with Fake\".formatted(clazz.getSimpleName()));\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/annotations/FakeResolver.java", "class_name": "FakeResolver", "class_uri": "src/main/java/net/datafaker/annotations/FakeResolver.java.FakeResolver", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"BG\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java", "class_name": "BulgarianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthday = birthday(faker, request);\n        Gender gender = gender(faker, request);\n        String basePart = basePart(faker, birthday, gender);\n        String idNumber = basePart + checksum(basePart);\n        return new PersonIdNumber(idNumber, birthday, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java", "class_name": "BulgarianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders faker) {\n        String basePart = basePart(faker, faker.timeAndDate().birthday(), randomGender(faker));\n        return basePart + (checksum(basePart) + 1) % 10;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java", "class_name": "BulgarianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[String]basePart(BaseProviders,LocalDate,Gender)", "name": "basePart", "arg_nums": 3, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "birthDate", "type": "LocalDate"}, {"name": "gender", "type": "Gender"}], "return_type": "String", "signature": "private String basePart(BaseProviders faker, LocalDate birthDate, Gender gender)", "original_string": "    private String basePart(BaseProviders faker, LocalDate birthDate, Gender gender) {\n        return yy(birthDate) + mm(birthDate) + dd(birthDate) + order(faker, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java", "class_name": "BulgarianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[String]yy(LocalDate)", "name": "yy", "arg_nums": 1, "params": [{"name": "birthDate", "type": "LocalDate"}], "return_type": "String", "signature": "private String yy(LocalDate birthDate)", "original_string": "    private String yy(LocalDate birthDate) {\n        return \"%02d\".formatted(birthDate.getYear() % 100);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java", "class_name": "BulgarianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[String]mm(LocalDate)", "name": "mm", "arg_nums": 1, "params": [{"name": "birthDate", "type": "LocalDate"}], "return_type": "String", "signature": "private String mm(LocalDate birthDate)", "original_string": "    private String mm(LocalDate birthDate) {\n        int monthAddition = birthDate.getYear() < 1900 ? 20  :\n            birthDate.getYear() >= 2000 ? 40 : 0;\n        return \"%02d\".formatted(birthDate.getMonthValue() + monthAddition);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java", "class_name": "BulgarianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[String]dd(LocalDate)", "name": "dd", "arg_nums": 1, "params": [{"name": "birthDate", "type": "LocalDate"}], "return_type": "String", "signature": "private String dd(LocalDate birthDate)", "original_string": "    private String dd(LocalDate birthDate) {\n        return \"%02d\".formatted(birthDate.getDayOfMonth());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java", "class_name": "BulgarianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[String]order(BaseProviders,Gender)", "name": "order", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "gender", "type": "Gender"}], "return_type": "String", "signature": "private String order(BaseProviders faker, Gender gender)", "original_string": "    private String order(BaseProviders faker, Gender gender) {\n        int[] availableLastDigits = switch (gender) {\n            case FEMALE -> ODD_DIGITS;\n            case MALE -> EVEN_DIGITS;\n        };\n        int lastDigit = availableLastDigits[faker.number().numberBetween(0, 5)];\n        return faker.number().digits(2) + lastDigit;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java", "class_name": "BulgarianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber.[int]checksum(String)", "name": "checksum", "arg_nums": 1, "params": [{"name": "text", "type": "String"}], "return_type": "int", "signature": "int checksum(String text)", "original_string": "    int checksum(String text) {\n        int checksum = multiply(text, CHECKSUM_WEIGHTS);\n        return (checksum % 11) % 10;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java", "class_name": "BulgarianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java.UkrainianIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"UA\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java", "class_name": "UkrainianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java.UkrainianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java.UkrainianIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders faker) {\n        LocalDate birthday = faker.timeAndDate().birthday();\n        String dob = DateTimeFormatter.ofPattern(\"yyyyMMdd\").format(birthday);\n        String numbers = faker.numerify(\"####\");\n\n        int multiplied = multiply(dob + numbers, CHECKSUM_WEIGHTS);\n        int checksum = (multiplied + 1) % 10;\n        return dob + \"-\" + numbers + checksum;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java", "class_name": "UkrainianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java.UkrainianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java.UkrainianIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumber.IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumber.IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumber.IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumber.IdNumberRequest request) {\n        LocalDate birthday = faker.timeAndDate().birthday();\n        String dob = DateTimeFormatter.ofPattern(\"yyyyMMdd\").format(birthday);\n        String numbers = faker.numerify(\"####\");\n        int checksum = multiply(dob + numbers, CHECKSUM_WEIGHTS) % 10;\n        String unzr = dob + \"-\" + numbers + checksum;\n        return new PersonIdNumber(unzr, birthday, gender(faker, request));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java", "class_name": "UkrainianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java.UkrainianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java.GeorgianIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"GE\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java", "class_name": "GeorgianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java.GeorgianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java.GeorgianIdNumber.[String]generateValid(BaseProviders)", "name": "generateValid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateValid(BaseProviders faker)", "original_string": "    @Override\n    public String generateValid(BaseProviders faker) {\n        return faker.numerify(\"###########\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java", "class_name": "GeorgianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java.GeorgianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java.GeorgianIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumber.IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumber.IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumber.IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumber.IdNumberRequest request) {\n        return new PersonIdNumber(\n            generateValid(faker),\n            birthday(faker, request),\n            gender(faker, request)\n        );\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java", "class_name": "GeorgianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java.GeorgianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java.GeorgianIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders faker) {\n        return faker.numerify(\"###########42\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java", "class_name": "GeorgianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java.GeorgianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"MD\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java", "class_name": "MoldovanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthday = birthday(faker, request);\n        String basePart = basePart(faker, birthday);\n        String idNumber = basePart + checksum(basePart);\n        return new PersonIdNumber(idNumber, birthday, randomGender(faker));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java", "class_name": "MoldovanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders faker) {\n        String basePart = basePart(faker, faker.timeAndDate().birthday());\n        return basePart + (checksum(basePart) + 1) % 10;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java", "class_name": "MoldovanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[String]basePart(BaseProviders,LocalDate)", "name": "basePart", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "birthday", "type": "LocalDate"}], "return_type": "String", "signature": "private String basePart(BaseProviders faker, LocalDate birthday)", "original_string": "    private String basePart(BaseProviders faker, LocalDate birthday) {\n        // IDNP: 2\u0413\u0413\u0413XXXYYYYYK\n        return firstDigit() + \u0413\u0413\u0413(birthday) + XXX(faker) + YYYYY(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java", "class_name": "MoldovanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[char]firstDigit()", "name": "firstDigit", "arg_nums": 0, "params": [], "return_type": "char", "signature": "private char firstDigit()", "original_string": "    private char firstDigit() {\n        return '2';\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java", "class_name": "MoldovanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "char", "classes": []}, "docstring": "\n2 - the identification index of the natural person in the multitude of state identifiers (?)\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[String]\u0413\u0413\u0413(LocalDate)", "name": "\u0413\u0413\u0413", "arg_nums": 1, "params": [{"name": "birthday", "type": "LocalDate"}], "return_type": "String", "signature": "private String \u0413\u0413\u0413(LocalDate birthday)", "original_string": "    private String \u0413\u0413\u0413(LocalDate birthday) {\n        return \"%03d\".formatted(birthday.getYear() % 1000);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java", "class_name": "MoldovanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n\u0413\u0413\u0413- the last three digits of the IDNP award year\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[String]XXX(BaseProviders)", "name": "XXX", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "private String XXX(BaseProviders faker)", "original_string": "    private String XXX(BaseProviders faker) {\n        return faker.number().digits(3);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java", "class_name": "MoldovanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nXXX - code of the registrar's office\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[String]YYYYY(BaseProviders)", "name": "YYYYY", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "private String YYYYY(BaseProviders faker)", "original_string": "    private String YYYYY(BaseProviders faker) {\n        return faker.number().digits(5);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java", "class_name": "MoldovanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nYYYYY- the order number of the registration in the respective year in the respective office\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber.[char]checksum(String)", "name": "checksum", "arg_nums": 1, "params": [{"name": "text", "type": "String"}], "return_type": "char", "signature": "char checksum(String text)", "original_string": "    char checksum(String text) {\n        int checksum = multiply(text, CHECKSUM_MASK);\n        return (char) ('0' + checksum % 10);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java", "class_name": "MoldovanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "char", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"EE\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java", "class_name": "EstonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(final BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(final BaseProviders faker) {\n        LocalDate birthday = faker.timeAndDate().birthday();\n        String digits = basePart(faker, birthday, randomGender(faker));\n        return digits + (checksum(digits) + 1) % 10;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java", "class_name": "EstonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthday = birthday(faker, request);\n        Gender gender = gender(faker, request);\n        String digits = basePart(faker, birthday, gender);\n        String idNumber = digits + checksum(digits);\n        return new PersonIdNumber(idNumber, birthday, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java", "class_name": "EstonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber.[String]basePart(BaseProviders,LocalDate,Gender)", "name": "basePart", "arg_nums": 3, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "birthday", "type": "LocalDate"}, {"name": "gender", "type": "Gender"}], "return_type": "String", "signature": "private String basePart(BaseProviders faker, LocalDate birthday, Gender gender)", "original_string": "    private String basePart(BaseProviders faker, LocalDate birthday, Gender gender) {\n        return firstDigit(birthday.getYear(), gender) +\n            BIRTHDAY_FORMAT.format(birthday) +\n            faker.number().digits(3);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java", "class_name": "EstonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber.[int]firstDigit(int,Gender)", "name": "firstDigit", "arg_nums": 2, "params": [{"name": "birthYear", "type": "int"}, {"name": "gender", "type": "Gender"}], "return_type": "int", "signature": "static int firstDigit(int birthYear, Gender gender)", "original_string": "    static int firstDigit(int birthYear, Gender gender) {\n        int digit = switch (birthYear / 100) {\n            case 18 -> 1;\n            case 19 -> 3;\n            case 20 -> 5;\n            case 21 -> 7;\n            default -> throw new IllegalStateException(\"Too far in future: \" + birthYear);\n        };\n        return switch (gender) {\n            case FEMALE -> digit + 1;\n            case MALE -> digit;\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java", "class_name": "EstonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber.[int]checksum(String)", "name": "checksum", "arg_nums": 1, "params": [{"name": "numbers", "type": "String"}], "return_type": "int", "signature": "static int checksum(String numbers)", "original_string": "    static int checksum(String numbers) {\n        int checksum = checksum(numbers, CHECKSUM_COEFFICIENTS);\n        return checksum != 10 ? checksum : checksum(numbers, CHECKSUM_COEFFICIENTS2) % 10;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java", "class_name": "EstonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber.[int]checksum(String,int[])", "name": "checksum", "arg_nums": 2, "params": [{"name": "numbers", "type": "String"}, {"name": "checksumCoefficients", "type": "int[]"}], "return_type": "int", "signature": "private static int checksum(String numbers, int[] checksumCoefficients)", "original_string": "    private static int checksum(String numbers, int[] checksumCoefficients) {\n        int checkSum = 0;\n        for (int i = 0; i < numbers.length(); i++) {\n            int digit = Character.getNumericValue(numbers.charAt(i));\n            checkSum += checksumCoefficients[i] * digit;\n        }\n\n        return checkSum % 11;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java", "class_name": "EstonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"AL\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java", "class_name": "AlbanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders faker) {\n        String pin = generateValid(faker);\n        int invalidMonth = faker.number().numberBetween(93, 99);\n        return pin.substring(0, 2) + invalidMonth + pin.substring(4);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java", "class_name": "AlbanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthDate = birthday(faker, request);\n        Gender gender = gender(faker, request);\n        String basePart = yy(birthDate.getYear()) + mm(birthDate.getMonthValue(), gender) + dd(birthDate.getDayOfMonth()) + sss(faker);\n        String idNumber = basePart + checksum(basePart);\n        return new PersonIdNumber(idNumber, birthDate, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java", "class_name": "AlbanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[String]yy(int)", "name": "yy", "arg_nums": 1, "params": [{"name": "year", "type": "int"}], "return_type": "String", "signature": "String yy(int year)", "original_string": "    String yy(int year) {\n        return FIRST_CHAR.charAt((year - 1800) / 10) + String.valueOf(year % 10);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java", "class_name": "AlbanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[String]mm(int,Gender)", "name": "mm", "arg_nums": 2, "params": [{"name": "month", "type": "int"}, {"name": "gender", "type": "Gender"}], "return_type": "String", "signature": "String mm(int month, Gender gender)", "original_string": "    String mm(int month, Gender gender) {\n        return String.format(\"%02d\", (gender == FEMALE ? 50 : 0) + month);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java", "class_name": "AlbanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[String]dd(int)", "name": "dd", "arg_nums": 1, "params": [{"name": "dayOfMonth", "type": "int"}], "return_type": "String", "signature": "String dd(int dayOfMonth)", "original_string": "    String dd(int dayOfMonth) {\n        return String.format(\"%02d\", dayOfMonth);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java", "class_name": "AlbanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[String]sss(BaseProviders)", "name": "sss", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "private String sss(BaseProviders faker)", "original_string": "    private String sss(BaseProviders faker) {\n        return faker.number().digits(3);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java", "class_name": "AlbanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[char]checksum(String)", "name": "checksum", "arg_nums": 1, "params": [{"name": "text", "type": "String"}], "return_type": "char", "signature": "char checksum(String text)", "original_string": "    char checksum(String text) {\n        int checksum = checksumOfFirstChar(text.charAt(0));\n        for (int i = 1; i < text.length(); i++) {\n            checksum += digitAt(text, i) * i;\n        }\n        return CHECKSUM_CHAR.charAt(checksum % 23);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java", "class_name": "AlbanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "char", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber.[int]checksumOfFirstChar(char)", "name": "checksumOfFirstChar", "arg_nums": 1, "params": [{"name": "c", "type": "char"}], "return_type": "int", "signature": "int checksumOfFirstChar(char c)", "original_string": "    int checksumOfFirstChar(char c) {\n        return Character.isLetter(c) ? CHECKSUM_CHAR.indexOf(c) : digit(c);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java", "class_name": "AlbanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"RO\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java", "class_name": "RomanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthday = birthday(faker, request);\n        Gender gender = gender(faker, request);\n        String basePart = basePart(faker, birthday, gender);\n        String idNumber = basePart + checksum(basePart);\n        return new PersonIdNumber(idNumber, birthday, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java", "class_name": "RomanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders faker) {\n        LocalDate birthday = faker.timeAndDate().birthday();\n        Gender gender = randomGender(faker);\n        String basePart = basePart(faker, birthday, gender);\n        return basePart + (checksum(basePart) + 1) % 10;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java", "class_name": "RomanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[String]basePart(BaseProviders,LocalDate,Gender)", "name": "basePart", "arg_nums": 3, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "birthday", "type": "LocalDate"}, {"name": "gender", "type": "Gender"}], "return_type": "String", "signature": "private String basePart(BaseProviders faker, LocalDate birthday, Gender gender)", "original_string": "    private String basePart(BaseProviders faker, LocalDate birthday, Gender gender) {\n        return firstCharacter(birthday, gender) +\n            dateOfBirth(birthday) + countyCode(faker) + sequenceNumber(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java", "class_name": "RomanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[int]firstCharacter(LocalDate,Gender)", "name": "firstCharacter", "arg_nums": 2, "params": [{"name": "birthday", "type": "LocalDate"}, {"name": "gender", "type": "Gender"}], "return_type": "int", "signature": "int firstCharacter(LocalDate birthday, Gender gender)", "original_string": "    int firstCharacter(LocalDate birthday, Gender gender) {\n        int digit = switch (birthday.getYear() / 100) {\n            case 18 -> 3;\n            case 19 -> 1;\n            case 20 -> 5;\n            default -> throw new IllegalArgumentException(\"Too far in the past or future: \" + birthday);\n        };\n\n        return switch (gender) {\n            case FEMALE -> digit + 1;\n            case MALE -> digit;\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java", "class_name": "RomanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nRepresents the gender and century in which the person was born and can be:\n\u2013 1 for male persons born between 1900-1999;\n\u2013 2 for female persons born between 1900-1999;\n\u2013 3 for male persons born between 1800-1899;\n\u2013 4 for female persons born between 1800-1899;\n\u2013 5 for male persons born between 2000-2099;\n\u2013 6 for female persons born between the years 2000-2099;\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[String]dateOfBirth(LocalDate)", "name": "dateOfBirth", "arg_nums": 1, "params": [{"name": "birthday", "type": "LocalDate"}], "return_type": "String", "signature": "String dateOfBirth(LocalDate birthday)", "original_string": "    String dateOfBirth(LocalDate birthday) {\n        return DATE_TIME_FORMATTER.format(birthday);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java", "class_name": "RomanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[String]countyCode(BaseProviders)", "name": "countyCode", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "String countyCode(BaseProviders faker)", "original_string": "    String countyCode(BaseProviders faker) {\n        int countyCode = faker.bool().bool() ?\n            faker.number().numberBetween(1, 47) :\n            faker.number().numberBetween(51, 53);\n        return \"%02d\".formatted(countyCode);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java", "class_name": "RomanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCharacter 8\u20139: 01\u201346 or 51 or 52\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[String]sequenceNumber(BaseProviders)", "name": "sequenceNumber", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "String sequenceNumber(BaseProviders faker)", "original_string": "    String sequenceNumber(BaseProviders faker) {\n        return \"%03d\".formatted(faker.number().numberBetween(1, 1_000));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java", "class_name": "RomanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nnext 3 digits is a number between 001 and 999.\nEach number is allocated only once per person per day.\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber.[int]checksum(String)", "name": "checksum", "arg_nums": 1, "params": [{"name": "basePart", "type": "String"}], "return_type": "int", "signature": "int checksum(String basePart)", "original_string": "    int checksum(String basePart) {\n        int result = multiply(basePart, CHECKSUM_WEIGHTS) % 11;\n        return result == 10 ? 1 : result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java", "class_name": "RomanianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nlast digit is a control digit calculated from all the other 12 digits in the code as follows:\n(n1*2+n2*7+n3*9+n4*1+n5*4+n6*6+n7*3+n8*5+n9*8+n10*2+n11*7+n12*9)%11\n\nif the result is 10 then the digit is 1, otherwise is the result.\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"PL\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java", "class_name": "PolishIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthday = birthday(faker, request);\n        PersonIdNumber.Gender gender = gender(faker, request);\n        return new PersonIdNumber(get(faker, birthday, gender), birthday, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java", "class_name": "PolishIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[String]get(BaseProviders,LocalDate,Gender)", "name": "get", "arg_nums": 3, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "birthDate", "type": "LocalDate"}, {"name": "requestedGender", "type": "Gender"}], "return_type": "String", "signature": "@Deprecated\n    public String get(BaseProviders faker, LocalDate birthDate, Gender requestedGender)", "original_string": "    @Deprecated\n    public String get(BaseProviders faker, LocalDate birthDate, Gender requestedGender) {\n        PersonIdNumber.Gender gender = pickGender(faker, requestedGender);\n        return get(faker, birthDate, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java", "class_name": "PolishIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@param requestedGender nullable\n@deprecated Use {@link #generateValid(BaseProviders, IdNumberRequest)} instead\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[PersonIdNumber.Gender]pickGender(BaseProviders,Gender)", "name": "pickGender", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "requestedGender", "type": "Gender"}], "return_type": "PersonIdNumber.Gender", "signature": "private static PersonIdNumber.Gender pickGender(BaseProviders faker, Gender requestedGender)", "original_string": "    private static PersonIdNumber.Gender pickGender(BaseProviders faker, Gender requestedGender) {\n        return requestedGender == null ? randomGender(faker) :\n            switch (requestedGender) {\n                case ANY -> randomGender(faker);\n                case MALE -> MALE;\n                case FEMALE -> FEMALE;\n            };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java", "class_name": "PolishIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "PersonIdNumber.Gender", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[String]get(BaseProviders,LocalDate,PersonIdNumber.Gender)", "name": "get", "arg_nums": 3, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "birthDate", "type": "LocalDate"}, {"name": "gender", "type": "PersonIdNumber.Gender"}], "return_type": "String", "signature": "private String get(BaseProviders faker, LocalDate birthDate, PersonIdNumber.Gender gender)", "original_string": "    private String get(BaseProviders faker, LocalDate birthDate, PersonIdNumber.Gender gender) {\n        int[] digits = generateDigits(faker, birthDate, gender);\n        int controlDigit = getControlDigit(digits);\n        return toString(digits, controlDigit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java", "class_name": "PolishIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders faker) {\n        PersonIdNumber.Gender gender = randomGender(faker);\n        int[] digits = generateDigits(faker, faker.timeAndDate().birthday(), gender);\n        int controlDigit = getControlDigit(digits);\n        int invalidControlDigit = (controlDigit + 1) % 10;\n        return toString(digits, invalidControlDigit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java", "class_name": "PolishIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[int[]]generateDigits(BaseProviders,LocalDate,PersonIdNumber.Gender)", "name": "generateDigits", "arg_nums": 3, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "birthDate", "type": "LocalDate"}, {"name": "gender", "type": "PersonIdNumber.Gender"}], "return_type": "int[]", "signature": "private int[] generateDigits(BaseProviders faker, LocalDate birthDate, PersonIdNumber.Gender gender)", "original_string": "    private int[] generateDigits(BaseProviders faker, LocalDate birthDate, PersonIdNumber.Gender gender) {\n        int monthEncoded = getMonthEncoded(birthDate.getYear(), birthDate.getMonthValue());\n        return new int[]{\n            birthDate.getYear() / 10 % 10,\n            birthDate.getYear() % 10,\n\n            monthEncoded / 10,\n            monthEncoded % 10,\n\n            birthDate.getDayOfMonth() / 10,\n            birthDate.getDayOfMonth() % 10,\n\n            randomDigit(faker),\n            randomDigit(faker),\n            randomDigit(faker),\n\n            getGenderDigit(faker, gender)\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java", "class_name": "PolishIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int[]", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[String]toString(int[],int)", "name": "toString", "arg_nums": 2, "params": [{"name": "digits", "type": "int[]"}, {"name": "controlDigit", "type": "int"}], "return_type": "String", "signature": "private static String toString(int[] digits, int controlDigit)", "original_string": "    private static String toString(int[] digits, int controlDigit) {\n        final StringBuilder peselSb = new StringBuilder(PESEL_LENGTH);\n        for (int digit : digits) {\n            peselSb.append(digit);\n        }\n        peselSb.append(controlDigit);\n        return peselSb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java", "class_name": "PolishIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[int]randomDigit(BaseProviders)", "name": "randomDigit", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "int", "signature": "private int randomDigit(BaseProviders faker)", "original_string": "    private int randomDigit(BaseProviders faker) {\n        return faker.number().randomDigit();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java", "class_name": "PolishIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[int]getControlDigit(int[])", "name": "getControlDigit", "arg_nums": 1, "params": [{"name": "digits", "type": "int[]"}], "return_type": "int", "signature": "private int getControlDigit(int[] digits)", "original_string": "    private int getControlDigit(int[] digits) {\n        final int sum = digits[0] + digits[4] + digits[8] + (digits[1] + digits[5] + digits[9]) * 3\n            + (digits[2] + digits[6]) * 7 + (digits[3] + digits[7]) * 9;\n        return (10 - sum % 10) % 10;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java", "class_name": "PolishIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[int]getGenderDigit(BaseProviders,PersonIdNumber.Gender)", "name": "getGenderDigit", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "gender", "type": "PersonIdNumber.Gender"}], "return_type": "int", "signature": "private int getGenderDigit(BaseProviders faker, PersonIdNumber.Gender gender)", "original_string": "    private int getGenderDigit(BaseProviders faker, PersonIdNumber.Gender gender) {\n        return switch (gender) {\n            case FEMALE -> faker.random().nextInt(5) * 2;\n            case MALE -> faker.random().nextInt(5) * 2 + 1;\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java", "class_name": "PolishIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber.[int]getMonthEncoded(int,int)", "name": "getMonthEncoded", "arg_nums": 2, "params": [{"name": "year", "type": "int"}, {"name": "month", "type": "int"}], "return_type": "int", "signature": "private int getMonthEncoded(int year, int month)", "original_string": "    private int getMonthEncoded(int year, int month) {\n        final int monthModifier;\n        if (year < 1800) {\n            throw new IllegalArgumentException(\"Year is before 1800: \" + year);\n        } else if (year < 1900) {\n            monthModifier = 80;\n        } else if (year < 2000) {\n            monthModifier = 0;\n        } else if (year < 2100) {\n            monthModifier = 20;\n        } else if (year < 2200) {\n            monthModifier = 40;\n        } else if (year < 2300) {\n            monthModifier = 60;\n        } else {\n            throw new IllegalArgumentException(\"Year is after 2300: \" + year);\n        }\n        return month + monthModifier;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java", "class_name": "PolishIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"KR\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java", "class_name": "SouthKoreanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber.[String]getValidRrn(BaseProviders)", "name": "getValidRrn", "arg_nums": 1, "params": [{"name": "f", "type": "BaseProviders"}], "return_type": "String", "signature": "@Deprecated\n    public String getValidRrn(BaseProviders f)", "original_string": "    @Deprecated\n    public String getValidRrn(BaseProviders f) {\n        return generateValid(f);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java", "class_name": "SouthKoreanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "f", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders f, IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders f, IdNumberRequest request) {\n        StringBuilder patternBuilder = new StringBuilder();\n        LocalDate birthday = birthday(f, request);\n        String iso = f.nation().isoCountry();\n        Gender gender = gender(f, request);\n\n        // 1st to 6th digits indicate date of birth\n\n        patternBuilder.append(generateDay(birthday));\n\n        // Matches RRN Pattern ( ######-####### )\n        patternBuilder.append('-');\n\n        // 7th digit indicates birth century, gender, nationality\n        patternBuilder.append(get7thDigit(birthday.getYear(), gender, iso));\n\n        // From Oct 2020, 8 to 13 digits are randomized\n        // 8th to 13th digits are random digits\n        patternBuilder.append(\"######\");\n\n        String idNumber = f.numerify(patternBuilder.toString());\n        return new PersonIdNumber(idNumber, birthday, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java", "class_name": "SouthKoreanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber.[int]get7thDigit(int,Gender,String)", "name": "get7thDigit", "arg_nums": 3, "params": [{"name": "year", "type": "int"}, {"name": "gender", "type": "Gender"}, {"name": "isoCountry", "type": "String"}], "return_type": "int", "signature": "private int get7thDigit(int year, Gender gender, String isoCountry)", "original_string": "    private int get7thDigit(int year, Gender gender, String isoCountry) {\n        // Local starts with 1, foreigner starts with 5\n        int locality = isoCountry.equalsIgnoreCase(\"kr\") ? 1 : 5;\n        if (year < 1900) {\n            // Male: 9 | Female: 0\n            return gender == MALE ? 9 : 0;\n        } else if (year < 2000) {\n            // Male: 1, 5 | Female: 2, 6\n            return locality + (gender == MALE ? 0 : 1);\n        } else {\n            // Male: 3, 7 | Female: 4, 8\n            return locality + (gender == MALE ? 2 : 3);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java", "class_name": "SouthKoreanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber.[String]generateDay(LocalDate)", "name": "generateDay", "arg_nums": 1, "params": [{"name": "birthday", "type": "LocalDate"}], "return_type": "String", "signature": "private String generateDay(LocalDate birthday)", "original_string": "    private String generateDay(LocalDate birthday) {\n        final int year = birthday.getYear() % 100;\n        final int month = birthday.getMonthValue();\n        final int day = birthday.getDayOfMonth();\n        final char[] res = new char[6];\n        res[0] = (char) ('0' + (year / 10));\n        res[1] = (char) ('0' + (year % 10));\n        res[2] = (char) ('0' + (month / 10));\n        res[3] = (char) ('0' + (month % 10));\n        res[4] = (char) ('0' + (day / 10));\n        res[5] = (char) ('0' + (day % 10));\n        return String.valueOf(res);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java", "class_name": "SouthKoreanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders faker) {\n        return generateValid(faker) + \"42\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java", "class_name": "SouthKoreanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"MX\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java", "class_name": "MexicanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[String]get(BaseProviders)", "name": "get", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Deprecated\n    public String get(BaseProviders faker)", "original_string": "    @Deprecated\n    public String get(BaseProviders faker) {\n        return generateValid(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java", "class_name": "MexicanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        Gender gender = gender(faker, request);\n        LocalDate birthday = birthday(faker, request);\n        char[] birthDay = formatBirthday(birthday).toCharArray();\n        final char[] ssn = new char[18];\n\n        final Options options = faker.options();\n        ssn[0] = options.option(CONSONANT);\n        ssn[1] = options.option(VOWEL);\n        ssn[2] = options.option(CONSONANT);\n        ssn[3] = options.option(CONSONANT);\n        System.arraycopy(birthDay, 0, ssn, 4, 6);\n        ssn[10] = genderCharacter(gender);\n        System.arraycopy(options.option(STATES).toCharArray(), 0, ssn, 11, 2);\n        ssn[13] = options.option(VOWEL);\n        ssn[14] = options.option(VOWEL);\n        ssn[15] = options.option(VOWEL);\n        ssn[16] = (birthDay[0] == '1' ? '0' : options.option(CONSONANT));\n        ssn[17] = String.valueOf(getChecksum(ssn)).charAt(0);\n        return new PersonIdNumber(String.valueOf(ssn), birthday, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java", "class_name": "MexicanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": "\nGet A valid MEX CURP.\n\n@param faker faker\n@return A valid MEX CURP.\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[char]genderCharacter(Gender)", "name": "genderCharacter", "arg_nums": 1, "params": [{"name": "gender", "type": "Gender"}], "return_type": "char", "signature": "private char genderCharacter(Gender gender)", "original_string": "    private char genderCharacter(Gender gender) {\n        return switch (gender) {\n            case FEMALE -> 'M';\n            case MALE -> 'H';\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java", "class_name": "MexicanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "char", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[String]getWrong(BaseProviders)", "name": "getWrong", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Deprecated\n    public String getWrong(BaseProviders faker)", "original_string": "    @Deprecated\n    public String getWrong(BaseProviders faker) {\n        return generateInvalid(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java", "class_name": "MexicanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders faker) {\n        return faker.options().option(CHA);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java", "class_name": "MexicanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGet A invalid MEX CURP.\n\n@param faker faker\n@return A invalid MEX CURP.\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[String]formatBirthday(LocalDate)", "name": "formatBirthday", "arg_nums": 1, "params": [{"name": "birthday", "type": "LocalDate"}], "return_type": "String", "signature": "private String formatBirthday(LocalDate birthday)", "original_string": "    private String formatBirthday(LocalDate birthday) {\n        return String.valueOf(birthday.getYear() * 10000 + birthday.getMonthValue() * 100 + birthday.getDayOfMonth());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java", "class_name": "MexicanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nFormats given birthday to fit into ID Number\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber.[int]getChecksum(char[])", "name": "getChecksum", "arg_nums": 1, "params": [{"name": "str", "type": "char[]"}], "return_type": "int", "signature": "private int getChecksum(char[] str)", "original_string": "    private int getChecksum(char[] str) {\n        int sum = 0;\n        int v = str.length;\n        for (int i = 0; i < str.length - 1; i++) {\n            int number;\n            if (str[i] < '9')\n                number = str[i] - '0';\n            else number = str[i] - 'A' + 10;\n            sum += number * v--;\n        }\n        sum = Math.abs((sum % 10) - 10);\n        return (sum == 10) ? 0 : sum;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java", "class_name": "MexicanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGets the Checksum.\n\n@param str input string\n@return Checksum.\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"ZA\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java", "class_name": "SouthAfricanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[String]getValidSsn(BaseProviders)", "name": "getValidSsn", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Deprecated\n    public String getValidSsn(BaseProviders faker)", "original_string": "    @Deprecated\n    public String getValidSsn(BaseProviders faker) {\n        return generateValid(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java", "class_name": "SouthAfricanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "f", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders f, IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders f, IdNumberRequest request) {\n        LocalDate birthday = birthday(f, request);\n        Gender gender = gender(f, request);\n        String basePart = DATE_TIME_FORMATTER.format(birthday)\n            + sequentialNumber(f, gender)\n            + f.options().option(CODE_PATTERN);\n        return new PersonIdNumber(basePart + calculateChecksum(basePart, 12), birthday, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java", "class_name": "SouthAfricanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": "\nGenerate a valid social security number on faker\n\n@param f the java-faker\n@return a valid social security number on faker\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[String]sequentialNumber(BaseProviders,Gender)", "name": "sequentialNumber", "arg_nums": 2, "params": [{"name": "f", "type": "BaseProviders"}, {"name": "gender", "type": "Gender"}], "return_type": "String", "signature": "static String sequentialNumber(BaseProviders f, Gender gender)", "original_string": "    static String sequentialNumber(BaseProviders f, Gender gender) {\n        int number = switch (gender) {\n            case FEMALE -> f.number().numberBetween(0, 5000);\n            case MALE -> f.number().numberBetween(5000, 10_000);\n        };\n        return \"%04d\".formatted(number);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java", "class_name": "SouthAfricanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[String]getInValidSsn(BaseProviders)", "name": "getInValidSsn", "arg_nums": 1, "params": [{"name": "f", "type": "BaseProviders"}], "return_type": "String", "signature": "@Deprecated\n    public String getInValidSsn(BaseProviders f)", "original_string": "    @Deprecated\n    public String getInValidSsn(BaseProviders f) {\n        return generateInvalid(f);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java", "class_name": "SouthAfricanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "f", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders f)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders f) {\n        String ssn = f.numerify(f.options().option(VALID_PATTERN));\n        while (isValidEnZASsn(ssn)) {\n            String pattern = getPattern(f);\n            ssn = f.numerify(pattern);\n        }\n        return ssn;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java", "class_name": "SouthAfricanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate an invalid social security number on faker\n\n@param f the java-faker\n@return an invalid social security number on faker\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[String]getPattern(BaseProviders)", "name": "getPattern", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "private String getPattern(BaseProviders faker)", "original_string": "    private String getPattern(BaseProviders faker) {\n        return faker.options().option(VALID_PATTERN);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java", "class_name": "SouthAfricanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerate a fixed format numeric string\n\n@param faker the java-faker\n@return a fixed format numeric string\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[boolean]isValidEnZASsn(String)", "name": "isValidEnZASsn", "arg_nums": 1, "params": [{"name": "ssn", "type": "String"}], "return_type": "boolean", "signature": "public static boolean isValidEnZASsn(String ssn)", "original_string": "    public static boolean isValidEnZASsn(String ssn) {\n        if (ssn.length() != 13) {\n            return false;\n        }\n\n        try {\n            if (parseDate(ssn)) {\n                return false;\n            }\n        } catch (DateTimeParseException | NumberFormatException ignore) {\n            return false;\n        }\n\n        return ssn.charAt(12) - '0' == calculateChecksum(ssn, 12);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java", "class_name": "SouthAfricanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nJudge whether a social security number is valid\n\n@param ssn social security number\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[boolean]parseDate(String)", "name": "parseDate", "arg_nums": 1, "params": [{"name": "ssn", "type": "String"}], "return_type": "boolean", "signature": "private static boolean parseDate(String ssn)", "original_string": "    private static boolean parseDate(String ssn) {\n        if (ChronoField.YEAR.range().isValidIntValue(Integer.parseInt(ssn, 0, 2, 10))) {\n            if (ChronoField.MONTH_OF_YEAR.range().isValidIntValue(Integer.parseInt(ssn, 2, 4, 10))) {\n                if (ChronoField.DAY_OF_MONTH.range().isValidIntValue(Integer.parseInt(ssn, 4, 6, 10))) {\n                    String dateString = ssn.substring(0, 6);\n                    LocalDate date = LocalDate.parse(dateString, DATE_TIME_FORMATTER);\n                    // want to check that the parsed date is equal to the supplied data, most of the attempts will fail\n                    String reversed = date.format(DATE_TIME_FORMATTER);\n                    return !reversed.equals(dateString);\n                }\n            }\n        }\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java", "class_name": "SouthAfricanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nJudge whether a numeric string of ssn can represent a legal date\n\n@param ssn social security number\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[int]calculateChecksum(String,int)", "name": "calculateChecksum", "arg_nums": 2, "params": [{"name": "number", "type": "String"}, {"name": "length2Check", "type": "int"}], "return_type": "int", "signature": "private static int calculateChecksum(String number, int length2Check)", "original_string": "    private static int calculateChecksum(String number, int length2Check) {\n\n        int totalNumber = 0;\n\n        for (int i = length2Check - 1; i >= 0; i -= 2) {\n            int tmpNumber = calculate((number.charAt(i) - '0') * 2);\n            if (i == 0) {\n                totalNumber += tmpNumber;\n            } else {\n                totalNumber += tmpNumber + number.charAt(i - 1) - '0';\n            }\n        }\n        if (totalNumber >= 0 && totalNumber < 9) {\n            return 10 - totalNumber;\n        } else {\n            int res = totalNumber % 10;\n            return res == 0 ? res : 10 - res;\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java", "class_name": "SouthAfricanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculate the Check Number in the last number of a ssn\n\n@param number a social security number not including the last number\n@return check number of this ssn\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber.[int]calculate(int)", "name": "calculate", "arg_nums": 1, "params": [{"name": "number", "type": "int"}], "return_type": "int", "signature": "private static int calculate(int number)", "original_string": "    private static int calculate(int number) {\n        int res = 0;\n        while (number > 0) {\n            res += number % 10;\n            number /= 10;\n        }\n        return res;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java", "class_name": "SouthAfricanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculate the sum of each digit of the number\n\n@return sum of each digit of the number\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"US\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java", "class_name": "AmericanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber.[String]getValidSsn(BaseProviders)", "name": "getValidSsn", "arg_nums": 1, "params": [{"name": "f", "type": "BaseProviders"}], "return_type": "String", "signature": "@Deprecated\n    public String getValidSsn(BaseProviders f)", "original_string": "    @Deprecated\n    public String getValidSsn(BaseProviders f) {\n        return generateValid(f);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java", "class_name": "AmericanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber.[String]generateValid(BaseProviders)", "name": "generateValid", "arg_nums": 1, "params": [{"name": "f", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateValid(BaseProviders f)", "original_string": "    @Override\n    public String generateValid(BaseProviders f) {\n        final String ssn = f.regexify(\"[0-8]\\\\d{2}-\\\\d{2}-\\\\d{4}\");\n\n        boolean isValid = INVALID_SSN_PATTERNS.stream()\n            .noneMatch(invalidSSNPattern -> invalidSSNPattern.matcher(ssn).matches());\n        return isValid ? ssn : generateValid(f);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java", "class_name": "AmericanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumber.IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumber.IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumber.IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumber.IdNumberRequest request) {\n        return new PersonIdNumber(generateValid(faker), birthday(faker, request), gender(faker, request));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java", "class_name": "AmericanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders faker) {\n        return faker.regexify(faker.options().nextElement(INVALID_SSNS));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java", "class_name": "AmericanIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"SE\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java", "class_name": "SwedenIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[String]getValidSsn(BaseProviders)", "name": "getValidSsn", "arg_nums": 1, "params": [{"name": "f", "type": "BaseProviders"}], "return_type": "String", "signature": "@Deprecated\n    public String getValidSsn(BaseProviders f)", "original_string": "    @Deprecated\n    public String getValidSsn(BaseProviders f) {\n        return generateValid(f);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java", "class_name": "SwedenIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumber.IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "f", "type": "BaseProviders"}, {"name": "request", "type": "IdNumber.IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders f, IdNumber.IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders f, IdNumber.IdNumberRequest request) {\n        LocalDate birthday = birthday(f, request);\n        String end = f.numerify(\"###\");\n        String basePart = DATE_TIME_FORMATTER.format(birthday)\n            + f.options().option(PLUS_MINUS)\n            + end;\n        String idNumber = basePart + calculateChecksum(basePart);\n        return new PersonIdNumber(idNumber, birthday, gender(f, request));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java", "class_name": "SwedenIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[String]getInvalidSsn(BaseProviders)", "name": "getInvalidSsn", "arg_nums": 1, "params": [{"name": "f", "type": "BaseProviders"}], "return_type": "String", "signature": "@Deprecated\n    public String getInvalidSsn(BaseProviders f)", "original_string": "    @Deprecated\n    public String getInvalidSsn(BaseProviders f) {\n        return generateInvalid(f);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java", "class_name": "SwedenIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "f", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders f)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders f) {\n        String candidate = \"121212-1212\"; // Seed with a valid number\n        while (isValidSwedishSsn(candidate)) {\n            String pattern = getPattern(f);\n            candidate = f.numerify(pattern);\n        }\n\n        return candidate;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java", "class_name": "SwedenIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[String]getPattern(BaseProviders)", "name": "getPattern", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "private String getPattern(BaseProviders faker)", "original_string": "    private String getPattern(BaseProviders faker) {\n        return faker.options().option(VALID_PATTERNS);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java", "class_name": "SwedenIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[boolean]isValidSwedishSsn(String)", "name": "isValidSwedishSsn", "arg_nums": 1, "params": [{"name": "ssn", "type": "String"}], "return_type": "boolean", "signature": "public static boolean isValidSwedishSsn(String ssn)", "original_string": "    public static boolean isValidSwedishSsn(String ssn) {\n        if (ssn.length() != 11) {\n            return false;\n        }\n\n        try {\n            if (parseDate(ssn)) {\n                return false;\n            }\n        } catch (DateTimeParseException | NumberFormatException ignore) {\n            return false;\n        }\n\n        int calculatedChecksum = calculateChecksum(ssn);\n        int checksum = Integer.parseInt(ssn.substring(10, 11));\n        return checksum == calculatedChecksum;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java", "class_name": "SwedenIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[boolean]parseDate(String)", "name": "parseDate", "arg_nums": 1, "params": [{"name": "ssn", "type": "String"}], "return_type": "boolean", "signature": "private static boolean parseDate(String ssn)", "original_string": "    private static boolean parseDate(String ssn) {\n        String dateString = ssn.substring(0, 6);\n        if (ChronoField.YEAR.range().isValidIntValue(Integer.parseInt(dateString.substring(0, 2)))) {\n            if (ChronoField.MONTH_OF_YEAR.range().isValidIntValue(Integer.parseInt(dateString.substring(2, 4)))) {\n                if (ChronoField.DAY_OF_MONTH.range().isValidIntValue(Integer.parseInt(dateString.substring(4)))) {\n                    LocalDate date = LocalDate.parse(dateString, DATE_TIME_FORMATTER);\n                    // want to check that the parsed date is equal to the supplied data, most of the attempts will fail\n                    String reversed = date.format(DATE_TIME_FORMATTER);\n                    return !reversed.equals(dateString);\n                }\n            }\n        }\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java", "class_name": "SwedenIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[int]calculateChecksum(String)", "name": "calculateChecksum", "arg_nums": 1, "params": [{"name": "number", "type": "String"}], "return_type": "int", "signature": "private static int calculateChecksum(String number)", "original_string": "    private static int calculateChecksum(String number) {\n        String dateString = number.substring(0, 6);\n        String birthNumber = number.substring(7, 10);\n\n        String calculatedNumber = calculateDigits(dateString + birthNumber);\n        int sum = calculateDigitSum(calculatedNumber);\n\n        int lastDigit = (sum % 10);\n        int difference = 10 - lastDigit;\n\n        return (difference % 10);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java", "class_name": "SwedenIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[String]calculateDigits(String)", "name": "calculateDigits", "arg_nums": 1, "params": [{"name": "numbers", "type": "String"}], "return_type": "String", "signature": "private static String calculateDigits(String numbers)", "original_string": "    private static String calculateDigits(String numbers) {\n        StringBuilder calculatedNumbers = new StringBuilder();\n        for (int i = 0; i < 9; i++) {\n            int res;\n            int n = numbers.charAt(i) - '0';\n            if (i % 2 == 0) {\n                res = n << 1;\n            } else {\n                res = n;\n            }\n\n            calculatedNumbers.append(res);\n        }\n        return calculatedNumbers.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java", "class_name": "SwedenIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber.[int]calculateDigitSum(String)", "name": "calculateDigitSum", "arg_nums": 1, "params": [{"name": "numbers", "type": "String"}], "return_type": "int", "signature": "private static int calculateDigitSum(String numbers)", "original_string": "    private static int calculateDigitSum(String numbers) {\n        int sum = 0;\n        final int length = numbers.length();\n        for (int i = 0; i < length; i++) {\n            int n = numbers.charAt(i) - '0';\n            sum += n;\n        }\n        return sum;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java", "class_name": "SwedenIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/Utils.java.Utils.[LocalDate]birthday(BaseProviders,IdNumberRequest)", "name": "birthday", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "LocalDate", "signature": "static LocalDate birthday(BaseProviders faker, IdNumberRequest request)", "original_string": "    static LocalDate birthday(BaseProviders faker, IdNumberRequest request) {\n        return faker.timeAndDate().birthday(request.minAge(), request.maxAge());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/Utils.java", "class_name": "Utils", "class_uri": "src/main/java/net/datafaker/idnumbers/Utils.java.Utils", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "LocalDate", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/Utils.java.Utils.[Gender]gender(BaseProviders,IdNumberRequest)", "name": "gender", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "Gender", "signature": "static Gender gender(BaseProviders faker, IdNumberRequest request)", "original_string": "    static Gender gender(BaseProviders faker, IdNumberRequest request) {\n        IdNumber.GenderRequest gender = request.gender();\n        return switch (gender) {\n            case FEMALE -> FEMALE;\n            case MALE -> MALE;\n            case ANY -> randomGender(faker);\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/Utils.java", "class_name": "Utils", "class_uri": "src/main/java/net/datafaker/idnumbers/Utils.java.Utils", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "Gender", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/Utils.java.Utils.[Gender]randomGender(BaseProviders)", "name": "randomGender", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "Gender", "signature": "static Gender randomGender(BaseProviders faker)", "original_string": "    static Gender randomGender(BaseProviders faker) {\n        return faker.bool().bool() ? FEMALE : MALE;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/Utils.java", "class_name": "Utils", "class_uri": "src/main/java/net/datafaker/idnumbers/Utils.java.Utils", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "Gender", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/Utils.java.Utils.[int]digitAt(String,int)", "name": "digitAt", "arg_nums": 2, "params": [{"name": "text", "type": "String"}, {"name": "index", "type": "int"}], "return_type": "int", "signature": "static int digitAt(String text, int index)", "original_string": "    static int digitAt(String text, int index) {\n        return digit(text.charAt(index));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/Utils.java", "class_name": "Utils", "class_uri": "src/main/java/net/datafaker/idnumbers/Utils.java.Utils", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/Utils.java.Utils.[int]digit(char)", "name": "digit", "arg_nums": 1, "params": [{"name": "c", "type": "char"}], "return_type": "int", "signature": "static int digit(char c)", "original_string": "    static int digit(char c) {\n        return c - '0';\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/Utils.java", "class_name": "Utils", "class_uri": "src/main/java/net/datafaker/idnumbers/Utils.java.Utils", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/Utils.java.Utils.[int]multiply(String,int[])", "name": "multiply", "arg_nums": 2, "params": [{"name": "text", "type": "String"}, {"name": "weights", "type": "int[]"}], "return_type": "int", "signature": "static int multiply(String text, int[] weights)", "original_string": "    static int multiply(String text, int[] weights) {\n        int checksum = 0;\n        for (int i = 0; i < text.length(); i++) {\n            checksum += digitAt(text, i) * weights[i];\n        }\n        return checksum;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/Utils.java", "class_name": "Utils", "class_uri": "src/main/java/net/datafaker/idnumbers/Utils.java.Utils", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"CN\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java", "class_name": "ChineseIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber.[String]getValidSsn(BaseProviders)", "name": "getValidSsn", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Deprecated\n    public String getValidSsn(BaseProviders faker)", "original_string": "    @Deprecated\n    public String getValidSsn(BaseProviders faker) {\n        return generateValid(faker);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java", "class_name": "ChineseIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthday = birthday(faker, request);\n        RandomService rand = faker.random();\n        String loc = faker.options().option(LOCATIONS);\n        final int dayLength = 8;\n        final int locLength = loc.length();\n        final char[] res = new char[locLength + dayLength + 3];\n        for (int i = 0; i < locLength; i++) {\n            res[i] = loc.charAt(i);\n        }\n\n        fillBirthday(res, locLength, birthday);\n        res[locLength + dayLength] = (char)('0' + rand.nextInt(10));\n        res[locLength + dayLength + 1] = (char)('0' + rand.nextInt(10));\n        res[locLength + dayLength + 2] = (char)('0' + rand.nextInt(10));\n        return new PersonIdNumber(idNumber(res), birthday, gender(faker, request));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java", "class_name": "ChineseIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": "\nGenerate a valid Zh_CN Id numbers\n\n@param faker a Faker instance for generating Chinese ID numbers\n@return a Chinese ID number string\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber.[String]idNumber(char[])", "name": "idNumber", "arg_nums": 1, "params": [{"name": "res", "type": "char[]"}], "return_type": "String", "signature": "static String idNumber(char[] res)", "original_string": "    static String idNumber(char[] res) {\n        int count = 0;\n        count += (res[0] - '0') * 7;\n        count += (res[1] - '0') * 9;\n        count += (res[2] - '0') * 10;\n        count += (res[3] - '0') * 5;\n        count += (res[4] - '0') * 8;\n        count += (res[5] - '0') * 4;\n        count += (res[6] - '0') * 2;\n        count += (res[7] - '0');\n        count += (res[8] - '0') * 6;\n        count += (res[9] - '0') * 3;\n        count += (res[10] - '0') * 7;\n        count += (res[11] - '0') * 9;\n        count += (res[12] - '0') * 10;\n        count += (res[13] - '0') * 5;\n        count += (res[14] - '0') * 8;\n        count += (res[15] - '0') * 4;\n        count += (res[16] - '0') * 2;\n        count = (12 - count % 11) % 11;\n        return count == 10 ?\n            String.valueOf(res) + \"X\" :\n            String.valueOf(res) + count;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java", "class_name": "ChineseIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber.[void]fillBirthday(char[],int,LocalDate)", "name": "fillBirthday", "arg_nums": 3, "params": [{"name": "res", "type": "char[]"}, {"name": "offset", "type": "int"}, {"name": "birthday", "type": "LocalDate"}], "return_type": "void", "signature": "private void fillBirthday(char[] res, int offset, LocalDate birthday)", "original_string": "    private void fillBirthday(char[] res, int offset, LocalDate birthday) {\n        int year = birthday.getYear();\n        int month = birthday.getMonthValue();\n        int day = birthday.getDayOfMonth();\n        res[offset] = (char)('0' + year / 1000);\n        res[offset + 1] = (char)('0' + (year % 1000) / 100);\n        res[offset + 2] = (char)('0' + (year % 100) / 10);\n        res[offset + 3] = (char)('0' + year % 10);\n        res[offset + 4] = (char)('0' + month / 10);\n        res[offset + 5] = (char)('0' + month % 10);\n        res[offset + 6] = (char)('0' + day / 10);\n        res[offset + 7] = (char)('0' + day % 10);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java", "class_name": "ChineseIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders faker) {\n        return generateValid(faker) + \"42\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java", "class_name": "ChineseIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"MK\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java", "class_name": "MacedonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthday = birthday(faker, request);\n        Gender gender = gender(faker, request);\n        String basePart = basePart(faker, birthday, gender);\n        return new PersonIdNumber(basePart + checksum(basePart), birthday, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java", "class_name": "MacedonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders faker) {\n        LocalDate birthday = faker.timeAndDate().birthday();\n        Gender gender = randomGender(faker);\n        String basePart = basePart(faker, birthday, gender);\n        return basePart + (checksum(basePart) + 1) % 10;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java", "class_name": "MacedonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]basePart(BaseProviders,LocalDate,Gender)", "name": "basePart", "arg_nums": 3, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "bd", "type": "LocalDate"}, {"name": "gender", "type": "Gender"}], "return_type": "String", "signature": "private String basePart(BaseProviders faker, LocalDate bd, Gender gender)", "original_string": "    private String basePart(BaseProviders faker, LocalDate bd, Gender gender) {\n        return dd(bd) + mm(bd) + yyy(bd) + rr(faker) + sss(faker, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java", "class_name": "MacedonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]dd(LocalDate)", "name": "dd", "arg_nums": 1, "params": [{"name": "bd", "type": "LocalDate"}], "return_type": "String", "signature": "private String dd(LocalDate bd)", "original_string": "    private String dd(LocalDate bd) {\n        return \"%02d\".formatted(bd.getDayOfMonth());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java", "class_name": "MacedonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]mm(LocalDate)", "name": "mm", "arg_nums": 1, "params": [{"name": "bd", "type": "LocalDate"}], "return_type": "String", "signature": "private String mm(LocalDate bd)", "original_string": "    private String mm(LocalDate bd) {\n        return \"%02d\".formatted(bd.getMonthValue());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java", "class_name": "MacedonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]yyy(LocalDate)", "name": "yyy", "arg_nums": 1, "params": [{"name": "bd", "type": "LocalDate"}], "return_type": "String", "signature": "private String yyy(LocalDate bd)", "original_string": "    private String yyy(LocalDate bd) {\n        return \"%03d\".formatted(bd.getYear() % 1000);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java", "class_name": "MacedonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nlast three digits of the year of birth\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]rr(BaseProviders)", "name": "rr", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "private String rr(BaseProviders faker)", "original_string": "    private String rr(BaseProviders faker) {\n        return REGIONS.get(faker.number().numberBetween(0, REGIONS.size()));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java", "class_name": "MacedonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThe two digit registry number depends on the citizens place of birth\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[String]sss(BaseProviders,Gender)", "name": "sss", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "gender", "type": "Gender"}], "return_type": "String", "signature": "private String sss(BaseProviders faker, Gender gender)", "original_string": "    private String sss(BaseProviders faker, Gender gender) {\n        int ordinal = switch (gender) {\n            case FEMALE -> faker.number().numberBetween(500, 1000);\n            case MALE -> faker.number().numberBetween(0, 500);\n        };\n        return \"%03d\".formatted(ordinal);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java", "class_name": "MacedonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nThe combination of the citizen's sex and ordinal number of birth is presented as a 3-digit number\n- from 000 to 499 for the male, and\n- from 500 to 999 for the female citizens.\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber.[int]checksum(String)", "name": "checksum", "arg_nums": 1, "params": [{"name": "text", "type": "String"}], "return_type": "int", "signature": "int checksum(String text)", "original_string": "    int checksum(String text) {\n        int a = digitAt(text, 0);\n        int b = digitAt(text, 1);\n        int c = digitAt(text, 2);\n        int d = digitAt(text, 3);\n        int e = digitAt(text, 4);\n        int f = digitAt(text, 5);\n        int g = digitAt(text, 6);\n        int h = digitAt(text, 7);\n        int i = digitAt(text, 8);\n        int j = digitAt(text, 9);\n        int k = digitAt(text, 10);\n        int l = digitAt(text, 11);\n\n        int m = 11 - (7 * (a + g) + 6 * (b + h) + 5 * (c + i) + 4 * (d + j) + 3 * (e + k) + 2 * (f + l)) % 11;\n\n        // If m is between 1 and 9, the checksum is the same as the number m;\n        // If m is 10 or 11 checksum becomes 0 (zero).\n        return switch (m) {\n            case 10, 11 -> 0;\n            default -> m;\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java", "class_name": "MacedonianIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"SG\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java", "class_name": "SingaporeIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[String]format(LocalDate,boolean,int[])", "name": "format", "arg_nums": 3, "params": [{"name": "issueDate", "type": "LocalDate"}, {"name": "citizen", "type": "boolean"}, {"name": "randomDigits", "type": "int[]"}], "return_type": "String", "signature": "private static String format(LocalDate issueDate, boolean citizen, int[] randomDigits)", "original_string": "    private static String format(LocalDate issueDate, boolean citizen, int[] randomDigits) {\n        int checkDigitInitialValue = issueDate.getYear() < 2000 ? 0 : 4;\n        char firstLetter = citizen ? centuryPrefixCitizen(issueDate) : centuryPrefixForeigner(issueDate);\n        String matchLetters = citizen ? UIN_LETTERS : FIN_LETTERS;\n        int checkDigit = checkDigitInitialValue;\n\n        StringBuilder id = new StringBuilder(11);\n        id.append(firstLetter);\n        for (int i = 0; i < randomDigits.length; i++) {\n            checkDigit += randomDigits[i] * CODE[i];\n            id.append(randomDigits[i]);\n        }\n        checkDigit %= 11;\n        id.append(matchLetters.charAt(checkDigit));\n        return id.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java", "class_name": "SingaporeIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[String]generateValid(BaseProviders)", "name": "generateValid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateValid(BaseProviders faker)", "original_string": "    @Override\n    public String generateValid(BaseProviders faker) {\n        return generateValid(faker, new IdNumberRequest(0, 100, ANY)).idNumber();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java", "class_name": "SingaporeIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        LocalDate birthDate = Utils.birthday(faker, request);\n        boolean citizen = faker.bool().bool();\n        Gender gender = gender(faker, request);\n        return generateValidIdNumber(faker, birthDate, citizen, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java", "class_name": "SingaporeIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[PersonIdNumber]generateValidIdNumber(BaseProviders,LocalDate,boolean,Gender)", "name": "generateValidIdNumber", "arg_nums": 4, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "birthDate", "type": "LocalDate"}, {"name": "citizen", "type": "boolean"}, {"name": "gender", "type": "Gender"}], "return_type": "PersonIdNumber", "signature": "private static PersonIdNumber generateValidIdNumber(BaseProviders faker, LocalDate birthDate, boolean citizen, Gender gender)", "original_string": "    private static PersonIdNumber generateValidIdNumber(BaseProviders faker, LocalDate birthDate, boolean citizen, Gender gender) {\n        int[] number = randomDigits(faker);\n        String idNumber = format(birthDate, citizen, number);\n        return new PersonIdNumber(idNumber, birthDate, gender);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java", "class_name": "SingaporeIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(BaseProviders faker) {\n        return generateValid(faker) + \"42\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java", "class_name": "SingaporeIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[String]getValidFIN(BaseProviders,Type)", "name": "getValidFIN", "arg_nums": 2, "params": [{"name": "f", "type": "BaseProviders"}, {"name": "type", "type": "Type"}], "return_type": "String", "signature": "public static String getValidFIN(BaseProviders f, Type type)", "original_string": "    public static String getValidFIN(BaseProviders f, Type type) {\n        LocalDate birthDate = randomBirthDate(f, type);\n        boolean citizen = switch (type) {\n            case SINGAPOREAN_TWENTIETH_CENTURY, SINGAPOREAN_TWENTY_FIRST_CENTURY -> true;\n            case FOREIGNER_TWENTIETH_CENTURY, FOREIGNER_TWENTY_FIRST_CENTURY -> false;\n        };\n        return generateValidIdNumber(f, birthDate, citizen, randomGender(f)).idNumber();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java", "class_name": "SingaporeIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[LocalDate]randomBirthDate(BaseProviders,Type)", "name": "randomBirthDate", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "type", "type": "Type"}], "return_type": "LocalDate", "signature": "static LocalDate randomBirthDate(BaseProviders faker, Type type)", "original_string": "    static LocalDate randomBirthDate(BaseProviders faker, Type type) {\n        int now = LocalDate.now().getYear();\n        return switch (type) {\n            case SINGAPOREAN_TWENTIETH_CENTURY,\n                 FOREIGNER_TWENTIETH_CENTURY -> faker.timeAndDate().birthday(now - 1900, now - 1999);\n            case SINGAPOREAN_TWENTY_FIRST_CENTURY,\n                 FOREIGNER_TWENTY_FIRST_CENTURY -> faker.timeAndDate().birthday(now - 2000, now - 2099);\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java", "class_name": "SingaporeIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "LocalDate", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[int[]]randomDigits(BaseProviders)", "name": "randomDigits", "arg_nums": 1, "params": [{"name": "f", "type": "BaseProviders"}], "return_type": "int[]", "signature": "private static int[] randomDigits(BaseProviders f)", "original_string": "    private static int[] randomDigits(BaseProviders f) {\n        final RandomService random = f.random();\n        final int[] number = new int[7];\n        for (int i = 0; i < number.length; i++) {\n            number[i] = random.nextInt(0, 9);\n        }\n        return number;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java", "class_name": "SingaporeIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int[]", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[char]centuryPrefixCitizen(LocalDate)", "name": "centuryPrefixCitizen", "arg_nums": 1, "params": [{"name": "issueDate", "type": "LocalDate"}], "return_type": "char", "signature": "static char centuryPrefixCitizen(LocalDate issueDate)", "original_string": "    static char centuryPrefixCitizen(LocalDate issueDate) {\n        int century = issueDate.getYear() / 100;\n        return (char) ('A' + century - 1);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java", "class_name": "SingaporeIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "char", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber.[char]centuryPrefixForeigner(LocalDate)", "name": "centuryPrefixForeigner", "arg_nums": 1, "params": [{"name": "issueDate", "type": "LocalDate"}], "return_type": "char", "signature": "static char centuryPrefixForeigner(LocalDate issueDate)", "original_string": "    static char centuryPrefixForeigner(LocalDate issueDate) {\n        int century = issueDate.getYear() / 100;\n        return (char) ('A' + century - 14);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java", "class_name": "SingaporeIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "char", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java.IdNumberGenerator.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "String countryCode()", "original_string": "    String countryCode();", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java", "class_name": "IdNumberGenerator", "class_uri": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java.IdNumberGenerator", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nISO-2 code of the country this generator provides ID numbers for\n\n@return e.g. \"US\" for America, \"EE\" for Estonia, \"MD\" for Moldova etc.\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java.IdNumberGenerator.[String]generateValid(BaseProviders)", "name": "generateValid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "default String generateValid(BaseProviders faker)", "original_string": "    default String generateValid(BaseProviders faker) {\n        return generateValid(faker, new IdNumberRequest(18, 65, ANY)).idNumber();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java", "class_name": "IdNumberGenerator", "class_uri": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java.IdNumberGenerator", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a valid ID number for given country (a.k.a. \"SSN\", \"Personal code\" etc.)\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java.IdNumberGenerator.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "String generateInvalid(BaseProviders faker)", "original_string": "    String generateInvalid(BaseProviders faker);", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java", "class_name": "IdNumberGenerator", "class_uri": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java.IdNumberGenerator", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates an invalid ID number for given country (a.k.a. \"SSN\", \"Personal code\" etc.)\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java.IdNumberGenerator.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request)", "original_string": "    PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request);", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java", "class_name": "IdNumberGenerator", "class_uri": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java.IdNumberGenerator", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": "\nGenerates a valid ID number for given country corresponding to given criterias (age range, gender etc.)\n\n@return PersonIdNumber containing a valid combination of ID, Birthday and Gender.\nIn countries where ID number doesn't contain gender and/or birthday, the latter values are just random.\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber.[String]countryCode()", "name": "countryCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String countryCode()", "original_string": "    @Override\n    public String countryCode() {\n        return \"PT\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java", "class_name": "PortugueseIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber.[String]generateInvalid(BaseProviders)", "name": "generateInvalid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateInvalid(final BaseProviders faker)", "original_string": "    @Override\n    public String generateInvalid(final BaseProviders faker) {\n        String digits = faker.number().digits(8);\n        int digitSum = calculateDigitSum(digits);\n        // by adding 5 to a valid checksum, we should invalidate\n        // by having the wrong checksum or just the wrong number of digits\n        return digits + (digitSum + 5);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java", "class_name": "PortugueseIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber.[String]generateValid(BaseProviders)", "name": "generateValid", "arg_nums": 1, "params": [{"name": "faker", "type": "BaseProviders"}], "return_type": "String", "signature": "@Override\n    public String generateValid(final BaseProviders faker)", "original_string": "    @Override\n    public String generateValid(final BaseProviders faker) {\n        String digits;\n        if (faker.random().nextBoolean()) {\n            final char firstDigit = faker.options().option(VALID_FIRST_DIGITS);\n            digits = firstDigit + faker.number().digits(7);\n        } else {\n            final String firstDoubleDigit = faker.options().option(VALID_FIRST_DOUBLE_DIGITS);\n            digits = firstDoubleDigit + faker.number().digits(6);\n        }\n        int digitSum = calculateDigitSum(digits);\n        return digits + digitSum;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java", "class_name": "PortugueseIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber.[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)", "name": "generateValid", "arg_nums": 2, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "request", "type": "IdNumberRequest"}], "return_type": "PersonIdNumber", "signature": "@Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request)", "original_string": "    @Override\n    public PersonIdNumber generateValid(BaseProviders faker, IdNumberRequest request) {\n        return new PersonIdNumber(generateValid(faker), birthday(faker, request), gender(faker, request));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java", "class_name": "PortugueseIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "PersonIdNumber", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber.[int]calculateDigitSum(String)", "name": "calculateDigitSum", "arg_nums": 1, "params": [{"name": "numbers", "type": "String"}], "return_type": "int", "signature": "private int calculateDigitSum(String numbers)", "original_string": "    private int calculateDigitSum(String numbers) {\n        int checkSum = 0;\n        for (int i = 1; i <= numbers.length(); i++) {\n            int digit = Character.getNumericValue(numbers.charAt(i - 1));\n            checkSum += (10 - i) * digit;\n        }\n\n        int val = (checkSum / 11) * 11;\n        checkSum -= val;\n        if (checkSum == 0 || checkSum == 1) {\n            checkSum = 0;\n        } else {\n            checkSum = 11 - checkSum;\n        }\n        return checkSum;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java", "class_name": "PortugueseIdNumber", "class_uri": "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil.[]IdNumberGeneratorPtBrUtil()", "name": "IdNumberGeneratorPtBrUtil", "arg_nums": 0, "params": [], "return_type": "", "signature": "private IdNumberGeneratorPtBrUtil()", "original_string": "    private IdNumberGeneratorPtBrUtil() {\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java", "class_name": "IdNumberGeneratorPtBrUtil", "class_uri": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil.[String]cnpj(BaseProviders,boolean,boolean,boolean)", "name": "cnpj", "arg_nums": 4, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "formatted", "type": "boolean"}, {"name": "valid", "type": "boolean"}, {"name": "multiBranch", "type": "boolean"}], "return_type": "String", "signature": "public static String cnpj(BaseProviders faker, boolean formatted, boolean valid, boolean multiBranch)", "original_string": "    public static String cnpj(BaseProviders faker, boolean formatted, boolean valid, boolean multiBranch) {\n        String cnpj;\n\n        if (valid) {\n            StringBuilder partial = new StringBuilder();\n            for (int i = 0; i < 8; i++) {\n                partial.append(faker.random().nextInt(9));\n            }\n\n            if (multiBranch) {\n                String string = String.valueOf(faker.random().nextInt(1, 9999));\n                partial.append(String.valueOf('0').repeat(Math.max(0, 4 - string.length())));\n                partial.append(string);\n            } else {\n                partial.append(\"0001\");\n            }\n\n            cnpj = partial.toString();\n\n            int d1 = digit(calculateWeight(cnpj, 9, 4, 12) + calculateWeight(cnpj, 5, 0, 4));\n            int d2 = digit((d1 * 2) + calculateWeight(cnpj, 9, 5, 12) + calculateWeight(cnpj, 6, 0, 5));\n\n            cnpj = (cnpj + d1) + d2;\n        } else {\n            cnpj = String.valueOf(faker.random().nextInt(1000000000) + (faker.random().nextInt(90) + 10) * 1000000000000L);\n        }\n\n        String result = (formatted) ? DocumentFormatterUtil.cnpj(cnpj) : cnpj;\n\n        // Sometimes the generated number is not what you expected, for example, you expected an invalid number,\n        // but the generated number is valid. This fixes the issue by generating a new number until it matches the expectation.\n        if (isCNPJValid(result) != valid) {\n            result = cnpj(faker, formatted, valid, multiBranch);\n        }\n\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java", "class_name": "IdNumberGeneratorPtBrUtil", "class_uri": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<a href=\"https://en.wikipedia.org/wiki/CNPJ\">https://en.wikipedia.org/wiki/CNPJ</a>\n\n@param formatted a cnpj (un)formatted\n@param valid     a cnpj (in)valid\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil.[String]cpf(BaseProviders,boolean,boolean)", "name": "cpf", "arg_nums": 3, "params": [{"name": "faker", "type": "BaseProviders"}, {"name": "formatted", "type": "boolean"}, {"name": "valid", "type": "boolean"}], "return_type": "String", "signature": "public static String cpf(BaseProviders faker, boolean formatted, boolean valid)", "original_string": "    public static String cpf(BaseProviders faker, boolean formatted, boolean valid) {\n        String cpf;\n        if (valid) {\n            char[] partial = new char[9];\n            for (int i = 0; i < 9; i++) {\n                partial[i] = (char)('0' + faker.random().nextInt(9));\n            }\n            cpf = String.valueOf(partial);\n\n            int d1 = digit(calculateWeight(cpf, 10, 0, cpf.length()));\n            int d2 = digit((d1 * 2) + calculateWeight(cpf, 11, 0, cpf.length()));\n\n            cpf = (cpf + d1) + d2;\n        } else {\n            cpf = String.valueOf(faker.random().nextInt(1000000000) + (faker.random().nextInt(90) + 10) * 1000000000L);\n        }\n\n        String result = formatted ? DocumentFormatterUtil.cpf(cpf) : cpf;\n\n        if (isCPFValid(result) != valid) {\n            // Sometimes the generated number is not what you expected, for example, you expected an invalid number,\n            // but the generated number is valid. This fixes the issue by generating a new number until it matches the expectation.\n            result = cpf(faker, formatted, valid);\n        }\n\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java", "class_name": "IdNumberGeneratorPtBrUtil", "class_uri": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<a href=\"https://en.wikipedia.org/wiki/CPF_number\">https://en.wikipedia.org/wiki/CPF_number</a>\n\n@param formatted a CPF (un)formatted\n@param valid     a CPF (in)valid\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil.[boolean]isCNPJValid(String)", "name": "isCNPJValid", "arg_nums": 1, "params": [{"name": "cnpj", "type": "String"}], "return_type": "boolean", "signature": "public static boolean isCNPJValid(final String cnpj)", "original_string": "    public static boolean isCNPJValid(final String cnpj) {\n        String cnpjUnmask = DocumentFormatterUtil.unmask(cnpj);\n        final int cnpjPartialLength = 12;\n        if (!cnpjUnmask.regionMatches(0, cnpjUnmask, 0, cnpjPartialLength)) {\n            return false;\n        }\n\n        int d1 = digit(calculateWeight(cnpjUnmask, 9, 4, cnpjPartialLength) + calculateWeight(cnpjUnmask, 5, 0, 4));\n        int d2 = digit((d1 * 2) + calculateWeight(cnpjUnmask, 9, 5, cnpjPartialLength) + calculateWeight(cnpjUnmask, 6, 0, 5));\n\n\n        final String other = d1 + \"\" + d2;\n        return cnpjUnmask.regionMatches(cnpjPartialLength, other, 0, other.length());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java", "class_name": "IdNumberGeneratorPtBrUtil", "class_uri": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturn true if the CNPJ is valid\nA valid CNPJ is unique and have an algorithm to validate it\n<p>\nCNPJ generator could generate a valid or invalid because, sometimes, we need to test a\nregistration with invalid number\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil.[Boolean]isCPFValid(String)", "name": "isCPFValid", "arg_nums": 1, "params": [{"name": "cpf", "type": "String"}], "return_type": "Boolean", "signature": "public static Boolean isCPFValid(final String cpf)", "original_string": "    public static Boolean isCPFValid(final String cpf) {\n        String cpfUnmask = DocumentFormatterUtil.unmask(cpf);\n\n        String cpfPartial = cpfUnmask.substring(0, 9);\n\n        int d1 = digit(calculateWeight(cpfUnmask, 10, 0, 9));\n        int d2 = digit((d1 * 2) + calculateWeight(cpfUnmask, 11, 0, 9));\n\n        return cpfUnmask.equals((cpfPartial + d1) + d2);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java", "class_name": "IdNumberGeneratorPtBrUtil", "class_uri": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Boolean", "classes": []}, "docstring": "\nReturn true if the CPF is valid\nA valid CPF is unique and have a algorithm to validate it\n<p>\nCPF generator could generate a valid or invalid because, sometimes, we need to test a\nregistration with invalid number\n"}, {"uris": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil.[int]calculateWeight(String,int,int,int)", "name": "calculateWeight", "arg_nums": 4, "params": [{"name": "num", "type": "String"}, {"name": "weight", "type": "int"}, {"name": "start", "type": "int"}, {"name": "end", "type": "int"}], "return_type": "int", "signature": "public static int calculateWeight(final String num, final int weight, int start, int end)", "original_string": "    public static int calculateWeight(final String num, final int weight, int start, int end) {\n        int sum = 0;\n        int weightAux = weight;\n\n        for (int index = start; index < end; index++) {\n            sum += (num.charAt(index) - '0') * weightAux--;\n        }\n        return sum;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java", "class_name": "IdNumberGeneratorPtBrUtil", "class_uri": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil.[int]digit(int)", "name": "digit", "arg_nums": 1, "params": [{"name": "verifyingDigit", "type": "int"}], "return_type": "int", "signature": "public static int digit(int verifyingDigit)", "original_string": "    public static int digit(int verifyingDigit) {\n        int remainder = verifyingDigit % 11;\n        if (remainder == 0 || remainder == 1)\n            return 0;\n        else\n            return 11 - remainder;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java", "class_name": "IdNumberGeneratorPtBrUtil", "class_uri": "src/main/java/net/datafaker/idnumbers/pt/br/IdNumberGeneratorPtBrUtil.java.IdNumberGeneratorPtBrUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java.DocumentFormatterUtil.[]DocumentFormatterUtil()", "name": "DocumentFormatterUtil", "arg_nums": 0, "params": [], "return_type": "", "signature": "private DocumentFormatterUtil()", "original_string": "    private DocumentFormatterUtil() {\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java", "class_name": "DocumentFormatterUtil", "class_uri": "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java.DocumentFormatterUtil", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java.DocumentFormatterUtil.[String]cnpj(String)", "name": "cnpj", "arg_nums": 1, "params": [{"name": "cnpj", "type": "String"}], "return_type": "String", "signature": "public static String cnpj(String cnpj)", "original_string": "    public static String cnpj(String cnpj) {\n        final char[] input = cnpj.toCharArray();\n        final char[] res = new char[cnpj.length() + 4];\n        // Format should be ##.###.###/####-##\n        System.arraycopy(input, 0, res, 0, 2);\n        res[2] = '.';\n        System.arraycopy(input, 2, res, 3, 3);\n        res[6] = '.';\n        System.arraycopy(input, 5, res, 7, 3);\n        res[10] = '/';\n        System.arraycopy(input, 8, res, 11, 4);\n        res[15] = '-';\n        System.arraycopy(input, 12, res, 16, cnpj.length() - 12);\n        return String.valueOf(res);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java", "class_name": "DocumentFormatterUtil", "class_uri": "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java.DocumentFormatterUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java.DocumentFormatterUtil.[String]cpf(String)", "name": "cpf", "arg_nums": 1, "params": [{"name": "cpf", "type": "String"}], "return_type": "String", "signature": "public static String cpf(String cpf)", "original_string": "    public static String cpf(String cpf) {\n        char[] input = cpf.toCharArray();\n        char[] res = new char[input.length + 3];\n        System.arraycopy(input, 0, res, 0, 3);\n        res[3] = '.';\n        System.arraycopy(input, 3, res, 4, 3);\n        res[7] = '.';\n        System.arraycopy(input, 6, res, 8, 3);\n        res[11] = '-';\n        System.arraycopy(input, 9, res, 12, input.length - 9);\n        return String.valueOf(res);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java", "class_name": "DocumentFormatterUtil", "class_uri": "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java.DocumentFormatterUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java.DocumentFormatterUtil.[String]unmask(String)", "name": "unmask", "arg_nums": 1, "params": [{"name": "doc", "type": "String"}], "return_type": "String", "signature": "public static String unmask(String doc)", "original_string": "    public static String unmask(String doc) {\n        final char[] res = new char[doc.length()];\n        int index = 0;\n        for (int i = 0; i < doc.length(); i++) {\n            final char c = doc.charAt(i);\n            if (Character.isDigit(c)) {\n                res[index++] = c;\n            }\n        }\n        return String.valueOf(res, 0, index);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java", "class_name": "DocumentFormatterUtil", "class_uri": "src/main/java/net/datafaker/idnumbers/pt/br/DocumentFormatterUtil.java.DocumentFormatterUtil", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[void]updateFakeValuesInterfaceMap(List<SingletonLocale>)", "name": "updateFakeValuesInterfaceMap", "arg_nums": 1, "params": [{"name": "locales", "type": "List<SingletonLocale>"}], "return_type": "void", "signature": "public void updateFakeValuesInterfaceMap(List<SingletonLocale> locales)", "original_string": "    public void updateFakeValuesInterfaceMap(List<SingletonLocale> locales) {\n        for (final SingletonLocale l : locales) {\n            fakeValuesInterfaceMap.computeIfAbsent(l, this::getCachedFakeValue);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[FakeValuesInterface]getCachedFakeValue(SingletonLocale)", "name": "getCachedFakeValue", "arg_nums": 1, "params": [{"name": "locale", "type": "SingletonLocale"}], "return_type": "FakeValuesInterface", "signature": "private FakeValuesInterface getCachedFakeValue(SingletonLocale locale)", "original_string": "    private FakeValuesInterface getCachedFakeValue(SingletonLocale locale) {\n        if (DEFAULT_LOCALE == locale) {\n            return FakeValuesGrouping.getEnglishFakeValueGrouping();\n        }\n\n        return FakeValues.of(FakeValuesContext.of(locale.getLocale()));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "FakeValuesInterface", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[void]addPath(Locale,Path)", "name": "addPath", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "path", "type": "Path"}], "return_type": "void", "signature": "public void addPath(Locale locale, Path path)", "original_string": "    public void addPath(Locale locale, Path path) {\n        requireNonNull(locale);\n        if (path == null || Files.notExists(path) || Files.isDirectory(path) || !Files.isReadable(path)) {\n            throw new IllegalArgumentException(\"Path should be an existing readable file: \\\"%s\\\"\".formatted(path));\n        }\n        try {\n            addUrl(locale, path.toUri().toURL());\n        } catch (MalformedURLException e) {\n            throw new IllegalArgumentException(\"Failed to read \\\"%s\\\"\".formatted(path), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAllows adding paths to files with custom data. Data should be in YAML format.\n\n@param locale the locale for which a path is going to be added.\n@param path   path to a file with YAML structure\n@throws IllegalArgumentException in case of invalid path\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[void]addUrl(Locale,URL)", "name": "addUrl", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "url", "type": "URL"}], "return_type": "void", "signature": "public void addUrl(Locale locale, URL url)", "original_string": "    public void addUrl(Locale locale, URL url) {\n        requireNonNull(locale);\n        if (url == null) {\n            throw new IllegalArgumentException(\"url should be an existing readable file\");\n        }\n        final FakeValues fakeValues = FakeValues.of(FakeValuesContext.of(locale, url));\n        final SingletonLocale sLocale = SingletonLocale.get(locale);\n        fakeValuesInterfaceMap.merge(sLocale, fakeValues,\n            (prevValue, newValue) -> {\n                FakeValuesGrouping fvg = new FakeValuesGrouping();\n                fvg.add(prevValue);\n                fvg.add(newValue);\n                return fvg;\n            });\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAllows adding urls of files with custom data. Data should be in YAML format.\n\n@param locale  the locale for which an url is going to be added.\n@param url     url of a file with YAML structure\n@throws IllegalArgumentException in case of invalid url\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[Object]fetch(String,FakerContext)", "name": "fetch", "arg_nums": 2, "params": [{"name": "key", "type": "String"}, {"name": "context", "type": "FakerContext"}], "return_type": "Object", "signature": "public Object fetch(String key, FakerContext context)", "original_string": "    public Object fetch(String key, FakerContext context) {\n        List<?> valuesArray = null;\n        final Object o = fetchObject(key, context);\n        if (o instanceof List) {\n            valuesArray = (List<?>) o;\n            final int size = valuesArray.size();\n            if (size == 0) {\n                return null;\n            }\n            if (size == 1) {\n                return valuesArray.get(0);\n            }\n        }\n        return valuesArray == null\n            ? null : valuesArray.get(context.getRandomService().nextInt(valuesArray.size()));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nFetch a random value from an array item specified by the key\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]fetchString(String,FakerContext)", "name": "fetchString", "arg_nums": 2, "params": [{"name": "key", "type": "String"}, {"name": "context", "type": "FakerContext"}], "return_type": "String", "signature": "public String fetchString(String key, FakerContext context)", "original_string": "    public String fetchString(String key, FakerContext context) {\n        return (String) fetch(key, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nSame as {@link #fetch(String, FakerContext)} except this casts the result into a String.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]safeFetch(String,FakerContext,String)", "name": "safeFetch", "arg_nums": 3, "params": [{"name": "key", "type": "String"}, {"name": "context", "type": "FakerContext"}, {"name": "defaultIfNull", "type": "String"}], "return_type": "String", "signature": "@SuppressWarnings(\"unchecked\")\n    public String safeFetch(String key, FakerContext context, String defaultIfNull)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    public String safeFetch(String key, FakerContext context, String defaultIfNull) {\n        Object o = fetchObject(key, context);\n        String str;\n        if (o == null) return defaultIfNull;\n        if (o instanceof List) {\n            final List<String> values = (List<String>) o;\n            final int size = values.size();\n            return switch (size) {\n                case 0 -> defaultIfNull;\n                case 1 -> values.get(0);\n                default -> values.get(context.getRandomService().nextInt(size));\n            };\n        } else if (isSlashDelimitedRegex(str = o.toString())) {\n            return \"#{regexify '%s'}\".formatted(trimRegexSlashes(str));\n        } else {\n            return (String) o;\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nSafely fetches a key.\n<p>\nIf the value is null, it will return an empty string.\n<p>\nIf it is a list, it will assume it is a list of strings and select a random value from it.\n<p>\nIf the retrieved value is an slash encoded regular expression such as {@code /[a-b]/} then\nthe regex will be converted to a regexify expression and returned (ex. {@code #regexify '[a-b]'})\n<p>\nOtherwise, it will just return the value as a string.\n\n@param key           the key to fetch from the YML structure.\n@param defaultIfNull the value to return if the fetched value is null\n@return see above\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[T]fetchObject(String,FakerContext)", "name": "fetchObject", "arg_nums": 2, "params": [{"name": "key", "type": "String"}, {"name": "context", "type": "FakerContext"}], "return_type": "T", "signature": "@SuppressWarnings(\"unchecked\")\n    public <T> T fetchObject(String key, FakerContext context)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    public <T> T fetchObject(String key, FakerContext context) {\n        Object result = null;\n        final List<SingletonLocale> localeChain = context.getLocaleChain();\n        final boolean hasMoreThanOneLocales = localeChain.size() > 1;\n        for (SingletonLocale sLocale : localeChain) {\n            // exclude default locale from cache checks\n            if (sLocale == DEFAULT_LOCALE && hasMoreThanOneLocales) {\n                continue;\n            }\n            Map<String, Object> stringObjectMap = key2fetchedObject.get(sLocale);\n            if (stringObjectMap != null && (result = stringObjectMap.get(key)) != null) {\n                return (T) result;\n            }\n        }\n\n        String[] path = split(key);\n        SingletonLocale local2Add = null;\n        path[0] = path[0].toLowerCase(Locale.ROOT);\n        for (SingletonLocale sLocale : localeChain) {\n            Object currentValue = fakeValuesInterfaceMap.get(sLocale);\n            for (int p = 0; currentValue != null && p < path.length; p++) {\n                String currentPath = path[p];\n                if (currentValue instanceof Map) {\n                    currentValue = ((Map<?, ?>) currentValue).get(currentPath);\n                } else {\n                    currentValue = ((FakeValuesInterface) currentValue).get(currentPath);\n                }\n            }\n            result = currentValue;\n            if (result != null) {\n                local2Add = sLocale;\n                break;\n            }\n        }\n        if (local2Add != null) {\n            Object curResult = key2fetchedObject.getOrDefault(local2Add, Collections.emptyMap())\n                .get(key);\n            if (curResult != null) {\n                return (T) result;\n            }\n            key2fetchedObject.updateNestedValue(local2Add, MAP_STRING_OBJECT_SUPPLIER, key, result);\n        }\n        if (result instanceof List list) {\n            for (int i = 0; i < list.size(); i++) {\n                Object item = list.get(i);\n                if (!(item instanceof String itemStr)) {\n                    break;\n                }\n                final int itemStrLength = itemStr.length();\n                if (itemStrLength < 2) {\n                    break;\n                }\n                int j = 0;\n                StringBuilder sb = null;\n                int start = 0;\n                while (j < itemStrLength) {\n                    char c;\n                    while (j < itemStrLength - 2 && ((itemStr.charAt(j)) != '#' || itemStr.charAt(j + 1) != '{')) j++;\n                    int startWord = j + 2;\n                    boolean letterOrDigitOnly = true;\n                    j = startWord;\n                    while (j < itemStrLength && (c = itemStr.charAt(j)) != '}') {\n                        letterOrDigitOnly &= Character.isLetter(c) || Character.isDigit(c) || c == '_';\n                        j++;\n                    }\n                    if (start < itemStrLength&&  startWord < itemStrLength && letterOrDigitOnly) {\n                        if (sb == null) {\n                            sb = new StringBuilder();\n                        }\n                        sb.append(itemStr, start, startWord);\n                        sb.append(WordUtils.capitalize(path[0])).append(\".\").append(toJavaNames(itemStr.substring(startWord, j), true)).append(\"}\");\n                        start = j + 1;\n                    }\n                }\n                if (sb != null) {\n                    if (start < itemStrLength) {\n                        sb.append(itemStr, start, itemStrLength);\n                    }\n                    list.set(i, sb.toString());\n                }\n            }\n        }\n        return (T) result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nReturn the object selected by the key from yaml file.\n\n@param key key contains path to an object. Path segment is separated by\n           dot. E.g. name.first_name\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String[]]split(String)", "name": "split", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "String[]", "signature": "private String[] split(String string)", "original_string": "    private String[] split(String string) {\n        String[] result = KEY_2_SPLITTED_KEY.get(string);\n        if (result != null) {\n            return result;\n        }\n        int size = 0;\n        final char splitChar = '.';\n        final int length = string.length();\n        for (int i = 0; i < length; i++) {\n            if (string.charAt(i) == splitChar) {\n                size++;\n            }\n        }\n        result = new String[size + 1];\n        final char[] chars = string.toCharArray();\n        int start = 0;\n        int j = 0;\n        for (int i = 0; i < length; i++) {\n            if (string.charAt(i) == splitChar) {\n                if (i - start > 0) {\n                    result[j++] = String.valueOf(chars, start, i - start);\n                }\n                start = i + 1;\n            }\n        }\n        result[j] = String.valueOf(chars, start, chars.length - start);\n        KEY_2_SPLITTED_KEY.putIfAbsent(string, result);\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]numerify(String,FakerContext)", "name": "numerify", "arg_nums": 2, "params": [{"name": "numberString", "type": "String"}, {"name": "context", "type": "FakerContext"}], "return_type": "String", "signature": "public String numerify(String numberString, FakerContext context)", "original_string": "    public String numerify(String numberString, FakerContext context) {\n        return bothify(numberString, context, false, true, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with the '#' characters in the parameter replaced with random digits between 0-9 inclusive or\nrandom digits in the range from 1-9 when \u00d8 (not zero) is used.\n<p>\nFor example, the string \"ABC##EFG\" could be replaced with a string like \"ABC99EFG\".\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]bothify(String,FakerContext)", "name": "bothify", "arg_nums": 2, "params": [{"name": "string", "type": "String"}, {"name": "context", "type": "FakerContext"}], "return_type": "String", "signature": "public String bothify(String string, FakerContext context)", "original_string": "    public String bothify(String string, FakerContext context) {\n        return bothify(string, context, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nApplies both a {@link #numerify(String, FakerContext)} and a {@link #letterify(String, FakerContext)}\nover the incoming string.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]bothify(String,FakerContext,boolean)", "name": "bothify", "arg_nums": 3, "params": [{"name": "input", "type": "String"}, {"name": "context", "type": "FakerContext"}, {"name": "isUpper", "type": "boolean"}], "return_type": "String", "signature": "public String bothify(String input, FakerContext context, boolean isUpper)", "original_string": "    public String bothify(String input, FakerContext context, boolean isUpper) {\n        return bothify(input, context, isUpper, true, true);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nApplies both a {@link #numerify(String, FakerContext)} and a {@link #letterify(String, FakerContext, boolean)}\nover the incoming string.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]bothify(String,FakerContext,boolean,boolean,boolean)", "name": "bothify", "arg_nums": 5, "params": [{"name": "input", "type": "String"}, {"name": "context", "type": "FakerContext"}, {"name": "isUpper", "type": "boolean"}, {"name": "numerify", "type": "boolean"}, {"name": "letterify", "type": "boolean"}], "return_type": "String", "signature": "private String bothify(String input, FakerContext context, boolean isUpper, boolean numerify, boolean letterify)", "original_string": "    private String bothify(String input, FakerContext context, boolean isUpper, boolean numerify, boolean letterify) {\n        final int baseChar = isUpper ? 'A' : 'a';\n        final char[] res = input.toCharArray();\n        for (int i = 0; i < res.length; i++) {\n            switch (res[i]) {\n                case '#' -> {\n                    if (numerify) {\n                        res[i] = DIGITS[context.getRandomService().nextInt(10)];\n                    }\n                }\n                case '\u00d8' -> {\n                    if (numerify) {\n                        res[i] = DIGITS[context.getRandomService().nextInt(1, 9)];\n                    }\n                }\n                case '?' -> {\n                    if (letterify) {\n                        res[i] = (char) (baseChar + context.getRandomService().nextInt(26)); // a-z\n                    }\n                }\n                default -> {\n                }\n            }\n        }\n\n        return String.valueOf(res);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]regexify(String,FakerContext)", "name": "regexify", "arg_nums": 2, "params": [{"name": "regex", "type": "String"}, {"name": "context", "type": "FakerContext"}], "return_type": "String", "signature": "public String regexify(String regex, FakerContext context)", "original_string": "    public String regexify(String regex, FakerContext context) {\n        RgxGen rgxGen = expression2generex.get(regex);\n        if (rgxGen == null) {\n            rgxGen = RgxGen.parse(regex);\n            expression2generex.putIfAbsent(regex, rgxGen);\n        }\n        return rgxGen.generate(context.getRandomService().getRandomInternal());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a String that matches the given regular expression.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]examplify(String,FakerContext)", "name": "examplify", "arg_nums": 2, "params": [{"name": "example", "type": "String"}, {"name": "context", "type": "FakerContext"}], "return_type": "String", "signature": "public String examplify(String example, FakerContext context)", "original_string": "    public String examplify(String example, FakerContext context) {\n        if (example == null) {\n            return null;\n        }\n        final char[] chars = example.toCharArray();\n\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                chars[i] = letterify(\"?\", context, Character.isUpperCase(chars[i])).charAt(0);\n            } else if (Character.isDigit(chars[i])) {\n                chars[i] = DIGITS[context.getRandomService().nextInt(10)];\n            }\n        }\n\n        return String.valueOf(chars);\n\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates a String by example. The output string will have the same pattern as the input string.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]letterify(String,FakerContext)", "name": "letterify", "arg_nums": 2, "params": [{"name": "letterString", "type": "String"}, {"name": "context", "type": "FakerContext"}], "return_type": "String", "signature": "public String letterify(String letterString, FakerContext context)", "original_string": "    public String letterify(String letterString, FakerContext context) {\n        return this.letterify(letterString, context, false);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with the '?' characters in the parameter replaced with random alphabetic\ncharacters.\n<p>\nFor example, the string \"12??34\" could be replaced with a string like \"12AB34\".\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]letterify(String,FakerContext,boolean)", "name": "letterify", "arg_nums": 3, "params": [{"name": "letterString", "type": "String"}, {"name": "context", "type": "FakerContext"}, {"name": "isUpper", "type": "boolean"}], "return_type": "String", "signature": "public String letterify(String letterString, FakerContext context, boolean isUpper)", "original_string": "    public String letterify(String letterString, FakerContext context, boolean isUpper) {\n        return bothify(letterString, context, isUpper, false, true);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with the '?' characters in the parameter replaced with random alphabetic\ncharacters.\n<p>\nFor example, the string \"12??34\" could be replaced with a string like \"12AB34\".\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]templatify(String,char,FakerContext)", "name": "templatify", "arg_nums": 3, "params": [{"name": "letterString", "type": "String"}, {"name": "char2replace", "type": "char"}, {"name": "context", "type": "FakerContext"}], "return_type": "String", "signature": "public String templatify(String letterString, char char2replace, FakerContext context, String... options)", "original_string": "    public String templatify(String letterString, char char2replace, FakerContext context, String... options) {\n        return templatify(letterString, Map.of(char2replace, options), context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with the char2replace characters in the parameter replaced with random alphabetic\ncharacters from options\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]templatify(String,Map<Character, String[]>,FakerContext)", "name": "templatify", "arg_nums": 3, "params": [{"name": "letterString", "type": "String"}, {"name": "optionsMap", "type": "Map<Character, String[]>"}, {"name": "context", "type": "FakerContext"}], "return_type": "String", "signature": "public String templatify(String letterString, Map<Character, String[]> optionsMap, FakerContext context)", "original_string": "    public String templatify(String letterString, Map<Character, String[]> optionsMap, FakerContext context) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < letterString.length(); i++) {\n            final char key = letterString.charAt(i);\n            if (optionsMap.containsKey(key)) {\n                final String[] options = optionsMap.get(key);\n                requireNonNull(options, \"Array with available options should be non null\");\n                sb.append(options[context.getRandomService().nextInt(options.length)]);\n            } else {\n                sb.append(key);\n            }\n        }\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string with the optionsMap.getKeys() characters in the parameter replaced with random alphabetic\ncharacters from corresponding optionsMap.values()\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]resolve(String,Object,BaseFaker,FakerContext)", "name": "resolve", "arg_nums": 4, "params": [{"name": "key", "type": "String"}, {"name": "current", "type": "Object"}, {"name": "root", "type": "BaseFaker"}, {"name": "context", "type": "FakerContext"}], "return_type": "String", "signature": "public String resolve(String key, Object current, BaseFaker root, FakerContext context)", "original_string": "    public String resolve(String key, Object current, BaseFaker root, FakerContext context) {\n        return resolve(key, current, root, () -> key + \" resulted in null expression\", context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nResolves a key to a method on an object or throws an exception.\n<p>\n#{hello} with result in a method call to current.hello();\n<p>\n#{Person.hello_someone} will result in a method call to person.helloSomeone();\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]resolve(String,AbstractProvider<?>,FakerContext)", "name": "resolve", "arg_nums": 3, "params": [{"name": "key", "type": "String"}, {"name": "provider", "type": "AbstractProvider<?>"}, {"name": "context", "type": "FakerContext"}], "return_type": "String", "signature": "public String resolve(String key, AbstractProvider<?> provider, FakerContext context)", "original_string": "    public String resolve(String key, AbstractProvider<?> provider, FakerContext context) {\n        return resolve(key, provider, provider.getFaker(), () -> key + \" resulted in null expression\", context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]resolve(String,Object,ProviderRegistration,Supplier<String>,FakerContext)", "name": "resolve", "arg_nums": 5, "params": [{"name": "key", "type": "String"}, {"name": "current", "type": "Object"}, {"name": "root", "type": "ProviderRegistration"}, {"name": "exceptionMessage", "type": "Supplier<String>"}, {"name": "context", "type": "FakerContext"}], "return_type": "String", "signature": "public String resolve(String key, Object current, ProviderRegistration root, Supplier<String> exceptionMessage, FakerContext context)", "original_string": "    public String resolve(String key, Object current, ProviderRegistration root, Supplier<String> exceptionMessage, FakerContext context) {\n        String expression = root == null ? key2Expression.get(context.getSingletonLocale()).get(key) : null;\n        if (expression == null) {\n            expression = safeFetch(key, context, null);\n            if (root == null) {\n                key2Expression.updateNestedValue(context.getSingletonLocale(),\n                    MAP_STRING_STRING_SUPPLIER, key, expression);\n            }\n        }\n\n        if (expression == null) {\n            throw new RuntimeException(exceptionMessage.get());\n        }\n\n        return resolveExpression(expression, current, root, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nResolves a key to a method on an object or throws an exception with specified message.\n<p>\n#{hello} with result in a method call to current.hello();\n<p>\n#{Person.hello_someone} will result in a method call to person.helloSomeone();\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]expression(String,BaseFaker,FakerContext)", "name": "expression", "arg_nums": 3, "params": [{"name": "expression", "type": "String"}, {"name": "faker", "type": "BaseFaker"}, {"name": "context", "type": "FakerContext"}], "return_type": "String", "signature": "public String expression(String expression, BaseFaker faker, FakerContext context)", "original_string": "    public String expression(String expression, BaseFaker faker, FakerContext context) {\n        return resolveExpression(expression, null, faker, context);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nResolves an expression using the current faker.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]fileExpression(Path,BaseFaker,FakerContext)", "name": "fileExpression", "arg_nums": 3, "params": [{"name": "path", "type": "Path"}, {"name": "faker", "type": "BaseFaker"}, {"name": "context", "type": "FakerContext"}], "return_type": "String", "signature": "public String fileExpression(Path path, BaseFaker faker, FakerContext context)", "original_string": "    public String fileExpression(Path path, BaseFaker faker, FakerContext context) {\n        try {\n            return Files.readAllLines(path)\n                .stream().map(t -> expression(t, faker, context))\n                .collect(Collectors.joining(System.lineSeparator()));\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to read \\\"%s\\\"\".formatted(path), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nResolves an expression in file using the current faker.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]csv(int)", "name": "csv", "arg_nums": 1, "params": [{"name": "limit", "type": "int"}], "return_type": "String", "signature": "public String csv(int limit, String... columnExpressions)", "original_string": "    public String csv(int limit, String... columnExpressions) {\n        return csv(CsvTransformer.DEFAULT_SEPARATOR, CsvTransformer.DEFAULT_QUOTE, true, limit, columnExpressions);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates csv based on input column expressions and number of lines.\nThis method uses default separator, quote and always prints header.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]csv(String,char,boolean,int)", "name": "csv", "arg_nums": 4, "params": [{"name": "delimiter", "type": "String"}, {"name": "quote", "type": "char"}, {"name": "withHeader", "type": "boolean"}, {"name": "limit", "type": "int"}], "return_type": "String", "signature": "public String csv(String delimiter, char quote, boolean withHeader, int limit, String... columnExpressions)", "original_string": "    public String csv(String delimiter, char quote, boolean withHeader, int limit, String... columnExpressions) {\n        if ((columnExpressions.length & 1) == 1) {\n            throw new IllegalArgumentException(\"Total number of column names and column values should be even (received %s columns: %s)\".formatted(\n                columnExpressions.length, Arrays.toString(columnExpressions)));\n        }\n        Field<String, String>[] fields = new Field[columnExpressions.length >> 1];\n        for (int i = 0; i < columnExpressions.length; i += 2) {\n            final int index = i;\n            fields[i >> 1] = Field.field(columnExpressions[index], () -> columnExpressions[index + 1]);\n        }\n        Schema<String, String> schema = Schema.of(fields);\n        return CsvTransformer.<String>builder().separator(delimiter).quote(quote).header(withHeader)\n            .build().generate(schema, limit + 1);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates csv based on input.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]json()", "name": "json", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String json(String... fieldExpressions)", "original_string": "    public String json(String... fieldExpressions) {\n        if ((fieldExpressions.length & 1) == 1) {\n            throw new IllegalArgumentException(\"Total number of field names and field values should be even (received %s fields: %s)\".formatted(\n                fieldExpressions.length, Arrays.toString(fieldExpressions)));\n        }\n\n        List<SimpleField<Object, ?>> fields = new ArrayList<>();\n        for (int i = 0; i < fieldExpressions.length; i += 2) {\n            final int index = i;\n            fields.add(field(fieldExpressions[index], () -> fieldExpressions[index + 1]));\n        }\n        Schema<Object, ?> schema = Schema.of(fields.toArray(new SimpleField[0]));\n        return JSON_TRANSFORMER.generate(schema, 1);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates json based on input.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]jsona()", "name": "jsona", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String jsona(String... fieldExpressions)", "original_string": "    public String jsona(String... fieldExpressions) {\n        if (fieldExpressions.length % 3 != 0) {\n            throw new IllegalArgumentException((\"Total number of field names and field values should be dividable by 3 \" +\n                \"(received %s field expressions: %s)\").formatted(fieldExpressions.length, Arrays.toString(fieldExpressions)));\n        }\n\n        List<SimpleField<Object, ?>> fields = new ArrayList<>();\n        for (int i = 0; i < fieldExpressions.length; i += 3) {\n            final int index = i;\n            if (fieldExpressions[i] != null && Integer.parseInt(fieldExpressions[index]) > 0) {\n                Object[] objects = new Object[Integer.parseInt(fieldExpressions[index])];\n                Arrays.fill(objects, fieldExpressions[index + 2]);\n                fields.add(field(fieldExpressions[index + 1], () -> objects));\n            } else {\n                fields.add(field(fieldExpressions[index + 1], () -> fieldExpressions[index + 2]));\n            }\n        }\n        Schema<Object, ?> schema = Schema.of(fields.toArray(new SimpleField[0]));\n        return JSON_TRANSFORMER.generate(schema, 1);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGenerates json based on input.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]resolveExpression(String,Object,ProviderRegistration,FakerContext)", "name": "resolveExpression", "arg_nums": 4, "params": [{"name": "expression", "type": "String"}, {"name": "current", "type": "Object"}, {"name": "root", "type": "ProviderRegistration"}, {"name": "context", "type": "FakerContext"}], "return_type": "String", "signature": "protected String resolveExpression(String expression, Object current, ProviderRegistration root, FakerContext context)", "original_string": "    protected String resolveExpression(String expression, Object current, ProviderRegistration root, FakerContext context) {\n        // indexOf(<String>) is faster than indexOf(<char>) since it has jvm intrinsic\n        if (!expression.contains(\"}\")) {\n            return expression;\n        }\n        final int expressionLength = expression.length();\n        final String[] expressions = splitExpressions(expression, expressionLength);\n        final StringBuilder result = new StringBuilder(expressions.length * expressionLength);\n        for (int i = 0; i < expressions.length; i++) {\n            // odd are expressions, even are not expressions, just strings\n            final String expr = expressions[i];\n            if ((i & 1) == 0) {\n                if (!expr.isEmpty()) {\n                    result.append(expr);\n                }\n                continue;\n            }\n            final RegExpContext regExpContext = new RegExpContext(expr, root, context);\n            final ValueResolver val = REGEXP2SUPPLIER_MAP.get(regExpContext);\n            final Object resolved;\n            if (val != null) {\n                resolved = val.resolve();\n            } else {\n                int j = 0;\n                final int length = expr.length();\n                while (j < length && !Character.isWhitespace(expr.charAt(j))) j++;\n                String directive = expr.substring(0, j);\n                while (j < length && Character.isWhitespace(expr.charAt(j))) j++;\n                final String arguments = j == length ? \"\" : expr.substring(j);\n                final String[] args = splitArguments(arguments);\n                resolved = resExp(directive, args, current, root, context, regExpContext);\n            }\n            if (resolved == null) {\n                throw new RuntimeException(\"Unable to resolve #{\" + expr + \"} directive for FakerContext \" + context + \".\");\n            }\n            result.append(resolveExpression(Objects.toString(resolved), current, root, context));\n        }\n        return result.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nprocesses expression in the style #{X.y} using the current objects as the 'current' location\nwithin the yml file (or the {@link BaseFaker} object hierarchy as it were).\n<p>\n#{Address.streetName} would get resolved to {@link BaseFaker#address()}'s {@link Address#streetName()}\n#{address.street} would get resolved to the YAML like locale: faker: address: street:\nCombinations are supported as well: \"#{x} #{y}\"\n<p>\nRecursive templates are supported.  if \"#{x}\" resolves to \"#{Address.streetName}\" then \"#{x}\" resolves to\n{@link BaseFaker#address()}'s {@link Address#streetName()}.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String[]]splitArguments(String)", "name": "splitArguments", "arg_nums": 1, "params": [{"name": "arguments", "type": "String"}], "return_type": "String[]", "signature": "private String[] splitArguments(String arguments)", "original_string": "    private String[] splitArguments(String arguments) {\n        final int length;\n        if (arguments == null || (length = arguments.length()) == 0) {\n            return EMPTY_ARRAY;\n        }\n        String[] res = ARGS_2_SPLITTED_ARGS.get(arguments);\n        if (res != null) {\n            return res;\n        }\n        List<String> result = new ArrayList<>();\n        int start = 0;\n        boolean argsStarted = false;\n        for (int i = 0; i < length; i++) {\n            if (argsStarted) {\n                int cnt = 0;\n                while (i < length && arguments.charAt(i) == '\\'') {\n                    cnt++;\n                    i++;\n                }\n                if ((cnt & 1) == 1) {\n                    result.add(arguments.substring(start, i - 1).replace(\"''\", \"'\"));\n                    argsStarted = false;\n                }\n            } else if (arguments.charAt(i) == '\\'') {\n                argsStarted = true;\n                start = i + 1;\n            }\n        }\n        final String[] resultArray = result.toArray(EMPTY_ARRAY);\n\n        ARGS_2_SPLITTED_ARGS.putIfAbsent(arguments, resultArray);\n        return resultArray;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String[]]splitExpressions(String,int)", "name": "splitExpressions", "arg_nums": 2, "params": [{"name": "expression", "type": "String"}, {"name": "length", "type": "int"}], "return_type": "String[]", "signature": "private String[] splitExpressions(String expression, int length)", "original_string": "    private String[] splitExpressions(String expression, int length) {\n        String[] result = EXPRESSION_2_SPLITTED.get(expression);\n        if (result != null) {\n            return result;\n        }\n        int cnt = 0;\n        for (int i = 0; i < length; i++) {\n            if (expression.charAt(i) == '}') {\n                cnt++;\n            }\n        }\n        List<String> list = new ArrayList<>((cnt << 1) + 1);\n        boolean isExpression = false;\n        int start = 0;\n        int quoteCnt = 0;\n        for (int i = 0; i < length; i++) {\n            final char c = expression.charAt(i);\n            if (isExpression) {\n                if (c == '}' && (quoteCnt & 1) == 0) {\n                    list.add(expression.substring(start, i));\n                    start = i + 1;\n                    isExpression = false;\n                } else if (c == '\\'') {\n                    quoteCnt++;\n                }\n            } else if (i < length - 2 && c == '#' && expression.charAt(i + 1) == '{') {\n                list.add(expression.substring(start, i));\n                isExpression = true;\n                start = i + 2;\n                i++;\n            }\n        }\n        if (start < length) {\n            list.add(expression.substring(start));\n        }\n        result = list.toArray(EMPTY_ARRAY);\n        EXPRESSION_2_SPLITTED.putIfAbsent(expression, result);\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[Object]resExp(String,String[],Object,ProviderRegistration,FakerContext,RegExpContext)", "name": "resExp", "arg_nums": 6, "params": [{"name": "directive", "type": "String"}, {"name": "args", "type": "String[]"}, {"name": "current", "type": "Object"}, {"name": "root", "type": "ProviderRegistration"}, {"name": "context", "type": "FakerContext"}, {"name": "regExpContext", "type": "RegExpContext"}], "return_type": "Object", "signature": "private Object resExp(String directive, String[] args, Object current, ProviderRegistration root, FakerContext context, RegExpContext regExpContext)", "original_string": "    private Object resExp(String directive, String[] args, Object current, ProviderRegistration root, FakerContext context, RegExpContext regExpContext) {\n        Object res = resolveExpression(directive, args, current, root, context);\n        LOG.fine(() -> \"resExp(%s [%s]) current: %s, root: %s, context: %s, regExpContext: %s -> res: %s\".formatted(directive, Arrays.toString(args), current, root, context, regExpContext, res));\n        if (res instanceof CharSequence) {\n            if (((CharSequence) res).isEmpty()) {\n                REGEXP2SUPPLIER_MAP.put(regExpContext, EMPTY_STRING);\n            }\n            return res;\n        }\n        if (res instanceof List) {\n            Iterator<ValueResolver> it = ((List<ValueResolver>) res).iterator();\n            while (it.hasNext()) {\n                Object valueResolver = it.next();\n                Object value;\n                if (valueResolver instanceof ValueResolver resolver) {\n                    value = resolver.resolve();\n                    if (value == null) {\n                        it.remove();\n                    } else {\n                        REGEXP2SUPPLIER_MAP.put(regExpContext, resolver);\n                        return value;\n                    }\n                }\n            }\n            return null;\n        }\n        return res;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[Object]resolveExpression(String,String[],Object,ProviderRegistration,FakerContext)", "name": "resolveExpression", "arg_nums": 5, "params": [{"name": "directive", "type": "String"}, {"name": "args", "type": "String[]"}, {"name": "current", "type": "Object"}, {"name": "root", "type": "ProviderRegistration"}, {"name": "context", "type": "FakerContext"}], "return_type": "Object", "signature": "private Object resolveExpression(String directive, String[] args, Object current, ProviderRegistration root, FakerContext context)", "original_string": "    private Object resolveExpression(String directive, String[] args, Object current, ProviderRegistration root, FakerContext context) {\n        if (directive.isEmpty()) {\n            return directive;\n        }\n        final int dotIndex = getDotIndex(directive);\n\n        List<ValueResolver> res = new ArrayList<>();\n        if (args.length == 0) {\n            // resolve method references on CURRENT object like #{number_between '1','10'} on Number or\n            // #{ssn_valid} on IdNumber\n            if (dotIndex == -1) {\n                if (current instanceof AbstractProvider) {\n                    final Method method = BaseFaker.getMethod((AbstractProvider<?>) current, directive);\n                    if (method != null) {\n                        res.add(new MethodResolver(method, current, args));\n                        return res;\n                    }\n                }\n                res.add(resolveFromMethodOn(current, directive, args));\n            }\n            if (dotIndex > 0) {\n                String providerClassName = directive.substring(0, dotIndex);\n                String methodName = directive.substring(dotIndex + 1);\n                AbstractProvider<?> ap = root.getProvider(providerClassName);\n                Method method = ap == null ? null : ObjectMethods.getMethodByName(ap, methodName);\n                if (method != null) {\n                    res.add(new MethodResolver(method, ap, args));\n                    return res;\n                }\n            }\n        }\n        final String simpleDirective = (dotIndex >= 0 || current == null)\n            ? directive\n            : classNameToYamlName(current) + \".\" + directive;\n        // simple fetch of a value from the yaml file. the directive may have been mutated\n        // such that if the current yml object is car: and directive is #{wheel} then\n        // car.wheel will be looked up in the YAML file.\n        // It's only \"simple\" if there aren't args\n        if (args.length == 0) {\n            res.add(new SafeFetchResolver(simpleDirective, context));\n        }\n\n        // resolve method references on faker object like #{regexify '[a-z]'}\n        if (dotIndex == -1 && root != null && (current == null || root.getClass() != current.getClass())) {\n            res.add(resolveFromMethodOn(root, directive, args));\n        }\n\n        // Resolve Faker Object method references like #{ClassName.method_name}\n        if (dotIndex >= 0) {\n            res.add(resolveFakerObjectAndMethod(root, directive, dotIndex, args));\n        }\n\n        // last ditch effort.  Due to Ruby's dynamic nature, something like 'Address.street_title' will resolve\n        // because 'street_title' is a dynamic method on the Address object.  We can't do this in Java so we go\n        // through the normal resolution above, but if we will can't resolve it, we once again do a 'safeFetch' as we\n        // did first, but FIRST we change the Object reference Class.method_name with a yml style internal reference ->\n        // class.method_name (lowercase)\n        if (dotIndex >= 0) {\n            final String key = javaNameToYamlName(simpleDirective);\n            res.add(new SafeFetchResolver(key, context));\n        }\n\n        return res;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nSearch Order\n<ul>\n <li>Search for methods on the current object</li>\n <li>local keys in Yaml File</li>\n <li>Search for methods on faker child objects</li>\n  <li>Search for keys in yaml file by transforming object reference to yaml reference</li>\n</ul>\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[boolean]isSlashDelimitedRegex(String)", "name": "isSlashDelimitedRegex", "arg_nums": 1, "params": [{"name": "expression", "type": "String"}], "return_type": "boolean", "signature": "private boolean isSlashDelimitedRegex(String expression)", "original_string": "    private boolean isSlashDelimitedRegex(String expression) {\n        return expression != null && expression.startsWith(\"/\") && expression.endsWith(\"/\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n@param expression input expression\n@return true if s is non-null and is a slash delimited regex (ex. {@code /[ab]/})\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]trimRegexSlashes(String)", "name": "trimRegexSlashes", "arg_nums": 1, "params": [{"name": "slashDelimitedRegex", "type": "String"}], "return_type": "String", "signature": "private String trimRegexSlashes(String slashDelimitedRegex)", "original_string": "    private String trimRegexSlashes(String slashDelimitedRegex) {\n        return slashDelimitedRegex.substring(1, slashDelimitedRegex.length() - 1);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGiven a {@code slashDelimitedRegex} such as {@code /[ab]/}, removes the slashes and returns only {@code [ab]}\n\n@param slashDelimitedRegex a non null slash delimited regex (ex. {@code /[ab]/})\n@return the regex without the slashes (ex. {@code [ab]})\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[int]getDotIndex(String)", "name": "getDotIndex", "arg_nums": 1, "params": [{"name": "directive", "type": "String"}], "return_type": "int", "signature": "private int getDotIndex(String directive)", "original_string": "    private int getDotIndex(String directive) {\n        // indexOf(<String>) is faster than indexOf(<char>) since it has jvm intrinsic\n        return directive.indexOf(\".\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]classNameToYamlName(Object)", "name": "classNameToYamlName", "arg_nums": 1, "params": [{"name": "current", "type": "Object"}], "return_type": "String", "signature": "private String classNameToYamlName(Object current)", "original_string": "    private String classNameToYamlName(Object current) {\n        return javaNameToYamlName(current.getClass().getSimpleName());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a yaml style name from the classname of the supplied object (PhoneNumber => phone_number)\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]javaNameToYamlName(String)", "name": "javaNameToYamlName", "arg_nums": 1, "params": [{"name": "expression", "type": "String"}], "return_type": "String", "signature": "private String javaNameToYamlName(String expression)", "original_string": "    private String javaNameToYamlName(String expression) {\n        String result = NAME_2_YAML.get(expression);\n        if (result != null) {\n            return result;\n        }\n\n        final int length = expression.length();\n        final boolean firstLetterUpperCase = length > 0 && Character.isUpperCase(expression.charAt(0));\n        int cnt = firstLetterUpperCase ? 1 : 0;\n        for (int i = 1; i < length; i++) {\n            if (Character.isUpperCase(expression.charAt(i))) {\n                cnt++;\n            }\n        }\n        if (cnt == 0) {\n            NAME_2_YAML.putIfAbsent(expression, expression);\n            return expression;\n        }\n        final char[] res = new char[length + (firstLetterUpperCase ? cnt - 1 : cnt)];\n        int pos = 0;\n        for (int i = 0; i < length; i++) {\n            final char c = expression.charAt(i);\n            if (cnt > 0) {\n                if (Character.isUpperCase(c)) {\n                    if (pos > 0) {\n                        res[pos++] = '_';\n                    }\n                    res[pos++] = Character.toLowerCase(c);\n                    cnt--;\n                } else {\n                    res[pos++] = c;\n                }\n            } else {\n                res[pos++] = c;\n            }\n        }\n        result = new String(res);\n        NAME_2_YAML.putIfAbsent(expression, result);\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return a yaml style name like 'phone_number' from a java style name like 'PhoneNumber'\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[ValueResolver]resolveFromMethodOn(Object,String,String[])", "name": "resolveFromMethodOn", "arg_nums": 3, "params": [{"name": "obj", "type": "Object"}, {"name": "directive", "type": "String"}, {"name": "args", "type": "String[]"}], "return_type": "ValueResolver", "signature": "private ValueResolver resolveFromMethodOn(Object obj, String directive, String[] args)", "original_string": "    private ValueResolver resolveFromMethodOn(Object obj, String directive, String[] args) {\n        if (obj == null) {\n            return null;\n        }\n        final MethodAndCoercedArgs accessor = retrieveMethodAccessor(obj, directive, args);\n        return accessor == null ? NULL_VALUE : new MethodAndCoercedArgsResolver(accessor, obj);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "ValueResolver", "classes": []}, "docstring": "\nGiven a directive like 'firstName', attempts to resolve it to a method.  For example if obj is an instance of\n{@link Name} then this method would return {@link Name#firstName()}.  Returns null if the directive is nested\n(i.e. has a '.') or the method doesn't exist on the <em>obj</em> object.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[ValueResolver]resolveFakerObjectAndMethod(ProviderRegistration,String,int,String[])", "name": "resolveFakerObjectAndMethod", "arg_nums": 4, "params": [{"name": "faker", "type": "ProviderRegistration"}, {"name": "key", "type": "String"}, {"name": "dotIndex", "type": "int"}, {"name": "args", "type": "String[]"}], "return_type": "ValueResolver", "signature": "private ValueResolver resolveFakerObjectAndMethod(ProviderRegistration faker, String key, int dotIndex, String[] args)", "original_string": "    private ValueResolver resolveFakerObjectAndMethod(ProviderRegistration faker, String key, int dotIndex, String[] args) {\n        final String[] classAndMethod;\n        if (dotIndex == -1) {\n            classAndMethod = new String[]{key};\n        } else {\n            classAndMethod = new String[]{key.substring(0, dotIndex), dotIndex == key.length() - 1 ? \"\" : key.substring(dotIndex + 1)};\n        }\n\n        try {\n            String fakerMethodName = removeUnderscoreChars(classAndMethod[0]);\n            final MethodAndCoercedArgs fakerAccessor = retrieveMethodAccessor(faker, fakerMethodName, EMPTY_ARRAY);\n            if (fakerAccessor == null) {\n                LOG.fine(() -> \"Can't find top level faker object named \" + fakerMethodName + \".\");\n                return null;\n            }\n            Object objectWithMethodToInvoke = fakerAccessor.invoke(faker);\n            String nestedMethodName = removeUnderscoreChars(classAndMethod[1]);\n            final MethodAndCoercedArgs accessor = retrieveMethodAccessor(objectWithMethodToInvoke, nestedMethodName, args);\n            if (accessor == null) {\n                return NULL_VALUE;\n            }\n\n            return new MethodAndCoercedArgsResolver(accessor, objectWithMethodToInvoke);\n        } catch (InvocationTargetException | IllegalAccessException e) {\n            throw new RuntimeException(\"Failed to resolve faker object and method for %s (dotIndex=%s, args=%s)\"\n                .formatted(key, dotIndex, Arrays.toString(args)), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "ValueResolver", "classes": []}, "docstring": "\nAccepts a {@link BaseFaker} instance and a name.firstName style 'key' which is resolved to the return value of:\n{@link BaseFaker#name()}'s {@link Name#firstName()} method.\n\n@throws RuntimeException if there's a problem invoking the method, or it doesn't exist.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[MethodAndCoercedArgs]retrieveMethodAccessor(Object,String,String[])", "name": "retrieveMethodAccessor", "arg_nums": 3, "params": [{"name": "object", "type": "Object"}, {"name": "methodName", "type": "String"}, {"name": "args", "type": "String[]"}], "return_type": "MethodAndCoercedArgs", "signature": "private MethodAndCoercedArgs retrieveMethodAccessor(Object object, String methodName, String[] args)", "original_string": "    private MethodAndCoercedArgs retrieveMethodAccessor(Object object, String methodName, String[] args) {\n        Class<?> clazz = object.getClass();\n        Map<String[], MethodAndCoercedArgs> accessorMap =\n            MAP_OF_METHOD_AND_COERCED_ARGS\n                .getOrDefault(clazz, Collections.emptyMap())\n                .getOrDefault(methodName, Collections.emptyMap());\n        // value could be null\n        if (accessorMap.containsKey(args)) {\n            return accessorMap.get(args);\n        }\n        final MethodAndCoercedArgs accessor = accessor(clazz, methodName, args);\n        final Map<String, Map<String[], MethodAndCoercedArgs>> stringMapMap =\n            MAP_OF_METHOD_AND_COERCED_ARGS.computeIfAbsent(clazz, t -> new CopyOnWriteMap<>(WeakHashMap::new));\n        stringMapMap.putIfAbsent(methodName, new CopyOnWriteMap<>(WeakHashMap::new));\n        stringMapMap.get(methodName).putIfAbsent(args, accessor);\n        if (accessor == null) {\n            LOG.fine(() -> \"Can't find method on %s called %s.\".formatted(object.getClass().getSimpleName(), methodName));\n        }\n        return accessor;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "MethodAndCoercedArgs", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[MethodAndCoercedArgs]accessor(Class<?>,String,String[])", "name": "accessor", "arg_nums": 3, "params": [{"name": "clazz", "type": "Class<?>"}, {"name": "accessorName", "type": "String"}, {"name": "args", "type": "String[]"}], "return_type": "MethodAndCoercedArgs", "signature": "private MethodAndCoercedArgs accessor(Class<?> clazz, final String accessorName, String[] args)", "original_string": "    private MethodAndCoercedArgs accessor(Class<?> clazz, final String accessorName, String[] args) {\n        LOG.fine(() -> \"Find accessor named %s on %s with args %s\".formatted(accessorName, clazz.getSimpleName(), Arrays.toString(args)));\n        String name = removeUnderscoreChars(accessorName);\n        final Collection<Method> methods;\n        if (CLASS_2_METHODS_CACHE.containsKey(clazz)) {\n            methods = CLASS_2_METHODS_CACHE.get(clazz).getOrDefault(name, Collections.emptyList());\n            LOG.fine(() -> \"Found accessor named %s on %s in cache: %s\".formatted(accessorName, clazz.getSimpleName(), methods));\n        } else {\n            Method[] classMethods = clazz.getMethods();\n            Map<String, Collection<Method>> methodMap =\n                classMethods.length == 0 ? Collections.emptyMap() : new HashMap<>(classMethods.length);\n            for (Method m : classMethods) {\n                final String key = m.getName().toLowerCase(Locale.ROOT);\n                methodMap.computeIfAbsent(key, k -> new ArrayList<>());\n                methodMap.get(key).add(m);\n            }\n            CLASS_2_METHODS_CACHE.putIfAbsent(clazz, methodMap);\n            LOG.fine(() -> \"Detected accessor named %s on %s, stored to cache: %s\".formatted(accessorName, clazz.getSimpleName(), methodMap));\n\n            methods = methodMap.get(name);\n            LOG.fine(() -> \"Detected accessor named %s on %s and taken from cache: %s\".formatted(accessorName, clazz.getSimpleName(), methods));\n        }\n        if (methods == null) {\n            LOG.fine(() -> \"Didn't accessor named %s on %s with args %s (methods=%s)\".formatted(accessorName, clazz.getSimpleName(), Arrays.toString(args), null));\n            return null;\n        }\n        for (Method m : methods) {\n            if (m.getParameterCount() == args.length || m.getParameterCount() < args.length && m.isVarArgs()) {\n                final Object[] coercedArguments = args.length == 0 ? EMPTY_ARRAY : coerceArguments(m, args);\n                if (coercedArguments != null) {\n                    return new MethodAndCoercedArgs(m, coercedArguments);\n                }\n            }\n        }\n        LOG.fine(() -> \"Didn't accessor named %s on %s with args %s (methods=%s)\".formatted(accessorName, clazz.getSimpleName(), Arrays.toString(args), methods));\n        return null;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "MethodAndCoercedArgs", "classes": []}, "docstring": "\nFind an accessor by name ignoring case.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[String]removeUnderscoreChars(String)", "name": "removeUnderscoreChars", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "String", "signature": "private String removeUnderscoreChars(String string)", "original_string": "    private String removeUnderscoreChars(String string) {\n        String valueWithRemovedUnderscores = REMOVED_UNDERSCORE.get(string);\n        if (valueWithRemovedUnderscores != null) {\n            return valueWithRemovedUnderscores;\n        }\n        // indexOf(<String>) is faster than indexOf(<char>) since it has jvm intrinsic\n        if (!string.contains(\"_\")) {\n            REMOVED_UNDERSCORE.putIfAbsent(string, string.toLowerCase(Locale.ROOT));\n            return string;\n        }\n        final char[] res = string.toCharArray();\n        int offset = 0;\n        int length = 0;\n        final int strLen = string.length();\n        for (int i = strLen - 1; i >= offset; i--) {\n            while (i > offset && string.charAt(i - offset) == '_') {\n                offset++;\n            }\n            res[i] = res[i - offset];\n            if (res[i] != '_') {\n                length++;\n            }\n        }\n        valueWithRemovedUnderscores = String.valueOf(res, strLen - length, length);\n        REMOVED_UNDERSCORE.putIfAbsent(string, valueWithRemovedUnderscores.toLowerCase(Locale.ROOT));\n        return valueWithRemovedUnderscores;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[Object[]]coerceArguments(Method,String[])", "name": "coerceArguments", "arg_nums": 2, "params": [{"name": "accessor", "type": "Method"}, {"name": "args", "type": "String[]"}], "return_type": "Object[]", "signature": "private Object[] coerceArguments(Method accessor, String[] args)", "original_string": "    private Object[] coerceArguments(Method accessor, String[] args) {\n        final Object[] coerced = new Object[accessor.getParameterCount()];\n        final Class<?>[] parameterTypes = accessor.getParameterTypes();\n        for (int i = 0; i < accessor.getParameterCount(); i++) {\n            final boolean isVarArg = i == accessor.getParameterCount() - 1 && accessor.isVarArgs();\n            Class<?> toType = primitiveToWrapper(parameterTypes[i]);\n            toType = isVarArg ? toType.getComponentType() : toType;\n            try {\n                final Object coercedArgument;\n                if (toType.isEnum()) {\n                    Method method = toType.getMethod(\"valueOf\", String.class);\n                    if (isVarArg) {\n                        coercedArgument = Array.newInstance(toType, args.length - i);\n                        for (int j = i; j < args.length; j++) {\n                            String enumArg = args[j].substring(args[j].indexOf(\".\") + 1);\n                            Array.set(coercedArgument, j - i, method.invoke(null, enumArg));\n                        }\n                    } else {\n                        String enumArg = args[i].substring(args[i].indexOf(\".\") + 1);\n                        coercedArgument = method.invoke(null, enumArg);\n                    }\n                } else {\n                    if (isVarArg) {\n                        Constructor<?> ctor = CLASS_2_CONSTRUCTOR_CACHE.get(toType);\n                        if (ctor == null) {\n                            final Constructor<?>[] constructors = toType.getConstructors();\n                            for (Constructor<?> c : constructors) {\n                                if (c.getParameterCount() == 1 && c.getParameterTypes()[0] == String.class) {\n                                    ctor = toType.getConstructor(String.class);\n                                    CLASS_2_CONSTRUCTOR_CACHE.putIfAbsent(toType, ctor);\n                                    break;\n                                }\n                            }\n                        }\n                        if (ctor == null) {\n                            return null;\n                        }\n                        coercedArgument = Array.newInstance(toType, args.length - i);\n                        for (int j = i; j < args.length; j++) {\n                            Array.set(coercedArgument, j - i, ctor.newInstance(args[j]));\n                        }\n                    } else if (toType == Character.class) {\n                        coercedArgument = args[i] == null ? null : args[i].charAt(0);\n                    } else if (Boolean.class == toType) {\n                        coercedArgument = Boolean.valueOf(args[i]);\n                    } else if (Integer.class == toType) {\n                        coercedArgument = Integer.valueOf(args[i]);\n                    } else if (Long.class == toType) {\n                        coercedArgument = Long.valueOf(args[i]);\n                    } else if (Double.class == toType) {\n                        coercedArgument = Double.valueOf(args[i]);\n                    } else if (Float.class == toType) {\n                        coercedArgument = Float.valueOf(args[i]);\n                    } else if (Byte.class == toType) {\n                        coercedArgument = Byte.valueOf(args[i]);\n                    } else if (Short.class == toType) {\n                        coercedArgument = Short.valueOf(args[i]);\n                    } else if (CharSequence.class.isAssignableFrom(toType)) {\n                        coercedArgument = args[i];\n                    } else if (BigDecimal.class.isAssignableFrom(toType)) {\n                        coercedArgument = new BigDecimal(args[i]);\n                    } else if (BigInteger.class.isAssignableFrom(toType)) {\n                        coercedArgument = new BigInteger(args[i]);\n                    } else {\n                        final Constructor<?> ctor = toType.getConstructor(String.class);\n                        coercedArgument = ctor.newInstance(args[i]);\n                    }\n                }\n                coerced[i] = coercedArgument;\n            } catch (Exception e) {\n                Throwable cause = unwrap(e);\n                Level level = cause instanceof IllegalArgumentException || cause instanceof NoSuchMethodException ? FINE : SEVERE;\n                LOG.log(level, \"Unable to coerce \" + args[i] + \" to \" + toType.getSimpleName() + \" via \" + toType.getSimpleName() + \"(String) constructor.\", e);\n                return null;\n            }\n        }\n        return coerced;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Object[]", "classes": []}, "docstring": "\nCoerce arguments in <em>args</em> into the appropriate types (if possible) for the parameter arguments\nto <em>accessor</em>.\n\n@return array of coerced values if successful, null otherwise\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[Class<?>]primitiveToWrapper(Class<?>)", "name": "primitiveToWrapper", "arg_nums": 1, "params": [{"name": "cls", "type": "Class<?>"}], "return_type": "Class<?>", "signature": "public static Class<?> primitiveToWrapper(final Class<?> cls)", "original_string": "    public static Class<?> primitiveToWrapper(final Class<?> cls) {\n        if (cls != null && cls.isPrimitive()) {\n            return PRIMITIVE_WRAPPER_MAP.get(cls);\n        }\n        return cls;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Class<?>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService.[Throwable]unwrap(Throwable)", "name": "unwrap", "arg_nums": 1, "params": [{"name": "e", "type": "Throwable"}], "return_type": "Throwable", "signature": "private static Throwable unwrap(Throwable e)", "original_string": "    private static Throwable unwrap(Throwable e) {\n        return e instanceof InvocationTargetException reflection ? unwrap(reflection.getTargetException()) : e;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesService.java", "class_name": "FakeValuesService", "class_uri": "src/main/java/net/datafaker/service/FakeValuesService.java.FakeValuesService", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Throwable", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesGrouping.java.FakeValuesGrouping.[void]add(FakeValuesInterface)", "name": "add", "arg_nums": 1, "params": [{"name": "fakeValue", "type": "FakeValuesInterface"}], "return_type": "void", "signature": "public void add(FakeValuesInterface fakeValue)", "original_string": "    public void add(FakeValuesInterface fakeValue) {\n        if (fakeValue instanceof FakeValues) {\n            ((FakeValues) fakeValue).getPaths().forEach(p ->\n            fakeValues.computeIfAbsent(p, key -> new HashSet<>())\n                .add(fakeValue));\n        } else if (fakeValue instanceof FakeValuesGrouping) {\n            fakeValues.putAll(((FakeValuesGrouping) fakeValue).fakeValues);\n        } else {\n            throw new RuntimeException(fakeValues.getClass().getName() + \" not supported (please raise an issue)\");\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesGrouping.java", "class_name": "FakeValuesGrouping", "class_uri": "src/main/java/net/datafaker/service/FakeValuesGrouping.java.FakeValuesGrouping", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesGrouping.java.FakeValuesGrouping.[Map]get(String)", "name": "get", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "Map", "signature": "@Override\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public Map get(String key)", "original_string": "    @Override\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public Map get(String key) {\n        Map result = null;\n        for (FakeValuesInterface fakeValues : fakeValues.getOrDefault(key, Collections.emptyList())) {\n            if (result == null) {\n                result = fakeValues.get(key);\n            } else {\n                final Map newResult = fakeValues.get(key);\n                result.putAll(newResult);\n            }\n        }\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesGrouping.java", "class_name": "FakeValuesGrouping", "class_uri": "src/main/java/net/datafaker/service/FakeValuesGrouping.java.FakeValuesGrouping", "attributes": {"modifiers": "@Override\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["@SuppressWarnings({\"unchecked\", \"rawtypes\"})", "public"], "comments": [], "return_type": "Map", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesGrouping.java.FakeValuesGrouping.[FakeValuesGrouping]getEnglishFakeValueGrouping()", "name": "getEnglishFakeValueGrouping", "arg_nums": 0, "params": [], "return_type": "FakeValuesGrouping", "signature": "public static FakeValuesGrouping getEnglishFakeValueGrouping()", "original_string": "    public static FakeValuesGrouping getEnglishFakeValueGrouping() {\n        return ENGLISH_FAKE_VALUE_GROUPING;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesGrouping.java", "class_name": "FakeValuesGrouping", "class_uri": "src/main/java/net/datafaker/service/FakeValuesGrouping.java.FakeValuesGrouping", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "FakeValuesGrouping", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[]RandomService()", "name": "RandomService", "arg_nums": 0, "params": [], "return_type": "", "signature": "public RandomService()", "original_string": "    public RandomService() {\n        this(SHARED_RANDOM);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nUses a default shared random.\n"}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[]RandomService(Random)", "name": "RandomService", "arg_nums": 1, "params": [{"name": "random", "type": "Random"}], "return_type": "", "signature": "public RandomService(Random random)", "original_string": "    public RandomService(Random random) {\n        this.random = random != null ? random : SHARED_RANDOM;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n@param random If null is passed in, a default Random is assigned\n"}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[int]nextInt()", "name": "nextInt", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@SuppressWarnings(\"unused\")\n    public int nextInt()", "original_string": "    @SuppressWarnings(\"unused\")\n    public int nextInt() {\n        return random.nextInt();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "@SuppressWarnings(\"unused\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unused\")", "public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[int]nextInt(int)", "name": "nextInt", "arg_nums": 1, "params": [{"name": "n", "type": "int"}], "return_type": "int", "signature": "public int nextInt(int n)", "original_string": "    public int nextInt(int n) {\n        return random.nextInt(n);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[Integer]nextInt(int,int)", "name": "nextInt", "arg_nums": 2, "params": [{"name": "min", "type": "int"}, {"name": "max", "type": "int"}], "return_type": "Integer", "signature": "public Integer nextInt(int min, int max)", "original_string": "    public Integer nextInt(int min, int max) {\n        return random.nextInt(min, max + 1);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[float]nextFloat()", "name": "nextFloat", "arg_nums": 0, "params": [], "return_type": "float", "signature": "@SuppressWarnings(\"unused\")\n    public float nextFloat()", "original_string": "    @SuppressWarnings(\"unused\")\n    public float nextFloat() {\n        return random.nextFloat();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "@SuppressWarnings(\"unused\")\n    public", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unused\")", "public"], "comments": [], "return_type": "float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[long]nextLong()", "name": "nextLong", "arg_nums": 0, "params": [], "return_type": "long", "signature": "public long nextLong()", "original_string": "    public long nextLong() {\n        return random.nextLong();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[long]nextLong(long)", "name": "nextLong", "arg_nums": 1, "params": [{"name": "n", "type": "long"}], "return_type": "long", "signature": "public long nextLong(long n)", "original_string": "    public long nextLong(long n) {\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"bound must be positive: \" + n);\n        }\n\n        long bits, val;\n        do {\n            long randomLong = random.nextLong();\n            bits = (randomLong << 1) >>> 1;\n            val = bits % n;\n        } while (bits - val + (n - 1) < 0L);\n        return val;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": " lifted from http://stackoverflow.com/questions/2546078/java-random-long-number-in-0-x-n-range"}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[long]nextLong(long,long)", "name": "nextLong", "arg_nums": 2, "params": [{"name": "min", "type": "long"}, {"name": "max", "type": "long"}], "return_type": "long", "signature": "public long nextLong(long min, long max)", "original_string": "    public long nextLong(long min, long max) {\n        return min + (long) (nextDouble() * (max - min));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[double]nextDouble()", "name": "nextDouble", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double nextDouble()", "original_string": "    public double nextDouble() {\n        return random.nextDouble();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[double]nextDouble(double,double)", "name": "nextDouble", "arg_nums": 2, "params": [{"name": "min", "type": "double"}, {"name": "max", "type": "double"}], "return_type": "double", "signature": "public double nextDouble(double min, double max)", "original_string": "    public double nextDouble(double min, double max) {\n        return min + (nextDouble() * (max - min));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[boolean]nextBoolean()", "name": "nextBoolean", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean nextBoolean()", "original_string": "    public boolean nextBoolean() {\n        return random.nextBoolean();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[byte[]]nextRandomBytes(int)", "name": "nextRandomBytes", "arg_nums": 1, "params": [{"name": "numberOfBytes", "type": "int"}], "return_type": "byte[]", "signature": "public byte[] nextRandomBytes(int numberOfBytes)", "original_string": "    public byte[] nextRandomBytes(int numberOfBytes) {\n        final byte[] randomBytes = new byte[numberOfBytes];\n        random.nextBytes(randomBytes);\n        return randomBytes;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "byte[]", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[String]hex()", "name": "hex", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String hex()", "original_string": "    public String hex() {\n        return hex(8);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[String]hex(int)", "name": "hex", "arg_nums": 1, "params": [{"name": "length", "type": "int"}], "return_type": "String", "signature": "public String hex(int length)", "original_string": "    public String hex(int length) {\n        return hex(length, true);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[String]hex(int,boolean)", "name": "hex", "arg_nums": 2, "params": [{"name": "length", "type": "int"}, {"name": "upper", "type": "boolean"}], "return_type": "String", "signature": "public String hex(int length, boolean upper)", "original_string": "    public String hex(int length, boolean upper) {\n        if (length <= 0) {\n            return \"\"; // Keep the existing behavior instead of throwing an error.\n        }\n        char[] hexArray = upper ? HEX_UP : HEX_LOWER;\n        final char[] hexChars = new char[length];\n        final byte[] randomBytes = nextRandomBytes(length);\n        for (int i = 0; i < length; i++) {\n            hexChars[i] = hexArray[((char) randomBytes[i]) % hexArray.length];\n        }\n        return new String(hexChars);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[Random]getRandomInternal()", "name": "getRandomInternal", "arg_nums": 0, "params": [], "return_type": "Random", "signature": "public Random getRandomInternal()", "original_string": "    public Random getRandomInternal() {\n        return random;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Random", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object o)", "original_string": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof RandomService that)) return false;\n\n        return Objects.equals(random, that.random);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        if (random == SHARED_RANDOM) return 1;\n        return random != null ? random.hashCode() : 0;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/RandomService.java.RandomService.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return getClass().getSimpleName() + \"@\" + random;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/RandomService.java", "class_name": "RandomService", "class_uri": "src/main/java/net/datafaker/service/RandomService.java.RandomService", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[]FakeValuesContext(Locale)", "name": "FakeValuesContext", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "", "signature": "private FakeValuesContext(Locale locale)", "original_string": "    private FakeValuesContext(Locale locale) {\n        this(locale, getFilename(locale), getFilename(locale), null);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[]FakeValuesContext(Locale,URL)", "name": "FakeValuesContext", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "url", "type": "URL"}], "return_type": "", "signature": "private FakeValuesContext(Locale locale, URL url)", "original_string": "    private FakeValuesContext(Locale locale, URL url) {\n        this(locale, getFilename(locale), null, url);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[]FakeValuesContext(Locale,String,String)", "name": "FakeValuesContext", "arg_nums": 3, "params": [{"name": "locale", "type": "Locale"}, {"name": "filename", "type": "String"}, {"name": "path", "type": "String"}], "return_type": "", "signature": "private FakeValuesContext(Locale locale, String filename, String path)", "original_string": "    private FakeValuesContext(Locale locale, String filename, String path) {\n        this(locale, filename, path, null);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[]FakeValuesContext(Locale,String,String,URL)", "name": "FakeValuesContext", "arg_nums": 4, "params": [{"name": "locale", "type": "Locale"}, {"name": "filename", "type": "String"}, {"name": "path", "type": "String"}, {"name": "url", "type": "URL"}], "return_type": "", "signature": "private FakeValuesContext(Locale locale, String filename, String path, URL url)", "original_string": "    private FakeValuesContext(Locale locale, String filename, String path, URL url) {\n        this.singletonLocale = SingletonLocale.get(locale);\n        this.filename = filename;\n        this.path = path;\n        this.url = url;\n        this.filenameHashCode = filename == null ? 0 : filename.hashCode();\n        try {\n            this.urlHashCode = url == null ? 0 : url.toURI().hashCode();\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(\"Invalid url: \\\"%s\\\"\".formatted(url), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[FakeValuesContext]of(Locale)", "name": "of", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "FakeValuesContext", "signature": "public static FakeValuesContext of(Locale locale)", "original_string": "    public static FakeValuesContext of(Locale locale) {\n        return new FakeValuesContext(locale);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "FakeValuesContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[FakeValuesContext]of(Locale,URL)", "name": "of", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "url", "type": "URL"}], "return_type": "FakeValuesContext", "signature": "public static FakeValuesContext of(Locale locale, URL url)", "original_string": "    public static FakeValuesContext of(Locale locale, URL url) {\n        return new FakeValuesContext(locale, url);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "FakeValuesContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[FakeValuesContext]of(Locale,String,String)", "name": "of", "arg_nums": 3, "params": [{"name": "locale", "type": "Locale"}, {"name": "filename", "type": "String"}, {"name": "path", "type": "String"}], "return_type": "FakeValuesContext", "signature": "public static FakeValuesContext of(Locale locale, String filename, String path)", "original_string": "    public static FakeValuesContext of(Locale locale, String filename, String path) {\n        return new FakeValuesContext(locale, filename, path);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "FakeValuesContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[FakeValuesContext]of(Locale,String,String,URL)", "name": "of", "arg_nums": 4, "params": [{"name": "locale", "type": "Locale"}, {"name": "filename", "type": "String"}, {"name": "path", "type": "String"}, {"name": "url", "type": "URL"}], "return_type": "FakeValuesContext", "signature": "public static FakeValuesContext of(Locale locale, String filename, String path, URL url)", "original_string": "    public static FakeValuesContext of(Locale locale, String filename, String path, URL url) {\n        return new FakeValuesContext(locale, filename, path, url);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "FakeValuesContext", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[String]getFilename(Locale)", "name": "getFilename", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "String", "signature": "private static String getFilename(Locale locale)", "original_string": "    private static String getFilename(Locale locale) {\n        String lang = language(locale);\n        if (\"\".equals(locale.getCountry())) {\n            return lang;\n        } else if (\"\".equals(locale.getLanguage())) {\n            return \"_\" + locale.getCountry();\n        } else {\n            return lang + \"-\" + locale.getCountry();\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[String]language(Locale)", "name": "language", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "String", "signature": "private static String language(Locale locale)", "original_string": "    private static String language(Locale locale) {\n        return switch (locale.getLanguage()) {\n            case \"iw\" -> \"he\";\n            case \"in\" -> \"id\";\n            case \"ji\" -> \"yi\";\n            default -> locale.getLanguage();\n        };\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nIf you create a locale with \"he\", it gets converted to \"iw\" which is old.\nThis addresses that unfortunate condition.\n"}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[Locale]getLocale()", "name": "getLocale", "arg_nums": 0, "params": [], "return_type": "Locale", "signature": "public Locale getLocale()", "original_string": "    public Locale getLocale() {\n        return singletonLocale.getLocale();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Locale", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[String]getFilename()", "name": "getFilename", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getFilename()", "original_string": "    public String getFilename() {\n        return filename;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[String]getPath()", "name": "getPath", "arg_nums": 0, "params": [], "return_type": "String", "signature": "String getPath()", "original_string": "    String getPath() {\n        return path;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[URL]getUrl()", "name": "getUrl", "arg_nums": 0, "params": [], "return_type": "URL", "signature": "public URL getUrl()", "original_string": "    public URL getUrl() {\n        return url;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "URL", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object o)", "original_string": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FakeValuesContext that = (FakeValuesContext) o;\n\n        if (!Objects.equals(singletonLocale, that.singletonLocale)) return false;\n        if (!Objects.equals(filename, that.filename)) return false;\n        if (!Objects.equals(path, that.path)) return false;\n        return Objects.equals(url, that.url);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        int result = singletonLocale == null ? 0 : singletonLocale.hashCode();\n        result = 31 * result + filenameHashCode;\n        result = 31 * result + (path == null ? 0 : path.hashCode());\n        result = 31 * result + urlHashCode;\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return \"FakeValuesContext{%s, filename='%s', path='%s', url=%s}\".formatted(singletonLocale, filename, path, url);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesContext.java", "class_name": "FakeValuesContext", "class_uri": "src/main/java/net/datafaker/service/FakeValuesContext.java.FakeValuesContext", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[]FakeValues(FakeValuesContext)", "name": "FakeValues", "arg_nums": 1, "params": [{"name": "fakeValuesContext", "type": "FakeValuesContext"}], "return_type": "", "signature": "private FakeValues(FakeValuesContext fakeValuesContext)", "original_string": "    private FakeValues(FakeValuesContext fakeValuesContext) {\n        this.fakeValuesContext = fakeValuesContext;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValues.java", "class_name": "FakeValues", "class_uri": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[FakeValues]of(FakeValuesContext)", "name": "of", "arg_nums": 1, "params": [{"name": "fakeValuesContext", "type": "FakeValuesContext"}], "return_type": "FakeValues", "signature": "static FakeValues of(FakeValuesContext fakeValuesContext)", "original_string": "    static FakeValues of(FakeValuesContext fakeValuesContext) {\n        return FAKE_VALUES_MAP.computeIfAbsent(fakeValuesContext, FakeValues::new);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValues.java", "class_name": "FakeValues", "class_uri": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "FakeValues", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Map<String, Object>]get(String)", "name": "get", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "Map<String, Object>", "signature": "@Override\n    public Map<String, Object> get(String key)", "original_string": "    @Override\n    public Map<String, Object> get(String key) {\n        return getMap(values.get(), key);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValues.java", "class_name": "FakeValues", "class_uri": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Map<String, Object>]loadFromUrl()", "name": "loadFromUrl", "arg_nums": 0, "params": [], "return_type": "Map<String, Object>", "signature": "private Map<String, Object> loadFromUrl()", "original_string": "    private Map<String, Object> loadFromUrl() {\n        final URL url = fakeValuesContext.getUrl();\n        if (url == null) {\n            return null;\n        }\n        try (InputStream stream = url.openStream()) {\n            return readFromStream(stream);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to read fake values from %s\".formatted(url), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValues.java", "class_name": "FakeValues", "class_uri": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Map<String, Object>]loadValues()", "name": "loadValues", "arg_nums": 0, "params": [], "return_type": "Map<String, Object>", "signature": "private Map<String, Object> loadValues()", "original_string": "    private Map<String, Object> loadValues() {\n        Map<String, Object> result = loadFromUrl();\n        if (result != null) return result;\n\n        final Locale locale = fakeValuesContext.getLocale();\n        final String fileName = fakeValuesContext.getFilename();\n        final String[] paths = fileName.isEmpty()\n            ? new String[] {\"/\" + locale.getLanguage() + \".yml\"}\n            : new String[] {\n                \"/\" + locale.getLanguage() + \"/\" + fileName,\n                \"/\" + fileName + \".yml\",\n                \"/\" + locale.getLanguage() + \".yml\"};\n\n        for (String path : paths) {\n            try (InputStream stream = getClass().getResourceAsStream(path)) {\n                if (stream != null) {\n                    result = readFromStream(stream);\n                    enrichMapWithJavaNames(result);\n                } else {\n                    try (InputStream stream2 = getClass().getClassLoader().getResourceAsStream(path)) {\n                        result = readFromStream(stream2);\n                        enrichMapWithJavaNames(result);\n                    }\n                }\n\n            } catch (IOException e) {\n                throw new RuntimeException(\"Failed to read fake values from %s\".formatted(path), e);\n            }\n            if (result != null) {\n                return result;\n            }\n        }\n        return emptyMap();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValues.java", "class_name": "FakeValues", "class_uri": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[void]enrichMapWithJavaNames(Map<String, Object>)", "name": "enrichMapWithJavaNames", "arg_nums": 1, "params": [{"name": "result", "type": "Map<String, Object>"}], "return_type": "void", "signature": "private void enrichMapWithJavaNames(Map<String, Object> result)", "original_string": "    private void enrichMapWithJavaNames(Map<String, Object> result) {\n        if (result != null) {\n            Map<String, Object> map = null;\n            for (Map.Entry<String, Object> entry : result.entrySet()) {\n                final String key = entry.getKey();\n                Object value = entry.getValue();\n                if (entry.getValue() instanceof Map) {\n                    @SuppressWarnings(\"unchecked\")\n                    Map<String, Object> entryMap = (Map<String, Object>) entry.getValue();\n                    Map<String, Object> nestedMap = new HashMap<>(entryMap.size());\n                    for (Map.Entry<String, Object> e: entryMap.entrySet()) {\n                        nestedMap.put(toJavaNames(e.getKey(), true), e.getValue());\n                    }\n                    entryMap.putAll(nestedMap);\n                }\n                // indexOf(<String>) is faster than indexOf(<char>) since it has jvm intrinsic\n                if (key.contains(\"_\")) {\n                    if (map == null) {\n                        map = new HashMap<>();\n                    }\n                    map.put(toJavaNames(key, false), value);\n                }\n            }\n            if (map != null) {\n                result.putAll(map);\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValues.java", "class_name": "FakeValues", "class_uri": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Map<String, Object>]readFromStream(InputStream)", "name": "readFromStream", "arg_nums": 1, "params": [{"name": "stream", "type": "InputStream"}], "return_type": "Map<String, Object>", "signature": "private Map<String, Object> readFromStream(InputStream stream)", "original_string": "    private Map<String, Object> readFromStream(InputStream stream) {\n        if (stream == null) return null;\n        final Map<String, Object> valuesMap = new Yaml().loadAs(stream, Map.class);\n        Map<String, Object> localeBased = getMap(valuesMap, fakeValuesContext.getLocale().getLanguage());\n        if (localeBased == null) {\n            localeBased = getMap(valuesMap, fakeValuesContext.getFilename());\n        }\n        return getMap(localeBased, \"faker\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValues.java", "class_name": "FakeValues", "class_uri": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Map<String, Object>]getMap(Map<String, Object>,String)", "name": "getMap", "arg_nums": 2, "params": [{"name": "map", "type": "Map<String, Object>"}, {"name": "key", "type": "String"}], "return_type": "Map<String, Object>", "signature": "@SuppressWarnings(\"unchecked\")\n    private static Map<String, Object> getMap(Map<String, Object> map, String key)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    private static Map<String, Object> getMap(Map<String, Object> map, String key) {\n        return (Map<String, Object>) map.get(key);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValues.java", "class_name": "FakeValues", "class_uri": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    private static", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "private", "static"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Set<String>]getPaths()", "name": "getPaths", "arg_nums": 0, "params": [], "return_type": "Set<String>", "signature": "Set<String> getPaths()", "original_string": "    Set<String> getPaths() {\n        return fakeValuesContext.getPath() != null ?\n            Set.of(fakeValuesContext.getPath()) :\n            keysOf(values.get());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValues.java", "class_name": "FakeValues", "class_uri": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Set<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Set<String>]keysOf(Map<String, ?>)", "name": "keysOf", "arg_nums": 1, "params": [{"name": "map", "type": "Map<String, ?>"}], "return_type": "Set<String>", "signature": "private static Set<String> keysOf(Map<String, ?> map)", "original_string": "    private static Set<String> keysOf(Map<String, ?> map) {\n        return map == null || map.isEmpty() ? null : map.keySet();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValues.java", "class_name": "FakeValues", "class_uri": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Set<String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[Locale]getLocale()", "name": "getLocale", "arg_nums": 0, "params": [], "return_type": "Locale", "signature": "Locale getLocale()", "original_string": "    Locale getLocale() {\n        return fakeValuesContext.getLocale();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValues.java", "class_name": "FakeValues", "class_uri": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Locale", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object o)", "original_string": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof FakeValues that)) return false;\n        return Objects.equals(fakeValuesContext, that.fakeValuesContext);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValues.java", "class_name": "FakeValues", "class_uri": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        return Objects.hashCode(fakeValuesContext);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValues.java", "class_name": "FakeValues", "class_uri": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return \"FakeValues{%s}\".formatted(fakeValuesContext);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValues.java", "class_name": "FakeValues", "class_uri": "src/main/java/net/datafaker/service/FakeValues.java.FakeValues", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakeValuesInterface.java.FakeValuesInterface.[Map<String, Object>]get(String)", "name": "get", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "Map<String, Object>", "signature": "Map<String, Object> get(String key)", "original_string": "    Map<String, Object> get(String key);", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakeValuesInterface.java", "class_name": "FakeValuesInterface", "class_uri": "src/main/java/net/datafaker/service/FakeValuesInterface.java.FakeValuesInterface", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[]FakerContext(Locale,RandomService)", "name": "FakerContext", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "randomService", "type": "RandomService"}], "return_type": "", "signature": "public FakerContext(Locale locale, RandomService randomService)", "original_string": "    public FakerContext(Locale locale, RandomService randomService) {\n        this.sLocale = SingletonLocale.get(locale);\n        this.randomService = randomService;\n        setCurrentLocale(locale);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nResolves YAML file using the most specific path first based on language and country code.\n'en_US' would resolve in the following order:\n<ol>\n<li>/en-US.yml</li>\n<li>/en.yml</li>\n</ol>\nThe search is case-insensitive, so the following will all resolve correctly.  Also, either a hyphen or\nan underscore can be used when constructing a {@link Locale} instance.  This is legacy behavior and not\ncondoned, but it will work.\n<ul>\n<li>EN_US</li>\n<li>En-Us</li>\n<li>eN_uS</li>\n</ul>\n"}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[void]setLocale(Locale)", "name": "setLocale", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "void", "signature": "public void setLocale(Locale locale)", "original_string": "    public void setLocale(Locale locale) {\n        this.sLocale = SingletonLocale.get(locale);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[void]setRandomService(RandomService)", "name": "setRandomService", "arg_nums": 1, "params": [{"name": "randomService", "type": "RandomService"}], "return_type": "void", "signature": "public void setRandomService(RandomService randomService)", "original_string": "    public void setRandomService(RandomService randomService) {\n        this.randomService = randomService;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[Locale]getLocale()", "name": "getLocale", "arg_nums": 0, "params": [], "return_type": "Locale", "signature": "public Locale getLocale()", "original_string": "    public Locale getLocale() {\n        return sLocale.getLocale();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Locale", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[SingletonLocale]getSingletonLocale()", "name": "getSingletonLocale", "arg_nums": 0, "params": [], "return_type": "SingletonLocale", "signature": "public SingletonLocale getSingletonLocale()", "original_string": "    public SingletonLocale getSingletonLocale() {\n        return sLocale;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "SingletonLocale", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[RandomService]getRandomService()", "name": "getRandomService", "arg_nums": 0, "params": [], "return_type": "RandomService", "signature": "public RandomService getRandomService()", "original_string": "    public RandomService getRandomService() {\n        return randomService;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RandomService", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[List<SingletonLocale>]getLocaleChain()", "name": "getLocaleChain", "arg_nums": 0, "params": [], "return_type": "List<SingletonLocale>", "signature": "public List<SingletonLocale> getLocaleChain()", "original_string": "    public List<SingletonLocale> getLocaleChain() {\n        final List<SingletonLocale> res = LOCALE_2_LOCALES_CHAIN.get(sLocale);\n        if (res == null) {\n            synchronized (FakerContext.class) {\n                return LOCALE_2_LOCALES_CHAIN.get(sLocale);\n            }\n        }\n        return res;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<SingletonLocale>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[SingletonLocale]normalizeLocale(SingletonLocale)", "name": "normalizeLocale", "arg_nums": 1, "params": [{"name": "singletonLocale", "type": "SingletonLocale"}], "return_type": "SingletonLocale", "signature": "private SingletonLocale normalizeLocale(SingletonLocale singletonLocale)", "original_string": "    private SingletonLocale normalizeLocale(SingletonLocale singletonLocale) {\n        SingletonLocale res = STRING_LOCALE_HASH_MAP.get(singletonLocale);\n        if (res != null) {\n            return res;\n        }\n        final String[] parts;\n        final Locale locale = singletonLocale.getLocale();\n        if (locale.getCountry().isEmpty()) {\n            parts = LOCALE.split(locale.getLanguage());\n        } else {\n            parts = new String[] {locale.getLanguage(), locale.getCountry()};\n        }\n\n        if (parts.length == 1) {\n            if ((res = SingletonLocale.get(Locale.forLanguageTag(parts[0]))) == null) {\n                res = SingletonLocale.get(new Locale(parts[0]));\n            }\n        } else {\n            res = SingletonLocale.get(new Locale(parts[0], parts[1]));\n        }\n        synchronized (FakerContext.class) {\n            STRING_LOCALE_HASH_MAP.put(singletonLocale, res);\n        }\n        return res;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "SingletonLocale", "classes": []}, "docstring": "\n@return a proper {@link Locale} instance with language and country code set regardless of how\nit was instantiated.  new Locale(\"pt-br\") will be normalized to a locale constructed\nwith new Locale(\"pt\",\"BR\").\n"}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[void]setCurrentLocale(Locale)", "name": "setCurrentLocale", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "void", "signature": "public void setCurrentLocale(Locale locale)", "original_string": "    public void setCurrentLocale(Locale locale) {\n        Objects.requireNonNull(locale);\n        this.sLocale = normalizeLocale(SingletonLocale.get(locale));\n        if (LOCALE_2_LOCALES_CHAIN.containsKey(this.sLocale)) {\n            return;\n        }\n        synchronized (FakerContext.class) {\n            LOCALE_2_LOCALES_CHAIN.put(this.sLocale, localeChain());\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[List<SingletonLocale>]localeChain(Locale)", "name": "localeChain", "arg_nums": 1, "params": [{"name": "from", "type": "Locale"}], "return_type": "List<SingletonLocale>", "signature": "protected List<SingletonLocale> localeChain(Locale from)", "original_string": "    protected List<SingletonLocale> localeChain(Locale from) {\n        if (DEFAULT_LOCALE.getLocale().equals(from)) {\n            return DEFAULT_SINGLETON_LOCALE_LIST;\n        }\n\n        return calculateLocaleChain(normalizeLocale(SingletonLocale.get(from)));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "List<SingletonLocale>", "classes": []}, "docstring": "\nConvert the specified locale into a chain of locales used for message resolution. For example:\n<p>\n{@link Locale#FRANCE} (fr_FR) to [ fr_FR, anotherTest, en ]\n\n@return a list of {@link Locale} instances\n"}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[List<SingletonLocale>]localeChain()", "name": "localeChain", "arg_nums": 0, "params": [], "return_type": "List<SingletonLocale>", "signature": "protected List<SingletonLocale> localeChain()", "original_string": "    protected List<SingletonLocale> localeChain() {\n        if (DEFAULT_LOCALE == sLocale) {\n            return DEFAULT_SINGLETON_LOCALE_LIST;\n        }\n\n        return calculateLocaleChain(sLocale);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "List<SingletonLocale>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[List<SingletonLocale>]calculateLocaleChain(SingletonLocale)", "name": "calculateLocaleChain", "arg_nums": 1, "params": [{"name": "locale", "type": "SingletonLocale"}], "return_type": "List<SingletonLocale>", "signature": "private List<SingletonLocale> calculateLocaleChain(SingletonLocale locale)", "original_string": "    private List<SingletonLocale> calculateLocaleChain(SingletonLocale locale) {\n        final List<SingletonLocale> chain = new ArrayList<>(4);\n        chain.add(locale);\n        if (!\"\".equals(locale.getLocale().getCountry())) {\n            if (!DEFAULT_LOCALE.getLocale().getLanguage().equals(locale.getLocale().getLanguage())) {\n                chain.add(SingletonLocale.get(new Locale(locale.getLocale().getLanguage())));\n            }\n            chain.add(SingletonLocale.get(new Locale(\"\", locale.getLocale().getCountry())));\n        }\n        chain.add(DEFAULT_LOCALE); // default\n        return chain;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "List<SingletonLocale>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object o)", "original_string": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        FakerContext that = (FakerContext) o;\n\n        if (!Objects.equals(sLocale, that.sLocale)) return false;\n        return Objects.equals(randomService, that.randomService);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        int result = sLocale != null ? sLocale.hashCode() : 0;\n        result = 31 * result + (randomService != null ? randomService.hashCode() : 0);\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return \"FakerContext{%s, %s}\".formatted(sLocale, randomService);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/FakerContext.java", "class_name": "FakerContext", "class_uri": "src/main/java/net/datafaker/service/FakerContext.java.FakerContext", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/files/EnFile.java.EnFile.[]EnFile(String)", "name": "EnFile", "arg_nums": 1, "params": [{"name": "file", "type": "String"}], "return_type": "", "signature": "private EnFile(String file)", "original_string": "    private EnFile(String file) {\n        this(file, file.endsWith(YML) ? file.substring(0, file.length() - YML.length()) : file);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/files/EnFile.java", "class_name": "EnFile", "class_uri": "src/main/java/net/datafaker/service/files/EnFile.java.EnFile", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/files/EnFile.java.EnFile.[]EnFile(String,String)", "name": "EnFile", "arg_nums": 2, "params": [{"name": "file", "type": "String"}, {"name": "path", "type": "String"}], "return_type": "", "signature": "private EnFile(String file, String path)", "original_string": "    private EnFile(String file, String path) {\n        this.file = file;\n        this.path = path;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/files/EnFile.java", "class_name": "EnFile", "class_uri": "src/main/java/net/datafaker/service/files/EnFile.java.EnFile", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/files/EnFile.java.EnFile.[String]getFile()", "name": "getFile", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getFile()", "original_string": "    public String getFile() {\n        return file;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/files/EnFile.java", "class_name": "EnFile", "class_uri": "src/main/java/net/datafaker/service/files/EnFile.java.EnFile", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/files/EnFile.java.EnFile.[String]getPath()", "name": "getPath", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getPath()", "original_string": "    public String getPath() {\n        return path;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/files/EnFile.java", "class_name": "EnFile", "class_uri": "src/main/java/net/datafaker/service/files/EnFile.java.EnFile", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/service/files/EnFile.java.EnFile.[Stream<EnFile>]getFiles()", "name": "getFiles", "arg_nums": 0, "params": [], "return_type": "Stream<EnFile>", "signature": "public static Stream<EnFile> getFiles()", "original_string": "    public static Stream<EnFile> getFiles() {\n        return Stream.concat(FILES.stream(), FILES_WITH_A_DIFFERENT_PATH.stream());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/service/files/EnFile.java", "class_name": "EnFile", "class_uri": "src/main/java/net/datafaker/service/files/EnFile.java.EnFile", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Stream<EnFile>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/JavaNames.java.JavaNames.[String]toJavaNames(String,boolean)", "name": "toJavaNames", "arg_nums": 2, "params": [{"name": "string", "type": "String"}, {"name": "isMethod", "type": "boolean"}], "return_type": "String", "signature": "public static String toJavaNames(String string, boolean isMethod)", "original_string": "    public static String toJavaNames(String string, boolean isMethod) {\n        if (string == null || string.isEmpty()) return string;\n\n        int length = string.length();\n        char[] res = new char[length];\n        int pos = 0;\n        Transform next = isMethod ? TO_LOWER : TO_UPPER;\n\n        for (int i = 0; i < length; i++) {\n            char c = string.charAt(i);\n            if (isLetter(c)) {\n                res[pos++] = next.transform(c);\n                next = SAME;\n            } else if (c == '_') {\n                next = TO_UPPER;\n            } else {\n                res[pos++] = c;\n                next = SAME;\n            }\n        }\n        return new String(res, 0, pos);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/JavaNames.java", "class_name": "JavaNames", "class_uri": "src/main/java/net/datafaker/internal/helper/JavaNames.java.JavaNames", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/LazyEvaluated.java.LazyEvaluated.[]LazyEvaluated(Supplier<T>)", "name": "LazyEvaluated", "arg_nums": 1, "params": [{"name": "supplier", "type": "Supplier<T>"}], "return_type": "", "signature": "public LazyEvaluated(Supplier<T> supplier)", "original_string": "    public LazyEvaluated(Supplier<T> supplier) {\n        this.supplier = supplier;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/LazyEvaluated.java", "class_name": "LazyEvaluated", "class_uri": "src/main/java/net/datafaker/internal/helper/LazyEvaluated.java.LazyEvaluated", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/LazyEvaluated.java.LazyEvaluated.[T]get()", "name": "get", "arg_nums": 0, "params": [], "return_type": "T", "signature": "public T get()", "original_string": "    public T get() {\n        if (value == null) {\n            synchronized (this) {\n                if (value == null) {\n                    value = supplier.get();\n                }\n            }\n        }\n        return value;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/LazyEvaluated.java", "class_name": "LazyEvaluated", "class_uri": "src/main/java/net/datafaker/internal/helper/LazyEvaluated.java.LazyEvaluated", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/WordUtils.java.WordUtils.[String]capitalize(String)", "name": "capitalize", "arg_nums": 1, "params": [{"name": "input", "type": "String"}], "return_type": "String", "signature": "public static String capitalize(String input)", "original_string": "    public static String capitalize(String input) {\n        if (input == null) return null;\n        if (input.isEmpty()) return input;\n        final char ch0 = input.charAt(0);\n        if (Character.isUpperCase(ch0)) return input;\n        return Character.toUpperCase(ch0) + input.substring(1);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/WordUtils.java", "class_name": "WordUtils", "class_uri": "src/main/java/net/datafaker/internal/helper/WordUtils.java.WordUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/FakerIDN.java.FakerIDN.[String]toASCII(String)", "name": "toASCII", "arg_nums": 1, "params": [{"name": "in", "type": "String"}], "return_type": "String", "signature": "public static String toASCII(String in)", "original_string": "    public static String toASCII(String in) {\n        try {\n            return IDN.toASCII(in);\n        } catch (IllegalArgumentException ignore) {\n            // let's continue with the character by character encoding hack.\n        }\n        final StringBuilder asciiResult = new StringBuilder();\n        for (int i = 0; i < in.length(); i++) {\n            try {\n                asciiResult.append(IDN.toASCII(in.substring(i, i + 1)));\n            } catch (IllegalArgumentException ignored) {\n            }\n        }\n        if (asciiResult.isEmpty()) {\n            throw new RuntimeException(\"Unable to convert \\\"%s\\\" to ASCII\".formatted(in));\n        }\n        return asciiResult.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/FakerIDN.java", "class_name": "FakerIDN", "class_uri": "src/main/java/net/datafaker/internal/helper/FakerIDN.java.FakerIDN", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n{@link IDN#toASCII(String)} is too picky for our needs. It was throwing exceptions for fa.yml and\nhe.yml as they are Bidi languages and something was causing them to die. This is kind of a brute force\nfix, but it appears to fix the issue.\n"}, {"uris": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale.[]SingletonLocale(Locale)", "name": "SingletonLocale", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "", "signature": "private SingletonLocale(Locale locale)", "original_string": "    private SingletonLocale(Locale locale) {\n        this.locale = locale;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java", "class_name": "SingletonLocale", "class_uri": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale.[SingletonLocale]get(Locale)", "name": "get", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "SingletonLocale", "signature": "public static SingletonLocale get(Locale locale)", "original_string": "    public static SingletonLocale get(Locale locale) {\n        if (locale == null) {\n            return null;\n        }\n        SingletonLocale res = LOCALE2SINGLETON_LOCALE.get(locale);\n        if (res != null) {\n            return res;\n        }\n        synchronized (SingletonLocale.class) {\n            res = LOCALE2SINGLETON_LOCALE.get(locale);\n            if (res != null) {\n                return res;\n            }\n            res = new SingletonLocale(locale);\n            LOCALE2SINGLETON_LOCALE.put(locale, res);\n            return res;\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java", "class_name": "SingletonLocale", "class_uri": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "SingletonLocale", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale.[Locale]getLocale()", "name": "getLocale", "arg_nums": 0, "params": [], "return_type": "Locale", "signature": "public Locale getLocale()", "original_string": "    public Locale getLocale() {\n        return locale;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java", "class_name": "SingletonLocale", "class_uri": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Locale", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object o)", "original_string": "    @Override\n    public boolean equals(Object o) {\n        return this == o;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java", "class_name": "SingletonLocale", "class_uri": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        return hashId;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java", "class_name": "SingletonLocale", "class_uri": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return \"SingletonLocale{%s}\".formatted(locale);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java", "class_name": "SingletonLocale", "class_uri": "src/main/java/net/datafaker/internal/helper/SingletonLocale.java.SingletonLocale", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[]CopyOnWriteMap(Supplier<Map<K, V>>)", "name": "CopyOnWriteMap", "arg_nums": 1, "params": [{"name": "mapSupplier", "type": "Supplier<Map<K, V>>"}], "return_type": "", "signature": "public CopyOnWriteMap(Supplier<Map<K, V>> mapSupplier)", "original_string": "    public CopyOnWriteMap(Supplier<Map<K, V>> mapSupplier) {\n        this.mapSupplier = mapSupplier;\n        this.map = mapSupplier.get();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "class_name": "CopyOnWriteMap", "class_uri": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[int]size()", "name": "size", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int size()", "original_string": "    @Override\n    public int size() {\n        return map.size();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "class_name": "CopyOnWriteMap", "class_uri": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[boolean]isEmpty()", "name": "isEmpty", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "@Override\n    public boolean isEmpty()", "original_string": "    @Override\n    public boolean isEmpty() {\n        return map.isEmpty();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "class_name": "CopyOnWriteMap", "class_uri": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[boolean]containsKey(Object)", "name": "containsKey", "arg_nums": 1, "params": [{"name": "key", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean containsKey(Object key)", "original_string": "    @Override\n    public boolean containsKey(Object key) {\n        return map.containsKey(key);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "class_name": "CopyOnWriteMap", "class_uri": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[boolean]containsValue(Object)", "name": "containsValue", "arg_nums": 1, "params": [{"name": "value", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean containsValue(Object value)", "original_string": "    @Override\n    public boolean containsValue(Object value) {\n        return map.containsValue(value);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "class_name": "CopyOnWriteMap", "class_uri": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[V]get(Object)", "name": "get", "arg_nums": 1, "params": [{"name": "key", "type": "Object"}], "return_type": "V", "signature": "@Override\n    public V get(Object key)", "original_string": "    @Override\n    public V get(Object key) {\n        return map.get(key);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "class_name": "CopyOnWriteMap", "class_uri": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "V", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[V]put(K,V)", "name": "put", "arg_nums": 2, "params": [{"name": "key", "type": "K"}, {"name": "value", "type": "V"}], "return_type": "V", "signature": "@Override\n    public V put(K key, V value)", "original_string": "    @Override\n    public V put(K key, V value) {\n        Map<K, V> newMap = mapSupplier.get();\n        newMap.putAll(map);\n        final V result = newMap.put(key, value);\n        map = newMap;\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "class_name": "CopyOnWriteMap", "class_uri": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "V", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[V]remove(Object)", "name": "remove", "arg_nums": 1, "params": [{"name": "key", "type": "Object"}], "return_type": "V", "signature": "@Override\n    public V remove(Object key)", "original_string": "    @Override\n    public V remove(Object key) {\n        Map<K, V> newMap = mapSupplier.get();\n        newMap.putAll(map);\n        final V result = newMap.remove(key);\n        map = newMap;\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "class_name": "CopyOnWriteMap", "class_uri": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "V", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[void]putAll(Map<? extends K, ? extends V>)", "name": "putAll", "arg_nums": 1, "params": [{"name": "m", "type": "Map<? extends K, ? extends V>"}], "return_type": "void", "signature": "@Override\n    public void putAll(Map<? extends K, ? extends V> m)", "original_string": "    @Override\n    public void putAll(Map<? extends K, ? extends V> m) {\n        Map<K, V> newMap = mapSupplier.get();\n        newMap.putAll(map);\n        newMap.putAll(m);\n        map = newMap;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "class_name": "CopyOnWriteMap", "class_uri": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[void]clear()", "name": "clear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    public void clear()", "original_string": "    @Override\n    public void clear() {\n        map = mapSupplier.get();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "class_name": "CopyOnWriteMap", "class_uri": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[Set<K>]keySet()", "name": "keySet", "arg_nums": 0, "params": [], "return_type": "Set<K>", "signature": "@Override\n    public Set<K> keySet()", "original_string": "    @Override\n    public Set<K> keySet() {\n        return map.keySet();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "class_name": "CopyOnWriteMap", "class_uri": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Set<K>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[Collection<V>]values()", "name": "values", "arg_nums": 0, "params": [], "return_type": "Collection<V>", "signature": "@Override\n    public Collection<V> values()", "original_string": "    @Override\n    public Collection<V> values() {\n        return map.values();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "class_name": "CopyOnWriteMap", "class_uri": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Collection<V>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[Set<Entry<K, V>>]entrySet()", "name": "entrySet", "arg_nums": 0, "params": [], "return_type": "Set<Entry<K, V>>", "signature": "@Override\n    public Set<Entry<K, V>> entrySet()", "original_string": "    @Override\n    public Set<Entry<K, V>> entrySet() {\n        return map.entrySet();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "class_name": "CopyOnWriteMap", "class_uri": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Set<Entry<K, V>>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap.[void]updateNestedValue(K,Supplier<V>,K2,V2)", "name": "updateNestedValue", "arg_nums": 4, "params": [{"name": "key", "type": "K"}, {"name": "valueSupplier", "type": "Supplier<V>"}, {"name": "key2", "type": "K2"}, {"name": "value", "type": "V2"}], "return_type": "void", "signature": "public <K2, V2> void updateNestedValue(K key, Supplier<V> valueSupplier, K2 key2, V2 value)", "original_string": "    public <K2, V2> void updateNestedValue(K key, Supplier<V> valueSupplier, K2 key2, V2 value) {\n        if (!map.containsKey(key)) {\n            Map<K, V> newMap = mapSupplier.get();\n            newMap.putAll(map);\n            newMap.put(key, valueSupplier.get());\n            map = newMap;\n        }\n        // It is assumed that nested could be only Map\n        ((Map<K2, V2>)map.get(key)).put(key2, value);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java", "class_name": "CopyOnWriteMap", "class_uri": "src/main/java/net/datafaker/internal/helper/CopyOnWriteMap.java.CopyOnWriteMap", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Field.java.Field.[String]getName()", "name": "getName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "String getName()", "original_string": "    String getName();", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Field.java", "class_name": "Field", "class_uri": "src/main/java/net/datafaker/transformations/Field.java.Field", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Field.java.Field.[OUT]transform(IN)", "name": "transform", "arg_nums": 1, "params": [{"name": "input", "type": "IN"}], "return_type": "OUT", "signature": "OUT transform(IN input)", "original_string": "    OUT transform(IN input);", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Field.java", "class_name": "Field", "class_uri": "src/main/java/net/datafaker/transformations/Field.java.Field", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "OUT", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Field.java.Field.[SimpleField<MyObject, MyType>]field(String,Function<MyObject, MyType>)", "name": "field", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "transform", "type": "Function<MyObject, MyType>"}], "return_type": "SimpleField<MyObject, MyType>", "signature": "static <MyObject, MyType> SimpleField<MyObject, MyType> field(\n        String name, Function<MyObject, MyType> transform)", "original_string": "    static <MyObject, MyType> SimpleField<MyObject, MyType> field(\n        String name, Function<MyObject, MyType> transform) {\n        return new SimpleField<>(name, transform);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Field.java", "class_name": "Field", "class_uri": "src/main/java/net/datafaker/transformations/Field.java.Field", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "SimpleField<MyObject, MyType>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Field.java.Field.[SimpleField<MyObject, MyType>]field(String,Supplier<MyType>)", "name": "field", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "supplier", "type": "Supplier<MyType>"}], "return_type": "SimpleField<MyObject, MyType>", "signature": "static <MyObject, MyType> SimpleField<MyObject, MyType> field(\n        String name, Supplier<MyType> supplier)", "original_string": "    static <MyObject, MyType> SimpleField<MyObject, MyType> field(\n        String name, Supplier<MyType> supplier) {\n        return new SimpleField<>(name, supplier);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Field.java", "class_name": "Field", "class_uri": "src/main/java/net/datafaker/transformations/Field.java.Field", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "SimpleField<MyObject, MyType>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Field.java.Field.[CompositeField<MyObject, MyType>]compositeField(String,Field<MyObject, MyType>[])", "name": "compositeField", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "fields", "type": "Field<MyObject, MyType>[]"}], "return_type": "CompositeField<MyObject, MyType>", "signature": "static <MyObject extends AbstractProvider<?>, MyType>\n    CompositeField<MyObject, MyType> compositeField(\n        String name, Field<MyObject, MyType>[] fields)", "original_string": "    static <MyObject extends AbstractProvider<?>, MyType>\n    CompositeField<MyObject, MyType> compositeField(\n        String name, Field<MyObject, MyType>[] fields) {\n        return new CompositeField<>(name, fields);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Field.java", "class_name": "Field", "class_uri": "src/main/java/net/datafaker/transformations/Field.java.Field", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "CompositeField<MyObject, MyType>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[Object]apply(Object,Schema<Object, ?>)", "name": "apply", "arg_nums": 2, "params": [{"name": "input", "type": "Object"}, {"name": "schema", "type": "Schema<Object, ?>"}], "return_type": "Object", "signature": "@Override\n    public Object apply(Object input, Schema<Object, ?> schema)", "original_string": "    @Override\n    public Object apply(Object input, Schema<Object, ?> schema) {\n        Class clazz;\n        Object result = null;\n        if (input instanceof Class) {\n            clazz = (Class) input;\n        } else {\n            clazz = input.getClass();\n            result = input;\n        }\n\n        if (clazz.isRecord()) {\n            Constructor<?> recordConstructor = CLASS2CONSTRUCTOR.get(clazz);\n            if (recordConstructor == null) {\n                Class<?>[] componentTypes = Arrays.stream(clazz.getRecordComponents())\n                    .map(RecordComponent::getType)\n                    .toArray(Class<?>[]::new);\n\n                try {\n                    recordConstructor = clazz.getDeclaredConstructor(componentTypes);\n                    CLASS2CONSTRUCTOR.put(clazz, recordConstructor);\n                } catch (NoSuchMethodException e) {\n                    throw new RuntimeException(\"Failed to initialize class \" + clazz.getName(), e);\n                }\n            }\n\n            result = getObject(schema, result, recordConstructor);\n        } else if (!hasParameterlessPublicConstructor(clazz)) {\n            Constructor<?> primaryConstructor = CLASS2CONSTRUCTOR.get(clazz);\n            if (primaryConstructor == null) {\n                primaryConstructor = clazz.getDeclaredConstructors()[0];\n                CLASS2CONSTRUCTOR.put(clazz, primaryConstructor);\n            }\n\n            result = getObject(schema, result, primaryConstructor);\n        } else {\n            if (result == null) {\n                try {\n                    Constructor<?> primaryConstructor = CLASS2CONSTRUCTOR.get(clazz);\n                    if (primaryConstructor == null) {\n                        primaryConstructor = clazz.getDeclaredConstructors()[0];\n                        CLASS2CONSTRUCTOR.put(clazz, primaryConstructor);\n                    }\n                    result = primaryConstructor.newInstance();\n                } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            Consumer<Object> consumer = SCHEMA2CONSUMER.get(schema);\n            if (consumer == null) {\n                final Field<Object, ?>[] fields = schema.getFields();\n                final Map<String, java.lang.reflect.Field> name2ClassField = Stream.of(clazz.getDeclaredFields()).collect(\n                    Collectors.toMap(java.lang.reflect.Field::getName, Function.identity()));\n                final java.lang.reflect.Field[] rFields = new java.lang.reflect.Field[fields.length];\n                for (int i = 0; i < fields.length; i++) {\n                    rFields[i] = name2ClassField.get(fields[i].getName());\n                    rFields[i].setAccessible(true);\n                }\n                consumer = classObject -> {\n                    for (int i = 0; i < fields.length; i++) {\n                        try {\n                            rFields[i].set(classObject, fields[i].transform(classObject));\n                        } catch (IllegalAccessException e) {\n                            throw new RuntimeException(\"Failed to transform field \" + fields[i], e);\n                        }\n                    }\n                };\n                SCHEMA2CONSUMER.put(schema, consumer);\n            }\n            consumer.accept(result);\n        }\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java", "class_name": "JavaObjectTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[Collection<Object>]generate(Iterable<Object>,Schema<Object, ?>)", "name": "generate", "arg_nums": 2, "params": [{"name": "input", "type": "Iterable<Object>"}, {"name": "schema", "type": "Schema<Object, ?>"}], "return_type": "Collection<Object>", "signature": "@Override\n    public Collection<Object> generate(Iterable<Object> input, Schema<Object, ?> schema)", "original_string": "    @Override\n    public Collection<Object> generate(Iterable<Object> input, Schema<Object, ?> schema) {\n        Collection<Object> collection;\n        if (input instanceof FakeSequence<Object> fakeSequence) {\n            if (fakeSequence.isInfinite()) {\n                throw new IllegalArgumentException(\"Should be finite size: \" + fakeSequence);\n            }\n            collection = new ArrayList<>(fakeSequence.get());\n        } else {\n            collection = new ArrayList<>();\n            for (Object o : input) {\n                collection.add(o);\n            }\n        }\n        for (Object elem : collection) {\n            apply(elem, schema);\n        }\n        return collection;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java", "class_name": "JavaObjectTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Collection<Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[JavaObjectTransformer]from(Class)", "name": "from", "arg_nums": 1, "params": [{"name": "input", "type": "Class"}], "return_type": "JavaObjectTransformer", "signature": "public JavaObjectTransformer from(Class input)", "original_string": "    public JavaObjectTransformer from(Class input) {\n        sourceClazz = Optional.of(input);\n        return this;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java", "class_name": "JavaObjectTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "JavaObjectTransformer", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[Stream<Object>]generateStream(Schema<Object, ?>,long)", "name": "generateStream", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<Object, ?>"}, {"name": "limit", "type": "long"}], "return_type": "Stream<Object>", "signature": "@Override\n    public Stream<Object> generateStream(final Schema<Object, ?> schema, long limit)", "original_string": "    @Override\n    public Stream<Object> generateStream(final Schema<Object, ?> schema, long limit) {\n        if(sourceClazz.isEmpty())\n            return Stream.empty();\n        else\n            return Stream\n                .generate(() -> apply(sourceClazz.get(), schema))\n                .limit(limit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java", "class_name": "JavaObjectTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Stream<Object>", "classes": []}, "docstring": "\nThe output is tied to provided Class source.\nAn empty source will output an empty stream.\n\nConfigure available input with {@link #from(Class source)}.\n"}, {"uris": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[Collection<Object>]generate(Schema<Object, ?>,int)", "name": "generate", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<Object, ?>"}, {"name": "limit", "type": "int"}], "return_type": "Collection<Object>", "signature": "@Override\n    public Collection<Object> generate(Schema<Object, ?> schema, int limit)", "original_string": "    @Override\n    public Collection<Object> generate(Schema<Object, ?> schema, int limit) {\n        return this.generateStream(schema, limit).collect(Collectors.toList());\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java", "class_name": "JavaObjectTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Collection<Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[String]getStartStream(Schema<Object, ?>)", "name": "getStartStream", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<Object, ?>"}], "return_type": "String", "signature": "@Override\n    public String getStartStream(Schema<Object, ?> schema)", "original_string": "    @Override\n    public String getStartStream(Schema<Object, ?> schema) {\n        throw new UnsupportedOperationException();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java", "class_name": "JavaObjectTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[String]getEndStream()", "name": "getEndStream", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String getEndStream()", "original_string": "    @Override\n    public String getEndStream() {\n        throw new UnsupportedOperationException();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java", "class_name": "JavaObjectTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[Object]getObject(Schema<Object, ?>,Object,Constructor<?>)", "name": "getObject", "arg_nums": 3, "params": [{"name": "schema", "type": "Schema<Object, ?>"}, {"name": "result", "type": "Object"}, {"name": "recordConstructor", "type": "Constructor<?>"}], "return_type": "Object", "signature": "private Object getObject(Schema<Object, ?> schema, Object result, Constructor<?> recordConstructor)", "original_string": "    private Object getObject(Schema<Object, ?> schema, Object result, Constructor<?> recordConstructor) {\n        final Field<Object, ?>[] fields = schema.getFields();\n        final Object[] values = new Object[fields.length];\n        for (int i = 0; i < fields.length; i++) {\n            values[i] = fields[i].transform(result);\n        }\n\n        try {\n            return recordConstructor.newInstance(values);\n        } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n            throw new RuntimeException(\"Failed to instantiate \" + recordConstructor.getDeclaringClass().getName(), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java", "class_name": "JavaObjectTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer.[boolean]hasParameterlessPublicConstructor(Class<?>)", "name": "hasParameterlessPublicConstructor", "arg_nums": 1, "params": [{"name": "clazz", "type": "Class<?>"}], "return_type": "boolean", "signature": "private boolean hasParameterlessPublicConstructor(Class<?> clazz)", "original_string": "    private boolean hasParameterlessPublicConstructor(Class<?> clazz) {\n        for (Constructor<?> constructor : clazz.getConstructors()) {\n            if (constructor.getParameterCount() == 0) {\n                return true;\n            }\n        }\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java", "class_name": "JavaObjectTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JavaObjectTransformer.java.JavaObjectTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[OUT]apply(IN,Schema<IN, ?>)", "name": "apply", "arg_nums": 2, "params": [{"name": "input", "type": "IN"}, {"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "OUT", "signature": "OUT apply(IN input, Schema<IN, ?> schema)", "original_string": "    OUT apply(IN input, Schema<IN, ?> schema);", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Transformer.java", "class_name": "Transformer", "class_uri": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "OUT", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[OUT]apply(IN,Schema<IN, ?>,long)", "name": "apply", "arg_nums": 3, "params": [{"name": "input", "type": "IN"}, {"name": "schema", "type": "Schema<IN, ?>"}, {"name": "rowId", "type": "long"}], "return_type": "OUT", "signature": "default OUT apply(IN input, Schema<IN, ?> schema, long rowId)", "original_string": "    default OUT apply(IN input, Schema<IN, ?> schema, long rowId) {\n        // ignore rowId by default\n        return apply(input, schema);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Transformer.java", "class_name": "Transformer", "class_uri": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "OUT", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[OUT]generate(Iterable<IN>,Schema<IN, ?>)", "name": "generate", "arg_nums": 2, "params": [{"name": "input", "type": "Iterable<IN>"}, {"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "OUT", "signature": "OUT generate(Iterable<IN> input, final Schema<IN, ?> schema)", "original_string": "    OUT generate(Iterable<IN> input, final Schema<IN, ?> schema);", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Transformer.java", "class_name": "Transformer", "class_uri": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "OUT", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[OUT]generate(Schema<IN, ?>,int)", "name": "generate", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<IN, ?>"}, {"name": "limit", "type": "int"}], "return_type": "OUT", "signature": "OUT generate(final Schema<IN, ?> schema, int limit)", "original_string": "    OUT generate(final Schema<IN, ?> schema, int limit);", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Transformer.java", "class_name": "Transformer", "class_uri": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "OUT", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[String]getStartStream(Schema<IN, ?>)", "name": "getStartStream", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "String", "signature": "String getStartStream(final Schema<IN, ?> schema)", "original_string": "    String getStartStream(final Schema<IN, ?> schema);", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Transformer.java", "class_name": "Transformer", "class_uri": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[String]getEndStream()", "name": "getEndStream", "arg_nums": 0, "params": [], "return_type": "String", "signature": "String getEndStream()", "original_string": "    String getEndStream();", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Transformer.java", "class_name": "Transformer", "class_uri": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[String]getLineSeparator()", "name": "getLineSeparator", "arg_nums": 0, "params": [], "return_type": "String", "signature": "default String getLineSeparator()", "original_string": "    default String getLineSeparator() {\n        return LINE_SEPARATOR;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Transformer.java", "class_name": "Transformer", "class_uri": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[String]getElementSeparator()", "name": "getElementSeparator", "arg_nums": 0, "params": [], "return_type": "String", "signature": "default String getElementSeparator()", "original_string": "    default String getElementSeparator() {\n        return \"\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Transformer.java", "class_name": "Transformer", "class_uri": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer.[Stream<OUT>]generateStream(Schema<IN, ?>,long)", "name": "generateStream", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<IN, ?>"}, {"name": "limit", "type": "long"}], "return_type": "Stream<OUT>", "signature": "default Stream<OUT> generateStream(final Schema<IN, ?> schema, long limit)", "original_string": "    default Stream<OUT> generateStream(final Schema<IN, ?> schema, long limit) {\n        Item item = new Item(0);\n        return Stream.generate(() -> {\n            StringBuilder res = new StringBuilder();\n            if (item.current == 0) {\n                res.append(getStartStream(schema)).append(getLineSeparator());\n            }\n            res.append(apply(null, schema, item.current));\n\n            if (item.current == limit - 1) {\n                res.append(getLineSeparator()).append(getEndStream());\n            } else {\n                if (!getElementSeparator().isEmpty()) {\n                    res.append(getElementSeparator());\n                }\n            }\n            item.current++;\n            return (OUT) res.toString();\n        }).limit(limit);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Transformer.java", "class_name": "Transformer", "class_uri": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer", "attributes": {"modifiers": "default", "marker_annotations": [], "non_marker_annotations": ["default"], "comments": [], "return_type": "Stream<OUT>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[]CsvTransformer(String,char,boolean)", "name": "CsvTransformer", "arg_nums": 3, "params": [{"name": "separator", "type": "String"}, {"name": "quote", "type": "char"}, {"name": "withHeader", "type": "boolean"}], "return_type": "", "signature": "private CsvTransformer(String separator, char quote, boolean withHeader)", "original_string": "    private CsvTransformer(String separator, char quote, boolean withHeader) {\n        this.separator = separator;\n        this.quote = quote;\n        this.withHeader = withHeader;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CsvTransformer.java", "class_name": "CsvTransformer", "class_uri": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[CsvTransformerBuilder<IN>]builder()", "name": "builder", "arg_nums": 0, "params": [], "return_type": "CsvTransformerBuilder<IN>", "signature": "public static <IN> CsvTransformerBuilder<IN> builder()", "original_string": "    public static <IN> CsvTransformerBuilder<IN> builder() {\n        return new CsvTransformerBuilder<>();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CsvTransformer.java", "class_name": "CsvTransformer", "class_uri": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "CsvTransformerBuilder<IN>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[CharSequence]apply(IN,Schema<IN, ?>)", "name": "apply", "arg_nums": 2, "params": [{"name": "input", "type": "IN"}, {"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "CharSequence", "signature": "@Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema)", "original_string": "    @Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema) {\n        Field<IN, ?>[] fields = schema.getFields();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < fields.length; i++) {\n            //noinspection unchecked\n            SimpleField<Object, ?> f = (SimpleField<Object, ?>) fields[i];\n            addLine(sb, f.transform(input));\n            if (i < fields.length - 1) {\n                sb.append(separator);\n            }\n        }\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CsvTransformer.java", "class_name": "CsvTransformer", "class_uri": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "CharSequence", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[String]generate(Iterable<IN>,Schema<IN, ?>)", "name": "generate", "arg_nums": 2, "params": [{"name": "input", "type": "Iterable<IN>"}, {"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "String", "signature": "@Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema)", "original_string": "    @Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema) {\n        if (input instanceof FakeSequence<?> fakeSequence && fakeSequence.isInfinite()) {\n            throw new IllegalArgumentException(\"The sequence should be finite of size: \" + fakeSequence);\n        }\n\n        StringBuilder sb = new StringBuilder();\n        generateHeader(schema, sb);\n\n        Iterator<IN> iterator = input.iterator();\n        boolean hasNext = iterator.hasNext();\n        while (hasNext) {\n            IN in = iterator.next();\n            sb.append(apply(in, schema));\n            hasNext = iterator.hasNext();\n            if (hasNext) {\n                sb.append(LINE_SEPARATOR);\n            }\n        }\n\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CsvTransformer.java", "class_name": "CsvTransformer", "class_uri": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[void]addLine(StringBuilder,Object)", "name": "addLine", "arg_nums": 2, "params": [{"name": "sb", "type": "StringBuilder"}, {"name": "transform", "type": "Object"}], "return_type": "void", "signature": "private void addLine(StringBuilder sb, Object transform)", "original_string": "    private void addLine(StringBuilder sb, Object transform) {\n        if (transform instanceof CharSequence) {\n            addCharSequence(sb, (CharSequence) transform);\n        } else {\n            sb.append(transform);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CsvTransformer.java", "class_name": "CsvTransformer", "class_uri": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[void]addCharSequence(StringBuilder,CharSequence)", "name": "addCharSequence", "arg_nums": 2, "params": [{"name": "sb", "type": "StringBuilder"}, {"name": "charSequence", "type": "CharSequence"}], "return_type": "void", "signature": "private void addCharSequence(StringBuilder sb, CharSequence charSequence)", "original_string": "    private void addCharSequence(StringBuilder sb, CharSequence charSequence) {\n        sb.append(quote);\n        int i = 0;\n        final int length = charSequence.length();\n        for (int j = 0; j < length; j++) {\n            final char c = charSequence.charAt(j);\n            if (c == quote) {\n                sb.append(charSequence, i, j + 1).append(quote);\n                i = j + 1;\n            }\n        }\n        sb.append(charSequence, i, length);\n        sb.append(quote);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CsvTransformer.java", "class_name": "CsvTransformer", "class_uri": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[void]generateHeader(Schema<?, ?>,StringBuilder)", "name": "generateHeader", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<?, ?>"}, {"name": "sb", "type": "StringBuilder"}], "return_type": "void", "signature": "private void generateHeader(Schema<?, ?> schema, StringBuilder sb)", "original_string": "    private void generateHeader(Schema<?, ?> schema, StringBuilder sb) {\n        if (withHeader) {\n            for (int i = 0; i < schema.getFields().length; i++) {\n                addLine(sb, schema.getFields()[i].getName());\n                if (i < schema.getFields().length - 1) {\n                    sb.append(separator);\n                }\n            }\n            sb.append(LINE_SEPARATOR);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CsvTransformer.java", "class_name": "CsvTransformer", "class_uri": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[String]generate(Schema<IN, ?>,int)", "name": "generate", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<IN, ?>"}, {"name": "limit", "type": "int"}], "return_type": "String", "signature": "@Override\n    public String generate(Schema<IN, ?> schema, int limit)", "original_string": "    @Override\n    public String generate(Schema<IN, ?> schema, int limit) {\n        StringBuilder sb = new StringBuilder();\n        generateHeader(schema, sb);\n        for (int i = 0; i < limit; i++) {\n            sb.append(apply(null, schema, i));\n            if (i < limit - 1) {\n                sb.append(LINE_SEPARATOR);\n            }\n        }\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CsvTransformer.java", "class_name": "CsvTransformer", "class_uri": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[String]getStartStream(Schema<IN, ?>)", "name": "getStartStream", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "String", "signature": "@Override\n    public String getStartStream(Schema<IN, ?> schema)", "original_string": "    @Override\n    public String getStartStream(Schema<IN, ?> schema) {\n        StringBuilder sb = new StringBuilder();\n        generateHeader(null, sb);\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CsvTransformer.java", "class_name": "CsvTransformer", "class_uri": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer.[String]getEndStream()", "name": "getEndStream", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String getEndStream()", "original_string": "    @Override\n    public String getEndStream() {\n        return null;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CsvTransformer.java", "class_name": "CsvTransformer", "class_uri": "src/main/java/net/datafaker/transformations/CsvTransformer.java.CsvTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[]XmlTransformer(boolean)", "name": "XmlTransformer", "arg_nums": 1, "params": [{"name": "pretty", "type": "boolean"}], "return_type": "", "signature": "private XmlTransformer(boolean pretty)", "original_string": "    private XmlTransformer(boolean pretty) {\n        this.pretty = pretty;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "class_name": "XmlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[CharSequence]apply(IN,Schema<IN, ?>)", "name": "apply", "arg_nums": 2, "params": [{"name": "input", "type": "IN"}, {"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "CharSequence", "signature": "@Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema)", "original_string": "    @Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema) {\n        StringBuilder sb = new StringBuilder();\n        Arrays.stream(schema.getFields()).forEach(it -> apply(input, sb, it));\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "class_name": "XmlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "CharSequence", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[String]generate(Iterable<IN>,Schema<IN, ?>)", "name": "generate", "arg_nums": 2, "params": [{"name": "input", "type": "Iterable<IN>"}, {"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "String", "signature": "@Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema)", "original_string": "    @Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema) {\n        if (input instanceof FakeSequence<?> fakeSequence && fakeSequence.isInfinite()) {\n            throw new IllegalArgumentException(\"The sequence should be finite of size: \" + fakeSequence);\n        }\n\n        StringJoiner data = new StringJoiner(LINE_SEPARATOR);\n        for (IN in : input) {\n            data.add(apply(in, schema));\n        }\n\n        return data.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "class_name": "XmlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[CharSequence]generate(Schema<IN, ?>,int)", "name": "generate", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<IN, ?>"}, {"name": "limit", "type": "int"}], "return_type": "CharSequence", "signature": "@Override\n    public CharSequence generate(Schema<IN, ?> schema, int limit)", "original_string": "    @Override\n    public CharSequence generate(Schema<IN, ?> schema, int limit) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < limit; i++) {\n            sb.append(apply(null, schema));\n            if (i < limit - 1) {\n                sb.append(LINE_SEPARATOR);\n            }\n        }\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "class_name": "XmlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "CharSequence", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[String]getStartStream(Schema<IN, ?>)", "name": "getStartStream", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "String", "signature": "@Override\n    public String getStartStream(Schema<IN, ?> schema)", "original_string": "    @Override\n    public String getStartStream(Schema<IN, ?> schema) {\n        throw new UnsupportedOperationException();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "class_name": "XmlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[String]getEndStream()", "name": "getEndStream", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String getEndStream()", "original_string": "    @Override\n    public String getEndStream() {\n        throw new UnsupportedOperationException();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "class_name": "XmlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[void]apply(IN,StringBuilder,Field<IN, ?>)", "name": "apply", "arg_nums": 3, "params": [{"name": "input", "type": "IN"}, {"name": "sb", "type": "StringBuilder"}, {"name": "xmlNode", "type": "Field<IN, ?>"}], "return_type": "void", "signature": "private void apply(IN input, StringBuilder sb, Field<IN, ?> xmlNode)", "original_string": "    private void apply(IN input, StringBuilder sb, Field<IN, ?> xmlNode) {\n\n        if (pretty && tagIndex > 0) {\n            sb.append(System.lineSeparator()).append(offset(tagIndex));\n        }\n\n        final String tag = xmlNode.getName().trim();\n        sb.append(\"<\").append(tag);\n        if (xmlNode instanceof CompositeField) {\n            Field<IN, ?>[] attrs = ((CompositeField) xmlNode).getFields();\n            applyAttributes(input, sb, attrs);\n\n            xmlNode = Arrays.stream(attrs)\n                .filter(inField -> !isAttribute(inField.getName())).findFirst()\n                .orElse(null);\n        }\n\n        applyTag(input, sb, xmlNode, tag);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "class_name": "XmlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[void]applyTag(IN,StringBuilder,Field<IN, ?>,String)", "name": "applyTag", "arg_nums": 4, "params": [{"name": "input", "type": "IN"}, {"name": "sb", "type": "StringBuilder"}, {"name": "field", "type": "Field<IN, ?>"}, {"name": "tag", "type": "String"}], "return_type": "void", "signature": "private void applyTag(IN input, StringBuilder sb, Field<IN, ?> field, String tag)", "original_string": "    private void applyTag(IN input, StringBuilder sb, Field<IN, ?> field, String tag) {\n        if (field == null ) {\n            applyValue(sb, tag, null);\n            return;\n        }\n\n        Object xmlNodeValue = field.transform(input);\n        if (xmlNodeValue instanceof Collection<?> children) {\n            if (children.isEmpty()) {\n                applyValue(sb, tag, null);\n            } else {\n                sb.append(\">\");\n                tagIndex++;\n                for (Object xmlNodeElem : children) {\n                    apply(input, sb, (Field<IN, ?>) xmlNodeElem);\n                }\n                tagIndex--;\n                if (pretty) {\n                    sb.append(System.lineSeparator()).append(offset(tagIndex));\n                }\n                sb.append(\"</\").append(tag).append(\">\");\n            }\n\n        } else if (xmlNodeValue instanceof String) {\n            applyValue(sb, tag, (String) xmlNodeValue);\n        } else if (xmlNodeValue == null) {\n            applyValue(sb, tag, null);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "class_name": "XmlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[boolean]isAttribute(String)", "name": "isAttribute", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "boolean", "signature": "private boolean isAttribute(String name)", "original_string": "    private boolean isAttribute(String name) {\n        return name != null;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "class_name": "XmlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[void]applyAttributes(IN,StringBuilder,Field<IN, ?>[])", "name": "applyAttributes", "arg_nums": 3, "params": [{"name": "input", "type": "IN"}, {"name": "sb", "type": "StringBuilder"}, {"name": "attrs", "type": "Field<IN, ?>[]"}], "return_type": "void", "signature": "private void applyAttributes(IN input, StringBuilder sb, Field<IN, ?>[] attrs)", "original_string": "    private void applyAttributes(IN input, StringBuilder sb, Field<IN, ?>[] attrs) {\n        for (Field<IN, ?> attr : attrs) {\n            String name = attr.getName();\n            if (isAttribute(name)) {\n                String value = (String) attr.transform(input);\n                sb.append(\" \").append(name).append(\"=\\\"\").append(escape(value)).append(\"\\\"\");\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "class_name": "XmlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[void]applyValue(StringBuilder,String,String)", "name": "applyValue", "arg_nums": 3, "params": [{"name": "sb", "type": "StringBuilder"}, {"name": "tag", "type": "String"}, {"name": "xmlNodeValue", "type": "String"}], "return_type": "void", "signature": "private void applyValue(StringBuilder sb, String tag, String xmlNodeValue)", "original_string": "    private void applyValue(StringBuilder sb, String tag, String xmlNodeValue) {\n        if (xmlNodeValue != null) {\n            sb.append(\">\");\n            sb.append(escape(xmlNodeValue));\n            sb.append(\"</\").append(tag).append(\">\");\n        } else {\n            sb.append(\"/>\");\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "class_name": "XmlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[String]offset(int)", "name": "offset", "arg_nums": 1, "params": [{"name": "length", "type": "int"}], "return_type": "String", "signature": "private String offset(int length)", "original_string": "    private String offset(int length) {\n        return \" \".repeat(Math.max(0, length * INDENTATION_STEP));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "class_name": "XmlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[String]escape(String)", "name": "escape", "arg_nums": 1, "params": [{"name": "str", "type": "String"}], "return_type": "String", "signature": "private String escape(String str)", "original_string": "    private String escape(String str) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str.length(); i++) {\n            final char c = str.charAt(i);\n            sb.append(ESCAPING_MAP.getOrDefault(c, String.valueOf(c)));\n        }\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "class_name": "XmlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer.[Map<Character, String>]createEscapeMap()", "name": "createEscapeMap", "arg_nums": 0, "params": [], "return_type": "Map<Character, String>", "signature": "private static Map<Character, String> createEscapeMap()", "original_string": "    private static Map<Character, String> createEscapeMap() {\n        return Map.of('<', \"&lt;\", '>', \"&gt;\", '&', \"&amp;\", '\\'', \"&apos;\", '\"', \"&quot;\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/XmlTransformer.java", "class_name": "XmlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/XmlTransformer.java.XmlTransformer", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Map<Character, String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[]SimpleField(String,Function<MyObject, MyType>)", "name": "SimpleField", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "transform", "type": "Function<MyObject, MyType>"}], "return_type": "", "signature": "protected SimpleField(String name, Function<MyObject, MyType> transform)", "original_string": "    protected SimpleField(String name, Function<MyObject, MyType> transform) {\n        this(name, transform, null);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/SimpleField.java", "class_name": "SimpleField", "class_uri": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[]SimpleField(String,Supplier<MyType>)", "name": "SimpleField", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "supplier", "type": "Supplier<MyType>"}], "return_type": "", "signature": "protected SimpleField(String name, Supplier<MyType> supplier)", "original_string": "    protected SimpleField(String name, Supplier<MyType> supplier) {\n        this(name, null, supplier);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/SimpleField.java", "class_name": "SimpleField", "class_uri": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[]SimpleField(String,Function<MyObject, MyType>,Supplier<MyType>)", "name": "SimpleField", "arg_nums": 3, "params": [{"name": "name", "type": "String"}, {"name": "transform", "type": "Function<MyObject, MyType>"}, {"name": "supplier", "type": "Supplier<MyType>"}], "return_type": "", "signature": "private SimpleField(String name, Function<MyObject, MyType> transform, Supplier<MyType> supplier)", "original_string": "    private SimpleField(String name, Function<MyObject, MyType> transform, Supplier<MyType> supplier) {\n        this.name = name;\n        this.transform = transform;\n        this.supplier = supplier;\n        if (this.transform == null && this.supplier == null) {\n            throw new IllegalArgumentException(\"Either transform or supplier should be non-null\");\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/SimpleField.java", "class_name": "SimpleField", "class_uri": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[String]getName()", "name": "getName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String getName()", "original_string": "    @Override\n    public String getName() {\n        return name;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/SimpleField.java", "class_name": "SimpleField", "class_uri": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[MyType]transform(MyObject)", "name": "transform", "arg_nums": 1, "params": [{"name": "input", "type": "MyObject"}], "return_type": "MyType", "signature": "@Override\n    public MyType transform(MyObject input)", "original_string": "    @Override\n    public MyType transform(MyObject input) {\n        if (transform == null) {\n            return supplier.get();\n        }\n        if (input == null) {\n            throw new IllegalArgumentException(\"Input could be null only if suppliers are defined\");\n        }\n        return transform.apply(input);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/SimpleField.java", "class_name": "SimpleField", "class_uri": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "MyType", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[Function<MyObject, MyType>]getTransform()", "name": "getTransform", "arg_nums": 0, "params": [], "return_type": "Function<MyObject, MyType>", "signature": "public Function<MyObject, MyType> getTransform()", "original_string": "    public Function<MyObject, MyType> getTransform() {\n        return transform;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/SimpleField.java", "class_name": "SimpleField", "class_uri": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Function<MyObject, MyType>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[Supplier<MyType>]getSupplier()", "name": "getSupplier", "arg_nums": 0, "params": [], "return_type": "Supplier<MyType>", "signature": "public Supplier<MyType> getSupplier()", "original_string": "    public Supplier<MyType> getSupplier() {\n        return supplier;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/SimpleField.java", "class_name": "SimpleField", "class_uri": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Supplier<MyType>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object o)", "original_string": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof SimpleField<?, ?> that)) return false;\n\n        if (!Objects.equals(name, that.name)) return false;\n        if (!Objects.equals(transform, that.transform)) return false;\n        return Objects.equals(supplier, that.supplier);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/SimpleField.java", "class_name": "SimpleField", "class_uri": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        return name != null ? name.hashCode() : 0;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/SimpleField.java", "class_name": "SimpleField", "class_uri": "src/main/java/net/datafaker/transformations/SimpleField.java.SimpleField", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[]JsonTransformer(boolean)", "name": "JsonTransformer", "arg_nums": 1, "params": [{"name": "commaBetweenObjects", "type": "boolean"}], "return_type": "", "signature": "private JsonTransformer(boolean commaBetweenObjects)", "original_string": "    private JsonTransformer(boolean commaBetweenObjects) {\n        this.commaBetweenObjects = commaBetweenObjects;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JsonTransformer.java", "class_name": "JsonTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[JsonTransformer.JsonTransformerBuilder<IN>]builder()", "name": "builder", "arg_nums": 0, "params": [], "return_type": "JsonTransformer.JsonTransformerBuilder<IN>", "signature": "public static <IN> JsonTransformer.JsonTransformerBuilder<IN> builder()", "original_string": "    public static <IN> JsonTransformer.JsonTransformerBuilder<IN> builder() {\n        return new JsonTransformer.JsonTransformerBuilder<>();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JsonTransformer.java", "class_name": "JsonTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "JsonTransformer.JsonTransformerBuilder<IN>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[String]apply(IN,Schema<IN, ?>)", "name": "apply", "arg_nums": 2, "params": [{"name": "input", "type": "IN"}, {"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "String", "signature": "@Override\n    public String apply(IN input, Schema<IN, ?> schema)", "original_string": "    @Override\n    public String apply(IN input, Schema<IN, ?> schema) {\n        Field<?, ?>[] fields = schema.getFields();\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        for (int i = 0; i < fields.length; i++) {\n            value2String((fields[i].getName()), sb);\n            sb.append(\": \");\n            if (fields[i] instanceof CompositeField) {\n                sb.append(apply(input, (CompositeField) fields[i], i));\n            } else {\n                applyValue(input, sb, ((SimpleField) fields[i]).transform(input));\n            }\n            if (i < fields.length - 1) {\n                sb.append(\", \");\n            }\n        }\n        sb.append(\"}\");\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JsonTransformer.java", "class_name": "JsonTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[String]generate(Iterable<IN>,Schema<IN, ?>)", "name": "generate", "arg_nums": 2, "params": [{"name": "input", "type": "Iterable<IN>"}, {"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "String", "signature": "@Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema)", "original_string": "    @Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema) {\n        if (input instanceof FakeSequence<?> fakeSequence && fakeSequence.isInfinite()) {\n            throw new IllegalArgumentException(\"The sequence should be finite of size: \" + fakeSequence);\n        }\n\n        StringJoiner data = new StringJoiner(LINE_SEPARATOR);\n        Iterator<IN> iterator = input.iterator();\n        while (iterator.hasNext()) {\n            data.add(apply(iterator.next(), schema) + (commaBetweenObjects && iterator.hasNext() ? \",\" : \"\"));\n        }\n\n        return data.length() > 1 ? WRAPPERS[0] + LINE_SEPARATOR + data + LINE_SEPARATOR + WRAPPERS[1] : data.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JsonTransformer.java", "class_name": "JsonTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[String]generate(Schema<IN, ?>,int)", "name": "generate", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<IN, ?>"}, {"name": "limit", "type": "int"}], "return_type": "String", "signature": "@Override\n    public String generate(Schema<IN, ?> schema, int limit)", "original_string": "    @Override\n    public String generate(Schema<IN, ?> schema, int limit) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < limit; i++) {\n            sb.append(apply(null, schema, i));\n            if (commaBetweenObjects && i < limit - 1) {\n                sb.append(\",\").append(LINE_SEPARATOR);\n            }\n        }\n\n        return limit > 1 ? WRAPPERS[0] + LINE_SEPARATOR + sb + LINE_SEPARATOR + WRAPPERS[1] : sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JsonTransformer.java", "class_name": "JsonTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[String]getStartStream(Schema<IN, ?>)", "name": "getStartStream", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "String", "signature": "@Override\n    public String getStartStream(Schema<IN, ?> schema)", "original_string": "    @Override\n    public String getStartStream(Schema<IN, ?> schema) {\n        return \"[\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JsonTransformer.java", "class_name": "JsonTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[String]getEndStream()", "name": "getEndStream", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String getEndStream()", "original_string": "    @Override\n    public String getEndStream() {\n        return \"]\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JsonTransformer.java", "class_name": "JsonTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[String]getElementSeparator()", "name": "getElementSeparator", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getElementSeparator()", "original_string": "    public String getElementSeparator() {\n        return \",\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JsonTransformer.java", "class_name": "JsonTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[void]applyValue(IN,StringBuilder,Object)", "name": "applyValue", "arg_nums": 3, "params": [{"name": "input", "type": "IN"}, {"name": "sb", "type": "StringBuilder"}, {"name": "value", "type": "Object"}], "return_type": "void", "signature": "private void applyValue(IN input, StringBuilder sb, Object value)", "original_string": "    private void applyValue(IN input, StringBuilder sb, Object value) {\n        if (value instanceof Collection<?>) {\n            sb.append(generate(input, (Collection) value));\n        } else if (value != null && value.getClass().isArray()) {\n            sb.append(generate(input, Arrays.asList((Object[]) value)));\n        } else {\n            value2String(value, sb);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JsonTransformer.java", "class_name": "JsonTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[String]generate(IN,Collection<Object>)", "name": "generate", "arg_nums": 2, "params": [{"name": "input", "type": "IN"}, {"name": "collection", "type": "Collection<Object>"}], "return_type": "String", "signature": "private String generate(IN input, Collection<Object> collection)", "original_string": "    private String generate(IN input, Collection<Object> collection) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\");\n        int i = 0;\n        for (Object value : collection) {\n            if (i > 0) {\n                sb.append(\", \");\n            }\n            i++;\n            if (value instanceof CompositeField<?, ?>) {\n                sb.append(apply(input, ((CompositeField) value)));\n            } else {\n                applyValue(input, sb, value);\n            }\n        }\n        sb.append(\"]\");\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JsonTransformer.java", "class_name": "JsonTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[void]value2String(Object,StringBuilder)", "name": "value2String", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "sb", "type": "StringBuilder"}], "return_type": "void", "signature": "private static void value2String(Object value, StringBuilder sb)", "original_string": "    private static void value2String(Object value, StringBuilder sb) {\n        if (value == null) {\n            sb.append(\"null\");\n        } else if (value instanceof Integer\n            || value instanceof Long\n            || value instanceof Short\n            || value instanceof BigInteger\n            || value instanceof Boolean\n            || (value instanceof Double\n            && BigDecimal.valueOf((Double) value).remainder(BigDecimal.ONE).doubleValue() == 0)\n            || (value instanceof BigDecimal\n            && ((BigDecimal) value).remainder(BigDecimal.ONE).doubleValue() == 0)) {\n            sb.append(value);\n        } else {\n            String val = String.valueOf(value);\n            boolean toWrap = !val.startsWith(\"#{json\");\n            if (toWrap) {\n                sb.append(\"\\\"\");\n            }\n            int start = 0;\n            final int length = val.length();\n            for (int i = 0; i < length; i++) {\n                final char c = val.charAt(i);\n                final String escapedValue = ESCAPING_MAP.get(c);\n                if (escapedValue != null) {\n                    sb.append(val, start, i).append(escapedValue);\n                    start = i + 1;\n                }\n            }\n            sb.append(val, start, length);\n            if (toWrap) {\n                sb.append(\"\\\"\");\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JsonTransformer.java", "class_name": "JsonTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer.[Map<Character, String>]createEscapeMap()", "name": "createEscapeMap", "arg_nums": 0, "params": [], "return_type": "Map<Character, String>", "signature": "private static Map<Character, String> createEscapeMap()", "original_string": "    private static Map<Character, String> createEscapeMap() {\n        return Map.ofEntries(Map.entry('\\\\', \"\\\\\\\\\"),\n            Map.entry('\\\"', \"\\\\\\\"\"),\n            Map.entry('\\b', \"\\\\b\"),\n            Map.entry('\\f', \"\\\\f\"),\n            Map.entry('\\n', \"\\\\n\"),\n            Map.entry('\\r', \"\\\\r\"),\n            Map.entry('\\t', \"\\\\t\"),\n            Map.entry('/', \"\\\\/\"),\n            Map.entry('\\u0000', \"\\\\u0000\"),\n            Map.entry('\\u0001', \"\\\\u0001\"),\n            Map.entry('\\u0002', \"\\\\u0002\"),\n            Map.entry('\\u0003', \"\\\\u0003\"),\n            Map.entry('\\u0004', \"\\\\u0004\"),\n            Map.entry('\\u0005', \"\\\\u0005\"),\n            Map.entry('\\u0006', \"\\\\u0006\"),\n            Map.entry('\\u0007', \"\\\\u0007\"),\n            // map.put('\\u0008', \"\\\\u0008\");\n            // covered by map.put('\\b', \"\\\\b\");\n            // map.put('\\u0009', \"\\\\u0009\");\n            // covered by map.put('\\t', \"\\\\t\");\n            // map.put((char) 10, \"\\\\u000A\");\n            // covered by map.put('\\n', \"\\\\n\");\n            Map.entry('\\u000B', \"\\\\u000B\"),\n            // map.put('\\u000C', \"\\\\u000C\");\n            // covered by map.put('\\f', \"\\\\f\");\n            // map.put((char) 13, \"\\\\u000D\");\n            // covered by map.put('\\r', \"\\\\r\");\n            Map.entry('\\u000E', \"\\\\u000E\"),\n            Map.entry('\\u000F', \"\\\\u000F\"),\n            Map.entry('\\u0010', \"\\\\u0010\"),\n            Map.entry('\\u0011', \"\\\\u0011\"),\n            Map.entry('\\u0012', \"\\\\u0012\"),\n            Map.entry('\\u0013', \"\\\\u0013\"),\n            Map.entry('\\u0014', \"\\\\u0014\"),\n            Map.entry('\\u0015', \"\\\\u0015\"),\n            Map.entry('\\u0016', \"\\\\u0016\"),\n            Map.entry('\\u0017', \"\\\\u0017\"),\n            Map.entry('\\u0018', \"\\\\u0018\"),\n            Map.entry('\\u0019', \"\\\\u0019\"),\n            Map.entry('\\u001A', \"\\\\u001A\"),\n            Map.entry('\\u001B', \"\\\\u001B\"),\n            Map.entry('\\u001C', \"\\\\u001C\"),\n            Map.entry('\\u001D', \"\\\\u001D\"),\n            Map.entry('\\u001E', \"\\\\u001E\"),\n            Map.entry('\\u001F', \"\\\\u001F\"));\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/JsonTransformer.java", "class_name": "JsonTransformer", "class_uri": "src/main/java/net/datafaker/transformations/JsonTransformer.java.JsonTransformer", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Map<Character, String>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField.[]CompositeField(String,Field<MyObject, MyType>[])", "name": "CompositeField", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "fields", "type": "Field<MyObject, MyType>[]"}], "return_type": "", "signature": "public CompositeField(String name, Field<MyObject, MyType>[] fields)", "original_string": "    public CompositeField(String name, Field<MyObject, MyType>[] fields) {\n        super(fields);\n        this.name = name;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CompositeField.java", "class_name": "CompositeField", "class_uri": "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField.[String]getName()", "name": "getName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String getName()", "original_string": "    @Override\n    public String getName() {\n        return name;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CompositeField.java", "class_name": "CompositeField", "class_uri": "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField.[MyType]transform(MyObject)", "name": "transform", "arg_nums": 1, "params": [{"name": "input", "type": "MyObject"}], "return_type": "MyType", "signature": "@Override\n    public MyType transform(MyObject input)", "original_string": "    @Override\n    public MyType transform(MyObject input) {\n        return null;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CompositeField.java", "class_name": "CompositeField", "class_uri": "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "MyType", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object o)", "original_string": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof CompositeField<?, ?> that)) return false;\n        if (!super.equals(o)) return false;\n\n        return Objects.equals(name, that.name);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CompositeField.java", "class_name": "CompositeField", "class_uri": "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (name != null ? name.hashCode() : 0);\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/CompositeField.java", "class_name": "CompositeField", "class_uri": "src/main/java/net/datafaker/transformations/CompositeField.java.CompositeField", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Schema.java.Schema.[]Schema(Field<IN, OUT>[])", "name": "Schema", "arg_nums": 1, "params": [{"name": "fields", "type": "Field<IN, OUT>[]"}], "return_type": "", "signature": "protected Schema(Field<IN, OUT>[] fields)", "original_string": "    protected Schema(Field<IN, OUT>[] fields) {\n        this.fields = fields;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Schema.java", "class_name": "Schema", "class_uri": "src/main/java/net/datafaker/transformations/Schema.java.Schema", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Schema.java.Schema.[Field<IN, OUT>[]]getFields()", "name": "getFields", "arg_nums": 0, "params": [], "return_type": "Field<IN, OUT>[]", "signature": "public Field<IN, OUT>[] getFields()", "original_string": "    public Field<IN, OUT>[] getFields() {\n        return fields;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Schema.java", "class_name": "Schema", "class_uri": "src/main/java/net/datafaker/transformations/Schema.java.Schema", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Field<IN, OUT>[]", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Schema.java.Schema.[Schema<IN, OUT>]of()", "name": "of", "arg_nums": 0, "params": [], "return_type": "Schema<IN, OUT>", "signature": "@SafeVarargs\n    public static <IN, OUT> Schema<IN, OUT> of(Field<IN, OUT>... fields)", "original_string": "    @SafeVarargs\n    public static <IN, OUT> Schema<IN, OUT> of(Field<IN, OUT>... fields) {\n        return new Schema<>(fields);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Schema.java", "class_name": "Schema", "class_uri": "src/main/java/net/datafaker/transformations/Schema.java.Schema", "attributes": {"modifiers": "@SafeVarargs\n    public static", "marker_annotations": ["@SafeVarargs"], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Schema<IN, OUT>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Schema.java.Schema.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(Object o)", "original_string": "    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Schema<?, ?> schema)) return false;\n\n        return Arrays.equals(fields, schema.fields);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Schema.java", "class_name": "Schema", "class_uri": "src/main/java/net/datafaker/transformations/Schema.java.Schema", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/Schema.java.Schema.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        return Arrays.hashCode(fields);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/Schema.java", "class_name": "Schema", "class_uri": "src/main/java/net/datafaker/transformations/Schema.java.Schema", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[CharSequence]apply(IN,Schema<IN, ?>)", "name": "apply", "arg_nums": 2, "params": [{"name": "input", "type": "IN"}, {"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "CharSequence", "signature": "@Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema)", "original_string": "    @Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema) {\n        Field<IN, ?>[] fields = schema.getFields();\n\n        if (fields.length == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        return apply(sb, input, fields, \"\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/YamlTransformer.java", "class_name": "YamlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "CharSequence", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[String]generate(Iterable<IN>,Schema<IN, ?>)", "name": "generate", "arg_nums": 2, "params": [{"name": "input", "type": "Iterable<IN>"}, {"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "String", "signature": "@Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema)", "original_string": "    @Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema) {\n        if (input instanceof FakeSequence<?> fakeSequence && fakeSequence.isInfinite()) {\n            throw new IllegalArgumentException(\"The sequence should be finite of size: \" + fakeSequence);\n        }\n\n        StringJoiner data = new StringJoiner(LINE_SEPARATOR);\n        for (IN in : input) {\n            data.add(apply(in, schema));\n        }\n\n        return data.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/YamlTransformer.java", "class_name": "YamlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[String]generate(Schema<IN, ?>,int)", "name": "generate", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<IN, ?>"}, {"name": "limit", "type": "int"}], "return_type": "String", "signature": "@Override\n    public String generate(Schema<IN, ?> schema, int limit)", "original_string": "    @Override\n    public String generate(Schema<IN, ?> schema, int limit) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < limit; i++) {\n            sb.append(apply(null, schema));\n            if (i < limit - 1) {\n                sb.append(LINE_SEPARATOR);\n            }\n        }\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/YamlTransformer.java", "class_name": "YamlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[String]getStartStream(Schema<IN, ?>)", "name": "getStartStream", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "String", "signature": "@Override\n    public String getStartStream(Schema<IN, ?> schema)", "original_string": "    @Override\n    public String getStartStream(Schema<IN, ?> schema) {\n        return \"\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/YamlTransformer.java", "class_name": "YamlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[String]getEndStream()", "name": "getEndStream", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String getEndStream()", "original_string": "    @Override\n    public String getEndStream() {\n        return \"\";\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/YamlTransformer.java", "class_name": "YamlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[String]apply(StringBuilder,IN,Field<IN, ?>[],String)", "name": "apply", "arg_nums": 4, "params": [{"name": "sb", "type": "StringBuilder"}, {"name": "input", "type": "IN"}, {"name": "fields", "type": "Field<IN, ?>[]"}, {"name": "offset", "type": "String"}], "return_type": "String", "signature": "private String apply(final StringBuilder sb, final IN input, final Field<IN, ?>[] fields, final String offset)", "original_string": "    private String apply(final StringBuilder sb, final IN input, final Field<IN, ?>[] fields, final String offset) {\n        Set<String> keys = new HashSet<>();\n        for (Field<IN, ?> field : fields) {\n            String key = field.getName().trim();\n            if (!keys.add(key)) continue;\n            Object value = field.transform(input);\n            sb.append(offset).append(key).append(\":\");\n            if (value instanceof Schema) {\n                sb.append(System.lineSeparator());\n                value2String(value, sb, offset + INDENTATION);\n            } else {\n                value2String(value, sb, offset);\n            }\n\n\n            if (sb.lastIndexOf(System.lineSeparator()) != sb.length() - System.lineSeparator().length()) {\n                sb.append(System.lineSeparator());\n            }\n\n        }\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/YamlTransformer.java", "class_name": "YamlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[void]addCollection(StringBuilder,Collection<Object>,String)", "name": "addCollection", "arg_nums": 3, "params": [{"name": "sb", "type": "StringBuilder"}, {"name": "collection", "type": "Collection<Object>"}, {"name": "offset", "type": "String"}], "return_type": "void", "signature": "private void addCollection(StringBuilder sb, Collection<Object> collection, String offset)", "original_string": "    private void addCollection(StringBuilder sb, Collection<Object> collection, String offset) {\n        for (Object value : collection) {\n            value2String(value, sb, offset + \"-\");\n            sb.append(System.lineSeparator());\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/YamlTransformer.java", "class_name": "YamlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer.[void]value2String(Object,StringBuilder,String)", "name": "value2String", "arg_nums": 3, "params": [{"name": "value", "type": "Object"}, {"name": "sb", "type": "StringBuilder"}, {"name": "offset", "type": "String"}], "return_type": "void", "signature": "private void value2String(Object value, StringBuilder sb, String offset)", "original_string": "    private void value2String(Object value, StringBuilder sb, String offset) {\n        if (value instanceof Schema) {\n            Field<IN, ?>[] fields = ((Schema<IN, ?>) value).getFields();\n            apply(sb, null, fields, offset);\n        } else if (value instanceof Collection) {\n            sb.append(System.lineSeparator());\n            offset += INDENTATION;\n            addCollection(sb, (Collection) value, offset);\n        } else if (value != null && value.getClass().isArray()) {\n            sb.append(System.lineSeparator());\n            offset += INDENTATION;\n            addCollection(sb, Arrays.asList((Object[]) value), offset);\n        } else {\n            if (sb.charAt(sb.length() - 1) != ':') {\n                sb.append(offset);\n            }\n            sb.append(\" \").append(String.valueOf(value).trim());\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/YamlTransformer.java", "class_name": "YamlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/YamlTransformer.java.YamlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/TriFunction.java.TriFunction.[R]apply(A,B,C)", "name": "apply", "arg_nums": 3, "params": [{"name": "a", "type": "A"}, {"name": "b", "type": "B"}, {"name": "c", "type": "C"}], "return_type": "R", "signature": "R apply(A a, B b, C c)", "original_string": "    R apply(A a, B b, C c);", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/TriFunction.java", "class_name": "TriFunction", "class_uri": "src/main/java/net/datafaker/transformations/sql/TriFunction.java.TriFunction", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "R", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[SqlTransformer.SqlTransformerBuilder<IN>]builder()", "name": "builder", "arg_nums": 0, "params": [], "return_type": "SqlTransformer.SqlTransformerBuilder<IN>", "signature": "public static <IN> SqlTransformer.SqlTransformerBuilder<IN> builder()", "original_string": "    public static <IN> SqlTransformer.SqlTransformerBuilder<IN> builder() {\n        return new SqlTransformer.SqlTransformerBuilder<>();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "SqlTransformer.SqlTransformerBuilder<IN>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[]SqlTransformer(String,String,char,SqlDialect,String,Casing,boolean,int,Case,boolean)", "name": "SqlTransformer", "arg_nums": 10, "params": [{"name": "schemaName", "type": "String"}, {"name": "tableName", "type": "String"}, {"name": "quote", "type": "char"}, {"name": "dialect", "type": "SqlDialect"}, {"name": "sqlIdentifier", "type": "String"}, {"name": "casing", "type": "Casing"}, {"name": "withBatchMode", "type": "boolean"}, {"name": "batchSize", "type": "int"}, {"name": "keywordCase", "type": "Case"}, {"name": "forceSqlQuoteIdentifierUsage", "type": "boolean"}], "return_type": "", "signature": "private SqlTransformer(String schemaName, String tableName, char quote, SqlDialect dialect, String sqlIdentifier,\n                           Casing casing, boolean withBatchMode, int batchSize, Case keywordCase, boolean forceSqlQuoteIdentifierUsage)", "original_string": "    private SqlTransformer(String schemaName, String tableName, char quote, SqlDialect dialect, String sqlIdentifier,\n                           Casing casing, boolean withBatchMode, int batchSize, Case keywordCase, boolean forceSqlQuoteIdentifierUsage) {\n        this.schemaName = schemaName;\n        this.quote = quote;\n        this.dialect = dialect;\n        this.openSqlIdentifier = sqlIdentifier.charAt(0);\n        this.closeSqlIdentifier = sqlIdentifier.length() == 1 ? sqlIdentifier.charAt(0) : sqlIdentifier.charAt(1);\n        this.tableName = tableName;\n        this.casing = casing;\n        this.withBatchMode = withBatchMode;\n        this.batchSize = batchSize;\n        this.keywordCase = keywordCase;\n        this.forceSqlQuoteIdentifierUsage = forceSqlQuoteIdentifierUsage;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[boolean]isSqlQuoteIdentifierRequiredFor(String)", "name": "isSqlQuoteIdentifierRequiredFor", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "boolean", "signature": "private boolean isSqlQuoteIdentifierRequiredFor(String name)", "original_string": "    private boolean isSqlQuoteIdentifierRequiredFor(String name) {\n        if (forceSqlQuoteIdentifierUsage) return true;\n        for (int i = 0; i < name.length(); i++) {\n            if (casing == Casing.TO_UPPER && Character.isLowerCase(name.charAt(i))\n                || casing == Casing.TO_LOWER && Character.isUpperCase(name.charAt(i))\n                || name.charAt(i) == openSqlIdentifier\n                || name.charAt(i) == closeSqlIdentifier\n                || name.charAt(i) == DEFAULT_CATALOG_SEPARATOR) {\n                return true;\n            }\n        }\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[CharSequence]apply(IN,Schema<IN, ?>)", "name": "apply", "arg_nums": 2, "params": [{"name": "input", "type": "IN"}, {"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "CharSequence", "signature": "@Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema)", "original_string": "    @Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema) {\n        return apply(input, schema, 0);\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "CharSequence", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[CharSequence]apply(IN,Schema<IN, ?>,long)", "name": "apply", "arg_nums": 3, "params": [{"name": "input", "type": "IN"}, {"name": "schema", "type": "Schema<IN, ?>"}, {"name": "rowId", "type": "long"}], "return_type": "CharSequence", "signature": "@Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema, long rowId)", "original_string": "    @Override\n    public CharSequence apply(IN input, Schema<IN, ?> schema, long rowId) {\n        //noinspection unchecked\n        Field<?, ? extends CharSequence>[] fields = (Field<?, ? extends CharSequence>[]) schema.getFields();\n        if (fields.length == 0) {\n            return EMPTY_RESULT;\n        }\n        if (withBatchMode) {\n            if (rowId == 0 || batchSize > 0 && rowId % batchSize == 0) {\n                return SqlDialect.getFirstRow(\n                    dialect, () -> appendTableInfo(fields), () -> addValues(input, fields, true), keywordCase);\n            } else {\n                return String.join(LINE_SEPARATOR, \",\",\n                    SqlDialect.getOtherRow(\n                        dialect, () -> appendTableInfo(fields), () -> addValues(input, fields, true), keywordCase));\n            }\n        } else {\n            return String.join(\" \", INSERT_INTO.getValue(keywordCase),\n                appendTableInfo(fields),\n                VALUES.getValue(keywordCase),\n                addValues(input, fields, true));\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "CharSequence", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]addValues(IN,Field<?, ? extends CharSequence>[],Boolean)", "name": "addValues", "arg_nums": 3, "params": [{"name": "input", "type": "IN"}, {"name": "fields", "type": "Field<?, ? extends CharSequence>[]"}, {"name": "isRoot", "type": "Boolean"}], "return_type": "String", "signature": "private String addValues(IN input, Field<?, ? extends CharSequence>[] fields, Boolean isRoot)", "original_string": "    private String addValues(IN input, Field<?, ? extends CharSequence>[] fields, Boolean isRoot) {\n        StringJoiner result = new StringJoiner(\", \");\n        for (int i = 0; i < fields.length; i++) {\n\n            if(dialect != null) {\n                String fieldPrefix =\n                    dialect.getFieldPrefix(fields[i].getName());\n\n                if (!fieldPrefix.isEmpty() && !isRoot) {\n                    result.add(quote + dialect.getFieldPrefix(fields[i].getName()) + quote);\n                }\n            }\n\n            if (fields[i] instanceof SimpleField) {\n                //noinspection unchecked\n                Object value = ((SimpleField<Object, ? extends CharSequence>) fields[i]).transform(input);\n                Class<?> clazz = value == null ? null : value.getClass();\n                if (value == null\n                    || value instanceof Number\n                    || value instanceof Boolean\n                    || clazz.isPrimitive()) {\n                    result.add(String.valueOf(value));\n                } else if (clazz.isArray()) {\n                    final Class<?> componentType = clazz.getComponentType();\n                    result.add(ARRAY.getValue(keywordCase) + dialect.getArrayStart() +\n                        (componentType.isPrimitive()\n                            ? handlePrimitivesInArray(componentType, value)\n                            : handleObjectInArray(value)) + dialect.getArrayEnd());\n                } else if (value instanceof Map) {\n                    result.add(MAP.getValue(keywordCase) + \"(\" + handleObjectInMap(value) + \")\");\n                } else if (value instanceof Collection) {\n                    result.add(MULTISET.getValue(keywordCase) + \"[\" +\n                        handleObjectInCollection(value) + \"]\");\n                } else {\n                    result.add(handleObject(value));\n                }\n            } else if (fields[i] instanceof CompositeField) {\n                result.add(dialect.getCompositePrefix(keywordCase) + addValues(input, ((CompositeField) fields[i]).getFields(), false));\n            } else {\n                throw new IllegalArgumentException(fields[i] + \" not supported\");\n            }\n        }\n        String res = result.toString();\n        return !res.isEmpty() ? \"(\" + res + \")\" : res;\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]handleObjectInArray(Object)", "name": "handleObjectInArray", "arg_nums": 1, "params": [{"name": "value", "type": "Object"}], "return_type": "String", "signature": "private String handleObjectInArray(Object value)", "original_string": "    private String handleObjectInArray(Object value) {\n        StringBuilder result = new StringBuilder();\n        Object[] array = (Object[]) value;\n        for (int j = 0; j < array.length; j++) {\n            result.append(handleObject(array[j]));\n            if (j < array.length - 1) {\n                result.append(\", \");\n            }\n        }\n        return result.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]handleObjectInCollection(Object)", "name": "handleObjectInCollection", "arg_nums": 1, "params": [{"name": "value", "type": "Object"}], "return_type": "String", "signature": "private String handleObjectInCollection(Object value)", "original_string": "    private String handleObjectInCollection(Object value) {\n        StringBuilder result = new StringBuilder();\n        Collection collection = (Collection) value;\n        int i = 0;\n        for (Object elem : collection) {\n            result.append(handleObject(elem));\n            if (i < collection.size() - 1) {\n                result.append(\", \");\n            }\n            i++;\n        }\n        return result.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]handleObjectInMap(Object)", "name": "handleObjectInMap", "arg_nums": 1, "params": [{"name": "value", "type": "Object"}], "return_type": "String", "signature": "private String handleObjectInMap(Object value)", "original_string": "    private String handleObjectInMap(Object value) {\n        StringBuilder result = new StringBuilder();\n        Map<Object, Object> map = (Map<Object, Object>) value;\n        int i = 0;\n        for (Map.Entry<Object, Object> entry : map.entrySet()) {\n            result.append(handleObject(entry.getKey()));\n            result.append(\", \");\n            result.append(handleObject(entry.getValue()));\n\n            if (i < map.size() - 1) {\n                result.append(\", \");\n            }\n            i++;\n        }\n        return result.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]handleObject(Object)", "name": "handleObject", "arg_nums": 1, "params": [{"name": "value", "type": "Object"}], "return_type": "String", "signature": "private String handleObject(Object value)", "original_string": "    private String handleObject(Object value) {\n        if (value == null) {\n            return NULL.getValue(keywordCase);\n        } else {\n            if (value.getClass().isArray()) {\n                final Class<?> componentType = value.getClass().getComponentType();\n                String array = componentType.isPrimitive()\n                    ? handlePrimitivesInArray(componentType, value)\n                    : handleObjectInArray(value);\n                return ARRAY.getValue(keywordCase) + \"[\" + array + \"]\";\n            } else if (value instanceof Map) {\n                return MAP.getValue(keywordCase) + \"(\" + handleObjectInMap(value) + \")\";\n            } else if (value instanceof Collection) {\n                return MULTISET.getValue(keywordCase)\n                    + \"[\" + handleObjectInCollection(value) + \"]\";\n            } else {\n                String strValue = value.toString();\n                final int length = strValue.length();\n                final boolean quoteRequired = !(value instanceof Number) && !(value instanceof Boolean);\n                String res = handledObjectToString(length, strValue);\n                return quoteRequired ? quote + res + quote : res;\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]handledObjectToString(int,String)", "name": "handledObjectToString", "arg_nums": 2, "params": [{"name": "length", "type": "int"}, {"name": "strValue", "type": "String"}], "return_type": "String", "signature": "private String handledObjectToString(int length, String strValue)", "original_string": "    private String handledObjectToString(int length, String strValue) {\n        StringJoiner joiner = null;\n\n        int j = 0;\n        for (int k = 0; k < length; k++) {\n            if (strValue.charAt(k) == quote) {\n                if (joiner == null) {\n                    joiner = new StringJoiner(\"\" + quote);\n                }\n                joiner.add(strValue.substring(j, k + 1));\n                j = k + 1;\n            }\n        }\n        return joiner == null ? strValue : joiner.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]handlePrimitivesInArray(Class<?>,Object)", "name": "handlePrimitivesInArray", "arg_nums": 2, "params": [{"name": "componentType", "type": "Class<?>"}, {"name": "value", "type": "Object"}], "return_type": "String", "signature": "private String handlePrimitivesInArray(Class<?> componentType, Object value)", "original_string": "    private String handlePrimitivesInArray(Class<?> componentType, Object value) {\n        StringJoiner joiner = new StringJoiner(\", \");\n        if (componentType == byte.class) {\n            byte[] array = (byte[]) value;\n            for (byte b : array) {\n                joiner.add(String.valueOf(b));\n            }\n        }\n        if (componentType == short.class) {\n            short[] array = (short[]) value;\n            for (short i : array) {\n                joiner.add(String.valueOf(i));\n            }\n        }\n        if (componentType == boolean.class) {\n            boolean[] array = (boolean[]) value;\n            for (boolean b : array) {\n                joiner.add(String.valueOf(b));\n            }\n        } else if (componentType == int.class) {\n            int[] array = (int[]) value;\n            for (int i : array) {\n                joiner.add(String.valueOf(i));\n            }\n        } else if (componentType == long.class) {\n            long[] array = (long[]) value;\n            for (long l : array) {\n                joiner.add(String.valueOf(l));\n            }\n        } else if (componentType == float.class) {\n            float[] array = (float[]) value;\n            for (float v : array) {\n                joiner.add(String.valueOf(v));\n            }\n        } else if (componentType == double.class) {\n            double[] array = (double[]) value;\n            for (double v : array) {\n                joiner.add(String.valueOf(v));\n            }\n        }\n        return joiner.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]appendTableInfo(Field<?, ? extends CharSequence>[])", "name": "appendTableInfo", "arg_nums": 1, "params": [{"name": "fields", "type": "Field<?, ? extends CharSequence>[]"}], "return_type": "String", "signature": "private String appendTableInfo(Field<?, ? extends CharSequence>[] fields)", "original_string": "    private String appendTableInfo(Field<?, ? extends CharSequence>[] fields) {\n        StringBuilder result = new StringBuilder();\n        appendNameToQuery(result, schemaName);\n        if (schemaName != null && !schemaName.isEmpty()) {\n            result.append(DEFAULT_CATALOG_SEPARATOR);\n        }\n        appendNameToQuery(result, tableName);\n        result.append(\" (\");\n        for (int i = 0; i < fields.length; i++) {\n            final String fieldName = fields[i].getName();\n            final boolean sqlIdentifierRequired = isSqlQuoteIdentifierRequiredFor(fieldName);\n            if (sqlIdentifierRequired) {\n                result.append(openSqlIdentifier);\n            }\n            for (int j = 0; j < fieldName.length(); j++) {\n                if (openSqlIdentifier == fieldName.charAt(j)\n                        || closeSqlIdentifier == fieldName.charAt(j)) {\n                    result.append(openSqlIdentifier);\n                }\n                result.append(fieldName.charAt(j));\n            }\n            if (sqlIdentifierRequired) {\n                result.append(closeSqlIdentifier);\n            }\n            if (i < fields.length - 1) {\n                result.append(\", \");\n            }\n        }\n        result.append(\")\");\n        return result.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[void]appendNameToQuery(StringBuilder,String)", "name": "appendNameToQuery", "arg_nums": 2, "params": [{"name": "sb", "type": "StringBuilder"}, {"name": "name", "type": "String"}], "return_type": "void", "signature": "private void appendNameToQuery(StringBuilder sb, String name)", "original_string": "    private void appendNameToQuery(StringBuilder sb, String name) {\n        if (name == null || name.isEmpty()) return;\n        boolean sqlIdentifierRequired = isSqlQuoteIdentifierRequiredFor(name);\n\n        if (sqlIdentifierRequired) {\n            sb.append(openSqlIdentifier);\n        }\n        sb.append(name);\n        if (sqlIdentifierRequired) {\n            sb.append(closeSqlIdentifier);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]generate(Iterable<IN>,Schema<IN, ?>)", "name": "generate", "arg_nums": 2, "params": [{"name": "input", "type": "Iterable<IN>"}, {"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "String", "signature": "@Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema)", "original_string": "    @Override\n    public String generate(Iterable<IN> input, Schema<IN, ?> schema) {\n        if (schema.getFields().length == 0) {\n            return EMPTY_RESULT;\n        }\n        if (input instanceof FakeSequence<?> fakeSequence && fakeSequence.isInfinite()) {\n            throw new IllegalArgumentException(\"The sequence should be finite of size: \" + input);\n        }\n\n        final List<IN> inputs;\n        if (input instanceof FakeStream<IN> fakeStream) {\n            Stream<IN> stream = fakeStream.get();\n            inputs = stream.toList();\n        } else if (input instanceof FakeSequence<?> fakeSequence) {\n            inputs = fakeSequence.get();\n        } else if (input instanceof List<IN> list) {\n            inputs = list;\n        } else {\n            inputs = new ArrayList<>();\n            for (IN o : input) {\n                inputs.add(o);\n            }\n        }\n\n        int limit = inputs.size();\n        if (withBatchMode) {\n            return generateBatchModeStatements(schema, inputs, limit);\n        } else {\n            return generateSeparatedStatements(schema, inputs, limit);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]generate(Schema<IN, ?>,int)", "name": "generate", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<IN, ?>"}, {"name": "limit", "type": "int"}], "return_type": "String", "signature": "@Override\n    public String generate(Schema<IN, ?> schema, int limit)", "original_string": "    @Override\n    public String generate(Schema<IN, ?> schema, int limit) {\n        if (schema.getFields().length == 0) {\n            return EMPTY_RESULT;\n        }\n\n        if (withBatchMode) {\n            return generateBatchModeStatements(schema, null, limit);\n        } else {\n            return generateSeparatedStatements(schema, null, limit);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]getStartStream(Schema<IN, ?>)", "name": "getStartStream", "arg_nums": 1, "params": [{"name": "schema", "type": "Schema<IN, ?>"}], "return_type": "String", "signature": "@Override\n    public String getStartStream(Schema<IN, ?> schema)", "original_string": "    @Override\n    public String getStartStream(Schema<IN, ?> schema) {\n        throw new UnsupportedOperationException(\"Not supported for SQL transformer. Use generate or generateStream instead to create SQL statements.\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]getEndStream()", "name": "getEndStream", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String getEndStream()", "original_string": "    @Override\n    public String getEndStream() {\n        throw new UnsupportedOperationException(\"Not supported for SQL transformer. Use generate or generateStream instead to create SQL statements.\");\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]generateBatchModeStatements(Schema<IN, ?>,List<IN>,int)", "name": "generateBatchModeStatements", "arg_nums": 3, "params": [{"name": "schema", "type": "Schema<IN, ?>"}, {"name": "inputs", "type": "List<IN>"}, {"name": "limit", "type": "int"}], "return_type": "String", "signature": "private String generateBatchModeStatements(Schema<IN, ?> schema, List<IN> inputs, int limit)", "original_string": "    private String generateBatchModeStatements(Schema<IN, ?> schema, List<IN> inputs, int limit) {\n        StringBuilder sb = new StringBuilder();\n        limit = inputs != null ? Math.min(limit, inputs.size()) : limit;\n        for (int i = 0; i < limit; i++) {\n            IN input = inputs != null ? inputs.get(i) : null;\n            sb.append(apply(input, schema, i));\n            if (i == limit - 1 && !sb.isEmpty() || batchSize > 0 && (i + 1) % batchSize == 0) {\n                sb.append(SqlDialect.getLastRowSuffix(dialect, keywordCase));\n                sb.append(\";\");\n                if (i < limit - 1 && !sb.isEmpty()) {\n                    sb.append(LINE_SEPARATOR);\n                }\n            }\n        }\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[Stream<CharSequence>]generateStream(Schema<IN, ?>,long)", "name": "generateStream", "arg_nums": 2, "params": [{"name": "schema", "type": "Schema<IN, ?>"}, {"name": "limit", "type": "long"}], "return_type": "Stream<CharSequence>", "signature": "@Override\n    public Stream<CharSequence> generateStream(final Schema<IN, ?> schema, long limit)", "original_string": "    @Override\n    public Stream<CharSequence> generateStream(final Schema<IN, ?> schema, long limit) {\n        if (schema.getFields().length == 0) {\n            return Stream.empty();\n        }\n\n        if (withBatchMode) {\n            return\n                Stream\n                    .iterate(new Interval(0, batchSize), interval -> interval.start() <= limit, i -> i.add(batchSize))\n                    .map(interval -> {\n                        StringBuilder sb = new StringBuilder();\n\n                        for (int i = interval.start(); i < interval.end() && i < limit; i++) {\n                            sb.append(apply(null, schema, i));\n                        }\n                        sb.append(SqlDialect.getLastRowSuffix(dialect, keywordCase));\n                        sb.append(\";\");\n                        return sb.toString();\n                    });\n        } else {\n            return\n                Stream\n                    .generate(() -> (CharSequence) (apply(null, schema) + \";\"))\n                    .limit(limit);\n        }\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Stream<CharSequence>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer.[String]generateSeparatedStatements(Schema<IN, ?>,List<IN>,int)", "name": "generateSeparatedStatements", "arg_nums": 3, "params": [{"name": "schema", "type": "Schema<IN, ?>"}, {"name": "inputs", "type": "List<IN>"}, {"name": "limit", "type": "int"}], "return_type": "String", "signature": "private String generateSeparatedStatements(Schema<IN, ?> schema, List<IN> inputs, int limit)", "original_string": "    private String generateSeparatedStatements(Schema<IN, ?> schema, List<IN> inputs, int limit) {\n        StringJoiner data = new StringJoiner(LINE_SEPARATOR);\n        limit = inputs != null ? Math.min(limit, inputs.size()) : limit;\n        for (int i = 0; i < limit; i++) {\n            IN input = inputs != null ? inputs.get(i) : null;\n            data.add(apply(input, schema) + \";\");\n        }\n        return data.toString();\n    }", "default_arguments": null, "file": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java", "class_name": "SqlTransformer", "class_uri": "src/main/java/net/datafaker/transformations/sql/SqlTransformer.java.SqlTransformer", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}]